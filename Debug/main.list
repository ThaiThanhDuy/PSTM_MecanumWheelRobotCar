
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f378  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  0800f508  0800f508  00010508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc50  0800fc50  00011280  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc50  0800fc50  00010c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc58  0800fc58  00011280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc58  0800fc58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fc5c  0800fc5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800fc60  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011280  2**0
                  CONTENTS
 10 .bss          00000688  20000280  20000280  00011280  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000908  20000908  00011280  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011280  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ef6  00000000  00000000  000112b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002449  00000000  00000000  000231a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  000255f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9d  00000000  00000000  00026720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003077  00000000  00000000  000274bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143e2  00000000  00000000  0002a534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0944  00000000  00000000  0003e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f25a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000647c  00000000  00000000  0010f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011571c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000280 	.word	0x20000280
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4f0 	.word	0x0800f4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000284 	.word	0x20000284
 80001cc:	0800f4f0 	.word	0x0800f4f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <BNO055_Init>:

// Quaternion components
float qx, qy, qz, qw;
float qx_filtered = 0.0, qy_filtered = 0.0, qz_filtered = 0.0,qw_filtered = 0.0;
const float q_alpha = 0.1; // Filter coefficient for quaternions
void BNO055_Init(I2C_HandleTypeDef *hi2c) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	6078      	str	r0, [r7, #4]
	uint8_t chip_id;
	HAL_I2C_Mem_Read(hi2c, BNO055_ADDRESS, BNO055_CHIP_ID, 1, &chip_id, 1,
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 030f 	add.w	r3, r7, #15
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2200      	movs	r2, #0
 8001000:	2150      	movs	r1, #80	@ 0x50
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f005 fc00 	bl	8006808 <HAL_I2C_Mem_Read>
	if (chip_id != 0xA0) {
		// Handle error: BNO055 not found
	}

	// Set the operation mode to NDOF
	uint8_t mode = 0x0C; // NDOF mode
 8001008:	230c      	movs	r3, #12
 800100a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS, BNO055_OPR_MODE, 1, &mode, 1,
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	223d      	movs	r2, #61	@ 0x3d
 8001020:	2150      	movs	r1, #80	@ 0x50
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 faf6 	bl	8006614 <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
	HAL_Delay(20); // Wait for the mode to change
 8001028:	2014      	movs	r0, #20
 800102a:	f004 ff0b 	bl	8005e44 <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <BNO055_Read_Euler_Angles>:

void BNO055_Read_Euler_Angles(I2C_HandleTypeDef *hi2c, float *yaw, float *pitch,
		float *roll) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af04      	add	r7, sp, #16
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	uint8_t data[6];
	HAL_I2C_Mem_Read(hi2c, BNO055_ADDRESS, BNO055_EULER_H, 1, data, 6,
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2306      	movs	r3, #6
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	221a      	movs	r2, #26
 800105a:	2150      	movs	r1, #80	@ 0x50
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f005 fbd3 	bl	8006808 <HAL_I2C_Mem_Read>
			HAL_MAX_DELAY);

	// Convert the data to float values
	*yaw = (float) ((data[0] | (data[1] << 8)) / 16.0);
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	461a      	mov	r2, r3
 8001066:	7c7b      	ldrb	r3, [r7, #17]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	4313      	orrs	r3, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa59 	bl	8000524 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <BNO055_Read_Euler_Angles+0xb8>)
 8001078:	f7ff fbe8 	bl	800084c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fdb0 	bl	8000be8 <__aeabi_d2f>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	601a      	str	r2, [r3, #0]
	*pitch = (float) ((data[2] | (data[3] << 8)) / 16.0);
 800108e:	7cbb      	ldrb	r3, [r7, #18]
 8001090:	461a      	mov	r2, r3
 8001092:	7cfb      	ldrb	r3, [r7, #19]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	4313      	orrs	r3, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa43 	bl	8000524 <__aeabi_i2d>
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <BNO055_Read_Euler_Angles+0xb8>)
 80010a4:	f7ff fbd2 	bl	800084c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd9a 	bl	8000be8 <__aeabi_d2f>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
	*roll = (float) ((data[4] | (data[5] << 8)) / 16.0);
 80010ba:	7d3b      	ldrb	r3, [r7, #20]
 80010bc:	461a      	mov	r2, r3
 80010be:	7d7b      	ldrb	r3, [r7, #21]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	4313      	orrs	r3, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <BNO055_Read_Euler_Angles+0xb8>)
 80010d0:	f7ff fbbc 	bl	800084c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd84 	bl	8000be8 <__aeabi_d2f>
 80010e0:	4602      	mov	r2, r0
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40300000 	.word	0x40300000
 80010f4:	00000000 	.word	0x00000000

080010f8 <calculateQuaternion>:

void calculateQuaternion(float yaw, float pitch, float roll) {
 80010f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010fc:	b088      	sub	sp, #32
 80010fe:	af00      	add	r7, sp, #0
 8001100:	ed87 0a03 	vstr	s0, [r7, #12]
 8001104:	edc7 0a02 	vstr	s1, [r7, #8]
 8001108:	ed87 1a01 	vstr	s2, [r7, #4]
	// Convert degrees to radians
	float yaw_rad = yaw * (M_PI / 180.0);
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	f20f 5334 	addw	r3, pc, #1332	@ 0x534
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fa6d 	bl	80005f8 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd5f 	bl	8000be8 <__aeabi_d2f>
 800112a:	4603      	mov	r3, r0
 800112c:	61fb      	str	r3, [r7, #28]
	float pitch_rad = pitch * (M_PI / 180.0);
 800112e:	68b8      	ldr	r0, [r7, #8]
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_f2d>
 8001134:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa5c 	bl	80005f8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd4e 	bl	8000be8 <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
	float roll_rad = roll * (M_PI / 180.0);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	f20f 43f0 	addw	r3, pc, #1264	@ 0x4f0
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa4b 	bl	80005f8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fd3d 	bl	8000be8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	617b      	str	r3, [r7, #20]

	// Calculate quaternion components
	qw = cos(yaw_rad / 2) * cos(pitch_rad / 2) * cos(roll_rad / 2)
 8001172:	edd7 7a07 	vldr	s15, [r7, #28]
 8001176:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800117a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800117e:	ee16 0a90 	vmov	r0, s13
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f00c fecb 	bl	800df28 <cos>
 8001192:	ec55 4b10 	vmov	r4, r5, d0
 8001196:	edd7 7a06 	vldr	s15, [r7, #24]
 800119a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	ee16 0a90 	vmov	r0, s13
 80011a6:	f7ff f9cf 	bl	8000548 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b10 	vmov	d0, r2, r3
 80011b2:	f00c feb9 	bl	800df28 <cos>
 80011b6:	ec53 2b10 	vmov	r2, r3, d0
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fa1b 	bl	80005f8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4614      	mov	r4, r2
 80011c8:	461d      	mov	r5, r3
 80011ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80011d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011d6:	ee16 0a90 	vmov	r0, s13
 80011da:	f7ff f9b5 	bl	8000548 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b10 	vmov	d0, r2, r3
 80011e6:	f00c fe9f 	bl	800df28 <cos>
 80011ea:	ec53 2b10 	vmov	r2, r3, d0
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fa01 	bl	80005f8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
			+ sin(yaw_rad / 2) * sin(pitch_rad / 2) * sin(roll_rad / 2);
 80011fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001202:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800120a:	ee16 0a90 	vmov	r0, s13
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b10 	vmov	d0, r2, r3
 800121a:	f00c fed9 	bl	800dfd0 <sin>
 800121e:	ec59 8b10 	vmov	r8, r9, d0
 8001222:	edd7 7a06 	vldr	s15, [r7, #24]
 8001226:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800122a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800122e:	ee16 0a90 	vmov	r0, s13
 8001232:	f7ff f989 	bl	8000548 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f00c fec7 	bl	800dfd0 <sin>
 8001242:	ec53 2b10 	vmov	r2, r3, d0
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9d5 	bl	80005f8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	edd7 7a05 	vldr	s15, [r7, #20]
 800125a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800125e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001262:	ee16 0a90 	vmov	r0, s13
 8001266:	f7ff f96f 	bl	8000548 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	ec43 2b10 	vmov	d0, r2, r3
 8001272:	f00c fead 	bl	800dfd0 <sin>
 8001276:	ec53 2b10 	vmov	r2, r3, d0
 800127a:	4640      	mov	r0, r8
 800127c:	4649      	mov	r1, r9
 800127e:	f7ff f9bb 	bl	80005f8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7fe ffff 	bl	800028c <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fca7 	bl	8000be8 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
	qw = cos(yaw_rad / 2) * cos(pitch_rad / 2) * cos(roll_rad / 2)
 800129c:	4ae6      	ldr	r2, [pc, #920]	@ (8001638 <calculateQuaternion+0x540>)
 800129e:	6013      	str	r3, [r2, #0]
	qx = sin(yaw_rad / 2) * cos(pitch_rad / 2) * cos(roll_rad / 2)
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ac:	ee16 0a90 	vmov	r0, s13
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b10 	vmov	d0, r2, r3
 80012bc:	f00c fe88 	bl	800dfd0 <sin>
 80012c0:	ec55 4b10 	vmov	r4, r5, d0
 80012c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012d0:	ee16 0a90 	vmov	r0, s13
 80012d4:	f7ff f938 	bl	8000548 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f00c fe22 	bl	800df28 <cos>
 80012e4:	ec53 2b10 	vmov	r2, r3, d0
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f984 	bl	80005f8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001300:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001304:	ee16 0a90 	vmov	r0, s13
 8001308:	f7ff f91e 	bl	8000548 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	ec43 2b10 	vmov	d0, r2, r3
 8001314:	f00c fe08 	bl	800df28 <cos>
 8001318:	ec53 2b10 	vmov	r2, r3, d0
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7ff f96a 	bl	80005f8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	461d      	mov	r5, r3
			- cos(yaw_rad / 2) * sin(pitch_rad / 2) * sin(roll_rad / 2);
 800132c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001330:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001334:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001338:	ee16 0a90 	vmov	r0, s13
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b10 	vmov	d0, r2, r3
 8001348:	f00c fdee 	bl	800df28 <cos>
 800134c:	ec59 8b10 	vmov	r8, r9, d0
 8001350:	edd7 7a06 	vldr	s15, [r7, #24]
 8001354:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800135c:	ee16 0a90 	vmov	r0, s13
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b10 	vmov	d0, r2, r3
 800136c:	f00c fe30 	bl	800dfd0 <sin>
 8001370:	ec53 2b10 	vmov	r2, r3, d0
 8001374:	4640      	mov	r0, r8
 8001376:	4649      	mov	r1, r9
 8001378:	f7ff f93e 	bl	80005f8 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4690      	mov	r8, r2
 8001382:	4699      	mov	r9, r3
 8001384:	edd7 7a05 	vldr	s15, [r7, #20]
 8001388:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800138c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001390:	ee16 0a90 	vmov	r0, s13
 8001394:	f7ff f8d8 	bl	8000548 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ec43 2b10 	vmov	d0, r2, r3
 80013a0:	f00c fe16 	bl	800dfd0 <sin>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4640      	mov	r0, r8
 80013aa:	4649      	mov	r1, r9
 80013ac:	f7ff f924 	bl	80005f8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ff66 	bl	8000288 <__aeabi_dsub>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fc10 	bl	8000be8 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
	qx = sin(yaw_rad / 2) * cos(pitch_rad / 2) * cos(roll_rad / 2)
 80013ca:	4a9c      	ldr	r2, [pc, #624]	@ (800163c <calculateQuaternion+0x544>)
 80013cc:	6013      	str	r3, [r2, #0]
	qy = cos(yaw_rad / 2) * sin(pitch_rad / 2) * cos(roll_rad / 2)
 80013ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80013d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013da:	ee16 0a90 	vmov	r0, s13
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ec43 2b10 	vmov	d0, r2, r3
 80013ea:	f00c fd9d 	bl	800df28 <cos>
 80013ee:	ec55 4b10 	vmov	r4, r5, d0
 80013f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fe:	ee16 0a90 	vmov	r0, s13
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	ec43 2b10 	vmov	d0, r2, r3
 800140e:	f00c fddf 	bl	800dfd0 <sin>
 8001412:	ec53 2b10 	vmov	r2, r3, d0
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	461d      	mov	r5, r3
 8001426:	edd7 7a05 	vldr	s15, [r7, #20]
 800142a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800142e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001432:	ee16 0a90 	vmov	r0, s13
 8001436:	f7ff f887 	bl	8000548 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b10 	vmov	d0, r2, r3
 8001442:	f00c fd71 	bl	800df28 <cos>
 8001446:	ec53 2b10 	vmov	r2, r3, d0
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7ff f8d3 	bl	80005f8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
			+ sin(yaw_rad / 2) * cos(pitch_rad / 2) * sin(roll_rad / 2);
 800145a:	edd7 7a07 	vldr	s15, [r7, #28]
 800145e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001462:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001466:	ee16 0a90 	vmov	r0, s13
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	ec43 2b10 	vmov	d0, r2, r3
 8001476:	f00c fdab 	bl	800dfd0 <sin>
 800147a:	ec59 8b10 	vmov	r8, r9, d0
 800147e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001482:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001486:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800148a:	ee16 0a90 	vmov	r0, s13
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	ec43 2b10 	vmov	d0, r2, r3
 800149a:	f00c fd45 	bl	800df28 <cos>
 800149e:	ec53 2b10 	vmov	r2, r3, d0
 80014a2:	4640      	mov	r0, r8
 80014a4:	4649      	mov	r1, r9
 80014a6:	f7ff f8a7 	bl	80005f8 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4690      	mov	r8, r2
 80014b0:	4699      	mov	r9, r3
 80014b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014be:	ee16 0a90 	vmov	r0, s13
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ec43 2b10 	vmov	d0, r2, r3
 80014ce:	f00c fd7f 	bl	800dfd0 <sin>
 80014d2:	ec53 2b10 	vmov	r2, r3, d0
 80014d6:	4640      	mov	r0, r8
 80014d8:	4649      	mov	r1, r9
 80014da:	f7ff f88d 	bl	80005f8 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7fe fed1 	bl	800028c <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb79 	bl	8000be8 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
	qy = cos(yaw_rad / 2) * sin(pitch_rad / 2) * cos(roll_rad / 2)
 80014f8:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <calculateQuaternion+0x548>)
 80014fa:	6013      	str	r3, [r2, #0]
	qz = cos(yaw_rad / 2) * cos(pitch_rad / 2) * sin(roll_rad / 2)
 80014fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001500:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001504:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001508:	ee16 0a90 	vmov	r0, s13
 800150c:	f7ff f81c 	bl	8000548 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	ec43 2b10 	vmov	d0, r2, r3
 8001518:	f00c fd06 	bl	800df28 <cos>
 800151c:	ec55 4b10 	vmov	r4, r5, d0
 8001520:	edd7 7a06 	vldr	s15, [r7, #24]
 8001524:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001528:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800152c:	ee16 0a90 	vmov	r0, s13
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b10 	vmov	d0, r2, r3
 800153c:	f00c fcf4 	bl	800df28 <cos>
 8001540:	ec53 2b10 	vmov	r2, r3, d0
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4614      	mov	r4, r2
 8001552:	461d      	mov	r5, r3
 8001554:	edd7 7a05 	vldr	s15, [r7, #20]
 8001558:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800155c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001560:	ee16 0a90 	vmov	r0, s13
 8001564:	f7fe fff0 	bl	8000548 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b10 	vmov	d0, r2, r3
 8001570:	f00c fd2e 	bl	800dfd0 <sin>
 8001574:	ec53 2b10 	vmov	r2, r3, d0
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7ff f83c 	bl	80005f8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
			- sin(yaw_rad / 2) * sin(pitch_rad / 2) * cos(roll_rad / 2);
 8001588:	edd7 7a07 	vldr	s15, [r7, #28]
 800158c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001590:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001594:	ee16 0a90 	vmov	r0, s13
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	ec43 2b10 	vmov	d0, r2, r3
 80015a4:	f00c fd14 	bl	800dfd0 <sin>
 80015a8:	ec59 8b10 	vmov	r8, r9, d0
 80015ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015b8:	ee16 0a90 	vmov	r0, s13
 80015bc:	f7fe ffc4 	bl	8000548 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	ec43 2b10 	vmov	d0, r2, r3
 80015c8:	f00c fd02 	bl	800dfd0 <sin>
 80015cc:	ec53 2b10 	vmov	r2, r3, d0
 80015d0:	4640      	mov	r0, r8
 80015d2:	4649      	mov	r1, r9
 80015d4:	f7ff f810 	bl	80005f8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ec:	ee16 0a90 	vmov	r0, s13
 80015f0:	f7fe ffaa 	bl	8000548 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	ec43 2b10 	vmov	d0, r2, r3
 80015fc:	f00c fc94 	bl	800df28 <cos>
 8001600:	ec53 2b10 	vmov	r2, r3, d0
 8001604:	4640      	mov	r0, r8
 8001606:	4649      	mov	r1, r9
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe fe38 	bl	8000288 <__aeabi_dsub>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fae2 	bl	8000be8 <__aeabi_d2f>
 8001624:	4603      	mov	r3, r0
	qz = cos(yaw_rad / 2) * cos(pitch_rad / 2) * sin(roll_rad / 2)
 8001626:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <calculateQuaternion+0x54c>)
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	200002c0 	.word	0x200002c0
 800163c:	200002b4 	.word	0x200002b4
 8001640:	200002b8 	.word	0x200002b8
 8001644:	200002bc 	.word	0x200002bc
 8001648:	a2529d39 	.word	0xa2529d39
 800164c:	3f91df46 	.word	0x3f91df46

08001650 <readBNO055>:

void readBNO055(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	// Read raw Euler angles from the BNO055
	BNO055_Read_Euler_Angles(&hi2c1, &yaw, &pitch, &roll);
 8001656:	4b9f      	ldr	r3, [pc, #636]	@ (80018d4 <readBNO055+0x284>)
 8001658:	4a9f      	ldr	r2, [pc, #636]	@ (80018d8 <readBNO055+0x288>)
 800165a:	49a0      	ldr	r1, [pc, #640]	@ (80018dc <readBNO055+0x28c>)
 800165c:	48a0      	ldr	r0, [pc, #640]	@ (80018e0 <readBNO055+0x290>)
 800165e:	f7ff fceb 	bl	8001038 <BNO055_Read_Euler_Angles>

	// Normalize yaw to be within 0 to 360 degrees
	//  yaw = fmod(yaw, 360.0);

	// Convert yaw from 0-360 to 360-0
	yaw = 360.0 - yaw;
 8001662:	4b9e      	ldr	r3, [pc, #632]	@ (80018dc <readBNO055+0x28c>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80018e4 <readBNO055+0x294>
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	4b9a      	ldr	r3, [pc, #616]	@ (80018dc <readBNO055+0x28c>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
	if (yaw < 0) {
 8001676:	4b99      	ldr	r3, [pc, #612]	@ (80018dc <readBNO055+0x28c>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d509      	bpl.n	800169a <readBNO055+0x4a>
		yaw += 360.0; // Wrap around if negative
 8001686:	4b95      	ldr	r3, [pc, #596]	@ (80018dc <readBNO055+0x28c>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80018e4 <readBNO055+0x294>
 8001690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001694:	4b91      	ldr	r3, [pc, #580]	@ (80018dc <readBNO055+0x28c>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
	}
	// Apply low-pass filter to yaw, roll, and pitch
	yaw_filtered = alpha * yaw + (1 - alpha) * yaw_filtered;
 800169a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80018e8 <readBNO055+0x298>
 800169e:	4b8f      	ldr	r3, [pc, #572]	@ (80018dc <readBNO055+0x28c>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a8:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 80018e8 <readBNO055+0x298>
 80016ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016b4:	4b8d      	ldr	r3, [pc, #564]	@ (80018ec <readBNO055+0x29c>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	4b8a      	ldr	r3, [pc, #552]	@ (80018ec <readBNO055+0x29c>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
	roll_filtered = alpha * roll + (1 - alpha) * roll_filtered;
 80016c8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80018e8 <readBNO055+0x298>
 80016cc:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <readBNO055+0x284>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	eddf 7a84 	vldr	s15, [pc, #528]	@ 80018e8 <readBNO055+0x298>
 80016da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016e2:	4b83      	ldr	r3, [pc, #524]	@ (80018f0 <readBNO055+0x2a0>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <readBNO055+0x2a0>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]
	pitch_filtered = alpha * pitch + (1 - alpha) * pitch_filtered;
 80016f6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80018e8 <readBNO055+0x298>
 80016fa:	4b77      	ldr	r3, [pc, #476]	@ (80018d8 <readBNO055+0x288>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001704:	eddf 7a78 	vldr	s15, [pc, #480]	@ 80018e8 <readBNO055+0x298>
 8001708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800170c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001710:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <readBNO055+0x2a4>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <readBNO055+0x2a4>)
 8001720:	edc3 7a00 	vstr	s15, [r3]

	// Calculate quaternion from filtered Euler angles
	calculateQuaternion(yaw_filtered, pitch_filtered, roll_filtered);
 8001724:	4b71      	ldr	r3, [pc, #452]	@ (80018ec <readBNO055+0x29c>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	4b72      	ldr	r3, [pc, #456]	@ (80018f4 <readBNO055+0x2a4>)
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	4b6f      	ldr	r3, [pc, #444]	@ (80018f0 <readBNO055+0x2a0>)
 8001732:	edd3 6a00 	vldr	s13, [r3]
 8001736:	eeb0 1a66 	vmov.f32	s2, s13
 800173a:	eef0 0a47 	vmov.f32	s1, s14
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	f7ff fcd9 	bl	80010f8 <calculateQuaternion>
	float norm = sqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 8001746:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <readBNO055+0x2a8>)
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <readBNO055+0x2a8>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001756:	4b69      	ldr	r3, [pc, #420]	@ (80018fc <readBNO055+0x2ac>)
 8001758:	edd3 6a00 	vldr	s13, [r3]
 800175c:	4b67      	ldr	r3, [pc, #412]	@ (80018fc <readBNO055+0x2ac>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176a:	4b65      	ldr	r3, [pc, #404]	@ (8001900 <readBNO055+0x2b0>)
 800176c:	edd3 6a00 	vldr	s13, [r3]
 8001770:	4b63      	ldr	r3, [pc, #396]	@ (8001900 <readBNO055+0x2b0>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177e:	4b61      	ldr	r3, [pc, #388]	@ (8001904 <readBNO055+0x2b4>)
 8001780:	edd3 6a00 	vldr	s13, [r3]
 8001784:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <readBNO055+0x2b4>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001792:	ee17 0a90 	vmov	r0, s15
 8001796:	f7fe fed7 	bl	8000548 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b10 	vmov	d0, r2, r3
 80017a2:	f00c fb95 	bl	800ded0 <sqrt>
 80017a6:	ec53 2b10 	vmov	r2, r3, d0
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff fa1b 	bl	8000be8 <__aeabi_d2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	607b      	str	r3, [r7, #4]
	if (norm > 0.0) {
 80017b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd27      	ble.n	8001814 <readBNO055+0x1c4>
		qw /= norm;
 80017c4:	4b4c      	ldr	r3, [pc, #304]	@ (80018f8 <readBNO055+0x2a8>)
 80017c6:	edd3 6a00 	vldr	s13, [r3]
 80017ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d2:	4b49      	ldr	r3, [pc, #292]	@ (80018f8 <readBNO055+0x2a8>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
		qx /= norm;
 80017d8:	4b48      	ldr	r3, [pc, #288]	@ (80018fc <readBNO055+0x2ac>)
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e6:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <readBNO055+0x2ac>)
 80017e8:	edc3 7a00 	vstr	s15, [r3]
		qy /= norm;
 80017ec:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <readBNO055+0x2b0>)
 80017ee:	edd3 6a00 	vldr	s13, [r3]
 80017f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <readBNO055+0x2b0>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
		qz /= norm;
 8001800:	4b40      	ldr	r3, [pc, #256]	@ (8001904 <readBNO055+0x2b4>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	ed97 7a01 	vldr	s14, [r7, #4]
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <readBNO055+0x2b4>)
 8001810:	edc3 7a00 	vstr	s15, [r3]
	}
	// Apply low-pass filter to quaternion components
	qx_filtered = q_alpha * qx + (1 - q_alpha) * qx_filtered;
 8001814:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80018e8 <readBNO055+0x298>
 8001818:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <readBNO055+0x2ac>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001822:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80018e8 <readBNO055+0x298>
 8001826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800182a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800182e:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <readBNO055+0x2b8>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <readBNO055+0x2b8>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
	qy_filtered = q_alpha * qy + (1 - q_alpha) * qy_filtered;
 8001842:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80018e8 <readBNO055+0x298>
 8001846:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <readBNO055+0x2b0>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80018e8 <readBNO055+0x298>
 8001854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001858:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <readBNO055+0x2bc>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <readBNO055+0x2bc>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
	qz_filtered = q_alpha * qz + (1 - q_alpha) * qz_filtered;
 8001870:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80018e8 <readBNO055+0x298>
 8001874:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <readBNO055+0x2b4>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80018e8 <readBNO055+0x298>
 8001882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001886:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <readBNO055+0x2c0>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <readBNO055+0x2c0>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
	qw_filtered = q_alpha * qw + (1 - q_alpha) * qw_filtered;
 800189e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80018e8 <readBNO055+0x298>
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <readBNO055+0x2a8>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ac:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80018e8 <readBNO055+0x298>
 80018b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <readBNO055+0x2c4>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <readBNO055+0x2c4>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
	// Output the filtered values and quaternion
	/* printf("Filtered Yaw: %.2f\n", yaw_filtered);
	 printf("Filtered Roll: %.2f\n", roll_filtered);
	 printf("Filtered Pitch: %.2f\n", pitch_filtered);
	 printf("Quaternion: qx: %.4f, qy: %.4f, qz: %.4f, qw: %.4f\n", qx, qy, qz, qw);*/
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200002a4 	.word	0x200002a4
 80018d8:	200002a0 	.word	0x200002a0
 80018dc:	2000029c 	.word	0x2000029c
 80018e0:	200004d4 	.word	0x200004d4
 80018e4:	43b40000 	.word	0x43b40000
 80018e8:	3dcccccd 	.word	0x3dcccccd
 80018ec:	200002a8 	.word	0x200002a8
 80018f0:	200002b0 	.word	0x200002b0
 80018f4:	200002ac 	.word	0x200002ac
 80018f8:	200002c0 	.word	0x200002c0
 80018fc:	200002b4 	.word	0x200002b4
 8001900:	200002b8 	.word	0x200002b8
 8001904:	200002bc 	.word	0x200002bc
 8001908:	200002c4 	.word	0x200002c4
 800190c:	200002c8 	.word	0x200002c8
 8001910:	200002cc 	.word	0x200002cc
 8001914:	200002d0 	.word	0x200002d0

08001918 <sendJointState>:
float linear_x, linear_y, angular_z;
float value1, value2, value3, value4;

/// SEND DATA

void sendJointState(float lx, float ly, float az, float yaw) {
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b08c      	sub	sp, #48	@ 0x30
 800191e:	af08      	add	r7, sp, #32
 8001920:	ed87 0a03 	vstr	s0, [r7, #12]
 8001924:	edc7 0a02 	vstr	s1, [r7, #8]
 8001928:	ed87 1a01 	vstr	s2, [r7, #4]
 800192c:	edc7 1a00 	vstr	s3, [r7]

	// Format the joint state message into the buffer
	snprintf(txBuffer, sizeof(txBuffer), "x:%.2f y:%.2f z:%.2f o:%.2f\n", lx,
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7fe fe09 	bl	8000548 <__aeabi_f2d>
 8001936:	4604      	mov	r4, r0
 8001938:	460d      	mov	r5, r1
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f7fe fe04 	bl	8000548 <__aeabi_f2d>
 8001940:	4680      	mov	r8, r0
 8001942:	4689      	mov	r9, r1
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7fe fdff 	bl	8000548 <__aeabi_f2d>
 800194a:	4682      	mov	sl, r0
 800194c:	468b      	mov	fp, r1
 800194e:	6838      	ldr	r0, [r7, #0]
 8001950:	f7fe fdfa 	bl	8000548 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800195c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001960:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001964:	e9cd 4500 	strd	r4, r5, [sp]
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <sendJointState+0x80>)
 800196a:	2164      	movs	r1, #100	@ 0x64
 800196c:	480b      	ldr	r0, [pc, #44]	@ (800199c <sendJointState+0x84>)
 800196e:	f009 fba7 	bl	800b0c0 <sniprintf>
			ly, az, yaw);

	// Transmit the complete message over UART
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, strlen(txBuffer),
 8001972:	480a      	ldr	r0, [pc, #40]	@ (800199c <sendJointState+0x84>)
 8001974:	f7fe fc7c 	bl	8000270 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	b29a      	uxth	r2, r3
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	4906      	ldr	r1, [pc, #24]	@ (800199c <sendJointState+0x84>)
 8001982:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <sendJointState+0x88>)
 8001984:	f007 f994 	bl	8008cb0 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	// Optional delay to prevent flooding the UART
	HAL_Delay(100);
 8001988:	2064      	movs	r0, #100	@ 0x64
 800198a:	f004 fa5b 	bl	8005e44 <HAL_Delay>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001998:	0800f508 	.word	0x0800f508
 800199c:	200002f4 	.word	0x200002f4
 80019a0:	20000768 	.word	0x20000768

080019a4 <UART_ReceiveString>:

/// REVICE DATA ///

void UART_ReceiveString(uint8_t *buffer, size_t length) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	// Clear the buffer before receiving new data
	memset(buffer, 0, length); // Clear the buffer
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	2100      	movs	r1, #0
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f009 fcb0 	bl	800b318 <memset>

	// Receive data with a timeout of 256 ms
	if (HAL_UART_Receive(&huart2, buffer, length - 1, 256) == HAL_OK) {
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	480a      	ldr	r0, [pc, #40]	@ (80019f0 <UART_ReceiveString+0x4c>)
 80019c8:	f007 f9fd 	bl	8008dc6 <HAL_UART_Receive>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <UART_ReceiveString+0x3c>
		buffer[length - 1] = '\0'; // Null-terminate the string
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
	} else {
		// Handle reception error
		printf("UART reception error\n");
	}
}
 80019de:	e002      	b.n	80019e6 <UART_ReceiveString+0x42>
		printf("UART reception error\n");
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <UART_ReceiveString+0x50>)
 80019e2:	f009 fb65 	bl	800b0b0 <puts>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000768 	.word	0x20000768
 80019f4:	0800f528 	.word	0x0800f528

080019f8 <ReadFourFloats>:
void ReadFourFloats(float *linearX, float *linearY, float *angularZ) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	@ 0x30
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	HAL_Delay(100); // Wait for 100 ms before receiving new data
 8001a04:	2064      	movs	r0, #100	@ 0x64
 8001a06:	f004 fa1d 	bl	8005e44 <HAL_Delay>
	UART_ReceiveString(buffer, sizeof(buffer)); // Receive the string from UART
 8001a0a:	211e      	movs	r1, #30
 8001a0c:	485a      	ldr	r0, [pc, #360]	@ (8001b78 <ReadFourFloats+0x180>)
 8001a0e:	f7ff ffc9 	bl	80019a4 <UART_ReceiveString>
	// Example input: "c: 0.1, 0.1, 0.1"

	// Print the received buffer for debugging
	printf("Received buffer: %s\n", buffer);
 8001a12:	4959      	ldr	r1, [pc, #356]	@ (8001b78 <ReadFourFloats+0x180>)
 8001a14:	4859      	ldr	r0, [pc, #356]	@ (8001b7c <ReadFourFloats+0x184>)
 8001a16:	f009 fae3 	bl	800afe0 <iprintf>

	// Pointer to the start of the buffer
	char *start = (char*) buffer;
 8001a1a:	4b57      	ldr	r3, [pc, #348]	@ (8001b78 <ReadFourFloats+0x180>)
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Static variables to hold the last known values
	static float oldLinearX = 0.0, oldLinearY = 0.0, oldAngularZ = 0.0;

	// Loop to find and process all valid messages
	while ((start = strstr(start, "c:")) != NULL) {
 8001a1e:	e09d      	b.n	8001b5c <ReadFourFloats+0x164>
		// Move the pointer past "c:"
		char *data = start + 2;
 8001a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a22:	3302      	adds	r3, #2
 8001a24:	61fb      	str	r3, [r7, #28]

		// Find the end of the message (next 'c:' or end of buffer)
		char *end = strstr(data, "c:");
 8001a26:	4956      	ldr	r1, [pc, #344]	@ (8001b80 <ReadFourFloats+0x188>)
 8001a28:	69f8      	ldr	r0, [r7, #28]
 8001a2a:	f009 fceb 	bl	800b404 <strstr>
 8001a2e:	61b8      	str	r0, [r7, #24]
		if (end != NULL) {
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <ReadFourFloats+0x44>
			*end = '\0'; // Temporarily terminate the string for parsing
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
		}

		// Print the data after the prefix for debugging
		printf("Data after prefix: %s\n", data);
 8001a3c:	69f9      	ldr	r1, [r7, #28]
 8001a3e:	4851      	ldr	r0, [pc, #324]	@ (8001b84 <ReadFourFloats+0x18c>)
 8001a40:	f009 face 	bl	800afe0 <iprintf>

		// Parse the string
		char *token = strtok(data, ",");
 8001a44:	4950      	ldr	r1, [pc, #320]	@ (8001b88 <ReadFourFloats+0x190>)
 8001a46:	69f8      	ldr	r0, [r7, #28]
 8001a48:	f009 fc80 	bl	800b34c <strtok>
 8001a4c:	6178      	str	r0, [r7, #20]

		float newLinearX = 0.0, newLinearY = 0.0, newAngularZ = 0.0;
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]

		if (token != NULL) {
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <ReadFourFloats+0x94>
			newLinearX = atof(token); // Convert to float
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f007 fd74 	bl	8009554 <atof>
 8001a6c:	ec53 2b10 	vmov	r2, r3, d0
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f8b8 	bl	8000be8 <__aeabi_d2f>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("Parsed linearX: %.2f\n", newLinearX);
 8001a7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a7e:	f7fe fd63 	bl	8000548 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4841      	ldr	r0, [pc, #260]	@ (8001b8c <ReadFourFloats+0x194>)
 8001a88:	f009 faaa 	bl	800afe0 <iprintf>
		}

		token = strtok(NULL, ",");
 8001a8c:	493e      	ldr	r1, [pc, #248]	@ (8001b88 <ReadFourFloats+0x190>)
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f009 fc5c 	bl	800b34c <strtok>
 8001a94:	6178      	str	r0, [r7, #20]
		if (token != NULL) {
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d012      	beq.n	8001ac2 <ReadFourFloats+0xca>
			newLinearY = atof(token); // Convert to float
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f007 fd59 	bl	8009554 <atof>
 8001aa2:	ec53 2b10 	vmov	r2, r3, d0
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f89d 	bl	8000be8 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
			printf("Parsed linearY: %.2f\n", newLinearY);
 8001ab2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4834      	ldr	r0, [pc, #208]	@ (8001b90 <ReadFourFloats+0x198>)
 8001abe:	f009 fa8f 	bl	800afe0 <iprintf>
		}

		token = strtok(NULL, ",");
 8001ac2:	4931      	ldr	r1, [pc, #196]	@ (8001b88 <ReadFourFloats+0x190>)
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f009 fc41 	bl	800b34c <strtok>
 8001aca:	6178      	str	r0, [r7, #20]
		if (token != NULL) {
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d012      	beq.n	8001af8 <ReadFourFloats+0x100>
			newAngularZ = atof(token); // Convert to float
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f007 fd3e 	bl	8009554 <atof>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f882 	bl	8000be8 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	623b      	str	r3, [r7, #32]
			printf("Parsed angularZ: %.2f\n", newAngularZ);
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f7fe fd2d 	bl	8000548 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4828      	ldr	r0, [pc, #160]	@ (8001b94 <ReadFourFloats+0x19c>)
 8001af4:	f009 fa74 	bl	800afe0 <iprintf>
		}

		// Check if new values are different from old values
		if (newLinearX != oldLinearX || newLinearY != oldLinearY
 8001af8:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <ReadFourFloats+0x1a0>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b02:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	d113      	bne.n	8001b34 <ReadFourFloats+0x13c>
 8001b0c:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <ReadFourFloats+0x1a4>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b16:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	d109      	bne.n	8001b34 <ReadFourFloats+0x13c>
				|| newAngularZ != oldAngularZ) {
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <ReadFourFloats+0x1a8>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	d011      	beq.n	8001b58 <ReadFourFloats+0x160>
			*linearX = newLinearX;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b38:	601a      	str	r2, [r3, #0]
			*linearY = newLinearY;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b3e:	601a      	str	r2, [r3, #0]
			*angularZ = newAngularZ;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a3a      	ldr	r2, [r7, #32]
 8001b44:	601a      	str	r2, [r3, #0]

			oldLinearX = newLinearX;
 8001b46:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <ReadFourFloats+0x1a0>)
 8001b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4a:	6013      	str	r3, [r2, #0]
			oldLinearY = newLinearY;
 8001b4c:	4a13      	ldr	r2, [pc, #76]	@ (8001b9c <ReadFourFloats+0x1a4>)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	6013      	str	r3, [r2, #0]
			oldAngularZ = newAngularZ;
 8001b52:	4a13      	ldr	r2, [pc, #76]	@ (8001ba0 <ReadFourFloats+0x1a8>)
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	6013      	str	r3, [r2, #0]
		}

		// Move the start pointer to the end of the current message for the next iteration
		start = end;
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while ((start = strstr(start, "c:")) != NULL) {
 8001b5c:	4908      	ldr	r1, [pc, #32]	@ (8001b80 <ReadFourFloats+0x188>)
 8001b5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b60:	f009 fc50 	bl	800b404 <strstr>
 8001b64:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f af59 	bne.w	8001a20 <ReadFourFloats+0x28>
	}
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3730      	adds	r7, #48	@ 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200002d4 	.word	0x200002d4
 8001b7c:	0800f540 	.word	0x0800f540
 8001b80:	0800f558 	.word	0x0800f558
 8001b84:	0800f55c 	.word	0x0800f55c
 8001b88:	0800f574 	.word	0x0800f574
 8001b8c:	0800f578 	.word	0x0800f578
 8001b90:	0800f590 	.word	0x0800f590
 8001b94:	0800f5a8 	.word	0x0800f5a8
 8001b98:	200004b8 	.word	0x200004b8
 8001b9c:	200004bc 	.word	0x200004bc
 8001ba0:	200004c0 	.word	0x200004c0
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <moving_average_filter1>:
float angular_position_deg1 = 0.0; // Angular position in degrees
float realVel1;
float realRPM1;

// Function to calculate exponential moving average
float moving_average_filter1(float new_velocity) {
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema1 = 0.0; // Initialize EMA variable
	ema1 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema1);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fcc8 	bl	8000548 <__aeabi_f2d>
 8001bb8:	a318      	add	r3, pc, #96	@ (adr r3, 8001c1c <moving_average_filter1+0x74>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fd1b 	bl	80005f8 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <moving_average_filter1+0x70>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcba 	bl	8000548 <__aeabi_f2d>
 8001bd4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001c10 <moving_average_filter1+0x68>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fd0d 	bl	80005f8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4620      	mov	r0, r4
 8001be4:	4629      	mov	r1, r5
 8001be6:	f7fe fb51 	bl	800028c <__adddf3>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fff9 	bl	8000be8 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <moving_average_filter1+0x70>)
 8001bfa:	6013      	str	r3, [r2, #0]
	return ema1;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <moving_average_filter1+0x70>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	ee07 3a90 	vmov	s15, r3
}
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fe99999 	.word	0x3fe99999
 8001c18:	200004c4 	.word	0x200004c4
 8001c1c:	9999999a 	.word	0x9999999a
 8001c20:	3fc99999 	.word	0x3fc99999
 8001c24:	00000000 	.word	0x00000000

08001c28 <calculate_pwm1>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm1(float desired_velocity) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8001c32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	d505      	bpl.n	8001c4c <calculate_pwm1+0x24>
		desired_velocity = -desired_velocity;
 8001c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c44:	eef1 7a67 	vneg.f32	s15, s15
 8001c48:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7fe fc7b 	bl	8000548 <__aeabi_f2d>
 8001c52:	a310      	add	r3, pc, #64	@ (adr r3, 8001c94 <calculate_pwm1+0x6c>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fdf8 	bl	800084c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <calculate_pwm1+0x68>)
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ffb7 	bl	8000be8 <__aeabi_d2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	ee07 3a90 	vmov	s15, r3
}
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	408f4000 	.word	0x408f4000
 8001c94:	147ae148 	.word	0x147ae148
 8001c98:	3fd147ae 	.word	0x3fd147ae

08001c9c <PID_Controller1>:

// PID Controller Function with Anti-Windup
float PID_Controller1(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b08d      	sub	sp, #52	@ 0x34
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	ed87 0a07 	vstr	s0, [r7, #28]
 8001ca6:	edc7 0a06 	vstr	s1, [r7, #24]
 8001caa:	ed87 1a05 	vstr	s2, [r7, #20]
 8001cae:	6138      	str	r0, [r7, #16]
 8001cb0:	edc7 1a03 	vstr	s3, [r7, #12]
 8001cb4:	ed87 2a02 	vstr	s4, [r7, #8]
 8001cb8:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error1 = setpoint - measured_value;
 8001cbc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error1;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	ed93 7a00 	vldr	s14, [r3]
 8001cd2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001d70 <PID_Controller1+0xd4>
 8001cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	dd03      	ble.n	8001cfc <PID_Controller1+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d74 <PID_Controller1+0xd8>)
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e00c      	b.n	8001d16 <PID_Controller1+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001d78 <PID_Controller1+0xdc>
 8001d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d502      	bpl.n	8001d16 <PID_Controller1+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	@ (8001d7c <PID_Controller1+0xe0>)
 8001d14:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative1 = error1 - last_error;
 8001d16:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output1 = (Kp * error1) + (Ki * (*integral)) + (Kd * derivative1);
 8001d26:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d2a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error1;
 8001d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5a:	60fb      	str	r3, [r7, #12]

	return output1; // Return the control output
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	ee07 3a90 	vmov	s15, r3
}
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	3734      	adds	r7, #52	@ 0x34
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	42c80000 	.word	0x42c80000
 8001d74:	42c80000 	.word	0x42c80000
 8001d78:	c2c80000 	.word	0xc2c80000
 8001d7c:	c2c80000 	.word	0xc2c80000

08001d80 <calculateVel1>:

int32_t current_pulse_count1 = 0;
float distance_traveled1 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel1(float velTag1, float current_time1) {
 8001d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d8c:	edc7 0a00 	vstr	s1, [r7]

	// Check if velTag1 is within the deadband
	if (fabs(velTag1) < DEAD_BAND) {
 8001d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d94:	eef0 7ae7 	vabs.f32	s15, s15
 8001d98:	ee17 0a90 	vmov	r0, s15
 8001d9c:	f7fe fbd4 	bl	8000548 <__aeabi_f2d>
 8001da0:	a382      	add	r3, pc, #520	@ (adr r3, 8001fac <calculateVel1+0x22c>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fe99 	bl	8000adc <__aeabi_dcmplt>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <calculateVel1+0x36>
		velTag1 = 0; // Set velTag1 to zero if within deadband
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag1 is 0
	if (velTag1 == 0) {
 8001db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d13c      	bne.n	8001e3e <calculateVel1+0xbe>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001dc4:	4b68      	ldr	r3, [pc, #416]	@ (8001f68 <calculateVel1+0x1e8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001dcc:	4b66      	ldr	r3, [pc, #408]	@ (8001f68 <calculateVel1+0x1e8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	@ 0x38
		vel1 = 0.0;
 8001dd4:	4b65      	ldr	r3, [pc, #404]	@ (8001f6c <calculateVel1+0x1ec>)
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001ddc:	4b64      	ldr	r3, [pc, #400]	@ (8001f70 <calculateVel1+0x1f0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm1 = 0.0;
 8001de4:	4963      	ldr	r1, [pc, #396]	@ (8001f74 <calculateVel1+0x1f4>)
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9c1 2300 	strd	r2, r3, [r1]
		control_output1 = 0.0;
 8001df2:	4b61      	ldr	r3, [pc, #388]	@ (8001f78 <calculateVel1+0x1f8>)
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad1
		realVel1 = 0.0;
 8001dfa:	4b60      	ldr	r3, [pc, #384]	@ (8001f7c <calculateVel1+0x1fc>)
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
		realRPM1 = 0.0;
 8001e02:	4b5f      	ldr	r3, [pc, #380]	@ (8001f80 <calculateVel1+0x200>)
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
		integral1_1 = 0.0;
 8001e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8001f84 <calculateVel1+0x204>)
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
		last_error1 = 0.0;
 8001e12:	4b5d      	ldr	r3, [pc, #372]	@ (8001f88 <calculateVel1+0x208>)
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
		last_control_output1 = 0.0;
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f8c <calculateVel1+0x20c>)
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
		distance_traveled1 = 0.0;
 8001e22:	4b5b      	ldr	r3, [pc, #364]	@ (8001f90 <calculateVel1+0x210>)
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
		pulse_count1 = 0; // Reset pulse count
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f94 <calculateVel1+0x214>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
		last_velTag1 = velTag1; // Update last velTag1
 8001e30:	4a59      	ldr	r2, [pc, #356]	@ (8001f98 <calculateVel1+0x218>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f004 f804 	bl	8005e44 <HAL_Delay>
		return; // Exit the function
 8001e3c:	e33f      	b.n	80024be <calculateVel1+0x73e>
	}

	// Calculate the time elapsed since the last update
	float delta_time1 = current_time1 - last_time1;
 8001e3e:	4b57      	ldr	r3, [pc, #348]	@ (8001f9c <calculateVel1+0x21c>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ed97 7a00 	vldr	s14, [r7]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001e50:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <calculateVel1+0x1f0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b51      	ldr	r3, [pc, #324]	@ (8001fa0 <calculateVel1+0x220>)
 8001e5a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8001e5c:	200a      	movs	r0, #10
 8001e5e:	f003 fff1 	bl	8005e44 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference1 = current_pulse_count1 - pulse_count1;
 8001e62:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa0 <calculateVel1+0x220>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b4a      	ldr	r3, [pc, #296]	@ (8001f94 <calculateVel1+0x214>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm1 = fabs((float) pulse_difference1 / (float) PPR) * 60.0; // Always positive
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001e7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e82:	eef0 7ae7 	vabs.f32	s15, s15
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb5d 	bl	8000548 <__aeabi_f2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b44      	ldr	r3, [pc, #272]	@ (8001fa4 <calculateVel1+0x224>)
 8001e94:	f7fe fbb0 	bl	80005f8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4935      	ldr	r1, [pc, #212]	@ (8001f74 <calculateVel1+0x1f4>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count1 = current_pulse_count1;
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <calculateVel1+0x220>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8001f94 <calculateVel1+0x214>)
 8001eaa:	601a      	str	r2, [r3, #0]

	// Limit RPM to the range [0, 250]
	rpm1 = fmax(0.0, fmin(250.0, rpm1));
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <calculateVel1+0x1f4>)
 8001eae:	ed93 7b00 	vldr	d7, [r3]
 8001eb2:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001f50 <calculateVel1+0x1d0>
 8001eb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001eba:	eef0 0a67 	vmov.f32	s1, s15
 8001ebe:	f00c f905 	bl	800e0cc <fmin>
 8001ec2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec6:	eef0 7a60 	vmov.f32	s15, s1
 8001eca:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001f58 <calculateVel1+0x1d8>
 8001ece:	eeb0 0a47 	vmov.f32	s0, s14
 8001ed2:	eef0 0a67 	vmov.f32	s1, s15
 8001ed6:	f00c f8cf 	bl	800e078 <fmax>
 8001eda:	eeb0 7a40 	vmov.f32	s14, s0
 8001ede:	eef0 7a60 	vmov.f32	s15, s1
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <calculateVel1+0x1f4>)
 8001ee4:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s) v=w*dia
	float new_vel1;
	if (pulse_difference1 < 0) {
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da62      	bge.n	8001fb4 <calculateVel1+0x234>
		new_vel1 = -((rpm1 / 60.0) * dia1 * M_PI); // Negative velocity for reverse direction
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <calculateVel1+0x1f4>)
 8001ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <calculateVel1+0x224>)
 8001efa:	f7fe fca7 	bl	800084c <__aeabi_ddiv>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4614      	mov	r4, r2
 8001f04:	461d      	mov	r5, r3
 8001f06:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <calculateVel1+0x228>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb1c 	bl	8000548 <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb6e 	bl	80005f8 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	a30e      	add	r3, pc, #56	@ (adr r3, 8001f60 <calculateVel1+0x1e0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	f7fe fb65 	bl	80005f8 <__aeabi_dmul>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fe57 	bl	8000be8 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef1 7a67 	vneg.f32	s15, s15
 8001f44:	edc7 7a05 	vstr	s15, [r7, #20]
 8001f48:	e05c      	b.n	8002004 <calculateVel1+0x284>
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	00000000 	.word	0x00000000
 8001f54:	406f4000 	.word	0x406f4000
	...
 8001f60:	54442d18 	.word	0x54442d18
 8001f64:	400921fb 	.word	0x400921fb
 8001f68:	20000720 	.word	0x20000720
 8001f6c:	20000388 	.word	0x20000388
 8001f70:	20000528 	.word	0x20000528
 8001f74:	20000380 	.word	0x20000380
 8001f78:	2000038c 	.word	0x2000038c
 8001f7c:	200003b0 	.word	0x200003b0
 8001f80:	200003b4 	.word	0x200003b4
 8001f84:	20000390 	.word	0x20000390
 8001f88:	20000394 	.word	0x20000394
 8001f8c:	20000398 	.word	0x20000398
 8001f90:	200003bc 	.word	0x200003bc
 8001f94:	20000378 	.word	0x20000378
 8001f98:	2000039c 	.word	0x2000039c
 8001f9c:	200003a4 	.word	0x200003a4
 8001fa0:	200003b8 	.word	0x200003b8
 8001fa4:	404e0000 	.word	0x404e0000
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	47ae147b 	.word	0x47ae147b
 8001fb0:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel1 = (rpm1 / 60.0) * dia1 * M_PI; // Positive velocity for forward direction
 8001fb4:	4bb8      	ldr	r3, [pc, #736]	@ (8002298 <calculateVel1+0x518>)
 8001fb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4bb7      	ldr	r3, [pc, #732]	@ (800229c <calculateVel1+0x51c>)
 8001fc0:	f7fe fc44 	bl	800084c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4614      	mov	r4, r2
 8001fca:	461d      	mov	r5, r3
 8001fcc:	4bb4      	ldr	r3, [pc, #720]	@ (80022a0 <calculateVel1+0x520>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe fb0b 	bl	80005f8 <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002270 <calculateVel1+0x4f0>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fb02 	bl	80005f8 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fdf4 	bl	8000be8 <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	617b      	str	r3, [r7, #20]
	}

	// Apply moving average filter for velocity
	//  vel1 = moving_average_filter1(new_vel1);
	// Constrain the velocity to the range [-1, 1]
	vel1 = fmax(-1.0, fmin(1.0, moving_average_filter1(new_vel1)));
 8002004:	ed97 0a05 	vldr	s0, [r7, #20]
 8002008:	f7ff fdce 	bl	8001ba8 <moving_average_filter1>
 800200c:	ee10 3a10 	vmov	r3, s0
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa99 	bl	8000548 <__aeabi_f2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8002278 <calculateVel1+0x4f8>
 800201e:	ec43 2b10 	vmov	d0, r2, r3
 8002022:	f00c f853 	bl	800e0cc <fmin>
 8002026:	eeb0 7a40 	vmov.f32	s14, s0
 800202a:	eef0 7a60 	vmov.f32	s15, s1
 800202e:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 8002280 <calculateVel1+0x500>
 8002032:	eeb0 0a47 	vmov.f32	s0, s14
 8002036:	eef0 0a67 	vmov.f32	s1, s15
 800203a:	f00c f81d 	bl	800e078 <fmax>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fdcf 	bl	8000be8 <__aeabi_d2f>
 800204a:	4603      	mov	r3, r0
 800204c:	4a95      	ldr	r2, [pc, #596]	@ (80022a4 <calculateVel1+0x524>)
 800204e:	6013      	str	r3, [r2, #0]
	// Update position based on velocity and elapsed time
	distance_traveled1 += vel1 * (delta_time1 / 1000.0); // Linear distance traveled in meters
 8002050:	4b95      	ldr	r3, [pc, #596]	@ (80022a8 <calculateVel1+0x528>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa77 	bl	8000548 <__aeabi_f2d>
 800205a:	4604      	mov	r4, r0
 800205c:	460d      	mov	r5, r1
 800205e:	4b91      	ldr	r3, [pc, #580]	@ (80022a4 <calculateVel1+0x524>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa70 	bl	8000548 <__aeabi_f2d>
 8002068:	4680      	mov	r8, r0
 800206a:	4689      	mov	r9, r1
 800206c:	6938      	ldr	r0, [r7, #16]
 800206e:	f7fe fa6b 	bl	8000548 <__aeabi_f2d>
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b8d      	ldr	r3, [pc, #564]	@ (80022ac <calculateVel1+0x52c>)
 8002078:	f7fe fbe8 	bl	800084c <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4640      	mov	r0, r8
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe fab8 	bl	80005f8 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4620      	mov	r0, r4
 800208e:	4629      	mov	r1, r5
 8002090:	f7fe f8fc 	bl	800028c <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fda4 	bl	8000be8 <__aeabi_d2f>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a81      	ldr	r2, [pc, #516]	@ (80022a8 <calculateVel1+0x528>)
 80020a4:	6013      	str	r3, [r2, #0]
	angular_position_rad1 += distance_traveled1 / (dia1 / 2.0); // Update angular position in radians
 80020a6:	4b82      	ldr	r3, [pc, #520]	@ (80022b0 <calculateVel1+0x530>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	4604      	mov	r4, r0
 80020b2:	460d      	mov	r5, r1
 80020b4:	4b7c      	ldr	r3, [pc, #496]	@ (80022a8 <calculateVel1+0x528>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4680      	mov	r8, r0
 80020c0:	4689      	mov	r9, r1
 80020c2:	4b77      	ldr	r3, [pc, #476]	@ (80022a0 <calculateVel1+0x520>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa3e 	bl	8000548 <__aeabi_f2d>
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020d4:	f7fe fbba 	bl	800084c <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4640      	mov	r0, r8
 80020de:	4649      	mov	r1, r9
 80020e0:	f7fe fbb4 	bl	800084c <__aeabi_ddiv>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4620      	mov	r0, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	f7fe f8ce 	bl	800028c <__adddf3>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd76 	bl	8000be8 <__aeabi_d2f>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a6c      	ldr	r2, [pc, #432]	@ (80022b0 <calculateVel1+0x530>)
 8002100:	6013      	str	r3, [r2, #0]
	angular_position_deg1 = angular_position_rad1 * (180.0 / M_PI); // Convert to degrees
 8002102:	4b6b      	ldr	r3, [pc, #428]	@ (80022b0 <calculateVel1+0x530>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fa1e 	bl	8000548 <__aeabi_f2d>
 800210c:	a35e      	add	r3, pc, #376	@ (adr r3, 8002288 <calculateVel1+0x508>)
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	f7fe fa71 	bl	80005f8 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7fe fd63 	bl	8000be8 <__aeabi_d2f>
 8002122:	4603      	mov	r3, r0
 8002124:	4a63      	ldr	r2, [pc, #396]	@ (80022b4 <calculateVel1+0x534>)
 8002126:	6013      	str	r3, [r2, #0]
	angular_position_deg1 = fmod(angular_position_deg1, 360.0);
 8002128:	4b62      	ldr	r3, [pc, #392]	@ (80022b4 <calculateVel1+0x534>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa0b 	bl	8000548 <__aeabi_f2d>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8002290 <calculateVel1+0x510>
 800213a:	ec43 2b10 	vmov	d0, r2, r3
 800213e:	f00b fe99 	bl	800de74 <fmod>
 8002142:	ec53 2b10 	vmov	r2, r3, d0
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd4d 	bl	8000be8 <__aeabi_d2f>
 800214e:	4603      	mov	r3, r0
 8002150:	4a58      	ldr	r2, [pc, #352]	@ (80022b4 <calculateVel1+0x534>)
 8002152:	6013      	str	r3, [r2, #0]
	// Kalman filter update
	estimate1 = estimate1; // Predicted state (previous estimate)
 8002154:	4b58      	ldr	r3, [pc, #352]	@ (80022b8 <calculateVel1+0x538>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a57      	ldr	r2, [pc, #348]	@ (80022b8 <calculateVel1+0x538>)
 800215a:	6013      	str	r3, [r2, #0]
	error_covariance1 += process_noise1; // Update error covariance
 800215c:	4b57      	ldr	r3, [pc, #348]	@ (80022bc <calculateVel1+0x53c>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	4b57      	ldr	r3, [pc, #348]	@ (80022c0 <calculateVel1+0x540>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <calculateVel1+0x53c>)
 800216e:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain1 = error_covariance1 / (error_covariance1 + measurement_noise1); // Calculate Kalman gain
 8002172:	4b52      	ldr	r3, [pc, #328]	@ (80022bc <calculateVel1+0x53c>)
 8002174:	edd3 6a00 	vldr	s13, [r3]
 8002178:	4b50      	ldr	r3, [pc, #320]	@ (80022bc <calculateVel1+0x53c>)
 800217a:	ed93 7a00 	vldr	s14, [r3]
 800217e:	4b51      	ldr	r3, [pc, #324]	@ (80022c4 <calculateVel1+0x544>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218c:	4b4e      	ldr	r3, [pc, #312]	@ (80022c8 <calculateVel1+0x548>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
	estimate1 += kalman_gain1 * (vel1 - estimate1); // Update estimate with measurement
 8002192:	4b44      	ldr	r3, [pc, #272]	@ (80022a4 <calculateVel1+0x524>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <calculateVel1+0x538>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a2:	4b49      	ldr	r3, [pc, #292]	@ (80022c8 <calculateVel1+0x548>)
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ac:	4b42      	ldr	r3, [pc, #264]	@ (80022b8 <calculateVel1+0x538>)
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b6:	4b40      	ldr	r3, [pc, #256]	@ (80022b8 <calculateVel1+0x538>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
	error_covariance1 = (1 - kalman_gain1) * error_covariance1; // Update error covariance
 80021bc:	4b42      	ldr	r3, [pc, #264]	@ (80022c8 <calculateVel1+0x548>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ca:	4b3c      	ldr	r3, [pc, #240]	@ (80022bc <calculateVel1+0x53c>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d4:	4b39      	ldr	r3, [pc, #228]	@ (80022bc <calculateVel1+0x53c>)
 80021d6:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output1 = PID_Controller1(Kp1, Ki1, Kd1, &integral1_1, last_error1,
 80021da:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <calculateVel1+0x54c>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <calculateVel1+0x550>)
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <calculateVel1+0x554>)
 80021e8:	edd3 6a00 	vldr	s13, [r3]
 80021ec:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <calculateVel1+0x558>)
 80021ee:	ed93 6a00 	vldr	s12, [r3]
 80021f2:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <calculateVel1+0x524>)
 80021f4:	edd3 5a00 	vldr	s11, [r3]
 80021f8:	eef0 2a65 	vmov.f32	s5, s11
 80021fc:	ed97 2a01 	vldr	s4, [r7, #4]
 8002200:	eef0 1a46 	vmov.f32	s3, s12
 8002204:	4835      	ldr	r0, [pc, #212]	@ (80022dc <calculateVel1+0x55c>)
 8002206:	eeb0 1a66 	vmov.f32	s2, s13
 800220a:	eef0 0a47 	vmov.f32	s1, s14
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	f7ff fd43 	bl	8001c9c <PID_Controller1>
 8002216:	eef0 7a40 	vmov.f32	s15, s0
 800221a:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <calculateVel1+0x560>)
 800221c:	edc3 7a00 	vstr	s15, [r3]
			velTag1, vel1);

	// Implement ramping to control output
	if (fabs(control_output1 - last_control_output1) > RAMP_RATE) {
 8002220:	4b2f      	ldr	r3, [pc, #188]	@ (80022e0 <calculateVel1+0x560>)
 8002222:	ed93 7a00 	vldr	s14, [r3]
 8002226:	4b2f      	ldr	r3, [pc, #188]	@ (80022e4 <calculateVel1+0x564>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002230:	eef0 7ae7 	vabs.f32	s15, s15
 8002234:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	dd62      	ble.n	8002308 <calculateVel1+0x588>
		control_output1 = last_control_output1+ (control_output1 > last_control_output1 ?RAMP_RATE :-RAMP_RATE);
 8002242:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <calculateVel1+0x564>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f97e 	bl	8000548 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4923      	ldr	r1, [pc, #140]	@ (80022e0 <calculateVel1+0x560>)
 8002252:	ed91 7a00 	vldr	s14, [r1]
 8002256:	4923      	ldr	r1, [pc, #140]	@ (80022e4 <calculateVel1+0x564>)
 8002258:	edd1 7a00 	vldr	s15, [r1]
 800225c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	dd42      	ble.n	80022ec <calculateVel1+0x56c>
 8002266:	f04f 0000 	mov.w	r0, #0
 800226a:	491f      	ldr	r1, [pc, #124]	@ (80022e8 <calculateVel1+0x568>)
 800226c:	e041      	b.n	80022f2 <calculateVel1+0x572>
 800226e:	bf00      	nop
 8002270:	54442d18 	.word	0x54442d18
 8002274:	400921fb 	.word	0x400921fb
 8002278:	00000000 	.word	0x00000000
 800227c:	3ff00000 	.word	0x3ff00000
 8002280:	00000000 	.word	0x00000000
 8002284:	bff00000 	.word	0xbff00000
 8002288:	1a63c1f8 	.word	0x1a63c1f8
 800228c:	404ca5dc 	.word	0x404ca5dc
 8002290:	00000000 	.word	0x00000000
 8002294:	40768000 	.word	0x40768000
 8002298:	20000380 	.word	0x20000380
 800229c:	404e0000 	.word	0x404e0000
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000388 	.word	0x20000388
 80022a8:	200003bc 	.word	0x200003bc
 80022ac:	408f4000 	.word	0x408f4000
 80022b0:	200003a8 	.word	0x200003a8
 80022b4:	200003ac 	.word	0x200003ac
 80022b8:	200003a0 	.word	0x200003a0
 80022bc:	20000014 	.word	0x20000014
 80022c0:	20000018 	.word	0x20000018
 80022c4:	2000001c 	.word	0x2000001c
 80022c8:	20000010 	.word	0x20000010
 80022cc:	20000004 	.word	0x20000004
 80022d0:	20000008 	.word	0x20000008
 80022d4:	2000000c 	.word	0x2000000c
 80022d8:	20000394 	.word	0x20000394
 80022dc:	20000390 	.word	0x20000390
 80022e0:	2000038c 	.word	0x2000038c
 80022e4:	20000398 	.word	0x20000398
 80022e8:	40140000 	.word	0x40140000
 80022ec:	f04f 0000 	mov.w	r0, #0
 80022f0:	4981      	ldr	r1, [pc, #516]	@ (80024f8 <calculateVel1+0x778>)
 80022f2:	f7fd ffcb 	bl	800028c <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc73 	bl	8000be8 <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
 8002304:	4a7d      	ldr	r2, [pc, #500]	@ (80024fc <calculateVel1+0x77c>)
 8002306:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output1 > 0 && control_output1 < -HYSTERESIS)
 8002308:	4b7d      	ldr	r3, [pc, #500]	@ (8002500 <calculateVel1+0x780>)
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002316:	dd0c      	ble.n	8002332 <calculateVel1+0x5b2>
 8002318:	4b78      	ldr	r3, [pc, #480]	@ (80024fc <calculateVel1+0x77c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f913 	bl	8000548 <__aeabi_f2d>
 8002322:	a369      	add	r3, pc, #420	@ (adr r3, 80024c8 <calculateVel1+0x748>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe fbd8 	bl	8000adc <__aeabi_dcmplt>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <calculateVel1+0x5dc>
			|| (last_control_output1 < 0 && control_output1 > HYSTERESIS)) {
 8002332:	4b73      	ldr	r3, [pc, #460]	@ (8002500 <calculateVel1+0x780>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800233c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002340:	d510      	bpl.n	8002364 <calculateVel1+0x5e4>
 8002342:	4b6e      	ldr	r3, [pc, #440]	@ (80024fc <calculateVel1+0x77c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8fe 	bl	8000548 <__aeabi_f2d>
 800234c:	a360      	add	r3, pc, #384	@ (adr r3, 80024d0 <calculateVel1+0x750>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <calculateVel1+0x5e4>
		control_output1 = last_control_output1; // Maintain last control output if within hysteresis
 800235c:	4b68      	ldr	r3, [pc, #416]	@ (8002500 <calculateVel1+0x780>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a66      	ldr	r2, [pc, #408]	@ (80024fc <calculateVel1+0x77c>)
 8002362:	6013      	str	r3, [r2, #0]
	}

	realVel1 = vel1 / 2.0; // Scale factor
 8002364:	4b67      	ldr	r3, [pc, #412]	@ (8002504 <calculateVel1+0x784>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800236e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002372:	4b65      	ldr	r3, [pc, #404]	@ (8002508 <calculateVel1+0x788>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
	realRPM1 = rpm1 / 2.0;
 8002378:	4b64      	ldr	r3, [pc, #400]	@ (800250c <calculateVel1+0x78c>)
 800237a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002386:	f7fe fa61 	bl	800084c <__aeabi_ddiv>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fc29 	bl	8000be8 <__aeabi_d2f>
 8002396:	4603      	mov	r3, r0
 8002398:	4a5d      	ldr	r2, [pc, #372]	@ (8002510 <calculateVel1+0x790>)
 800239a:	6013      	str	r3, [r2, #0]
	if (realVel1 <= 0.01 && velTag1 >= 0.0) {
 800239c:	4b5a      	ldr	r3, [pc, #360]	@ (8002508 <calculateVel1+0x788>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80024d8 <calculateVel1+0x758>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe fba0 	bl	8000af0 <__aeabi_dcmple>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <calculateVel1+0x64e>
 80023b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c2:	db04      	blt.n	80023ce <calculateVel1+0x64e>
		realVel1 = 0.0;
 80023c4:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <calculateVel1+0x788>)
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e017      	b.n	80023fe <calculateVel1+0x67e>
	} else if (realVel1 >= -0.01 && velTag1 <= 0.0) {
 80023ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002508 <calculateVel1+0x788>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8b8 	bl	8000548 <__aeabi_f2d>
 80023d8:	a341      	add	r3, pc, #260	@ (adr r3, 80024e0 <calculateVel1+0x760>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe fb91 	bl	8000b04 <__aeabi_dcmpge>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <calculateVel1+0x67e>
 80023e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f4:	d803      	bhi.n	80023fe <calculateVel1+0x67e>
		realVel1 = 0.0;
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <calculateVel1+0x788>)
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
	}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output1 = fmax(-0.27, fmin(0.27, control_output1));
 80023fe:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <calculateVel1+0x77c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f8a0 	bl	8000548 <__aeabi_f2d>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 80024e8 <calculateVel1+0x768>
 8002410:	ec43 2b10 	vmov	d0, r2, r3
 8002414:	f00b fe5a 	bl	800e0cc <fmin>
 8002418:	eeb0 7a40 	vmov.f32	s14, s0
 800241c:	eef0 7a60 	vmov.f32	s15, s1
 8002420:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80024f0 <calculateVel1+0x770>
 8002424:	eeb0 0a47 	vmov.f32	s0, s14
 8002428:	eef0 0a67 	vmov.f32	s1, s15
 800242c:	f00b fe24 	bl	800e078 <fmax>
 8002430:	ec53 2b10 	vmov	r2, r3, d0
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f7fe fbd6 	bl	8000be8 <__aeabi_d2f>
 800243c:	4603      	mov	r3, r0
 800243e:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <calculateVel1+0x77c>)
 8002440:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag1 > 0) {
 8002442:	edd7 7a01 	vldr	s15, [r7, #4]
 8002446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244e:	dd14      	ble.n	800247a <calculateVel1+0x6fa>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <calculateVel1+0x794>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2200      	movs	r2, #0
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2,
 8002458:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <calculateVel1+0x77c>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eeb0 0a67 	vmov.f32	s0, s15
 8002462:	f7ff fbe1 	bl	8001c28 <calculate_pwm1>
 8002466:	eef0 7a40 	vmov.f32	s15, s0
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <calculateVel1+0x794>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002472:	ee17 2a90 	vmov	r2, s15
 8002476:	639a      	str	r2, [r3, #56]	@ 0x38
 8002478:	e01a      	b.n	80024b0 <calculateVel1+0x730>
				calculate_pwm1(control_output1));
	} else if (velTag1 < 0) {
 800247a:	edd7 7a01 	vldr	s15, [r7, #4]
 800247e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d513      	bpl.n	80024b0 <calculateVel1+0x730>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1,
 8002488:	4b1c      	ldr	r3, [pc, #112]	@ (80024fc <calculateVel1+0x77c>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	eeb0 0a67 	vmov.f32	s0, s15
 8002492:	f7ff fbc9 	bl	8001c28 <calculate_pwm1>
 8002496:	eef0 7a40 	vmov.f32	s15, s0
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <calculateVel1+0x794>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a2:	ee17 2a90 	vmov	r2, s15
 80024a6:	635a      	str	r2, [r3, #52]	@ 0x34
				calculate_pwm1(control_output1));
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <calculateVel1+0x794>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	// Update last time and last control output
	last_time1 = current_time1;
 80024b0:	4a19      	ldr	r2, [pc, #100]	@ (8002518 <calculateVel1+0x798>)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6013      	str	r3, [r2, #0]
	last_control_output1 = control_output1;
 80024b6:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <calculateVel1+0x77c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <calculateVel1+0x780>)
 80024bc:	6013      	str	r3, [r2, #0]
}
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024c6:	bf00      	nop
 80024c8:	eb851eb8 	.word	0xeb851eb8
 80024cc:	bf9eb851 	.word	0xbf9eb851
 80024d0:	eb851eb8 	.word	0xeb851eb8
 80024d4:	3f9eb851 	.word	0x3f9eb851
 80024d8:	47ae147b 	.word	0x47ae147b
 80024dc:	3f847ae1 	.word	0x3f847ae1
 80024e0:	47ae147b 	.word	0x47ae147b
 80024e4:	bf847ae1 	.word	0xbf847ae1
 80024e8:	147ae148 	.word	0x147ae148
 80024ec:	3fd147ae 	.word	0x3fd147ae
 80024f0:	147ae148 	.word	0x147ae148
 80024f4:	bfd147ae 	.word	0xbfd147ae
 80024f8:	c0140000 	.word	0xc0140000
 80024fc:	2000038c 	.word	0x2000038c
 8002500:	20000398 	.word	0x20000398
 8002504:	20000388 	.word	0x20000388
 8002508:	200003b0 	.word	0x200003b0
 800250c:	20000380 	.word	0x20000380
 8002510:	200003b4 	.word	0x200003b4
 8002514:	20000720 	.word	0x20000720
 8002518:	200003a4 	.word	0x200003a4
 800251c:	00000000 	.word	0x00000000

08002520 <moving_average_filter2>:
float angular_position_deg2 = 0.0; // Angular position in degrees
float realVel2;
float realRPM2;

// Function to calculate exponential moving average
float moving_average_filter2(float new_velocity) {
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema2 = 0.0; // Initialize EMA variable
	ema2 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema2);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe f80c 	bl	8000548 <__aeabi_f2d>
 8002530:	a318      	add	r3, pc, #96	@ (adr r3, 8002594 <moving_average_filter2+0x74>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fe f85f 	bl	80005f8 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
 8002542:	4b13      	ldr	r3, [pc, #76]	@ (8002590 <moving_average_filter2+0x70>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd fffe 	bl	8000548 <__aeabi_f2d>
 800254c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002588 <moving_average_filter2+0x68>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe f851 	bl	80005f8 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fd fe95 	bl	800028c <__adddf3>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f7fe fb3d 	bl	8000be8 <__aeabi_d2f>
 800256e:	4603      	mov	r3, r0
 8002570:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <moving_average_filter2+0x70>)
 8002572:	6013      	str	r3, [r2, #0]
	return ema2;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <moving_average_filter2+0x70>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
}
 800257c:	eeb0 0a67 	vmov.f32	s0, s15
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	bf00      	nop
 8002588:	9999999a 	.word	0x9999999a
 800258c:	3fe99999 	.word	0x3fe99999
 8002590:	200004c8 	.word	0x200004c8
 8002594:	9999999a 	.word	0x9999999a
 8002598:	3fc99999 	.word	0x3fc99999
 800259c:	00000000 	.word	0x00000000

080025a0 <calculate_pwm2>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm2(float desired_velocity) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 80025aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	d505      	bpl.n	80025c4 <calculate_pwm2+0x24>
		desired_velocity = -desired_velocity;
 80025b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025bc:	eef1 7a67 	vneg.f32	s15, s15
 80025c0:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fd ffbf 	bl	8000548 <__aeabi_f2d>
 80025ca:	a310      	add	r3, pc, #64	@ (adr r3, 800260c <calculate_pwm2+0x6c>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f93c 	bl	800084c <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <calculate_pwm2+0x68>)
 80025e2:	f7fe f809 	bl	80005f8 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe fafb 	bl	8000be8 <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
 80025f4:	ee07 3a90 	vmov	s15, r3
}
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	f3af 8000 	nop.w
 8002608:	408f4000 	.word	0x408f4000
 800260c:	147ae148 	.word	0x147ae148
 8002610:	3fd147ae 	.word	0x3fd147ae

08002614 <PID_Controller2>:

// PID Controller Function with Anti-Windup
float PID_Controller2(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8002614:	b480      	push	{r7}
 8002616:	b08d      	sub	sp, #52	@ 0x34
 8002618:	af00      	add	r7, sp, #0
 800261a:	ed87 0a07 	vstr	s0, [r7, #28]
 800261e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002622:	ed87 1a05 	vstr	s2, [r7, #20]
 8002626:	6138      	str	r0, [r7, #16]
 8002628:	edc7 1a03 	vstr	s3, [r7, #12]
 800262c:	ed87 2a02 	vstr	s4, [r7, #8]
 8002630:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error2 = setpoint - measured_value;
 8002634:	ed97 7a02 	vldr	s14, [r7, #8]
 8002638:	edd7 7a01 	vldr	s15, [r7, #4]
 800263c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002640:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error2;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800264e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80026e8 <PID_Controller2+0xd4>
 8002662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	dd03      	ble.n	8002674 <PID_Controller2+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4a1f      	ldr	r2, [pc, #124]	@ (80026ec <PID_Controller2+0xd8>)
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e00c      	b.n	800268e <PID_Controller2+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80026f0 <PID_Controller2+0xdc>
 800267e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	d502      	bpl.n	800268e <PID_Controller2+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <PID_Controller2+0xe0>)
 800268c:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative2 = error2 - last_error;
 800268e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002692:	edd7 7a03 	vldr	s15, [r7, #12]
 8002696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800269a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output2 = (Kp * error2) + (Ki * (*integral)) + (Kd * derivative2);
 800269e:	ed97 7a07 	vldr	s14, [r7, #28]
 80026a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	edd3 6a00 	vldr	s13, [r3]
 80026b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026bc:	edd7 6a05 	vldr	s13, [r7, #20]
 80026c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error2;
 80026d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d2:	60fb      	str	r3, [r7, #12]

	return output2; // Return the control output
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	ee07 3a90 	vmov	s15, r3
}
 80026da:	eeb0 0a67 	vmov.f32	s0, s15
 80026de:	3734      	adds	r7, #52	@ 0x34
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	42c80000 	.word	0x42c80000
 80026ec:	42c80000 	.word	0x42c80000
 80026f0:	c2c80000 	.word	0xc2c80000
 80026f4:	c2c80000 	.word	0xc2c80000

080026f8 <calculateVel2>:

int32_t current_pulse_count2 = 0;
float distance_traveled2 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel2(float velTag2, float current_time2) {
 80026f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	ed87 0a01 	vstr	s0, [r7, #4]
 8002704:	edc7 0a00 	vstr	s1, [r7]

	// Check if velTag2 is within the deadband
	if (fabs(velTag2) < DEAD_BAND) {
 8002708:	edd7 7a01 	vldr	s15, [r7, #4]
 800270c:	eef0 7ae7 	vabs.f32	s15, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd ff18 	bl	8000548 <__aeabi_f2d>
 8002718:	a382      	add	r3, pc, #520	@ (adr r3, 8002924 <calculateVel2+0x22c>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fe f9dd 	bl	8000adc <__aeabi_dcmplt>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <calculateVel2+0x36>
		velTag2 = 0; // Set velTag2 to zero if within deadband
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag2 is 0
	if (velTag2 == 0) {
 800272e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002732:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	d13c      	bne.n	80027b6 <calculateVel2+0xbe>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800273c:	4b68      	ldr	r3, [pc, #416]	@ (80028e0 <calculateVel2+0x1e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002744:	4b66      	ldr	r3, [pc, #408]	@ (80028e0 <calculateVel2+0x1e8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40
		vel2 = 0.0;
 800274c:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <calculateVel2+0x1ec>)
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002754:	4b64      	ldr	r3, [pc, #400]	@ (80028e8 <calculateVel2+0x1f0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm2 = 0.0;
 800275c:	4963      	ldr	r1, [pc, #396]	@ (80028ec <calculateVel2+0x1f4>)
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9c1 2300 	strd	r2, r3, [r1]
		control_output2 = 0.0;
 800276a:	4b61      	ldr	r3, [pc, #388]	@ (80028f0 <calculateVel2+0x1f8>)
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad2
		realVel2 = 0.0;
 8002772:	4b60      	ldr	r3, [pc, #384]	@ (80028f4 <calculateVel2+0x1fc>)
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
		realRPM2 = 0.0;
 800277a:	4b5f      	ldr	r3, [pc, #380]	@ (80028f8 <calculateVel2+0x200>)
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
		integral1_2 = 0.0;
 8002782:	4b5e      	ldr	r3, [pc, #376]	@ (80028fc <calculateVel2+0x204>)
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
		last_error2 = 0.0;
 800278a:	4b5d      	ldr	r3, [pc, #372]	@ (8002900 <calculateVel2+0x208>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
		last_control_output2 = 0.0;
 8002792:	4b5c      	ldr	r3, [pc, #368]	@ (8002904 <calculateVel2+0x20c>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
		distance_traveled2 = 0.0;
 800279a:	4b5b      	ldr	r3, [pc, #364]	@ (8002908 <calculateVel2+0x210>)
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
		pulse_count2 = 0; // Reset pulse count
 80027a2:	4b5a      	ldr	r3, [pc, #360]	@ (800290c <calculateVel2+0x214>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
		last_velTag2 = velTag2; // Update last velTag2
 80027a8:	4a59      	ldr	r2, [pc, #356]	@ (8002910 <calculateVel2+0x218>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 80027ae:	2064      	movs	r0, #100	@ 0x64
 80027b0:	f003 fb48 	bl	8005e44 <HAL_Delay>
		return; // Exit the function
 80027b4:	e33f      	b.n	8002e36 <calculateVel2+0x73e>
	}

	// Calculate the time elapsed since the last update
	float delta_time2 = current_time2 - last_time2;
 80027b6:	4b57      	ldr	r3, [pc, #348]	@ (8002914 <calculateVel2+0x21c>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ed97 7a00 	vldr	s14, [r7]
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count2 = __HAL_TIM_GET_COUNTER(&htim3);
 80027c8:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <calculateVel2+0x1f0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b51      	ldr	r3, [pc, #324]	@ (8002918 <calculateVel2+0x220>)
 80027d2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80027d4:	200a      	movs	r0, #10
 80027d6:	f003 fb35 	bl	8005e44 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference2 = current_pulse_count2 - pulse_count2;
 80027da:	4b4f      	ldr	r3, [pc, #316]	@ (8002918 <calculateVel2+0x220>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <calculateVel2+0x214>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm2 = fabs((float) pulse_difference2 / (float) PPR) * 60.0; // Always positive
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f2:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80027f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027fa:	eef0 7ae7 	vabs.f32	s15, s15
 80027fe:	ee17 0a90 	vmov	r0, s15
 8002802:	f7fd fea1 	bl	8000548 <__aeabi_f2d>
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	4b44      	ldr	r3, [pc, #272]	@ (800291c <calculateVel2+0x224>)
 800280c:	f7fd fef4 	bl	80005f8 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4935      	ldr	r1, [pc, #212]	@ (80028ec <calculateVel2+0x1f4>)
 8002816:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count2 = current_pulse_count2;
 800281a:	4b3f      	ldr	r3, [pc, #252]	@ (8002918 <calculateVel2+0x220>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <calculateVel2+0x214>)
 8002822:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm2 = fmax(0.0, fmin(250.0, rpm2));
 8002824:	4b31      	ldr	r3, [pc, #196]	@ (80028ec <calculateVel2+0x1f4>)
 8002826:	ed93 7b00 	vldr	d7, [r3]
 800282a:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 80028c8 <calculateVel2+0x1d0>
 800282e:	eeb0 0a47 	vmov.f32	s0, s14
 8002832:	eef0 0a67 	vmov.f32	s1, s15
 8002836:	f00b fc49 	bl	800e0cc <fmin>
 800283a:	eeb0 7a40 	vmov.f32	s14, s0
 800283e:	eef0 7a60 	vmov.f32	s15, s1
 8002842:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 80028d0 <calculateVel2+0x1d8>
 8002846:	eeb0 0a47 	vmov.f32	s0, s14
 800284a:	eef0 0a67 	vmov.f32	s1, s15
 800284e:	f00b fc13 	bl	800e078 <fmax>
 8002852:	eeb0 7a40 	vmov.f32	s14, s0
 8002856:	eef0 7a60 	vmov.f32	s15, s1
 800285a:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <calculateVel2+0x1f4>)
 800285c:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel2;
	if (pulse_difference2 < 0) {
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da62      	bge.n	800292c <calculateVel2+0x234>
		new_vel2 = -((rpm2 / 60.0) * dia2 * M_PI); // Negative velocity for reverse direction
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <calculateVel2+0x1f4>)
 8002868:	e9d3 0100 	ldrd	r0, r1, [r3]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <calculateVel2+0x224>)
 8002872:	f7fd ffeb 	bl	800084c <__aeabi_ddiv>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	461d      	mov	r5, r3
 800287e:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <calculateVel2+0x228>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_f2d>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7fd feb2 	bl	80005f8 <__aeabi_dmul>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	a30e      	add	r3, pc, #56	@ (adr r3, 80028d8 <calculateVel2+0x1e0>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fd fea9 	bl	80005f8 <__aeabi_dmul>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f7fe f99b 	bl	8000be8 <__aeabi_d2f>
 80028b2:	4603      	mov	r3, r0
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef1 7a67 	vneg.f32	s15, s15
 80028bc:	edc7 7a05 	vstr	s15, [r7, #20]
 80028c0:	e05c      	b.n	800297c <calculateVel2+0x284>
 80028c2:	bf00      	nop
 80028c4:	f3af 8000 	nop.w
 80028c8:	00000000 	.word	0x00000000
 80028cc:	406f4000 	.word	0x406f4000
	...
 80028d8:	54442d18 	.word	0x54442d18
 80028dc:	400921fb 	.word	0x400921fb
 80028e0:	20000570 	.word	0x20000570
 80028e4:	200003d0 	.word	0x200003d0
 80028e8:	200005b8 	.word	0x200005b8
 80028ec:	200003c8 	.word	0x200003c8
 80028f0:	200003d4 	.word	0x200003d4
 80028f4:	200003f8 	.word	0x200003f8
 80028f8:	200003fc 	.word	0x200003fc
 80028fc:	200003d8 	.word	0x200003d8
 8002900:	200003dc 	.word	0x200003dc
 8002904:	200003e0 	.word	0x200003e0
 8002908:	20000404 	.word	0x20000404
 800290c:	200003c0 	.word	0x200003c0
 8002910:	200003e4 	.word	0x200003e4
 8002914:	200003ec 	.word	0x200003ec
 8002918:	20000400 	.word	0x20000400
 800291c:	404e0000 	.word	0x404e0000
 8002920:	20000020 	.word	0x20000020
 8002924:	47ae147b 	.word	0x47ae147b
 8002928:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel2 = (rpm2 / 60.0) * dia2 * M_PI; // Positive velocity for forward direction
 800292c:	4bb8      	ldr	r3, [pc, #736]	@ (8002c10 <calculateVel2+0x518>)
 800292e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4bb7      	ldr	r3, [pc, #732]	@ (8002c14 <calculateVel2+0x51c>)
 8002938:	f7fd ff88 	bl	800084c <__aeabi_ddiv>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	4bb4      	ldr	r3, [pc, #720]	@ (8002c18 <calculateVel2+0x520>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fdfd 	bl	8000548 <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4620      	mov	r0, r4
 8002954:	4629      	mov	r1, r5
 8002956:	f7fd fe4f 	bl	80005f8 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002be8 <calculateVel2+0x4f0>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe46 	bl	80005f8 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f938 	bl	8000be8 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	617b      	str	r3, [r7, #20]
	}

	// Apply moving average filter for velocity
	//vel2 = moving_average_filter2(new_vel2);
	// Constrain the velocity to the range [-1, 1]
	vel2 = fmax(-1.0, fmin(1.0, moving_average_filter2(new_vel2)));
 800297c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002980:	f7ff fdce 	bl	8002520 <moving_average_filter2>
 8002984:	ee10 3a10 	vmov	r3, s0
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fddd 	bl	8000548 <__aeabi_f2d>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8002bf0 <calculateVel2+0x4f8>
 8002996:	ec43 2b10 	vmov	d0, r2, r3
 800299a:	f00b fb97 	bl	800e0cc <fmin>
 800299e:	eeb0 7a40 	vmov.f32	s14, s0
 80029a2:	eef0 7a60 	vmov.f32	s15, s1
 80029a6:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 8002bf8 <calculateVel2+0x500>
 80029aa:	eeb0 0a47 	vmov.f32	s0, s14
 80029ae:	eef0 0a67 	vmov.f32	s1, s15
 80029b2:	f00b fb61 	bl	800e078 <fmax>
 80029b6:	ec53 2b10 	vmov	r2, r3, d0
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7fe f913 	bl	8000be8 <__aeabi_d2f>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a95      	ldr	r2, [pc, #596]	@ (8002c1c <calculateVel2+0x524>)
 80029c6:	6013      	str	r3, [r2, #0]
	// Update position based on velocity and elapsed time
	distance_traveled2 += vel2 * (delta_time2 / 1000.0); // Linear distance traveled in meters
 80029c8:	4b95      	ldr	r3, [pc, #596]	@ (8002c20 <calculateVel2+0x528>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdbb 	bl	8000548 <__aeabi_f2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	4b91      	ldr	r3, [pc, #580]	@ (8002c1c <calculateVel2+0x524>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdb4 	bl	8000548 <__aeabi_f2d>
 80029e0:	4680      	mov	r8, r0
 80029e2:	4689      	mov	r9, r1
 80029e4:	6938      	ldr	r0, [r7, #16]
 80029e6:	f7fd fdaf 	bl	8000548 <__aeabi_f2d>
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002c24 <calculateVel2+0x52c>)
 80029f0:	f7fd ff2c 	bl	800084c <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4640      	mov	r0, r8
 80029fa:	4649      	mov	r1, r9
 80029fc:	f7fd fdfc 	bl	80005f8 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fc40 	bl	800028c <__adddf3>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f8e8 	bl	8000be8 <__aeabi_d2f>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a81      	ldr	r2, [pc, #516]	@ (8002c20 <calculateVel2+0x528>)
 8002a1c:	6013      	str	r3, [r2, #0]
	angular_position_rad2 += distance_traveled2 / (dia2 / 2.0); // Update angular position in radians
 8002a1e:	4b82      	ldr	r3, [pc, #520]	@ (8002c28 <calculateVel2+0x530>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fd90 	bl	8000548 <__aeabi_f2d>
 8002a28:	4604      	mov	r4, r0
 8002a2a:	460d      	mov	r5, r1
 8002a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c20 <calculateVel2+0x528>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd89 	bl	8000548 <__aeabi_f2d>
 8002a36:	4680      	mov	r8, r0
 8002a38:	4689      	mov	r9, r1
 8002a3a:	4b77      	ldr	r3, [pc, #476]	@ (8002c18 <calculateVel2+0x520>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fd fd82 	bl	8000548 <__aeabi_f2d>
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a4c:	f7fd fefe 	bl	800084c <__aeabi_ddiv>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4640      	mov	r0, r8
 8002a56:	4649      	mov	r1, r9
 8002a58:	f7fd fef8 	bl	800084c <__aeabi_ddiv>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4620      	mov	r0, r4
 8002a62:	4629      	mov	r1, r5
 8002a64:	f7fd fc12 	bl	800028c <__adddf3>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fe f8ba 	bl	8000be8 <__aeabi_d2f>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4a6c      	ldr	r2, [pc, #432]	@ (8002c28 <calculateVel2+0x530>)
 8002a78:	6013      	str	r3, [r2, #0]
	angular_position_deg2 = angular_position_rad2 * (180.0 / M_PI); // Convert to degrees
 8002a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8002c28 <calculateVel2+0x530>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd62 	bl	8000548 <__aeabi_f2d>
 8002a84:	a35e      	add	r3, pc, #376	@ (adr r3, 8002c00 <calculateVel2+0x508>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	f7fd fdb5 	bl	80005f8 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f7fe f8a7 	bl	8000be8 <__aeabi_d2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a63      	ldr	r2, [pc, #396]	@ (8002c2c <calculateVel2+0x534>)
 8002a9e:	6013      	str	r3, [r2, #0]
	angular_position_deg2 = fmod(angular_position_deg2, 360.0);
 8002aa0:	4b62      	ldr	r3, [pc, #392]	@ (8002c2c <calculateVel2+0x534>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd4f 	bl	8000548 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8002c08 <calculateVel2+0x510>
 8002ab2:	ec43 2b10 	vmov	d0, r2, r3
 8002ab6:	f00b f9dd 	bl	800de74 <fmod>
 8002aba:	ec53 2b10 	vmov	r2, r3, d0
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f891 	bl	8000be8 <__aeabi_d2f>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a58      	ldr	r2, [pc, #352]	@ (8002c2c <calculateVel2+0x534>)
 8002aca:	6013      	str	r3, [r2, #0]
	// Kalman filter update
	estimate2 = estimate2; // Predicted state (previous estimate)
 8002acc:	4b58      	ldr	r3, [pc, #352]	@ (8002c30 <calculateVel2+0x538>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <calculateVel2+0x538>)
 8002ad2:	6013      	str	r3, [r2, #0]
	error_covariance2 += process_noise2; // Update error covariance
 8002ad4:	4b57      	ldr	r3, [pc, #348]	@ (8002c34 <calculateVel2+0x53c>)
 8002ad6:	ed93 7a00 	vldr	s14, [r3]
 8002ada:	4b57      	ldr	r3, [pc, #348]	@ (8002c38 <calculateVel2+0x540>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	4b53      	ldr	r3, [pc, #332]	@ (8002c34 <calculateVel2+0x53c>)
 8002ae6:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain2 = error_covariance2 / (error_covariance2 + measurement_noise2); // Calculate Kalman gain
 8002aea:	4b52      	ldr	r3, [pc, #328]	@ (8002c34 <calculateVel2+0x53c>)
 8002aec:	edd3 6a00 	vldr	s13, [r3]
 8002af0:	4b50      	ldr	r3, [pc, #320]	@ (8002c34 <calculateVel2+0x53c>)
 8002af2:	ed93 7a00 	vldr	s14, [r3]
 8002af6:	4b51      	ldr	r3, [pc, #324]	@ (8002c3c <calculateVel2+0x544>)
 8002af8:	edd3 7a00 	vldr	s15, [r3]
 8002afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b04:	4b4e      	ldr	r3, [pc, #312]	@ (8002c40 <calculateVel2+0x548>)
 8002b06:	edc3 7a00 	vstr	s15, [r3]
	estimate2 += kalman_gain2 * (vel2 - estimate2); // Update estimate with measurement
 8002b0a:	4b44      	ldr	r3, [pc, #272]	@ (8002c1c <calculateVel2+0x524>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	4b47      	ldr	r3, [pc, #284]	@ (8002c30 <calculateVel2+0x538>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b1a:	4b49      	ldr	r3, [pc, #292]	@ (8002c40 <calculateVel2+0x548>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	4b42      	ldr	r3, [pc, #264]	@ (8002c30 <calculateVel2+0x538>)
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2e:	4b40      	ldr	r3, [pc, #256]	@ (8002c30 <calculateVel2+0x538>)
 8002b30:	edc3 7a00 	vstr	s15, [r3]
	error_covariance2 = (1 - kalman_gain2) * error_covariance2; // Update error covariance
 8002b34:	4b42      	ldr	r3, [pc, #264]	@ (8002c40 <calculateVel2+0x548>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b42:	4b3c      	ldr	r3, [pc, #240]	@ (8002c34 <calculateVel2+0x53c>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4c:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <calculateVel2+0x53c>)
 8002b4e:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output2 = PID_Controller2(Kp2, Ki2, Kd2, &integral1_2, last_error2,
 8002b52:	4b3c      	ldr	r3, [pc, #240]	@ (8002c44 <calculateVel2+0x54c>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <calculateVel2+0x550>)
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <calculateVel2+0x554>)
 8002b60:	edd3 6a00 	vldr	s13, [r3]
 8002b64:	4b3a      	ldr	r3, [pc, #232]	@ (8002c50 <calculateVel2+0x558>)
 8002b66:	ed93 6a00 	vldr	s12, [r3]
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <calculateVel2+0x524>)
 8002b6c:	edd3 5a00 	vldr	s11, [r3]
 8002b70:	eef0 2a65 	vmov.f32	s5, s11
 8002b74:	ed97 2a01 	vldr	s4, [r7, #4]
 8002b78:	eef0 1a46 	vmov.f32	s3, s12
 8002b7c:	4835      	ldr	r0, [pc, #212]	@ (8002c54 <calculateVel2+0x55c>)
 8002b7e:	eeb0 1a66 	vmov.f32	s2, s13
 8002b82:	eef0 0a47 	vmov.f32	s1, s14
 8002b86:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8a:	f7ff fd43 	bl	8002614 <PID_Controller2>
 8002b8e:	eef0 7a40 	vmov.f32	s15, s0
 8002b92:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <calculateVel2+0x560>)
 8002b94:	edc3 7a00 	vstr	s15, [r3]
			velTag2, vel2);

	// Implement ramping to control output
	if (fabs(control_output2 - last_control_output2) > RAMP_RATE) {
 8002b98:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <calculateVel2+0x560>)
 8002b9a:	ed93 7a00 	vldr	s14, [r3]
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c5c <calculateVel2+0x564>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba8:	eef0 7ae7 	vabs.f32	s15, s15
 8002bac:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb8:	dd62      	ble.n	8002c80 <calculateVel2+0x588>
		control_output2 = last_control_output2
				+ (control_output2 > last_control_output2 ?
 8002bba:	4b28      	ldr	r3, [pc, #160]	@ (8002c5c <calculateVel2+0x564>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcc2 	bl	8000548 <__aeabi_f2d>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4923      	ldr	r1, [pc, #140]	@ (8002c58 <calculateVel2+0x560>)
 8002bca:	ed91 7a00 	vldr	s14, [r1]
 8002bce:	4923      	ldr	r1, [pc, #140]	@ (8002c5c <calculateVel2+0x564>)
 8002bd0:	edd1 7a00 	vldr	s15, [r1]
				RAMP_RATE :
 8002bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	dd42      	ble.n	8002c64 <calculateVel2+0x56c>
 8002bde:	f04f 0000 	mov.w	r0, #0
 8002be2:	491f      	ldr	r1, [pc, #124]	@ (8002c60 <calculateVel2+0x568>)
 8002be4:	e041      	b.n	8002c6a <calculateVel2+0x572>
 8002be6:	bf00      	nop
 8002be8:	54442d18 	.word	0x54442d18
 8002bec:	400921fb 	.word	0x400921fb
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	3ff00000 	.word	0x3ff00000
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	bff00000 	.word	0xbff00000
 8002c00:	1a63c1f8 	.word	0x1a63c1f8
 8002c04:	404ca5dc 	.word	0x404ca5dc
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40768000 	.word	0x40768000
 8002c10:	200003c8 	.word	0x200003c8
 8002c14:	404e0000 	.word	0x404e0000
 8002c18:	20000020 	.word	0x20000020
 8002c1c:	200003d0 	.word	0x200003d0
 8002c20:	20000404 	.word	0x20000404
 8002c24:	408f4000 	.word	0x408f4000
 8002c28:	200003f0 	.word	0x200003f0
 8002c2c:	200003f4 	.word	0x200003f4
 8002c30:	200003e8 	.word	0x200003e8
 8002c34:	20000034 	.word	0x20000034
 8002c38:	20000038 	.word	0x20000038
 8002c3c:	2000003c 	.word	0x2000003c
 8002c40:	20000030 	.word	0x20000030
 8002c44:	20000024 	.word	0x20000024
 8002c48:	20000028 	.word	0x20000028
 8002c4c:	2000002c 	.word	0x2000002c
 8002c50:	200003dc 	.word	0x200003dc
 8002c54:	200003d8 	.word	0x200003d8
 8002c58:	200003d4 	.word	0x200003d4
 8002c5c:	200003e0 	.word	0x200003e0
 8002c60:	40140000 	.word	0x40140000
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	4981      	ldr	r1, [pc, #516]	@ (8002e70 <calculateVel2+0x778>)
				+ (control_output2 > last_control_output2 ?
 8002c6a:	f7fd fb0f 	bl	800028c <__adddf3>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd ffb7 	bl	8000be8 <__aeabi_d2f>
 8002c7a:	4603      	mov	r3, r0
		control_output2 = last_control_output2
 8002c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e74 <calculateVel2+0x77c>)
 8002c7e:	6013      	str	r3, [r2, #0]
															-RAMP_RATE);
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output2 > 0 && control_output2 < -HYSTERESIS)
 8002c80:	4b7d      	ldr	r3, [pc, #500]	@ (8002e78 <calculateVel2+0x780>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	dd0c      	ble.n	8002caa <calculateVel2+0x5b2>
 8002c90:	4b78      	ldr	r3, [pc, #480]	@ (8002e74 <calculateVel2+0x77c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc57 	bl	8000548 <__aeabi_f2d>
 8002c9a:	a369      	add	r3, pc, #420	@ (adr r3, 8002e40 <calculateVel2+0x748>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd ff1c 	bl	8000adc <__aeabi_dcmplt>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d114      	bne.n	8002cd4 <calculateVel2+0x5dc>
			|| (last_control_output2 < 0 && control_output2 > HYSTERESIS)) {
 8002caa:	4b73      	ldr	r3, [pc, #460]	@ (8002e78 <calculateVel2+0x780>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	d510      	bpl.n	8002cdc <calculateVel2+0x5e4>
 8002cba:	4b6e      	ldr	r3, [pc, #440]	@ (8002e74 <calculateVel2+0x77c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc42 	bl	8000548 <__aeabi_f2d>
 8002cc4:	a360      	add	r3, pc, #384	@ (adr r3, 8002e48 <calculateVel2+0x750>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd ff25 	bl	8000b18 <__aeabi_dcmpgt>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <calculateVel2+0x5e4>
		control_output2 = last_control_output2; // Maintain last control output if within hysteresis
 8002cd4:	4b68      	ldr	r3, [pc, #416]	@ (8002e78 <calculateVel2+0x780>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a66      	ldr	r2, [pc, #408]	@ (8002e74 <calculateVel2+0x77c>)
 8002cda:	6013      	str	r3, [r2, #0]
	}

	realVel2 = vel2 / 2.0; // Scale factor
 8002cdc:	4b67      	ldr	r3, [pc, #412]	@ (8002e7c <calculateVel2+0x784>)
 8002cde:	ed93 7a00 	vldr	s14, [r3]
 8002ce2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cea:	4b65      	ldr	r3, [pc, #404]	@ (8002e80 <calculateVel2+0x788>)
 8002cec:	edc3 7a00 	vstr	s15, [r3]
	realRPM2 = rpm2 / 2.0;
 8002cf0:	4b64      	ldr	r3, [pc, #400]	@ (8002e84 <calculateVel2+0x78c>)
 8002cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cfe:	f7fd fda5 	bl	800084c <__aeabi_ddiv>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7fd ff6d 	bl	8000be8 <__aeabi_d2f>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <calculateVel2+0x790>)
 8002d12:	6013      	str	r3, [r2, #0]
	if (realVel2 <= 0.01 && velTag2 >= 0.0) {
 8002d14:	4b5a      	ldr	r3, [pc, #360]	@ (8002e80 <calculateVel2+0x788>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fc15 	bl	8000548 <__aeabi_f2d>
 8002d1e:	a34c      	add	r3, pc, #304	@ (adr r3, 8002e50 <calculateVel2+0x758>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fee4 	bl	8000af0 <__aeabi_dcmple>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <calculateVel2+0x64e>
 8002d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	db04      	blt.n	8002d46 <calculateVel2+0x64e>
		realVel2 = 0.0;
 8002d3c:	4b50      	ldr	r3, [pc, #320]	@ (8002e80 <calculateVel2+0x788>)
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e017      	b.n	8002d76 <calculateVel2+0x67e>
	} else if (realVel2 >= -0.01 && velTag2 <= 0.0) {
 8002d46:	4b4e      	ldr	r3, [pc, #312]	@ (8002e80 <calculateVel2+0x788>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbfc 	bl	8000548 <__aeabi_f2d>
 8002d50:	a341      	add	r3, pc, #260	@ (adr r3, 8002e58 <calculateVel2+0x760>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fed5 	bl	8000b04 <__aeabi_dcmpge>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <calculateVel2+0x67e>
 8002d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6c:	d803      	bhi.n	8002d76 <calculateVel2+0x67e>
		realVel2 = 0.0;
 8002d6e:	4b44      	ldr	r3, [pc, #272]	@ (8002e80 <calculateVel2+0x788>)
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
	}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output2 = fmax(-0.27, fmin(0.27, control_output2));
 8002d76:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <calculateVel2+0x77c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fbe4 	bl	8000548 <__aeabi_f2d>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8002e60 <calculateVel2+0x768>
 8002d88:	ec43 2b10 	vmov	d0, r2, r3
 8002d8c:	f00b f99e 	bl	800e0cc <fmin>
 8002d90:	eeb0 7a40 	vmov.f32	s14, s0
 8002d94:	eef0 7a60 	vmov.f32	s15, s1
 8002d98:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8002e68 <calculateVel2+0x770>
 8002d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002da0:	eef0 0a67 	vmov.f32	s1, s15
 8002da4:	f00b f968 	bl	800e078 <fmax>
 8002da8:	ec53 2b10 	vmov	r2, r3, d0
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fd ff1a 	bl	8000be8 <__aeabi_d2f>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a2f      	ldr	r2, [pc, #188]	@ (8002e74 <calculateVel2+0x77c>)
 8002db8:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag2 > 0) {
 8002dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc6:	dd14      	ble.n	8002df2 <calculateVel2+0x6fa>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <calculateVel2+0x77c>)
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd2:	f7ff fbe5 	bl	80025a0 <calculate_pwm2>
 8002dd6:	eef0 7a40 	vmov.f32	s15, s0
 8002dda:	4b2c      	ldr	r3, [pc, #176]	@ (8002e8c <calculateVel2+0x794>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002de2:	ee17 2a90 	vmov	r2, s15
 8002de6:	63da      	str	r2, [r3, #60]	@ 0x3c
				calculate_pwm2(control_output2));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002de8:	4b28      	ldr	r3, [pc, #160]	@ (8002e8c <calculateVel2+0x794>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8002df0:	e01a      	b.n	8002e28 <calculateVel2+0x730>
	} else if (velTag2 < 0) {
 8002df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	d513      	bpl.n	8002e28 <calculateVel2+0x730>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <calculateVel2+0x794>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,
 8002e08:	4b1a      	ldr	r3, [pc, #104]	@ (8002e74 <calculateVel2+0x77c>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e12:	f7ff fbc5 	bl	80025a0 <calculate_pwm2>
 8002e16:	eef0 7a40 	vmov.f32	s15, s0
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e8c <calculateVel2+0x794>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e22:	ee17 2a90 	vmov	r2, s15
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
				calculate_pwm2(control_output2));

	}

	// Update last time and last control output
	last_time2 = current_time2;
 8002e28:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <calculateVel2+0x798>)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6013      	str	r3, [r2, #0]
	last_control_output2 = control_output2;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <calculateVel2+0x77c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a11      	ldr	r2, [pc, #68]	@ (8002e78 <calculateVel2+0x780>)
 8002e34:	6013      	str	r3, [r2, #0]
}
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e3e:	bf00      	nop
 8002e40:	eb851eb8 	.word	0xeb851eb8
 8002e44:	bf9eb851 	.word	0xbf9eb851
 8002e48:	eb851eb8 	.word	0xeb851eb8
 8002e4c:	3f9eb851 	.word	0x3f9eb851
 8002e50:	47ae147b 	.word	0x47ae147b
 8002e54:	3f847ae1 	.word	0x3f847ae1
 8002e58:	47ae147b 	.word	0x47ae147b
 8002e5c:	bf847ae1 	.word	0xbf847ae1
 8002e60:	147ae148 	.word	0x147ae148
 8002e64:	3fd147ae 	.word	0x3fd147ae
 8002e68:	147ae148 	.word	0x147ae148
 8002e6c:	bfd147ae 	.word	0xbfd147ae
 8002e70:	c0140000 	.word	0xc0140000
 8002e74:	200003d4 	.word	0x200003d4
 8002e78:	200003e0 	.word	0x200003e0
 8002e7c:	200003d0 	.word	0x200003d0
 8002e80:	200003f8 	.word	0x200003f8
 8002e84:	200003c8 	.word	0x200003c8
 8002e88:	200003fc 	.word	0x200003fc
 8002e8c:	20000570 	.word	0x20000570
 8002e90:	200003ec 	.word	0x200003ec
 8002e94:	00000000 	.word	0x00000000

08002e98 <moving_average_filter3>:
float angular_position_deg3 = 0.0; // Angular position in degrees
float realVel3;
float realRPM3;

// Function to calculate exponential moving average
float moving_average_filter3(float new_velocity) {
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema3 = 0.0; // Initialize EMA variable
	ema3 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema3);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fb50 	bl	8000548 <__aeabi_f2d>
 8002ea8:	a318      	add	r3, pc, #96	@ (adr r3, 8002f0c <moving_average_filter3+0x74>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd fba3 	bl	80005f8 <__aeabi_dmul>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4614      	mov	r4, r2
 8002eb8:	461d      	mov	r5, r3
 8002eba:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <moving_average_filter3+0x70>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fb42 	bl	8000548 <__aeabi_f2d>
 8002ec4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002f00 <moving_average_filter3+0x68>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd fb95 	bl	80005f8 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	f7fd f9d9 	bl	800028c <__adddf3>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f7fd fe81 	bl	8000be8 <__aeabi_d2f>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4a07      	ldr	r2, [pc, #28]	@ (8002f08 <moving_average_filter3+0x70>)
 8002eea:	6013      	str	r3, [r2, #0]
	return ema3;
 8002eec:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <moving_average_filter3+0x70>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	ee07 3a90 	vmov	s15, r3
}
 8002ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bdb0      	pop	{r4, r5, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	9999999a 	.word	0x9999999a
 8002f04:	3fe99999 	.word	0x3fe99999
 8002f08:	200004cc 	.word	0x200004cc
 8002f0c:	9999999a 	.word	0x9999999a
 8002f10:	3fc99999 	.word	0x3fc99999
 8002f14:	00000000 	.word	0x00000000

08002f18 <calculate_pwm3>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm3(float desired_velocity) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8002f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	d505      	bpl.n	8002f3c <calculate_pwm3+0x24>
		desired_velocity = -desired_velocity;
 8002f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f34:	eef1 7a67 	vneg.f32	s15, s15
 8002f38:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fd fb03 	bl	8000548 <__aeabi_f2d>
 8002f42:	a310      	add	r3, pc, #64	@ (adr r3, 8002f84 <calculate_pwm3+0x6c>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fc80 	bl	800084c <__aeabi_ddiv>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <calculate_pwm3+0x68>)
 8002f5a:	f7fd fb4d 	bl	80005f8 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f7fd fe3f 	bl	8000be8 <__aeabi_d2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	ee07 3a90 	vmov	s15, r3
}
 8002f70:	eeb0 0a67 	vmov.f32	s0, s15
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	f3af 8000 	nop.w
 8002f80:	408f4000 	.word	0x408f4000
 8002f84:	147ae148 	.word	0x147ae148
 8002f88:	3fd147ae 	.word	0x3fd147ae

08002f8c <PID_Controller3>:

// PID Controller Function with Anti-Windup
float PID_Controller3(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8002f8c:	b480      	push	{r7}
 8002f8e:	b08d      	sub	sp, #52	@ 0x34
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f96:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f9a:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f9e:	6138      	str	r0, [r7, #16]
 8002fa0:	edc7 1a03 	vstr	s3, [r7, #12]
 8002fa4:	ed87 2a02 	vstr	s4, [r7, #8]
 8002fa8:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error3 = setpoint - measured_value;
 8002fac:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error3;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	ed93 7a00 	vldr	s14, [r3]
 8002fc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003060 <PID_Controller3+0xd4>
 8002fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	dd03      	ble.n	8002fec <PID_Controller3+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <PID_Controller3+0xd8>)
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e00c      	b.n	8003006 <PID_Controller3+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	edd3 7a00 	vldr	s15, [r3]
 8002ff2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003068 <PID_Controller3+0xdc>
 8002ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffe:	d502      	bpl.n	8003006 <PID_Controller3+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <PID_Controller3+0xe0>)
 8003004:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative3 = error3 - last_error;
 8003006:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800300a:	edd7 7a03 	vldr	s15, [r7, #12]
 800300e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003012:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output3 = (Kp * error3) + (Ki * (*integral)) + (Kd * derivative3);
 8003016:	ed97 7a07 	vldr	s14, [r7, #28]
 800301a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800301e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	edd3 6a00 	vldr	s13, [r3]
 8003028:	edd7 7a06 	vldr	s15, [r7, #24]
 800302c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003034:	edd7 6a05 	vldr	s13, [r7, #20]
 8003038:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800303c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003044:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error3;
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	60fb      	str	r3, [r7, #12]

	return output3; // Return the control output
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	ee07 3a90 	vmov	s15, r3
}
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	3734      	adds	r7, #52	@ 0x34
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	42c80000 	.word	0x42c80000
 8003064:	42c80000 	.word	0x42c80000
 8003068:	c2c80000 	.word	0xc2c80000
 800306c:	c2c80000 	.word	0xc2c80000

08003070 <calculateVel3>:

int32_t current_pulse_count3 = 0;
float distance_traveled3 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel3(float velTag3, float current_time3) {
 8003070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	ed87 0a01 	vstr	s0, [r7, #4]
 800307c:	edc7 0a00 	vstr	s1, [r7]

	// Check if velTag3 is within the deadband
	if (fabs(velTag3) < DEAD_BAND) {
 8003080:	edd7 7a01 	vldr	s15, [r7, #4]
 8003084:	eef0 7ae7 	vabs.f32	s15, s15
 8003088:	ee17 0a90 	vmov	r0, s15
 800308c:	f7fd fa5c 	bl	8000548 <__aeabi_f2d>
 8003090:	a382      	add	r3, pc, #520	@ (adr r3, 800329c <calculateVel3+0x22c>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	f7fd fd21 	bl	8000adc <__aeabi_dcmplt>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <calculateVel3+0x36>
		velTag3 = 0; // Set velTag3 to zero if within deadband
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag3 is 0
	if (velTag3 == 0) {
 80030a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d13c      	bne.n	800312e <calculateVel3+0xbe>
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 80030b4:	4b68      	ldr	r3, [pc, #416]	@ (8003258 <calculateVel3+0x1e8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2200      	movs	r2, #0
 80030ba:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <calculateVel3+0x1e8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2200      	movs	r2, #0
 80030c2:	639a      	str	r2, [r3, #56]	@ 0x38
		vel3 = 0.0;
 80030c4:	4b65      	ldr	r3, [pc, #404]	@ (800325c <calculateVel3+0x1ec>)
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 80030cc:	4b64      	ldr	r3, [pc, #400]	@ (8003260 <calculateVel3+0x1f0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm3 = 0.0;
 80030d4:	4963      	ldr	r1, [pc, #396]	@ (8003264 <calculateVel3+0x1f4>)
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9c1 2300 	strd	r2, r3, [r1]
		control_output3 = 0.0;
 80030e2:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <calculateVel3+0x1f8>)
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad3
		realVel3 = 0.0;
 80030ea:	4b60      	ldr	r3, [pc, #384]	@ (800326c <calculateVel3+0x1fc>)
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
		realRPM3 = 0.0;
 80030f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003270 <calculateVel3+0x200>)
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
		integral1_3 = 0.0;
 80030fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003274 <calculateVel3+0x204>)
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
		last_error3 = 0.0;
 8003102:	4b5d      	ldr	r3, [pc, #372]	@ (8003278 <calculateVel3+0x208>)
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
		last_control_output3 = 0.0;
 800310a:	4b5c      	ldr	r3, [pc, #368]	@ (800327c <calculateVel3+0x20c>)
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
		distance_traveled3 = 0.0;
 8003112:	4b5b      	ldr	r3, [pc, #364]	@ (8003280 <calculateVel3+0x210>)
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
		pulse_count3 = 0; // Reset pulse count
 800311a:	4b5a      	ldr	r3, [pc, #360]	@ (8003284 <calculateVel3+0x214>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
		last_velTag3 = velTag3; // Update last velTag3
 8003120:	4a59      	ldr	r2, [pc, #356]	@ (8003288 <calculateVel3+0x218>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8003126:	2064      	movs	r0, #100	@ 0x64
 8003128:	f002 fe8c 	bl	8005e44 <HAL_Delay>
		return; // Exit the function
 800312c:	e33f      	b.n	80037ae <calculateVel3+0x73e>
	}

	// Calculate the time elapsed since the last update
	float delta_time3 = current_time3 - last_time3;
 800312e:	4b57      	ldr	r3, [pc, #348]	@ (800328c <calculateVel3+0x21c>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	ed97 7a00 	vldr	s14, [r7]
 8003138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800313c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count3 = __HAL_TIM_GET_COUNTER(&htim8);
 8003140:	4b47      	ldr	r3, [pc, #284]	@ (8003260 <calculateVel3+0x1f0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	461a      	mov	r2, r3
 8003148:	4b51      	ldr	r3, [pc, #324]	@ (8003290 <calculateVel3+0x220>)
 800314a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800314c:	200a      	movs	r0, #10
 800314e:	f002 fe79 	bl	8005e44 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference3 = current_pulse_count3 - pulse_count3;
 8003152:	4b4f      	ldr	r3, [pc, #316]	@ (8003290 <calculateVel3+0x220>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	4b4a      	ldr	r3, [pc, #296]	@ (8003284 <calculateVel3+0x214>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm3 = fabs((float) pulse_difference3 / (float) PPR) * 60.0; // Always positive
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800316a:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800316e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003172:	eef0 7ae7 	vabs.f32	s15, s15
 8003176:	ee17 0a90 	vmov	r0, s15
 800317a:	f7fd f9e5 	bl	8000548 <__aeabi_f2d>
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	4b44      	ldr	r3, [pc, #272]	@ (8003294 <calculateVel3+0x224>)
 8003184:	f7fd fa38 	bl	80005f8 <__aeabi_dmul>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4935      	ldr	r1, [pc, #212]	@ (8003264 <calculateVel3+0x1f4>)
 800318e:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count3 = current_pulse_count3;
 8003192:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <calculateVel3+0x220>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <calculateVel3+0x214>)
 800319a:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm3 = fmax(0.0, fmin(250.0, rpm3));
 800319c:	4b31      	ldr	r3, [pc, #196]	@ (8003264 <calculateVel3+0x1f4>)
 800319e:	ed93 7b00 	vldr	d7, [r3]
 80031a2:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003240 <calculateVel3+0x1d0>
 80031a6:	eeb0 0a47 	vmov.f32	s0, s14
 80031aa:	eef0 0a67 	vmov.f32	s1, s15
 80031ae:	f00a ff8d 	bl	800e0cc <fmin>
 80031b2:	eeb0 7a40 	vmov.f32	s14, s0
 80031b6:	eef0 7a60 	vmov.f32	s15, s1
 80031ba:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8003248 <calculateVel3+0x1d8>
 80031be:	eeb0 0a47 	vmov.f32	s0, s14
 80031c2:	eef0 0a67 	vmov.f32	s1, s15
 80031c6:	f00a ff57 	bl	800e078 <fmax>
 80031ca:	eeb0 7a40 	vmov.f32	s14, s0
 80031ce:	eef0 7a60 	vmov.f32	s15, s1
 80031d2:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <calculateVel3+0x1f4>)
 80031d4:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel3;
	if (pulse_difference3 < 0) {
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da62      	bge.n	80032a4 <calculateVel3+0x234>
		new_vel3 = -((rpm3 / 60.0) * dia3 * M_PI); // Negative velocity for reverse direction
 80031de:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <calculateVel3+0x1f4>)
 80031e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003294 <calculateVel3+0x224>)
 80031ea:	f7fd fb2f 	bl	800084c <__aeabi_ddiv>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	461d      	mov	r5, r3
 80031f6:	4b28      	ldr	r3, [pc, #160]	@ (8003298 <calculateVel3+0x228>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9a4 	bl	8000548 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4620      	mov	r0, r4
 8003206:	4629      	mov	r1, r5
 8003208:	f7fd f9f6 	bl	80005f8 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	a30e      	add	r3, pc, #56	@ (adr r3, 8003250 <calculateVel3+0x1e0>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9ed 	bl	80005f8 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f7fd fcdf 	bl	8000be8 <__aeabi_d2f>
 800322a:	4603      	mov	r3, r0
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef1 7a67 	vneg.f32	s15, s15
 8003234:	edc7 7a05 	vstr	s15, [r7, #20]
 8003238:	e05c      	b.n	80032f4 <calculateVel3+0x284>
 800323a:	bf00      	nop
 800323c:	f3af 8000 	nop.w
 8003240:	00000000 	.word	0x00000000
 8003244:	406f4000 	.word	0x406f4000
	...
 8003250:	54442d18 	.word	0x54442d18
 8003254:	400921fb 	.word	0x400921fb
 8003258:	200006d8 	.word	0x200006d8
 800325c:	20000418 	.word	0x20000418
 8003260:	20000690 	.word	0x20000690
 8003264:	20000410 	.word	0x20000410
 8003268:	2000041c 	.word	0x2000041c
 800326c:	20000440 	.word	0x20000440
 8003270:	20000444 	.word	0x20000444
 8003274:	20000420 	.word	0x20000420
 8003278:	20000424 	.word	0x20000424
 800327c:	20000428 	.word	0x20000428
 8003280:	2000044c 	.word	0x2000044c
 8003284:	20000408 	.word	0x20000408
 8003288:	2000042c 	.word	0x2000042c
 800328c:	20000434 	.word	0x20000434
 8003290:	20000448 	.word	0x20000448
 8003294:	404e0000 	.word	0x404e0000
 8003298:	20000040 	.word	0x20000040
 800329c:	47ae147b 	.word	0x47ae147b
 80032a0:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel3 = (rpm3 / 60.0) * dia3 * M_PI; // Positive velocity for forward direction
 80032a4:	4bb8      	ldr	r3, [pc, #736]	@ (8003588 <calculateVel3+0x518>)
 80032a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	4bb7      	ldr	r3, [pc, #732]	@ (800358c <calculateVel3+0x51c>)
 80032b0:	f7fd facc 	bl	800084c <__aeabi_ddiv>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4614      	mov	r4, r2
 80032ba:	461d      	mov	r5, r3
 80032bc:	4bb4      	ldr	r3, [pc, #720]	@ (8003590 <calculateVel3+0x520>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f941 	bl	8000548 <__aeabi_f2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4620      	mov	r0, r4
 80032cc:	4629      	mov	r1, r5
 80032ce:	f7fd f993 	bl	80005f8 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003560 <calculateVel3+0x4f0>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fd f98a 	bl	80005f8 <__aeabi_dmul>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	f7fd fc7c 	bl	8000be8 <__aeabi_d2f>
 80032f0:	4603      	mov	r3, r0
 80032f2:	617b      	str	r3, [r7, #20]
	}
	// Constrain the velocity to the range [-1, 1]
	vel3 = fmax(-1.0, fmin(1.0, moving_average_filter3(new_vel3)));
 80032f4:	ed97 0a05 	vldr	s0, [r7, #20]
 80032f8:	f7ff fdce 	bl	8002e98 <moving_average_filter3>
 80032fc:	ee10 3a10 	vmov	r3, s0
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f921 	bl	8000548 <__aeabi_f2d>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8003568 <calculateVel3+0x4f8>
 800330e:	ec43 2b10 	vmov	d0, r2, r3
 8003312:	f00a fedb 	bl	800e0cc <fmin>
 8003316:	eeb0 7a40 	vmov.f32	s14, s0
 800331a:	eef0 7a60 	vmov.f32	s15, s1
 800331e:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 8003570 <calculateVel3+0x500>
 8003322:	eeb0 0a47 	vmov.f32	s0, s14
 8003326:	eef0 0a67 	vmov.f32	s1, s15
 800332a:	f00a fea5 	bl	800e078 <fmax>
 800332e:	ec53 2b10 	vmov	r2, r3, d0
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fc57 	bl	8000be8 <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	4a95      	ldr	r2, [pc, #596]	@ (8003594 <calculateVel3+0x524>)
 800333e:	6013      	str	r3, [r2, #0]
	// Apply moving average filter for velocity
	// vel3 = moving_average_filter3(new_vel3);

	// Update position based on velocity and elapsed time
	distance_traveled3 += vel3 * (delta_time3 / 1000.0); // Linear distance traveled in meters
 8003340:	4b95      	ldr	r3, [pc, #596]	@ (8003598 <calculateVel3+0x528>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f8ff 	bl	8000548 <__aeabi_f2d>
 800334a:	4604      	mov	r4, r0
 800334c:	460d      	mov	r5, r1
 800334e:	4b91      	ldr	r3, [pc, #580]	@ (8003594 <calculateVel3+0x524>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8f8 	bl	8000548 <__aeabi_f2d>
 8003358:	4680      	mov	r8, r0
 800335a:	4689      	mov	r9, r1
 800335c:	6938      	ldr	r0, [r7, #16]
 800335e:	f7fd f8f3 	bl	8000548 <__aeabi_f2d>
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	4b8d      	ldr	r3, [pc, #564]	@ (800359c <calculateVel3+0x52c>)
 8003368:	f7fd fa70 	bl	800084c <__aeabi_ddiv>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4640      	mov	r0, r8
 8003372:	4649      	mov	r1, r9
 8003374:	f7fd f940 	bl	80005f8 <__aeabi_dmul>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fc ff84 	bl	800028c <__adddf3>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	f7fd fc2c 	bl	8000be8 <__aeabi_d2f>
 8003390:	4603      	mov	r3, r0
 8003392:	4a81      	ldr	r2, [pc, #516]	@ (8003598 <calculateVel3+0x528>)
 8003394:	6013      	str	r3, [r2, #0]
	angular_position_rad3 += distance_traveled3 / (dia3 / 2.0); // Update angular position in radians
 8003396:	4b82      	ldr	r3, [pc, #520]	@ (80035a0 <calculateVel3+0x530>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd f8d4 	bl	8000548 <__aeabi_f2d>
 80033a0:	4604      	mov	r4, r0
 80033a2:	460d      	mov	r5, r1
 80033a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003598 <calculateVel3+0x528>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f8cd 	bl	8000548 <__aeabi_f2d>
 80033ae:	4680      	mov	r8, r0
 80033b0:	4689      	mov	r9, r1
 80033b2:	4b77      	ldr	r3, [pc, #476]	@ (8003590 <calculateVel3+0x520>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8c6 	bl	8000548 <__aeabi_f2d>
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033c4:	f7fd fa42 	bl	800084c <__aeabi_ddiv>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4640      	mov	r0, r8
 80033ce:	4649      	mov	r1, r9
 80033d0:	f7fd fa3c 	bl	800084c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4620      	mov	r0, r4
 80033da:	4629      	mov	r1, r5
 80033dc:	f7fc ff56 	bl	800028c <__adddf3>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fd fbfe 	bl	8000be8 <__aeabi_d2f>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a6c      	ldr	r2, [pc, #432]	@ (80035a0 <calculateVel3+0x530>)
 80033f0:	6013      	str	r3, [r2, #0]
	angular_position_deg3 = angular_position_rad3 * (180.0 / M_PI); // Convert to degrees
 80033f2:	4b6b      	ldr	r3, [pc, #428]	@ (80035a0 <calculateVel3+0x530>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f8a6 	bl	8000548 <__aeabi_f2d>
 80033fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8003578 <calculateVel3+0x508>)
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f7fd f8f9 	bl	80005f8 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f7fd fbeb 	bl	8000be8 <__aeabi_d2f>
 8003412:	4603      	mov	r3, r0
 8003414:	4a63      	ldr	r2, [pc, #396]	@ (80035a4 <calculateVel3+0x534>)
 8003416:	6013      	str	r3, [r2, #0]
	angular_position_deg3 = fmod(angular_position_deg3, 360.0);
 8003418:	4b62      	ldr	r3, [pc, #392]	@ (80035a4 <calculateVel3+0x534>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f893 	bl	8000548 <__aeabi_f2d>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8003580 <calculateVel3+0x510>
 800342a:	ec43 2b10 	vmov	d0, r2, r3
 800342e:	f00a fd21 	bl	800de74 <fmod>
 8003432:	ec53 2b10 	vmov	r2, r3, d0
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fbd5 	bl	8000be8 <__aeabi_d2f>
 800343e:	4603      	mov	r3, r0
 8003440:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <calculateVel3+0x534>)
 8003442:	6013      	str	r3, [r2, #0]
	// Kalman filter update
	estimate3 = estimate3; // Predicted state (previous estimate)
 8003444:	4b58      	ldr	r3, [pc, #352]	@ (80035a8 <calculateVel3+0x538>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a57      	ldr	r2, [pc, #348]	@ (80035a8 <calculateVel3+0x538>)
 800344a:	6013      	str	r3, [r2, #0]
	error_covariance3 += process_noise3; // Update error covariance
 800344c:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <calculateVel3+0x53c>)
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <calculateVel3+0x540>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345c:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <calculateVel3+0x53c>)
 800345e:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain3 = error_covariance3 / (error_covariance3 + measurement_noise3); // Calculate Kalman gain
 8003462:	4b52      	ldr	r3, [pc, #328]	@ (80035ac <calculateVel3+0x53c>)
 8003464:	edd3 6a00 	vldr	s13, [r3]
 8003468:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <calculateVel3+0x53c>)
 800346a:	ed93 7a00 	vldr	s14, [r3]
 800346e:	4b51      	ldr	r3, [pc, #324]	@ (80035b4 <calculateVel3+0x544>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800347c:	4b4e      	ldr	r3, [pc, #312]	@ (80035b8 <calculateVel3+0x548>)
 800347e:	edc3 7a00 	vstr	s15, [r3]
	estimate3 += kalman_gain3 * (vel3 - estimate3); // Update estimate with measurement
 8003482:	4b44      	ldr	r3, [pc, #272]	@ (8003594 <calculateVel3+0x524>)
 8003484:	ed93 7a00 	vldr	s14, [r3]
 8003488:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <calculateVel3+0x538>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003492:	4b49      	ldr	r3, [pc, #292]	@ (80035b8 <calculateVel3+0x548>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349c:	4b42      	ldr	r3, [pc, #264]	@ (80035a8 <calculateVel3+0x538>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a6:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <calculateVel3+0x538>)
 80034a8:	edc3 7a00 	vstr	s15, [r3]
	error_covariance3 = (1 - kalman_gain3) * error_covariance3; // Update error covariance
 80034ac:	4b42      	ldr	r3, [pc, #264]	@ (80035b8 <calculateVel3+0x548>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ba:	4b3c      	ldr	r3, [pc, #240]	@ (80035ac <calculateVel3+0x53c>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c4:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <calculateVel3+0x53c>)
 80034c6:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output3 = PID_Controller3(Kp3, Ki3, Kd3, &integral1_3, last_error3,
 80034ca:	4b3c      	ldr	r3, [pc, #240]	@ (80035bc <calculateVel3+0x54c>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	4b3b      	ldr	r3, [pc, #236]	@ (80035c0 <calculateVel3+0x550>)
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <calculateVel3+0x554>)
 80034d8:	edd3 6a00 	vldr	s13, [r3]
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <calculateVel3+0x558>)
 80034de:	ed93 6a00 	vldr	s12, [r3]
 80034e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003594 <calculateVel3+0x524>)
 80034e4:	edd3 5a00 	vldr	s11, [r3]
 80034e8:	eef0 2a65 	vmov.f32	s5, s11
 80034ec:	ed97 2a01 	vldr	s4, [r7, #4]
 80034f0:	eef0 1a46 	vmov.f32	s3, s12
 80034f4:	4835      	ldr	r0, [pc, #212]	@ (80035cc <calculateVel3+0x55c>)
 80034f6:	eeb0 1a66 	vmov.f32	s2, s13
 80034fa:	eef0 0a47 	vmov.f32	s1, s14
 80034fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003502:	f7ff fd43 	bl	8002f8c <PID_Controller3>
 8003506:	eef0 7a40 	vmov.f32	s15, s0
 800350a:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <calculateVel3+0x560>)
 800350c:	edc3 7a00 	vstr	s15, [r3]
			velTag3, vel3);

	// Implement ramping to control output
	if (fabs(control_output3 - last_control_output3) > RAMP_RATE) {
 8003510:	4b2f      	ldr	r3, [pc, #188]	@ (80035d0 <calculateVel3+0x560>)
 8003512:	ed93 7a00 	vldr	s14, [r3]
 8003516:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <calculateVel3+0x564>)
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003520:	eef0 7ae7 	vabs.f32	s15, s15
 8003524:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003530:	dd62      	ble.n	80035f8 <calculateVel3+0x588>
		control_output3 = last_control_output3
				+ (control_output3 > last_control_output3 ?
 8003532:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <calculateVel3+0x564>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd f806 	bl	8000548 <__aeabi_f2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4923      	ldr	r1, [pc, #140]	@ (80035d0 <calculateVel3+0x560>)
 8003542:	ed91 7a00 	vldr	s14, [r1]
 8003546:	4923      	ldr	r1, [pc, #140]	@ (80035d4 <calculateVel3+0x564>)
 8003548:	edd1 7a00 	vldr	s15, [r1]
				RAMP_RATE :
 800354c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	dd42      	ble.n	80035dc <calculateVel3+0x56c>
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	491f      	ldr	r1, [pc, #124]	@ (80035d8 <calculateVel3+0x568>)
 800355c:	e041      	b.n	80035e2 <calculateVel3+0x572>
 800355e:	bf00      	nop
 8003560:	54442d18 	.word	0x54442d18
 8003564:	400921fb 	.word	0x400921fb
 8003568:	00000000 	.word	0x00000000
 800356c:	3ff00000 	.word	0x3ff00000
 8003570:	00000000 	.word	0x00000000
 8003574:	bff00000 	.word	0xbff00000
 8003578:	1a63c1f8 	.word	0x1a63c1f8
 800357c:	404ca5dc 	.word	0x404ca5dc
 8003580:	00000000 	.word	0x00000000
 8003584:	40768000 	.word	0x40768000
 8003588:	20000410 	.word	0x20000410
 800358c:	404e0000 	.word	0x404e0000
 8003590:	20000040 	.word	0x20000040
 8003594:	20000418 	.word	0x20000418
 8003598:	2000044c 	.word	0x2000044c
 800359c:	408f4000 	.word	0x408f4000
 80035a0:	20000438 	.word	0x20000438
 80035a4:	2000043c 	.word	0x2000043c
 80035a8:	20000430 	.word	0x20000430
 80035ac:	20000054 	.word	0x20000054
 80035b0:	20000058 	.word	0x20000058
 80035b4:	2000005c 	.word	0x2000005c
 80035b8:	20000050 	.word	0x20000050
 80035bc:	20000044 	.word	0x20000044
 80035c0:	20000048 	.word	0x20000048
 80035c4:	2000004c 	.word	0x2000004c
 80035c8:	20000424 	.word	0x20000424
 80035cc:	20000420 	.word	0x20000420
 80035d0:	2000041c 	.word	0x2000041c
 80035d4:	20000428 	.word	0x20000428
 80035d8:	40140000 	.word	0x40140000
 80035dc:	f04f 0000 	mov.w	r0, #0
 80035e0:	4981      	ldr	r1, [pc, #516]	@ (80037e8 <calculateVel3+0x778>)
				+ (control_output3 > last_control_output3 ?
 80035e2:	f7fc fe53 	bl	800028c <__adddf3>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fafb 	bl	8000be8 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
		control_output3 = last_control_output3
 80035f4:	4a7d      	ldr	r2, [pc, #500]	@ (80037ec <calculateVel3+0x77c>)
 80035f6:	6013      	str	r3, [r2, #0]
															-RAMP_RATE);
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output3 > 0 && control_output3 < -HYSTERESIS)
 80035f8:	4b7d      	ldr	r3, [pc, #500]	@ (80037f0 <calculateVel3+0x780>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	dd0c      	ble.n	8003622 <calculateVel3+0x5b2>
 8003608:	4b78      	ldr	r3, [pc, #480]	@ (80037ec <calculateVel3+0x77c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ff9b 	bl	8000548 <__aeabi_f2d>
 8003612:	a369      	add	r3, pc, #420	@ (adr r3, 80037b8 <calculateVel3+0x748>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fd fa60 	bl	8000adc <__aeabi_dcmplt>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d114      	bne.n	800364c <calculateVel3+0x5dc>
			|| (last_control_output3 < 0 && control_output3 > HYSTERESIS)) {
 8003622:	4b73      	ldr	r3, [pc, #460]	@ (80037f0 <calculateVel3+0x780>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	d510      	bpl.n	8003654 <calculateVel3+0x5e4>
 8003632:	4b6e      	ldr	r3, [pc, #440]	@ (80037ec <calculateVel3+0x77c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff86 	bl	8000548 <__aeabi_f2d>
 800363c:	a360      	add	r3, pc, #384	@ (adr r3, 80037c0 <calculateVel3+0x750>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fd fa69 	bl	8000b18 <__aeabi_dcmpgt>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <calculateVel3+0x5e4>
		control_output3 = last_control_output3; // Maintain last control output if within hysteresis
 800364c:	4b68      	ldr	r3, [pc, #416]	@ (80037f0 <calculateVel3+0x780>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a66      	ldr	r2, [pc, #408]	@ (80037ec <calculateVel3+0x77c>)
 8003652:	6013      	str	r3, [r2, #0]
	}

	realVel3 = vel3 / 2.0; // Scale factor
 8003654:	4b67      	ldr	r3, [pc, #412]	@ (80037f4 <calculateVel3+0x784>)
 8003656:	ed93 7a00 	vldr	s14, [r3]
 800365a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800365e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003662:	4b65      	ldr	r3, [pc, #404]	@ (80037f8 <calculateVel3+0x788>)
 8003664:	edc3 7a00 	vstr	s15, [r3]
	realRPM3 = rpm3 / 2.0;
 8003668:	4b64      	ldr	r3, [pc, #400]	@ (80037fc <calculateVel3+0x78c>)
 800366a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003676:	f7fd f8e9 	bl	800084c <__aeabi_ddiv>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	f7fd fab1 	bl	8000be8 <__aeabi_d2f>
 8003686:	4603      	mov	r3, r0
 8003688:	4a5d      	ldr	r2, [pc, #372]	@ (8003800 <calculateVel3+0x790>)
 800368a:	6013      	str	r3, [r2, #0]
	if (realVel3 <= 0.01 && velTag3 >= 0.0) {
 800368c:	4b5a      	ldr	r3, [pc, #360]	@ (80037f8 <calculateVel3+0x788>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fc ff59 	bl	8000548 <__aeabi_f2d>
 8003696:	a34c      	add	r3, pc, #304	@ (adr r3, 80037c8 <calculateVel3+0x758>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f7fd fa28 	bl	8000af0 <__aeabi_dcmple>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <calculateVel3+0x64e>
 80036a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b2:	db04      	blt.n	80036be <calculateVel3+0x64e>
		realVel3 = 0.0;
 80036b4:	4b50      	ldr	r3, [pc, #320]	@ (80037f8 <calculateVel3+0x788>)
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e017      	b.n	80036ee <calculateVel3+0x67e>
	} else if (realVel3 >= -0.01 && velTag3 <= 0.0) {
 80036be:	4b4e      	ldr	r3, [pc, #312]	@ (80037f8 <calculateVel3+0x788>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc ff40 	bl	8000548 <__aeabi_f2d>
 80036c8:	a341      	add	r3, pc, #260	@ (adr r3, 80037d0 <calculateVel3+0x760>)
 80036ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ce:	f7fd fa19 	bl	8000b04 <__aeabi_dcmpge>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <calculateVel3+0x67e>
 80036d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d803      	bhi.n	80036ee <calculateVel3+0x67e>
		realVel3 = 0.0;
 80036e6:	4b44      	ldr	r3, [pc, #272]	@ (80037f8 <calculateVel3+0x788>)
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
	}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output3 = fmax(-0.27, fmin(0.27, control_output3));
 80036ee:	4b3f      	ldr	r3, [pc, #252]	@ (80037ec <calculateVel3+0x77c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff28 	bl	8000548 <__aeabi_f2d>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 80037d8 <calculateVel3+0x768>
 8003700:	ec43 2b10 	vmov	d0, r2, r3
 8003704:	f00a fce2 	bl	800e0cc <fmin>
 8003708:	eeb0 7a40 	vmov.f32	s14, s0
 800370c:	eef0 7a60 	vmov.f32	s15, s1
 8003710:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80037e0 <calculateVel3+0x770>
 8003714:	eeb0 0a47 	vmov.f32	s0, s14
 8003718:	eef0 0a67 	vmov.f32	s1, s15
 800371c:	f00a fcac 	bl	800e078 <fmax>
 8003720:	ec53 2b10 	vmov	r2, r3, d0
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f7fd fa5e 	bl	8000be8 <__aeabi_d2f>
 800372c:	4603      	mov	r3, r0
 800372e:	4a2f      	ldr	r2, [pc, #188]	@ (80037ec <calculateVel3+0x77c>)
 8003730:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag3 > 0) {
 8003732:	edd7 7a01 	vldr	s15, [r7, #4]
 8003736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373e:	dd14      	ble.n	800376a <calculateVel3+0x6fa>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8003740:	4b30      	ldr	r3, [pc, #192]	@ (8003804 <calculateVel3+0x794>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2200      	movs	r2, #0
 8003746:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2,
 8003748:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <calculateVel3+0x77c>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	eeb0 0a67 	vmov.f32	s0, s15
 8003752:	f7ff fbe1 	bl	8002f18 <calculate_pwm3>
 8003756:	eef0 7a40 	vmov.f32	s15, s0
 800375a:	4b2a      	ldr	r3, [pc, #168]	@ (8003804 <calculateVel3+0x794>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003762:	ee17 2a90 	vmov	r2, s15
 8003766:	639a      	str	r2, [r3, #56]	@ 0x38
 8003768:	e01a      	b.n	80037a0 <calculateVel3+0x730>
				calculate_pwm3(control_output3));
	} else if (velTag3 < 0) {
 800376a:	edd7 7a01 	vldr	s15, [r7, #4]
 800376e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	d513      	bpl.n	80037a0 <calculateVel3+0x730>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1,
 8003778:	4b1c      	ldr	r3, [pc, #112]	@ (80037ec <calculateVel3+0x77c>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	eeb0 0a67 	vmov.f32	s0, s15
 8003782:	f7ff fbc9 	bl	8002f18 <calculate_pwm3>
 8003786:	eef0 7a40 	vmov.f32	s15, s0
 800378a:	4b1e      	ldr	r3, [pc, #120]	@ (8003804 <calculateVel3+0x794>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003792:	ee17 2a90 	vmov	r2, s15
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34
				calculate_pwm3(control_output3));
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8003798:	4b1a      	ldr	r3, [pc, #104]	@ (8003804 <calculateVel3+0x794>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	// Update last time and last control output
	last_time3 = current_time3;
 80037a0:	4a19      	ldr	r2, [pc, #100]	@ (8003808 <calculateVel3+0x798>)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6013      	str	r3, [r2, #0]
	last_control_output3 = control_output3;
 80037a6:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <calculateVel3+0x77c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a11      	ldr	r2, [pc, #68]	@ (80037f0 <calculateVel3+0x780>)
 80037ac:	6013      	str	r3, [r2, #0]
}
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037b6:	bf00      	nop
 80037b8:	eb851eb8 	.word	0xeb851eb8
 80037bc:	bf9eb851 	.word	0xbf9eb851
 80037c0:	eb851eb8 	.word	0xeb851eb8
 80037c4:	3f9eb851 	.word	0x3f9eb851
 80037c8:	47ae147b 	.word	0x47ae147b
 80037cc:	3f847ae1 	.word	0x3f847ae1
 80037d0:	47ae147b 	.word	0x47ae147b
 80037d4:	bf847ae1 	.word	0xbf847ae1
 80037d8:	147ae148 	.word	0x147ae148
 80037dc:	3fd147ae 	.word	0x3fd147ae
 80037e0:	147ae148 	.word	0x147ae148
 80037e4:	bfd147ae 	.word	0xbfd147ae
 80037e8:	c0140000 	.word	0xc0140000
 80037ec:	2000041c 	.word	0x2000041c
 80037f0:	20000428 	.word	0x20000428
 80037f4:	20000418 	.word	0x20000418
 80037f8:	20000440 	.word	0x20000440
 80037fc:	20000410 	.word	0x20000410
 8003800:	20000444 	.word	0x20000444
 8003804:	200006d8 	.word	0x200006d8
 8003808:	20000434 	.word	0x20000434
 800380c:	00000000 	.word	0x00000000

08003810 <moving_average_filter4>:
float angular_position_deg4 = 0.0; // Angular position in degrees
float realVel4;
float realRPM4;

// Function to calculate exponential moving average
float moving_average_filter4(float new_velocity) {
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema4 = 0.0; // Initialize EMA variable
	ema4 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema4);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fc fe94 	bl	8000548 <__aeabi_f2d>
 8003820:	a318      	add	r3, pc, #96	@ (adr r3, 8003884 <moving_average_filter4+0x74>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fee7 	bl	80005f8 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4614      	mov	r4, r2
 8003830:	461d      	mov	r5, r3
 8003832:	4b13      	ldr	r3, [pc, #76]	@ (8003880 <moving_average_filter4+0x70>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc fe86 	bl	8000548 <__aeabi_f2d>
 800383c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003878 <moving_average_filter4+0x68>)
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f7fc fed9 	bl	80005f8 <__aeabi_dmul>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4620      	mov	r0, r4
 800384c:	4629      	mov	r1, r5
 800384e:	f7fc fd1d 	bl	800028c <__adddf3>
 8003852:	4602      	mov	r2, r0
 8003854:	460b      	mov	r3, r1
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	f7fd f9c5 	bl	8000be8 <__aeabi_d2f>
 800385e:	4603      	mov	r3, r0
 8003860:	4a07      	ldr	r2, [pc, #28]	@ (8003880 <moving_average_filter4+0x70>)
 8003862:	6013      	str	r3, [r2, #0]
	return ema4;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <moving_average_filter4+0x70>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	ee07 3a90 	vmov	s15, r3
}
 800386c:	eeb0 0a67 	vmov.f32	s0, s15
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bdb0      	pop	{r4, r5, r7, pc}
 8003876:	bf00      	nop
 8003878:	9999999a 	.word	0x9999999a
 800387c:	3fe99999 	.word	0x3fe99999
 8003880:	200004d0 	.word	0x200004d0
 8003884:	9999999a 	.word	0x9999999a
 8003888:	3fc99999 	.word	0x3fc99999
 800388c:	00000000 	.word	0x00000000

08003890 <calculate_pwm4>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm4(float desired_velocity) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 800389a:	edd7 7a01 	vldr	s15, [r7, #4]
 800389e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	d505      	bpl.n	80038b4 <calculate_pwm4+0x24>
		desired_velocity = -desired_velocity;
 80038a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ac:	eef1 7a67 	vneg.f32	s15, s15
 80038b0:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7fc fe47 	bl	8000548 <__aeabi_f2d>
 80038ba:	a310      	add	r3, pc, #64	@ (adr r3, 80038fc <calculate_pwm4+0x6c>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fc ffc4 	bl	800084c <__aeabi_ddiv>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <calculate_pwm4+0x68>)
 80038d2:	f7fc fe91 	bl	80005f8 <__aeabi_dmul>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	f7fd f983 	bl	8000be8 <__aeabi_d2f>
 80038e2:	4603      	mov	r3, r0
 80038e4:	ee07 3a90 	vmov	s15, r3
}
 80038e8:	eeb0 0a67 	vmov.f32	s0, s15
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	f3af 8000 	nop.w
 80038f8:	408f4000 	.word	0x408f4000
 80038fc:	147ae148 	.word	0x147ae148
 8003900:	3fd147ae 	.word	0x3fd147ae

08003904 <PID_Controller4>:

// PID Controller Function with Anti-Windup
float PID_Controller4(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8003904:	b480      	push	{r7}
 8003906:	b08d      	sub	sp, #52	@ 0x34
 8003908:	af00      	add	r7, sp, #0
 800390a:	ed87 0a07 	vstr	s0, [r7, #28]
 800390e:	edc7 0a06 	vstr	s1, [r7, #24]
 8003912:	ed87 1a05 	vstr	s2, [r7, #20]
 8003916:	6138      	str	r0, [r7, #16]
 8003918:	edc7 1a03 	vstr	s3, [r7, #12]
 800391c:	ed87 2a02 	vstr	s4, [r7, #8]
 8003920:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error4 = setpoint - measured_value;
 8003924:	ed97 7a02 	vldr	s14, [r7, #8]
 8003928:	edd7 7a01 	vldr	s15, [r7, #4]
 800392c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003930:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error4;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	ed93 7a00 	vldr	s14, [r3]
 800393a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800393e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80039d8 <PID_Controller4+0xd4>
 8003952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395a:	dd03      	ble.n	8003964 <PID_Controller4+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4a1f      	ldr	r2, [pc, #124]	@ (80039dc <PID_Controller4+0xd8>)
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e00c      	b.n	800397e <PID_Controller4+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	edd3 7a00 	vldr	s15, [r3]
 800396a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80039e0 <PID_Controller4+0xdc>
 800396e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	d502      	bpl.n	800397e <PID_Controller4+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <PID_Controller4+0xe0>)
 800397c:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative4 = error4 - last_error;
 800397e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003982:	edd7 7a03 	vldr	s15, [r7, #12]
 8003986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output4 = (Kp * error4) + (Ki * (*integral)) + (Kd * derivative4);
 800398e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003992:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	edd3 6a00 	vldr	s13, [r3]
 80039a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80039a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ac:	edd7 6a05 	vldr	s13, [r7, #20]
 80039b0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80039b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error4;
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	60fb      	str	r3, [r7, #12]

	return output4; // Return the control output
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	ee07 3a90 	vmov	s15, r3
}
 80039ca:	eeb0 0a67 	vmov.f32	s0, s15
 80039ce:	3734      	adds	r7, #52	@ 0x34
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	42c80000 	.word	0x42c80000
 80039dc:	42c80000 	.word	0x42c80000
 80039e0:	c2c80000 	.word	0xc2c80000
 80039e4:	c2c80000 	.word	0xc2c80000

080039e8 <calculateVel4>:

int32_t current_pulse_count4 = 0;
float distance_traveled4 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel4(float velTag4, float current_time4) {
 80039e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039ec:	b086      	sub	sp, #24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	ed87 0a01 	vstr	s0, [r7, #4]
 80039f4:	edc7 0a00 	vstr	s1, [r7]

	// Check if velTag4 is within the deadband
	if (fabs(velTag4) < DEAD_BAND) {
 80039f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fc:	eef0 7ae7 	vabs.f32	s15, s15
 8003a00:	ee17 0a90 	vmov	r0, s15
 8003a04:	f7fc fda0 	bl	8000548 <__aeabi_f2d>
 8003a08:	a382      	add	r3, pc, #520	@ (adr r3, 8003c14 <calculateVel4+0x22c>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fd f865 	bl	8000adc <__aeabi_dcmplt>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <calculateVel4+0x36>
		velTag4 = 0; // Set velTag4 to zero if within deadband
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag4 is 0
	if (velTag4 == 0) {
 8003a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	d13c      	bne.n	8003aa6 <calculateVel4+0xbe>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8003a2c:	4b68      	ldr	r3, [pc, #416]	@ (8003bd0 <calculateVel4+0x1e8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8003a34:	4b66      	ldr	r3, [pc, #408]	@ (8003bd0 <calculateVel4+0x1e8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
		vel4 = 0.0;
 8003a3c:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <calculateVel4+0x1ec>)
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8003a44:	4b64      	ldr	r3, [pc, #400]	@ (8003bd8 <calculateVel4+0x1f0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm4 = 0.0;
 8003a4c:	4963      	ldr	r1, [pc, #396]	@ (8003bdc <calculateVel4+0x1f4>)
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9c1 2300 	strd	r2, r3, [r1]
		control_output4 = 0.0;
 8003a5a:	4b61      	ldr	r3, [pc, #388]	@ (8003be0 <calculateVel4+0x1f8>)
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad4
		realVel4 = 0.0;
 8003a62:	4b60      	ldr	r3, [pc, #384]	@ (8003be4 <calculateVel4+0x1fc>)
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
		realRPM4 = 0.0;
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003be8 <calculateVel4+0x200>)
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
		integral1_4 = 0.0;
 8003a72:	4b5e      	ldr	r3, [pc, #376]	@ (8003bec <calculateVel4+0x204>)
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
		last_error4 = 0.0;
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf0 <calculateVel4+0x208>)
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
		last_control_output4 = 0.0;
 8003a82:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf4 <calculateVel4+0x20c>)
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
		distance_traveled4 = 0.0;
 8003a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <calculateVel4+0x210>)
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
		pulse_count4 = 0; // Reset pulse count
 8003a92:	4b5a      	ldr	r3, [pc, #360]	@ (8003bfc <calculateVel4+0x214>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
		last_velTag4 = velTag4; // Update last velTag4
 8003a98:	4a59      	ldr	r2, [pc, #356]	@ (8003c00 <calculateVel4+0x218>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8003a9e:	2064      	movs	r0, #100	@ 0x64
 8003aa0:	f002 f9d0 	bl	8005e44 <HAL_Delay>
		return; // Exit the function
 8003aa4:	e33f      	b.n	8004126 <calculateVel4+0x73e>
	}

	// Calculate the time elapsed since the last update
	float delta_time4 = current_time4 - last_time4;
 8003aa6:	4b57      	ldr	r3, [pc, #348]	@ (8003c04 <calculateVel4+0x21c>)
 8003aa8:	edd3 7a00 	vldr	s15, [r3]
 8003aac:	ed97 7a00 	vldr	s14, [r7]
 8003ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab4:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count4 = __HAL_TIM_GET_COUNTER(&htim5);
 8003ab8:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <calculateVel4+0x1f0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b51      	ldr	r3, [pc, #324]	@ (8003c08 <calculateVel4+0x220>)
 8003ac2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8003ac4:	200a      	movs	r0, #10
 8003ac6:	f002 f9bd 	bl	8005e44 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference4 = current_pulse_count4 - pulse_count4;
 8003aca:	4b4f      	ldr	r3, [pc, #316]	@ (8003c08 <calculateVel4+0x220>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bfc <calculateVel4+0x214>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm4 = fabs((float) pulse_difference4 / (float) PPR) * 60.0; // Always positive
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ae2:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8003ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aea:	eef0 7ae7 	vabs.f32	s15, s15
 8003aee:	ee17 0a90 	vmov	r0, s15
 8003af2:	f7fc fd29 	bl	8000548 <__aeabi_f2d>
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	4b44      	ldr	r3, [pc, #272]	@ (8003c0c <calculateVel4+0x224>)
 8003afc:	f7fc fd7c 	bl	80005f8 <__aeabi_dmul>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4935      	ldr	r1, [pc, #212]	@ (8003bdc <calculateVel4+0x1f4>)
 8003b06:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count4 = current_pulse_count4;
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c08 <calculateVel4+0x220>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4b3a      	ldr	r3, [pc, #232]	@ (8003bfc <calculateVel4+0x214>)
 8003b12:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm4 = fmax(0.0, fmin(250.0, rpm4));
 8003b14:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <calculateVel4+0x1f4>)
 8003b16:	ed93 7b00 	vldr	d7, [r3]
 8003b1a:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003bb8 <calculateVel4+0x1d0>
 8003b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b22:	eef0 0a67 	vmov.f32	s1, s15
 8003b26:	f00a fad1 	bl	800e0cc <fmin>
 8003b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b2e:	eef0 7a60 	vmov.f32	s15, s1
 8003b32:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8003bc0 <calculateVel4+0x1d8>
 8003b36:	eeb0 0a47 	vmov.f32	s0, s14
 8003b3a:	eef0 0a67 	vmov.f32	s1, s15
 8003b3e:	f00a fa9b 	bl	800e078 <fmax>
 8003b42:	eeb0 7a40 	vmov.f32	s14, s0
 8003b46:	eef0 7a60 	vmov.f32	s15, s1
 8003b4a:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <calculateVel4+0x1f4>)
 8003b4c:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel4;
	if (pulse_difference4 < 0) {
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	da62      	bge.n	8003c1c <calculateVel4+0x234>
		new_vel4 = -((rpm4 / 60.0) * dia4 * M_PI); // Negative velocity for reverse direction
 8003b56:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <calculateVel4+0x1f4>)
 8003b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	4b2a      	ldr	r3, [pc, #168]	@ (8003c0c <calculateVel4+0x224>)
 8003b62:	f7fc fe73 	bl	800084c <__aeabi_ddiv>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4614      	mov	r4, r2
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <calculateVel4+0x228>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fce8 	bl	8000548 <__aeabi_f2d>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	4629      	mov	r1, r5
 8003b80:	f7fc fd3a 	bl	80005f8 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003bc8 <calculateVel4+0x1e0>)
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f7fc fd31 	bl	80005f8 <__aeabi_dmul>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fd f823 	bl	8000be8 <__aeabi_d2f>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef1 7a67 	vneg.f32	s15, s15
 8003bac:	edc7 7a05 	vstr	s15, [r7, #20]
 8003bb0:	e05c      	b.n	8003c6c <calculateVel4+0x284>
 8003bb2:	bf00      	nop
 8003bb4:	f3af 8000 	nop.w
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	406f4000 	.word	0x406f4000
	...
 8003bc8:	54442d18 	.word	0x54442d18
 8003bcc:	400921fb 	.word	0x400921fb
 8003bd0:	20000600 	.word	0x20000600
 8003bd4:	20000460 	.word	0x20000460
 8003bd8:	20000648 	.word	0x20000648
 8003bdc:	20000458 	.word	0x20000458
 8003be0:	20000464 	.word	0x20000464
 8003be4:	20000488 	.word	0x20000488
 8003be8:	2000048c 	.word	0x2000048c
 8003bec:	20000468 	.word	0x20000468
 8003bf0:	2000046c 	.word	0x2000046c
 8003bf4:	20000470 	.word	0x20000470
 8003bf8:	20000494 	.word	0x20000494
 8003bfc:	20000450 	.word	0x20000450
 8003c00:	20000474 	.word	0x20000474
 8003c04:	2000047c 	.word	0x2000047c
 8003c08:	20000490 	.word	0x20000490
 8003c0c:	404e0000 	.word	0x404e0000
 8003c10:	20000060 	.word	0x20000060
 8003c14:	47ae147b 	.word	0x47ae147b
 8003c18:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel4 = (rpm4 / 60.0) * dia4 * M_PI; // Positive velocity for forward direction
 8003c1c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f00 <calculateVel4+0x518>)
 8003c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	4bb7      	ldr	r3, [pc, #732]	@ (8003f04 <calculateVel4+0x51c>)
 8003c28:	f7fc fe10 	bl	800084c <__aeabi_ddiv>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4614      	mov	r4, r2
 8003c32:	461d      	mov	r5, r3
 8003c34:	4bb4      	ldr	r3, [pc, #720]	@ (8003f08 <calculateVel4+0x520>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fc fc85 	bl	8000548 <__aeabi_f2d>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7fc fcd7 	bl	80005f8 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	a3a1      	add	r3, pc, #644	@ (adr r3, 8003ed8 <calculateVel4+0x4f0>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc fcce 	bl	80005f8 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f7fc ffc0 	bl	8000be8 <__aeabi_d2f>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	617b      	str	r3, [r7, #20]
	}

	// Constrain the velocity to the range [-1, 1]
	vel4 = fmax(-1.0, fmin(1.0, moving_average_filter4(new_vel4)));
 8003c6c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c70:	f7ff fdce 	bl	8003810 <moving_average_filter4>
 8003c74:	ee10 3a10 	vmov	r3, s0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc65 	bl	8000548 <__aeabi_f2d>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	ed9f 1b97 	vldr	d1, [pc, #604]	@ 8003ee0 <calculateVel4+0x4f8>
 8003c86:	ec43 2b10 	vmov	d0, r2, r3
 8003c8a:	f00a fa1f 	bl	800e0cc <fmin>
 8003c8e:	eeb0 7a40 	vmov.f32	s14, s0
 8003c92:	eef0 7a60 	vmov.f32	s15, s1
 8003c96:	ed9f 1b94 	vldr	d1, [pc, #592]	@ 8003ee8 <calculateVel4+0x500>
 8003c9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003c9e:	eef0 0a67 	vmov.f32	s1, s15
 8003ca2:	f00a f9e9 	bl	800e078 <fmax>
 8003ca6:	ec53 2b10 	vmov	r2, r3, d0
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fc ff9b 	bl	8000be8 <__aeabi_d2f>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4a95      	ldr	r2, [pc, #596]	@ (8003f0c <calculateVel4+0x524>)
 8003cb6:	6013      	str	r3, [r2, #0]
	// Apply moving average filter for velocity
	//  vel4 = moving_average_filter4(new_vel4);

	// Update position based on velocity and elapsed time
	distance_traveled4 += vel4 * (delta_time4 / 1000.0); // Linear distance traveled in meters
 8003cb8:	4b95      	ldr	r3, [pc, #596]	@ (8003f10 <calculateVel4+0x528>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc43 	bl	8000548 <__aeabi_f2d>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	460d      	mov	r5, r1
 8003cc6:	4b91      	ldr	r3, [pc, #580]	@ (8003f0c <calculateVel4+0x524>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc3c 	bl	8000548 <__aeabi_f2d>
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	4689      	mov	r9, r1
 8003cd4:	6938      	ldr	r0, [r7, #16]
 8003cd6:	f7fc fc37 	bl	8000548 <__aeabi_f2d>
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <calculateVel4+0x52c>)
 8003ce0:	f7fc fdb4 	bl	800084c <__aeabi_ddiv>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4640      	mov	r0, r8
 8003cea:	4649      	mov	r1, r9
 8003cec:	f7fc fc84 	bl	80005f8 <__aeabi_dmul>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	f7fc fac8 	bl	800028c <__adddf3>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4610      	mov	r0, r2
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7fc ff70 	bl	8000be8 <__aeabi_d2f>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a81      	ldr	r2, [pc, #516]	@ (8003f10 <calculateVel4+0x528>)
 8003d0c:	6013      	str	r3, [r2, #0]
	angular_position_rad4 += distance_traveled4 / (dia4 / 2.0); // Update angular position in radians
 8003d0e:	4b82      	ldr	r3, [pc, #520]	@ (8003f18 <calculateVel4+0x530>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fc fc18 	bl	8000548 <__aeabi_f2d>
 8003d18:	4604      	mov	r4, r0
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f10 <calculateVel4+0x528>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fc11 	bl	8000548 <__aeabi_f2d>
 8003d26:	4680      	mov	r8, r0
 8003d28:	4689      	mov	r9, r1
 8003d2a:	4b77      	ldr	r3, [pc, #476]	@ (8003f08 <calculateVel4+0x520>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fc0a 	bl	8000548 <__aeabi_f2d>
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003d3c:	f7fc fd86 	bl	800084c <__aeabi_ddiv>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4640      	mov	r0, r8
 8003d46:	4649      	mov	r1, r9
 8003d48:	f7fc fd80 	bl	800084c <__aeabi_ddiv>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4620      	mov	r0, r4
 8003d52:	4629      	mov	r1, r5
 8003d54:	f7fc fa9a 	bl	800028c <__adddf3>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f7fc ff42 	bl	8000be8 <__aeabi_d2f>
 8003d64:	4603      	mov	r3, r0
 8003d66:	4a6c      	ldr	r2, [pc, #432]	@ (8003f18 <calculateVel4+0x530>)
 8003d68:	6013      	str	r3, [r2, #0]
	angular_position_deg4 = angular_position_rad4 * (180.0 / M_PI); // Convert to degrees
 8003d6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003f18 <calculateVel4+0x530>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fc fbea 	bl	8000548 <__aeabi_f2d>
 8003d74:	a35e      	add	r3, pc, #376	@ (adr r3, 8003ef0 <calculateVel4+0x508>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f7fc fc3d 	bl	80005f8 <__aeabi_dmul>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	f7fc ff2f 	bl	8000be8 <__aeabi_d2f>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4a63      	ldr	r2, [pc, #396]	@ (8003f1c <calculateVel4+0x534>)
 8003d8e:	6013      	str	r3, [r2, #0]
	angular_position_deg4 = fmod(angular_position_deg4, 360.0);
 8003d90:	4b62      	ldr	r3, [pc, #392]	@ (8003f1c <calculateVel4+0x534>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fbd7 	bl	8000548 <__aeabi_f2d>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8003ef8 <calculateVel4+0x510>
 8003da2:	ec43 2b10 	vmov	d0, r2, r3
 8003da6:	f00a f865 	bl	800de74 <fmod>
 8003daa:	ec53 2b10 	vmov	r2, r3, d0
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	f7fc ff19 	bl	8000be8 <__aeabi_d2f>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4a58      	ldr	r2, [pc, #352]	@ (8003f1c <calculateVel4+0x534>)
 8003dba:	6013      	str	r3, [r2, #0]
	// Kalman filter update
	estimate4 = estimate4; // Predicted state (previous estimate)
 8003dbc:	4b58      	ldr	r3, [pc, #352]	@ (8003f20 <calculateVel4+0x538>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a57      	ldr	r2, [pc, #348]	@ (8003f20 <calculateVel4+0x538>)
 8003dc2:	6013      	str	r3, [r2, #0]
	error_covariance4 += process_noise4; // Update error covariance
 8003dc4:	4b57      	ldr	r3, [pc, #348]	@ (8003f24 <calculateVel4+0x53c>)
 8003dc6:	ed93 7a00 	vldr	s14, [r3]
 8003dca:	4b57      	ldr	r3, [pc, #348]	@ (8003f28 <calculateVel4+0x540>)
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd4:	4b53      	ldr	r3, [pc, #332]	@ (8003f24 <calculateVel4+0x53c>)
 8003dd6:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain4 = error_covariance4 / (error_covariance4 + measurement_noise4); // Calculate Kalman gain
 8003dda:	4b52      	ldr	r3, [pc, #328]	@ (8003f24 <calculateVel4+0x53c>)
 8003ddc:	edd3 6a00 	vldr	s13, [r3]
 8003de0:	4b50      	ldr	r3, [pc, #320]	@ (8003f24 <calculateVel4+0x53c>)
 8003de2:	ed93 7a00 	vldr	s14, [r3]
 8003de6:	4b51      	ldr	r3, [pc, #324]	@ (8003f2c <calculateVel4+0x544>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f30 <calculateVel4+0x548>)
 8003df6:	edc3 7a00 	vstr	s15, [r3]
	estimate4 += kalman_gain4 * (vel4 - estimate4); // Update estimate with measurement
 8003dfa:	4b44      	ldr	r3, [pc, #272]	@ (8003f0c <calculateVel4+0x524>)
 8003dfc:	ed93 7a00 	vldr	s14, [r3]
 8003e00:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <calculateVel4+0x538>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e0a:	4b49      	ldr	r3, [pc, #292]	@ (8003f30 <calculateVel4+0x548>)
 8003e0c:	edd3 7a00 	vldr	s15, [r3]
 8003e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e14:	4b42      	ldr	r3, [pc, #264]	@ (8003f20 <calculateVel4+0x538>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e1e:	4b40      	ldr	r3, [pc, #256]	@ (8003f20 <calculateVel4+0x538>)
 8003e20:	edc3 7a00 	vstr	s15, [r3]
	error_covariance4 = (1 - kalman_gain4) * error_covariance4; // Update error covariance
 8003e24:	4b42      	ldr	r3, [pc, #264]	@ (8003f30 <calculateVel4+0x548>)
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e32:	4b3c      	ldr	r3, [pc, #240]	@ (8003f24 <calculateVel4+0x53c>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <calculateVel4+0x53c>)
 8003e3e:	edc3 7a00 	vstr	s15, [r3]
	// Calculate control output using PID controller
	control_output4 = PID_Controller4(Kp4, Ki4, Kd4, &integral1_4, last_error4,
 8003e42:	4b3c      	ldr	r3, [pc, #240]	@ (8003f34 <calculateVel4+0x54c>)
 8003e44:	edd3 7a00 	vldr	s15, [r3]
 8003e48:	4b3b      	ldr	r3, [pc, #236]	@ (8003f38 <calculateVel4+0x550>)
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f3c <calculateVel4+0x554>)
 8003e50:	edd3 6a00 	vldr	s13, [r3]
 8003e54:	4b3a      	ldr	r3, [pc, #232]	@ (8003f40 <calculateVel4+0x558>)
 8003e56:	ed93 6a00 	vldr	s12, [r3]
 8003e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8003f0c <calculateVel4+0x524>)
 8003e5c:	edd3 5a00 	vldr	s11, [r3]
 8003e60:	eef0 2a65 	vmov.f32	s5, s11
 8003e64:	ed97 2a01 	vldr	s4, [r7, #4]
 8003e68:	eef0 1a46 	vmov.f32	s3, s12
 8003e6c:	4835      	ldr	r0, [pc, #212]	@ (8003f44 <calculateVel4+0x55c>)
 8003e6e:	eeb0 1a66 	vmov.f32	s2, s13
 8003e72:	eef0 0a47 	vmov.f32	s1, s14
 8003e76:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7a:	f7ff fd43 	bl	8003904 <PID_Controller4>
 8003e7e:	eef0 7a40 	vmov.f32	s15, s0
 8003e82:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <calculateVel4+0x560>)
 8003e84:	edc3 7a00 	vstr	s15, [r3]
			velTag4, vel4);

	// Implement ramping to control output
	if (fabs(control_output4 - last_control_output4) > RAMP_RATE) {
 8003e88:	4b2f      	ldr	r3, [pc, #188]	@ (8003f48 <calculateVel4+0x560>)
 8003e8a:	ed93 7a00 	vldr	s14, [r3]
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f4c <calculateVel4+0x564>)
 8003e90:	edd3 7a00 	vldr	s15, [r3]
 8003e94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e98:	eef0 7ae7 	vabs.f32	s15, s15
 8003e9c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea8:	dd62      	ble.n	8003f70 <calculateVel4+0x588>
		control_output4 = last_control_output4
				+ (control_output4 > last_control_output4 ?
 8003eaa:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <calculateVel4+0x564>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fb4a 	bl	8000548 <__aeabi_f2d>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4923      	ldr	r1, [pc, #140]	@ (8003f48 <calculateVel4+0x560>)
 8003eba:	ed91 7a00 	vldr	s14, [r1]
 8003ebe:	4923      	ldr	r1, [pc, #140]	@ (8003f4c <calculateVel4+0x564>)
 8003ec0:	edd1 7a00 	vldr	s15, [r1]
				RAMP_RATE :
 8003ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ecc:	dd42      	ble.n	8003f54 <calculateVel4+0x56c>
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	491f      	ldr	r1, [pc, #124]	@ (8003f50 <calculateVel4+0x568>)
 8003ed4:	e041      	b.n	8003f5a <calculateVel4+0x572>
 8003ed6:	bf00      	nop
 8003ed8:	54442d18 	.word	0x54442d18
 8003edc:	400921fb 	.word	0x400921fb
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	3ff00000 	.word	0x3ff00000
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	bff00000 	.word	0xbff00000
 8003ef0:	1a63c1f8 	.word	0x1a63c1f8
 8003ef4:	404ca5dc 	.word	0x404ca5dc
 8003ef8:	00000000 	.word	0x00000000
 8003efc:	40768000 	.word	0x40768000
 8003f00:	20000458 	.word	0x20000458
 8003f04:	404e0000 	.word	0x404e0000
 8003f08:	20000060 	.word	0x20000060
 8003f0c:	20000460 	.word	0x20000460
 8003f10:	20000494 	.word	0x20000494
 8003f14:	408f4000 	.word	0x408f4000
 8003f18:	20000480 	.word	0x20000480
 8003f1c:	20000484 	.word	0x20000484
 8003f20:	20000478 	.word	0x20000478
 8003f24:	20000074 	.word	0x20000074
 8003f28:	20000078 	.word	0x20000078
 8003f2c:	2000007c 	.word	0x2000007c
 8003f30:	20000070 	.word	0x20000070
 8003f34:	20000064 	.word	0x20000064
 8003f38:	20000068 	.word	0x20000068
 8003f3c:	2000006c 	.word	0x2000006c
 8003f40:	2000046c 	.word	0x2000046c
 8003f44:	20000468 	.word	0x20000468
 8003f48:	20000464 	.word	0x20000464
 8003f4c:	20000470 	.word	0x20000470
 8003f50:	40140000 	.word	0x40140000
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	4981      	ldr	r1, [pc, #516]	@ (8004160 <calculateVel4+0x778>)
				+ (control_output4 > last_control_output4 ?
 8003f5a:	f7fc f997 	bl	800028c <__adddf3>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f7fc fe3f 	bl	8000be8 <__aeabi_d2f>
 8003f6a:	4603      	mov	r3, r0
		control_output4 = last_control_output4
 8003f6c:	4a7d      	ldr	r2, [pc, #500]	@ (8004164 <calculateVel4+0x77c>)
 8003f6e:	6013      	str	r3, [r2, #0]
															-RAMP_RATE);
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output4 > 0 && control_output4 < -HYSTERESIS)
 8003f70:	4b7d      	ldr	r3, [pc, #500]	@ (8004168 <calculateVel4+0x780>)
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	dd0c      	ble.n	8003f9a <calculateVel4+0x5b2>
 8003f80:	4b78      	ldr	r3, [pc, #480]	@ (8004164 <calculateVel4+0x77c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fc fadf 	bl	8000548 <__aeabi_f2d>
 8003f8a:	a369      	add	r3, pc, #420	@ (adr r3, 8004130 <calculateVel4+0x748>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc fda4 	bl	8000adc <__aeabi_dcmplt>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d114      	bne.n	8003fc4 <calculateVel4+0x5dc>
			|| (last_control_output4 < 0 && control_output4 > HYSTERESIS)) {
 8003f9a:	4b73      	ldr	r3, [pc, #460]	@ (8004168 <calculateVel4+0x780>)
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	d510      	bpl.n	8003fcc <calculateVel4+0x5e4>
 8003faa:	4b6e      	ldr	r3, [pc, #440]	@ (8004164 <calculateVel4+0x77c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc faca 	bl	8000548 <__aeabi_f2d>
 8003fb4:	a360      	add	r3, pc, #384	@ (adr r3, 8004138 <calculateVel4+0x750>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f7fc fdad 	bl	8000b18 <__aeabi_dcmpgt>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <calculateVel4+0x5e4>
		control_output4 = last_control_output4; // Maintain last control output if within hysteresis
 8003fc4:	4b68      	ldr	r3, [pc, #416]	@ (8004168 <calculateVel4+0x780>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a66      	ldr	r2, [pc, #408]	@ (8004164 <calculateVel4+0x77c>)
 8003fca:	6013      	str	r3, [r2, #0]
	}

	realVel4 = vel4 / 2.0; // Scale factor
 8003fcc:	4b67      	ldr	r3, [pc, #412]	@ (800416c <calculateVel4+0x784>)
 8003fce:	ed93 7a00 	vldr	s14, [r3]
 8003fd2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fda:	4b65      	ldr	r3, [pc, #404]	@ (8004170 <calculateVel4+0x788>)
 8003fdc:	edc3 7a00 	vstr	s15, [r3]
	realRPM4 = rpm4 / 2.0;
 8003fe0:	4b64      	ldr	r3, [pc, #400]	@ (8004174 <calculateVel4+0x78c>)
 8003fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003fee:	f7fc fc2d 	bl	800084c <__aeabi_ddiv>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fdf5 	bl	8000be8 <__aeabi_d2f>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a5d      	ldr	r2, [pc, #372]	@ (8004178 <calculateVel4+0x790>)
 8004002:	6013      	str	r3, [r2, #0]
	if (realVel4 <= 0.01 && velTag4 >= 0.0) {
 8004004:	4b5a      	ldr	r3, [pc, #360]	@ (8004170 <calculateVel4+0x788>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc fa9d 	bl	8000548 <__aeabi_f2d>
 800400e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004140 <calculateVel4+0x758>)
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f7fc fd6c 	bl	8000af0 <__aeabi_dcmple>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <calculateVel4+0x64e>
 800401e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402a:	db04      	blt.n	8004036 <calculateVel4+0x64e>
		realVel4 = 0.0;
 800402c:	4b50      	ldr	r3, [pc, #320]	@ (8004170 <calculateVel4+0x788>)
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e017      	b.n	8004066 <calculateVel4+0x67e>
	} else if (realVel4 >= -0.01 && velTag4 <= 0.0) {
 8004036:	4b4e      	ldr	r3, [pc, #312]	@ (8004170 <calculateVel4+0x788>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fa84 	bl	8000548 <__aeabi_f2d>
 8004040:	a341      	add	r3, pc, #260	@ (adr r3, 8004148 <calculateVel4+0x760>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fd5d 	bl	8000b04 <__aeabi_dcmpge>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <calculateVel4+0x67e>
 8004050:	edd7 7a01 	vldr	s15, [r7, #4]
 8004054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405c:	d803      	bhi.n	8004066 <calculateVel4+0x67e>
		realVel4 = 0.0;
 800405e:	4b44      	ldr	r3, [pc, #272]	@ (8004170 <calculateVel4+0x788>)
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
	}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output4 = fmax(-0.27, fmin(0.27, control_output4));
 8004066:	4b3f      	ldr	r3, [pc, #252]	@ (8004164 <calculateVel4+0x77c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc fa6c 	bl	8000548 <__aeabi_f2d>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8004150 <calculateVel4+0x768>
 8004078:	ec43 2b10 	vmov	d0, r2, r3
 800407c:	f00a f826 	bl	800e0cc <fmin>
 8004080:	eeb0 7a40 	vmov.f32	s14, s0
 8004084:	eef0 7a60 	vmov.f32	s15, s1
 8004088:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8004158 <calculateVel4+0x770>
 800408c:	eeb0 0a47 	vmov.f32	s0, s14
 8004090:	eef0 0a67 	vmov.f32	s1, s15
 8004094:	f009 fff0 	bl	800e078 <fmax>
 8004098:	ec53 2b10 	vmov	r2, r3, d0
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	f7fc fda2 	bl	8000be8 <__aeabi_d2f>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004164 <calculateVel4+0x77c>)
 80040a8:	6013      	str	r3, [r2, #0]

	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag4 > 0) {
 80040aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	dd14      	ble.n	80040e2 <calculateVel4+0x6fa>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 80040b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <calculateVel4+0x77c>)
 80040ba:	edd3 7a00 	vldr	s15, [r3]
 80040be:	eeb0 0a67 	vmov.f32	s0, s15
 80040c2:	f7ff fbe5 	bl	8003890 <calculate_pwm4>
 80040c6:	eef0 7a40 	vmov.f32	s15, s0
 80040ca:	4b2c      	ldr	r3, [pc, #176]	@ (800417c <calculateVel4+0x794>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d2:	ee17 2a90 	vmov	r2, s15
 80040d6:	63da      	str	r2, [r3, #60]	@ 0x3c
				calculate_pwm4(control_output4));
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80040d8:	4b28      	ldr	r3, [pc, #160]	@ (800417c <calculateVel4+0x794>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2200      	movs	r2, #0
 80040de:	641a      	str	r2, [r3, #64]	@ 0x40
 80040e0:	e01a      	b.n	8004118 <calculateVel4+0x730>

	} else if (velTag4 < 0) {
 80040e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80040e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ee:	d513      	bpl.n	8004118 <calculateVel4+0x730>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80040f0:	4b22      	ldr	r3, [pc, #136]	@ (800417c <calculateVel4+0x794>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2200      	movs	r2, #0
 80040f6:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,
 80040f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <calculateVel4+0x77c>)
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004102:	f7ff fbc5 	bl	8003890 <calculate_pwm4>
 8004106:	eef0 7a40 	vmov.f32	s15, s0
 800410a:	4b1c      	ldr	r3, [pc, #112]	@ (800417c <calculateVel4+0x794>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004112:	ee17 2a90 	vmov	r2, s15
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40
				calculate_pwm4(control_output4));
	}

	// Update last time and last control output
	last_time4 = current_time4;
 8004118:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <calculateVel4+0x798>)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6013      	str	r3, [r2, #0]
	last_control_output4 = control_output4;
 800411e:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <calculateVel4+0x77c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a11      	ldr	r2, [pc, #68]	@ (8004168 <calculateVel4+0x780>)
 8004124:	6013      	str	r3, [r2, #0]
}
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800412e:	bf00      	nop
 8004130:	eb851eb8 	.word	0xeb851eb8
 8004134:	bf9eb851 	.word	0xbf9eb851
 8004138:	eb851eb8 	.word	0xeb851eb8
 800413c:	3f9eb851 	.word	0x3f9eb851
 8004140:	47ae147b 	.word	0x47ae147b
 8004144:	3f847ae1 	.word	0x3f847ae1
 8004148:	47ae147b 	.word	0x47ae147b
 800414c:	bf847ae1 	.word	0xbf847ae1
 8004150:	147ae148 	.word	0x147ae148
 8004154:	3fd147ae 	.word	0x3fd147ae
 8004158:	147ae148 	.word	0x147ae148
 800415c:	bfd147ae 	.word	0xbfd147ae
 8004160:	c0140000 	.word	0xc0140000
 8004164:	20000464 	.word	0x20000464
 8004168:	20000470 	.word	0x20000470
 800416c:	20000460 	.word	0x20000460
 8004170:	20000488 	.word	0x20000488
 8004174:	20000458 	.word	0x20000458
 8004178:	2000048c 	.word	0x2000048c
 800417c:	20000600 	.word	0x20000600
 8004180:	2000047c 	.word	0x2000047c

08004184 <PID_ControllerX>:

float LX_PID =0.0;
float LY_PID =0.0;
float AZ_PID =0.0;
float PID_ControllerX(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8004184:	b480      	push	{r7}
 8004186:	b08d      	sub	sp, #52	@ 0x34
 8004188:	af00      	add	r7, sp, #0
 800418a:	ed87 0a07 	vstr	s0, [r7, #28]
 800418e:	edc7 0a06 	vstr	s1, [r7, #24]
 8004192:	ed87 1a05 	vstr	s2, [r7, #20]
 8004196:	6138      	str	r0, [r7, #16]
 8004198:	edc7 1a03 	vstr	s3, [r7, #12]
 800419c:	ed87 2a02 	vstr	s4, [r7, #8]
 80041a0:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float errorV = setpoint - measured_value;
 80041a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80041a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += errorV;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	ed93 7a00 	vldr	s14, [r3]
 80041ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80041be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	edd3 7a00 	vldr	s15, [r3]
 80041ce:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004258 <PID_ControllerX+0xd4>
 80041d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	dd03      	ble.n	80041e4 <PID_ControllerX+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4a1f      	ldr	r2, [pc, #124]	@ (800425c <PID_ControllerX+0xd8>)
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	e00c      	b.n	80041fe <PID_ControllerX+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004260 <PID_ControllerX+0xdc>
 80041ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f6:	d502      	bpl.n	80041fe <PID_ControllerX+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <PID_ControllerX+0xe0>)
 80041fc:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivativeV = errorV - last_error;
 80041fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004202:	edd7 7a03 	vldr	s15, [r7, #12]
 8004206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float outputV = (Kp * errorV) + (Ki * (*integral)) + (Kd * derivativeV);
 800420e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004212:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	edd3 6a00 	vldr	s13, [r3]
 8004220:	edd7 7a06 	vldr	s15, [r7, #24]
 8004224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004228:	ee37 7a27 	vadd.f32	s14, s14, s15
 800422c:	edd7 6a05 	vldr	s13, [r7, #20]
 8004230:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = errorV;
 8004240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004242:	60fb      	str	r3, [r7, #12]

	return outputV; // Return the control output
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	ee07 3a90 	vmov	s15, r3
}
 800424a:	eeb0 0a67 	vmov.f32	s0, s15
 800424e:	3734      	adds	r7, #52	@ 0x34
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	42c80000 	.word	0x42c80000
 800425c:	42c80000 	.word	0x42c80000
 8004260:	c2c80000 	.word	0xc2c80000
 8004264:	c2c80000 	.word	0xc2c80000

08004268 <PID_ControllerY>:

float PID_ControllerY(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8004268:	b480      	push	{r7}
 800426a:	b08d      	sub	sp, #52	@ 0x34
 800426c:	af00      	add	r7, sp, #0
 800426e:	ed87 0a07 	vstr	s0, [r7, #28]
 8004272:	edc7 0a06 	vstr	s1, [r7, #24]
 8004276:	ed87 1a05 	vstr	s2, [r7, #20]
 800427a:	6138      	str	r0, [r7, #16]
 800427c:	edc7 1a03 	vstr	s3, [r7, #12]
 8004280:	ed87 2a02 	vstr	s4, [r7, #8]
 8004284:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float errorV = setpoint - measured_value;
 8004288:	ed97 7a02 	vldr	s14, [r7, #8]
 800428c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004294:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += errorV;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	ed93 7a00 	vldr	s14, [r3]
 800429e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80042a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	edd3 7a00 	vldr	s15, [r3]
 80042b2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800433c <PID_ControllerY+0xd4>
 80042b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	dd03      	ble.n	80042c8 <PID_ControllerY+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <PID_ControllerY+0xd8>)
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e00c      	b.n	80042e2 <PID_ControllerY+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	edd3 7a00 	vldr	s15, [r3]
 80042ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004344 <PID_ControllerY+0xdc>
 80042d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042da:	d502      	bpl.n	80042e2 <PID_ControllerY+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4a1a      	ldr	r2, [pc, #104]	@ (8004348 <PID_ControllerY+0xe0>)
 80042e0:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivativeV = errorV - last_error;
 80042e2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80042e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80042ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ee:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float outputV = (Kp * errorV) + (Ki * (*integral)) + (Kd * derivativeV);
 80042f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80042f6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80042fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	edd3 6a00 	vldr	s13, [r3]
 8004304:	edd7 7a06 	vldr	s15, [r7, #24]
 8004308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800430c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004310:	edd7 6a05 	vldr	s13, [r7, #20]
 8004314:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800431c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004320:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = errorV;
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	60fb      	str	r3, [r7, #12]

	return outputV; // Return the control output
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	ee07 3a90 	vmov	s15, r3
}
 800432e:	eeb0 0a67 	vmov.f32	s0, s15
 8004332:	3734      	adds	r7, #52	@ 0x34
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	42c80000 	.word	0x42c80000
 8004340:	42c80000 	.word	0x42c80000
 8004344:	c2c80000 	.word	0xc2c80000
 8004348:	c2c80000 	.word	0xc2c80000

0800434c <PID_ControllerZ>:
float PID_ControllerZ(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 800434c:	b480      	push	{r7}
 800434e:	b08d      	sub	sp, #52	@ 0x34
 8004350:	af00      	add	r7, sp, #0
 8004352:	ed87 0a07 	vstr	s0, [r7, #28]
 8004356:	edc7 0a06 	vstr	s1, [r7, #24]
 800435a:	ed87 1a05 	vstr	s2, [r7, #20]
 800435e:	6138      	str	r0, [r7, #16]
 8004360:	edc7 1a03 	vstr	s3, [r7, #12]
 8004364:	ed87 2a02 	vstr	s4, [r7, #8]
 8004368:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float errorV = setpoint - measured_value;
 800436c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004370:	edd7 7a01 	vldr	s15, [r7, #4]
 8004374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004378:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += errorV;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	ed93 7a00 	vldr	s14, [r3]
 8004382:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004420 <PID_ControllerZ+0xd4>
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	dd03      	ble.n	80043ac <PID_ControllerZ+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <PID_ControllerZ+0xd8>)
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e00c      	b.n	80043c6 <PID_ControllerZ+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004428 <PID_ControllerZ+0xdc>
 80043b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043be:	d502      	bpl.n	80043c6 <PID_ControllerZ+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4a1a      	ldr	r2, [pc, #104]	@ (800442c <PID_ControllerZ+0xe0>)
 80043c4:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivativeV = errorV - last_error;
 80043c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80043ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80043ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float outputV = (Kp * errorV) + (Ki * (*integral)) + (Kd * derivativeV);
 80043d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80043da:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80043de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	edd3 6a00 	vldr	s13, [r3]
 80043e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80043ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043f4:	edd7 6a05 	vldr	s13, [r7, #20]
 80043f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004404:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = errorV;
 8004408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440a:	60fb      	str	r3, [r7, #12]

	return outputV; // Return the control output
 800440c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440e:	ee07 3a90 	vmov	s15, r3
}
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	3734      	adds	r7, #52	@ 0x34
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	42c80000 	.word	0x42c80000
 8004424:	42c80000 	.word	0x42c80000
 8004428:	c2c80000 	.word	0xc2c80000
 800442c:	c2c80000 	.word	0xc2c80000

08004430 <Forward_kinematic_car>:
///////////////////////////////////////// Caculate velocity car /////////////////////////////////////////
float wheel_radius = 0.05;  // Adjust to your robot's wheel radius
float wheel_base = 0.28;    // Distance between front and rear wheels
float CenterToWheelX=0.13;
float CenterToWheelY=0.21;
void Forward_kinematic_car(float linear_x, float linear_y, float angular_z) {
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	ed87 0a03 	vstr	s0, [r7, #12]
 800443a:	edc7 0a02 	vstr	s1, [r7, #8]
 800443e:	ed87 1a01 	vstr	s2, [r7, #4]
	/*value1 = (linear_x - linear_y - (wheel_base * angular_z / 2));
	value2 = (linear_x + linear_y + (wheel_base * angular_z / 2));
	value3 = (linear_x + linear_y - (wheel_base * angular_z / 2));
	value4 = (linear_x - linear_y + (wheel_base * angular_z / 2));*/
	value1 = (linear_x - linear_y - ((CenterToWheelX+CenterToWheelY) * angular_z)/wheel_radius);
 8004442:	ed97 7a03 	vldr	s14, [r7, #12]
 8004446:	edd7 7a02 	vldr	s15, [r7, #8]
 800444a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800444e:	4b48      	ldr	r3, [pc, #288]	@ (8004570 <Forward_kinematic_car+0x140>)
 8004450:	edd3 6a00 	vldr	s13, [r3]
 8004454:	4b47      	ldr	r3, [pc, #284]	@ (8004574 <Forward_kinematic_car+0x144>)
 8004456:	edd3 7a00 	vldr	s15, [r3]
 800445a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800445e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004462:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004466:	4b44      	ldr	r3, [pc, #272]	@ (8004578 <Forward_kinematic_car+0x148>)
 8004468:	edd3 6a00 	vldr	s13, [r3]
 800446c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004474:	4b41      	ldr	r3, [pc, #260]	@ (800457c <Forward_kinematic_car+0x14c>)
 8004476:	edc3 7a00 	vstr	s15, [r3]
	value2 = (linear_x + linear_y + ((CenterToWheelX+CenterToWheelY) * angular_z)/wheel_radius);
 800447a:	ed97 7a03 	vldr	s14, [r7, #12]
 800447e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004486:	4b3a      	ldr	r3, [pc, #232]	@ (8004570 <Forward_kinematic_car+0x140>)
 8004488:	edd3 6a00 	vldr	s13, [r3]
 800448c:	4b39      	ldr	r3, [pc, #228]	@ (8004574 <Forward_kinematic_car+0x144>)
 800448e:	edd3 7a00 	vldr	s15, [r3]
 8004492:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004496:	edd7 7a01 	vldr	s15, [r7, #4]
 800449a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800449e:	4b36      	ldr	r3, [pc, #216]	@ (8004578 <Forward_kinematic_car+0x148>)
 80044a0:	edd3 6a00 	vldr	s13, [r3]
 80044a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80044a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ac:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <Forward_kinematic_car+0x150>)
 80044ae:	edc3 7a00 	vstr	s15, [r3]
	value3 = (linear_x + linear_y - ((CenterToWheelX+CenterToWheelY) * angular_z)/wheel_radius);
 80044b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80044b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044be:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <Forward_kinematic_car+0x140>)
 80044c0:	edd3 6a00 	vldr	s13, [r3]
 80044c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <Forward_kinematic_car+0x144>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80044ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80044d2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80044d6:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <Forward_kinematic_car+0x148>)
 80044d8:	edd3 6a00 	vldr	s13, [r3]
 80044dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80044e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e4:	4b27      	ldr	r3, [pc, #156]	@ (8004584 <Forward_kinematic_car+0x154>)
 80044e6:	edc3 7a00 	vstr	s15, [r3]
	value4 = (linear_x - linear_y + ((CenterToWheelX+CenterToWheelY) * angular_z)/wheel_radius);
 80044ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80044ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <Forward_kinematic_car+0x140>)
 80044f8:	edd3 6a00 	vldr	s13, [r3]
 80044fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004574 <Forward_kinematic_car+0x144>)
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004506:	edd7 7a01 	vldr	s15, [r7, #4]
 800450a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800450e:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <Forward_kinematic_car+0x148>)
 8004510:	edd3 6a00 	vldr	s13, [r3]
 8004514:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <Forward_kinematic_car+0x158>)
 800451e:	edc3 7a00 	vstr	s15, [r3]

	value1 = value1 * 2.0;
 8004522:	4b16      	ldr	r3, [pc, #88]	@ (800457c <Forward_kinematic_car+0x14c>)
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800452c:	4b13      	ldr	r3, [pc, #76]	@ (800457c <Forward_kinematic_car+0x14c>)
 800452e:	edc3 7a00 	vstr	s15, [r3]
	value2 = value2 * 2.0;
 8004532:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <Forward_kinematic_car+0x150>)
 8004534:	edd3 7a00 	vldr	s15, [r3]
 8004538:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800453c:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <Forward_kinematic_car+0x150>)
 800453e:	edc3 7a00 	vstr	s15, [r3]
	value3 = value3 * 2.0;
 8004542:	4b10      	ldr	r3, [pc, #64]	@ (8004584 <Forward_kinematic_car+0x154>)
 8004544:	edd3 7a00 	vldr	s15, [r3]
 8004548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <Forward_kinematic_car+0x154>)
 800454e:	edc3 7a00 	vstr	s15, [r3]
	value4 = value4 * 2.0;
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <Forward_kinematic_car+0x158>)
 8004554:	edd3 7a00 	vldr	s15, [r3]
 8004558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <Forward_kinematic_car+0x158>)
 800455e:	edc3 7a00 	vstr	s15, [r3]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000090 	.word	0x20000090
 8004574:	20000094 	.word	0x20000094
 8004578:	2000008c 	.word	0x2000008c
 800457c:	20000364 	.word	0x20000364
 8004580:	20000368 	.word	0x20000368
 8004584:	2000036c 	.word	0x2000036c
 8004588:	20000370 	.word	0x20000370

0800458c <Inverse_kinematic_car>:
float linear_x_return = 0.0;
float linear_y_return = 0.0;
float angular_z_return = 0.0;
void Inverse_kinematic_car(float v1, float v2, float v3, float v4) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	ed87 0a03 	vstr	s0, [r7, #12]
 8004596:	edc7 0a02 	vstr	s1, [r7, #8]
 800459a:	ed87 1a01 	vstr	s2, [r7, #4]
 800459e:	edc7 1a00 	vstr	s3, [r7]
	linear_x_return = (v1 + v2 + v3 + v4) * ( wheel_radius/4);//Longitudinal Velocity
 80045a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80045a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80045aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80045b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045b6:	edd7 7a00 	vldr	s15, [r7]
 80045ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045be:	4b52      	ldr	r3, [pc, #328]	@ (8004708 <Inverse_kinematic_car+0x17c>)
 80045c0:	edd3 6a00 	vldr	s13, [r3]
 80045c4:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80045c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80045cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d0:	4b4e      	ldr	r3, [pc, #312]	@ (800470c <Inverse_kinematic_car+0x180>)
 80045d2:	edc3 7a00 	vstr	s15, [r3]
	linear_y_return = (-v1 + v2 + v3 - v4) * ( wheel_radius/4); //Transversal Velocity
 80045d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80045da:	edd7 7a03 	vldr	s15, [r7, #12]
 80045de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80045e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ea:	edd7 7a00 	vldr	s15, [r7]
 80045ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f2:	4b45      	ldr	r3, [pc, #276]	@ (8004708 <Inverse_kinematic_car+0x17c>)
 80045f4:	edd3 6a00 	vldr	s13, [r3]
 80045f8:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80045fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004604:	4b42      	ldr	r3, [pc, #264]	@ (8004710 <Inverse_kinematic_car+0x184>)
 8004606:	edc3 7a00 	vstr	s15, [r3]
	angular_z_return = (-v1 + v2 - v3 + v4) * ( wheel_radius/4*(CenterToWheelX+CenterToWheelY));//Angular velocity:
 800460a:	ed97 7a02 	vldr	s14, [r7, #8]
 800460e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004616:	edd7 7a01 	vldr	s15, [r7, #4]
 800461a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461e:	edd7 7a00 	vldr	s15, [r7]
 8004622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004626:	4b38      	ldr	r3, [pc, #224]	@ (8004708 <Inverse_kinematic_car+0x17c>)
 8004628:	edd3 7a00 	vldr	s15, [r3]
 800462c:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8004630:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8004634:	4b37      	ldr	r3, [pc, #220]	@ (8004714 <Inverse_kinematic_car+0x188>)
 8004636:	ed93 6a00 	vldr	s12, [r3]
 800463a:	4b37      	ldr	r3, [pc, #220]	@ (8004718 <Inverse_kinematic_car+0x18c>)
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	4b33      	ldr	r3, [pc, #204]	@ (800471c <Inverse_kinematic_car+0x190>)
 800464e:	edc3 7a00 	vstr	s15, [r3]

/*	linear_x_return  = (linear_x_return/2.0)/10.0;
	linear_y_return  = (linear_y_return/2.0)/10.0;
	angular_z_return  = (angular_z_return/2.0)/10.0;*/
	linear_x_return  = (linear_x_return/2.0)*10.0;
 8004652:	4b2e      	ldr	r3, [pc, #184]	@ (800470c <Inverse_kinematic_car+0x180>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb ff76 	bl	8000548 <__aeabi_f2d>
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004664:	f7fc f8f2 	bl	800084c <__aeabi_ddiv>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4610      	mov	r0, r2
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	4b2a      	ldr	r3, [pc, #168]	@ (8004720 <Inverse_kinematic_car+0x194>)
 8004676:	f7fb ffbf 	bl	80005f8 <__aeabi_dmul>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	f7fc fab1 	bl	8000be8 <__aeabi_d2f>
 8004686:	4603      	mov	r3, r0
 8004688:	4a20      	ldr	r2, [pc, #128]	@ (800470c <Inverse_kinematic_car+0x180>)
 800468a:	6013      	str	r3, [r2, #0]
	linear_y_return  = (linear_y_return/2.0)*10.0;
 800468c:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <Inverse_kinematic_car+0x184>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fb ff59 	bl	8000548 <__aeabi_f2d>
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800469e:	f7fc f8d5 	bl	800084c <__aeabi_ddiv>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004720 <Inverse_kinematic_car+0x194>)
 80046b0:	f7fb ffa2 	bl	80005f8 <__aeabi_dmul>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4610      	mov	r0, r2
 80046ba:	4619      	mov	r1, r3
 80046bc:	f7fc fa94 	bl	8000be8 <__aeabi_d2f>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4a13      	ldr	r2, [pc, #76]	@ (8004710 <Inverse_kinematic_car+0x184>)
 80046c4:	6013      	str	r3, [r2, #0]
	angular_z_return  = (angular_z_return/2.0)*10.0;
 80046c6:	4b15      	ldr	r3, [pc, #84]	@ (800471c <Inverse_kinematic_car+0x190>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fb ff3c 	bl	8000548 <__aeabi_f2d>
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80046d8:	f7fc f8b8 	bl	800084c <__aeabi_ddiv>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004720 <Inverse_kinematic_car+0x194>)
 80046ea:	f7fb ff85 	bl	80005f8 <__aeabi_dmul>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	f7fc fa77 	bl	8000be8 <__aeabi_d2f>
 80046fa:	4603      	mov	r3, r0
 80046fc:	4a07      	ldr	r2, [pc, #28]	@ (800471c <Inverse_kinematic_car+0x190>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	2000008c 	.word	0x2000008c
 800470c:	200004ac 	.word	0x200004ac
 8004710:	200004b0 	.word	0x200004b0
 8004714:	20000090 	.word	0x20000090
 8004718:	20000094 	.word	0x20000094
 800471c:	200004b4 	.word	0x200004b4
 8004720:	40240000 	.word	0x40240000

08004724 <motor>:

///////////////////////////////////////// Caculate velocity car /////////////////////////////////////////

void motor(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	ReadFourFloats(&linear_x, &linear_y, &angular_z);
 8004728:	4ab5      	ldr	r2, [pc, #724]	@ (8004a00 <motor+0x2dc>)
 800472a:	49b6      	ldr	r1, [pc, #728]	@ (8004a04 <motor+0x2e0>)
 800472c:	48b6      	ldr	r0, [pc, #728]	@ (8004a08 <motor+0x2e4>)
 800472e:	f7fd f963 	bl	80019f8 <ReadFourFloats>
	readBNO055();
 8004732:	f7fc ff8d 	bl	8001650 <readBNO055>

	linear_x =0.20;
 8004736:	4bb4      	ldr	r3, [pc, #720]	@ (8004a08 <motor+0x2e4>)
 8004738:	4ab4      	ldr	r2, [pc, #720]	@ (8004a0c <motor+0x2e8>)
 800473a:	601a      	str	r2, [r3, #0]
	linear_y =0.0;
 800473c:	4bb1      	ldr	r3, [pc, #708]	@ (8004a04 <motor+0x2e0>)
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
	angular_z =0.0;
 8004744:	4bae      	ldr	r3, [pc, #696]	@ (8004a00 <motor+0x2dc>)
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

	linear_x =linear_x/2.0;
 800474c:	4bae      	ldr	r3, [pc, #696]	@ (8004a08 <motor+0x2e4>)
 800474e:	ed93 7a00 	vldr	s14, [r3]
 8004752:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800475a:	4bab      	ldr	r3, [pc, #684]	@ (8004a08 <motor+0x2e4>)
 800475c:	edc3 7a00 	vstr	s15, [r3]
	linear_y =linear_y/2.0;
 8004760:	4ba8      	ldr	r3, [pc, #672]	@ (8004a04 <motor+0x2e0>)
 8004762:	ed93 7a00 	vldr	s14, [r3]
 8004766:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800476a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800476e:	4ba5      	ldr	r3, [pc, #660]	@ (8004a04 <motor+0x2e0>)
 8004770:	edc3 7a00 	vstr	s15, [r3]
	angular_z = angular_z/2.0;
 8004774:	4ba2      	ldr	r3, [pc, #648]	@ (8004a00 <motor+0x2dc>)
 8004776:	ed93 7a00 	vldr	s14, [r3]
 800477a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800477e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004782:	4b9f      	ldr	r3, [pc, #636]	@ (8004a00 <motor+0x2dc>)
 8004784:	edc3 7a00 	vstr	s15, [r3]

	Inverse_kinematic_car(realVel1, realVel2, realVel3, realVel4);
 8004788:	4ba1      	ldr	r3, [pc, #644]	@ (8004a10 <motor+0x2ec>)
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	4ba1      	ldr	r3, [pc, #644]	@ (8004a14 <motor+0x2f0>)
 8004790:	ed93 7a00 	vldr	s14, [r3]
 8004794:	4ba0      	ldr	r3, [pc, #640]	@ (8004a18 <motor+0x2f4>)
 8004796:	edd3 6a00 	vldr	s13, [r3]
 800479a:	4ba0      	ldr	r3, [pc, #640]	@ (8004a1c <motor+0x2f8>)
 800479c:	ed93 6a00 	vldr	s12, [r3]
 80047a0:	eef0 1a46 	vmov.f32	s3, s12
 80047a4:	eeb0 1a66 	vmov.f32	s2, s13
 80047a8:	eef0 0a47 	vmov.f32	s1, s14
 80047ac:	eeb0 0a67 	vmov.f32	s0, s15
 80047b0:	f7ff feec 	bl	800458c <Inverse_kinematic_car>

	if(linear_x != 0.0 && linear_y==0.0 && angular_z==0.0){
 80047b4:	4b94      	ldr	r3, [pc, #592]	@ (8004a08 <motor+0x2e4>)
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c2:	d035      	beq.n	8004830 <motor+0x10c>
 80047c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004a04 <motor+0x2e0>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d12d      	bne.n	8004830 <motor+0x10c>
 80047d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004a00 <motor+0x2dc>)
 80047d6:	edd3 7a00 	vldr	s15, [r3]
 80047da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d125      	bne.n	8004830 <motor+0x10c>
		LX_PID = PID_ControllerX(KpV, KiV, KdV, &integralV,
 80047e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004a20 <motor+0x2fc>)
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004a24 <motor+0x300>)
 80047ec:	ed93 7a00 	vldr	s14, [r3]
 80047f0:	4b8d      	ldr	r3, [pc, #564]	@ (8004a28 <motor+0x304>)
 80047f2:	edd3 6a00 	vldr	s13, [r3]
 80047f6:	4b8d      	ldr	r3, [pc, #564]	@ (8004a2c <motor+0x308>)
 80047f8:	ed93 6a00 	vldr	s12, [r3]
 80047fc:	4b82      	ldr	r3, [pc, #520]	@ (8004a08 <motor+0x2e4>)
 80047fe:	edd3 5a00 	vldr	s11, [r3]
 8004802:	4b8b      	ldr	r3, [pc, #556]	@ (8004a30 <motor+0x30c>)
 8004804:	ed93 5a00 	vldr	s10, [r3]
 8004808:	eef0 2a45 	vmov.f32	s5, s10
 800480c:	eeb0 2a65 	vmov.f32	s4, s11
 8004810:	eef0 1a46 	vmov.f32	s3, s12
 8004814:	4887      	ldr	r0, [pc, #540]	@ (8004a34 <motor+0x310>)
 8004816:	eeb0 1a66 	vmov.f32	s2, s13
 800481a:	eef0 0a47 	vmov.f32	s1, s14
 800481e:	eeb0 0a67 	vmov.f32	s0, s15
 8004822:	f7ff fcaf 	bl	8004184 <PID_ControllerX>
 8004826:	eef0 7a40 	vmov.f32	s15, s0
 800482a:	4b83      	ldr	r3, [pc, #524]	@ (8004a38 <motor+0x314>)
 800482c:	edc3 7a00 	vstr	s15, [r3]
					last_errorV, linear_x, linear_x_return);
	}
	if(linear_x == 0.0  && linear_y!=0.0 && angular_z==0.0){
 8004830:	4b75      	ldr	r3, [pc, #468]	@ (8004a08 <motor+0x2e4>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	eef5 7a40 	vcmp.f32	s15, #0.0
 800483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483e:	d135      	bne.n	80048ac <motor+0x188>
 8004840:	4b70      	ldr	r3, [pc, #448]	@ (8004a04 <motor+0x2e0>)
 8004842:	edd3 7a00 	vldr	s15, [r3]
 8004846:	eef5 7a40 	vcmp.f32	s15, #0.0
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	d02d      	beq.n	80048ac <motor+0x188>
 8004850:	4b6b      	ldr	r3, [pc, #428]	@ (8004a00 <motor+0x2dc>)
 8004852:	edd3 7a00 	vldr	s15, [r3]
 8004856:	eef5 7a40 	vcmp.f32	s15, #0.0
 800485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485e:	d125      	bne.n	80048ac <motor+0x188>
		LY_PID = PID_ControllerY(KpV, KiV, KdV, &integralV,
 8004860:	4b6f      	ldr	r3, [pc, #444]	@ (8004a20 <motor+0x2fc>)
 8004862:	edd3 7a00 	vldr	s15, [r3]
 8004866:	4b6f      	ldr	r3, [pc, #444]	@ (8004a24 <motor+0x300>)
 8004868:	ed93 7a00 	vldr	s14, [r3]
 800486c:	4b6e      	ldr	r3, [pc, #440]	@ (8004a28 <motor+0x304>)
 800486e:	edd3 6a00 	vldr	s13, [r3]
 8004872:	4b6e      	ldr	r3, [pc, #440]	@ (8004a2c <motor+0x308>)
 8004874:	ed93 6a00 	vldr	s12, [r3]
 8004878:	4b62      	ldr	r3, [pc, #392]	@ (8004a04 <motor+0x2e0>)
 800487a:	edd3 5a00 	vldr	s11, [r3]
 800487e:	4b6f      	ldr	r3, [pc, #444]	@ (8004a3c <motor+0x318>)
 8004880:	ed93 5a00 	vldr	s10, [r3]
 8004884:	eef0 2a45 	vmov.f32	s5, s10
 8004888:	eeb0 2a65 	vmov.f32	s4, s11
 800488c:	eef0 1a46 	vmov.f32	s3, s12
 8004890:	4868      	ldr	r0, [pc, #416]	@ (8004a34 <motor+0x310>)
 8004892:	eeb0 1a66 	vmov.f32	s2, s13
 8004896:	eef0 0a47 	vmov.f32	s1, s14
 800489a:	eeb0 0a67 	vmov.f32	s0, s15
 800489e:	f7ff fce3 	bl	8004268 <PID_ControllerY>
 80048a2:	eef0 7a40 	vmov.f32	s15, s0
 80048a6:	4b66      	ldr	r3, [pc, #408]	@ (8004a40 <motor+0x31c>)
 80048a8:	edc3 7a00 	vstr	s15, [r3]
						last_errorV, linear_y, linear_y_return);
	}
	if(linear_x == 0.0  && linear_y==0.0 && angular_z!=0.0){
 80048ac:	4b56      	ldr	r3, [pc, #344]	@ (8004a08 <motor+0x2e4>)
 80048ae:	edd3 7a00 	vldr	s15, [r3]
 80048b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	d135      	bne.n	8004928 <motor+0x204>
 80048bc:	4b51      	ldr	r3, [pc, #324]	@ (8004a04 <motor+0x2e0>)
 80048be:	edd3 7a00 	vldr	s15, [r3]
 80048c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	d12d      	bne.n	8004928 <motor+0x204>
 80048cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004a00 <motor+0x2dc>)
 80048ce:	edd3 7a00 	vldr	s15, [r3]
 80048d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	d025      	beq.n	8004928 <motor+0x204>
		AZ_PID = PID_ControllerZ(KpV, KiV, KdV, &integralV,
 80048dc:	4b50      	ldr	r3, [pc, #320]	@ (8004a20 <motor+0x2fc>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	4b50      	ldr	r3, [pc, #320]	@ (8004a24 <motor+0x300>)
 80048e4:	ed93 7a00 	vldr	s14, [r3]
 80048e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004a28 <motor+0x304>)
 80048ea:	edd3 6a00 	vldr	s13, [r3]
 80048ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004a2c <motor+0x308>)
 80048f0:	ed93 6a00 	vldr	s12, [r3]
 80048f4:	4b42      	ldr	r3, [pc, #264]	@ (8004a00 <motor+0x2dc>)
 80048f6:	edd3 5a00 	vldr	s11, [r3]
 80048fa:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <motor+0x320>)
 80048fc:	ed93 5a00 	vldr	s10, [r3]
 8004900:	eef0 2a45 	vmov.f32	s5, s10
 8004904:	eeb0 2a65 	vmov.f32	s4, s11
 8004908:	eef0 1a46 	vmov.f32	s3, s12
 800490c:	4849      	ldr	r0, [pc, #292]	@ (8004a34 <motor+0x310>)
 800490e:	eeb0 1a66 	vmov.f32	s2, s13
 8004912:	eef0 0a47 	vmov.f32	s1, s14
 8004916:	eeb0 0a67 	vmov.f32	s0, s15
 800491a:	f7ff fd17 	bl	800434c <PID_ControllerZ>
 800491e:	eef0 7a40 	vmov.f32	s15, s0
 8004922:	4b49      	ldr	r3, [pc, #292]	@ (8004a48 <motor+0x324>)
 8004924:	edc3 7a00 	vstr	s15, [r3]
					last_errorV, angular_z, angular_z_return);
	}


	Forward_kinematic_car(LX_PID, LY_PID, AZ_PID);
 8004928:	4b43      	ldr	r3, [pc, #268]	@ (8004a38 <motor+0x314>)
 800492a:	edd3 7a00 	vldr	s15, [r3]
 800492e:	4b44      	ldr	r3, [pc, #272]	@ (8004a40 <motor+0x31c>)
 8004930:	ed93 7a00 	vldr	s14, [r3]
 8004934:	4b44      	ldr	r3, [pc, #272]	@ (8004a48 <motor+0x324>)
 8004936:	edd3 6a00 	vldr	s13, [r3]
 800493a:	eeb0 1a66 	vmov.f32	s2, s13
 800493e:	eef0 0a47 	vmov.f32	s1, s14
 8004942:	eeb0 0a67 	vmov.f32	s0, s15
 8004946:	f7ff fd73 	bl	8004430 <Forward_kinematic_car>

	time = get_custom_tick();
 800494a:	f001 f917 	bl	8005b7c <get_custom_tick>
 800494e:	4603      	mov	r3, r0
 8004950:	4a3e      	ldr	r2, [pc, #248]	@ (8004a4c <motor+0x328>)
 8004952:	6013      	str	r3, [r2, #0]
	if (linear_x == 0.0 && linear_y == 0.0 && angular_z == 0.0) {
 8004954:	4b2c      	ldr	r3, [pc, #176]	@ (8004a08 <motor+0x2e4>)
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800495e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004962:	d177      	bne.n	8004a54 <motor+0x330>
 8004964:	4b27      	ldr	r3, [pc, #156]	@ (8004a04 <motor+0x2e0>)
 8004966:	edd3 7a00 	vldr	s15, [r3]
 800496a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d16f      	bne.n	8004a54 <motor+0x330>
 8004974:	4b22      	ldr	r3, [pc, #136]	@ (8004a00 <motor+0x2dc>)
 8004976:	edd3 7a00 	vldr	s15, [r3]
 800497a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800497e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004982:	d167      	bne.n	8004a54 <motor+0x330>
		calculateVel1(0.0, time);
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <motor+0x328>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004990:	eef0 0a67 	vmov.f32	s1, s15
 8004994:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8004a50 <motor+0x32c>
 8004998:	f7fd f9f2 	bl	8001d80 <calculateVel1>
		calculateVel2(0.0, time);
 800499c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a4c <motor+0x328>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a8:	eef0 0a67 	vmov.f32	s1, s15
 80049ac:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8004a50 <motor+0x32c>
 80049b0:	f7fd fea2 	bl	80026f8 <calculateVel2>
		calculateVel3(0.0, time);
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <motor+0x328>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c0:	eef0 0a67 	vmov.f32	s1, s15
 80049c4:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8004a50 <motor+0x32c>
 80049c8:	f7fe fb52 	bl	8003070 <calculateVel3>
		calculateVel4(0.0, time);
 80049cc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <motor+0x328>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d8:	eef0 0a67 	vmov.f32	s1, s15
 80049dc:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8004a50 <motor+0x32c>
 80049e0:	f7ff f802 	bl	80039e8 <calculateVel4>
		linear_x_return = 0.0;
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <motor+0x30c>)
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
		linear_y_return = 0.0;
 80049ec:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <motor+0x318>)
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
		angular_z_return = 0.0;
 80049f4:	4b13      	ldr	r3, [pc, #76]	@ (8004a44 <motor+0x320>)
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e066      	b.n	8004acc <motor+0x3a8>
 80049fe:	bf00      	nop
 8004a00:	20000360 	.word	0x20000360
 8004a04:	2000035c 	.word	0x2000035c
 8004a08:	20000358 	.word	0x20000358
 8004a0c:	3e4ccccd 	.word	0x3e4ccccd
 8004a10:	200003b0 	.word	0x200003b0
 8004a14:	200003f8 	.word	0x200003f8
 8004a18:	20000440 	.word	0x20000440
 8004a1c:	20000488 	.word	0x20000488
 8004a20:	20000080 	.word	0x20000080
 8004a24:	20000084 	.word	0x20000084
 8004a28:	20000088 	.word	0x20000088
 8004a2c:	2000049c 	.word	0x2000049c
 8004a30:	200004ac 	.word	0x200004ac
 8004a34:	20000498 	.word	0x20000498
 8004a38:	200004a0 	.word	0x200004a0
 8004a3c:	200004b0 	.word	0x200004b0
 8004a40:	200004a4 	.word	0x200004a4
 8004a44:	200004b4 	.word	0x200004b4
 8004a48:	200004a8 	.word	0x200004a8
 8004a4c:	20000374 	.word	0x20000374
 8004a50:	00000000 	.word	0x00000000
	} else {
		calculateVel1(value1, time);
 8004a54:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <motor+0x3d8>)
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <motor+0x3dc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	ee07 3a10 	vmov	s14, r3
 8004a62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a66:	eef0 0a47 	vmov.f32	s1, s14
 8004a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a6e:	f7fd f987 	bl	8001d80 <calculateVel1>
		calculateVel2(value2, time);
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <motor+0x3e0>)
 8004a74:	edd3 7a00 	vldr	s15, [r3]
 8004a78:	4b21      	ldr	r3, [pc, #132]	@ (8004b00 <motor+0x3dc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	ee07 3a10 	vmov	s14, r3
 8004a80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004a84:	eef0 0a47 	vmov.f32	s1, s14
 8004a88:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8c:	f7fd fe34 	bl	80026f8 <calculateVel2>
		calculateVel3(value3, time);
 8004a90:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <motor+0x3e4>)
 8004a92:	edd3 7a00 	vldr	s15, [r3]
 8004a96:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <motor+0x3dc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	ee07 3a10 	vmov	s14, r3
 8004a9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004aa2:	eef0 0a47 	vmov.f32	s1, s14
 8004aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aaa:	f7fe fae1 	bl	8003070 <calculateVel3>
		calculateVel4(value4, time);
 8004aae:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <motor+0x3e8>)
 8004ab0:	edd3 7a00 	vldr	s15, [r3]
 8004ab4:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <motor+0x3dc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	ee07 3a10 	vmov	s14, r3
 8004abc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ac0:	eef0 0a47 	vmov.f32	s1, s14
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	f7fe ff8e 	bl	80039e8 <calculateVel4>
	/*calculateVel1(value1, time);
	calculateVel2(value2, time);
    calculateVel3(value3, time);
	calculateVel4(value4, time);
*/
	 sendJointState(linear_x_return, linear_y_return, angular_z_return, yaw);
 8004acc:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <motor+0x3ec>)
 8004ace:	edd3 7a00 	vldr	s15, [r3]
 8004ad2:	4b10      	ldr	r3, [pc, #64]	@ (8004b14 <motor+0x3f0>)
 8004ad4:	ed93 7a00 	vldr	s14, [r3]
 8004ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <motor+0x3f4>)
 8004ada:	edd3 6a00 	vldr	s13, [r3]
 8004ade:	4b0f      	ldr	r3, [pc, #60]	@ (8004b1c <motor+0x3f8>)
 8004ae0:	ed93 6a00 	vldr	s12, [r3]
 8004ae4:	eef0 1a46 	vmov.f32	s3, s12
 8004ae8:	eeb0 1a66 	vmov.f32	s2, s13
 8004aec:	eef0 0a47 	vmov.f32	s1, s14
 8004af0:	eeb0 0a67 	vmov.f32	s0, s15
 8004af4:	f7fc ff10 	bl	8001918 <sendJointState>
	//sendJointState(linear_x_return, 0.0, 0.0, yaw);

}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000364 	.word	0x20000364
 8004b00:	20000374 	.word	0x20000374
 8004b04:	20000368 	.word	0x20000368
 8004b08:	2000036c 	.word	0x2000036c
 8004b0c:	20000370 	.word	0x20000370
 8004b10:	200004ac 	.word	0x200004ac
 8004b14:	200004b0 	.word	0x200004b0
 8004b18:	200004b4 	.word	0x200004b4
 8004b1c:	2000029c 	.word	0x2000029c

08004b20 <Motor_Init>:

// PID control variables

#define MAX_PWM 1000 // Maximum PWM value
// MOTOR
void Motor_Init(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // Init PWM1 -> RPWM
 8004b24:	2108      	movs	r1, #8
 8004b26:	4810      	ldr	r0, [pc, #64]	@ (8004b68 <Motor_Init+0x48>)
 8004b28:	f003 f954 	bl	8007dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // Init PWM2 -> LPWM
 8004b2c:	210c      	movs	r1, #12
 8004b2e:	480e      	ldr	r0, [pc, #56]	@ (8004b68 <Motor_Init+0x48>)
 8004b30:	f003 f950 	bl	8007dd4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Init PWM3 -> RPWM
 8004b34:	2108      	movs	r1, #8
 8004b36:	480d      	ldr	r0, [pc, #52]	@ (8004b6c <Motor_Init+0x4c>)
 8004b38:	f003 f94c 	bl	8007dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Init PWM4 -> LPWM
 8004b3c:	210c      	movs	r1, #12
 8004b3e:	480b      	ldr	r0, [pc, #44]	@ (8004b6c <Motor_Init+0x4c>)
 8004b40:	f003 f948 	bl	8007dd4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 8004b44:	2100      	movs	r1, #0
 8004b46:	480a      	ldr	r0, [pc, #40]	@ (8004b70 <Motor_Init+0x50>)
 8004b48:	f003 f944 	bl	8007dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4808      	ldr	r0, [pc, #32]	@ (8004b70 <Motor_Init+0x50>)
 8004b50:	f003 f940 	bl	8007dd4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 8004b54:	2100      	movs	r1, #0
 8004b56:	4807      	ldr	r0, [pc, #28]	@ (8004b74 <Motor_Init+0x54>)
 8004b58:	f003 f93c 	bl	8007dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	4805      	ldr	r0, [pc, #20]	@ (8004b74 <Motor_Init+0x54>)
 8004b60:	f003 f938 	bl	8007dd4 <HAL_TIM_PWM_Start>
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20000600 	.word	0x20000600
 8004b6c:	20000570 	.word	0x20000570
 8004b70:	200006d8 	.word	0x200006d8
 8004b74:	20000720 	.word	0x20000720

08004b78 <Encoder_Init>:
	Motor_Control4(0, 0);

}
// ENCODER

void Encoder_Init(void) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Init Timer 1 -> mode Encoder
 8004b7c:	213c      	movs	r1, #60	@ 0x3c
 8004b7e:	4808      	ldr	r0, [pc, #32]	@ (8004ba0 <Encoder_Init+0x28>)
 8004b80:	f003 fa96 	bl	80080b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Init Timer 3 -> mode Encoder
 8004b84:	213c      	movs	r1, #60	@ 0x3c
 8004b86:	4807      	ldr	r0, [pc, #28]	@ (8004ba4 <Encoder_Init+0x2c>)
 8004b88:	f003 fa92 	bl	80080b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL); // Init Timer 5 -> mode Encoder
 8004b8c:	213c      	movs	r1, #60	@ 0x3c
 8004b8e:	4806      	ldr	r0, [pc, #24]	@ (8004ba8 <Encoder_Init+0x30>)
 8004b90:	f003 fa8e 	bl	80080b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Init Timer 8 -> mode Encoder
 8004b94:	213c      	movs	r1, #60	@ 0x3c
 8004b96:	4805      	ldr	r0, [pc, #20]	@ (8004bac <Encoder_Init+0x34>)
 8004b98:	f003 fa8a 	bl	80080b0 <HAL_TIM_Encoder_Start>
}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000528 	.word	0x20000528
 8004ba4:	200005b8 	.word	0x200005b8
 8004ba8:	20000690 	.word	0x20000690
 8004bac:	20000648 	.word	0x20000648

08004bb0 <Reset_Encoder1>:
int16_t Read_Encoder1(void) {
	return __HAL_TIM_GET_COUNTER(&htim1);
}
void Reset_Encoder1(void) {
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <Reset_Encoder1+0x18>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004bbc:	bf00      	nop
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000528 	.word	0x20000528

08004bcc <Reset_Encoder2>:
int16_t Read_Encoder2(void) {
	return __HAL_TIM_GET_COUNTER(&htim3);
}
void Reset_Encoder2(void) {
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <Reset_Encoder2+0x18>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	200005b8 	.word	0x200005b8

08004be8 <Reset_Encoder3>:
int16_t Read_Encoder3(void) {
	return __HAL_TIM_GET_COUNTER(&htim8);
}
void Reset_Encoder3(void) {
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 8004bec:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <Reset_Encoder3+0x18>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004bf4:	bf00      	nop
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000690 	.word	0x20000690

08004c04 <Reset_Encoder4>:
int16_t Read_Encoder4(void) {
	return __HAL_TIM_GET_COUNTER(&htim5);
}
void Reset_Encoder4(void) {
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8004c08:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <Reset_Encoder4+0x18>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000648 	.word	0x20000648

08004c20 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004c28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004c2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d013      	beq.n	8004c60 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004c38:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004c3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8004c40:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004c48:	e000      	b.n	8004c4c <ITM_SendChar+0x2c>
    {
      __NOP();
 8004c4a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004c4c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f9      	beq.n	8004c4a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004c56:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004c60:	687b      	ldr	r3, [r7, #4]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8004c74:	f001 f874 	bl	8005d60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004c78:	f000 f82a 	bl	8004cd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004c7c:	f000 fc1e 	bl	80054bc <MX_GPIO_Init>
	MX_TIM1_Init();
 8004c80:	f000 f8bc 	bl	8004dfc <MX_TIM1_Init>
	MX_TIM2_Init();
 8004c84:	f000 f912 	bl	8004eac <MX_TIM2_Init>
	MX_TIM3_Init();
 8004c88:	f000 f990 	bl	8004fac <MX_TIM3_Init>
	MX_TIM5_Init();
 8004c8c:	f000 fa64 	bl	8005158 <MX_TIM5_Init>
	MX_TIM8_Init();
 8004c90:	f000 fab6 	bl	8005200 <MX_TIM8_Init>
	MX_TIM9_Init();
 8004c94:	f000 fb0c 	bl	80052b0 <MX_TIM9_Init>
	MX_TIM12_Init();
 8004c98:	f000 fb78 	bl	800538c <MX_TIM12_Init>
	MX_TIM4_Init();
 8004c9c:	f000 f9da 	bl	8005054 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8004ca0:	f000 fbe2 	bl	8005468 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004ca4:	f000 f87c 	bl	8004da0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	Encoder_Init();  // Khởi động encoder
 8004ca8:	f7ff ff66 	bl	8004b78 <Encoder_Init>
	Motor_Init();    // Khởi động Motor
 8004cac:	f7ff ff38 	bl	8004b20 <Motor_Init>
	Reset_Encoder1();
 8004cb0:	f7ff ff7e 	bl	8004bb0 <Reset_Encoder1>
	Reset_Encoder2();
 8004cb4:	f7ff ff8a 	bl	8004bcc <Reset_Encoder2>
	Reset_Encoder3();
 8004cb8:	f7ff ff96 	bl	8004be8 <Reset_Encoder3>
	Reset_Encoder4();
 8004cbc:	f7ff ffa2 	bl	8004c04 <Reset_Encoder4>
	// Initialize BNO055

	BNO055_Init(&hi2c1);
 8004cc0:	4802      	ldr	r0, [pc, #8]	@ (8004ccc <main+0x5c>)
 8004cc2:	f7fc f98f 	bl	8000fe4 <BNO055_Init>
	while (1) {
		/* USER CODE END WHILE */
	//	readEncoder();
		//standardMode(1);
		//HAL_Delay(500);
		motor();
 8004cc6:	f7ff fd2d 	bl	8004724 <motor>
 8004cca:	e7fc      	b.n	8004cc6 <main+0x56>
 8004ccc:	200004d4 	.word	0x200004d4

08004cd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b094      	sub	sp, #80	@ 0x50
 8004cd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004cd6:	f107 0320 	add.w	r3, r7, #32
 8004cda:	2230      	movs	r2, #48	@ 0x30
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f006 fb1a 	bl	800b318 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <SystemClock_Config+0xc8>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfc:	4a26      	ldr	r2, [pc, #152]	@ (8004d98 <SystemClock_Config+0xc8>)
 8004cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <SystemClock_Config+0xc8>)
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d10:	2300      	movs	r3, #0
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	4b21      	ldr	r3, [pc, #132]	@ (8004d9c <SystemClock_Config+0xcc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a20      	ldr	r2, [pc, #128]	@ (8004d9c <SystemClock_Config+0xcc>)
 8004d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b1e      	ldr	r3, [pc, #120]	@ (8004d9c <SystemClock_Config+0xcc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d30:	2301      	movs	r3, #1
 8004d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d34:	2310      	movs	r3, #16
 8004d36:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004d40:	2308      	movs	r3, #8
 8004d42:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 80;
 8004d44:	2350      	movs	r3, #80	@ 0x50
 8004d46:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004d50:	f107 0320 	add.w	r3, r7, #32
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 fb3d 	bl	80073d4 <HAL_RCC_OscConfig>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <SystemClock_Config+0x94>
		Error_Handler();
 8004d60:	f000 fc1a 	bl	8005598 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004d64:	230f      	movs	r3, #15
 8004d66:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d74:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f002 fd9f 	bl	80078c4 <HAL_RCC_ClockConfig>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <SystemClock_Config+0xc0>
		Error_Handler();
 8004d8c:	f000 fc04 	bl	8005598 <Error_Handler>
	}
}
 8004d90:	bf00      	nop
 8004d92:	3750      	adds	r7, #80	@ 0x50
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000

08004da0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004da4:	4b12      	ldr	r3, [pc, #72]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004da6:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <MX_I2C1_Init+0x54>)
 8004da8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8004daa:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dac:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <MX_I2C1_Init+0x58>)
 8004dae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004db0:	4b0f      	ldr	r3, [pc, #60]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004db6:	4b0e      	ldr	r3, [pc, #56]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004dc2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004dca:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dd0:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004ddc:	4804      	ldr	r0, [pc, #16]	@ (8004df0 <MX_I2C1_Init+0x50>)
 8004dde:	f001 fad5 	bl	800638c <HAL_I2C_Init>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_I2C1_Init+0x4c>
		Error_Handler();
 8004de8:	f000 fbd6 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	200004d4 	.word	0x200004d4
 8004df4:	40005400 	.word	0x40005400
 8004df8:	000186a0 	.word	0x000186a0

08004dfc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	@ 0x30
 8004e00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8004e02:	f107 030c 	add.w	r3, r7, #12
 8004e06:	2224      	movs	r2, #36	@ 0x24
 8004e08:	2100      	movs	r1, #0
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f006 fa84 	bl	800b318 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004e10:	1d3b      	adds	r3, r7, #4
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004e18:	4b22      	ldr	r3, [pc, #136]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ea8 <MX_TIM1_Init+0xac>)
 8004e1c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 8004e1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e20:	2263      	movs	r2, #99	@ 0x63
 8004e22:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e24:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e30:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004e38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e44:	2303      	movs	r3, #3
 8004e46:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	480d      	ldr	r0, [pc, #52]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e70:	f003 f878 	bl	8007f64 <HAL_TIM_Encoder_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_TIM1_Init+0x82>
		Error_Handler();
 8004e7a:	f000 fb8d 	bl	8005598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4806      	ldr	r0, [pc, #24]	@ (8004ea4 <MX_TIM1_Init+0xa8>)
 8004e8c:	f003 fe44 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8004e96:	f000 fb7f 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8004e9a:	bf00      	nop
 8004e9c:	3730      	adds	r7, #48	@ 0x30
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000528 	.word	0x20000528
 8004ea8:	40010000 	.word	0x40010000

08004eac <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08e      	sub	sp, #56	@ 0x38
 8004eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004eb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ec0:	f107 0320 	add.w	r3, r7, #32
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
 8004ed8:	615a      	str	r2, [r3, #20]
 8004eda:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004edc:	4b32      	ldr	r3, [pc, #200]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004ede:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ee2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 80 - 1;
 8004ee4:	4b30      	ldr	r3, [pc, #192]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004ee6:	224f      	movs	r2, #79	@ 0x4f
 8004ee8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eea:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004ef2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ef6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004efe:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004f04:	4828      	ldr	r0, [pc, #160]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f06:	f002 febd 	bl	8007c84 <HAL_TIM_Base_Init>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_TIM2_Init+0x68>
		Error_Handler();
 8004f10:	f000 fb42 	bl	8005598 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f18:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004f1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4821      	ldr	r0, [pc, #132]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f22:	f003 fa15 	bl	8008350 <HAL_TIM_ConfigClockSource>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <MX_TIM2_Init+0x84>
		Error_Handler();
 8004f2c:	f000 fb34 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8004f30:	481d      	ldr	r0, [pc, #116]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f32:	f002 fef6 	bl	8007d22 <HAL_TIM_PWM_Init>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_TIM2_Init+0x94>
		Error_Handler();
 8004f3c:	f000 fb2c 	bl	8005598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f40:	2300      	movs	r3, #0
 8004f42:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8004f48:	f107 0320 	add.w	r3, r7, #32
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4816      	ldr	r0, [pc, #88]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f50:	f003 fde2 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8004f5a:	f000 fb1d 	bl	8005598 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f5e:	2360      	movs	r3, #96	@ 0x60
 8004f60:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	2208      	movs	r2, #8
 8004f72:	4619      	mov	r1, r3
 8004f74:	480c      	ldr	r0, [pc, #48]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f76:	f003 f929 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8004f80:	f000 fb0a 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8004f84:	1d3b      	adds	r3, r7, #4
 8004f86:	220c      	movs	r2, #12
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4807      	ldr	r0, [pc, #28]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f8c:	f003 f91e 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8004f96:	f000 faff 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8004f9a:	4803      	ldr	r0, [pc, #12]	@ (8004fa8 <MX_TIM2_Init+0xfc>)
 8004f9c:	f000 fcbc 	bl	8005918 <HAL_TIM_MspPostInit>

}
 8004fa0:	bf00      	nop
 8004fa2:	3738      	adds	r7, #56	@ 0x38
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000570 	.word	0x20000570

08004fac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08c      	sub	sp, #48	@ 0x30
 8004fb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	2224      	movs	r2, #36	@ 0x24
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f006 f9ac 	bl	800b318 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8004fc8:	4b20      	ldr	r3, [pc, #128]	@ (800504c <MX_TIM3_Init+0xa0>)
 8004fca:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <MX_TIM3_Init+0xa4>)
 8004fcc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80 - 1;
 8004fce:	4b1f      	ldr	r3, [pc, #124]	@ (800504c <MX_TIM3_Init+0xa0>)
 8004fd0:	224f      	movs	r2, #79	@ 0x4f
 8004fd2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <MX_TIM3_Init+0xa0>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8004fda:	4b1c      	ldr	r3, [pc, #112]	@ (800504c <MX_TIM3_Init+0xa0>)
 8004fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fe0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800504c <MX_TIM3_Init+0xa0>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fe8:	4b18      	ldr	r3, [pc, #96]	@ (800504c <MX_TIM3_Init+0xa0>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005002:	2300      	movs	r3, #0
 8005004:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005006:	2301      	movs	r3, #1
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800500a:	2300      	movs	r3, #0
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	4619      	mov	r1, r3
 8005018:	480c      	ldr	r0, [pc, #48]	@ (800504c <MX_TIM3_Init+0xa0>)
 800501a:	f002 ffa3 	bl	8007f64 <HAL_TIM_Encoder_Init>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8005024:	f000 fab8 	bl	8005598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4805      	ldr	r0, [pc, #20]	@ (800504c <MX_TIM3_Init+0xa0>)
 8005036:	f003 fd6f 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8005040:	f000 faaa 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8005044:	bf00      	nop
 8005046:	3730      	adds	r7, #48	@ 0x30
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	200005b8 	.word	0x200005b8
 8005050:	40000400 	.word	0x40000400

08005054 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b08e      	sub	sp, #56	@ 0x38
 8005058:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800505a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	609a      	str	r2, [r3, #8]
 8005066:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005068:	f107 0320 	add.w	r3, r7, #32
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	611a      	str	r2, [r3, #16]
 8005080:	615a      	str	r2, [r3, #20]
 8005082:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8005084:	4b32      	ldr	r3, [pc, #200]	@ (8005150 <MX_TIM4_Init+0xfc>)
 8005086:	4a33      	ldr	r2, [pc, #204]	@ (8005154 <MX_TIM4_Init+0x100>)
 8005088:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 80 - 1;
 800508a:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <MX_TIM4_Init+0xfc>)
 800508c:	224f      	movs	r2, #79	@ 0x4f
 800508e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005090:	4b2f      	ldr	r3, [pc, #188]	@ (8005150 <MX_TIM4_Init+0xfc>)
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000 - 1;
 8005096:	4b2e      	ldr	r3, [pc, #184]	@ (8005150 <MX_TIM4_Init+0xfc>)
 8005098:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800509c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800509e:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <MX_TIM4_Init+0xfc>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005150 <MX_TIM4_Init+0xfc>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80050aa:	4829      	ldr	r0, [pc, #164]	@ (8005150 <MX_TIM4_Init+0xfc>)
 80050ac:	f002 fdea 	bl	8007c84 <HAL_TIM_Base_Init>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <MX_TIM4_Init+0x66>
		Error_Handler();
 80050b6:	f000 fa6f 	bl	8005598 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050be:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80050c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050c4:	4619      	mov	r1, r3
 80050c6:	4822      	ldr	r0, [pc, #136]	@ (8005150 <MX_TIM4_Init+0xfc>)
 80050c8:	f003 f942 	bl	8008350 <HAL_TIM_ConfigClockSource>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <MX_TIM4_Init+0x82>
		Error_Handler();
 80050d2:	f000 fa61 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80050d6:	481e      	ldr	r0, [pc, #120]	@ (8005150 <MX_TIM4_Init+0xfc>)
 80050d8:	f002 fe23 	bl	8007d22 <HAL_TIM_PWM_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <MX_TIM4_Init+0x92>
		Error_Handler();
 80050e2:	f000 fa59 	bl	8005598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80050ee:	f107 0320 	add.w	r3, r7, #32
 80050f2:	4619      	mov	r1, r3
 80050f4:	4816      	ldr	r0, [pc, #88]	@ (8005150 <MX_TIM4_Init+0xfc>)
 80050f6:	f003 fd0f 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8005100:	f000 fa4a 	bl	8005598 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005104:	2360      	movs	r3, #96	@ 0x60
 8005106:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	2208      	movs	r2, #8
 8005118:	4619      	mov	r1, r3
 800511a:	480d      	ldr	r0, [pc, #52]	@ (8005150 <MX_TIM4_Init+0xfc>)
 800511c:	f003 f856 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8005126:	f000 fa37 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	220c      	movs	r2, #12
 800512e:	4619      	mov	r1, r3
 8005130:	4807      	ldr	r0, [pc, #28]	@ (8005150 <MX_TIM4_Init+0xfc>)
 8005132:	f003 f84b 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <MX_TIM4_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 800513c:	f000 fa2c 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8005140:	4803      	ldr	r0, [pc, #12]	@ (8005150 <MX_TIM4_Init+0xfc>)
 8005142:	f000 fbe9 	bl	8005918 <HAL_TIM_MspPostInit>

}
 8005146:	bf00      	nop
 8005148:	3738      	adds	r7, #56	@ 0x38
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000600 	.word	0x20000600
 8005154:	40000800 	.word	0x40000800

08005158 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	@ 0x30
 800515c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	2224      	movs	r2, #36	@ 0x24
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f006 f8d6 	bl	800b318 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8005174:	4b20      	ldr	r3, [pc, #128]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 8005176:	4a21      	ldr	r2, [pc, #132]	@ (80051fc <MX_TIM5_Init+0xa4>)
 8005178:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 80 - 1;
 800517a:	4b1f      	ldr	r3, [pc, #124]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 800517c:	224f      	movs	r2, #79	@ 0x4f
 800517e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005180:	4b1d      	ldr	r3, [pc, #116]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 8005186:	4b1c      	ldr	r3, [pc, #112]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 8005188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800518c:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800518e:	4b1a      	ldr	r3, [pc, #104]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 8005190:	2200      	movs	r2, #0
 8005192:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005194:	4b18      	ldr	r3, [pc, #96]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 8005196:	2200      	movs	r2, #0
 8005198:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800519a:	2303      	movs	r3, #3
 800519c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80051ae:	2300      	movs	r3, #0
 80051b0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80051b2:	2301      	movs	r3, #1
 80051b4:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80051b6:	2300      	movs	r3, #0
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80051be:	f107 030c 	add.w	r3, r7, #12
 80051c2:	4619      	mov	r1, r3
 80051c4:	480c      	ldr	r0, [pc, #48]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 80051c6:	f002 fecd 	bl	8007f64 <HAL_TIM_Encoder_Init>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <MX_TIM5_Init+0x7c>
		Error_Handler();
 80051d0:	f000 f9e2 	bl	8005598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d4:	2300      	movs	r3, #0
 80051d6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4805      	ldr	r0, [pc, #20]	@ (80051f8 <MX_TIM5_Init+0xa0>)
 80051e2:	f003 fc99 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80051ec:	f000 f9d4 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80051f0:	bf00      	nop
 80051f2:	3730      	adds	r7, #48	@ 0x30
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000648 	.word	0x20000648
 80051fc:	40000c00 	.word	0x40000c00

08005200 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8005206:	f107 030c 	add.w	r3, r7, #12
 800520a:	2224      	movs	r2, #36	@ 0x24
 800520c:	2100      	movs	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f006 f882 	bl	800b318 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005214:	1d3b      	adds	r3, r7, #4
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800521c:	4b22      	ldr	r3, [pc, #136]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 800521e:	4a23      	ldr	r2, [pc, #140]	@ (80052ac <MX_TIM8_Init+0xac>)
 8005220:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 80 - 1;
 8005222:	4b21      	ldr	r3, [pc, #132]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 8005224:	224f      	movs	r2, #79	@ 0x4f
 8005226:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005228:	4b1f      	ldr	r3, [pc, #124]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 800522e:	4b1e      	ldr	r3, [pc, #120]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 8005230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005234:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005236:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 8005238:	2200      	movs	r2, #0
 800523a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800523c:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 800523e:	2200      	movs	r2, #0
 8005240:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005242:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 8005244:	2200      	movs	r2, #0
 8005246:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005248:	2303      	movs	r3, #3
 800524a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800525c:	2300      	movs	r3, #0
 800525e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005260:	2301      	movs	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005264:	2300      	movs	r3, #0
 8005266:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	4619      	mov	r1, r3
 8005272:	480d      	ldr	r0, [pc, #52]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 8005274:	f002 fe76 	bl	8007f64 <HAL_TIM_Encoder_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_TIM8_Init+0x82>
		Error_Handler();
 800527e:	f000 f98b 	bl	8005598 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4806      	ldr	r0, [pc, #24]	@ (80052a8 <MX_TIM8_Init+0xa8>)
 8005290:	f003 fc42 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <MX_TIM8_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800529a:	f000 f97d 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800529e:	bf00      	nop
 80052a0:	3730      	adds	r7, #48	@ 0x30
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	20000690 	.word	0x20000690
 80052ac:	40010400 	.word	0x40010400

080052b0 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08c      	sub	sp, #48	@ 0x30
 80052b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80052b6:	f107 0320 	add.w	r3, r7, #32
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80052c4:	1d3b      	adds	r3, r7, #4
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	60da      	str	r2, [r3, #12]
 80052d0:	611a      	str	r2, [r3, #16]
 80052d2:	615a      	str	r2, [r3, #20]
 80052d4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 80052d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005388 <MX_TIM9_Init+0xd8>)
 80052da:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 80 - 1;
 80052dc:	4b29      	ldr	r3, [pc, #164]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052de:	224f      	movs	r2, #79	@ 0x4f
 80052e0:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e2:	4b28      	ldr	r3, [pc, #160]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 1000 - 1;
 80052e8:	4b26      	ldr	r3, [pc, #152]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80052ee:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052f0:	4b24      	ldr	r3, [pc, #144]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f6:	4b23      	ldr	r3, [pc, #140]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 80052fc:	4821      	ldr	r0, [pc, #132]	@ (8005384 <MX_TIM9_Init+0xd4>)
 80052fe:	f002 fcc1 	bl	8007c84 <HAL_TIM_Base_Init>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_TIM9_Init+0x5c>
		Error_Handler();
 8005308:	f000 f946 	bl	8005598 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800530c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005310:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 8005312:	f107 0320 	add.w	r3, r7, #32
 8005316:	4619      	mov	r1, r3
 8005318:	481a      	ldr	r0, [pc, #104]	@ (8005384 <MX_TIM9_Init+0xd4>)
 800531a:	f003 f819 	bl	8008350 <HAL_TIM_ConfigClockSource>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <MX_TIM9_Init+0x78>
		Error_Handler();
 8005324:	f000 f938 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 8005328:	4816      	ldr	r0, [pc, #88]	@ (8005384 <MX_TIM9_Init+0xd4>)
 800532a:	f002 fcfa 	bl	8007d22 <HAL_TIM_PWM_Init>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <MX_TIM9_Init+0x88>
		Error_Handler();
 8005334:	f000 f930 	bl	8005598 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005338:	2360      	movs	r3, #96	@ 0x60
 800533a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1)
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	2200      	movs	r2, #0
 800534c:	4619      	mov	r1, r3
 800534e:	480d      	ldr	r0, [pc, #52]	@ (8005384 <MX_TIM9_Init+0xd4>)
 8005350:	f002 ff3c 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_TIM9_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 800535a:	f000 f91d 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2)
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	2204      	movs	r2, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4807      	ldr	r0, [pc, #28]	@ (8005384 <MX_TIM9_Init+0xd4>)
 8005366:	f002 ff31 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <MX_TIM9_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8005370:	f000 f912 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8005374:	4803      	ldr	r0, [pc, #12]	@ (8005384 <MX_TIM9_Init+0xd4>)
 8005376:	f000 facf 	bl	8005918 <HAL_TIM_MspPostInit>

}
 800537a:	bf00      	nop
 800537c:	3730      	adds	r7, #48	@ 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	200006d8 	.word	0x200006d8
 8005388:	40014000 	.word	0x40014000

0800538c <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b08c      	sub	sp, #48	@ 0x30
 8005390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005392:	f107 0320 	add.w	r3, r7, #32
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	609a      	str	r2, [r3, #8]
 800539e:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	605a      	str	r2, [r3, #4]
 80053a8:	609a      	str	r2, [r3, #8]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	611a      	str	r2, [r3, #16]
 80053ae:	615a      	str	r2, [r3, #20]
 80053b0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80053b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <MX_TIM12_Init+0xd8>)
 80053b6:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 80 - 1;
 80053b8:	4b29      	ldr	r3, [pc, #164]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053ba:	224f      	movs	r2, #79	@ 0x4f
 80053bc:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053be:	4b28      	ldr	r3, [pc, #160]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 1000 - 1;
 80053c4:	4b26      	ldr	r3, [pc, #152]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80053ca:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053cc:	4b24      	ldr	r3, [pc, #144]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053d2:	4b23      	ldr	r3, [pc, #140]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 80053d8:	4821      	ldr	r0, [pc, #132]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053da:	f002 fc53 	bl	8007c84 <HAL_TIM_Base_Init>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <MX_TIM12_Init+0x5c>
		Error_Handler();
 80053e4:	f000 f8d8 	bl	8005598 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053ec:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 80053ee:	f107 0320 	add.w	r3, r7, #32
 80053f2:	4619      	mov	r1, r3
 80053f4:	481a      	ldr	r0, [pc, #104]	@ (8005460 <MX_TIM12_Init+0xd4>)
 80053f6:	f002 ffab 	bl	8008350 <HAL_TIM_ConfigClockSource>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <MX_TIM12_Init+0x78>
		Error_Handler();
 8005400:	f000 f8ca 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8005404:	4816      	ldr	r0, [pc, #88]	@ (8005460 <MX_TIM12_Init+0xd4>)
 8005406:	f002 fc8c 	bl	8007d22 <HAL_TIM_PWM_Init>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM12_Init+0x88>
		Error_Handler();
 8005410:	f000 f8c2 	bl	8005598 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005414:	2360      	movs	r3, #96	@ 0x60
 8005416:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	2200      	movs	r2, #0
 8005428:	4619      	mov	r1, r3
 800542a:	480d      	ldr	r0, [pc, #52]	@ (8005460 <MX_TIM12_Init+0xd4>)
 800542c:	f002 fece 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <MX_TIM12_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8005436:	f000 f8af 	bl	8005598 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2)
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	2204      	movs	r2, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4807      	ldr	r0, [pc, #28]	@ (8005460 <MX_TIM12_Init+0xd4>)
 8005442:	f002 fec3 	bl	80081cc <HAL_TIM_PWM_ConfigChannel>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM12_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800544c:	f000 f8a4 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8005450:	4803      	ldr	r0, [pc, #12]	@ (8005460 <MX_TIM12_Init+0xd4>)
 8005452:	f000 fa61 	bl	8005918 <HAL_TIM_MspPostInit>

}
 8005456:	bf00      	nop
 8005458:	3730      	adds	r7, #48	@ 0x30
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000720 	.word	0x20000720
 8005464:	40001800 	.word	0x40001800

08005468 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800546c:	4b11      	ldr	r3, [pc, #68]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 800546e:	4a12      	ldr	r2, [pc, #72]	@ (80054b8 <MX_USART2_UART_Init+0x50>)
 8005470:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8005472:	4b10      	ldr	r3, [pc, #64]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 8005474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005478:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800547a:	4b0e      	ldr	r3, [pc, #56]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 800547c:	2200      	movs	r2, #0
 800547e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8005480:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 8005482:	2200      	movs	r2, #0
 8005484:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 8005488:	2200      	movs	r2, #0
 800548a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800548c:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 800548e:	220c      	movs	r2, #12
 8005490:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005492:	4b08      	ldr	r3, [pc, #32]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 8005494:	2200      	movs	r2, #0
 8005496:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005498:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 800549a:	2200      	movs	r2, #0
 800549c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800549e:	4805      	ldr	r0, [pc, #20]	@ (80054b4 <MX_USART2_UART_Init+0x4c>)
 80054a0:	f003 fbb6 	bl	8008c10 <HAL_UART_Init>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80054aa:	f000 f875 	bl	8005598 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000768 	.word	0x20000768
 80054b8:	40004400 	.word	0x40004400

080054bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	4b25      	ldr	r3, [pc, #148]	@ (800555c <MX_GPIO_Init+0xa0>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	4a24      	ldr	r2, [pc, #144]	@ (800555c <MX_GPIO_Init+0xa0>)
 80054cc:	f043 0310 	orr.w	r3, r3, #16
 80054d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80054d2:	4b22      	ldr	r3, [pc, #136]	@ (800555c <MX_GPIO_Init+0xa0>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	4b1e      	ldr	r3, [pc, #120]	@ (800555c <MX_GPIO_Init+0xa0>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <MX_GPIO_Init+0xa0>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ee:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <MX_GPIO_Init+0xa0>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <MX_GPIO_Init+0xa0>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	4a16      	ldr	r2, [pc, #88]	@ (800555c <MX_GPIO_Init+0xa0>)
 8005504:	f043 0302 	orr.w	r3, r3, #2
 8005508:	6313      	str	r3, [r2, #48]	@ 0x30
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <MX_GPIO_Init+0xa0>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <MX_GPIO_Init+0xa0>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	4a0f      	ldr	r2, [pc, #60]	@ (800555c <MX_GPIO_Init+0xa0>)
 8005520:	f043 0308 	orr.w	r3, r3, #8
 8005524:	6313      	str	r3, [r2, #48]	@ 0x30
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <MX_GPIO_Init+0xa0>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <MX_GPIO_Init+0xa0>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553a:	4a08      	ldr	r2, [pc, #32]	@ (800555c <MX_GPIO_Init+0xa0>)
 800553c:	f043 0304 	orr.w	r3, r3, #4
 8005540:	6313      	str	r3, [r2, #48]	@ 0x30
 8005542:	4b06      	ldr	r3, [pc, #24]	@ (800555c <MX_GPIO_Init+0xa0>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	f003 0304 	and.w	r3, r3, #4
 800554a:	607b      	str	r3, [r7, #4]
 800554c:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800

08005560 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e009      	b.n	8005586 <_write+0x26>
		ITM_SendChar(*ptr++);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	60ba      	str	r2, [r7, #8]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fb50 	bl	8004c20 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	3301      	adds	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	dbf1      	blt.n	8005572 <_write+0x12>
	}
	return len;
 800558e:	687b      	ldr	r3, [r7, #4]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800559c:	b672      	cpsid	i
}
 800559e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <Error_Handler+0x8>

080055a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <HAL_MspInit+0x4c>)
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	4a0f      	ldr	r2, [pc, #60]	@ (80055f0 <HAL_MspInit+0x4c>)
 80055b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <HAL_MspInit+0x4c>)
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055c6:	2300      	movs	r3, #0
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <HAL_MspInit+0x4c>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	4a08      	ldr	r2, [pc, #32]	@ (80055f0 <HAL_MspInit+0x4c>)
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055d6:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <HAL_MspInit+0x4c>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800

080055f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	@ 0x28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055fc:	f107 0314 	add.w	r3, r7, #20
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	605a      	str	r2, [r3, #4]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	60da      	str	r2, [r3, #12]
 800560a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <HAL_I2C_MspInit+0x84>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d12b      	bne.n	800566e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	4b18      	ldr	r3, [pc, #96]	@ (800567c <HAL_I2C_MspInit+0x88>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561e:	4a17      	ldr	r2, [pc, #92]	@ (800567c <HAL_I2C_MspInit+0x88>)
 8005620:	f043 0302 	orr.w	r3, r3, #2
 8005624:	6313      	str	r3, [r2, #48]	@ 0x30
 8005626:	4b15      	ldr	r3, [pc, #84]	@ (800567c <HAL_I2C_MspInit+0x88>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005632:	23c0      	movs	r3, #192	@ 0xc0
 8005634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005636:	2312      	movs	r3, #18
 8005638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800563e:	2303      	movs	r3, #3
 8005640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005642:	2304      	movs	r3, #4
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	4619      	mov	r1, r3
 800564c:	480c      	ldr	r0, [pc, #48]	@ (8005680 <HAL_I2C_MspInit+0x8c>)
 800564e:	f000 fd01 	bl	8006054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <HAL_I2C_MspInit+0x88>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	4a08      	ldr	r2, [pc, #32]	@ (800567c <HAL_I2C_MspInit+0x88>)
 800565c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005660:	6413      	str	r3, [r2, #64]	@ 0x40
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_I2C_MspInit+0x88>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800566e:	bf00      	nop
 8005670:	3728      	adds	r7, #40	@ 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40005400 	.word	0x40005400
 800567c:	40023800 	.word	0x40023800
 8005680:	40020400 	.word	0x40020400

08005684 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b090      	sub	sp, #64	@ 0x40
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	60da      	str	r2, [r3, #12]
 800569a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a64      	ldr	r2, [pc, #400]	@ (8005834 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d12d      	bne.n	8005702 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056aa:	4b63      	ldr	r3, [pc, #396]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	4a62      	ldr	r2, [pc, #392]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80056b6:	4b60      	ldr	r3, [pc, #384]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c6:	4b5c      	ldr	r3, [pc, #368]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80056cc:	f043 0310 	orr.w	r3, r3, #16
 80056d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80056d2:	4b59      	ldr	r3, [pc, #356]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80056de:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80056e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e4:	2302      	movs	r3, #2
 80056e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056e8:	2301      	movs	r3, #1
 80056ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ec:	2300      	movs	r3, #0
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80056f0:	2301      	movs	r3, #1
 80056f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80056f8:	4619      	mov	r1, r3
 80056fa:	4850      	ldr	r0, [pc, #320]	@ (800583c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80056fc:	f000 fcaa 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005700:	e094      	b.n	800582c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a4e      	ldr	r2, [pc, #312]	@ (8005840 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d12c      	bne.n	8005766 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	4b49      	ldr	r3, [pc, #292]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	4a48      	ldr	r2, [pc, #288]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005716:	f043 0302 	orr.w	r3, r3, #2
 800571a:	6413      	str	r3, [r2, #64]	@ 0x40
 800571c:	4b46      	ldr	r3, [pc, #280]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	4b42      	ldr	r3, [pc, #264]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	4a41      	ldr	r2, [pc, #260]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	6313      	str	r3, [r2, #48]	@ 0x30
 8005738:	4b3f      	ldr	r3, [pc, #252]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005744:	23c0      	movs	r3, #192	@ 0xc0
 8005746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005748:	2302      	movs	r3, #2
 800574a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005750:	2300      	movs	r3, #0
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005754:	2302      	movs	r3, #2
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800575c:	4619      	mov	r1, r3
 800575e:	4839      	ldr	r0, [pc, #228]	@ (8005844 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8005760:	f000 fc78 	bl	8006054 <HAL_GPIO_Init>
}
 8005764:	e062      	b.n	800582c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a37      	ldr	r2, [pc, #220]	@ (8005848 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d12c      	bne.n	80057ca <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	4b30      	ldr	r3, [pc, #192]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	4a2f      	ldr	r2, [pc, #188]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800577a:	f043 0308 	orr.w	r3, r3, #8
 800577e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005780:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	4b29      	ldr	r3, [pc, #164]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	4a28      	ldr	r2, [pc, #160]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6313      	str	r3, [r2, #48]	@ 0x30
 800579c:	4b26      	ldr	r3, [pc, #152]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057a8:	2303      	movs	r3, #3
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ac:	2302      	movs	r3, #2
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b4:	2300      	movs	r3, #0
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80057b8:	2302      	movs	r3, #2
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057c0:	4619      	mov	r1, r3
 80057c2:	4820      	ldr	r0, [pc, #128]	@ (8005844 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80057c4:	f000 fc46 	bl	8006054 <HAL_GPIO_Init>
}
 80057c8:	e030      	b.n	800582c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d12b      	bne.n	800582c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80057d4:	2300      	movs	r3, #0
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80057da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057dc:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80057de:	f043 0302 	orr.w	r3, r3, #2
 80057e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80057e4:	4b14      	ldr	r3, [pc, #80]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80057fa:	f043 0304 	orr.w	r3, r3, #4
 80057fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005800:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800580c:	23c0      	movs	r3, #192	@ 0xc0
 800580e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005814:	2300      	movs	r3, #0
 8005816:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005818:	2300      	movs	r3, #0
 800581a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800581c:	2303      	movs	r3, #3
 800581e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005824:	4619      	mov	r1, r3
 8005826:	480a      	ldr	r0, [pc, #40]	@ (8005850 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8005828:	f000 fc14 	bl	8006054 <HAL_GPIO_Init>
}
 800582c:	bf00      	nop
 800582e:	3740      	adds	r7, #64	@ 0x40
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40010000 	.word	0x40010000
 8005838:	40023800 	.word	0x40023800
 800583c:	40021000 	.word	0x40021000
 8005840:	40000400 	.word	0x40000400
 8005844:	40020000 	.word	0x40020000
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40010400 	.word	0x40010400
 8005850:	40020800 	.word	0x40020800

08005854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	4b27      	ldr	r3, [pc, #156]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	4a26      	ldr	r2, [pc, #152]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 8005870:	f043 0301 	orr.w	r3, r3, #1
 8005874:	6413      	str	r3, [r2, #64]	@ 0x40
 8005876:	4b24      	ldr	r3, [pc, #144]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8005882:	e03a      	b.n	80058fa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a20      	ldr	r2, [pc, #128]	@ (800590c <HAL_TIM_Base_MspInit+0xb8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	4a1c      	ldr	r2, [pc, #112]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 8005898:	f043 0304 	orr.w	r3, r3, #4
 800589c:	6413      	str	r3, [r2, #64]	@ 0x40
 800589e:	4b1a      	ldr	r3, [pc, #104]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	693b      	ldr	r3, [r7, #16]
}
 80058aa:	e026      	b.n	80058fa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a17      	ldr	r2, [pc, #92]	@ (8005910 <HAL_TIM_Base_MspInit+0xbc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10e      	bne.n	80058d4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058be:	4a12      	ldr	r2, [pc, #72]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80058c6:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
}
 80058d2:	e012      	b.n	80058fa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005914 <HAL_TIM_Base_MspInit+0xc0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10d      	bne.n	80058fa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ee:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <HAL_TIM_Base_MspInit+0xb4>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f6:	60bb      	str	r3, [r7, #8]
 80058f8:	68bb      	ldr	r3, [r7, #8]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	40000800 	.word	0x40000800
 8005910:	40014000 	.word	0x40014000
 8005914:	40001800 	.word	0x40001800

08005918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08c      	sub	sp, #48	@ 0x30
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	f107 031c 	add.w	r3, r7, #28
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005938:	d11e      	bne.n	8005978 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	4b47      	ldr	r3, [pc, #284]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	4a46      	ldr	r2, [pc, #280]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6313      	str	r3, [r2, #48]	@ 0x30
 800594a:	4b44      	ldr	r3, [pc, #272]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005956:	230c      	movs	r3, #12
 8005958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595e:	2300      	movs	r3, #0
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005962:	2300      	movs	r3, #0
 8005964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005966:	2301      	movs	r3, #1
 8005968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800596a:	f107 031c 	add.w	r3, r7, #28
 800596e:	4619      	mov	r1, r3
 8005970:	483b      	ldr	r0, [pc, #236]	@ (8005a60 <HAL_TIM_MspPostInit+0x148>)
 8005972:	f000 fb6f 	bl	8006054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8005976:	e06c      	b.n	8005a52 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a39      	ldr	r2, [pc, #228]	@ (8005a64 <HAL_TIM_MspPostInit+0x14c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d11f      	bne.n	80059c2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	4b35      	ldr	r3, [pc, #212]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	4a34      	ldr	r2, [pc, #208]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	6313      	str	r3, [r2, #48]	@ 0x30
 8005992:	4b32      	ldr	r3, [pc, #200]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800599e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80059a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a4:	2302      	movs	r3, #2
 80059a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80059b0:	2302      	movs	r3, #2
 80059b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059b4:	f107 031c 	add.w	r3, r7, #28
 80059b8:	4619      	mov	r1, r3
 80059ba:	482b      	ldr	r0, [pc, #172]	@ (8005a68 <HAL_TIM_MspPostInit+0x150>)
 80059bc:	f000 fb4a 	bl	8006054 <HAL_GPIO_Init>
}
 80059c0:	e047      	b.n	8005a52 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM9)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a29      	ldr	r2, [pc, #164]	@ (8005a6c <HAL_TIM_MspPostInit+0x154>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d11e      	bne.n	8005a0a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	4b22      	ldr	r3, [pc, #136]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 80059d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d4:	4a21      	ldr	r2, [pc, #132]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 80059d6:	f043 0310 	orr.w	r3, r3, #16
 80059da:	6313      	str	r3, [r2, #48]	@ 0x30
 80059dc:	4b1f      	ldr	r3, [pc, #124]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 80059de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80059e8:	2360      	movs	r3, #96	@ 0x60
 80059ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ec:	2302      	movs	r3, #2
 80059ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80059f8:	2303      	movs	r3, #3
 80059fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059fc:	f107 031c 	add.w	r3, r7, #28
 8005a00:	4619      	mov	r1, r3
 8005a02:	481b      	ldr	r0, [pc, #108]	@ (8005a70 <HAL_TIM_MspPostInit+0x158>)
 8005a04:	f000 fb26 	bl	8006054 <HAL_GPIO_Init>
}
 8005a08:	e023      	b.n	8005a52 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM12)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a19      	ldr	r2, [pc, #100]	@ (8005a74 <HAL_TIM_MspPostInit+0x15c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d11e      	bne.n	8005a52 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005a1e:	f043 0302 	orr.w	r3, r3, #2
 8005a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a24:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <HAL_TIM_MspPostInit+0x144>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005a30:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a36:	2302      	movs	r3, #2
 8005a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005a42:	2309      	movs	r3, #9
 8005a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a46:	f107 031c 	add.w	r3, r7, #28
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	480a      	ldr	r0, [pc, #40]	@ (8005a78 <HAL_TIM_MspPostInit+0x160>)
 8005a4e:	f000 fb01 	bl	8006054 <HAL_GPIO_Init>
}
 8005a52:	bf00      	nop
 8005a54:	3730      	adds	r7, #48	@ 0x30
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40020c00 	.word	0x40020c00
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40001800 	.word	0x40001800
 8005a78:	40020400 	.word	0x40020400

08005a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	@ 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a19      	ldr	r2, [pc, #100]	@ (8005b00 <HAL_UART_MspInit+0x84>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d12b      	bne.n	8005af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	4b18      	ldr	r3, [pc, #96]	@ (8005b04 <HAL_UART_MspInit+0x88>)
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa6:	4a17      	ldr	r2, [pc, #92]	@ (8005b04 <HAL_UART_MspInit+0x88>)
 8005aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aae:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <HAL_UART_MspInit+0x88>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	613b      	str	r3, [r7, #16]
 8005ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	4b11      	ldr	r3, [pc, #68]	@ (8005b04 <HAL_UART_MspInit+0x88>)
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	4a10      	ldr	r2, [pc, #64]	@ (8005b04 <HAL_UART_MspInit+0x88>)
 8005ac4:	f043 0308 	orr.w	r3, r3, #8
 8005ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aca:	4b0e      	ldr	r3, [pc, #56]	@ (8005b04 <HAL_UART_MspInit+0x88>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005ad6:	2360      	movs	r3, #96	@ 0x60
 8005ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ada:	2302      	movs	r3, #2
 8005adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ae6:	2307      	movs	r3, #7
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aea:	f107 0314 	add.w	r3, r7, #20
 8005aee:	4619      	mov	r1, r3
 8005af0:	4805      	ldr	r0, [pc, #20]	@ (8005b08 <HAL_UART_MspInit+0x8c>)
 8005af2:	f000 faaf 	bl	8006054 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005af6:	bf00      	nop
 8005af8:	3728      	adds	r7, #40	@ 0x28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40004400 	.word	0x40004400
 8005b04:	40023800 	.word	0x40023800
 8005b08:	40020c00 	.word	0x40020c00

08005b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <NMI_Handler+0x4>

08005b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <HardFault_Handler+0x4>

08005b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <MemManage_Handler+0x4>

08005b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <BusFault_Handler+0x4>

08005b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <UsageFault_Handler+0x4>

08005b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b42:	b480      	push	{r7}
 8005b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b64:	f000 f94e 	bl	8005e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  custom_tick++; // Increment your custom tick counter
 8005b68:	4b03      	ldr	r3, [pc, #12]	@ (8005b78 <SysTick_Handler+0x18>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a02      	ldr	r2, [pc, #8]	@ (8005b78 <SysTick_Handler+0x18>)
 8005b70:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	200007b0 	.word	0x200007b0

08005b7c <get_custom_tick>:
/* USER CODE BEGIN 1 */
void reset_custom_tick(void) {
    custom_tick = 0; // Reset your custom tick counter
}

uint32_t get_custom_tick(void) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
    return custom_tick; // Return the current value of your custom tick counter
 8005b80:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <get_custom_tick+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	200007b0 	.word	0x200007b0

08005b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return 1;
 8005b98:	2301      	movs	r3, #1
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <_kill>:

int _kill(int pid, int sig)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005bae:	f005 fc89 	bl	800b4c4 <__errno>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2216      	movs	r2, #22
 8005bb6:	601a      	str	r2, [r3, #0]
  return -1;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <_exit>:

void _exit (int status)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ffe7 	bl	8005ba4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <_exit+0x12>

08005bda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e00a      	b.n	8005c02 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005bec:	f3af 8000 	nop.w
 8005bf0:	4601      	mov	r1, r0
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	60ba      	str	r2, [r7, #8]
 8005bf8:	b2ca      	uxtb	r2, r1
 8005bfa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	dbf0      	blt.n	8005bec <_read+0x12>
  }

  return len;
 8005c0a:	687b      	ldr	r3, [r7, #4]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c3c:	605a      	str	r2, [r3, #4]
  return 0;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <_isatty>:

int _isatty(int file)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c54:	2301      	movs	r3, #1
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c84:	4a14      	ldr	r2, [pc, #80]	@ (8005cd8 <_sbrk+0x5c>)
 8005c86:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <_sbrk+0x60>)
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c90:	4b13      	ldr	r3, [pc, #76]	@ (8005ce0 <_sbrk+0x64>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c98:	4b11      	ldr	r3, [pc, #68]	@ (8005ce0 <_sbrk+0x64>)
 8005c9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ce4 <_sbrk+0x68>)
 8005c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c9e:	4b10      	ldr	r3, [pc, #64]	@ (8005ce0 <_sbrk+0x64>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d207      	bcs.n	8005cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cac:	f005 fc0a 	bl	800b4c4 <__errno>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cba:	e009      	b.n	8005cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cbc:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <_sbrk+0x64>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cc2:	4b07      	ldr	r3, [pc, #28]	@ (8005ce0 <_sbrk+0x64>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	4a05      	ldr	r2, [pc, #20]	@ (8005ce0 <_sbrk+0x64>)
 8005ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	20020000 	.word	0x20020000
 8005cdc:	00000400 	.word	0x00000400
 8005ce0:	200007b4 	.word	0x200007b4
 8005ce4:	20000908 	.word	0x20000908

08005ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005cec:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <SystemInit+0x20>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf2:	4a05      	ldr	r2, [pc, #20]	@ (8005d08 <SystemInit+0x20>)
 8005cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8005d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005d10:	f7ff ffea 	bl	8005ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d14:	480c      	ldr	r0, [pc, #48]	@ (8005d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d16:	490d      	ldr	r1, [pc, #52]	@ (8005d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d18:	4a0d      	ldr	r2, [pc, #52]	@ (8005d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d1c:	e002      	b.n	8005d24 <LoopCopyDataInit>

08005d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d22:	3304      	adds	r3, #4

08005d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d28:	d3f9      	bcc.n	8005d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8005d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d30:	e001      	b.n	8005d36 <LoopFillZerobss>

08005d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d34:	3204      	adds	r2, #4

08005d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d38:	d3fb      	bcc.n	8005d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d3a:	f005 fbc9 	bl	800b4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d3e:	f7fe ff97 	bl	8004c70 <main>
  bx  lr    
 8005d42:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 8005d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005d4c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8005d50:	0800fc60 	.word	0x0800fc60
  ldr r2, =_sbss
 8005d54:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8005d58:	20000908 	.word	0x20000908

08005d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d5c:	e7fe      	b.n	8005d5c <ADC_IRQHandler>
	...

08005d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d64:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <HAL_Init+0x40>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0d      	ldr	r2, [pc, #52]	@ (8005da0 <HAL_Init+0x40>)
 8005d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d70:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <HAL_Init+0x40>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0a      	ldr	r2, [pc, #40]	@ (8005da0 <HAL_Init+0x40>)
 8005d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d7c:	4b08      	ldr	r3, [pc, #32]	@ (8005da0 <HAL_Init+0x40>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a07      	ldr	r2, [pc, #28]	@ (8005da0 <HAL_Init+0x40>)
 8005d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d88:	2003      	movs	r0, #3
 8005d8a:	f000 f92f 	bl	8005fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d8e:	200f      	movs	r0, #15
 8005d90:	f000 f808 	bl	8005da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d94:	f7ff fc06 	bl	80055a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40023c00 	.word	0x40023c00

08005da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dac:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <HAL_InitTick+0x54>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b12      	ldr	r3, [pc, #72]	@ (8005dfc <HAL_InitTick+0x58>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f939 	bl	800603a <HAL_SYSTICK_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e00e      	b.n	8005df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d80a      	bhi.n	8005dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dd8:	2200      	movs	r2, #0
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	f000 f90f 	bl	8006002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005de4:	4a06      	ldr	r2, [pc, #24]	@ (8005e00 <HAL_InitTick+0x5c>)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e000      	b.n	8005df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20000098 	.word	0x20000098
 8005dfc:	200000a0 	.word	0x200000a0
 8005e00:	2000009c 	.word	0x2000009c

08005e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e08:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <HAL_IncTick+0x20>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <HAL_IncTick+0x24>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4413      	add	r3, r2
 8005e14:	4a04      	ldr	r2, [pc, #16]	@ (8005e28 <HAL_IncTick+0x24>)
 8005e16:	6013      	str	r3, [r2, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	200000a0 	.word	0x200000a0
 8005e28:	200007b8 	.word	0x200007b8

08005e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0

	return uwTick;
 8005e30:	4b03      	ldr	r3, [pc, #12]	@ (8005e40 <HAL_GetTick+0x14>)
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	200007b8 	.word	0x200007b8

08005e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e4c:	f7ff ffee 	bl	8005e2c <HAL_GetTick>
 8005e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5c:	d005      	beq.n	8005e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e5e:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <HAL_Delay+0x40>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
  }

while((HAL_GetTick() - tickstart) < wait)
 8005e6a:	f7ff ffdf 	bl	8005e2c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d8f7      	bhi.n	8005e6a <HAL_Delay+0x26>
  {
    }
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	200000a0 	.word	0x200000a0

08005e88 <__NVIC_SetPriorityGrouping>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <__NVIC_SetPriorityGrouping+0x44>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eba:	4a04      	ldr	r2, [pc, #16]	@ (8005ecc <__NVIC_SetPriorityGrouping+0x44>)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	60d3      	str	r3, [r2, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	e000ed00 	.word	0xe000ed00

08005ed0 <__NVIC_GetPriorityGrouping>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ed4:	4b04      	ldr	r3, [pc, #16]	@ (8005ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	0a1b      	lsrs	r3, r3, #8
 8005eda:	f003 0307 	and.w	r3, r3, #7
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <__NVIC_SetPriority>:
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	6039      	str	r1, [r7, #0]
 8005ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db0a      	blt.n	8005f16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	490c      	ldr	r1, [pc, #48]	@ (8005f38 <__NVIC_SetPriority+0x4c>)
 8005f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f0a:	0112      	lsls	r2, r2, #4
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	440b      	add	r3, r1
 8005f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f14:	e00a      	b.n	8005f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	4908      	ldr	r1, [pc, #32]	@ (8005f3c <__NVIC_SetPriority+0x50>)
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	3b04      	subs	r3, #4
 8005f24:	0112      	lsls	r2, r2, #4
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	440b      	add	r3, r1
 8005f2a:	761a      	strb	r2, [r3, #24]
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	e000e100 	.word	0xe000e100
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <NVIC_EncodePriority>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f1c3 0307 	rsb	r3, r3, #7
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	bf28      	it	cs
 8005f5e:	2304      	movcs	r3, #4
 8005f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d902      	bls.n	8005f70 <NVIC_EncodePriority+0x30>
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3b03      	subs	r3, #3
 8005f6e:	e000      	b.n	8005f72 <NVIC_EncodePriority+0x32>
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43da      	mvns	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	401a      	ands	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f88:	f04f 31ff 	mov.w	r1, #4294967295
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	43d9      	mvns	r1, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f98:	4313      	orrs	r3, r2
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	@ 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <SysTick_Config>:
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb8:	d301      	bcc.n	8005fbe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e00f      	b.n	8005fde <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <SysTick_Config+0x40>)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fc6:	210f      	movs	r1, #15
 8005fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fcc:	f7ff ff8e 	bl	8005eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <SysTick_Config+0x40>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fd6:	4b04      	ldr	r3, [pc, #16]	@ (8005fe8 <SysTick_Config+0x40>)
 8005fd8:	2207      	movs	r2, #7
 8005fda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	e000e010 	.word	0xe000e010

08005fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff47 	bl	8005e88 <__NVIC_SetPriorityGrouping>
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006002:	b580      	push	{r7, lr}
 8006004:	b086      	sub	sp, #24
 8006006:	af00      	add	r7, sp, #0
 8006008:	4603      	mov	r3, r0
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006014:	f7ff ff5c 	bl	8005ed0 <__NVIC_GetPriorityGrouping>
 8006018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f7ff ff8e 	bl	8005f40 <NVIC_EncodePriority>
 8006024:	4602      	mov	r2, r0
 8006026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff5d 	bl	8005eec <__NVIC_SetPriority>
}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff ffb0 	bl	8005fa8 <SysTick_Config>
 8006048:	4603      	mov	r3, r0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006054:	b480      	push	{r7}
 8006056:	b089      	sub	sp, #36	@ 0x24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	e16b      	b.n	8006348 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006070:	2201      	movs	r2, #1
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4013      	ands	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	429a      	cmp	r2, r3
 800608a:	f040 815a 	bne.w	8006342 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b01      	cmp	r3, #1
 8006098:	d005      	beq.n	80060a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d130      	bne.n	8006108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	2203      	movs	r2, #3
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060dc:	2201      	movs	r2, #1
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	f003 0201 	and.w	r2, r3, #1
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	2b03      	cmp	r3, #3
 8006112:	d017      	beq.n	8006144 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	2203      	movs	r2, #3
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4013      	ands	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d123      	bne.n	8006198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	08da      	lsrs	r2, r3, #3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3208      	adds	r2, #8
 8006158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	220f      	movs	r2, #15
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4313      	orrs	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	08da      	lsrs	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3208      	adds	r2, #8
 8006192:	69b9      	ldr	r1, [r7, #24]
 8006194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 0203 	and.w	r2, r3, #3
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80b4 	beq.w	8006342 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	4b60      	ldr	r3, [pc, #384]	@ (8006360 <HAL_GPIO_Init+0x30c>)
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e2:	4a5f      	ldr	r2, [pc, #380]	@ (8006360 <HAL_GPIO_Init+0x30c>)
 80061e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006360 <HAL_GPIO_Init+0x30c>)
 80061ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006364 <HAL_GPIO_Init+0x310>)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	089b      	lsrs	r3, r3, #2
 80061fc:	3302      	adds	r3, #2
 80061fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	220f      	movs	r2, #15
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4013      	ands	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a52      	ldr	r2, [pc, #328]	@ (8006368 <HAL_GPIO_Init+0x314>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <HAL_GPIO_Init+0x226>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a51      	ldr	r2, [pc, #324]	@ (800636c <HAL_GPIO_Init+0x318>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d025      	beq.n	8006276 <HAL_GPIO_Init+0x222>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a50      	ldr	r2, [pc, #320]	@ (8006370 <HAL_GPIO_Init+0x31c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01f      	beq.n	8006272 <HAL_GPIO_Init+0x21e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a4f      	ldr	r2, [pc, #316]	@ (8006374 <HAL_GPIO_Init+0x320>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d019      	beq.n	800626e <HAL_GPIO_Init+0x21a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a4e      	ldr	r2, [pc, #312]	@ (8006378 <HAL_GPIO_Init+0x324>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_GPIO_Init+0x216>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a4d      	ldr	r2, [pc, #308]	@ (800637c <HAL_GPIO_Init+0x328>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00d      	beq.n	8006266 <HAL_GPIO_Init+0x212>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a4c      	ldr	r2, [pc, #304]	@ (8006380 <HAL_GPIO_Init+0x32c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <HAL_GPIO_Init+0x20e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a4b      	ldr	r2, [pc, #300]	@ (8006384 <HAL_GPIO_Init+0x330>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <HAL_GPIO_Init+0x20a>
 800625a:	2307      	movs	r3, #7
 800625c:	e00e      	b.n	800627c <HAL_GPIO_Init+0x228>
 800625e:	2308      	movs	r3, #8
 8006260:	e00c      	b.n	800627c <HAL_GPIO_Init+0x228>
 8006262:	2306      	movs	r3, #6
 8006264:	e00a      	b.n	800627c <HAL_GPIO_Init+0x228>
 8006266:	2305      	movs	r3, #5
 8006268:	e008      	b.n	800627c <HAL_GPIO_Init+0x228>
 800626a:	2304      	movs	r3, #4
 800626c:	e006      	b.n	800627c <HAL_GPIO_Init+0x228>
 800626e:	2303      	movs	r3, #3
 8006270:	e004      	b.n	800627c <HAL_GPIO_Init+0x228>
 8006272:	2302      	movs	r3, #2
 8006274:	e002      	b.n	800627c <HAL_GPIO_Init+0x228>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <HAL_GPIO_Init+0x228>
 800627a:	2300      	movs	r3, #0
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	f002 0203 	and.w	r2, r2, #3
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	4093      	lsls	r3, r2
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4313      	orrs	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800628c:	4935      	ldr	r1, [pc, #212]	@ (8006364 <HAL_GPIO_Init+0x310>)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	3302      	adds	r3, #2
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800629a:	4b3b      	ldr	r3, [pc, #236]	@ (8006388 <HAL_GPIO_Init+0x334>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062be:	4a32      	ldr	r2, [pc, #200]	@ (8006388 <HAL_GPIO_Init+0x334>)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062c4:	4b30      	ldr	r3, [pc, #192]	@ (8006388 <HAL_GPIO_Init+0x334>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062e8:	4a27      	ldr	r2, [pc, #156]	@ (8006388 <HAL_GPIO_Init+0x334>)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062ee:	4b26      	ldr	r3, [pc, #152]	@ (8006388 <HAL_GPIO_Init+0x334>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006312:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <HAL_GPIO_Init+0x334>)
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006318:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <HAL_GPIO_Init+0x334>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800633c:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <HAL_GPIO_Init+0x334>)
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3301      	adds	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	2b0f      	cmp	r3, #15
 800634c:	f67f ae90 	bls.w	8006070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	3724      	adds	r7, #36	@ 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40023800 	.word	0x40023800
 8006364:	40013800 	.word	0x40013800
 8006368:	40020000 	.word	0x40020000
 800636c:	40020400 	.word	0x40020400
 8006370:	40020800 	.word	0x40020800
 8006374:	40020c00 	.word	0x40020c00
 8006378:	40021000 	.word	0x40021000
 800637c:	40021400 	.word	0x40021400
 8006380:	40021800 	.word	0x40021800
 8006384:	40021c00 	.word	0x40021c00
 8006388:	40013c00 	.word	0x40013c00

0800638c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e12b      	b.n	80065f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff f91e 	bl	80055f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2224      	movs	r2, #36	@ 0x24
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063f0:	f001 fc20 	bl	8007c34 <HAL_RCC_GetPCLK1Freq>
 80063f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4a81      	ldr	r2, [pc, #516]	@ (8006600 <HAL_I2C_Init+0x274>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d807      	bhi.n	8006410 <HAL_I2C_Init+0x84>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a80      	ldr	r2, [pc, #512]	@ (8006604 <HAL_I2C_Init+0x278>)
 8006404:	4293      	cmp	r3, r2
 8006406:	bf94      	ite	ls
 8006408:	2301      	movls	r3, #1
 800640a:	2300      	movhi	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e006      	b.n	800641e <HAL_I2C_Init+0x92>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a7d      	ldr	r2, [pc, #500]	@ (8006608 <HAL_I2C_Init+0x27c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	bf94      	ite	ls
 8006418:	2301      	movls	r3, #1
 800641a:	2300      	movhi	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0e7      	b.n	80065f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4a78      	ldr	r2, [pc, #480]	@ (800660c <HAL_I2C_Init+0x280>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	0c9b      	lsrs	r3, r3, #18
 8006430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a6a      	ldr	r2, [pc, #424]	@ (8006600 <HAL_I2C_Init+0x274>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d802      	bhi.n	8006460 <HAL_I2C_Init+0xd4>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3301      	adds	r3, #1
 800645e:	e009      	b.n	8006474 <HAL_I2C_Init+0xe8>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	4a69      	ldr	r2, [pc, #420]	@ (8006610 <HAL_I2C_Init+0x284>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	099b      	lsrs	r3, r3, #6
 8006472:	3301      	adds	r3, #1
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	430b      	orrs	r3, r1
 800647a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006486:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	495c      	ldr	r1, [pc, #368]	@ (8006600 <HAL_I2C_Init+0x274>)
 8006490:	428b      	cmp	r3, r1
 8006492:	d819      	bhi.n	80064c8 <HAL_I2C_Init+0x13c>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1e59      	subs	r1, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	fbb1 f3f3 	udiv	r3, r1, r3
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80064a8:	400b      	ands	r3, r1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_I2C_Init+0x138>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1e59      	subs	r1, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80064bc:	3301      	adds	r3, #1
 80064be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c2:	e051      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 80064c4:	2304      	movs	r3, #4
 80064c6:	e04f      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d111      	bne.n	80064f4 <HAL_I2C_Init+0x168>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1e58      	subs	r0, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6859      	ldr	r1, [r3, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	440b      	add	r3, r1
 80064de:	fbb0 f3f3 	udiv	r3, r0, r3
 80064e2:	3301      	adds	r3, #1
 80064e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e012      	b.n	800651a <HAL_I2C_Init+0x18e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	1e58      	subs	r0, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	0099      	lsls	r1, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	fbb0 f3f3 	udiv	r3, r0, r3
 800650a:	3301      	adds	r3, #1
 800650c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_I2C_Init+0x196>
 800651e:	2301      	movs	r3, #1
 8006520:	e022      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10e      	bne.n	8006548 <HAL_I2C_Init+0x1bc>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1e58      	subs	r0, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	440b      	add	r3, r1
 8006538:	fbb0 f3f3 	udiv	r3, r0, r3
 800653c:	3301      	adds	r3, #1
 800653e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006546:	e00f      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1e58      	subs	r0, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6859      	ldr	r1, [r3, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	0099      	lsls	r1, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	fbb0 f3f3 	udiv	r3, r0, r3
 800655e:	3301      	adds	r3, #1
 8006560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006564:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	6809      	ldr	r1, [r1, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69da      	ldr	r2, [r3, #28]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006596:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6911      	ldr	r1, [r2, #16]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68d2      	ldr	r2, [r2, #12]
 80065a2:	4311      	orrs	r1, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	000186a0 	.word	0x000186a0
 8006604:	001e847f 	.word	0x001e847f
 8006608:	003d08ff 	.word	0x003d08ff
 800660c:	431bde83 	.word	0x431bde83
 8006610:	10624dd3 	.word	0x10624dd3

08006614 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	4608      	mov	r0, r1
 800661e:	4611      	mov	r1, r2
 8006620:	461a      	mov	r2, r3
 8006622:	4603      	mov	r3, r0
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	460b      	mov	r3, r1
 8006628:	813b      	strh	r3, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800662e:	f7ff fbfd 	bl	8005e2c <HAL_GetTick>
 8006632:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b20      	cmp	r3, #32
 800663e:	f040 80d9 	bne.w	80067f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	2319      	movs	r3, #25
 8006648:	2201      	movs	r2, #1
 800664a:	496d      	ldr	r1, [pc, #436]	@ (8006800 <HAL_I2C_Mem_Write+0x1ec>)
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fc8b 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006658:	2302      	movs	r3, #2
 800665a:	e0cc      	b.n	80067f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_I2C_Mem_Write+0x56>
 8006666:	2302      	movs	r3, #2
 8006668:	e0c5      	b.n	80067f6 <HAL_I2C_Mem_Write+0x1e2>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d007      	beq.n	8006690 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2221      	movs	r2, #33	@ 0x21
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2240      	movs	r2, #64	@ 0x40
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a4d      	ldr	r2, [pc, #308]	@ (8006804 <HAL_I2C_Mem_Write+0x1f0>)
 80066d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066d2:	88f8      	ldrh	r0, [r7, #6]
 80066d4:	893a      	ldrh	r2, [r7, #8]
 80066d6:	8979      	ldrh	r1, [r7, #10]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4603      	mov	r3, r0
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fac2 	bl	8006c6c <I2C_RequestMemoryWrite>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d052      	beq.n	8006794 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e081      	b.n	80067f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fd50 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	2b04      	cmp	r3, #4
 8006708:	d107      	bne.n	800671a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e06b      	b.n	80067f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006722:	781a      	ldrb	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d11b      	bne.n	8006794 <HAL_I2C_Mem_Write+0x180>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d017      	beq.n	8006794 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1aa      	bne.n	80066f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fd43 	bl	800722c <I2C_WaitOnBTFFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d107      	bne.n	80067c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e016      	b.n	80067f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	00100002 	.word	0x00100002
 8006804:	ffff0000 	.word	0xffff0000

08006808 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	@ 0x30
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	4608      	mov	r0, r1
 8006812:	4611      	mov	r1, r2
 8006814:	461a      	mov	r2, r3
 8006816:	4603      	mov	r3, r0
 8006818:	817b      	strh	r3, [r7, #10]
 800681a:	460b      	mov	r3, r1
 800681c:	813b      	strh	r3, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006822:	f7ff fb03 	bl	8005e2c <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b20      	cmp	r3, #32
 8006832:	f040 8214 	bne.w	8006c5e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2319      	movs	r3, #25
 800683c:	2201      	movs	r2, #1
 800683e:	497b      	ldr	r1, [pc, #492]	@ (8006a2c <HAL_I2C_Mem_Read+0x224>)
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fb91 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800684c:	2302      	movs	r3, #2
 800684e:	e207      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_I2C_Mem_Read+0x56>
 800685a:	2302      	movs	r3, #2
 800685c:	e200      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d007      	beq.n	8006884 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006892:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2222      	movs	r2, #34	@ 0x22
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2240      	movs	r2, #64	@ 0x40
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80068b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006a30 <HAL_I2C_Mem_Read+0x228>)
 80068c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068c6:	88f8      	ldrh	r0, [r7, #6]
 80068c8:	893a      	ldrh	r2, [r7, #8]
 80068ca:	8979      	ldrh	r1, [r7, #10]
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4603      	mov	r3, r0
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fa5e 	bl	8006d98 <I2C_RequestMemoryRead>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e1bc      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d113      	bne.n	8006916 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ee:	2300      	movs	r3, #0
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e190      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691a:	2b01      	cmp	r3, #1
 800691c:	d11b      	bne.n	8006956 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800692c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800692e:	2300      	movs	r3, #0
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e170      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695a:	2b02      	cmp	r3, #2
 800695c:	d11b      	bne.n	8006996 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800696c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800697c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697e:	2300      	movs	r3, #0
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	e150      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80069ac:	e144      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	f200 80f1 	bhi.w	8006b9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d123      	bne.n	8006a08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fc79 	bl	80072bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e145      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691a      	ldr	r2, [r3, #16]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a06:	e117      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d14e      	bne.n	8006aae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	2200      	movs	r2, #0
 8006a18:	4906      	ldr	r1, [pc, #24]	@ (8006a34 <HAL_I2C_Mem_Read+0x22c>)
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 faa4 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e11a      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
 8006a2a:	bf00      	nop
 8006a2c:	00100002 	.word	0x00100002
 8006a30:	ffff0000 	.word	0xffff0000
 8006a34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006aac:	e0c4      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	496c      	ldr	r1, [pc, #432]	@ (8006c68 <HAL_I2C_Mem_Read+0x460>)
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fa55 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0cb      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	2200      	movs	r2, #0
 8006b12:	4955      	ldr	r1, [pc, #340]	@ (8006c68 <HAL_I2C_Mem_Read+0x460>)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fa27 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e09d      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b98:	e04e      	b.n	8006c38 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fb8c 	bl	80072bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e058      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b04      	cmp	r3, #4
 8006bec:	d124      	bne.n	8006c38 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d107      	bne.n	8006c06 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f47f aeb6 	bne.w	80069ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
  }
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3728      	adds	r7, #40	@ 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	00010004 	.word	0x00010004

08006c6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	817b      	strh	r3, [r7, #10]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	813b      	strh	r3, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f960 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cbc:	d103      	bne.n	8006cc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e05f      	b.n	8006d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cca:	897b      	ldrh	r3, [r7, #10]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	6a3a      	ldr	r2, [r7, #32]
 8006cde:	492d      	ldr	r1, [pc, #180]	@ (8006d94 <I2C_RequestMemoryWrite+0x128>)
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f9bb 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e04c      	b.n	8006d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d08:	6a39      	ldr	r1, [r7, #32]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fa46 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00d      	beq.n	8006d32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d107      	bne.n	8006d2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e02b      	b.n	8006d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d105      	bne.n	8006d44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d38:	893b      	ldrh	r3, [r7, #8]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	611a      	str	r2, [r3, #16]
 8006d42:	e021      	b.n	8006d88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d44:	893b      	ldrh	r3, [r7, #8]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d54:	6a39      	ldr	r1, [r7, #32]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fa20 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00d      	beq.n	8006d7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d107      	bne.n	8006d7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e005      	b.n	8006d8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d7e:	893b      	ldrh	r3, [r7, #8]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	00010002 	.word	0x00010002

08006d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	461a      	mov	r2, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	817b      	strh	r3, [r7, #10]
 8006daa:	460b      	mov	r3, r1
 8006dac:	813b      	strh	r3, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f8c2 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df8:	d103      	bne.n	8006e02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e0aa      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e06:	897b      	ldrh	r3, [r7, #10]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	6a3a      	ldr	r2, [r7, #32]
 8006e1a:	4952      	ldr	r1, [pc, #328]	@ (8006f64 <I2C_RequestMemoryRead+0x1cc>)
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f91d 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e097      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e44:	6a39      	ldr	r1, [r7, #32]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f9a8 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00d      	beq.n	8006e6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d107      	bne.n	8006e6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e076      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d105      	bne.n	8006e80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e74:	893b      	ldrh	r3, [r7, #8]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	611a      	str	r2, [r3, #16]
 8006e7e:	e021      	b.n	8006ec4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e80:	893b      	ldrh	r3, [r7, #8]
 8006e82:	0a1b      	lsrs	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e90:	6a39      	ldr	r1, [r7, #32]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f982 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00d      	beq.n	8006eba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d107      	bne.n	8006eb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e050      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eba:	893b      	ldrh	r3, [r7, #8]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec6:	6a39      	ldr	r1, [r7, #32]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f967 	bl	800719c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00d      	beq.n	8006ef0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d107      	bne.n	8006eec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e035      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006efe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f82b 	bl	8006f68 <I2C_WaitOnFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00d      	beq.n	8006f34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f26:	d103      	bne.n	8006f30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e013      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f34:	897b      	ldrh	r3, [r7, #10]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f043 0301 	orr.w	r3, r3, #1
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	4906      	ldr	r1, [pc, #24]	@ (8006f64 <I2C_RequestMemoryRead+0x1cc>)
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f886 	bl	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	00010002 	.word	0x00010002

08006f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	603b      	str	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f78:	e048      	b.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f80:	d044      	beq.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f82:	f7fe ff53 	bl	8005e2c <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d302      	bcc.n	8006f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d139      	bne.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	0c1b      	lsrs	r3, r3, #16
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d10d      	bne.n	8006fbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	43da      	mvns	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4013      	ands	r3, r2
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bf0c      	ite	eq
 8006fb4:	2301      	moveq	r3, #1
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	e00c      	b.n	8006fd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	43da      	mvns	r2, r3
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e023      	b.n	8007054 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d10d      	bne.n	8007032 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	43da      	mvns	r2, r3
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4013      	ands	r3, r2
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	e00c      	b.n	800704c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	43da      	mvns	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4013      	ands	r3, r2
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	429a      	cmp	r2, r3
 8007050:	d093      	beq.n	8006f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800706a:	e071      	b.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707a:	d123      	bne.n	80070c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800708a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e067      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d041      	beq.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070cc:	f7fe feae 	bl	8005e2c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d302      	bcc.n	80070e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d136      	bne.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10c      	bne.n	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	43da      	mvns	r2, r3
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e00b      	b.n	800711e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	43da      	mvns	r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4013      	ands	r3, r2
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	bf14      	ite	ne
 8007118:	2301      	movne	r3, #1
 800711a:	2300      	moveq	r3, #0
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e021      	b.n	8007194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	0c1b      	lsrs	r3, r3, #16
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d10c      	bne.n	8007174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	43da      	mvns	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	4013      	ands	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf14      	ite	ne
 800716c:	2301      	movne	r3, #1
 800716e:	2300      	moveq	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e00b      	b.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	43da      	mvns	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4013      	ands	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	bf14      	ite	ne
 8007186:	2301      	movne	r3, #1
 8007188:	2300      	moveq	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	f47f af6d 	bne.w	800706c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071a8:	e034      	b.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8e3 	bl	8007376 <I2C_IsAcknowledgeFailed>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e034      	b.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c0:	d028      	beq.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fe fe33 	bl	8005e2c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11d      	bne.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e2:	2b80      	cmp	r3, #128	@ 0x80
 80071e4:	d016      	beq.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e007      	b.n	8007224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800721e:	2b80      	cmp	r3, #128	@ 0x80
 8007220:	d1c3      	bne.n	80071aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007238:	e034      	b.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f89b 	bl	8007376 <I2C_IsAcknowledgeFailed>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e034      	b.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d028      	beq.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fe fdeb 	bl	8005e2c <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11d      	bne.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b04      	cmp	r3, #4
 8007274:	d016      	beq.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	f043 0220 	orr.w	r2, r3, #32
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e007      	b.n	80072b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d1c3      	bne.n	800723a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072c8:	e049      	b.n	800735e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	f003 0310 	and.w	r3, r3, #16
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d119      	bne.n	800730c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0210 	mvn.w	r2, #16
 80072e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e030      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730c:	f7fe fd8e 	bl	8005e2c <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11d      	bne.n	800735e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732c:	2b40      	cmp	r3, #64	@ 0x40
 800732e:	d016      	beq.n	800735e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f043 0220 	orr.w	r2, r3, #32
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e007      	b.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	d1ae      	bne.n	80072ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800738c:	d11b      	bne.n	80073c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007396:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e267      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d075      	beq.n	80074de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073f2:	4b88      	ldr	r3, [pc, #544]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 030c 	and.w	r3, r3, #12
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d00c      	beq.n	8007418 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073fe:	4b85      	ldr	r3, [pc, #532]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007406:	2b08      	cmp	r3, #8
 8007408:	d112      	bne.n	8007430 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800740a:	4b82      	ldr	r3, [pc, #520]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007416:	d10b      	bne.n	8007430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007418:	4b7e      	ldr	r3, [pc, #504]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d05b      	beq.n	80074dc <HAL_RCC_OscConfig+0x108>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d157      	bne.n	80074dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e242      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007438:	d106      	bne.n	8007448 <HAL_RCC_OscConfig+0x74>
 800743a:	4b76      	ldr	r3, [pc, #472]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a75      	ldr	r2, [pc, #468]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	e01d      	b.n	8007484 <HAL_RCC_OscConfig+0xb0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007450:	d10c      	bne.n	800746c <HAL_RCC_OscConfig+0x98>
 8007452:	4b70      	ldr	r3, [pc, #448]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a6f      	ldr	r2, [pc, #444]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	4b6d      	ldr	r3, [pc, #436]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a6c      	ldr	r2, [pc, #432]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	e00b      	b.n	8007484 <HAL_RCC_OscConfig+0xb0>
 800746c:	4b69      	ldr	r3, [pc, #420]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a68      	ldr	r2, [pc, #416]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	4b66      	ldr	r3, [pc, #408]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a65      	ldr	r2, [pc, #404]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 800747e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d013      	beq.n	80074b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800748c:	f7fe fcce 	bl	8005e2c <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007494:	f7fe fcca 	bl	8005e2c <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b64      	cmp	r3, #100	@ 0x64
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e207      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0xc0>
 80074b2:	e014      	b.n	80074de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b4:	f7fe fcba 	bl	8005e2c <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074bc:	f7fe fcb6 	bl	8005e2c <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b64      	cmp	r3, #100	@ 0x64
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e1f3      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ce:	4b51      	ldr	r3, [pc, #324]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0xe8>
 80074da:	e000      	b.n	80074de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d063      	beq.n	80075b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074f6:	4b47      	ldr	r3, [pc, #284]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d11c      	bne.n	800753c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007502:	4b44      	ldr	r3, [pc, #272]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d116      	bne.n	800753c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800750e:	4b41      	ldr	r3, [pc, #260]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_RCC_OscConfig+0x152>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d001      	beq.n	8007526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e1c7      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007526:	4b3b      	ldr	r3, [pc, #236]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4937      	ldr	r1, [pc, #220]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007536:	4313      	orrs	r3, r2
 8007538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800753a:	e03a      	b.n	80075b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d020      	beq.n	8007586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007544:	4b34      	ldr	r3, [pc, #208]	@ (8007618 <HAL_RCC_OscConfig+0x244>)
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754a:	f7fe fc6f 	bl	8005e2c <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007550:	e008      	b.n	8007564 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007552:	f7fe fc6b 	bl	8005e2c <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e1a8      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007564:	4b2b      	ldr	r3, [pc, #172]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f0      	beq.n	8007552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007570:	4b28      	ldr	r3, [pc, #160]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4925      	ldr	r1, [pc, #148]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 8007580:	4313      	orrs	r3, r2
 8007582:	600b      	str	r3, [r1, #0]
 8007584:	e015      	b.n	80075b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <HAL_RCC_OscConfig+0x244>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758c:	f7fe fc4e 	bl	8005e2c <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007594:	f7fe fc4a 	bl	8005e2c <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e187      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f0      	bne.n	8007594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d036      	beq.n	800762c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075c6:	4b15      	ldr	r3, [pc, #84]	@ (800761c <HAL_RCC_OscConfig+0x248>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075cc:	f7fe fc2e 	bl	8005e2c <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075d4:	f7fe fc2a 	bl	8005e2c <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e167      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007614 <HAL_RCC_OscConfig+0x240>)
 80075e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f0      	beq.n	80075d4 <HAL_RCC_OscConfig+0x200>
 80075f2:	e01b      	b.n	800762c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075f4:	4b09      	ldr	r3, [pc, #36]	@ (800761c <HAL_RCC_OscConfig+0x248>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075fa:	f7fe fc17 	bl	8005e2c <HAL_GetTick>
 80075fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007600:	e00e      	b.n	8007620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007602:	f7fe fc13 	bl	8005e2c <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d907      	bls.n	8007620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e150      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
 8007614:	40023800 	.word	0x40023800
 8007618:	42470000 	.word	0x42470000
 800761c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007620:	4b88      	ldr	r3, [pc, #544]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1ea      	bne.n	8007602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8097 	beq.w	8007768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800763e:	4b81      	ldr	r3, [pc, #516]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10f      	bne.n	800766a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	60bb      	str	r3, [r7, #8]
 800764e:	4b7d      	ldr	r3, [pc, #500]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	4a7c      	ldr	r2, [pc, #496]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007658:	6413      	str	r3, [r2, #64]	@ 0x40
 800765a:	4b7a      	ldr	r3, [pc, #488]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800765e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007662:	60bb      	str	r3, [r7, #8]
 8007664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800766a:	4b77      	ldr	r3, [pc, #476]	@ (8007848 <HAL_RCC_OscConfig+0x474>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007672:	2b00      	cmp	r3, #0
 8007674:	d118      	bne.n	80076a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007676:	4b74      	ldr	r3, [pc, #464]	@ (8007848 <HAL_RCC_OscConfig+0x474>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a73      	ldr	r2, [pc, #460]	@ (8007848 <HAL_RCC_OscConfig+0x474>)
 800767c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007682:	f7fe fbd3 	bl	8005e2c <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768a:	f7fe fbcf 	bl	8005e2c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e10c      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800769c:	4b6a      	ldr	r3, [pc, #424]	@ (8007848 <HAL_RCC_OscConfig+0x474>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d106      	bne.n	80076be <HAL_RCC_OscConfig+0x2ea>
 80076b0:	4b64      	ldr	r3, [pc, #400]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b4:	4a63      	ldr	r2, [pc, #396]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80076bc:	e01c      	b.n	80076f8 <HAL_RCC_OscConfig+0x324>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCC_OscConfig+0x30c>
 80076c6:	4b5f      	ldr	r3, [pc, #380]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ca:	4a5e      	ldr	r2, [pc, #376]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076cc:	f043 0304 	orr.w	r3, r3, #4
 80076d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80076de:	e00b      	b.n	80076f8 <HAL_RCC_OscConfig+0x324>
 80076e0:	4b58      	ldr	r3, [pc, #352]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e4:	4a57      	ldr	r2, [pc, #348]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ec:	4b55      	ldr	r3, [pc, #340]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f0:	4a54      	ldr	r2, [pc, #336]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80076f2:	f023 0304 	bic.w	r3, r3, #4
 80076f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d015      	beq.n	800772c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007700:	f7fe fb94 	bl	8005e2c <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007706:	e00a      	b.n	800771e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007708:	f7fe fb90 	bl	8005e2c <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e0cb      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800771e:	4b49      	ldr	r3, [pc, #292]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0ee      	beq.n	8007708 <HAL_RCC_OscConfig+0x334>
 800772a:	e014      	b.n	8007756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800772c:	f7fe fb7e 	bl	8005e2c <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007732:	e00a      	b.n	800774a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007734:	f7fe fb7a 	bl	8005e2c <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007742:	4293      	cmp	r3, r2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e0b5      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800774a:	4b3e      	ldr	r3, [pc, #248]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1ee      	bne.n	8007734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d105      	bne.n	8007768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800775c:	4b39      	ldr	r3, [pc, #228]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 800775e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007760:	4a38      	ldr	r2, [pc, #224]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007766:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80a1 	beq.w	80078b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007772:	4b34      	ldr	r3, [pc, #208]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b08      	cmp	r3, #8
 800777c:	d05c      	beq.n	8007838 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d141      	bne.n	800780a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007786:	4b31      	ldr	r3, [pc, #196]	@ (800784c <HAL_RCC_OscConfig+0x478>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778c:	f7fe fb4e 	bl	8005e2c <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007794:	f7fe fb4a 	bl	8005e2c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e087      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a6:	4b27      	ldr	r3, [pc, #156]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69da      	ldr	r2, [r3, #28]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	019b      	lsls	r3, r3, #6
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	3b01      	subs	r3, #1
 80077cc:	041b      	lsls	r3, r3, #16
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	061b      	lsls	r3, r3, #24
 80077d6:	491b      	ldr	r1, [pc, #108]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077dc:	4b1b      	ldr	r3, [pc, #108]	@ (800784c <HAL_RCC_OscConfig+0x478>)
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e2:	f7fe fb23 	bl	8005e2c <HAL_GetTick>
 80077e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077ea:	f7fe fb1f 	bl	8005e2c <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e05c      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077fc:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0f0      	beq.n	80077ea <HAL_RCC_OscConfig+0x416>
 8007808:	e054      	b.n	80078b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780a:	4b10      	ldr	r3, [pc, #64]	@ (800784c <HAL_RCC_OscConfig+0x478>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fe fb0c 	bl	8005e2c <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007818:	f7fe fb08 	bl	8005e2c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e045      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782a:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <HAL_RCC_OscConfig+0x470>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0x444>
 8007836:	e03d      	b.n	80078b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d107      	bne.n	8007850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e038      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
 8007844:	40023800 	.word	0x40023800
 8007848:	40007000 	.word	0x40007000
 800784c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007850:	4b1b      	ldr	r3, [pc, #108]	@ (80078c0 <HAL_RCC_OscConfig+0x4ec>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d028      	beq.n	80078b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007868:	429a      	cmp	r2, r3
 800786a:	d121      	bne.n	80078b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007876:	429a      	cmp	r2, r3
 8007878:	d11a      	bne.n	80078b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007880:	4013      	ands	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007888:	4293      	cmp	r3, r2
 800788a:	d111      	bne.n	80078b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	3b01      	subs	r3, #1
 800789a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800789c:	429a      	cmp	r2, r3
 800789e:	d107      	bne.n	80078b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d001      	beq.n	80078b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40023800 	.word	0x40023800

080078c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e0cc      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078d8:	4b68      	ldr	r3, [pc, #416]	@ (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d90c      	bls.n	8007900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e6:	4b65      	ldr	r3, [pc, #404]	@ (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ee:	4b63      	ldr	r3, [pc, #396]	@ (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0b8      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d020      	beq.n	800794e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007918:	4b59      	ldr	r3, [pc, #356]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4a58      	ldr	r2, [pc, #352]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007922:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007930:	4b53      	ldr	r3, [pc, #332]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a52      	ldr	r2, [pc, #328]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800793a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793c:	4b50      	ldr	r3, [pc, #320]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	494d      	ldr	r1, [pc, #308]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800794a:	4313      	orrs	r3, r2
 800794c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d044      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d107      	bne.n	8007972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007962:	4b47      	ldr	r3, [pc, #284]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d119      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e07f      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d003      	beq.n	8007982 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800797e:	2b03      	cmp	r3, #3
 8007980:	d107      	bne.n	8007992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007982:	4b3f      	ldr	r3, [pc, #252]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e06f      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007992:	4b3b      	ldr	r3, [pc, #236]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e067      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079a2:	4b37      	ldr	r3, [pc, #220]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f023 0203 	bic.w	r2, r3, #3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4934      	ldr	r1, [pc, #208]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079b4:	f7fe fa3a 	bl	8005e2c <HAL_GetTick>
 80079b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ba:	e00a      	b.n	80079d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079bc:	f7fe fa36 	bl	8005e2c <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e04f      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d2:	4b2b      	ldr	r3, [pc, #172]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 020c 	and.w	r2, r3, #12
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d1eb      	bne.n	80079bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079e4:	4b25      	ldr	r3, [pc, #148]	@ (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d20c      	bcs.n	8007a0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f2:	4b22      	ldr	r3, [pc, #136]	@ (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b20      	ldr	r3, [pc, #128]	@ (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e032      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a18:	4b19      	ldr	r3, [pc, #100]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	4916      	ldr	r1, [pc, #88]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a36:	4b12      	ldr	r3, [pc, #72]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	490e      	ldr	r1, [pc, #56]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a4a:	f000 f821 	bl	8007a90 <HAL_RCC_GetSysClockFreq>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	4b0b      	ldr	r3, [pc, #44]	@ (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	490a      	ldr	r1, [pc, #40]	@ (8007a84 <HAL_RCC_ClockConfig+0x1c0>)
 8007a5c:	5ccb      	ldrb	r3, [r1, r3]
 8007a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a62:	4a09      	ldr	r2, [pc, #36]	@ (8007a88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <HAL_RCC_ClockConfig+0x1c8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe f99a 	bl	8005da4 <HAL_InitTick>

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40023c00 	.word	0x40023c00
 8007a80:	40023800 	.word	0x40023800
 8007a84:	0800f5c0 	.word	0x0800f5c0
 8007a88:	20000098 	.word	0x20000098
 8007a8c:	2000009c 	.word	0x2000009c

08007a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a94:	b090      	sub	sp, #64	@ 0x40
 8007a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aa8:	4b59      	ldr	r3, [pc, #356]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 030c 	and.w	r3, r3, #12
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d00d      	beq.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8007ab4:	2b08      	cmp	r3, #8
 8007ab6:	f200 80a1 	bhi.w	8007bfc <HAL_RCC_GetSysClockFreq+0x16c>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d003      	beq.n	8007aca <HAL_RCC_GetSysClockFreq+0x3a>
 8007ac2:	e09b      	b.n	8007bfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ac4:	4b53      	ldr	r3, [pc, #332]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ac8:	e09b      	b.n	8007c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007aca:	4b53      	ldr	r3, [pc, #332]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ace:	e098      	b.n	8007c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ad8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ada:	4b4d      	ldr	r3, [pc, #308]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d028      	beq.n	8007b38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	099b      	lsrs	r3, r3, #6
 8007aec:	2200      	movs	r2, #0
 8007aee:	623b      	str	r3, [r7, #32]
 8007af0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007af8:	2100      	movs	r1, #0
 8007afa:	4b47      	ldr	r3, [pc, #284]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007afc:	fb03 f201 	mul.w	r2, r3, r1
 8007b00:	2300      	movs	r3, #0
 8007b02:	fb00 f303 	mul.w	r3, r0, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	4a43      	ldr	r2, [pc, #268]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b0a:	fba0 1202 	umull	r1, r2, r0, r2
 8007b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b10:	460a      	mov	r2, r1
 8007b12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b16:	4413      	add	r3, r2
 8007b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	61fa      	str	r2, [r7, #28]
 8007b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007b2a:	f7f9 f8ad 	bl	8000c88 <__aeabi_uldivmod>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4613      	mov	r3, r2
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b36:	e053      	b.n	8007be0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b38:	4b35      	ldr	r3, [pc, #212]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	099b      	lsrs	r3, r3, #6
 8007b3e:	2200      	movs	r2, #0
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	617a      	str	r2, [r7, #20]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b4a:	f04f 0b00 	mov.w	fp, #0
 8007b4e:	4652      	mov	r2, sl
 8007b50:	465b      	mov	r3, fp
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f04f 0100 	mov.w	r1, #0
 8007b5a:	0159      	lsls	r1, r3, #5
 8007b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b60:	0150      	lsls	r0, r2, #5
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	ebb2 080a 	subs.w	r8, r2, sl
 8007b6a:	eb63 090b 	sbc.w	r9, r3, fp
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	f04f 0300 	mov.w	r3, #0
 8007b76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007b7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b82:	ebb2 0408 	subs.w	r4, r2, r8
 8007b86:	eb63 0509 	sbc.w	r5, r3, r9
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	00eb      	lsls	r3, r5, #3
 8007b94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b98:	00e2      	lsls	r2, r4, #3
 8007b9a:	4614      	mov	r4, r2
 8007b9c:	461d      	mov	r5, r3
 8007b9e:	eb14 030a 	adds.w	r3, r4, sl
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	eb45 030b 	adc.w	r3, r5, fp
 8007ba8:	607b      	str	r3, [r7, #4]
 8007baa:	f04f 0200 	mov.w	r2, #0
 8007bae:	f04f 0300 	mov.w	r3, #0
 8007bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	028b      	lsls	r3, r1, #10
 8007bba:	4621      	mov	r1, r4
 8007bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	028a      	lsls	r2, r1, #10
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bca:	2200      	movs	r2, #0
 8007bcc:	60bb      	str	r3, [r7, #8]
 8007bce:	60fa      	str	r2, [r7, #12]
 8007bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bd4:	f7f9 f858 	bl	8000c88 <__aeabi_uldivmod>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4613      	mov	r3, r2
 8007bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007be0:	4b0b      	ldr	r3, [pc, #44]	@ (8007c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	3301      	adds	r3, #1
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007bf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bfa:	e002      	b.n	8007c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007bfc:	4b05      	ldr	r3, [pc, #20]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8007bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3740      	adds	r7, #64	@ 0x40
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c0e:	bf00      	nop
 8007c10:	40023800 	.word	0x40023800
 8007c14:	00f42400 	.word	0x00f42400
 8007c18:	017d7840 	.word	0x017d7840

08007c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c20:	4b03      	ldr	r3, [pc, #12]	@ (8007c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c22:	681b      	ldr	r3, [r3, #0]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20000098 	.word	0x20000098

08007c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c38:	f7ff fff0 	bl	8007c1c <HAL_RCC_GetHCLKFreq>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	0a9b      	lsrs	r3, r3, #10
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	4903      	ldr	r1, [pc, #12]	@ (8007c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c4a:	5ccb      	ldrb	r3, [r1, r3]
 8007c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	40023800 	.word	0x40023800
 8007c58:	0800f5d0 	.word	0x0800f5d0

08007c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c60:	f7ff ffdc 	bl	8007c1c <HAL_RCC_GetHCLKFreq>
 8007c64:	4602      	mov	r2, r0
 8007c66:	4b05      	ldr	r3, [pc, #20]	@ (8007c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	0b5b      	lsrs	r3, r3, #13
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	4903      	ldr	r1, [pc, #12]	@ (8007c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c72:	5ccb      	ldrb	r3, [r1, r3]
 8007c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	0800f5d0 	.word	0x0800f5d0

08007c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e041      	b.n	8007d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fd fdd2 	bl	8005854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	f000 fc0c 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b082      	sub	sp, #8
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e041      	b.n	8007db8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f839 	bl	8007dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4610      	mov	r0, r2
 8007d62:	f000 fbbd 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_TIM_PWM_Start+0x24>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf14      	ite	ne
 8007df0:	2301      	movne	r3, #1
 8007df2:	2300      	moveq	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e022      	b.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b04      	cmp	r3, #4
 8007dfc:	d109      	bne.n	8007e12 <HAL_TIM_PWM_Start+0x3e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	bf14      	ite	ne
 8007e0a:	2301      	movne	r3, #1
 8007e0c:	2300      	moveq	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	e015      	b.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d109      	bne.n	8007e2c <HAL_TIM_PWM_Start+0x58>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e008      	b.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e07c      	b.n	8007f40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <HAL_TIM_PWM_Start+0x82>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e54:	e013      	b.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b04      	cmp	r3, #4
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e64:	e00b      	b.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_PWM_Start+0xa2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e74:	e003      	b.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2201      	movs	r2, #1
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fe20 	bl	8008acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a2d      	ldr	r2, [pc, #180]	@ (8007f48 <HAL_TIM_PWM_Start+0x174>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d004      	beq.n	8007ea0 <HAL_TIM_PWM_Start+0xcc>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8007f4c <HAL_TIM_PWM_Start+0x178>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d101      	bne.n	8007ea4 <HAL_TIM_PWM_Start+0xd0>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <HAL_TIM_PWM_Start+0xd2>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a22      	ldr	r2, [pc, #136]	@ (8007f48 <HAL_TIM_PWM_Start+0x174>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ecc:	d01d      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f50 <HAL_TIM_PWM_Start+0x17c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d018      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f54 <HAL_TIM_PWM_Start+0x180>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f58 <HAL_TIM_PWM_Start+0x184>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a16      	ldr	r2, [pc, #88]	@ (8007f4c <HAL_TIM_PWM_Start+0x178>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a18      	ldr	r2, [pc, #96]	@ (8007f5c <HAL_TIM_PWM_Start+0x188>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_TIM_PWM_Start+0x136>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a16      	ldr	r2, [pc, #88]	@ (8007f60 <HAL_TIM_PWM_Start+0x18c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d111      	bne.n	8007f2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b06      	cmp	r3, #6
 8007f1a:	d010      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	e007      	b.n	8007f3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0201 	orr.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	40000400 	.word	0x40000400
 8007f54:	40000800 	.word	0x40000800
 8007f58:	40000c00 	.word	0x40000c00
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40001800 	.word	0x40001800

08007f64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e097      	b.n	80080a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7fd fb79 	bl	8005684 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2202      	movs	r2, #2
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f000 fa91 	bl	80084e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe6:	f023 0303 	bic.w	r3, r3, #3
 8007fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008004:	f023 030c 	bic.w	r3, r3, #12
 8008008:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008010:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	021b      	lsls	r3, r3, #8
 8008020:	4313      	orrs	r3, r2
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	011a      	lsls	r2, r3, #4
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	031b      	lsls	r3, r3, #12
 8008034:	4313      	orrs	r3, r2
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008042:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800804a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	011b      	lsls	r3, r3, #4
 8008056:	4313      	orrs	r3, r2
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80080d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d110      	bne.n	8008102 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d102      	bne.n	80080ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80080e6:	7b7b      	ldrb	r3, [r7, #13]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d001      	beq.n	80080f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e069      	b.n	80081c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008100:	e031      	b.n	8008166 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b04      	cmp	r3, #4
 8008106:	d110      	bne.n	800812a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d102      	bne.n	8008114 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800810e:	7b3b      	ldrb	r3, [r7, #12]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d001      	beq.n	8008118 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e055      	b.n	80081c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008128:	e01d      	b.n	8008166 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d108      	bne.n	8008142 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d105      	bne.n	8008142 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008136:	7b7b      	ldrb	r3, [r7, #13]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d102      	bne.n	8008142 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800813c:	7b3b      	ldrb	r3, [r7, #12]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d001      	beq.n	8008146 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e03e      	b.n	80081c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <HAL_TIM_Encoder_Start+0xc4>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b04      	cmp	r3, #4
 8008170:	d008      	beq.n	8008184 <HAL_TIM_Encoder_Start+0xd4>
 8008172:	e00f      	b.n	8008194 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fca5 	bl	8008acc <TIM_CCxChannelCmd>
      break;
 8008182:	e016      	b.n	80081b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2201      	movs	r2, #1
 800818a:	2104      	movs	r1, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fc9d 	bl	8008acc <TIM_CCxChannelCmd>
      break;
 8008192:	e00e      	b.n	80081b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2201      	movs	r2, #1
 800819a:	2100      	movs	r1, #0
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fc95 	bl	8008acc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2201      	movs	r2, #1
 80081a8:	2104      	movs	r1, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fc8e 	bl	8008acc <TIM_CCxChannelCmd>
      break;
 80081b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e0ae      	b.n	8008348 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b0c      	cmp	r3, #12
 80081f6:	f200 809f 	bhi.w	8008338 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008235 	.word	0x08008235
 8008204:	08008339 	.word	0x08008339
 8008208:	08008339 	.word	0x08008339
 800820c:	08008339 	.word	0x08008339
 8008210:	08008275 	.word	0x08008275
 8008214:	08008339 	.word	0x08008339
 8008218:	08008339 	.word	0x08008339
 800821c:	08008339 	.word	0x08008339
 8008220:	080082b7 	.word	0x080082b7
 8008224:	08008339 	.word	0x08008339
 8008228:	08008339 	.word	0x08008339
 800822c:	08008339 	.word	0x08008339
 8008230:	080082f7 	.word	0x080082f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f9fc 	bl	8008638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0208 	orr.w	r2, r2, #8
 800824e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0204 	bic.w	r2, r2, #4
 800825e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691a      	ldr	r2, [r3, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	619a      	str	r2, [r3, #24]
      break;
 8008272:	e064      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fa4c 	bl	8008718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800828e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800829e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6999      	ldr	r1, [r3, #24]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	021a      	lsls	r2, r3, #8
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	619a      	str	r2, [r3, #24]
      break;
 80082b4:	e043      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 faa1 	bl	8008804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0208 	orr.w	r2, r2, #8
 80082d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0204 	bic.w	r2, r2, #4
 80082e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69d9      	ldr	r1, [r3, #28]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	61da      	str	r2, [r3, #28]
      break;
 80082f4:	e023      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 faf5 	bl	80088ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69d9      	ldr	r1, [r3, #28]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	021a      	lsls	r2, r3, #8
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	61da      	str	r2, [r3, #28]
      break;
 8008336:	e002      	b.n	800833e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	75fb      	strb	r3, [r7, #23]
      break;
 800833c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_TIM_ConfigClockSource+0x1c>
 8008368:	2302      	movs	r3, #2
 800836a:	e0b4      	b.n	80084d6 <HAL_TIM_ConfigClockSource+0x186>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800838a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a4:	d03e      	beq.n	8008424 <HAL_TIM_ConfigClockSource+0xd4>
 80083a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083aa:	f200 8087 	bhi.w	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	f000 8086 	beq.w	80084c2 <HAL_TIM_ConfigClockSource+0x172>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ba:	d87f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083bc:	2b70      	cmp	r3, #112	@ 0x70
 80083be:	d01a      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xa6>
 80083c0:	2b70      	cmp	r3, #112	@ 0x70
 80083c2:	d87b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b60      	cmp	r3, #96	@ 0x60
 80083c6:	d050      	beq.n	800846a <HAL_TIM_ConfigClockSource+0x11a>
 80083c8:	2b60      	cmp	r3, #96	@ 0x60
 80083ca:	d877      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b50      	cmp	r3, #80	@ 0x50
 80083ce:	d03c      	beq.n	800844a <HAL_TIM_ConfigClockSource+0xfa>
 80083d0:	2b50      	cmp	r3, #80	@ 0x50
 80083d2:	d873      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	d058      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x13a>
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d86f      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b30      	cmp	r3, #48	@ 0x30
 80083de:	d064      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e0:	2b30      	cmp	r3, #48	@ 0x30
 80083e2:	d86b      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d060      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d867      	bhi.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d05c      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d05a      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0x15a>
 80083f4:	e062      	b.n	80084bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008406:	f000 fb41 	bl	8008a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	609a      	str	r2, [r3, #8]
      break;
 8008422:	e04f      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008434:	f000 fb2a 	bl	8008a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008446:	609a      	str	r2, [r3, #8]
      break;
 8008448:	e03c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008456:	461a      	mov	r2, r3
 8008458:	f000 fa9e 	bl	8008998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2150      	movs	r1, #80	@ 0x50
 8008462:	4618      	mov	r0, r3
 8008464:	f000 faf7 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 8008468:	e02c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008476:	461a      	mov	r2, r3
 8008478:	f000 fabd 	bl	80089f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2160      	movs	r1, #96	@ 0x60
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fae7 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 8008488:	e01c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008496:	461a      	mov	r2, r3
 8008498:	f000 fa7e 	bl	8008998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2140      	movs	r1, #64	@ 0x40
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fad7 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 80084a8:	e00c      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f000 face 	bl	8008a56 <TIM_ITRx_SetConfig>
      break;
 80084ba:	e003      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
      break;
 80084c0:	e000      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a46      	ldr	r2, [pc, #280]	@ (800860c <TIM_Base_SetConfig+0x12c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a43      	ldr	r2, [pc, #268]	@ (8008610 <TIM_Base_SetConfig+0x130>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a42      	ldr	r2, [pc, #264]	@ (8008614 <TIM_Base_SetConfig+0x134>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a41      	ldr	r2, [pc, #260]	@ (8008618 <TIM_Base_SetConfig+0x138>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a40      	ldr	r2, [pc, #256]	@ (800861c <TIM_Base_SetConfig+0x13c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d108      	bne.n	8008532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a35      	ldr	r2, [pc, #212]	@ (800860c <TIM_Base_SetConfig+0x12c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d02b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008540:	d027      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a32      	ldr	r2, [pc, #200]	@ (8008610 <TIM_Base_SetConfig+0x130>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d023      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a31      	ldr	r2, [pc, #196]	@ (8008614 <TIM_Base_SetConfig+0x134>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a30      	ldr	r2, [pc, #192]	@ (8008618 <TIM_Base_SetConfig+0x138>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a2f      	ldr	r2, [pc, #188]	@ (800861c <TIM_Base_SetConfig+0x13c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d017      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a2e      	ldr	r2, [pc, #184]	@ (8008620 <TIM_Base_SetConfig+0x140>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a2d      	ldr	r2, [pc, #180]	@ (8008624 <TIM_Base_SetConfig+0x144>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a2c      	ldr	r2, [pc, #176]	@ (8008628 <TIM_Base_SetConfig+0x148>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a2b      	ldr	r2, [pc, #172]	@ (800862c <TIM_Base_SetConfig+0x14c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a2a      	ldr	r2, [pc, #168]	@ (8008630 <TIM_Base_SetConfig+0x150>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a29      	ldr	r2, [pc, #164]	@ (8008634 <TIM_Base_SetConfig+0x154>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d108      	bne.n	80085a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a10      	ldr	r2, [pc, #64]	@ (800860c <TIM_Base_SetConfig+0x12c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a12      	ldr	r2, [pc, #72]	@ (800861c <TIM_Base_SetConfig+0x13c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d105      	bne.n	80085fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f023 0201 	bic.w	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	611a      	str	r2, [r3, #16]
  }
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000
 8008610:	40000400 	.word	0x40000400
 8008614:	40000800 	.word	0x40000800
 8008618:	40000c00 	.word	0x40000c00
 800861c:	40010400 	.word	0x40010400
 8008620:	40014000 	.word	0x40014000
 8008624:	40014400 	.word	0x40014400
 8008628:	40014800 	.word	0x40014800
 800862c:	40001800 	.word	0x40001800
 8008630:	40001c00 	.word	0x40001c00
 8008634:	40002000 	.word	0x40002000

08008638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	f023 0201 	bic.w	r2, r3, #1
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 0303 	bic.w	r3, r3, #3
 800866e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 0302 	bic.w	r3, r3, #2
 8008680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	4313      	orrs	r3, r2
 800868a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a20      	ldr	r2, [pc, #128]	@ (8008710 <TIM_OC1_SetConfig+0xd8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d003      	beq.n	800869c <TIM_OC1_SetConfig+0x64>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <TIM_OC1_SetConfig+0xdc>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d10c      	bne.n	80086b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f023 0308 	bic.w	r3, r3, #8
 80086a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f023 0304 	bic.w	r3, r3, #4
 80086b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a15      	ldr	r2, [pc, #84]	@ (8008710 <TIM_OC1_SetConfig+0xd8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d003      	beq.n	80086c6 <TIM_OC1_SetConfig+0x8e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a14      	ldr	r2, [pc, #80]	@ (8008714 <TIM_OC1_SetConfig+0xdc>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d111      	bne.n	80086ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4313      	orrs	r3, r2
 80086de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	621a      	str	r2, [r3, #32]
}
 8008704:	bf00      	nop
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	40010000 	.word	0x40010000
 8008714:	40010400 	.word	0x40010400

08008718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	f023 0210 	bic.w	r2, r3, #16
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800874e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	021b      	lsls	r3, r3, #8
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0320 	bic.w	r3, r3, #32
 8008762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a22      	ldr	r2, [pc, #136]	@ (80087fc <TIM_OC2_SetConfig+0xe4>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC2_SetConfig+0x68>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a21      	ldr	r2, [pc, #132]	@ (8008800 <TIM_OC2_SetConfig+0xe8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d10d      	bne.n	800879c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	4313      	orrs	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800879a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a17      	ldr	r2, [pc, #92]	@ (80087fc <TIM_OC2_SetConfig+0xe4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d003      	beq.n	80087ac <TIM_OC2_SetConfig+0x94>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a16      	ldr	r2, [pc, #88]	@ (8008800 <TIM_OC2_SetConfig+0xe8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d113      	bne.n	80087d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	621a      	str	r2, [r3, #32]
}
 80087ee:	bf00      	nop
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400

08008804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0303 	bic.w	r3, r3, #3
 800883a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800884c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a21      	ldr	r2, [pc, #132]	@ (80088e4 <TIM_OC3_SetConfig+0xe0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d003      	beq.n	800886a <TIM_OC3_SetConfig+0x66>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a20      	ldr	r2, [pc, #128]	@ (80088e8 <TIM_OC3_SetConfig+0xe4>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d10d      	bne.n	8008886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <TIM_OC3_SetConfig+0xe0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_OC3_SetConfig+0x92>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a15      	ldr	r2, [pc, #84]	@ (80088e8 <TIM_OC3_SetConfig+0xe4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d113      	bne.n	80088be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800889c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	621a      	str	r2, [r3, #32]
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40010400 	.word	0x40010400

080088ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800891a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	031b      	lsls	r3, r3, #12
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	4313      	orrs	r3, r2
 8008942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a12      	ldr	r2, [pc, #72]	@ (8008990 <TIM_OC4_SetConfig+0xa4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_OC4_SetConfig+0x68>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a11      	ldr	r2, [pc, #68]	@ (8008994 <TIM_OC4_SetConfig+0xa8>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d109      	bne.n	8008968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800895a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	019b      	lsls	r3, r3, #6
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40010000 	.word	0x40010000
 8008994:	40010400 	.word	0x40010400

08008998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f023 030a 	bic.w	r3, r3, #10
 80089d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a1b      	ldr	r3, [r3, #32]
 8008a0c:	f023 0210 	bic.w	r2, r3, #16
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	f043 0307 	orr.w	r3, r3, #7
 8008a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	609a      	str	r2, [r3, #8]
}
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	021a      	lsls	r2, r3, #8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	609a      	str	r2, [r3, #8]
}
 8008ac0:	bf00      	nop
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	2201      	movs	r2, #1
 8008ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a1a      	ldr	r2, [r3, #32]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	43db      	mvns	r3, r3
 8008aee:	401a      	ands	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6a1a      	ldr	r2, [r3, #32]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f003 031f 	and.w	r3, r3, #31
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	fa01 f303 	lsl.w	r3, r1, r3
 8008b04:	431a      	orrs	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	621a      	str	r2, [r3, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
	...

08008b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e05a      	b.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a21      	ldr	r2, [pc, #132]	@ (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d022      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b7c:	d01d      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d018      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1a      	ldr	r2, [pc, #104]	@ (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00e      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a18      	ldr	r2, [pc, #96]	@ (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d009      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a17      	ldr	r2, [pc, #92]	@ (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d004      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a15      	ldr	r2, [pc, #84]	@ (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40001800 	.word	0x40001800

08008c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e042      	b.n	8008ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fc ff20 	bl	8005a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2224      	movs	r2, #36	@ 0x24
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa09 	bl	800906c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	@ 0x28
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	603b      	str	r3, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d175      	bne.n	8008dbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <HAL_UART_Transmit+0x2c>
 8008cd6:	88fb      	ldrh	r3, [r7, #6]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e06e      	b.n	8008dbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2221      	movs	r2, #33	@ 0x21
 8008cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cee:	f7fd f89d 	bl	8005e2c <HAL_GetTick>
 8008cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	88fa      	ldrh	r2, [r7, #6]
 8008cf8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d08:	d108      	bne.n	8008d1c <HAL_UART_Transmit+0x6c>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d12:	2300      	movs	r3, #0
 8008d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	e003      	b.n	8008d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d24:	e02e      	b.n	8008d84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2180      	movs	r1, #128	@ 0x80
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f8df 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e03a      	b.n	8008dbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	3302      	adds	r3, #2
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	e007      	b.n	8008d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	781a      	ldrb	r2, [r3, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	3301      	adds	r3, #1
 8008d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1cb      	bne.n	8008d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2200      	movs	r2, #0
 8008d96:	2140      	movs	r1, #64	@ 0x40
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f8ab 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e006      	b.n	8008dbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e000      	b.n	8008dbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008dbc:	2302      	movs	r3, #2
  }
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b08a      	sub	sp, #40	@ 0x28
 8008dca:	af02      	add	r7, sp, #8
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	603b      	str	r3, [r7, #0]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	f040 8081 	bne.w	8008eea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <HAL_UART_Receive+0x2e>
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e079      	b.n	8008eec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2222      	movs	r2, #34	@ 0x22
 8008e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e0c:	f7fd f80e 	bl	8005e2c <HAL_GetTick>
 8008e10:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	88fa      	ldrh	r2, [r7, #6]
 8008e16:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	88fa      	ldrh	r2, [r7, #6]
 8008e1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e26:	d108      	bne.n	8008e3a <HAL_UART_Receive+0x74>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d104      	bne.n	8008e3a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	e003      	b.n	8008e42 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008e42:	e047      	b.n	8008ed4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2120      	movs	r1, #32
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f850 	bl	8008ef4 <UART_WaitOnFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d005      	beq.n	8008e66 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e042      	b.n	8008eec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10c      	bne.n	8008e86 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	3302      	adds	r3, #2
 8008e82:	61bb      	str	r3, [r7, #24]
 8008e84:	e01f      	b.n	8008ec6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e8e:	d007      	beq.n	8008ea0 <HAL_UART_Receive+0xda>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10a      	bne.n	8008eae <HAL_UART_Receive+0xe8>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d106      	bne.n	8008eae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	e008      	b.n	8008ec0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1b2      	bne.n	8008e44 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e000      	b.n	8008eec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008eea:	2302      	movs	r3, #2
  }
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3720      	adds	r7, #32
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	4613      	mov	r3, r2
 8008f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f04:	e03b      	b.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d037      	beq.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0e:	f7fc ff8d 	bl	8005e2c <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	6a3a      	ldr	r2, [r7, #32]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d302      	bcc.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e03a      	b.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	f003 0304 	and.w	r3, r3, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d023      	beq.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b80      	cmp	r3, #128	@ 0x80
 8008f3a:	d020      	beq.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b40      	cmp	r3, #64	@ 0x40
 8008f40:	d01d      	beq.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d116      	bne.n	8008f7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 f81d 	bl	8008fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2208      	movs	r2, #8
 8008f70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e00f      	b.n	8008f9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	4013      	ands	r3, r2
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	bf0c      	ite	eq
 8008f8e:	2301      	moveq	r3, #1
 8008f90:	2300      	movne	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	461a      	mov	r2, r3
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d0b4      	beq.n	8008f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b095      	sub	sp, #84	@ 0x54
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	330c      	adds	r3, #12
 8008fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008fce:	643a      	str	r2, [r7, #64]	@ 0x40
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f023 0301 	bic.w	r3, r3, #1
 8008ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3314      	adds	r3, #20
 8009000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901a:	2b01      	cmp	r3, #1
 800901c:	d119      	bne.n	8009052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	330c      	adds	r3, #12
 8009024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	60bb      	str	r3, [r7, #8]
   return(result);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f023 0310 	bic.w	r3, r3, #16
 8009034:	647b      	str	r3, [r7, #68]	@ 0x44
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	330c      	adds	r3, #12
 800903c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800903e:	61ba      	str	r2, [r7, #24]
 8009040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6979      	ldr	r1, [r7, #20]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	613b      	str	r3, [r7, #16]
   return(result);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e5      	bne.n	800901e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009060:	bf00      	nop
 8009062:	3754      	adds	r7, #84	@ 0x54
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800906c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009070:	b0c0      	sub	sp, #256	@ 0x100
 8009072:	af00      	add	r7, sp, #0
 8009074:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009088:	68d9      	ldr	r1, [r3, #12]
 800908a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	ea40 0301 	orr.w	r3, r0, r1
 8009094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	431a      	orrs	r2, r3
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090c4:	f021 010c 	bic.w	r1, r1, #12
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090d2:	430b      	orrs	r3, r1
 80090d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e6:	6999      	ldr	r1, [r3, #24]
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	ea40 0301 	orr.w	r3, r0, r1
 80090f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b8f      	ldr	r3, [pc, #572]	@ (8009338 <UART_SetConfig+0x2cc>)
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d005      	beq.n	800910c <UART_SetConfig+0xa0>
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	4b8d      	ldr	r3, [pc, #564]	@ (800933c <UART_SetConfig+0x2d0>)
 8009108:	429a      	cmp	r2, r3
 800910a:	d104      	bne.n	8009116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800910c:	f7fe fda6 	bl	8007c5c <HAL_RCC_GetPCLK2Freq>
 8009110:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009114:	e003      	b.n	800911e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009116:	f7fe fd8d 	bl	8007c34 <HAL_RCC_GetPCLK1Freq>
 800911a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800911e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009128:	f040 810c 	bne.w	8009344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800912c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009130:	2200      	movs	r2, #0
 8009132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009136:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800913a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800913e:	4622      	mov	r2, r4
 8009140:	462b      	mov	r3, r5
 8009142:	1891      	adds	r1, r2, r2
 8009144:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009146:	415b      	adcs	r3, r3
 8009148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800914a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800914e:	4621      	mov	r1, r4
 8009150:	eb12 0801 	adds.w	r8, r2, r1
 8009154:	4629      	mov	r1, r5
 8009156:	eb43 0901 	adc.w	r9, r3, r1
 800915a:	f04f 0200 	mov.w	r2, #0
 800915e:	f04f 0300 	mov.w	r3, #0
 8009162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800916a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800916e:	4690      	mov	r8, r2
 8009170:	4699      	mov	r9, r3
 8009172:	4623      	mov	r3, r4
 8009174:	eb18 0303 	adds.w	r3, r8, r3
 8009178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800917c:	462b      	mov	r3, r5
 800917e:	eb49 0303 	adc.w	r3, r9, r3
 8009182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009192:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800919a:	460b      	mov	r3, r1
 800919c:	18db      	adds	r3, r3, r3
 800919e:	653b      	str	r3, [r7, #80]	@ 0x50
 80091a0:	4613      	mov	r3, r2
 80091a2:	eb42 0303 	adc.w	r3, r2, r3
 80091a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80091a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091b0:	f7f7 fd6a 	bl	8000c88 <__aeabi_uldivmod>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4b61      	ldr	r3, [pc, #388]	@ (8009340 <UART_SetConfig+0x2d4>)
 80091ba:	fba3 2302 	umull	r2, r3, r3, r2
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	011c      	lsls	r4, r3, #4
 80091c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091d4:	4642      	mov	r2, r8
 80091d6:	464b      	mov	r3, r9
 80091d8:	1891      	adds	r1, r2, r2
 80091da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091dc:	415b      	adcs	r3, r3
 80091de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091e4:	4641      	mov	r1, r8
 80091e6:	eb12 0a01 	adds.w	sl, r2, r1
 80091ea:	4649      	mov	r1, r9
 80091ec:	eb43 0b01 	adc.w	fp, r3, r1
 80091f0:	f04f 0200 	mov.w	r2, #0
 80091f4:	f04f 0300 	mov.w	r3, #0
 80091f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009204:	4692      	mov	sl, r2
 8009206:	469b      	mov	fp, r3
 8009208:	4643      	mov	r3, r8
 800920a:	eb1a 0303 	adds.w	r3, sl, r3
 800920e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009212:	464b      	mov	r3, r9
 8009214:	eb4b 0303 	adc.w	r3, fp, r3
 8009218:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009228:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800922c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009230:	460b      	mov	r3, r1
 8009232:	18db      	adds	r3, r3, r3
 8009234:	643b      	str	r3, [r7, #64]	@ 0x40
 8009236:	4613      	mov	r3, r2
 8009238:	eb42 0303 	adc.w	r3, r2, r3
 800923c:	647b      	str	r3, [r7, #68]	@ 0x44
 800923e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009246:	f7f7 fd1f 	bl	8000c88 <__aeabi_uldivmod>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4611      	mov	r1, r2
 8009250:	4b3b      	ldr	r3, [pc, #236]	@ (8009340 <UART_SetConfig+0x2d4>)
 8009252:	fba3 2301 	umull	r2, r3, r3, r1
 8009256:	095b      	lsrs	r3, r3, #5
 8009258:	2264      	movs	r2, #100	@ 0x64
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	1acb      	subs	r3, r1, r3
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009266:	4b36      	ldr	r3, [pc, #216]	@ (8009340 <UART_SetConfig+0x2d4>)
 8009268:	fba3 2302 	umull	r2, r3, r3, r2
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009274:	441c      	add	r4, r3
 8009276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800927a:	2200      	movs	r2, #0
 800927c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009280:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	1891      	adds	r1, r2, r2
 800928e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009290:	415b      	adcs	r3, r3
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009298:	4641      	mov	r1, r8
 800929a:	1851      	adds	r1, r2, r1
 800929c:	6339      	str	r1, [r7, #48]	@ 0x30
 800929e:	4649      	mov	r1, r9
 80092a0:	414b      	adcs	r3, r1
 80092a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f04f 0300 	mov.w	r3, #0
 80092ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092b0:	4659      	mov	r1, fp
 80092b2:	00cb      	lsls	r3, r1, #3
 80092b4:	4651      	mov	r1, sl
 80092b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ba:	4651      	mov	r1, sl
 80092bc:	00ca      	lsls	r2, r1, #3
 80092be:	4610      	mov	r0, r2
 80092c0:	4619      	mov	r1, r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	4642      	mov	r2, r8
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092cc:	464b      	mov	r3, r9
 80092ce:	460a      	mov	r2, r1
 80092d0:	eb42 0303 	adc.w	r3, r2, r3
 80092d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092ec:	460b      	mov	r3, r1
 80092ee:	18db      	adds	r3, r3, r3
 80092f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092f2:	4613      	mov	r3, r2
 80092f4:	eb42 0303 	adc.w	r3, r2, r3
 80092f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009302:	f7f7 fcc1 	bl	8000c88 <__aeabi_uldivmod>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4b0d      	ldr	r3, [pc, #52]	@ (8009340 <UART_SetConfig+0x2d4>)
 800930c:	fba3 1302 	umull	r1, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	2164      	movs	r1, #100	@ 0x64
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	3332      	adds	r3, #50	@ 0x32
 800931e:	4a08      	ldr	r2, [pc, #32]	@ (8009340 <UART_SetConfig+0x2d4>)
 8009320:	fba2 2303 	umull	r2, r3, r2, r3
 8009324:	095b      	lsrs	r3, r3, #5
 8009326:	f003 0207 	and.w	r2, r3, #7
 800932a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4422      	add	r2, r4
 8009332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009334:	e106      	b.n	8009544 <UART_SetConfig+0x4d8>
 8009336:	bf00      	nop
 8009338:	40011000 	.word	0x40011000
 800933c:	40011400 	.word	0x40011400
 8009340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009348:	2200      	movs	r2, #0
 800934a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800934e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009356:	4642      	mov	r2, r8
 8009358:	464b      	mov	r3, r9
 800935a:	1891      	adds	r1, r2, r2
 800935c:	6239      	str	r1, [r7, #32]
 800935e:	415b      	adcs	r3, r3
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
 8009362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009366:	4641      	mov	r1, r8
 8009368:	1854      	adds	r4, r2, r1
 800936a:	4649      	mov	r1, r9
 800936c:	eb43 0501 	adc.w	r5, r3, r1
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	00eb      	lsls	r3, r5, #3
 800937a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800937e:	00e2      	lsls	r2, r4, #3
 8009380:	4614      	mov	r4, r2
 8009382:	461d      	mov	r5, r3
 8009384:	4643      	mov	r3, r8
 8009386:	18e3      	adds	r3, r4, r3
 8009388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800938c:	464b      	mov	r3, r9
 800938e:	eb45 0303 	adc.w	r3, r5, r3
 8009392:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	f04f 0300 	mov.w	r3, #0
 80093ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093b2:	4629      	mov	r1, r5
 80093b4:	008b      	lsls	r3, r1, #2
 80093b6:	4621      	mov	r1, r4
 80093b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093bc:	4621      	mov	r1, r4
 80093be:	008a      	lsls	r2, r1, #2
 80093c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093c4:	f7f7 fc60 	bl	8000c88 <__aeabi_uldivmod>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4b60      	ldr	r3, [pc, #384]	@ (8009550 <UART_SetConfig+0x4e4>)
 80093ce:	fba3 2302 	umull	r2, r3, r3, r2
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	011c      	lsls	r4, r3, #4
 80093d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	1891      	adds	r1, r2, r2
 80093ee:	61b9      	str	r1, [r7, #24]
 80093f0:	415b      	adcs	r3, r3
 80093f2:	61fb      	str	r3, [r7, #28]
 80093f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093f8:	4641      	mov	r1, r8
 80093fa:	1851      	adds	r1, r2, r1
 80093fc:	6139      	str	r1, [r7, #16]
 80093fe:	4649      	mov	r1, r9
 8009400:	414b      	adcs	r3, r1
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009410:	4659      	mov	r1, fp
 8009412:	00cb      	lsls	r3, r1, #3
 8009414:	4651      	mov	r1, sl
 8009416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800941a:	4651      	mov	r1, sl
 800941c:	00ca      	lsls	r2, r1, #3
 800941e:	4610      	mov	r0, r2
 8009420:	4619      	mov	r1, r3
 8009422:	4603      	mov	r3, r0
 8009424:	4642      	mov	r2, r8
 8009426:	189b      	adds	r3, r3, r2
 8009428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800942c:	464b      	mov	r3, r9
 800942e:	460a      	mov	r2, r1
 8009430:	eb42 0303 	adc.w	r3, r2, r3
 8009434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009442:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	f04f 0300 	mov.w	r3, #0
 800944c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009450:	4649      	mov	r1, r9
 8009452:	008b      	lsls	r3, r1, #2
 8009454:	4641      	mov	r1, r8
 8009456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800945a:	4641      	mov	r1, r8
 800945c:	008a      	lsls	r2, r1, #2
 800945e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009462:	f7f7 fc11 	bl	8000c88 <__aeabi_uldivmod>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4611      	mov	r1, r2
 800946c:	4b38      	ldr	r3, [pc, #224]	@ (8009550 <UART_SetConfig+0x4e4>)
 800946e:	fba3 2301 	umull	r2, r3, r3, r1
 8009472:	095b      	lsrs	r3, r3, #5
 8009474:	2264      	movs	r2, #100	@ 0x64
 8009476:	fb02 f303 	mul.w	r3, r2, r3
 800947a:	1acb      	subs	r3, r1, r3
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	3332      	adds	r3, #50	@ 0x32
 8009480:	4a33      	ldr	r2, [pc, #204]	@ (8009550 <UART_SetConfig+0x4e4>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800948c:	441c      	add	r4, r3
 800948e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009492:	2200      	movs	r2, #0
 8009494:	673b      	str	r3, [r7, #112]	@ 0x70
 8009496:	677a      	str	r2, [r7, #116]	@ 0x74
 8009498:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800949c:	4642      	mov	r2, r8
 800949e:	464b      	mov	r3, r9
 80094a0:	1891      	adds	r1, r2, r2
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	415b      	adcs	r3, r3
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094ac:	4641      	mov	r1, r8
 80094ae:	1851      	adds	r1, r2, r1
 80094b0:	6039      	str	r1, [r7, #0]
 80094b2:	4649      	mov	r1, r9
 80094b4:	414b      	adcs	r3, r1
 80094b6:	607b      	str	r3, [r7, #4]
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094c4:	4659      	mov	r1, fp
 80094c6:	00cb      	lsls	r3, r1, #3
 80094c8:	4651      	mov	r1, sl
 80094ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ce:	4651      	mov	r1, sl
 80094d0:	00ca      	lsls	r2, r1, #3
 80094d2:	4610      	mov	r0, r2
 80094d4:	4619      	mov	r1, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	4642      	mov	r2, r8
 80094da:	189b      	adds	r3, r3, r2
 80094dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094de:	464b      	mov	r3, r9
 80094e0:	460a      	mov	r2, r1
 80094e2:	eb42 0303 	adc.w	r3, r2, r3
 80094e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80094f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009500:	4649      	mov	r1, r9
 8009502:	008b      	lsls	r3, r1, #2
 8009504:	4641      	mov	r1, r8
 8009506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800950a:	4641      	mov	r1, r8
 800950c:	008a      	lsls	r2, r1, #2
 800950e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009512:	f7f7 fbb9 	bl	8000c88 <__aeabi_uldivmod>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <UART_SetConfig+0x4e4>)
 800951c:	fba3 1302 	umull	r1, r3, r3, r2
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	2164      	movs	r1, #100	@ 0x64
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	011b      	lsls	r3, r3, #4
 800952c:	3332      	adds	r3, #50	@ 0x32
 800952e:	4a08      	ldr	r2, [pc, #32]	@ (8009550 <UART_SetConfig+0x4e4>)
 8009530:	fba2 2303 	umull	r2, r3, r2, r3
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	f003 020f 	and.w	r2, r3, #15
 800953a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4422      	add	r2, r4
 8009542:	609a      	str	r2, [r3, #8]
}
 8009544:	bf00      	nop
 8009546:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800954a:	46bd      	mov	sp, r7
 800954c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009550:	51eb851f 	.word	0x51eb851f

08009554 <atof>:
 8009554:	2100      	movs	r1, #0
 8009556:	f000 be09 	b.w	800a16c <strtod>

0800955a <sulp>:
 800955a:	b570      	push	{r4, r5, r6, lr}
 800955c:	4604      	mov	r4, r0
 800955e:	460d      	mov	r5, r1
 8009560:	ec45 4b10 	vmov	d0, r4, r5
 8009564:	4616      	mov	r6, r2
 8009566:	f003 fe23 	bl	800d1b0 <__ulp>
 800956a:	ec51 0b10 	vmov	r0, r1, d0
 800956e:	b17e      	cbz	r6, 8009590 <sulp+0x36>
 8009570:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009574:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009578:	2b00      	cmp	r3, #0
 800957a:	dd09      	ble.n	8009590 <sulp+0x36>
 800957c:	051b      	lsls	r3, r3, #20
 800957e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009582:	2400      	movs	r4, #0
 8009584:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009588:	4622      	mov	r2, r4
 800958a:	462b      	mov	r3, r5
 800958c:	f7f7 f834 	bl	80005f8 <__aeabi_dmul>
 8009590:	ec41 0b10 	vmov	d0, r0, r1
 8009594:	bd70      	pop	{r4, r5, r6, pc}
	...

08009598 <_strtod_l>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	b09f      	sub	sp, #124	@ 0x7c
 800959e:	460c      	mov	r4, r1
 80095a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80095a2:	2200      	movs	r2, #0
 80095a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80095a6:	9005      	str	r0, [sp, #20]
 80095a8:	f04f 0a00 	mov.w	sl, #0
 80095ac:	f04f 0b00 	mov.w	fp, #0
 80095b0:	460a      	mov	r2, r1
 80095b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80095b4:	7811      	ldrb	r1, [r2, #0]
 80095b6:	292b      	cmp	r1, #43	@ 0x2b
 80095b8:	d04a      	beq.n	8009650 <_strtod_l+0xb8>
 80095ba:	d838      	bhi.n	800962e <_strtod_l+0x96>
 80095bc:	290d      	cmp	r1, #13
 80095be:	d832      	bhi.n	8009626 <_strtod_l+0x8e>
 80095c0:	2908      	cmp	r1, #8
 80095c2:	d832      	bhi.n	800962a <_strtod_l+0x92>
 80095c4:	2900      	cmp	r1, #0
 80095c6:	d03b      	beq.n	8009640 <_strtod_l+0xa8>
 80095c8:	2200      	movs	r2, #0
 80095ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80095cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80095ce:	782a      	ldrb	r2, [r5, #0]
 80095d0:	2a30      	cmp	r2, #48	@ 0x30
 80095d2:	f040 80b3 	bne.w	800973c <_strtod_l+0x1a4>
 80095d6:	786a      	ldrb	r2, [r5, #1]
 80095d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095dc:	2a58      	cmp	r2, #88	@ 0x58
 80095de:	d16e      	bne.n	80096be <_strtod_l+0x126>
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	4a8e      	ldr	r2, [pc, #568]	@ (8009824 <_strtod_l+0x28c>)
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095f0:	a919      	add	r1, sp, #100	@ 0x64
 80095f2:	f002 fecf 	bl	800c394 <__gethex>
 80095f6:	f010 060f 	ands.w	r6, r0, #15
 80095fa:	4604      	mov	r4, r0
 80095fc:	d005      	beq.n	800960a <_strtod_l+0x72>
 80095fe:	2e06      	cmp	r6, #6
 8009600:	d128      	bne.n	8009654 <_strtod_l+0xbc>
 8009602:	3501      	adds	r5, #1
 8009604:	2300      	movs	r3, #0
 8009606:	9519      	str	r5, [sp, #100]	@ 0x64
 8009608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800960a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800960c:	2b00      	cmp	r3, #0
 800960e:	f040 858e 	bne.w	800a12e <_strtod_l+0xb96>
 8009612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009614:	b1cb      	cbz	r3, 800964a <_strtod_l+0xb2>
 8009616:	4652      	mov	r2, sl
 8009618:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800961c:	ec43 2b10 	vmov	d0, r2, r3
 8009620:	b01f      	add	sp, #124	@ 0x7c
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	2920      	cmp	r1, #32
 8009628:	d1ce      	bne.n	80095c8 <_strtod_l+0x30>
 800962a:	3201      	adds	r2, #1
 800962c:	e7c1      	b.n	80095b2 <_strtod_l+0x1a>
 800962e:	292d      	cmp	r1, #45	@ 0x2d
 8009630:	d1ca      	bne.n	80095c8 <_strtod_l+0x30>
 8009632:	2101      	movs	r1, #1
 8009634:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009636:	1c51      	adds	r1, r2, #1
 8009638:	9119      	str	r1, [sp, #100]	@ 0x64
 800963a:	7852      	ldrb	r2, [r2, #1]
 800963c:	2a00      	cmp	r2, #0
 800963e:	d1c5      	bne.n	80095cc <_strtod_l+0x34>
 8009640:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009642:	9419      	str	r4, [sp, #100]	@ 0x64
 8009644:	2b00      	cmp	r3, #0
 8009646:	f040 8570 	bne.w	800a12a <_strtod_l+0xb92>
 800964a:	4652      	mov	r2, sl
 800964c:	465b      	mov	r3, fp
 800964e:	e7e5      	b.n	800961c <_strtod_l+0x84>
 8009650:	2100      	movs	r1, #0
 8009652:	e7ef      	b.n	8009634 <_strtod_l+0x9c>
 8009654:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009656:	b13a      	cbz	r2, 8009668 <_strtod_l+0xd0>
 8009658:	2135      	movs	r1, #53	@ 0x35
 800965a:	a81c      	add	r0, sp, #112	@ 0x70
 800965c:	f003 fea2 	bl	800d3a4 <__copybits>
 8009660:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009662:	9805      	ldr	r0, [sp, #20]
 8009664:	f003 fa70 	bl	800cb48 <_Bfree>
 8009668:	3e01      	subs	r6, #1
 800966a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800966c:	2e04      	cmp	r6, #4
 800966e:	d806      	bhi.n	800967e <_strtod_l+0xe6>
 8009670:	e8df f006 	tbb	[pc, r6]
 8009674:	201d0314 	.word	0x201d0314
 8009678:	14          	.byte	0x14
 8009679:	00          	.byte	0x00
 800967a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800967e:	05e1      	lsls	r1, r4, #23
 8009680:	bf48      	it	mi
 8009682:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800968a:	0d1b      	lsrs	r3, r3, #20
 800968c:	051b      	lsls	r3, r3, #20
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1bb      	bne.n	800960a <_strtod_l+0x72>
 8009692:	f001 ff17 	bl	800b4c4 <__errno>
 8009696:	2322      	movs	r3, #34	@ 0x22
 8009698:	6003      	str	r3, [r0, #0]
 800969a:	e7b6      	b.n	800960a <_strtod_l+0x72>
 800969c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80096a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80096a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80096a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096ac:	e7e7      	b.n	800967e <_strtod_l+0xe6>
 80096ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800982c <_strtod_l+0x294>
 80096b2:	e7e4      	b.n	800967e <_strtod_l+0xe6>
 80096b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80096b8:	f04f 3aff 	mov.w	sl, #4294967295
 80096bc:	e7df      	b.n	800967e <_strtod_l+0xe6>
 80096be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80096c4:	785b      	ldrb	r3, [r3, #1]
 80096c6:	2b30      	cmp	r3, #48	@ 0x30
 80096c8:	d0f9      	beq.n	80096be <_strtod_l+0x126>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d09d      	beq.n	800960a <_strtod_l+0x72>
 80096ce:	2301      	movs	r3, #1
 80096d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80096d6:	2300      	movs	r3, #0
 80096d8:	9308      	str	r3, [sp, #32]
 80096da:	930a      	str	r3, [sp, #40]	@ 0x28
 80096dc:	461f      	mov	r7, r3
 80096de:	220a      	movs	r2, #10
 80096e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80096e2:	7805      	ldrb	r5, [r0, #0]
 80096e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80096e8:	b2d9      	uxtb	r1, r3
 80096ea:	2909      	cmp	r1, #9
 80096ec:	d928      	bls.n	8009740 <_strtod_l+0x1a8>
 80096ee:	494e      	ldr	r1, [pc, #312]	@ (8009828 <_strtod_l+0x290>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	f001 fe19 	bl	800b328 <strncmp>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d032      	beq.n	8009760 <_strtod_l+0x1c8>
 80096fa:	2000      	movs	r0, #0
 80096fc:	462a      	mov	r2, r5
 80096fe:	4681      	mov	r9, r0
 8009700:	463d      	mov	r5, r7
 8009702:	4603      	mov	r3, r0
 8009704:	2a65      	cmp	r2, #101	@ 0x65
 8009706:	d001      	beq.n	800970c <_strtod_l+0x174>
 8009708:	2a45      	cmp	r2, #69	@ 0x45
 800970a:	d114      	bne.n	8009736 <_strtod_l+0x19e>
 800970c:	b91d      	cbnz	r5, 8009716 <_strtod_l+0x17e>
 800970e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009710:	4302      	orrs	r2, r0
 8009712:	d095      	beq.n	8009640 <_strtod_l+0xa8>
 8009714:	2500      	movs	r5, #0
 8009716:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009718:	1c62      	adds	r2, r4, #1
 800971a:	9219      	str	r2, [sp, #100]	@ 0x64
 800971c:	7862      	ldrb	r2, [r4, #1]
 800971e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009720:	d077      	beq.n	8009812 <_strtod_l+0x27a>
 8009722:	2a2d      	cmp	r2, #45	@ 0x2d
 8009724:	d07b      	beq.n	800981e <_strtod_l+0x286>
 8009726:	f04f 0c00 	mov.w	ip, #0
 800972a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800972e:	2909      	cmp	r1, #9
 8009730:	f240 8082 	bls.w	8009838 <_strtod_l+0x2a0>
 8009734:	9419      	str	r4, [sp, #100]	@ 0x64
 8009736:	f04f 0800 	mov.w	r8, #0
 800973a:	e0a2      	b.n	8009882 <_strtod_l+0x2ea>
 800973c:	2300      	movs	r3, #0
 800973e:	e7c7      	b.n	80096d0 <_strtod_l+0x138>
 8009740:	2f08      	cmp	r7, #8
 8009742:	bfd5      	itete	le
 8009744:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009746:	9908      	ldrgt	r1, [sp, #32]
 8009748:	fb02 3301 	mlale	r3, r2, r1, r3
 800974c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009750:	f100 0001 	add.w	r0, r0, #1
 8009754:	bfd4      	ite	le
 8009756:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009758:	9308      	strgt	r3, [sp, #32]
 800975a:	3701      	adds	r7, #1
 800975c:	9019      	str	r0, [sp, #100]	@ 0x64
 800975e:	e7bf      	b.n	80096e0 <_strtod_l+0x148>
 8009760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	9219      	str	r2, [sp, #100]	@ 0x64
 8009766:	785a      	ldrb	r2, [r3, #1]
 8009768:	b37f      	cbz	r7, 80097ca <_strtod_l+0x232>
 800976a:	4681      	mov	r9, r0
 800976c:	463d      	mov	r5, r7
 800976e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009772:	2b09      	cmp	r3, #9
 8009774:	d912      	bls.n	800979c <_strtod_l+0x204>
 8009776:	2301      	movs	r3, #1
 8009778:	e7c4      	b.n	8009704 <_strtod_l+0x16c>
 800977a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009780:	785a      	ldrb	r2, [r3, #1]
 8009782:	3001      	adds	r0, #1
 8009784:	2a30      	cmp	r2, #48	@ 0x30
 8009786:	d0f8      	beq.n	800977a <_strtod_l+0x1e2>
 8009788:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800978c:	2b08      	cmp	r3, #8
 800978e:	f200 84d3 	bhi.w	800a138 <_strtod_l+0xba0>
 8009792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009794:	930c      	str	r3, [sp, #48]	@ 0x30
 8009796:	4681      	mov	r9, r0
 8009798:	2000      	movs	r0, #0
 800979a:	4605      	mov	r5, r0
 800979c:	3a30      	subs	r2, #48	@ 0x30
 800979e:	f100 0301 	add.w	r3, r0, #1
 80097a2:	d02a      	beq.n	80097fa <_strtod_l+0x262>
 80097a4:	4499      	add	r9, r3
 80097a6:	eb00 0c05 	add.w	ip, r0, r5
 80097aa:	462b      	mov	r3, r5
 80097ac:	210a      	movs	r1, #10
 80097ae:	4563      	cmp	r3, ip
 80097b0:	d10d      	bne.n	80097ce <_strtod_l+0x236>
 80097b2:	1c69      	adds	r1, r5, #1
 80097b4:	4401      	add	r1, r0
 80097b6:	4428      	add	r0, r5
 80097b8:	2808      	cmp	r0, #8
 80097ba:	dc16      	bgt.n	80097ea <_strtod_l+0x252>
 80097bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097be:	230a      	movs	r3, #10
 80097c0:	fb03 2300 	mla	r3, r3, r0, r2
 80097c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80097c6:	2300      	movs	r3, #0
 80097c8:	e018      	b.n	80097fc <_strtod_l+0x264>
 80097ca:	4638      	mov	r0, r7
 80097cc:	e7da      	b.n	8009784 <_strtod_l+0x1ec>
 80097ce:	2b08      	cmp	r3, #8
 80097d0:	f103 0301 	add.w	r3, r3, #1
 80097d4:	dc03      	bgt.n	80097de <_strtod_l+0x246>
 80097d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80097d8:	434e      	muls	r6, r1
 80097da:	960a      	str	r6, [sp, #40]	@ 0x28
 80097dc:	e7e7      	b.n	80097ae <_strtod_l+0x216>
 80097de:	2b10      	cmp	r3, #16
 80097e0:	bfde      	ittt	le
 80097e2:	9e08      	ldrle	r6, [sp, #32]
 80097e4:	434e      	mulle	r6, r1
 80097e6:	9608      	strle	r6, [sp, #32]
 80097e8:	e7e1      	b.n	80097ae <_strtod_l+0x216>
 80097ea:	280f      	cmp	r0, #15
 80097ec:	dceb      	bgt.n	80097c6 <_strtod_l+0x22e>
 80097ee:	9808      	ldr	r0, [sp, #32]
 80097f0:	230a      	movs	r3, #10
 80097f2:	fb03 2300 	mla	r3, r3, r0, r2
 80097f6:	9308      	str	r3, [sp, #32]
 80097f8:	e7e5      	b.n	80097c6 <_strtod_l+0x22e>
 80097fa:	4629      	mov	r1, r5
 80097fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097fe:	1c50      	adds	r0, r2, #1
 8009800:	9019      	str	r0, [sp, #100]	@ 0x64
 8009802:	7852      	ldrb	r2, [r2, #1]
 8009804:	4618      	mov	r0, r3
 8009806:	460d      	mov	r5, r1
 8009808:	e7b1      	b.n	800976e <_strtod_l+0x1d6>
 800980a:	f04f 0900 	mov.w	r9, #0
 800980e:	2301      	movs	r3, #1
 8009810:	e77d      	b.n	800970e <_strtod_l+0x176>
 8009812:	f04f 0c00 	mov.w	ip, #0
 8009816:	1ca2      	adds	r2, r4, #2
 8009818:	9219      	str	r2, [sp, #100]	@ 0x64
 800981a:	78a2      	ldrb	r2, [r4, #2]
 800981c:	e785      	b.n	800972a <_strtod_l+0x192>
 800981e:	f04f 0c01 	mov.w	ip, #1
 8009822:	e7f8      	b.n	8009816 <_strtod_l+0x27e>
 8009824:	0800f5f0 	.word	0x0800f5f0
 8009828:	0800f5d8 	.word	0x0800f5d8
 800982c:	7ff00000 	.word	0x7ff00000
 8009830:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009832:	1c51      	adds	r1, r2, #1
 8009834:	9119      	str	r1, [sp, #100]	@ 0x64
 8009836:	7852      	ldrb	r2, [r2, #1]
 8009838:	2a30      	cmp	r2, #48	@ 0x30
 800983a:	d0f9      	beq.n	8009830 <_strtod_l+0x298>
 800983c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009840:	2908      	cmp	r1, #8
 8009842:	f63f af78 	bhi.w	8009736 <_strtod_l+0x19e>
 8009846:	3a30      	subs	r2, #48	@ 0x30
 8009848:	920e      	str	r2, [sp, #56]	@ 0x38
 800984a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800984c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800984e:	f04f 080a 	mov.w	r8, #10
 8009852:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009854:	1c56      	adds	r6, r2, #1
 8009856:	9619      	str	r6, [sp, #100]	@ 0x64
 8009858:	7852      	ldrb	r2, [r2, #1]
 800985a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800985e:	f1be 0f09 	cmp.w	lr, #9
 8009862:	d939      	bls.n	80098d8 <_strtod_l+0x340>
 8009864:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009866:	1a76      	subs	r6, r6, r1
 8009868:	2e08      	cmp	r6, #8
 800986a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800986e:	dc03      	bgt.n	8009878 <_strtod_l+0x2e0>
 8009870:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009872:	4588      	cmp	r8, r1
 8009874:	bfa8      	it	ge
 8009876:	4688      	movge	r8, r1
 8009878:	f1bc 0f00 	cmp.w	ip, #0
 800987c:	d001      	beq.n	8009882 <_strtod_l+0x2ea>
 800987e:	f1c8 0800 	rsb	r8, r8, #0
 8009882:	2d00      	cmp	r5, #0
 8009884:	d14e      	bne.n	8009924 <_strtod_l+0x38c>
 8009886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009888:	4308      	orrs	r0, r1
 800988a:	f47f aebe 	bne.w	800960a <_strtod_l+0x72>
 800988e:	2b00      	cmp	r3, #0
 8009890:	f47f aed6 	bne.w	8009640 <_strtod_l+0xa8>
 8009894:	2a69      	cmp	r2, #105	@ 0x69
 8009896:	d028      	beq.n	80098ea <_strtod_l+0x352>
 8009898:	dc25      	bgt.n	80098e6 <_strtod_l+0x34e>
 800989a:	2a49      	cmp	r2, #73	@ 0x49
 800989c:	d025      	beq.n	80098ea <_strtod_l+0x352>
 800989e:	2a4e      	cmp	r2, #78	@ 0x4e
 80098a0:	f47f aece 	bne.w	8009640 <_strtod_l+0xa8>
 80098a4:	499b      	ldr	r1, [pc, #620]	@ (8009b14 <_strtod_l+0x57c>)
 80098a6:	a819      	add	r0, sp, #100	@ 0x64
 80098a8:	f002 ff96 	bl	800c7d8 <__match>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f43f aec7 	beq.w	8009640 <_strtod_l+0xa8>
 80098b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b28      	cmp	r3, #40	@ 0x28
 80098b8:	d12e      	bne.n	8009918 <_strtod_l+0x380>
 80098ba:	4997      	ldr	r1, [pc, #604]	@ (8009b18 <_strtod_l+0x580>)
 80098bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80098be:	a819      	add	r0, sp, #100	@ 0x64
 80098c0:	f002 ff9e 	bl	800c800 <__hexnan>
 80098c4:	2805      	cmp	r0, #5
 80098c6:	d127      	bne.n	8009918 <_strtod_l+0x380>
 80098c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80098ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80098d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80098d6:	e698      	b.n	800960a <_strtod_l+0x72>
 80098d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80098da:	fb08 2101 	mla	r1, r8, r1, r2
 80098de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80098e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80098e4:	e7b5      	b.n	8009852 <_strtod_l+0x2ba>
 80098e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80098e8:	e7da      	b.n	80098a0 <_strtod_l+0x308>
 80098ea:	498c      	ldr	r1, [pc, #560]	@ (8009b1c <_strtod_l+0x584>)
 80098ec:	a819      	add	r0, sp, #100	@ 0x64
 80098ee:	f002 ff73 	bl	800c7d8 <__match>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f aea4 	beq.w	8009640 <_strtod_l+0xa8>
 80098f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098fa:	4989      	ldr	r1, [pc, #548]	@ (8009b20 <_strtod_l+0x588>)
 80098fc:	3b01      	subs	r3, #1
 80098fe:	a819      	add	r0, sp, #100	@ 0x64
 8009900:	9319      	str	r3, [sp, #100]	@ 0x64
 8009902:	f002 ff69 	bl	800c7d8 <__match>
 8009906:	b910      	cbnz	r0, 800990e <_strtod_l+0x376>
 8009908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800990a:	3301      	adds	r3, #1
 800990c:	9319      	str	r3, [sp, #100]	@ 0x64
 800990e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009b30 <_strtod_l+0x598>
 8009912:	f04f 0a00 	mov.w	sl, #0
 8009916:	e678      	b.n	800960a <_strtod_l+0x72>
 8009918:	4882      	ldr	r0, [pc, #520]	@ (8009b24 <_strtod_l+0x58c>)
 800991a:	f001 fe11 	bl	800b540 <nan>
 800991e:	ec5b ab10 	vmov	sl, fp, d0
 8009922:	e672      	b.n	800960a <_strtod_l+0x72>
 8009924:	eba8 0309 	sub.w	r3, r8, r9
 8009928:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800992a:	9309      	str	r3, [sp, #36]	@ 0x24
 800992c:	2f00      	cmp	r7, #0
 800992e:	bf08      	it	eq
 8009930:	462f      	moveq	r7, r5
 8009932:	2d10      	cmp	r5, #16
 8009934:	462c      	mov	r4, r5
 8009936:	bfa8      	it	ge
 8009938:	2410      	movge	r4, #16
 800993a:	f7f6 fde3 	bl	8000504 <__aeabi_ui2d>
 800993e:	2d09      	cmp	r5, #9
 8009940:	4682      	mov	sl, r0
 8009942:	468b      	mov	fp, r1
 8009944:	dc13      	bgt.n	800996e <_strtod_l+0x3d6>
 8009946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	f43f ae5e 	beq.w	800960a <_strtod_l+0x72>
 800994e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009950:	dd78      	ble.n	8009a44 <_strtod_l+0x4ac>
 8009952:	2b16      	cmp	r3, #22
 8009954:	dc5f      	bgt.n	8009a16 <_strtod_l+0x47e>
 8009956:	4974      	ldr	r1, [pc, #464]	@ (8009b28 <_strtod_l+0x590>)
 8009958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800995c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009960:	4652      	mov	r2, sl
 8009962:	465b      	mov	r3, fp
 8009964:	f7f6 fe48 	bl	80005f8 <__aeabi_dmul>
 8009968:	4682      	mov	sl, r0
 800996a:	468b      	mov	fp, r1
 800996c:	e64d      	b.n	800960a <_strtod_l+0x72>
 800996e:	4b6e      	ldr	r3, [pc, #440]	@ (8009b28 <_strtod_l+0x590>)
 8009970:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009974:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	4682      	mov	sl, r0
 800997e:	9808      	ldr	r0, [sp, #32]
 8009980:	468b      	mov	fp, r1
 8009982:	f7f6 fdbf 	bl	8000504 <__aeabi_ui2d>
 8009986:	4602      	mov	r2, r0
 8009988:	460b      	mov	r3, r1
 800998a:	4650      	mov	r0, sl
 800998c:	4659      	mov	r1, fp
 800998e:	f7f6 fc7d 	bl	800028c <__adddf3>
 8009992:	2d0f      	cmp	r5, #15
 8009994:	4682      	mov	sl, r0
 8009996:	468b      	mov	fp, r1
 8009998:	ddd5      	ble.n	8009946 <_strtod_l+0x3ae>
 800999a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800999c:	1b2c      	subs	r4, r5, r4
 800999e:	441c      	add	r4, r3
 80099a0:	2c00      	cmp	r4, #0
 80099a2:	f340 8096 	ble.w	8009ad2 <_strtod_l+0x53a>
 80099a6:	f014 030f 	ands.w	r3, r4, #15
 80099aa:	d00a      	beq.n	80099c2 <_strtod_l+0x42a>
 80099ac:	495e      	ldr	r1, [pc, #376]	@ (8009b28 <_strtod_l+0x590>)
 80099ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099b2:	4652      	mov	r2, sl
 80099b4:	465b      	mov	r3, fp
 80099b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	4682      	mov	sl, r0
 80099c0:	468b      	mov	fp, r1
 80099c2:	f034 040f 	bics.w	r4, r4, #15
 80099c6:	d073      	beq.n	8009ab0 <_strtod_l+0x518>
 80099c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80099cc:	dd48      	ble.n	8009a60 <_strtod_l+0x4c8>
 80099ce:	2400      	movs	r4, #0
 80099d0:	46a0      	mov	r8, r4
 80099d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80099d4:	46a1      	mov	r9, r4
 80099d6:	9a05      	ldr	r2, [sp, #20]
 80099d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009b30 <_strtod_l+0x598>
 80099dc:	2322      	movs	r3, #34	@ 0x22
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	f04f 0a00 	mov.w	sl, #0
 80099e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f43f ae0f 	beq.w	800960a <_strtod_l+0x72>
 80099ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	f003 f8aa 	bl	800cb48 <_Bfree>
 80099f4:	9805      	ldr	r0, [sp, #20]
 80099f6:	4649      	mov	r1, r9
 80099f8:	f003 f8a6 	bl	800cb48 <_Bfree>
 80099fc:	9805      	ldr	r0, [sp, #20]
 80099fe:	4641      	mov	r1, r8
 8009a00:	f003 f8a2 	bl	800cb48 <_Bfree>
 8009a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a06:	9805      	ldr	r0, [sp, #20]
 8009a08:	f003 f89e 	bl	800cb48 <_Bfree>
 8009a0c:	9805      	ldr	r0, [sp, #20]
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f003 f89a 	bl	800cb48 <_Bfree>
 8009a14:	e5f9      	b.n	800960a <_strtod_l+0x72>
 8009a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	dbbc      	blt.n	800999a <_strtod_l+0x402>
 8009a20:	4c41      	ldr	r4, [pc, #260]	@ (8009b28 <_strtod_l+0x590>)
 8009a22:	f1c5 050f 	rsb	r5, r5, #15
 8009a26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a32:	f7f6 fde1 	bl	80005f8 <__aeabi_dmul>
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	1b5d      	subs	r5, r3, r5
 8009a3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a42:	e78f      	b.n	8009964 <_strtod_l+0x3cc>
 8009a44:	3316      	adds	r3, #22
 8009a46:	dba8      	blt.n	800999a <_strtod_l+0x402>
 8009a48:	4b37      	ldr	r3, [pc, #220]	@ (8009b28 <_strtod_l+0x590>)
 8009a4a:	eba9 0808 	sub.w	r8, r9, r8
 8009a4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a56:	4650      	mov	r0, sl
 8009a58:	4659      	mov	r1, fp
 8009a5a:	f7f6 fef7 	bl	800084c <__aeabi_ddiv>
 8009a5e:	e783      	b.n	8009968 <_strtod_l+0x3d0>
 8009a60:	4b32      	ldr	r3, [pc, #200]	@ (8009b2c <_strtod_l+0x594>)
 8009a62:	9308      	str	r3, [sp, #32]
 8009a64:	2300      	movs	r3, #0
 8009a66:	1124      	asrs	r4, r4, #4
 8009a68:	4650      	mov	r0, sl
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	461e      	mov	r6, r3
 8009a6e:	2c01      	cmp	r4, #1
 8009a70:	dc21      	bgt.n	8009ab6 <_strtod_l+0x51e>
 8009a72:	b10b      	cbz	r3, 8009a78 <_strtod_l+0x4e0>
 8009a74:	4682      	mov	sl, r0
 8009a76:	468b      	mov	fp, r1
 8009a78:	492c      	ldr	r1, [pc, #176]	@ (8009b2c <_strtod_l+0x594>)
 8009a7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a82:	4652      	mov	r2, sl
 8009a84:	465b      	mov	r3, fp
 8009a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a8a:	f7f6 fdb5 	bl	80005f8 <__aeabi_dmul>
 8009a8e:	4b28      	ldr	r3, [pc, #160]	@ (8009b30 <_strtod_l+0x598>)
 8009a90:	460a      	mov	r2, r1
 8009a92:	400b      	ands	r3, r1
 8009a94:	4927      	ldr	r1, [pc, #156]	@ (8009b34 <_strtod_l+0x59c>)
 8009a96:	428b      	cmp	r3, r1
 8009a98:	4682      	mov	sl, r0
 8009a9a:	d898      	bhi.n	80099ce <_strtod_l+0x436>
 8009a9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf86      	itte	hi
 8009aa4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009b38 <_strtod_l+0x5a0>
 8009aa8:	f04f 3aff 	movhi.w	sl, #4294967295
 8009aac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9308      	str	r3, [sp, #32]
 8009ab4:	e07a      	b.n	8009bac <_strtod_l+0x614>
 8009ab6:	07e2      	lsls	r2, r4, #31
 8009ab8:	d505      	bpl.n	8009ac6 <_strtod_l+0x52e>
 8009aba:	9b08      	ldr	r3, [sp, #32]
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fd9a 	bl	80005f8 <__aeabi_dmul>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	9a08      	ldr	r2, [sp, #32]
 8009ac8:	3208      	adds	r2, #8
 8009aca:	3601      	adds	r6, #1
 8009acc:	1064      	asrs	r4, r4, #1
 8009ace:	9208      	str	r2, [sp, #32]
 8009ad0:	e7cd      	b.n	8009a6e <_strtod_l+0x4d6>
 8009ad2:	d0ed      	beq.n	8009ab0 <_strtod_l+0x518>
 8009ad4:	4264      	negs	r4, r4
 8009ad6:	f014 020f 	ands.w	r2, r4, #15
 8009ada:	d00a      	beq.n	8009af2 <_strtod_l+0x55a>
 8009adc:	4b12      	ldr	r3, [pc, #72]	@ (8009b28 <_strtod_l+0x590>)
 8009ade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 feaf 	bl	800084c <__aeabi_ddiv>
 8009aee:	4682      	mov	sl, r0
 8009af0:	468b      	mov	fp, r1
 8009af2:	1124      	asrs	r4, r4, #4
 8009af4:	d0dc      	beq.n	8009ab0 <_strtod_l+0x518>
 8009af6:	2c1f      	cmp	r4, #31
 8009af8:	dd20      	ble.n	8009b3c <_strtod_l+0x5a4>
 8009afa:	2400      	movs	r4, #0
 8009afc:	46a0      	mov	r8, r4
 8009afe:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b00:	46a1      	mov	r9, r4
 8009b02:	9a05      	ldr	r2, [sp, #20]
 8009b04:	2322      	movs	r3, #34	@ 0x22
 8009b06:	f04f 0a00 	mov.w	sl, #0
 8009b0a:	f04f 0b00 	mov.w	fp, #0
 8009b0e:	6013      	str	r3, [r2, #0]
 8009b10:	e768      	b.n	80099e4 <_strtod_l+0x44c>
 8009b12:	bf00      	nop
 8009b14:	0800f63d 	.word	0x0800f63d
 8009b18:	0800f5dc 	.word	0x0800f5dc
 8009b1c:	0800f635 	.word	0x0800f635
 8009b20:	0800f721 	.word	0x0800f721
 8009b24:	0800f71d 	.word	0x0800f71d
 8009b28:	0800f888 	.word	0x0800f888
 8009b2c:	0800f860 	.word	0x0800f860
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	7ca00000 	.word	0x7ca00000
 8009b38:	7fefffff 	.word	0x7fefffff
 8009b3c:	f014 0310 	ands.w	r3, r4, #16
 8009b40:	bf18      	it	ne
 8009b42:	236a      	movne	r3, #106	@ 0x6a
 8009b44:	4ea9      	ldr	r6, [pc, #676]	@ (8009dec <_strtod_l+0x854>)
 8009b46:	9308      	str	r3, [sp, #32]
 8009b48:	4650      	mov	r0, sl
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	07e2      	lsls	r2, r4, #31
 8009b50:	d504      	bpl.n	8009b5c <_strtod_l+0x5c4>
 8009b52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b56:	f7f6 fd4f 	bl	80005f8 <__aeabi_dmul>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	1064      	asrs	r4, r4, #1
 8009b5e:	f106 0608 	add.w	r6, r6, #8
 8009b62:	d1f4      	bne.n	8009b4e <_strtod_l+0x5b6>
 8009b64:	b10b      	cbz	r3, 8009b6a <_strtod_l+0x5d2>
 8009b66:	4682      	mov	sl, r0
 8009b68:	468b      	mov	fp, r1
 8009b6a:	9b08      	ldr	r3, [sp, #32]
 8009b6c:	b1b3      	cbz	r3, 8009b9c <_strtod_l+0x604>
 8009b6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	4659      	mov	r1, fp
 8009b7a:	dd0f      	ble.n	8009b9c <_strtod_l+0x604>
 8009b7c:	2b1f      	cmp	r3, #31
 8009b7e:	dd55      	ble.n	8009c2c <_strtod_l+0x694>
 8009b80:	2b34      	cmp	r3, #52	@ 0x34
 8009b82:	bfde      	ittt	le
 8009b84:	f04f 33ff 	movle.w	r3, #4294967295
 8009b88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b8c:	4093      	lslle	r3, r2
 8009b8e:	f04f 0a00 	mov.w	sl, #0
 8009b92:	bfcc      	ite	gt
 8009b94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b98:	ea03 0b01 	andle.w	fp, r3, r1
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	4650      	mov	r0, sl
 8009ba2:	4659      	mov	r1, fp
 8009ba4:	f7f6 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d1a6      	bne.n	8009afa <_strtod_l+0x562>
 8009bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009bb2:	9805      	ldr	r0, [sp, #20]
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	463a      	mov	r2, r7
 8009bb8:	f003 f82e 	bl	800cc18 <__s2b>
 8009bbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f43f af05 	beq.w	80099ce <_strtod_l+0x436>
 8009bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc6:	2a00      	cmp	r2, #0
 8009bc8:	eba9 0308 	sub.w	r3, r9, r8
 8009bcc:	bfa8      	it	ge
 8009bce:	2300      	movge	r3, #0
 8009bd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8009bd2:	2400      	movs	r4, #0
 8009bd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009bd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8009bda:	46a0      	mov	r8, r4
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bde:	9805      	ldr	r0, [sp, #20]
 8009be0:	6859      	ldr	r1, [r3, #4]
 8009be2:	f002 ff71 	bl	800cac8 <_Balloc>
 8009be6:	4681      	mov	r9, r0
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f43f aef4 	beq.w	80099d6 <_strtod_l+0x43e>
 8009bee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bf0:	691a      	ldr	r2, [r3, #16]
 8009bf2:	3202      	adds	r2, #2
 8009bf4:	f103 010c 	add.w	r1, r3, #12
 8009bf8:	0092      	lsls	r2, r2, #2
 8009bfa:	300c      	adds	r0, #12
 8009bfc:	f001 fc8f 	bl	800b51e <memcpy>
 8009c00:	ec4b ab10 	vmov	d0, sl, fp
 8009c04:	9805      	ldr	r0, [sp, #20]
 8009c06:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c08:	a91b      	add	r1, sp, #108	@ 0x6c
 8009c0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c0e:	f003 fb3f 	bl	800d290 <__d2b>
 8009c12:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c14:	2800      	cmp	r0, #0
 8009c16:	f43f aede 	beq.w	80099d6 <_strtod_l+0x43e>
 8009c1a:	9805      	ldr	r0, [sp, #20]
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	f003 f891 	bl	800cd44 <__i2b>
 8009c22:	4680      	mov	r8, r0
 8009c24:	b948      	cbnz	r0, 8009c3a <_strtod_l+0x6a2>
 8009c26:	f04f 0800 	mov.w	r8, #0
 8009c2a:	e6d4      	b.n	80099d6 <_strtod_l+0x43e>
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	fa02 f303 	lsl.w	r3, r2, r3
 8009c34:	ea03 0a0a 	and.w	sl, r3, sl
 8009c38:	e7b0      	b.n	8009b9c <_strtod_l+0x604>
 8009c3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009c3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	bfab      	itete	ge
 8009c42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c4a:	bfac      	ite	ge
 8009c4c:	18ef      	addge	r7, r5, r3
 8009c4e:	1b5e      	sublt	r6, r3, r5
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	1aed      	subs	r5, r5, r3
 8009c54:	4415      	add	r5, r2
 8009c56:	4b66      	ldr	r3, [pc, #408]	@ (8009df0 <_strtod_l+0x858>)
 8009c58:	3d01      	subs	r5, #1
 8009c5a:	429d      	cmp	r5, r3
 8009c5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c60:	da50      	bge.n	8009d04 <_strtod_l+0x76c>
 8009c62:	1b5b      	subs	r3, r3, r5
 8009c64:	2b1f      	cmp	r3, #31
 8009c66:	eba2 0203 	sub.w	r2, r2, r3
 8009c6a:	f04f 0101 	mov.w	r1, #1
 8009c6e:	dc3d      	bgt.n	8009cec <_strtod_l+0x754>
 8009c70:	fa01 f303 	lsl.w	r3, r1, r3
 8009c74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c76:	2300      	movs	r3, #0
 8009c78:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c7a:	18bd      	adds	r5, r7, r2
 8009c7c:	9b08      	ldr	r3, [sp, #32]
 8009c7e:	42af      	cmp	r7, r5
 8009c80:	4416      	add	r6, r2
 8009c82:	441e      	add	r6, r3
 8009c84:	463b      	mov	r3, r7
 8009c86:	bfa8      	it	ge
 8009c88:	462b      	movge	r3, r5
 8009c8a:	42b3      	cmp	r3, r6
 8009c8c:	bfa8      	it	ge
 8009c8e:	4633      	movge	r3, r6
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfc2      	ittt	gt
 8009c94:	1aed      	subgt	r5, r5, r3
 8009c96:	1af6      	subgt	r6, r6, r3
 8009c98:	1aff      	subgt	r7, r7, r3
 8009c9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd16      	ble.n	8009cce <_strtod_l+0x736>
 8009ca0:	4641      	mov	r1, r8
 8009ca2:	9805      	ldr	r0, [sp, #20]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f003 f90d 	bl	800cec4 <__pow5mult>
 8009caa:	4680      	mov	r8, r0
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d0ba      	beq.n	8009c26 <_strtod_l+0x68e>
 8009cb0:	4601      	mov	r1, r0
 8009cb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009cb4:	9805      	ldr	r0, [sp, #20]
 8009cb6:	f003 f85b 	bl	800cd70 <__multiply>
 8009cba:	900e      	str	r0, [sp, #56]	@ 0x38
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	f43f ae8a 	beq.w	80099d6 <_strtod_l+0x43e>
 8009cc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cc4:	9805      	ldr	r0, [sp, #20]
 8009cc6:	f002 ff3f 	bl	800cb48 <_Bfree>
 8009cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	dc1d      	bgt.n	8009d0e <_strtod_l+0x776>
 8009cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	dd23      	ble.n	8009d20 <_strtod_l+0x788>
 8009cd8:	4649      	mov	r1, r9
 8009cda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009cdc:	9805      	ldr	r0, [sp, #20]
 8009cde:	f003 f8f1 	bl	800cec4 <__pow5mult>
 8009ce2:	4681      	mov	r9, r0
 8009ce4:	b9e0      	cbnz	r0, 8009d20 <_strtod_l+0x788>
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	e674      	b.n	80099d6 <_strtod_l+0x43e>
 8009cec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009cf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009cf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009cf8:	35e2      	adds	r5, #226	@ 0xe2
 8009cfa:	fa01 f305 	lsl.w	r3, r1, r5
 8009cfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d02:	e7ba      	b.n	8009c7a <_strtod_l+0x6e2>
 8009d04:	2300      	movs	r3, #0
 8009d06:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d08:	2301      	movs	r3, #1
 8009d0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d0c:	e7b5      	b.n	8009c7a <_strtod_l+0x6e2>
 8009d0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d10:	9805      	ldr	r0, [sp, #20]
 8009d12:	462a      	mov	r2, r5
 8009d14:	f003 f930 	bl	800cf78 <__lshift>
 8009d18:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d1d9      	bne.n	8009cd2 <_strtod_l+0x73a>
 8009d1e:	e65a      	b.n	80099d6 <_strtod_l+0x43e>
 8009d20:	2e00      	cmp	r6, #0
 8009d22:	dd07      	ble.n	8009d34 <_strtod_l+0x79c>
 8009d24:	4649      	mov	r1, r9
 8009d26:	9805      	ldr	r0, [sp, #20]
 8009d28:	4632      	mov	r2, r6
 8009d2a:	f003 f925 	bl	800cf78 <__lshift>
 8009d2e:	4681      	mov	r9, r0
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d0d8      	beq.n	8009ce6 <_strtod_l+0x74e>
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	dd08      	ble.n	8009d4a <_strtod_l+0x7b2>
 8009d38:	4641      	mov	r1, r8
 8009d3a:	9805      	ldr	r0, [sp, #20]
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	f003 f91b 	bl	800cf78 <__lshift>
 8009d42:	4680      	mov	r8, r0
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f43f ae46 	beq.w	80099d6 <_strtod_l+0x43e>
 8009d4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d4c:	9805      	ldr	r0, [sp, #20]
 8009d4e:	464a      	mov	r2, r9
 8009d50:	f003 f99a 	bl	800d088 <__mdiff>
 8009d54:	4604      	mov	r4, r0
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f43f ae3d 	beq.w	80099d6 <_strtod_l+0x43e>
 8009d5c:	68c3      	ldr	r3, [r0, #12]
 8009d5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d60:	2300      	movs	r3, #0
 8009d62:	60c3      	str	r3, [r0, #12]
 8009d64:	4641      	mov	r1, r8
 8009d66:	f003 f973 	bl	800d050 <__mcmp>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	da46      	bge.n	8009dfc <_strtod_l+0x864>
 8009d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d70:	ea53 030a 	orrs.w	r3, r3, sl
 8009d74:	d16c      	bne.n	8009e50 <_strtod_l+0x8b8>
 8009d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d168      	bne.n	8009e50 <_strtod_l+0x8b8>
 8009d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d82:	0d1b      	lsrs	r3, r3, #20
 8009d84:	051b      	lsls	r3, r3, #20
 8009d86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d8a:	d961      	bls.n	8009e50 <_strtod_l+0x8b8>
 8009d8c:	6963      	ldr	r3, [r4, #20]
 8009d8e:	b913      	cbnz	r3, 8009d96 <_strtod_l+0x7fe>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	dd5c      	ble.n	8009e50 <_strtod_l+0x8b8>
 8009d96:	4621      	mov	r1, r4
 8009d98:	2201      	movs	r2, #1
 8009d9a:	9805      	ldr	r0, [sp, #20]
 8009d9c:	f003 f8ec 	bl	800cf78 <__lshift>
 8009da0:	4641      	mov	r1, r8
 8009da2:	4604      	mov	r4, r0
 8009da4:	f003 f954 	bl	800d050 <__mcmp>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	dd51      	ble.n	8009e50 <_strtod_l+0x8b8>
 8009dac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009db0:	9a08      	ldr	r2, [sp, #32]
 8009db2:	0d1b      	lsrs	r3, r3, #20
 8009db4:	051b      	lsls	r3, r3, #20
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	d06b      	beq.n	8009e92 <_strtod_l+0x8fa>
 8009dba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009dbe:	d868      	bhi.n	8009e92 <_strtod_l+0x8fa>
 8009dc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009dc4:	f67f ae9d 	bls.w	8009b02 <_strtod_l+0x56a>
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009df4 <_strtod_l+0x85c>)
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4659      	mov	r1, fp
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f7f6 fc12 	bl	80005f8 <__aeabi_dmul>
 8009dd4:	4b08      	ldr	r3, [pc, #32]	@ (8009df8 <_strtod_l+0x860>)
 8009dd6:	400b      	ands	r3, r1
 8009dd8:	4682      	mov	sl, r0
 8009dda:	468b      	mov	fp, r1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f47f ae05 	bne.w	80099ec <_strtod_l+0x454>
 8009de2:	9a05      	ldr	r2, [sp, #20]
 8009de4:	2322      	movs	r3, #34	@ 0x22
 8009de6:	6013      	str	r3, [r2, #0]
 8009de8:	e600      	b.n	80099ec <_strtod_l+0x454>
 8009dea:	bf00      	nop
 8009dec:	0800f608 	.word	0x0800f608
 8009df0:	fffffc02 	.word	0xfffffc02
 8009df4:	39500000 	.word	0x39500000
 8009df8:	7ff00000 	.word	0x7ff00000
 8009dfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e00:	d165      	bne.n	8009ece <_strtod_l+0x936>
 8009e02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e08:	b35a      	cbz	r2, 8009e62 <_strtod_l+0x8ca>
 8009e0a:	4a9f      	ldr	r2, [pc, #636]	@ (800a088 <_strtod_l+0xaf0>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d12b      	bne.n	8009e68 <_strtod_l+0x8d0>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	4651      	mov	r1, sl
 8009e14:	b303      	cbz	r3, 8009e58 <_strtod_l+0x8c0>
 8009e16:	4b9d      	ldr	r3, [pc, #628]	@ (800a08c <_strtod_l+0xaf4>)
 8009e18:	465a      	mov	r2, fp
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	d81b      	bhi.n	8009e5e <_strtod_l+0x8c6>
 8009e26:	0d1b      	lsrs	r3, r3, #20
 8009e28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d119      	bne.n	8009e68 <_strtod_l+0x8d0>
 8009e34:	4b96      	ldr	r3, [pc, #600]	@ (800a090 <_strtod_l+0xaf8>)
 8009e36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d102      	bne.n	8009e42 <_strtod_l+0x8aa>
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	f43f adca 	beq.w	80099d6 <_strtod_l+0x43e>
 8009e42:	4b92      	ldr	r3, [pc, #584]	@ (800a08c <_strtod_l+0xaf4>)
 8009e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e46:	401a      	ands	r2, r3
 8009e48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e4c:	f04f 0a00 	mov.w	sl, #0
 8009e50:	9b08      	ldr	r3, [sp, #32]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1b8      	bne.n	8009dc8 <_strtod_l+0x830>
 8009e56:	e5c9      	b.n	80099ec <_strtod_l+0x454>
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5c:	e7e8      	b.n	8009e30 <_strtod_l+0x898>
 8009e5e:	4613      	mov	r3, r2
 8009e60:	e7e6      	b.n	8009e30 <_strtod_l+0x898>
 8009e62:	ea53 030a 	orrs.w	r3, r3, sl
 8009e66:	d0a1      	beq.n	8009dac <_strtod_l+0x814>
 8009e68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e6a:	b1db      	cbz	r3, 8009ea4 <_strtod_l+0x90c>
 8009e6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e6e:	4213      	tst	r3, r2
 8009e70:	d0ee      	beq.n	8009e50 <_strtod_l+0x8b8>
 8009e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e74:	9a08      	ldr	r2, [sp, #32]
 8009e76:	4650      	mov	r0, sl
 8009e78:	4659      	mov	r1, fp
 8009e7a:	b1bb      	cbz	r3, 8009eac <_strtod_l+0x914>
 8009e7c:	f7ff fb6d 	bl	800955a <sulp>
 8009e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e84:	ec53 2b10 	vmov	r2, r3, d0
 8009e88:	f7f6 fa00 	bl	800028c <__adddf3>
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	468b      	mov	fp, r1
 8009e90:	e7de      	b.n	8009e50 <_strtod_l+0x8b8>
 8009e92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e9e:	f04f 3aff 	mov.w	sl, #4294967295
 8009ea2:	e7d5      	b.n	8009e50 <_strtod_l+0x8b8>
 8009ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ea6:	ea13 0f0a 	tst.w	r3, sl
 8009eaa:	e7e1      	b.n	8009e70 <_strtod_l+0x8d8>
 8009eac:	f7ff fb55 	bl	800955a <sulp>
 8009eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eb4:	ec53 2b10 	vmov	r2, r3, d0
 8009eb8:	f7f6 f9e6 	bl	8000288 <__aeabi_dsub>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4682      	mov	sl, r0
 8009ec2:	468b      	mov	fp, r1
 8009ec4:	f7f6 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d0c1      	beq.n	8009e50 <_strtod_l+0x8b8>
 8009ecc:	e619      	b.n	8009b02 <_strtod_l+0x56a>
 8009ece:	4641      	mov	r1, r8
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f003 fa35 	bl	800d340 <__ratio>
 8009ed6:	ec57 6b10 	vmov	r6, r7, d0
 8009eda:	2200      	movs	r2, #0
 8009edc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 fe04 	bl	8000af0 <__aeabi_dcmple>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d06f      	beq.n	8009fcc <_strtod_l+0xa34>
 8009eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d17a      	bne.n	8009fe8 <_strtod_l+0xa50>
 8009ef2:	f1ba 0f00 	cmp.w	sl, #0
 8009ef6:	d158      	bne.n	8009faa <_strtod_l+0xa12>
 8009ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d15a      	bne.n	8009fb8 <_strtod_l+0xa20>
 8009f02:	4b64      	ldr	r3, [pc, #400]	@ (800a094 <_strtod_l+0xafc>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	4630      	mov	r0, r6
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f6 fde7 	bl	8000adc <__aeabi_dcmplt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d159      	bne.n	8009fc6 <_strtod_l+0xa2e>
 8009f12:	4630      	mov	r0, r6
 8009f14:	4639      	mov	r1, r7
 8009f16:	4b60      	ldr	r3, [pc, #384]	@ (800a098 <_strtod_l+0xb00>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f7f6 fb6d 	bl	80005f8 <__aeabi_dmul>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f26:	9606      	str	r6, [sp, #24]
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f2e:	4d57      	ldr	r5, [pc, #348]	@ (800a08c <_strtod_l+0xaf4>)
 8009f30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f36:	401d      	ands	r5, r3
 8009f38:	4b58      	ldr	r3, [pc, #352]	@ (800a09c <_strtod_l+0xb04>)
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	f040 80b2 	bne.w	800a0a4 <_strtod_l+0xb0c>
 8009f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f46:	ec4b ab10 	vmov	d0, sl, fp
 8009f4a:	f003 f931 	bl	800d1b0 <__ulp>
 8009f4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f52:	ec51 0b10 	vmov	r0, r1, d0
 8009f56:	f7f6 fb4f 	bl	80005f8 <__aeabi_dmul>
 8009f5a:	4652      	mov	r2, sl
 8009f5c:	465b      	mov	r3, fp
 8009f5e:	f7f6 f995 	bl	800028c <__adddf3>
 8009f62:	460b      	mov	r3, r1
 8009f64:	4949      	ldr	r1, [pc, #292]	@ (800a08c <_strtod_l+0xaf4>)
 8009f66:	4a4e      	ldr	r2, [pc, #312]	@ (800a0a0 <_strtod_l+0xb08>)
 8009f68:	4019      	ands	r1, r3
 8009f6a:	4291      	cmp	r1, r2
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	d942      	bls.n	8009ff6 <_strtod_l+0xa5e>
 8009f70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f72:	4b47      	ldr	r3, [pc, #284]	@ (800a090 <_strtod_l+0xaf8>)
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d103      	bne.n	8009f80 <_strtod_l+0x9e8>
 8009f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	f43f ad2b 	beq.w	80099d6 <_strtod_l+0x43e>
 8009f80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a090 <_strtod_l+0xaf8>
 8009f84:	f04f 3aff 	mov.w	sl, #4294967295
 8009f88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f8a:	9805      	ldr	r0, [sp, #20]
 8009f8c:	f002 fddc 	bl	800cb48 <_Bfree>
 8009f90:	9805      	ldr	r0, [sp, #20]
 8009f92:	4649      	mov	r1, r9
 8009f94:	f002 fdd8 	bl	800cb48 <_Bfree>
 8009f98:	9805      	ldr	r0, [sp, #20]
 8009f9a:	4641      	mov	r1, r8
 8009f9c:	f002 fdd4 	bl	800cb48 <_Bfree>
 8009fa0:	9805      	ldr	r0, [sp, #20]
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f002 fdd0 	bl	800cb48 <_Bfree>
 8009fa8:	e618      	b.n	8009bdc <_strtod_l+0x644>
 8009faa:	f1ba 0f01 	cmp.w	sl, #1
 8009fae:	d103      	bne.n	8009fb8 <_strtod_l+0xa20>
 8009fb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f43f ada5 	beq.w	8009b02 <_strtod_l+0x56a>
 8009fb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a068 <_strtod_l+0xad0>
 8009fbc:	4f35      	ldr	r7, [pc, #212]	@ (800a094 <_strtod_l+0xafc>)
 8009fbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	e7b1      	b.n	8009f2a <_strtod_l+0x992>
 8009fc6:	4f34      	ldr	r7, [pc, #208]	@ (800a098 <_strtod_l+0xb00>)
 8009fc8:	2600      	movs	r6, #0
 8009fca:	e7aa      	b.n	8009f22 <_strtod_l+0x98a>
 8009fcc:	4b32      	ldr	r3, [pc, #200]	@ (800a098 <_strtod_l+0xb00>)
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d09f      	beq.n	8009f22 <_strtod_l+0x98a>
 8009fe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009fe6:	e7a0      	b.n	8009f2a <_strtod_l+0x992>
 8009fe8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a070 <_strtod_l+0xad8>
 8009fec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ff0:	ec57 6b17 	vmov	r6, r7, d7
 8009ff4:	e799      	b.n	8009f2a <_strtod_l+0x992>
 8009ff6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1c1      	bne.n	8009f88 <_strtod_l+0x9f0>
 800a004:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a008:	0d1b      	lsrs	r3, r3, #20
 800a00a:	051b      	lsls	r3, r3, #20
 800a00c:	429d      	cmp	r5, r3
 800a00e:	d1bb      	bne.n	8009f88 <_strtod_l+0x9f0>
 800a010:	4630      	mov	r0, r6
 800a012:	4639      	mov	r1, r7
 800a014:	f7f6 fe50 	bl	8000cb8 <__aeabi_d2lz>
 800a018:	f7f6 fac0 	bl	800059c <__aeabi_l2d>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	460b      	mov	r3, r1
 800a02a:	4602      	mov	r2, r0
 800a02c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a030:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a036:	ea46 060a 	orr.w	r6, r6, sl
 800a03a:	431e      	orrs	r6, r3
 800a03c:	d06f      	beq.n	800a11e <_strtod_l+0xb86>
 800a03e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a078 <_strtod_l+0xae0>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f7f6 fd4a 	bl	8000adc <__aeabi_dcmplt>
 800a048:	2800      	cmp	r0, #0
 800a04a:	f47f accf 	bne.w	80099ec <_strtod_l+0x454>
 800a04e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a080 <_strtod_l+0xae8>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a058:	f7f6 fd5e 	bl	8000b18 <__aeabi_dcmpgt>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d093      	beq.n	8009f88 <_strtod_l+0x9f0>
 800a060:	e4c4      	b.n	80099ec <_strtod_l+0x454>
 800a062:	bf00      	nop
 800a064:	f3af 8000 	nop.w
 800a068:	00000000 	.word	0x00000000
 800a06c:	bff00000 	.word	0xbff00000
 800a070:	00000000 	.word	0x00000000
 800a074:	3ff00000 	.word	0x3ff00000
 800a078:	94a03595 	.word	0x94a03595
 800a07c:	3fdfffff 	.word	0x3fdfffff
 800a080:	35afe535 	.word	0x35afe535
 800a084:	3fe00000 	.word	0x3fe00000
 800a088:	000fffff 	.word	0x000fffff
 800a08c:	7ff00000 	.word	0x7ff00000
 800a090:	7fefffff 	.word	0x7fefffff
 800a094:	3ff00000 	.word	0x3ff00000
 800a098:	3fe00000 	.word	0x3fe00000
 800a09c:	7fe00000 	.word	0x7fe00000
 800a0a0:	7c9fffff 	.word	0x7c9fffff
 800a0a4:	9b08      	ldr	r3, [sp, #32]
 800a0a6:	b323      	cbz	r3, 800a0f2 <_strtod_l+0xb5a>
 800a0a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a0ac:	d821      	bhi.n	800a0f2 <_strtod_l+0xb5a>
 800a0ae:	a328      	add	r3, pc, #160	@ (adr r3, 800a150 <_strtod_l+0xbb8>)
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7f6 fd1a 	bl	8000af0 <__aeabi_dcmple>
 800a0bc:	b1a0      	cbz	r0, 800a0e8 <_strtod_l+0xb50>
 800a0be:	4639      	mov	r1, r7
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f7f6 fd71 	bl	8000ba8 <__aeabi_d2uiz>
 800a0c6:	2801      	cmp	r0, #1
 800a0c8:	bf38      	it	cc
 800a0ca:	2001      	movcc	r0, #1
 800a0cc:	f7f6 fa1a 	bl	8000504 <__aeabi_ui2d>
 800a0d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	b9fb      	cbnz	r3, 800a118 <_strtod_l+0xb80>
 800a0d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800a0de:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a0e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a0ee:	1b5b      	subs	r3, r3, r5
 800a0f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0fa:	f003 f859 	bl	800d1b0 <__ulp>
 800a0fe:	4650      	mov	r0, sl
 800a100:	ec53 2b10 	vmov	r2, r3, d0
 800a104:	4659      	mov	r1, fp
 800a106:	f7f6 fa77 	bl	80005f8 <__aeabi_dmul>
 800a10a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a10e:	f7f6 f8bd 	bl	800028c <__adddf3>
 800a112:	4682      	mov	sl, r0
 800a114:	468b      	mov	fp, r1
 800a116:	e770      	b.n	8009ffa <_strtod_l+0xa62>
 800a118:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a11c:	e7e0      	b.n	800a0e0 <_strtod_l+0xb48>
 800a11e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a158 <_strtod_l+0xbc0>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 fcda 	bl	8000adc <__aeabi_dcmplt>
 800a128:	e798      	b.n	800a05c <_strtod_l+0xac4>
 800a12a:	2300      	movs	r3, #0
 800a12c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a12e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	f7ff ba6d 	b.w	8009612 <_strtod_l+0x7a>
 800a138:	2a65      	cmp	r2, #101	@ 0x65
 800a13a:	f43f ab66 	beq.w	800980a <_strtod_l+0x272>
 800a13e:	2a45      	cmp	r2, #69	@ 0x45
 800a140:	f43f ab63 	beq.w	800980a <_strtod_l+0x272>
 800a144:	2301      	movs	r3, #1
 800a146:	f7ff bb9e 	b.w	8009886 <_strtod_l+0x2ee>
 800a14a:	bf00      	nop
 800a14c:	f3af 8000 	nop.w
 800a150:	ffc00000 	.word	0xffc00000
 800a154:	41dfffff 	.word	0x41dfffff
 800a158:	94a03595 	.word	0x94a03595
 800a15c:	3fcfffff 	.word	0x3fcfffff

0800a160 <_strtod_r>:
 800a160:	4b01      	ldr	r3, [pc, #4]	@ (800a168 <_strtod_r+0x8>)
 800a162:	f7ff ba19 	b.w	8009598 <_strtod_l>
 800a166:	bf00      	nop
 800a168:	200000b0 	.word	0x200000b0

0800a16c <strtod>:
 800a16c:	460a      	mov	r2, r1
 800a16e:	4601      	mov	r1, r0
 800a170:	4802      	ldr	r0, [pc, #8]	@ (800a17c <strtod+0x10>)
 800a172:	4b03      	ldr	r3, [pc, #12]	@ (800a180 <strtod+0x14>)
 800a174:	6800      	ldr	r0, [r0, #0]
 800a176:	f7ff ba0f 	b.w	8009598 <_strtod_l>
 800a17a:	bf00      	nop
 800a17c:	2000021c 	.word	0x2000021c
 800a180:	200000b0 	.word	0x200000b0

0800a184 <__cvt>:
 800a184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	ec57 6b10 	vmov	r6, r7, d0
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	460c      	mov	r4, r1
 800a190:	4619      	mov	r1, r3
 800a192:	463b      	mov	r3, r7
 800a194:	bfbb      	ittet	lt
 800a196:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a19a:	461f      	movlt	r7, r3
 800a19c:	2300      	movge	r3, #0
 800a19e:	232d      	movlt	r3, #45	@ 0x2d
 800a1a0:	700b      	strb	r3, [r1, #0]
 800a1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a1a8:	4691      	mov	r9, r2
 800a1aa:	f023 0820 	bic.w	r8, r3, #32
 800a1ae:	bfbc      	itt	lt
 800a1b0:	4632      	movlt	r2, r6
 800a1b2:	4616      	movlt	r6, r2
 800a1b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1b8:	d005      	beq.n	800a1c6 <__cvt+0x42>
 800a1ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1be:	d100      	bne.n	800a1c2 <__cvt+0x3e>
 800a1c0:	3401      	adds	r4, #1
 800a1c2:	2102      	movs	r1, #2
 800a1c4:	e000      	b.n	800a1c8 <__cvt+0x44>
 800a1c6:	2103      	movs	r1, #3
 800a1c8:	ab03      	add	r3, sp, #12
 800a1ca:	9301      	str	r3, [sp, #4]
 800a1cc:	ab02      	add	r3, sp, #8
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	ec47 6b10 	vmov	d0, r6, r7
 800a1d4:	4653      	mov	r3, sl
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	f001 fa66 	bl	800b6a8 <_dtoa_r>
 800a1dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	d119      	bne.n	800a218 <__cvt+0x94>
 800a1e4:	f019 0f01 	tst.w	r9, #1
 800a1e8:	d00e      	beq.n	800a208 <__cvt+0x84>
 800a1ea:	eb00 0904 	add.w	r9, r0, r4
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	f7f6 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1fa:	b108      	cbz	r0, 800a200 <__cvt+0x7c>
 800a1fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a200:	2230      	movs	r2, #48	@ 0x30
 800a202:	9b03      	ldr	r3, [sp, #12]
 800a204:	454b      	cmp	r3, r9
 800a206:	d31e      	bcc.n	800a246 <__cvt+0xc2>
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a20c:	1b5b      	subs	r3, r3, r5
 800a20e:	4628      	mov	r0, r5
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	b004      	add	sp, #16
 800a214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a218:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a21c:	eb00 0904 	add.w	r9, r0, r4
 800a220:	d1e5      	bne.n	800a1ee <__cvt+0x6a>
 800a222:	7803      	ldrb	r3, [r0, #0]
 800a224:	2b30      	cmp	r3, #48	@ 0x30
 800a226:	d10a      	bne.n	800a23e <__cvt+0xba>
 800a228:	2200      	movs	r2, #0
 800a22a:	2300      	movs	r3, #0
 800a22c:	4630      	mov	r0, r6
 800a22e:	4639      	mov	r1, r7
 800a230:	f7f6 fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a234:	b918      	cbnz	r0, 800a23e <__cvt+0xba>
 800a236:	f1c4 0401 	rsb	r4, r4, #1
 800a23a:	f8ca 4000 	str.w	r4, [sl]
 800a23e:	f8da 3000 	ldr.w	r3, [sl]
 800a242:	4499      	add	r9, r3
 800a244:	e7d3      	b.n	800a1ee <__cvt+0x6a>
 800a246:	1c59      	adds	r1, r3, #1
 800a248:	9103      	str	r1, [sp, #12]
 800a24a:	701a      	strb	r2, [r3, #0]
 800a24c:	e7d9      	b.n	800a202 <__cvt+0x7e>

0800a24e <__exponent>:
 800a24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a250:	2900      	cmp	r1, #0
 800a252:	bfba      	itte	lt
 800a254:	4249      	neglt	r1, r1
 800a256:	232d      	movlt	r3, #45	@ 0x2d
 800a258:	232b      	movge	r3, #43	@ 0x2b
 800a25a:	2909      	cmp	r1, #9
 800a25c:	7002      	strb	r2, [r0, #0]
 800a25e:	7043      	strb	r3, [r0, #1]
 800a260:	dd29      	ble.n	800a2b6 <__exponent+0x68>
 800a262:	f10d 0307 	add.w	r3, sp, #7
 800a266:	461d      	mov	r5, r3
 800a268:	270a      	movs	r7, #10
 800a26a:	461a      	mov	r2, r3
 800a26c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a270:	fb07 1416 	mls	r4, r7, r6, r1
 800a274:	3430      	adds	r4, #48	@ 0x30
 800a276:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a27a:	460c      	mov	r4, r1
 800a27c:	2c63      	cmp	r4, #99	@ 0x63
 800a27e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a282:	4631      	mov	r1, r6
 800a284:	dcf1      	bgt.n	800a26a <__exponent+0x1c>
 800a286:	3130      	adds	r1, #48	@ 0x30
 800a288:	1e94      	subs	r4, r2, #2
 800a28a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a28e:	1c41      	adds	r1, r0, #1
 800a290:	4623      	mov	r3, r4
 800a292:	42ab      	cmp	r3, r5
 800a294:	d30a      	bcc.n	800a2ac <__exponent+0x5e>
 800a296:	f10d 0309 	add.w	r3, sp, #9
 800a29a:	1a9b      	subs	r3, r3, r2
 800a29c:	42ac      	cmp	r4, r5
 800a29e:	bf88      	it	hi
 800a2a0:	2300      	movhi	r3, #0
 800a2a2:	3302      	adds	r3, #2
 800a2a4:	4403      	add	r3, r0
 800a2a6:	1a18      	subs	r0, r3, r0
 800a2a8:	b003      	add	sp, #12
 800a2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a2b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a2b4:	e7ed      	b.n	800a292 <__exponent+0x44>
 800a2b6:	2330      	movs	r3, #48	@ 0x30
 800a2b8:	3130      	adds	r1, #48	@ 0x30
 800a2ba:	7083      	strb	r3, [r0, #2]
 800a2bc:	70c1      	strb	r1, [r0, #3]
 800a2be:	1d03      	adds	r3, r0, #4
 800a2c0:	e7f1      	b.n	800a2a6 <__exponent+0x58>
	...

0800a2c4 <_printf_float>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	b08d      	sub	sp, #52	@ 0x34
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2d0:	4616      	mov	r6, r2
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	f001 f8ab 	bl	800b430 <_localeconv_r>
 800a2da:	6803      	ldr	r3, [r0, #0]
 800a2dc:	9304      	str	r3, [sp, #16]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7f5 ffc6 	bl	8000270 <strlen>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ec:	9005      	str	r0, [sp, #20]
 800a2ee:	3307      	adds	r3, #7
 800a2f0:	f023 0307 	bic.w	r3, r3, #7
 800a2f4:	f103 0208 	add.w	r2, r3, #8
 800a2f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2fc:	f8d4 b000 	ldr.w	fp, [r4]
 800a300:	f8c8 2000 	str.w	r2, [r8]
 800a304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a308:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a30c:	9307      	str	r3, [sp, #28]
 800a30e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a312:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a31a:	4b9c      	ldr	r3, [pc, #624]	@ (800a58c <_printf_float+0x2c8>)
 800a31c:	f04f 32ff 	mov.w	r2, #4294967295
 800a320:	f7f6 fc04 	bl	8000b2c <__aeabi_dcmpun>
 800a324:	bb70      	cbnz	r0, 800a384 <_printf_float+0xc0>
 800a326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a32a:	4b98      	ldr	r3, [pc, #608]	@ (800a58c <_printf_float+0x2c8>)
 800a32c:	f04f 32ff 	mov.w	r2, #4294967295
 800a330:	f7f6 fbde 	bl	8000af0 <__aeabi_dcmple>
 800a334:	bb30      	cbnz	r0, 800a384 <_printf_float+0xc0>
 800a336:	2200      	movs	r2, #0
 800a338:	2300      	movs	r3, #0
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f6 fbcd 	bl	8000adc <__aeabi_dcmplt>
 800a342:	b110      	cbz	r0, 800a34a <_printf_float+0x86>
 800a344:	232d      	movs	r3, #45	@ 0x2d
 800a346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a34a:	4a91      	ldr	r2, [pc, #580]	@ (800a590 <_printf_float+0x2cc>)
 800a34c:	4b91      	ldr	r3, [pc, #580]	@ (800a594 <_printf_float+0x2d0>)
 800a34e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a352:	bf94      	ite	ls
 800a354:	4690      	movls	r8, r2
 800a356:	4698      	movhi	r8, r3
 800a358:	2303      	movs	r3, #3
 800a35a:	6123      	str	r3, [r4, #16]
 800a35c:	f02b 0304 	bic.w	r3, fp, #4
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	f04f 0900 	mov.w	r9, #0
 800a366:	9700      	str	r7, [sp, #0]
 800a368:	4633      	mov	r3, r6
 800a36a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a36c:	4621      	mov	r1, r4
 800a36e:	4628      	mov	r0, r5
 800a370:	f000 f9d2 	bl	800a718 <_printf_common>
 800a374:	3001      	adds	r0, #1
 800a376:	f040 808d 	bne.w	800a494 <_printf_float+0x1d0>
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	b00d      	add	sp, #52	@ 0x34
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a384:	4642      	mov	r2, r8
 800a386:	464b      	mov	r3, r9
 800a388:	4640      	mov	r0, r8
 800a38a:	4649      	mov	r1, r9
 800a38c:	f7f6 fbce 	bl	8000b2c <__aeabi_dcmpun>
 800a390:	b140      	cbz	r0, 800a3a4 <_printf_float+0xe0>
 800a392:	464b      	mov	r3, r9
 800a394:	2b00      	cmp	r3, #0
 800a396:	bfbc      	itt	lt
 800a398:	232d      	movlt	r3, #45	@ 0x2d
 800a39a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a39e:	4a7e      	ldr	r2, [pc, #504]	@ (800a598 <_printf_float+0x2d4>)
 800a3a0:	4b7e      	ldr	r3, [pc, #504]	@ (800a59c <_printf_float+0x2d8>)
 800a3a2:	e7d4      	b.n	800a34e <_printf_float+0x8a>
 800a3a4:	6863      	ldr	r3, [r4, #4]
 800a3a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a3aa:	9206      	str	r2, [sp, #24]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	d13b      	bne.n	800a428 <_printf_float+0x164>
 800a3b0:	2306      	movs	r3, #6
 800a3b2:	6063      	str	r3, [r4, #4]
 800a3b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	9303      	str	r3, [sp, #12]
 800a3be:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3c4:	ab09      	add	r3, sp, #36	@ 0x24
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	ec49 8b10 	vmov	d0, r8, r9
 800a3ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7ff fed6 	bl	800a184 <__cvt>
 800a3d8:	9b06      	ldr	r3, [sp, #24]
 800a3da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3dc:	2b47      	cmp	r3, #71	@ 0x47
 800a3de:	4680      	mov	r8, r0
 800a3e0:	d129      	bne.n	800a436 <_printf_float+0x172>
 800a3e2:	1cc8      	adds	r0, r1, #3
 800a3e4:	db02      	blt.n	800a3ec <_printf_float+0x128>
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	4299      	cmp	r1, r3
 800a3ea:	dd41      	ble.n	800a470 <_printf_float+0x1ac>
 800a3ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3f0:	fa5f fa8a 	uxtb.w	sl, sl
 800a3f4:	3901      	subs	r1, #1
 800a3f6:	4652      	mov	r2, sl
 800a3f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3fe:	f7ff ff26 	bl	800a24e <__exponent>
 800a402:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a404:	1813      	adds	r3, r2, r0
 800a406:	2a01      	cmp	r2, #1
 800a408:	4681      	mov	r9, r0
 800a40a:	6123      	str	r3, [r4, #16]
 800a40c:	dc02      	bgt.n	800a414 <_printf_float+0x150>
 800a40e:	6822      	ldr	r2, [r4, #0]
 800a410:	07d2      	lsls	r2, r2, #31
 800a412:	d501      	bpl.n	800a418 <_printf_float+0x154>
 800a414:	3301      	adds	r3, #1
 800a416:	6123      	str	r3, [r4, #16]
 800a418:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0a2      	beq.n	800a366 <_printf_float+0xa2>
 800a420:	232d      	movs	r3, #45	@ 0x2d
 800a422:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a426:	e79e      	b.n	800a366 <_printf_float+0xa2>
 800a428:	9a06      	ldr	r2, [sp, #24]
 800a42a:	2a47      	cmp	r2, #71	@ 0x47
 800a42c:	d1c2      	bne.n	800a3b4 <_printf_float+0xf0>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1c0      	bne.n	800a3b4 <_printf_float+0xf0>
 800a432:	2301      	movs	r3, #1
 800a434:	e7bd      	b.n	800a3b2 <_printf_float+0xee>
 800a436:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a43a:	d9db      	bls.n	800a3f4 <_printf_float+0x130>
 800a43c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a440:	d118      	bne.n	800a474 <_printf_float+0x1b0>
 800a442:	2900      	cmp	r1, #0
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	dd0b      	ble.n	800a460 <_printf_float+0x19c>
 800a448:	6121      	str	r1, [r4, #16]
 800a44a:	b913      	cbnz	r3, 800a452 <_printf_float+0x18e>
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	07d0      	lsls	r0, r2, #31
 800a450:	d502      	bpl.n	800a458 <_printf_float+0x194>
 800a452:	3301      	adds	r3, #1
 800a454:	440b      	add	r3, r1
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a45a:	f04f 0900 	mov.w	r9, #0
 800a45e:	e7db      	b.n	800a418 <_printf_float+0x154>
 800a460:	b913      	cbnz	r3, 800a468 <_printf_float+0x1a4>
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	07d2      	lsls	r2, r2, #31
 800a466:	d501      	bpl.n	800a46c <_printf_float+0x1a8>
 800a468:	3302      	adds	r3, #2
 800a46a:	e7f4      	b.n	800a456 <_printf_float+0x192>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e7f2      	b.n	800a456 <_printf_float+0x192>
 800a470:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a476:	4299      	cmp	r1, r3
 800a478:	db05      	blt.n	800a486 <_printf_float+0x1c2>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	6121      	str	r1, [r4, #16]
 800a47e:	07d8      	lsls	r0, r3, #31
 800a480:	d5ea      	bpl.n	800a458 <_printf_float+0x194>
 800a482:	1c4b      	adds	r3, r1, #1
 800a484:	e7e7      	b.n	800a456 <_printf_float+0x192>
 800a486:	2900      	cmp	r1, #0
 800a488:	bfd4      	ite	le
 800a48a:	f1c1 0202 	rsble	r2, r1, #2
 800a48e:	2201      	movgt	r2, #1
 800a490:	4413      	add	r3, r2
 800a492:	e7e0      	b.n	800a456 <_printf_float+0x192>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	055a      	lsls	r2, r3, #21
 800a498:	d407      	bmi.n	800a4aa <_printf_float+0x1e6>
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	4642      	mov	r2, r8
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b8      	blx	r7
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d12b      	bne.n	800a500 <_printf_float+0x23c>
 800a4a8:	e767      	b.n	800a37a <_printf_float+0xb6>
 800a4aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a4ae:	f240 80dd 	bls.w	800a66c <_printf_float+0x3a8>
 800a4b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f7f6 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d033      	beq.n	800a52a <_printf_float+0x266>
 800a4c2:	4a37      	ldr	r2, [pc, #220]	@ (800a5a0 <_printf_float+0x2dc>)
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f af54 	beq.w	800a37a <_printf_float+0xb6>
 800a4d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4d6:	4543      	cmp	r3, r8
 800a4d8:	db02      	blt.n	800a4e0 <_printf_float+0x21c>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	07d8      	lsls	r0, r3, #31
 800a4de:	d50f      	bpl.n	800a500 <_printf_float+0x23c>
 800a4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e4:	4631      	mov	r1, r6
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	47b8      	blx	r7
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	f43f af45 	beq.w	800a37a <_printf_float+0xb6>
 800a4f0:	f04f 0900 	mov.w	r9, #0
 800a4f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4f8:	f104 0a1a 	add.w	sl, r4, #26
 800a4fc:	45c8      	cmp	r8, r9
 800a4fe:	dc09      	bgt.n	800a514 <_printf_float+0x250>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	079b      	lsls	r3, r3, #30
 800a504:	f100 8103 	bmi.w	800a70e <_printf_float+0x44a>
 800a508:	68e0      	ldr	r0, [r4, #12]
 800a50a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a50c:	4298      	cmp	r0, r3
 800a50e:	bfb8      	it	lt
 800a510:	4618      	movlt	r0, r3
 800a512:	e734      	b.n	800a37e <_printf_float+0xba>
 800a514:	2301      	movs	r3, #1
 800a516:	4652      	mov	r2, sl
 800a518:	4631      	mov	r1, r6
 800a51a:	4628      	mov	r0, r5
 800a51c:	47b8      	blx	r7
 800a51e:	3001      	adds	r0, #1
 800a520:	f43f af2b 	beq.w	800a37a <_printf_float+0xb6>
 800a524:	f109 0901 	add.w	r9, r9, #1
 800a528:	e7e8      	b.n	800a4fc <_printf_float+0x238>
 800a52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	dc39      	bgt.n	800a5a4 <_printf_float+0x2e0>
 800a530:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a0 <_printf_float+0x2dc>)
 800a532:	2301      	movs	r3, #1
 800a534:	4631      	mov	r1, r6
 800a536:	4628      	mov	r0, r5
 800a538:	47b8      	blx	r7
 800a53a:	3001      	adds	r0, #1
 800a53c:	f43f af1d 	beq.w	800a37a <_printf_float+0xb6>
 800a540:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a544:	ea59 0303 	orrs.w	r3, r9, r3
 800a548:	d102      	bne.n	800a550 <_printf_float+0x28c>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	07d9      	lsls	r1, r3, #31
 800a54e:	d5d7      	bpl.n	800a500 <_printf_float+0x23c>
 800a550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a554:	4631      	mov	r1, r6
 800a556:	4628      	mov	r0, r5
 800a558:	47b8      	blx	r7
 800a55a:	3001      	adds	r0, #1
 800a55c:	f43f af0d 	beq.w	800a37a <_printf_float+0xb6>
 800a560:	f04f 0a00 	mov.w	sl, #0
 800a564:	f104 0b1a 	add.w	fp, r4, #26
 800a568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56a:	425b      	negs	r3, r3
 800a56c:	4553      	cmp	r3, sl
 800a56e:	dc01      	bgt.n	800a574 <_printf_float+0x2b0>
 800a570:	464b      	mov	r3, r9
 800a572:	e793      	b.n	800a49c <_printf_float+0x1d8>
 800a574:	2301      	movs	r3, #1
 800a576:	465a      	mov	r2, fp
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	47b8      	blx	r7
 800a57e:	3001      	adds	r0, #1
 800a580:	f43f aefb 	beq.w	800a37a <_printf_float+0xb6>
 800a584:	f10a 0a01 	add.w	sl, sl, #1
 800a588:	e7ee      	b.n	800a568 <_printf_float+0x2a4>
 800a58a:	bf00      	nop
 800a58c:	7fefffff 	.word	0x7fefffff
 800a590:	0800f630 	.word	0x0800f630
 800a594:	0800f634 	.word	0x0800f634
 800a598:	0800f638 	.word	0x0800f638
 800a59c:	0800f63c 	.word	0x0800f63c
 800a5a0:	0800f640 	.word	0x0800f640
 800a5a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a5aa:	4553      	cmp	r3, sl
 800a5ac:	bfa8      	it	ge
 800a5ae:	4653      	movge	r3, sl
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	4699      	mov	r9, r3
 800a5b4:	dc36      	bgt.n	800a624 <_printf_float+0x360>
 800a5b6:	f04f 0b00 	mov.w	fp, #0
 800a5ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5be:	f104 021a 	add.w	r2, r4, #26
 800a5c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5c4:	9306      	str	r3, [sp, #24]
 800a5c6:	eba3 0309 	sub.w	r3, r3, r9
 800a5ca:	455b      	cmp	r3, fp
 800a5cc:	dc31      	bgt.n	800a632 <_printf_float+0x36e>
 800a5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5d0:	459a      	cmp	sl, r3
 800a5d2:	dc3a      	bgt.n	800a64a <_printf_float+0x386>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	07da      	lsls	r2, r3, #31
 800a5d8:	d437      	bmi.n	800a64a <_printf_float+0x386>
 800a5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5dc:	ebaa 0903 	sub.w	r9, sl, r3
 800a5e0:	9b06      	ldr	r3, [sp, #24]
 800a5e2:	ebaa 0303 	sub.w	r3, sl, r3
 800a5e6:	4599      	cmp	r9, r3
 800a5e8:	bfa8      	it	ge
 800a5ea:	4699      	movge	r9, r3
 800a5ec:	f1b9 0f00 	cmp.w	r9, #0
 800a5f0:	dc33      	bgt.n	800a65a <_printf_float+0x396>
 800a5f2:	f04f 0800 	mov.w	r8, #0
 800a5f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5fa:	f104 0b1a 	add.w	fp, r4, #26
 800a5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a600:	ebaa 0303 	sub.w	r3, sl, r3
 800a604:	eba3 0309 	sub.w	r3, r3, r9
 800a608:	4543      	cmp	r3, r8
 800a60a:	f77f af79 	ble.w	800a500 <_printf_float+0x23c>
 800a60e:	2301      	movs	r3, #1
 800a610:	465a      	mov	r2, fp
 800a612:	4631      	mov	r1, r6
 800a614:	4628      	mov	r0, r5
 800a616:	47b8      	blx	r7
 800a618:	3001      	adds	r0, #1
 800a61a:	f43f aeae 	beq.w	800a37a <_printf_float+0xb6>
 800a61e:	f108 0801 	add.w	r8, r8, #1
 800a622:	e7ec      	b.n	800a5fe <_printf_float+0x33a>
 800a624:	4642      	mov	r2, r8
 800a626:	4631      	mov	r1, r6
 800a628:	4628      	mov	r0, r5
 800a62a:	47b8      	blx	r7
 800a62c:	3001      	adds	r0, #1
 800a62e:	d1c2      	bne.n	800a5b6 <_printf_float+0x2f2>
 800a630:	e6a3      	b.n	800a37a <_printf_float+0xb6>
 800a632:	2301      	movs	r3, #1
 800a634:	4631      	mov	r1, r6
 800a636:	4628      	mov	r0, r5
 800a638:	9206      	str	r2, [sp, #24]
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	f43f ae9c 	beq.w	800a37a <_printf_float+0xb6>
 800a642:	9a06      	ldr	r2, [sp, #24]
 800a644:	f10b 0b01 	add.w	fp, fp, #1
 800a648:	e7bb      	b.n	800a5c2 <_printf_float+0x2fe>
 800a64a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d1c0      	bne.n	800a5da <_printf_float+0x316>
 800a658:	e68f      	b.n	800a37a <_printf_float+0xb6>
 800a65a:	9a06      	ldr	r2, [sp, #24]
 800a65c:	464b      	mov	r3, r9
 800a65e:	4442      	add	r2, r8
 800a660:	4631      	mov	r1, r6
 800a662:	4628      	mov	r0, r5
 800a664:	47b8      	blx	r7
 800a666:	3001      	adds	r0, #1
 800a668:	d1c3      	bne.n	800a5f2 <_printf_float+0x32e>
 800a66a:	e686      	b.n	800a37a <_printf_float+0xb6>
 800a66c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a670:	f1ba 0f01 	cmp.w	sl, #1
 800a674:	dc01      	bgt.n	800a67a <_printf_float+0x3b6>
 800a676:	07db      	lsls	r3, r3, #31
 800a678:	d536      	bpl.n	800a6e8 <_printf_float+0x424>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4642      	mov	r2, r8
 800a67e:	4631      	mov	r1, r6
 800a680:	4628      	mov	r0, r5
 800a682:	47b8      	blx	r7
 800a684:	3001      	adds	r0, #1
 800a686:	f43f ae78 	beq.w	800a37a <_printf_float+0xb6>
 800a68a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	47b8      	blx	r7
 800a694:	3001      	adds	r0, #1
 800a696:	f43f ae70 	beq.w	800a37a <_printf_float+0xb6>
 800a69a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6a6:	f7f6 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6aa:	b9c0      	cbnz	r0, 800a6de <_printf_float+0x41a>
 800a6ac:	4653      	mov	r3, sl
 800a6ae:	f108 0201 	add.w	r2, r8, #1
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	47b8      	blx	r7
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d10c      	bne.n	800a6d6 <_printf_float+0x412>
 800a6bc:	e65d      	b.n	800a37a <_printf_float+0xb6>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	465a      	mov	r2, fp
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	47b8      	blx	r7
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	f43f ae56 	beq.w	800a37a <_printf_float+0xb6>
 800a6ce:	f108 0801 	add.w	r8, r8, #1
 800a6d2:	45d0      	cmp	r8, sl
 800a6d4:	dbf3      	blt.n	800a6be <_printf_float+0x3fa>
 800a6d6:	464b      	mov	r3, r9
 800a6d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6dc:	e6df      	b.n	800a49e <_printf_float+0x1da>
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	f104 0b1a 	add.w	fp, r4, #26
 800a6e6:	e7f4      	b.n	800a6d2 <_printf_float+0x40e>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	4642      	mov	r2, r8
 800a6ec:	e7e1      	b.n	800a6b2 <_printf_float+0x3ee>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	464a      	mov	r2, r9
 800a6f2:	4631      	mov	r1, r6
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	47b8      	blx	r7
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f43f ae3e 	beq.w	800a37a <_printf_float+0xb6>
 800a6fe:	f108 0801 	add.w	r8, r8, #1
 800a702:	68e3      	ldr	r3, [r4, #12]
 800a704:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a706:	1a5b      	subs	r3, r3, r1
 800a708:	4543      	cmp	r3, r8
 800a70a:	dcf0      	bgt.n	800a6ee <_printf_float+0x42a>
 800a70c:	e6fc      	b.n	800a508 <_printf_float+0x244>
 800a70e:	f04f 0800 	mov.w	r8, #0
 800a712:	f104 0919 	add.w	r9, r4, #25
 800a716:	e7f4      	b.n	800a702 <_printf_float+0x43e>

0800a718 <_printf_common>:
 800a718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a71c:	4616      	mov	r6, r2
 800a71e:	4698      	mov	r8, r3
 800a720:	688a      	ldr	r2, [r1, #8]
 800a722:	690b      	ldr	r3, [r1, #16]
 800a724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a728:	4293      	cmp	r3, r2
 800a72a:	bfb8      	it	lt
 800a72c:	4613      	movlt	r3, r2
 800a72e:	6033      	str	r3, [r6, #0]
 800a730:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a734:	4607      	mov	r7, r0
 800a736:	460c      	mov	r4, r1
 800a738:	b10a      	cbz	r2, 800a73e <_printf_common+0x26>
 800a73a:	3301      	adds	r3, #1
 800a73c:	6033      	str	r3, [r6, #0]
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	0699      	lsls	r1, r3, #26
 800a742:	bf42      	ittt	mi
 800a744:	6833      	ldrmi	r3, [r6, #0]
 800a746:	3302      	addmi	r3, #2
 800a748:	6033      	strmi	r3, [r6, #0]
 800a74a:	6825      	ldr	r5, [r4, #0]
 800a74c:	f015 0506 	ands.w	r5, r5, #6
 800a750:	d106      	bne.n	800a760 <_printf_common+0x48>
 800a752:	f104 0a19 	add.w	sl, r4, #25
 800a756:	68e3      	ldr	r3, [r4, #12]
 800a758:	6832      	ldr	r2, [r6, #0]
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	42ab      	cmp	r3, r5
 800a75e:	dc26      	bgt.n	800a7ae <_printf_common+0x96>
 800a760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a764:	6822      	ldr	r2, [r4, #0]
 800a766:	3b00      	subs	r3, #0
 800a768:	bf18      	it	ne
 800a76a:	2301      	movne	r3, #1
 800a76c:	0692      	lsls	r2, r2, #26
 800a76e:	d42b      	bmi.n	800a7c8 <_printf_common+0xb0>
 800a770:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a774:	4641      	mov	r1, r8
 800a776:	4638      	mov	r0, r7
 800a778:	47c8      	blx	r9
 800a77a:	3001      	adds	r0, #1
 800a77c:	d01e      	beq.n	800a7bc <_printf_common+0xa4>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	6922      	ldr	r2, [r4, #16]
 800a782:	f003 0306 	and.w	r3, r3, #6
 800a786:	2b04      	cmp	r3, #4
 800a788:	bf02      	ittt	eq
 800a78a:	68e5      	ldreq	r5, [r4, #12]
 800a78c:	6833      	ldreq	r3, [r6, #0]
 800a78e:	1aed      	subeq	r5, r5, r3
 800a790:	68a3      	ldr	r3, [r4, #8]
 800a792:	bf0c      	ite	eq
 800a794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a798:	2500      	movne	r5, #0
 800a79a:	4293      	cmp	r3, r2
 800a79c:	bfc4      	itt	gt
 800a79e:	1a9b      	subgt	r3, r3, r2
 800a7a0:	18ed      	addgt	r5, r5, r3
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	341a      	adds	r4, #26
 800a7a6:	42b5      	cmp	r5, r6
 800a7a8:	d11a      	bne.n	800a7e0 <_printf_common+0xc8>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	e008      	b.n	800a7c0 <_printf_common+0xa8>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4652      	mov	r2, sl
 800a7b2:	4641      	mov	r1, r8
 800a7b4:	4638      	mov	r0, r7
 800a7b6:	47c8      	blx	r9
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d103      	bne.n	800a7c4 <_printf_common+0xac>
 800a7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c4:	3501      	adds	r5, #1
 800a7c6:	e7c6      	b.n	800a756 <_printf_common+0x3e>
 800a7c8:	18e1      	adds	r1, r4, r3
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	2030      	movs	r0, #48	@ 0x30
 800a7ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7d2:	4422      	add	r2, r4
 800a7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7dc:	3302      	adds	r3, #2
 800a7de:	e7c7      	b.n	800a770 <_printf_common+0x58>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4622      	mov	r2, r4
 800a7e4:	4641      	mov	r1, r8
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	47c8      	blx	r9
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d0e6      	beq.n	800a7bc <_printf_common+0xa4>
 800a7ee:	3601      	adds	r6, #1
 800a7f0:	e7d9      	b.n	800a7a6 <_printf_common+0x8e>
	...

0800a7f4 <_printf_i>:
 800a7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	7e0f      	ldrb	r7, [r1, #24]
 800a7fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7fc:	2f78      	cmp	r7, #120	@ 0x78
 800a7fe:	4691      	mov	r9, r2
 800a800:	4680      	mov	r8, r0
 800a802:	460c      	mov	r4, r1
 800a804:	469a      	mov	sl, r3
 800a806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a80a:	d807      	bhi.n	800a81c <_printf_i+0x28>
 800a80c:	2f62      	cmp	r7, #98	@ 0x62
 800a80e:	d80a      	bhi.n	800a826 <_printf_i+0x32>
 800a810:	2f00      	cmp	r7, #0
 800a812:	f000 80d2 	beq.w	800a9ba <_printf_i+0x1c6>
 800a816:	2f58      	cmp	r7, #88	@ 0x58
 800a818:	f000 80b9 	beq.w	800a98e <_printf_i+0x19a>
 800a81c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a824:	e03a      	b.n	800a89c <_printf_i+0xa8>
 800a826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a82a:	2b15      	cmp	r3, #21
 800a82c:	d8f6      	bhi.n	800a81c <_printf_i+0x28>
 800a82e:	a101      	add	r1, pc, #4	@ (adr r1, 800a834 <_printf_i+0x40>)
 800a830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a834:	0800a88d 	.word	0x0800a88d
 800a838:	0800a8a1 	.word	0x0800a8a1
 800a83c:	0800a81d 	.word	0x0800a81d
 800a840:	0800a81d 	.word	0x0800a81d
 800a844:	0800a81d 	.word	0x0800a81d
 800a848:	0800a81d 	.word	0x0800a81d
 800a84c:	0800a8a1 	.word	0x0800a8a1
 800a850:	0800a81d 	.word	0x0800a81d
 800a854:	0800a81d 	.word	0x0800a81d
 800a858:	0800a81d 	.word	0x0800a81d
 800a85c:	0800a81d 	.word	0x0800a81d
 800a860:	0800a9a1 	.word	0x0800a9a1
 800a864:	0800a8cb 	.word	0x0800a8cb
 800a868:	0800a95b 	.word	0x0800a95b
 800a86c:	0800a81d 	.word	0x0800a81d
 800a870:	0800a81d 	.word	0x0800a81d
 800a874:	0800a9c3 	.word	0x0800a9c3
 800a878:	0800a81d 	.word	0x0800a81d
 800a87c:	0800a8cb 	.word	0x0800a8cb
 800a880:	0800a81d 	.word	0x0800a81d
 800a884:	0800a81d 	.word	0x0800a81d
 800a888:	0800a963 	.word	0x0800a963
 800a88c:	6833      	ldr	r3, [r6, #0]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6032      	str	r2, [r6, #0]
 800a894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a89c:	2301      	movs	r3, #1
 800a89e:	e09d      	b.n	800a9dc <_printf_i+0x1e8>
 800a8a0:	6833      	ldr	r3, [r6, #0]
 800a8a2:	6820      	ldr	r0, [r4, #0]
 800a8a4:	1d19      	adds	r1, r3, #4
 800a8a6:	6031      	str	r1, [r6, #0]
 800a8a8:	0606      	lsls	r6, r0, #24
 800a8aa:	d501      	bpl.n	800a8b0 <_printf_i+0xbc>
 800a8ac:	681d      	ldr	r5, [r3, #0]
 800a8ae:	e003      	b.n	800a8b8 <_printf_i+0xc4>
 800a8b0:	0645      	lsls	r5, r0, #25
 800a8b2:	d5fb      	bpl.n	800a8ac <_printf_i+0xb8>
 800a8b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	da03      	bge.n	800a8c4 <_printf_i+0xd0>
 800a8bc:	232d      	movs	r3, #45	@ 0x2d
 800a8be:	426d      	negs	r5, r5
 800a8c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8c4:	4859      	ldr	r0, [pc, #356]	@ (800aa2c <_printf_i+0x238>)
 800a8c6:	230a      	movs	r3, #10
 800a8c8:	e011      	b.n	800a8ee <_printf_i+0xfa>
 800a8ca:	6821      	ldr	r1, [r4, #0]
 800a8cc:	6833      	ldr	r3, [r6, #0]
 800a8ce:	0608      	lsls	r0, r1, #24
 800a8d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8d4:	d402      	bmi.n	800a8dc <_printf_i+0xe8>
 800a8d6:	0649      	lsls	r1, r1, #25
 800a8d8:	bf48      	it	mi
 800a8da:	b2ad      	uxthmi	r5, r5
 800a8dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8de:	4853      	ldr	r0, [pc, #332]	@ (800aa2c <_printf_i+0x238>)
 800a8e0:	6033      	str	r3, [r6, #0]
 800a8e2:	bf14      	ite	ne
 800a8e4:	230a      	movne	r3, #10
 800a8e6:	2308      	moveq	r3, #8
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8ee:	6866      	ldr	r6, [r4, #4]
 800a8f0:	60a6      	str	r6, [r4, #8]
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	bfa2      	ittt	ge
 800a8f6:	6821      	ldrge	r1, [r4, #0]
 800a8f8:	f021 0104 	bicge.w	r1, r1, #4
 800a8fc:	6021      	strge	r1, [r4, #0]
 800a8fe:	b90d      	cbnz	r5, 800a904 <_printf_i+0x110>
 800a900:	2e00      	cmp	r6, #0
 800a902:	d04b      	beq.n	800a99c <_printf_i+0x1a8>
 800a904:	4616      	mov	r6, r2
 800a906:	fbb5 f1f3 	udiv	r1, r5, r3
 800a90a:	fb03 5711 	mls	r7, r3, r1, r5
 800a90e:	5dc7      	ldrb	r7, [r0, r7]
 800a910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a914:	462f      	mov	r7, r5
 800a916:	42bb      	cmp	r3, r7
 800a918:	460d      	mov	r5, r1
 800a91a:	d9f4      	bls.n	800a906 <_printf_i+0x112>
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d10b      	bne.n	800a938 <_printf_i+0x144>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07df      	lsls	r7, r3, #31
 800a924:	d508      	bpl.n	800a938 <_printf_i+0x144>
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	6861      	ldr	r1, [r4, #4]
 800a92a:	4299      	cmp	r1, r3
 800a92c:	bfde      	ittt	le
 800a92e:	2330      	movle	r3, #48	@ 0x30
 800a930:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a934:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a938:	1b92      	subs	r2, r2, r6
 800a93a:	6122      	str	r2, [r4, #16]
 800a93c:	f8cd a000 	str.w	sl, [sp]
 800a940:	464b      	mov	r3, r9
 800a942:	aa03      	add	r2, sp, #12
 800a944:	4621      	mov	r1, r4
 800a946:	4640      	mov	r0, r8
 800a948:	f7ff fee6 	bl	800a718 <_printf_common>
 800a94c:	3001      	adds	r0, #1
 800a94e:	d14a      	bne.n	800a9e6 <_printf_i+0x1f2>
 800a950:	f04f 30ff 	mov.w	r0, #4294967295
 800a954:	b004      	add	sp, #16
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	f043 0320 	orr.w	r3, r3, #32
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	4833      	ldr	r0, [pc, #204]	@ (800aa30 <_printf_i+0x23c>)
 800a964:	2778      	movs	r7, #120	@ 0x78
 800a966:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a96a:	6823      	ldr	r3, [r4, #0]
 800a96c:	6831      	ldr	r1, [r6, #0]
 800a96e:	061f      	lsls	r7, r3, #24
 800a970:	f851 5b04 	ldr.w	r5, [r1], #4
 800a974:	d402      	bmi.n	800a97c <_printf_i+0x188>
 800a976:	065f      	lsls	r7, r3, #25
 800a978:	bf48      	it	mi
 800a97a:	b2ad      	uxthmi	r5, r5
 800a97c:	6031      	str	r1, [r6, #0]
 800a97e:	07d9      	lsls	r1, r3, #31
 800a980:	bf44      	itt	mi
 800a982:	f043 0320 	orrmi.w	r3, r3, #32
 800a986:	6023      	strmi	r3, [r4, #0]
 800a988:	b11d      	cbz	r5, 800a992 <_printf_i+0x19e>
 800a98a:	2310      	movs	r3, #16
 800a98c:	e7ac      	b.n	800a8e8 <_printf_i+0xf4>
 800a98e:	4827      	ldr	r0, [pc, #156]	@ (800aa2c <_printf_i+0x238>)
 800a990:	e7e9      	b.n	800a966 <_printf_i+0x172>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	f023 0320 	bic.w	r3, r3, #32
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	e7f6      	b.n	800a98a <_printf_i+0x196>
 800a99c:	4616      	mov	r6, r2
 800a99e:	e7bd      	b.n	800a91c <_printf_i+0x128>
 800a9a0:	6833      	ldr	r3, [r6, #0]
 800a9a2:	6825      	ldr	r5, [r4, #0]
 800a9a4:	6961      	ldr	r1, [r4, #20]
 800a9a6:	1d18      	adds	r0, r3, #4
 800a9a8:	6030      	str	r0, [r6, #0]
 800a9aa:	062e      	lsls	r6, r5, #24
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	d501      	bpl.n	800a9b4 <_printf_i+0x1c0>
 800a9b0:	6019      	str	r1, [r3, #0]
 800a9b2:	e002      	b.n	800a9ba <_printf_i+0x1c6>
 800a9b4:	0668      	lsls	r0, r5, #25
 800a9b6:	d5fb      	bpl.n	800a9b0 <_printf_i+0x1bc>
 800a9b8:	8019      	strh	r1, [r3, #0]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6123      	str	r3, [r4, #16]
 800a9be:	4616      	mov	r6, r2
 800a9c0:	e7bc      	b.n	800a93c <_printf_i+0x148>
 800a9c2:	6833      	ldr	r3, [r6, #0]
 800a9c4:	1d1a      	adds	r2, r3, #4
 800a9c6:	6032      	str	r2, [r6, #0]
 800a9c8:	681e      	ldr	r6, [r3, #0]
 800a9ca:	6862      	ldr	r2, [r4, #4]
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	f7f5 fbfe 	bl	80001d0 <memchr>
 800a9d4:	b108      	cbz	r0, 800a9da <_printf_i+0x1e6>
 800a9d6:	1b80      	subs	r0, r0, r6
 800a9d8:	6060      	str	r0, [r4, #4]
 800a9da:	6863      	ldr	r3, [r4, #4]
 800a9dc:	6123      	str	r3, [r4, #16]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9e4:	e7aa      	b.n	800a93c <_printf_i+0x148>
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	4632      	mov	r2, r6
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	47d0      	blx	sl
 800a9f0:	3001      	adds	r0, #1
 800a9f2:	d0ad      	beq.n	800a950 <_printf_i+0x15c>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	079b      	lsls	r3, r3, #30
 800a9f8:	d413      	bmi.n	800aa22 <_printf_i+0x22e>
 800a9fa:	68e0      	ldr	r0, [r4, #12]
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	4298      	cmp	r0, r3
 800aa00:	bfb8      	it	lt
 800aa02:	4618      	movlt	r0, r3
 800aa04:	e7a6      	b.n	800a954 <_printf_i+0x160>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4632      	mov	r2, r6
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	47d0      	blx	sl
 800aa10:	3001      	adds	r0, #1
 800aa12:	d09d      	beq.n	800a950 <_printf_i+0x15c>
 800aa14:	3501      	adds	r5, #1
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	9903      	ldr	r1, [sp, #12]
 800aa1a:	1a5b      	subs	r3, r3, r1
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dcf2      	bgt.n	800aa06 <_printf_i+0x212>
 800aa20:	e7eb      	b.n	800a9fa <_printf_i+0x206>
 800aa22:	2500      	movs	r5, #0
 800aa24:	f104 0619 	add.w	r6, r4, #25
 800aa28:	e7f5      	b.n	800aa16 <_printf_i+0x222>
 800aa2a:	bf00      	nop
 800aa2c:	0800f642 	.word	0x0800f642
 800aa30:	0800f653 	.word	0x0800f653

0800aa34 <_scanf_float>:
 800aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa38:	b087      	sub	sp, #28
 800aa3a:	4617      	mov	r7, r2
 800aa3c:	9303      	str	r3, [sp, #12]
 800aa3e:	688b      	ldr	r3, [r1, #8]
 800aa40:	1e5a      	subs	r2, r3, #1
 800aa42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa46:	bf81      	itttt	hi
 800aa48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa4c:	eb03 0b05 	addhi.w	fp, r3, r5
 800aa50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa54:	608b      	strhi	r3, [r1, #8]
 800aa56:	680b      	ldr	r3, [r1, #0]
 800aa58:	460a      	mov	r2, r1
 800aa5a:	f04f 0500 	mov.w	r5, #0
 800aa5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa62:	f842 3b1c 	str.w	r3, [r2], #28
 800aa66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa6a:	4680      	mov	r8, r0
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	bf98      	it	ls
 800aa70:	f04f 0b00 	movls.w	fp, #0
 800aa74:	9201      	str	r2, [sp, #4]
 800aa76:	4616      	mov	r6, r2
 800aa78:	46aa      	mov	sl, r5
 800aa7a:	46a9      	mov	r9, r5
 800aa7c:	9502      	str	r5, [sp, #8]
 800aa7e:	68a2      	ldr	r2, [r4, #8]
 800aa80:	b152      	cbz	r2, 800aa98 <_scanf_float+0x64>
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa88:	d864      	bhi.n	800ab54 <_scanf_float+0x120>
 800aa8a:	2b40      	cmp	r3, #64	@ 0x40
 800aa8c:	d83c      	bhi.n	800ab08 <_scanf_float+0xd4>
 800aa8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa92:	b2c8      	uxtb	r0, r1
 800aa94:	280e      	cmp	r0, #14
 800aa96:	d93a      	bls.n	800ab0e <_scanf_float+0xda>
 800aa98:	f1b9 0f00 	cmp.w	r9, #0
 800aa9c:	d003      	beq.n	800aaa6 <_scanf_float+0x72>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaaa:	f1ba 0f01 	cmp.w	sl, #1
 800aaae:	f200 8117 	bhi.w	800ace0 <_scanf_float+0x2ac>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	429e      	cmp	r6, r3
 800aab6:	f200 8108 	bhi.w	800acca <_scanf_float+0x296>
 800aaba:	2001      	movs	r0, #1
 800aabc:	b007      	add	sp, #28
 800aabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aac6:	2a0d      	cmp	r2, #13
 800aac8:	d8e6      	bhi.n	800aa98 <_scanf_float+0x64>
 800aaca:	a101      	add	r1, pc, #4	@ (adr r1, 800aad0 <_scanf_float+0x9c>)
 800aacc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aad0:	0800ac17 	.word	0x0800ac17
 800aad4:	0800aa99 	.word	0x0800aa99
 800aad8:	0800aa99 	.word	0x0800aa99
 800aadc:	0800aa99 	.word	0x0800aa99
 800aae0:	0800ac77 	.word	0x0800ac77
 800aae4:	0800ac4f 	.word	0x0800ac4f
 800aae8:	0800aa99 	.word	0x0800aa99
 800aaec:	0800aa99 	.word	0x0800aa99
 800aaf0:	0800ac25 	.word	0x0800ac25
 800aaf4:	0800aa99 	.word	0x0800aa99
 800aaf8:	0800aa99 	.word	0x0800aa99
 800aafc:	0800aa99 	.word	0x0800aa99
 800ab00:	0800aa99 	.word	0x0800aa99
 800ab04:	0800abdd 	.word	0x0800abdd
 800ab08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ab0c:	e7db      	b.n	800aac6 <_scanf_float+0x92>
 800ab0e:	290e      	cmp	r1, #14
 800ab10:	d8c2      	bhi.n	800aa98 <_scanf_float+0x64>
 800ab12:	a001      	add	r0, pc, #4	@ (adr r0, 800ab18 <_scanf_float+0xe4>)
 800ab14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab18:	0800abcd 	.word	0x0800abcd
 800ab1c:	0800aa99 	.word	0x0800aa99
 800ab20:	0800abcd 	.word	0x0800abcd
 800ab24:	0800ac63 	.word	0x0800ac63
 800ab28:	0800aa99 	.word	0x0800aa99
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800abb3 	.word	0x0800abb3
 800ab34:	0800abb3 	.word	0x0800abb3
 800ab38:	0800abb3 	.word	0x0800abb3
 800ab3c:	0800abb3 	.word	0x0800abb3
 800ab40:	0800abb3 	.word	0x0800abb3
 800ab44:	0800abb3 	.word	0x0800abb3
 800ab48:	0800abb3 	.word	0x0800abb3
 800ab4c:	0800abb3 	.word	0x0800abb3
 800ab50:	0800abb3 	.word	0x0800abb3
 800ab54:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab56:	d809      	bhi.n	800ab6c <_scanf_float+0x138>
 800ab58:	2b60      	cmp	r3, #96	@ 0x60
 800ab5a:	d8b2      	bhi.n	800aac2 <_scanf_float+0x8e>
 800ab5c:	2b54      	cmp	r3, #84	@ 0x54
 800ab5e:	d07b      	beq.n	800ac58 <_scanf_float+0x224>
 800ab60:	2b59      	cmp	r3, #89	@ 0x59
 800ab62:	d199      	bne.n	800aa98 <_scanf_float+0x64>
 800ab64:	2d07      	cmp	r5, #7
 800ab66:	d197      	bne.n	800aa98 <_scanf_float+0x64>
 800ab68:	2508      	movs	r5, #8
 800ab6a:	e02c      	b.n	800abc6 <_scanf_float+0x192>
 800ab6c:	2b74      	cmp	r3, #116	@ 0x74
 800ab6e:	d073      	beq.n	800ac58 <_scanf_float+0x224>
 800ab70:	2b79      	cmp	r3, #121	@ 0x79
 800ab72:	e7f6      	b.n	800ab62 <_scanf_float+0x12e>
 800ab74:	6821      	ldr	r1, [r4, #0]
 800ab76:	05c8      	lsls	r0, r1, #23
 800ab78:	d51b      	bpl.n	800abb2 <_scanf_float+0x17e>
 800ab7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab7e:	6021      	str	r1, [r4, #0]
 800ab80:	f109 0901 	add.w	r9, r9, #1
 800ab84:	f1bb 0f00 	cmp.w	fp, #0
 800ab88:	d003      	beq.n	800ab92 <_scanf_float+0x15e>
 800ab8a:	3201      	adds	r2, #1
 800ab8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab90:	60a2      	str	r2, [r4, #8]
 800ab92:	68a3      	ldr	r3, [r4, #8]
 800ab94:	3b01      	subs	r3, #1
 800ab96:	60a3      	str	r3, [r4, #8]
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	6123      	str	r3, [r4, #16]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	607b      	str	r3, [r7, #4]
 800aba6:	f340 8087 	ble.w	800acb8 <_scanf_float+0x284>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	e765      	b.n	800aa7e <_scanf_float+0x4a>
 800abb2:	eb1a 0105 	adds.w	r1, sl, r5
 800abb6:	f47f af6f 	bne.w	800aa98 <_scanf_float+0x64>
 800abba:	6822      	ldr	r2, [r4, #0]
 800abbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	460d      	mov	r5, r1
 800abc4:	468a      	mov	sl, r1
 800abc6:	f806 3b01 	strb.w	r3, [r6], #1
 800abca:	e7e2      	b.n	800ab92 <_scanf_float+0x15e>
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	0610      	lsls	r0, r2, #24
 800abd0:	f57f af62 	bpl.w	800aa98 <_scanf_float+0x64>
 800abd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abd8:	6022      	str	r2, [r4, #0]
 800abda:	e7f4      	b.n	800abc6 <_scanf_float+0x192>
 800abdc:	f1ba 0f00 	cmp.w	sl, #0
 800abe0:	d10e      	bne.n	800ac00 <_scanf_float+0x1cc>
 800abe2:	f1b9 0f00 	cmp.w	r9, #0
 800abe6:	d10e      	bne.n	800ac06 <_scanf_float+0x1d2>
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abf2:	d108      	bne.n	800ac06 <_scanf_float+0x1d2>
 800abf4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	f04f 0a01 	mov.w	sl, #1
 800abfe:	e7e2      	b.n	800abc6 <_scanf_float+0x192>
 800ac00:	f1ba 0f02 	cmp.w	sl, #2
 800ac04:	d055      	beq.n	800acb2 <_scanf_float+0x27e>
 800ac06:	2d01      	cmp	r5, #1
 800ac08:	d002      	beq.n	800ac10 <_scanf_float+0x1dc>
 800ac0a:	2d04      	cmp	r5, #4
 800ac0c:	f47f af44 	bne.w	800aa98 <_scanf_float+0x64>
 800ac10:	3501      	adds	r5, #1
 800ac12:	b2ed      	uxtb	r5, r5
 800ac14:	e7d7      	b.n	800abc6 <_scanf_float+0x192>
 800ac16:	f1ba 0f01 	cmp.w	sl, #1
 800ac1a:	f47f af3d 	bne.w	800aa98 <_scanf_float+0x64>
 800ac1e:	f04f 0a02 	mov.w	sl, #2
 800ac22:	e7d0      	b.n	800abc6 <_scanf_float+0x192>
 800ac24:	b97d      	cbnz	r5, 800ac46 <_scanf_float+0x212>
 800ac26:	f1b9 0f00 	cmp.w	r9, #0
 800ac2a:	f47f af38 	bne.w	800aa9e <_scanf_float+0x6a>
 800ac2e:	6822      	ldr	r2, [r4, #0]
 800ac30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac38:	f040 8108 	bne.w	800ae4c <_scanf_float+0x418>
 800ac3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac40:	6022      	str	r2, [r4, #0]
 800ac42:	2501      	movs	r5, #1
 800ac44:	e7bf      	b.n	800abc6 <_scanf_float+0x192>
 800ac46:	2d03      	cmp	r5, #3
 800ac48:	d0e2      	beq.n	800ac10 <_scanf_float+0x1dc>
 800ac4a:	2d05      	cmp	r5, #5
 800ac4c:	e7de      	b.n	800ac0c <_scanf_float+0x1d8>
 800ac4e:	2d02      	cmp	r5, #2
 800ac50:	f47f af22 	bne.w	800aa98 <_scanf_float+0x64>
 800ac54:	2503      	movs	r5, #3
 800ac56:	e7b6      	b.n	800abc6 <_scanf_float+0x192>
 800ac58:	2d06      	cmp	r5, #6
 800ac5a:	f47f af1d 	bne.w	800aa98 <_scanf_float+0x64>
 800ac5e:	2507      	movs	r5, #7
 800ac60:	e7b1      	b.n	800abc6 <_scanf_float+0x192>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	0591      	lsls	r1, r2, #22
 800ac66:	f57f af17 	bpl.w	800aa98 <_scanf_float+0x64>
 800ac6a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac6e:	6022      	str	r2, [r4, #0]
 800ac70:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac74:	e7a7      	b.n	800abc6 <_scanf_float+0x192>
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac7c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac80:	d006      	beq.n	800ac90 <_scanf_float+0x25c>
 800ac82:	0550      	lsls	r0, r2, #21
 800ac84:	f57f af08 	bpl.w	800aa98 <_scanf_float+0x64>
 800ac88:	f1b9 0f00 	cmp.w	r9, #0
 800ac8c:	f000 80de 	beq.w	800ae4c <_scanf_float+0x418>
 800ac90:	0591      	lsls	r1, r2, #22
 800ac92:	bf58      	it	pl
 800ac94:	9902      	ldrpl	r1, [sp, #8]
 800ac96:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac9a:	bf58      	it	pl
 800ac9c:	eba9 0101 	subpl.w	r1, r9, r1
 800aca0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aca4:	bf58      	it	pl
 800aca6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800acaa:	6022      	str	r2, [r4, #0]
 800acac:	f04f 0900 	mov.w	r9, #0
 800acb0:	e789      	b.n	800abc6 <_scanf_float+0x192>
 800acb2:	f04f 0a03 	mov.w	sl, #3
 800acb6:	e786      	b.n	800abc6 <_scanf_float+0x192>
 800acb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acbc:	4639      	mov	r1, r7
 800acbe:	4640      	mov	r0, r8
 800acc0:	4798      	blx	r3
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f43f aedb 	beq.w	800aa7e <_scanf_float+0x4a>
 800acc8:	e6e6      	b.n	800aa98 <_scanf_float+0x64>
 800acca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acd2:	463a      	mov	r2, r7
 800acd4:	4640      	mov	r0, r8
 800acd6:	4798      	blx	r3
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	3b01      	subs	r3, #1
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	e6e8      	b.n	800aab2 <_scanf_float+0x7e>
 800ace0:	1e6b      	subs	r3, r5, #1
 800ace2:	2b06      	cmp	r3, #6
 800ace4:	d824      	bhi.n	800ad30 <_scanf_float+0x2fc>
 800ace6:	2d02      	cmp	r5, #2
 800ace8:	d836      	bhi.n	800ad58 <_scanf_float+0x324>
 800acea:	9b01      	ldr	r3, [sp, #4]
 800acec:	429e      	cmp	r6, r3
 800acee:	f67f aee4 	bls.w	800aaba <_scanf_float+0x86>
 800acf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acfa:	463a      	mov	r2, r7
 800acfc:	4640      	mov	r0, r8
 800acfe:	4798      	blx	r3
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	6123      	str	r3, [r4, #16]
 800ad06:	e7f0      	b.n	800acea <_scanf_float+0x2b6>
 800ad08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad0c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ad10:	463a      	mov	r2, r7
 800ad12:	4640      	mov	r0, r8
 800ad14:	4798      	blx	r3
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad20:	fa5f fa8a 	uxtb.w	sl, sl
 800ad24:	f1ba 0f02 	cmp.w	sl, #2
 800ad28:	d1ee      	bne.n	800ad08 <_scanf_float+0x2d4>
 800ad2a:	3d03      	subs	r5, #3
 800ad2c:	b2ed      	uxtb	r5, r5
 800ad2e:	1b76      	subs	r6, r6, r5
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	05da      	lsls	r2, r3, #23
 800ad34:	d530      	bpl.n	800ad98 <_scanf_float+0x364>
 800ad36:	055b      	lsls	r3, r3, #21
 800ad38:	d511      	bpl.n	800ad5e <_scanf_float+0x32a>
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	429e      	cmp	r6, r3
 800ad3e:	f67f aebc 	bls.w	800aaba <_scanf_float+0x86>
 800ad42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4798      	blx	r3
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	e7f0      	b.n	800ad3a <_scanf_float+0x306>
 800ad58:	46aa      	mov	sl, r5
 800ad5a:	46b3      	mov	fp, r6
 800ad5c:	e7de      	b.n	800ad1c <_scanf_float+0x2e8>
 800ad5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad62:	6923      	ldr	r3, [r4, #16]
 800ad64:	2965      	cmp	r1, #101	@ 0x65
 800ad66:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad6a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	d00c      	beq.n	800ad8c <_scanf_float+0x358>
 800ad72:	2945      	cmp	r1, #69	@ 0x45
 800ad74:	d00a      	beq.n	800ad8c <_scanf_float+0x358>
 800ad76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4798      	blx	r3
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	1eb5      	subs	r5, r6, #2
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad90:	463a      	mov	r2, r7
 800ad92:	4640      	mov	r0, r8
 800ad94:	4798      	blx	r3
 800ad96:	462e      	mov	r6, r5
 800ad98:	6822      	ldr	r2, [r4, #0]
 800ad9a:	f012 0210 	ands.w	r2, r2, #16
 800ad9e:	d001      	beq.n	800ada4 <_scanf_float+0x370>
 800ada0:	2000      	movs	r0, #0
 800ada2:	e68b      	b.n	800aabc <_scanf_float+0x88>
 800ada4:	7032      	strb	r2, [r6, #0]
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800adac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adb0:	d11c      	bne.n	800adec <_scanf_float+0x3b8>
 800adb2:	9b02      	ldr	r3, [sp, #8]
 800adb4:	454b      	cmp	r3, r9
 800adb6:	eba3 0209 	sub.w	r2, r3, r9
 800adba:	d123      	bne.n	800ae04 <_scanf_float+0x3d0>
 800adbc:	9901      	ldr	r1, [sp, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	4640      	mov	r0, r8
 800adc2:	f7ff f9cd 	bl	800a160 <_strtod_r>
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	6821      	ldr	r1, [r4, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f011 0f02 	tst.w	r1, #2
 800add0:	ec57 6b10 	vmov	r6, r7, d0
 800add4:	f103 0204 	add.w	r2, r3, #4
 800add8:	d01f      	beq.n	800ae1a <_scanf_float+0x3e6>
 800adda:	9903      	ldr	r1, [sp, #12]
 800addc:	600a      	str	r2, [r1, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	e9c3 6700 	strd	r6, r7, [r3]
 800ade4:	68e3      	ldr	r3, [r4, #12]
 800ade6:	3301      	adds	r3, #1
 800ade8:	60e3      	str	r3, [r4, #12]
 800adea:	e7d9      	b.n	800ada0 <_scanf_float+0x36c>
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0e4      	beq.n	800adbc <_scanf_float+0x388>
 800adf2:	9905      	ldr	r1, [sp, #20]
 800adf4:	230a      	movs	r3, #10
 800adf6:	3101      	adds	r1, #1
 800adf8:	4640      	mov	r0, r8
 800adfa:	f002 fb91 	bl	800d520 <_strtol_r>
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	9e05      	ldr	r6, [sp, #20]
 800ae02:	1ac2      	subs	r2, r0, r3
 800ae04:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ae08:	429e      	cmp	r6, r3
 800ae0a:	bf28      	it	cs
 800ae0c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ae10:	4910      	ldr	r1, [pc, #64]	@ (800ae54 <_scanf_float+0x420>)
 800ae12:	4630      	mov	r0, r6
 800ae14:	f000 f988 	bl	800b128 <siprintf>
 800ae18:	e7d0      	b.n	800adbc <_scanf_float+0x388>
 800ae1a:	f011 0f04 	tst.w	r1, #4
 800ae1e:	9903      	ldr	r1, [sp, #12]
 800ae20:	600a      	str	r2, [r1, #0]
 800ae22:	d1dc      	bne.n	800adde <_scanf_float+0x3aa>
 800ae24:	681d      	ldr	r5, [r3, #0]
 800ae26:	4632      	mov	r2, r6
 800ae28:	463b      	mov	r3, r7
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	4639      	mov	r1, r7
 800ae2e:	f7f5 fe7d 	bl	8000b2c <__aeabi_dcmpun>
 800ae32:	b128      	cbz	r0, 800ae40 <_scanf_float+0x40c>
 800ae34:	4808      	ldr	r0, [pc, #32]	@ (800ae58 <_scanf_float+0x424>)
 800ae36:	f000 fb8b 	bl	800b550 <nanf>
 800ae3a:	ed85 0a00 	vstr	s0, [r5]
 800ae3e:	e7d1      	b.n	800ade4 <_scanf_float+0x3b0>
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7f5 fed0 	bl	8000be8 <__aeabi_d2f>
 800ae48:	6028      	str	r0, [r5, #0]
 800ae4a:	e7cb      	b.n	800ade4 <_scanf_float+0x3b0>
 800ae4c:	f04f 0900 	mov.w	r9, #0
 800ae50:	e629      	b.n	800aaa6 <_scanf_float+0x72>
 800ae52:	bf00      	nop
 800ae54:	0800f664 	.word	0x0800f664
 800ae58:	0800f71d 	.word	0x0800f71d

0800ae5c <std>:
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	b510      	push	{r4, lr}
 800ae60:	4604      	mov	r4, r0
 800ae62:	e9c0 3300 	strd	r3, r3, [r0]
 800ae66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae6a:	6083      	str	r3, [r0, #8]
 800ae6c:	8181      	strh	r1, [r0, #12]
 800ae6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae70:	81c2      	strh	r2, [r0, #14]
 800ae72:	6183      	str	r3, [r0, #24]
 800ae74:	4619      	mov	r1, r3
 800ae76:	2208      	movs	r2, #8
 800ae78:	305c      	adds	r0, #92	@ 0x5c
 800ae7a:	f000 fa4d 	bl	800b318 <memset>
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb4 <std+0x58>)
 800ae80:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae82:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb8 <std+0x5c>)
 800ae84:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae86:	4b0d      	ldr	r3, [pc, #52]	@ (800aebc <std+0x60>)
 800ae88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <std+0x64>)
 800ae8c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae8e:	4b0d      	ldr	r3, [pc, #52]	@ (800aec4 <std+0x68>)
 800ae90:	6224      	str	r4, [r4, #32]
 800ae92:	429c      	cmp	r4, r3
 800ae94:	d006      	beq.n	800aea4 <std+0x48>
 800ae96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae9a:	4294      	cmp	r4, r2
 800ae9c:	d002      	beq.n	800aea4 <std+0x48>
 800ae9e:	33d0      	adds	r3, #208	@ 0xd0
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d105      	bne.n	800aeb0 <std+0x54>
 800aea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeac:	f000 bb34 	b.w	800b518 <__retarget_lock_init_recursive>
 800aeb0:	bd10      	pop	{r4, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800b169 	.word	0x0800b169
 800aeb8:	0800b18b 	.word	0x0800b18b
 800aebc:	0800b1c3 	.word	0x0800b1c3
 800aec0:	0800b1e7 	.word	0x0800b1e7
 800aec4:	200007bc 	.word	0x200007bc

0800aec8 <stdio_exit_handler>:
 800aec8:	4a02      	ldr	r2, [pc, #8]	@ (800aed4 <stdio_exit_handler+0xc>)
 800aeca:	4903      	ldr	r1, [pc, #12]	@ (800aed8 <stdio_exit_handler+0x10>)
 800aecc:	4803      	ldr	r0, [pc, #12]	@ (800aedc <stdio_exit_handler+0x14>)
 800aece:	f000 b869 	b.w	800afa4 <_fwalk_sglue>
 800aed2:	bf00      	nop
 800aed4:	200000a4 	.word	0x200000a4
 800aed8:	0800db79 	.word	0x0800db79
 800aedc:	20000220 	.word	0x20000220

0800aee0 <cleanup_stdio>:
 800aee0:	6841      	ldr	r1, [r0, #4]
 800aee2:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <cleanup_stdio+0x34>)
 800aee4:	4299      	cmp	r1, r3
 800aee6:	b510      	push	{r4, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	d001      	beq.n	800aef0 <cleanup_stdio+0x10>
 800aeec:	f002 fe44 	bl	800db78 <_fflush_r>
 800aef0:	68a1      	ldr	r1, [r4, #8]
 800aef2:	4b09      	ldr	r3, [pc, #36]	@ (800af18 <cleanup_stdio+0x38>)
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d002      	beq.n	800aefe <cleanup_stdio+0x1e>
 800aef8:	4620      	mov	r0, r4
 800aefa:	f002 fe3d 	bl	800db78 <_fflush_r>
 800aefe:	68e1      	ldr	r1, [r4, #12]
 800af00:	4b06      	ldr	r3, [pc, #24]	@ (800af1c <cleanup_stdio+0x3c>)
 800af02:	4299      	cmp	r1, r3
 800af04:	d004      	beq.n	800af10 <cleanup_stdio+0x30>
 800af06:	4620      	mov	r0, r4
 800af08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af0c:	f002 be34 	b.w	800db78 <_fflush_r>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	bf00      	nop
 800af14:	200007bc 	.word	0x200007bc
 800af18:	20000824 	.word	0x20000824
 800af1c:	2000088c 	.word	0x2000088c

0800af20 <global_stdio_init.part.0>:
 800af20:	b510      	push	{r4, lr}
 800af22:	4b0b      	ldr	r3, [pc, #44]	@ (800af50 <global_stdio_init.part.0+0x30>)
 800af24:	4c0b      	ldr	r4, [pc, #44]	@ (800af54 <global_stdio_init.part.0+0x34>)
 800af26:	4a0c      	ldr	r2, [pc, #48]	@ (800af58 <global_stdio_init.part.0+0x38>)
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	4620      	mov	r0, r4
 800af2c:	2200      	movs	r2, #0
 800af2e:	2104      	movs	r1, #4
 800af30:	f7ff ff94 	bl	800ae5c <std>
 800af34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af38:	2201      	movs	r2, #1
 800af3a:	2109      	movs	r1, #9
 800af3c:	f7ff ff8e 	bl	800ae5c <std>
 800af40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af44:	2202      	movs	r2, #2
 800af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af4a:	2112      	movs	r1, #18
 800af4c:	f7ff bf86 	b.w	800ae5c <std>
 800af50:	200008f4 	.word	0x200008f4
 800af54:	200007bc 	.word	0x200007bc
 800af58:	0800aec9 	.word	0x0800aec9

0800af5c <__sfp_lock_acquire>:
 800af5c:	4801      	ldr	r0, [pc, #4]	@ (800af64 <__sfp_lock_acquire+0x8>)
 800af5e:	f000 badc 	b.w	800b51a <__retarget_lock_acquire_recursive>
 800af62:	bf00      	nop
 800af64:	200008fd 	.word	0x200008fd

0800af68 <__sfp_lock_release>:
 800af68:	4801      	ldr	r0, [pc, #4]	@ (800af70 <__sfp_lock_release+0x8>)
 800af6a:	f000 bad7 	b.w	800b51c <__retarget_lock_release_recursive>
 800af6e:	bf00      	nop
 800af70:	200008fd 	.word	0x200008fd

0800af74 <__sinit>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4604      	mov	r4, r0
 800af78:	f7ff fff0 	bl	800af5c <__sfp_lock_acquire>
 800af7c:	6a23      	ldr	r3, [r4, #32]
 800af7e:	b11b      	cbz	r3, 800af88 <__sinit+0x14>
 800af80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af84:	f7ff bff0 	b.w	800af68 <__sfp_lock_release>
 800af88:	4b04      	ldr	r3, [pc, #16]	@ (800af9c <__sinit+0x28>)
 800af8a:	6223      	str	r3, [r4, #32]
 800af8c:	4b04      	ldr	r3, [pc, #16]	@ (800afa0 <__sinit+0x2c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1f5      	bne.n	800af80 <__sinit+0xc>
 800af94:	f7ff ffc4 	bl	800af20 <global_stdio_init.part.0>
 800af98:	e7f2      	b.n	800af80 <__sinit+0xc>
 800af9a:	bf00      	nop
 800af9c:	0800aee1 	.word	0x0800aee1
 800afa0:	200008f4 	.word	0x200008f4

0800afa4 <_fwalk_sglue>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	4607      	mov	r7, r0
 800afaa:	4688      	mov	r8, r1
 800afac:	4614      	mov	r4, r2
 800afae:	2600      	movs	r6, #0
 800afb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afb4:	f1b9 0901 	subs.w	r9, r9, #1
 800afb8:	d505      	bpl.n	800afc6 <_fwalk_sglue+0x22>
 800afba:	6824      	ldr	r4, [r4, #0]
 800afbc:	2c00      	cmp	r4, #0
 800afbe:	d1f7      	bne.n	800afb0 <_fwalk_sglue+0xc>
 800afc0:	4630      	mov	r0, r6
 800afc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc6:	89ab      	ldrh	r3, [r5, #12]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d907      	bls.n	800afdc <_fwalk_sglue+0x38>
 800afcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afd0:	3301      	adds	r3, #1
 800afd2:	d003      	beq.n	800afdc <_fwalk_sglue+0x38>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4638      	mov	r0, r7
 800afd8:	47c0      	blx	r8
 800afda:	4306      	orrs	r6, r0
 800afdc:	3568      	adds	r5, #104	@ 0x68
 800afde:	e7e9      	b.n	800afb4 <_fwalk_sglue+0x10>

0800afe0 <iprintf>:
 800afe0:	b40f      	push	{r0, r1, r2, r3}
 800afe2:	b507      	push	{r0, r1, r2, lr}
 800afe4:	4906      	ldr	r1, [pc, #24]	@ (800b000 <iprintf+0x20>)
 800afe6:	ab04      	add	r3, sp, #16
 800afe8:	6808      	ldr	r0, [r1, #0]
 800afea:	f853 2b04 	ldr.w	r2, [r3], #4
 800afee:	6881      	ldr	r1, [r0, #8]
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f002 fc25 	bl	800d840 <_vfiprintf_r>
 800aff6:	b003      	add	sp, #12
 800aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800affc:	b004      	add	sp, #16
 800affe:	4770      	bx	lr
 800b000:	2000021c 	.word	0x2000021c

0800b004 <_puts_r>:
 800b004:	6a03      	ldr	r3, [r0, #32]
 800b006:	b570      	push	{r4, r5, r6, lr}
 800b008:	6884      	ldr	r4, [r0, #8]
 800b00a:	4605      	mov	r5, r0
 800b00c:	460e      	mov	r6, r1
 800b00e:	b90b      	cbnz	r3, 800b014 <_puts_r+0x10>
 800b010:	f7ff ffb0 	bl	800af74 <__sinit>
 800b014:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b016:	07db      	lsls	r3, r3, #31
 800b018:	d405      	bmi.n	800b026 <_puts_r+0x22>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	0598      	lsls	r0, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_puts_r+0x22>
 800b020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b022:	f000 fa7a 	bl	800b51a <__retarget_lock_acquire_recursive>
 800b026:	89a3      	ldrh	r3, [r4, #12]
 800b028:	0719      	lsls	r1, r3, #28
 800b02a:	d502      	bpl.n	800b032 <_puts_r+0x2e>
 800b02c:	6923      	ldr	r3, [r4, #16]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d135      	bne.n	800b09e <_puts_r+0x9a>
 800b032:	4621      	mov	r1, r4
 800b034:	4628      	mov	r0, r5
 800b036:	f000 f919 	bl	800b26c <__swsetup_r>
 800b03a:	b380      	cbz	r0, 800b09e <_puts_r+0x9a>
 800b03c:	f04f 35ff 	mov.w	r5, #4294967295
 800b040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b042:	07da      	lsls	r2, r3, #31
 800b044:	d405      	bmi.n	800b052 <_puts_r+0x4e>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	d402      	bmi.n	800b052 <_puts_r+0x4e>
 800b04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b04e:	f000 fa65 	bl	800b51c <__retarget_lock_release_recursive>
 800b052:	4628      	mov	r0, r5
 800b054:	bd70      	pop	{r4, r5, r6, pc}
 800b056:	2b00      	cmp	r3, #0
 800b058:	da04      	bge.n	800b064 <_puts_r+0x60>
 800b05a:	69a2      	ldr	r2, [r4, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	dc17      	bgt.n	800b090 <_puts_r+0x8c>
 800b060:	290a      	cmp	r1, #10
 800b062:	d015      	beq.n	800b090 <_puts_r+0x8c>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	1c5a      	adds	r2, r3, #1
 800b068:	6022      	str	r2, [r4, #0]
 800b06a:	7019      	strb	r1, [r3, #0]
 800b06c:	68a3      	ldr	r3, [r4, #8]
 800b06e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b072:	3b01      	subs	r3, #1
 800b074:	60a3      	str	r3, [r4, #8]
 800b076:	2900      	cmp	r1, #0
 800b078:	d1ed      	bne.n	800b056 <_puts_r+0x52>
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	da11      	bge.n	800b0a2 <_puts_r+0x9e>
 800b07e:	4622      	mov	r2, r4
 800b080:	210a      	movs	r1, #10
 800b082:	4628      	mov	r0, r5
 800b084:	f000 f8b3 	bl	800b1ee <__swbuf_r>
 800b088:	3001      	adds	r0, #1
 800b08a:	d0d7      	beq.n	800b03c <_puts_r+0x38>
 800b08c:	250a      	movs	r5, #10
 800b08e:	e7d7      	b.n	800b040 <_puts_r+0x3c>
 800b090:	4622      	mov	r2, r4
 800b092:	4628      	mov	r0, r5
 800b094:	f000 f8ab 	bl	800b1ee <__swbuf_r>
 800b098:	3001      	adds	r0, #1
 800b09a:	d1e7      	bne.n	800b06c <_puts_r+0x68>
 800b09c:	e7ce      	b.n	800b03c <_puts_r+0x38>
 800b09e:	3e01      	subs	r6, #1
 800b0a0:	e7e4      	b.n	800b06c <_puts_r+0x68>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	1c5a      	adds	r2, r3, #1
 800b0a6:	6022      	str	r2, [r4, #0]
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	e7ee      	b.n	800b08c <_puts_r+0x88>
	...

0800b0b0 <puts>:
 800b0b0:	4b02      	ldr	r3, [pc, #8]	@ (800b0bc <puts+0xc>)
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	6818      	ldr	r0, [r3, #0]
 800b0b6:	f7ff bfa5 	b.w	800b004 <_puts_r>
 800b0ba:	bf00      	nop
 800b0bc:	2000021c 	.word	0x2000021c

0800b0c0 <sniprintf>:
 800b0c0:	b40c      	push	{r2, r3}
 800b0c2:	b530      	push	{r4, r5, lr}
 800b0c4:	4b17      	ldr	r3, [pc, #92]	@ (800b124 <sniprintf+0x64>)
 800b0c6:	1e0c      	subs	r4, r1, #0
 800b0c8:	681d      	ldr	r5, [r3, #0]
 800b0ca:	b09d      	sub	sp, #116	@ 0x74
 800b0cc:	da08      	bge.n	800b0e0 <sniprintf+0x20>
 800b0ce:	238b      	movs	r3, #139	@ 0x8b
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d6:	b01d      	add	sp, #116	@ 0x74
 800b0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0dc:	b002      	add	sp, #8
 800b0de:	4770      	bx	lr
 800b0e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0e8:	bf14      	ite	ne
 800b0ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0ee:	4623      	moveq	r3, r4
 800b0f0:	9304      	str	r3, [sp, #16]
 800b0f2:	9307      	str	r3, [sp, #28]
 800b0f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0f8:	9002      	str	r0, [sp, #8]
 800b0fa:	9006      	str	r0, [sp, #24]
 800b0fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b100:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b102:	ab21      	add	r3, sp, #132	@ 0x84
 800b104:	a902      	add	r1, sp, #8
 800b106:	4628      	mov	r0, r5
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	f002 fa73 	bl	800d5f4 <_svfiprintf_r>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	bfbc      	itt	lt
 800b112:	238b      	movlt	r3, #139	@ 0x8b
 800b114:	602b      	strlt	r3, [r5, #0]
 800b116:	2c00      	cmp	r4, #0
 800b118:	d0dd      	beq.n	800b0d6 <sniprintf+0x16>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	2200      	movs	r2, #0
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	e7d9      	b.n	800b0d6 <sniprintf+0x16>
 800b122:	bf00      	nop
 800b124:	2000021c 	.word	0x2000021c

0800b128 <siprintf>:
 800b128:	b40e      	push	{r1, r2, r3}
 800b12a:	b500      	push	{lr}
 800b12c:	b09c      	sub	sp, #112	@ 0x70
 800b12e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b130:	9002      	str	r0, [sp, #8]
 800b132:	9006      	str	r0, [sp, #24]
 800b134:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b138:	4809      	ldr	r0, [pc, #36]	@ (800b160 <siprintf+0x38>)
 800b13a:	9107      	str	r1, [sp, #28]
 800b13c:	9104      	str	r1, [sp, #16]
 800b13e:	4909      	ldr	r1, [pc, #36]	@ (800b164 <siprintf+0x3c>)
 800b140:	f853 2b04 	ldr.w	r2, [r3], #4
 800b144:	9105      	str	r1, [sp, #20]
 800b146:	6800      	ldr	r0, [r0, #0]
 800b148:	9301      	str	r3, [sp, #4]
 800b14a:	a902      	add	r1, sp, #8
 800b14c:	f002 fa52 	bl	800d5f4 <_svfiprintf_r>
 800b150:	9b02      	ldr	r3, [sp, #8]
 800b152:	2200      	movs	r2, #0
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	b01c      	add	sp, #112	@ 0x70
 800b158:	f85d eb04 	ldr.w	lr, [sp], #4
 800b15c:	b003      	add	sp, #12
 800b15e:	4770      	bx	lr
 800b160:	2000021c 	.word	0x2000021c
 800b164:	ffff0208 	.word	0xffff0208

0800b168 <__sread>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	460c      	mov	r4, r1
 800b16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b170:	f000 f984 	bl	800b47c <_read_r>
 800b174:	2800      	cmp	r0, #0
 800b176:	bfab      	itete	ge
 800b178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b17a:	89a3      	ldrhlt	r3, [r4, #12]
 800b17c:	181b      	addge	r3, r3, r0
 800b17e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b182:	bfac      	ite	ge
 800b184:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b186:	81a3      	strhlt	r3, [r4, #12]
 800b188:	bd10      	pop	{r4, pc}

0800b18a <__swrite>:
 800b18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18e:	461f      	mov	r7, r3
 800b190:	898b      	ldrh	r3, [r1, #12]
 800b192:	05db      	lsls	r3, r3, #23
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	4616      	mov	r6, r2
 800b19a:	d505      	bpl.n	800b1a8 <__swrite+0x1e>
 800b19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f000 f958 	bl	800b458 <_lseek_r>
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	463b      	mov	r3, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1be:	f000 b96f 	b.w	800b4a0 <_write_r>

0800b1c2 <__sseek>:
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ca:	f000 f945 	bl	800b458 <_lseek_r>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	bf15      	itete	ne
 800b1d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1de:	81a3      	strheq	r3, [r4, #12]
 800b1e0:	bf18      	it	ne
 800b1e2:	81a3      	strhne	r3, [r4, #12]
 800b1e4:	bd10      	pop	{r4, pc}

0800b1e6 <__sclose>:
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 b925 	b.w	800b438 <_close_r>

0800b1ee <__swbuf_r>:
 800b1ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f0:	460e      	mov	r6, r1
 800b1f2:	4614      	mov	r4, r2
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	b118      	cbz	r0, 800b200 <__swbuf_r+0x12>
 800b1f8:	6a03      	ldr	r3, [r0, #32]
 800b1fa:	b90b      	cbnz	r3, 800b200 <__swbuf_r+0x12>
 800b1fc:	f7ff feba 	bl	800af74 <__sinit>
 800b200:	69a3      	ldr	r3, [r4, #24]
 800b202:	60a3      	str	r3, [r4, #8]
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	071a      	lsls	r2, r3, #28
 800b208:	d501      	bpl.n	800b20e <__swbuf_r+0x20>
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	b943      	cbnz	r3, 800b220 <__swbuf_r+0x32>
 800b20e:	4621      	mov	r1, r4
 800b210:	4628      	mov	r0, r5
 800b212:	f000 f82b 	bl	800b26c <__swsetup_r>
 800b216:	b118      	cbz	r0, 800b220 <__swbuf_r+0x32>
 800b218:	f04f 37ff 	mov.w	r7, #4294967295
 800b21c:	4638      	mov	r0, r7
 800b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	6922      	ldr	r2, [r4, #16]
 800b224:	1a98      	subs	r0, r3, r2
 800b226:	6963      	ldr	r3, [r4, #20]
 800b228:	b2f6      	uxtb	r6, r6
 800b22a:	4283      	cmp	r3, r0
 800b22c:	4637      	mov	r7, r6
 800b22e:	dc05      	bgt.n	800b23c <__swbuf_r+0x4e>
 800b230:	4621      	mov	r1, r4
 800b232:	4628      	mov	r0, r5
 800b234:	f002 fca0 	bl	800db78 <_fflush_r>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d1ed      	bne.n	800b218 <__swbuf_r+0x2a>
 800b23c:	68a3      	ldr	r3, [r4, #8]
 800b23e:	3b01      	subs	r3, #1
 800b240:	60a3      	str	r3, [r4, #8]
 800b242:	6823      	ldr	r3, [r4, #0]
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	6022      	str	r2, [r4, #0]
 800b248:	701e      	strb	r6, [r3, #0]
 800b24a:	6962      	ldr	r2, [r4, #20]
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	429a      	cmp	r2, r3
 800b250:	d004      	beq.n	800b25c <__swbuf_r+0x6e>
 800b252:	89a3      	ldrh	r3, [r4, #12]
 800b254:	07db      	lsls	r3, r3, #31
 800b256:	d5e1      	bpl.n	800b21c <__swbuf_r+0x2e>
 800b258:	2e0a      	cmp	r6, #10
 800b25a:	d1df      	bne.n	800b21c <__swbuf_r+0x2e>
 800b25c:	4621      	mov	r1, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	f002 fc8a 	bl	800db78 <_fflush_r>
 800b264:	2800      	cmp	r0, #0
 800b266:	d0d9      	beq.n	800b21c <__swbuf_r+0x2e>
 800b268:	e7d6      	b.n	800b218 <__swbuf_r+0x2a>
	...

0800b26c <__swsetup_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4b29      	ldr	r3, [pc, #164]	@ (800b314 <__swsetup_r+0xa8>)
 800b270:	4605      	mov	r5, r0
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	460c      	mov	r4, r1
 800b276:	b118      	cbz	r0, 800b280 <__swsetup_r+0x14>
 800b278:	6a03      	ldr	r3, [r0, #32]
 800b27a:	b90b      	cbnz	r3, 800b280 <__swsetup_r+0x14>
 800b27c:	f7ff fe7a 	bl	800af74 <__sinit>
 800b280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b284:	0719      	lsls	r1, r3, #28
 800b286:	d422      	bmi.n	800b2ce <__swsetup_r+0x62>
 800b288:	06da      	lsls	r2, r3, #27
 800b28a:	d407      	bmi.n	800b29c <__swsetup_r+0x30>
 800b28c:	2209      	movs	r2, #9
 800b28e:	602a      	str	r2, [r5, #0]
 800b290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	f04f 30ff 	mov.w	r0, #4294967295
 800b29a:	e033      	b.n	800b304 <__swsetup_r+0x98>
 800b29c:	0758      	lsls	r0, r3, #29
 800b29e:	d512      	bpl.n	800b2c6 <__swsetup_r+0x5a>
 800b2a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2a2:	b141      	cbz	r1, 800b2b6 <__swsetup_r+0x4a>
 800b2a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d002      	beq.n	800b2b2 <__swsetup_r+0x46>
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f000 ffbf 	bl	800c230 <_free_r>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2b6:	89a3      	ldrh	r3, [r4, #12]
 800b2b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	6063      	str	r3, [r4, #4]
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f043 0308 	orr.w	r3, r3, #8
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	b94b      	cbnz	r3, 800b2e6 <__swsetup_r+0x7a>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2dc:	d003      	beq.n	800b2e6 <__swsetup_r+0x7a>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f002 fca9 	bl	800dc38 <__smakebuf_r>
 800b2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ea:	f013 0201 	ands.w	r2, r3, #1
 800b2ee:	d00a      	beq.n	800b306 <__swsetup_r+0x9a>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	60a2      	str	r2, [r4, #8]
 800b2f4:	6962      	ldr	r2, [r4, #20]
 800b2f6:	4252      	negs	r2, r2
 800b2f8:	61a2      	str	r2, [r4, #24]
 800b2fa:	6922      	ldr	r2, [r4, #16]
 800b2fc:	b942      	cbnz	r2, 800b310 <__swsetup_r+0xa4>
 800b2fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b302:	d1c5      	bne.n	800b290 <__swsetup_r+0x24>
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	0799      	lsls	r1, r3, #30
 800b308:	bf58      	it	pl
 800b30a:	6962      	ldrpl	r2, [r4, #20]
 800b30c:	60a2      	str	r2, [r4, #8]
 800b30e:	e7f4      	b.n	800b2fa <__swsetup_r+0x8e>
 800b310:	2000      	movs	r0, #0
 800b312:	e7f7      	b.n	800b304 <__swsetup_r+0x98>
 800b314:	2000021c 	.word	0x2000021c

0800b318 <memset>:
 800b318:	4402      	add	r2, r0
 800b31a:	4603      	mov	r3, r0
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d100      	bne.n	800b322 <memset+0xa>
 800b320:	4770      	bx	lr
 800b322:	f803 1b01 	strb.w	r1, [r3], #1
 800b326:	e7f9      	b.n	800b31c <memset+0x4>

0800b328 <strncmp>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	b16a      	cbz	r2, 800b348 <strncmp+0x20>
 800b32c:	3901      	subs	r1, #1
 800b32e:	1884      	adds	r4, r0, r2
 800b330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b334:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b338:	429a      	cmp	r2, r3
 800b33a:	d103      	bne.n	800b344 <strncmp+0x1c>
 800b33c:	42a0      	cmp	r0, r4
 800b33e:	d001      	beq.n	800b344 <strncmp+0x1c>
 800b340:	2a00      	cmp	r2, #0
 800b342:	d1f5      	bne.n	800b330 <strncmp+0x8>
 800b344:	1ad0      	subs	r0, r2, r3
 800b346:	bd10      	pop	{r4, pc}
 800b348:	4610      	mov	r0, r2
 800b34a:	e7fc      	b.n	800b346 <strncmp+0x1e>

0800b34c <strtok>:
 800b34c:	4b16      	ldr	r3, [pc, #88]	@ (800b3a8 <strtok+0x5c>)
 800b34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b352:	681f      	ldr	r7, [r3, #0]
 800b354:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b356:	4605      	mov	r5, r0
 800b358:	460e      	mov	r6, r1
 800b35a:	b9ec      	cbnz	r4, 800b398 <strtok+0x4c>
 800b35c:	2050      	movs	r0, #80	@ 0x50
 800b35e:	f001 faeb 	bl	800c938 <malloc>
 800b362:	4602      	mov	r2, r0
 800b364:	6478      	str	r0, [r7, #68]	@ 0x44
 800b366:	b920      	cbnz	r0, 800b372 <strtok+0x26>
 800b368:	4b10      	ldr	r3, [pc, #64]	@ (800b3ac <strtok+0x60>)
 800b36a:	4811      	ldr	r0, [pc, #68]	@ (800b3b0 <strtok+0x64>)
 800b36c:	215b      	movs	r1, #91	@ 0x5b
 800b36e:	f000 f8f5 	bl	800b55c <__assert_func>
 800b372:	e9c0 4400 	strd	r4, r4, [r0]
 800b376:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b37a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b37e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b382:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b386:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b38a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b38e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b392:	6184      	str	r4, [r0, #24]
 800b394:	7704      	strb	r4, [r0, #28]
 800b396:	6244      	str	r4, [r0, #36]	@ 0x24
 800b398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a4:	f000 b806 	b.w	800b3b4 <__strtok_r>
 800b3a8:	2000021c 	.word	0x2000021c
 800b3ac:	0800f669 	.word	0x0800f669
 800b3b0:	0800f680 	.word	0x0800f680

0800b3b4 <__strtok_r>:
 800b3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	b908      	cbnz	r0, 800b3be <__strtok_r+0xa>
 800b3ba:	6814      	ldr	r4, [r2, #0]
 800b3bc:	b144      	cbz	r4, 800b3d0 <__strtok_r+0x1c>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b3c4:	460f      	mov	r7, r1
 800b3c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b3ca:	b91e      	cbnz	r6, 800b3d4 <__strtok_r+0x20>
 800b3cc:	b965      	cbnz	r5, 800b3e8 <__strtok_r+0x34>
 800b3ce:	6015      	str	r5, [r2, #0]
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e005      	b.n	800b3e0 <__strtok_r+0x2c>
 800b3d4:	42b5      	cmp	r5, r6
 800b3d6:	d1f6      	bne.n	800b3c6 <__strtok_r+0x12>
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f0      	bne.n	800b3be <__strtok_r+0xa>
 800b3dc:	6014      	str	r4, [r2, #0]
 800b3de:	7003      	strb	r3, [r0, #0]
 800b3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3e2:	461c      	mov	r4, r3
 800b3e4:	e00c      	b.n	800b400 <__strtok_r+0x4c>
 800b3e6:	b915      	cbnz	r5, 800b3ee <__strtok_r+0x3a>
 800b3e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3ec:	460e      	mov	r6, r1
 800b3ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b3f2:	42ab      	cmp	r3, r5
 800b3f4:	d1f7      	bne.n	800b3e6 <__strtok_r+0x32>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0f3      	beq.n	800b3e2 <__strtok_r+0x2e>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b400:	6014      	str	r4, [r2, #0]
 800b402:	e7ed      	b.n	800b3e0 <__strtok_r+0x2c>

0800b404 <strstr>:
 800b404:	780a      	ldrb	r2, [r1, #0]
 800b406:	b570      	push	{r4, r5, r6, lr}
 800b408:	b96a      	cbnz	r2, 800b426 <strstr+0x22>
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d109      	bne.n	800b424 <strstr+0x20>
 800b410:	460c      	mov	r4, r1
 800b412:	4605      	mov	r5, r0
 800b414:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0f6      	beq.n	800b40a <strstr+0x6>
 800b41c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b420:	429e      	cmp	r6, r3
 800b422:	d0f7      	beq.n	800b414 <strstr+0x10>
 800b424:	3001      	adds	r0, #1
 800b426:	7803      	ldrb	r3, [r0, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1ef      	bne.n	800b40c <strstr+0x8>
 800b42c:	4618      	mov	r0, r3
 800b42e:	e7ec      	b.n	800b40a <strstr+0x6>

0800b430 <_localeconv_r>:
 800b430:	4800      	ldr	r0, [pc, #0]	@ (800b434 <_localeconv_r+0x4>)
 800b432:	4770      	bx	lr
 800b434:	200001a0 	.word	0x200001a0

0800b438 <_close_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4d06      	ldr	r5, [pc, #24]	@ (800b454 <_close_r+0x1c>)
 800b43c:	2300      	movs	r3, #0
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	602b      	str	r3, [r5, #0]
 800b444:	f7fa fbe6 	bl	8005c14 <_close>
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	d102      	bne.n	800b452 <_close_r+0x1a>
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b103      	cbz	r3, 800b452 <_close_r+0x1a>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	bd38      	pop	{r3, r4, r5, pc}
 800b454:	200008f8 	.word	0x200008f8

0800b458 <_lseek_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d07      	ldr	r5, [pc, #28]	@ (800b478 <_lseek_r+0x20>)
 800b45c:	4604      	mov	r4, r0
 800b45e:	4608      	mov	r0, r1
 800b460:	4611      	mov	r1, r2
 800b462:	2200      	movs	r2, #0
 800b464:	602a      	str	r2, [r5, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	f7fa fbfb 	bl	8005c62 <_lseek>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_lseek_r+0x1e>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_lseek_r+0x1e>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	200008f8 	.word	0x200008f8

0800b47c <_read_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	4d07      	ldr	r5, [pc, #28]	@ (800b49c <_read_r+0x20>)
 800b480:	4604      	mov	r4, r0
 800b482:	4608      	mov	r0, r1
 800b484:	4611      	mov	r1, r2
 800b486:	2200      	movs	r2, #0
 800b488:	602a      	str	r2, [r5, #0]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f7fa fba5 	bl	8005bda <_read>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d102      	bne.n	800b49a <_read_r+0x1e>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	b103      	cbz	r3, 800b49a <_read_r+0x1e>
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	200008f8 	.word	0x200008f8

0800b4a0 <_write_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4d07      	ldr	r5, [pc, #28]	@ (800b4c0 <_write_r+0x20>)
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	602a      	str	r2, [r5, #0]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	f7fa f856 	bl	8005560 <_write>
 800b4b4:	1c43      	adds	r3, r0, #1
 800b4b6:	d102      	bne.n	800b4be <_write_r+0x1e>
 800b4b8:	682b      	ldr	r3, [r5, #0]
 800b4ba:	b103      	cbz	r3, 800b4be <_write_r+0x1e>
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	bd38      	pop	{r3, r4, r5, pc}
 800b4c0:	200008f8 	.word	0x200008f8

0800b4c4 <__errno>:
 800b4c4:	4b01      	ldr	r3, [pc, #4]	@ (800b4cc <__errno+0x8>)
 800b4c6:	6818      	ldr	r0, [r3, #0]
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	2000021c 	.word	0x2000021c

0800b4d0 <__libc_init_array>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	4d0d      	ldr	r5, [pc, #52]	@ (800b508 <__libc_init_array+0x38>)
 800b4d4:	4c0d      	ldr	r4, [pc, #52]	@ (800b50c <__libc_init_array+0x3c>)
 800b4d6:	1b64      	subs	r4, r4, r5
 800b4d8:	10a4      	asrs	r4, r4, #2
 800b4da:	2600      	movs	r6, #0
 800b4dc:	42a6      	cmp	r6, r4
 800b4de:	d109      	bne.n	800b4f4 <__libc_init_array+0x24>
 800b4e0:	4d0b      	ldr	r5, [pc, #44]	@ (800b510 <__libc_init_array+0x40>)
 800b4e2:	4c0c      	ldr	r4, [pc, #48]	@ (800b514 <__libc_init_array+0x44>)
 800b4e4:	f004 f804 	bl	800f4f0 <_init>
 800b4e8:	1b64      	subs	r4, r4, r5
 800b4ea:	10a4      	asrs	r4, r4, #2
 800b4ec:	2600      	movs	r6, #0
 800b4ee:	42a6      	cmp	r6, r4
 800b4f0:	d105      	bne.n	800b4fe <__libc_init_array+0x2e>
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4f8:	4798      	blx	r3
 800b4fa:	3601      	adds	r6, #1
 800b4fc:	e7ee      	b.n	800b4dc <__libc_init_array+0xc>
 800b4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b502:	4798      	blx	r3
 800b504:	3601      	adds	r6, #1
 800b506:	e7f2      	b.n	800b4ee <__libc_init_array+0x1e>
 800b508:	0800fc58 	.word	0x0800fc58
 800b50c:	0800fc58 	.word	0x0800fc58
 800b510:	0800fc58 	.word	0x0800fc58
 800b514:	0800fc5c 	.word	0x0800fc5c

0800b518 <__retarget_lock_init_recursive>:
 800b518:	4770      	bx	lr

0800b51a <__retarget_lock_acquire_recursive>:
 800b51a:	4770      	bx	lr

0800b51c <__retarget_lock_release_recursive>:
 800b51c:	4770      	bx	lr

0800b51e <memcpy>:
 800b51e:	440a      	add	r2, r1
 800b520:	4291      	cmp	r1, r2
 800b522:	f100 33ff 	add.w	r3, r0, #4294967295
 800b526:	d100      	bne.n	800b52a <memcpy+0xc>
 800b528:	4770      	bx	lr
 800b52a:	b510      	push	{r4, lr}
 800b52c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b530:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b534:	4291      	cmp	r1, r2
 800b536:	d1f9      	bne.n	800b52c <memcpy+0xe>
 800b538:	bd10      	pop	{r4, pc}
 800b53a:	0000      	movs	r0, r0
 800b53c:	0000      	movs	r0, r0
	...

0800b540 <nan>:
 800b540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b548 <nan+0x8>
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	00000000 	.word	0x00000000
 800b54c:	7ff80000 	.word	0x7ff80000

0800b550 <nanf>:
 800b550:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b558 <nanf+0x8>
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	7fc00000 	.word	0x7fc00000

0800b55c <__assert_func>:
 800b55c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b55e:	4614      	mov	r4, r2
 800b560:	461a      	mov	r2, r3
 800b562:	4b09      	ldr	r3, [pc, #36]	@ (800b588 <__assert_func+0x2c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4605      	mov	r5, r0
 800b568:	68d8      	ldr	r0, [r3, #12]
 800b56a:	b954      	cbnz	r4, 800b582 <__assert_func+0x26>
 800b56c:	4b07      	ldr	r3, [pc, #28]	@ (800b58c <__assert_func+0x30>)
 800b56e:	461c      	mov	r4, r3
 800b570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b574:	9100      	str	r1, [sp, #0]
 800b576:	462b      	mov	r3, r5
 800b578:	4905      	ldr	r1, [pc, #20]	@ (800b590 <__assert_func+0x34>)
 800b57a:	f002 fb25 	bl	800dbc8 <fiprintf>
 800b57e:	f002 fbe3 	bl	800dd48 <abort>
 800b582:	4b04      	ldr	r3, [pc, #16]	@ (800b594 <__assert_func+0x38>)
 800b584:	e7f4      	b.n	800b570 <__assert_func+0x14>
 800b586:	bf00      	nop
 800b588:	2000021c 	.word	0x2000021c
 800b58c:	0800f71d 	.word	0x0800f71d
 800b590:	0800f6ef 	.word	0x0800f6ef
 800b594:	0800f6e2 	.word	0x0800f6e2

0800b598 <quorem>:
 800b598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	6903      	ldr	r3, [r0, #16]
 800b59e:	690c      	ldr	r4, [r1, #16]
 800b5a0:	42a3      	cmp	r3, r4
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	db7e      	blt.n	800b6a4 <quorem+0x10c>
 800b5a6:	3c01      	subs	r4, #1
 800b5a8:	f101 0814 	add.w	r8, r1, #20
 800b5ac:	00a3      	lsls	r3, r4, #2
 800b5ae:	f100 0514 	add.w	r5, r0, #20
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5ce:	d32e      	bcc.n	800b62e <quorem+0x96>
 800b5d0:	f04f 0a00 	mov.w	sl, #0
 800b5d4:	46c4      	mov	ip, r8
 800b5d6:	46ae      	mov	lr, r5
 800b5d8:	46d3      	mov	fp, sl
 800b5da:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5de:	b298      	uxth	r0, r3
 800b5e0:	fb06 a000 	mla	r0, r6, r0, sl
 800b5e4:	0c02      	lsrs	r2, r0, #16
 800b5e6:	0c1b      	lsrs	r3, r3, #16
 800b5e8:	fb06 2303 	mla	r3, r6, r3, r2
 800b5ec:	f8de 2000 	ldr.w	r2, [lr]
 800b5f0:	b280      	uxth	r0, r0
 800b5f2:	b292      	uxth	r2, r2
 800b5f4:	1a12      	subs	r2, r2, r0
 800b5f6:	445a      	add	r2, fp
 800b5f8:	f8de 0000 	ldr.w	r0, [lr]
 800b5fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b600:	b29b      	uxth	r3, r3
 800b602:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b606:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b60a:	b292      	uxth	r2, r2
 800b60c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b610:	45e1      	cmp	r9, ip
 800b612:	f84e 2b04 	str.w	r2, [lr], #4
 800b616:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b61a:	d2de      	bcs.n	800b5da <quorem+0x42>
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	58eb      	ldr	r3, [r5, r3]
 800b620:	b92b      	cbnz	r3, 800b62e <quorem+0x96>
 800b622:	9b01      	ldr	r3, [sp, #4]
 800b624:	3b04      	subs	r3, #4
 800b626:	429d      	cmp	r5, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	d32f      	bcc.n	800b68c <quorem+0xf4>
 800b62c:	613c      	str	r4, [r7, #16]
 800b62e:	4638      	mov	r0, r7
 800b630:	f001 fd0e 	bl	800d050 <__mcmp>
 800b634:	2800      	cmp	r0, #0
 800b636:	db25      	blt.n	800b684 <quorem+0xec>
 800b638:	4629      	mov	r1, r5
 800b63a:	2000      	movs	r0, #0
 800b63c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b640:	f8d1 c000 	ldr.w	ip, [r1]
 800b644:	fa1f fe82 	uxth.w	lr, r2
 800b648:	fa1f f38c 	uxth.w	r3, ip
 800b64c:	eba3 030e 	sub.w	r3, r3, lr
 800b650:	4403      	add	r3, r0
 800b652:	0c12      	lsrs	r2, r2, #16
 800b654:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b658:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b662:	45c1      	cmp	r9, r8
 800b664:	f841 3b04 	str.w	r3, [r1], #4
 800b668:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b66c:	d2e6      	bcs.n	800b63c <quorem+0xa4>
 800b66e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b676:	b922      	cbnz	r2, 800b682 <quorem+0xea>
 800b678:	3b04      	subs	r3, #4
 800b67a:	429d      	cmp	r5, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	d30b      	bcc.n	800b698 <quorem+0x100>
 800b680:	613c      	str	r4, [r7, #16]
 800b682:	3601      	adds	r6, #1
 800b684:	4630      	mov	r0, r6
 800b686:	b003      	add	sp, #12
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68c:	6812      	ldr	r2, [r2, #0]
 800b68e:	3b04      	subs	r3, #4
 800b690:	2a00      	cmp	r2, #0
 800b692:	d1cb      	bne.n	800b62c <quorem+0x94>
 800b694:	3c01      	subs	r4, #1
 800b696:	e7c6      	b.n	800b626 <quorem+0x8e>
 800b698:	6812      	ldr	r2, [r2, #0]
 800b69a:	3b04      	subs	r3, #4
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	d1ef      	bne.n	800b680 <quorem+0xe8>
 800b6a0:	3c01      	subs	r4, #1
 800b6a2:	e7ea      	b.n	800b67a <quorem+0xe2>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e7ee      	b.n	800b686 <quorem+0xee>

0800b6a8 <_dtoa_r>:
 800b6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	69c7      	ldr	r7, [r0, #28]
 800b6ae:	b099      	sub	sp, #100	@ 0x64
 800b6b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b6b4:	ec55 4b10 	vmov	r4, r5, d0
 800b6b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b6ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6bc:	4683      	mov	fp, r0
 800b6be:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6c2:	b97f      	cbnz	r7, 800b6e4 <_dtoa_r+0x3c>
 800b6c4:	2010      	movs	r0, #16
 800b6c6:	f001 f937 	bl	800c938 <malloc>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6d0:	b920      	cbnz	r0, 800b6dc <_dtoa_r+0x34>
 800b6d2:	4ba7      	ldr	r3, [pc, #668]	@ (800b970 <_dtoa_r+0x2c8>)
 800b6d4:	21ef      	movs	r1, #239	@ 0xef
 800b6d6:	48a7      	ldr	r0, [pc, #668]	@ (800b974 <_dtoa_r+0x2cc>)
 800b6d8:	f7ff ff40 	bl	800b55c <__assert_func>
 800b6dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6e0:	6007      	str	r7, [r0, #0]
 800b6e2:	60c7      	str	r7, [r0, #12]
 800b6e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6e8:	6819      	ldr	r1, [r3, #0]
 800b6ea:	b159      	cbz	r1, 800b704 <_dtoa_r+0x5c>
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	604a      	str	r2, [r1, #4]
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	4093      	lsls	r3, r2
 800b6f4:	608b      	str	r3, [r1, #8]
 800b6f6:	4658      	mov	r0, fp
 800b6f8:	f001 fa26 	bl	800cb48 <_Bfree>
 800b6fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	1e2b      	subs	r3, r5, #0
 800b706:	bfb9      	ittee	lt
 800b708:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b70c:	9303      	strlt	r3, [sp, #12]
 800b70e:	2300      	movge	r3, #0
 800b710:	6033      	strge	r3, [r6, #0]
 800b712:	9f03      	ldr	r7, [sp, #12]
 800b714:	4b98      	ldr	r3, [pc, #608]	@ (800b978 <_dtoa_r+0x2d0>)
 800b716:	bfbc      	itt	lt
 800b718:	2201      	movlt	r2, #1
 800b71a:	6032      	strlt	r2, [r6, #0]
 800b71c:	43bb      	bics	r3, r7
 800b71e:	d112      	bne.n	800b746 <_dtoa_r+0x9e>
 800b720:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b722:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b72c:	4323      	orrs	r3, r4
 800b72e:	f000 854d 	beq.w	800c1cc <_dtoa_r+0xb24>
 800b732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b734:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b98c <_dtoa_r+0x2e4>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 854f 	beq.w	800c1dc <_dtoa_r+0xb34>
 800b73e:	f10a 0303 	add.w	r3, sl, #3
 800b742:	f000 bd49 	b.w	800c1d8 <_dtoa_r+0xb30>
 800b746:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b74a:	2200      	movs	r2, #0
 800b74c:	ec51 0b17 	vmov	r0, r1, d7
 800b750:	2300      	movs	r3, #0
 800b752:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b756:	f7f5 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b75a:	4680      	mov	r8, r0
 800b75c:	b158      	cbz	r0, 800b776 <_dtoa_r+0xce>
 800b75e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b760:	2301      	movs	r3, #1
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b766:	b113      	cbz	r3, 800b76e <_dtoa_r+0xc6>
 800b768:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b76a:	4b84      	ldr	r3, [pc, #528]	@ (800b97c <_dtoa_r+0x2d4>)
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b990 <_dtoa_r+0x2e8>
 800b772:	f000 bd33 	b.w	800c1dc <_dtoa_r+0xb34>
 800b776:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b77a:	aa16      	add	r2, sp, #88	@ 0x58
 800b77c:	a917      	add	r1, sp, #92	@ 0x5c
 800b77e:	4658      	mov	r0, fp
 800b780:	f001 fd86 	bl	800d290 <__d2b>
 800b784:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b788:	4681      	mov	r9, r0
 800b78a:	2e00      	cmp	r6, #0
 800b78c:	d077      	beq.n	800b87e <_dtoa_r+0x1d6>
 800b78e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b790:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b79c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b7a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b7a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	4b74      	ldr	r3, [pc, #464]	@ (800b980 <_dtoa_r+0x2d8>)
 800b7ae:	f7f4 fd6b 	bl	8000288 <__aeabi_dsub>
 800b7b2:	a369      	add	r3, pc, #420	@ (adr r3, 800b958 <_dtoa_r+0x2b0>)
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	f7f4 ff1e 	bl	80005f8 <__aeabi_dmul>
 800b7bc:	a368      	add	r3, pc, #416	@ (adr r3, 800b960 <_dtoa_r+0x2b8>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	f7f4 fd63 	bl	800028c <__adddf3>
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	460d      	mov	r5, r1
 800b7cc:	f7f4 feaa 	bl	8000524 <__aeabi_i2d>
 800b7d0:	a365      	add	r3, pc, #404	@ (adr r3, 800b968 <_dtoa_r+0x2c0>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 ff0f 	bl	80005f8 <__aeabi_dmul>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f4 fd53 	bl	800028c <__adddf3>
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	f7f5 f9b5 	bl	8000b58 <__aeabi_d2iz>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f7f5 f970 	bl	8000adc <__aeabi_dcmplt>
 800b7fc:	b140      	cbz	r0, 800b810 <_dtoa_r+0x168>
 800b7fe:	4638      	mov	r0, r7
 800b800:	f7f4 fe90 	bl	8000524 <__aeabi_i2d>
 800b804:	4622      	mov	r2, r4
 800b806:	462b      	mov	r3, r5
 800b808:	f7f5 f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b80c:	b900      	cbnz	r0, 800b810 <_dtoa_r+0x168>
 800b80e:	3f01      	subs	r7, #1
 800b810:	2f16      	cmp	r7, #22
 800b812:	d851      	bhi.n	800b8b8 <_dtoa_r+0x210>
 800b814:	4b5b      	ldr	r3, [pc, #364]	@ (800b984 <_dtoa_r+0x2dc>)
 800b816:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b822:	f7f5 f95b 	bl	8000adc <__aeabi_dcmplt>
 800b826:	2800      	cmp	r0, #0
 800b828:	d048      	beq.n	800b8bc <_dtoa_r+0x214>
 800b82a:	3f01      	subs	r7, #1
 800b82c:	2300      	movs	r3, #0
 800b82e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b830:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b832:	1b9b      	subs	r3, r3, r6
 800b834:	1e5a      	subs	r2, r3, #1
 800b836:	bf44      	itt	mi
 800b838:	f1c3 0801 	rsbmi	r8, r3, #1
 800b83c:	2300      	movmi	r3, #0
 800b83e:	9208      	str	r2, [sp, #32]
 800b840:	bf54      	ite	pl
 800b842:	f04f 0800 	movpl.w	r8, #0
 800b846:	9308      	strmi	r3, [sp, #32]
 800b848:	2f00      	cmp	r7, #0
 800b84a:	db39      	blt.n	800b8c0 <_dtoa_r+0x218>
 800b84c:	9b08      	ldr	r3, [sp, #32]
 800b84e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b850:	443b      	add	r3, r7
 800b852:	9308      	str	r3, [sp, #32]
 800b854:	2300      	movs	r3, #0
 800b856:	930a      	str	r3, [sp, #40]	@ 0x28
 800b858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85a:	2b09      	cmp	r3, #9
 800b85c:	d864      	bhi.n	800b928 <_dtoa_r+0x280>
 800b85e:	2b05      	cmp	r3, #5
 800b860:	bfc4      	itt	gt
 800b862:	3b04      	subgt	r3, #4
 800b864:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	f1a3 0302 	sub.w	r3, r3, #2
 800b86c:	bfcc      	ite	gt
 800b86e:	2400      	movgt	r4, #0
 800b870:	2401      	movle	r4, #1
 800b872:	2b03      	cmp	r3, #3
 800b874:	d863      	bhi.n	800b93e <_dtoa_r+0x296>
 800b876:	e8df f003 	tbb	[pc, r3]
 800b87a:	372a      	.short	0x372a
 800b87c:	5535      	.short	0x5535
 800b87e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b882:	441e      	add	r6, r3
 800b884:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b888:	2b20      	cmp	r3, #32
 800b88a:	bfc1      	itttt	gt
 800b88c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b890:	409f      	lslgt	r7, r3
 800b892:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b896:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b89a:	bfd6      	itet	le
 800b89c:	f1c3 0320 	rsble	r3, r3, #32
 800b8a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b8a4:	fa04 f003 	lslle.w	r0, r4, r3
 800b8a8:	f7f4 fe2c 	bl	8000504 <__aeabi_ui2d>
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8b2:	3e01      	subs	r6, #1
 800b8b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b8b6:	e777      	b.n	800b7a8 <_dtoa_r+0x100>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e7b8      	b.n	800b82e <_dtoa_r+0x186>
 800b8bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b8be:	e7b7      	b.n	800b830 <_dtoa_r+0x188>
 800b8c0:	427b      	negs	r3, r7
 800b8c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	eba8 0807 	sub.w	r8, r8, r7
 800b8ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8cc:	e7c4      	b.n	800b858 <_dtoa_r+0x1b0>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dc35      	bgt.n	800b944 <_dtoa_r+0x29c>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	9307      	str	r3, [sp, #28]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8e2:	e00b      	b.n	800b8fc <_dtoa_r+0x254>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e7f3      	b.n	800b8d0 <_dtoa_r+0x228>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8ee:	18fb      	adds	r3, r7, r3
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	9307      	str	r3, [sp, #28]
 800b8f8:	bfb8      	it	lt
 800b8fa:	2301      	movlt	r3, #1
 800b8fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b900:	2100      	movs	r1, #0
 800b902:	2204      	movs	r2, #4
 800b904:	f102 0514 	add.w	r5, r2, #20
 800b908:	429d      	cmp	r5, r3
 800b90a:	d91f      	bls.n	800b94c <_dtoa_r+0x2a4>
 800b90c:	6041      	str	r1, [r0, #4]
 800b90e:	4658      	mov	r0, fp
 800b910:	f001 f8da 	bl	800cac8 <_Balloc>
 800b914:	4682      	mov	sl, r0
 800b916:	2800      	cmp	r0, #0
 800b918:	d13c      	bne.n	800b994 <_dtoa_r+0x2ec>
 800b91a:	4b1b      	ldr	r3, [pc, #108]	@ (800b988 <_dtoa_r+0x2e0>)
 800b91c:	4602      	mov	r2, r0
 800b91e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b922:	e6d8      	b.n	800b6d6 <_dtoa_r+0x2e>
 800b924:	2301      	movs	r3, #1
 800b926:	e7e0      	b.n	800b8ea <_dtoa_r+0x242>
 800b928:	2401      	movs	r4, #1
 800b92a:	2300      	movs	r3, #0
 800b92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b92e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b930:	f04f 33ff 	mov.w	r3, #4294967295
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	9307      	str	r3, [sp, #28]
 800b938:	2200      	movs	r2, #0
 800b93a:	2312      	movs	r3, #18
 800b93c:	e7d0      	b.n	800b8e0 <_dtoa_r+0x238>
 800b93e:	2301      	movs	r3, #1
 800b940:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b942:	e7f5      	b.n	800b930 <_dtoa_r+0x288>
 800b944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	9307      	str	r3, [sp, #28]
 800b94a:	e7d7      	b.n	800b8fc <_dtoa_r+0x254>
 800b94c:	3101      	adds	r1, #1
 800b94e:	0052      	lsls	r2, r2, #1
 800b950:	e7d8      	b.n	800b904 <_dtoa_r+0x25c>
 800b952:	bf00      	nop
 800b954:	f3af 8000 	nop.w
 800b958:	636f4361 	.word	0x636f4361
 800b95c:	3fd287a7 	.word	0x3fd287a7
 800b960:	8b60c8b3 	.word	0x8b60c8b3
 800b964:	3fc68a28 	.word	0x3fc68a28
 800b968:	509f79fb 	.word	0x509f79fb
 800b96c:	3fd34413 	.word	0x3fd34413
 800b970:	0800f669 	.word	0x0800f669
 800b974:	0800f72b 	.word	0x0800f72b
 800b978:	7ff00000 	.word	0x7ff00000
 800b97c:	0800f641 	.word	0x0800f641
 800b980:	3ff80000 	.word	0x3ff80000
 800b984:	0800f888 	.word	0x0800f888
 800b988:	0800f783 	.word	0x0800f783
 800b98c:	0800f727 	.word	0x0800f727
 800b990:	0800f640 	.word	0x0800f640
 800b994:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b998:	6018      	str	r0, [r3, #0]
 800b99a:	9b07      	ldr	r3, [sp, #28]
 800b99c:	2b0e      	cmp	r3, #14
 800b99e:	f200 80a4 	bhi.w	800baea <_dtoa_r+0x442>
 800b9a2:	2c00      	cmp	r4, #0
 800b9a4:	f000 80a1 	beq.w	800baea <_dtoa_r+0x442>
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	dd33      	ble.n	800ba14 <_dtoa_r+0x36c>
 800b9ac:	4bad      	ldr	r3, [pc, #692]	@ (800bc64 <_dtoa_r+0x5bc>)
 800b9ae:	f007 020f 	and.w	r2, r7, #15
 800b9b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9b6:	ed93 7b00 	vldr	d7, [r3]
 800b9ba:	05f8      	lsls	r0, r7, #23
 800b9bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b9c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9c4:	d516      	bpl.n	800b9f4 <_dtoa_r+0x34c>
 800b9c6:	4ba8      	ldr	r3, [pc, #672]	@ (800bc68 <_dtoa_r+0x5c0>)
 800b9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9d0:	f7f4 ff3c 	bl	800084c <__aeabi_ddiv>
 800b9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9d8:	f004 040f 	and.w	r4, r4, #15
 800b9dc:	2603      	movs	r6, #3
 800b9de:	4da2      	ldr	r5, [pc, #648]	@ (800bc68 <_dtoa_r+0x5c0>)
 800b9e0:	b954      	cbnz	r4, 800b9f8 <_dtoa_r+0x350>
 800b9e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ea:	f7f4 ff2f 	bl	800084c <__aeabi_ddiv>
 800b9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f2:	e028      	b.n	800ba46 <_dtoa_r+0x39e>
 800b9f4:	2602      	movs	r6, #2
 800b9f6:	e7f2      	b.n	800b9de <_dtoa_r+0x336>
 800b9f8:	07e1      	lsls	r1, r4, #31
 800b9fa:	d508      	bpl.n	800ba0e <_dtoa_r+0x366>
 800b9fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba04:	f7f4 fdf8 	bl	80005f8 <__aeabi_dmul>
 800ba08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba0c:	3601      	adds	r6, #1
 800ba0e:	1064      	asrs	r4, r4, #1
 800ba10:	3508      	adds	r5, #8
 800ba12:	e7e5      	b.n	800b9e0 <_dtoa_r+0x338>
 800ba14:	f000 80d2 	beq.w	800bbbc <_dtoa_r+0x514>
 800ba18:	427c      	negs	r4, r7
 800ba1a:	4b92      	ldr	r3, [pc, #584]	@ (800bc64 <_dtoa_r+0x5bc>)
 800ba1c:	4d92      	ldr	r5, [pc, #584]	@ (800bc68 <_dtoa_r+0x5c0>)
 800ba1e:	f004 020f 	and.w	r2, r4, #15
 800ba22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba2e:	f7f4 fde3 	bl	80005f8 <__aeabi_dmul>
 800ba32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba36:	1124      	asrs	r4, r4, #4
 800ba38:	2300      	movs	r3, #0
 800ba3a:	2602      	movs	r6, #2
 800ba3c:	2c00      	cmp	r4, #0
 800ba3e:	f040 80b2 	bne.w	800bba6 <_dtoa_r+0x4fe>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1d3      	bne.n	800b9ee <_dtoa_r+0x346>
 800ba46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 80b7 	beq.w	800bbc0 <_dtoa_r+0x518>
 800ba52:	4b86      	ldr	r3, [pc, #536]	@ (800bc6c <_dtoa_r+0x5c4>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	4620      	mov	r0, r4
 800ba58:	4629      	mov	r1, r5
 800ba5a:	f7f5 f83f 	bl	8000adc <__aeabi_dcmplt>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f000 80ae 	beq.w	800bbc0 <_dtoa_r+0x518>
 800ba64:	9b07      	ldr	r3, [sp, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 80aa 	beq.w	800bbc0 <_dtoa_r+0x518>
 800ba6c:	9b00      	ldr	r3, [sp, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	dd37      	ble.n	800bae2 <_dtoa_r+0x43a>
 800ba72:	1e7b      	subs	r3, r7, #1
 800ba74:	9304      	str	r3, [sp, #16]
 800ba76:	4620      	mov	r0, r4
 800ba78:	4b7d      	ldr	r3, [pc, #500]	@ (800bc70 <_dtoa_r+0x5c8>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f4 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ba82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba86:	9c00      	ldr	r4, [sp, #0]
 800ba88:	3601      	adds	r6, #1
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f7f4 fd4a 	bl	8000524 <__aeabi_i2d>
 800ba90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba94:	f7f4 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ba98:	4b76      	ldr	r3, [pc, #472]	@ (800bc74 <_dtoa_r+0x5cc>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f7f4 fbf6 	bl	800028c <__adddf3>
 800baa0:	4605      	mov	r5, r0
 800baa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800baa6:	2c00      	cmp	r4, #0
 800baa8:	f040 808d 	bne.w	800bbc6 <_dtoa_r+0x51e>
 800baac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab0:	4b71      	ldr	r3, [pc, #452]	@ (800bc78 <_dtoa_r+0x5d0>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	f7f4 fbe8 	bl	8000288 <__aeabi_dsub>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bac0:	462a      	mov	r2, r5
 800bac2:	4633      	mov	r3, r6
 800bac4:	f7f5 f828 	bl	8000b18 <__aeabi_dcmpgt>
 800bac8:	2800      	cmp	r0, #0
 800baca:	f040 828b 	bne.w	800bfe4 <_dtoa_r+0x93c>
 800bace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bad2:	462a      	mov	r2, r5
 800bad4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bad8:	f7f5 f800 	bl	8000adc <__aeabi_dcmplt>
 800badc:	2800      	cmp	r0, #0
 800bade:	f040 8128 	bne.w	800bd32 <_dtoa_r+0x68a>
 800bae2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bae6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800baea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800baec:	2b00      	cmp	r3, #0
 800baee:	f2c0 815a 	blt.w	800bda6 <_dtoa_r+0x6fe>
 800baf2:	2f0e      	cmp	r7, #14
 800baf4:	f300 8157 	bgt.w	800bda6 <_dtoa_r+0x6fe>
 800baf8:	4b5a      	ldr	r3, [pc, #360]	@ (800bc64 <_dtoa_r+0x5bc>)
 800bafa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bafe:	ed93 7b00 	vldr	d7, [r3]
 800bb02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	ed8d 7b00 	vstr	d7, [sp]
 800bb0a:	da03      	bge.n	800bb14 <_dtoa_r+0x46c>
 800bb0c:	9b07      	ldr	r3, [sp, #28]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f340 8101 	ble.w	800bd16 <_dtoa_r+0x66e>
 800bb14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb18:	4656      	mov	r6, sl
 800bb1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	f7f4 fe93 	bl	800084c <__aeabi_ddiv>
 800bb26:	f7f5 f817 	bl	8000b58 <__aeabi_d2iz>
 800bb2a:	4680      	mov	r8, r0
 800bb2c:	f7f4 fcfa 	bl	8000524 <__aeabi_i2d>
 800bb30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb34:	f7f4 fd60 	bl	80005f8 <__aeabi_dmul>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb44:	f7f4 fba0 	bl	8000288 <__aeabi_dsub>
 800bb48:	f806 4b01 	strb.w	r4, [r6], #1
 800bb4c:	9d07      	ldr	r5, [sp, #28]
 800bb4e:	eba6 040a 	sub.w	r4, r6, sl
 800bb52:	42a5      	cmp	r5, r4
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	f040 8117 	bne.w	800bd8a <_dtoa_r+0x6e2>
 800bb5c:	f7f4 fb96 	bl	800028c <__adddf3>
 800bb60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb64:	4604      	mov	r4, r0
 800bb66:	460d      	mov	r5, r1
 800bb68:	f7f4 ffd6 	bl	8000b18 <__aeabi_dcmpgt>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	f040 80f9 	bne.w	800bd64 <_dtoa_r+0x6bc>
 800bb72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb7e:	b118      	cbz	r0, 800bb88 <_dtoa_r+0x4e0>
 800bb80:	f018 0f01 	tst.w	r8, #1
 800bb84:	f040 80ee 	bne.w	800bd64 <_dtoa_r+0x6bc>
 800bb88:	4649      	mov	r1, r9
 800bb8a:	4658      	mov	r0, fp
 800bb8c:	f000 ffdc 	bl	800cb48 <_Bfree>
 800bb90:	2300      	movs	r3, #0
 800bb92:	7033      	strb	r3, [r6, #0]
 800bb94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb96:	3701      	adds	r7, #1
 800bb98:	601f      	str	r7, [r3, #0]
 800bb9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 831d 	beq.w	800c1dc <_dtoa_r+0xb34>
 800bba2:	601e      	str	r6, [r3, #0]
 800bba4:	e31a      	b.n	800c1dc <_dtoa_r+0xb34>
 800bba6:	07e2      	lsls	r2, r4, #31
 800bba8:	d505      	bpl.n	800bbb6 <_dtoa_r+0x50e>
 800bbaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	3601      	adds	r6, #1
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	1064      	asrs	r4, r4, #1
 800bbb8:	3508      	adds	r5, #8
 800bbba:	e73f      	b.n	800ba3c <_dtoa_r+0x394>
 800bbbc:	2602      	movs	r6, #2
 800bbbe:	e742      	b.n	800ba46 <_dtoa_r+0x39e>
 800bbc0:	9c07      	ldr	r4, [sp, #28]
 800bbc2:	9704      	str	r7, [sp, #16]
 800bbc4:	e761      	b.n	800ba8a <_dtoa_r+0x3e2>
 800bbc6:	4b27      	ldr	r3, [pc, #156]	@ (800bc64 <_dtoa_r+0x5bc>)
 800bbc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bbca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bbce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbd2:	4454      	add	r4, sl
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	d053      	beq.n	800bc80 <_dtoa_r+0x5d8>
 800bbd8:	4928      	ldr	r1, [pc, #160]	@ (800bc7c <_dtoa_r+0x5d4>)
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f7f4 fe36 	bl	800084c <__aeabi_ddiv>
 800bbe0:	4633      	mov	r3, r6
 800bbe2:	462a      	mov	r2, r5
 800bbe4:	f7f4 fb50 	bl	8000288 <__aeabi_dsub>
 800bbe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bbec:	4656      	mov	r6, sl
 800bbee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf2:	f7f4 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	f7f4 fc94 	bl	8000524 <__aeabi_i2d>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	3530      	adds	r5, #48	@ 0x30
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc12:	f806 5b01 	strb.w	r5, [r6], #1
 800bc16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc1a:	f7f4 ff5f 	bl	8000adc <__aeabi_dcmplt>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d171      	bne.n	800bd06 <_dtoa_r+0x65e>
 800bc22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc26:	4911      	ldr	r1, [pc, #68]	@ (800bc6c <_dtoa_r+0x5c4>)
 800bc28:	2000      	movs	r0, #0
 800bc2a:	f7f4 fb2d 	bl	8000288 <__aeabi_dsub>
 800bc2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc32:	f7f4 ff53 	bl	8000adc <__aeabi_dcmplt>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	f040 8095 	bne.w	800bd66 <_dtoa_r+0x6be>
 800bc3c:	42a6      	cmp	r6, r4
 800bc3e:	f43f af50 	beq.w	800bae2 <_dtoa_r+0x43a>
 800bc42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc46:	4b0a      	ldr	r3, [pc, #40]	@ (800bc70 <_dtoa_r+0x5c8>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	4b08      	ldr	r3, [pc, #32]	@ (800bc70 <_dtoa_r+0x5c8>)
 800bc50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc54:	2200      	movs	r2, #0
 800bc56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc62:	e7c4      	b.n	800bbee <_dtoa_r+0x546>
 800bc64:	0800f888 	.word	0x0800f888
 800bc68:	0800f860 	.word	0x0800f860
 800bc6c:	3ff00000 	.word	0x3ff00000
 800bc70:	40240000 	.word	0x40240000
 800bc74:	401c0000 	.word	0x401c0000
 800bc78:	40140000 	.word	0x40140000
 800bc7c:	3fe00000 	.word	0x3fe00000
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	f7f4 fcb8 	bl	80005f8 <__aeabi_dmul>
 800bc88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc8c:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc8e:	4656      	mov	r6, sl
 800bc90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc94:	f7f4 ff60 	bl	8000b58 <__aeabi_d2iz>
 800bc98:	4605      	mov	r5, r0
 800bc9a:	f7f4 fc43 	bl	8000524 <__aeabi_i2d>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca6:	f7f4 faef 	bl	8000288 <__aeabi_dsub>
 800bcaa:	3530      	adds	r5, #48	@ 0x30
 800bcac:	f806 5b01 	strb.w	r5, [r6], #1
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	42a6      	cmp	r6, r4
 800bcb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcba:	f04f 0200 	mov.w	r2, #0
 800bcbe:	d124      	bne.n	800bd0a <_dtoa_r+0x662>
 800bcc0:	4bac      	ldr	r3, [pc, #688]	@ (800bf74 <_dtoa_r+0x8cc>)
 800bcc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcc6:	f7f4 fae1 	bl	800028c <__adddf3>
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd2:	f7f4 ff21 	bl	8000b18 <__aeabi_dcmpgt>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d145      	bne.n	800bd66 <_dtoa_r+0x6be>
 800bcda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcde:	49a5      	ldr	r1, [pc, #660]	@ (800bf74 <_dtoa_r+0x8cc>)
 800bce0:	2000      	movs	r0, #0
 800bce2:	f7f4 fad1 	bl	8000288 <__aeabi_dsub>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcee:	f7f4 fef5 	bl	8000adc <__aeabi_dcmplt>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f43f aef5 	beq.w	800bae2 <_dtoa_r+0x43a>
 800bcf8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bcfa:	1e73      	subs	r3, r6, #1
 800bcfc:	9315      	str	r3, [sp, #84]	@ 0x54
 800bcfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd02:	2b30      	cmp	r3, #48	@ 0x30
 800bd04:	d0f8      	beq.n	800bcf8 <_dtoa_r+0x650>
 800bd06:	9f04      	ldr	r7, [sp, #16]
 800bd08:	e73e      	b.n	800bb88 <_dtoa_r+0x4e0>
 800bd0a:	4b9b      	ldr	r3, [pc, #620]	@ (800bf78 <_dtoa_r+0x8d0>)
 800bd0c:	f7f4 fc74 	bl	80005f8 <__aeabi_dmul>
 800bd10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd14:	e7bc      	b.n	800bc90 <_dtoa_r+0x5e8>
 800bd16:	d10c      	bne.n	800bd32 <_dtoa_r+0x68a>
 800bd18:	4b98      	ldr	r3, [pc, #608]	@ (800bf7c <_dtoa_r+0x8d4>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd20:	f7f4 fc6a 	bl	80005f8 <__aeabi_dmul>
 800bd24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd28:	f7f4 feec 	bl	8000b04 <__aeabi_dcmpge>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f000 8157 	beq.w	800bfe0 <_dtoa_r+0x938>
 800bd32:	2400      	movs	r4, #0
 800bd34:	4625      	mov	r5, r4
 800bd36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd38:	43db      	mvns	r3, r3
 800bd3a:	9304      	str	r3, [sp, #16]
 800bd3c:	4656      	mov	r6, sl
 800bd3e:	2700      	movs	r7, #0
 800bd40:	4621      	mov	r1, r4
 800bd42:	4658      	mov	r0, fp
 800bd44:	f000 ff00 	bl	800cb48 <_Bfree>
 800bd48:	2d00      	cmp	r5, #0
 800bd4a:	d0dc      	beq.n	800bd06 <_dtoa_r+0x65e>
 800bd4c:	b12f      	cbz	r7, 800bd5a <_dtoa_r+0x6b2>
 800bd4e:	42af      	cmp	r7, r5
 800bd50:	d003      	beq.n	800bd5a <_dtoa_r+0x6b2>
 800bd52:	4639      	mov	r1, r7
 800bd54:	4658      	mov	r0, fp
 800bd56:	f000 fef7 	bl	800cb48 <_Bfree>
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	4658      	mov	r0, fp
 800bd5e:	f000 fef3 	bl	800cb48 <_Bfree>
 800bd62:	e7d0      	b.n	800bd06 <_dtoa_r+0x65e>
 800bd64:	9704      	str	r7, [sp, #16]
 800bd66:	4633      	mov	r3, r6
 800bd68:	461e      	mov	r6, r3
 800bd6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd6e:	2a39      	cmp	r2, #57	@ 0x39
 800bd70:	d107      	bne.n	800bd82 <_dtoa_r+0x6da>
 800bd72:	459a      	cmp	sl, r3
 800bd74:	d1f8      	bne.n	800bd68 <_dtoa_r+0x6c0>
 800bd76:	9a04      	ldr	r2, [sp, #16]
 800bd78:	3201      	adds	r2, #1
 800bd7a:	9204      	str	r2, [sp, #16]
 800bd7c:	2230      	movs	r2, #48	@ 0x30
 800bd7e:	f88a 2000 	strb.w	r2, [sl]
 800bd82:	781a      	ldrb	r2, [r3, #0]
 800bd84:	3201      	adds	r2, #1
 800bd86:	701a      	strb	r2, [r3, #0]
 800bd88:	e7bd      	b.n	800bd06 <_dtoa_r+0x65e>
 800bd8a:	4b7b      	ldr	r3, [pc, #492]	@ (800bf78 <_dtoa_r+0x8d0>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	2200      	movs	r2, #0
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	460d      	mov	r5, r1
 800bd9a:	f7f4 fe95 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f43f aebb 	beq.w	800bb1a <_dtoa_r+0x472>
 800bda4:	e6f0      	b.n	800bb88 <_dtoa_r+0x4e0>
 800bda6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	f000 80db 	beq.w	800bf64 <_dtoa_r+0x8bc>
 800bdae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdb0:	2a01      	cmp	r2, #1
 800bdb2:	f300 80bf 	bgt.w	800bf34 <_dtoa_r+0x88c>
 800bdb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bdb8:	2a00      	cmp	r2, #0
 800bdba:	f000 80b7 	beq.w	800bf2c <_dtoa_r+0x884>
 800bdbe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bdc2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdc4:	4646      	mov	r6, r8
 800bdc6:	9a08      	ldr	r2, [sp, #32]
 800bdc8:	2101      	movs	r1, #1
 800bdca:	441a      	add	r2, r3
 800bdcc:	4658      	mov	r0, fp
 800bdce:	4498      	add	r8, r3
 800bdd0:	9208      	str	r2, [sp, #32]
 800bdd2:	f000 ffb7 	bl	800cd44 <__i2b>
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	b15e      	cbz	r6, 800bdf2 <_dtoa_r+0x74a>
 800bdda:	9b08      	ldr	r3, [sp, #32]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dd08      	ble.n	800bdf2 <_dtoa_r+0x74a>
 800bde0:	42b3      	cmp	r3, r6
 800bde2:	9a08      	ldr	r2, [sp, #32]
 800bde4:	bfa8      	it	ge
 800bde6:	4633      	movge	r3, r6
 800bde8:	eba8 0803 	sub.w	r8, r8, r3
 800bdec:	1af6      	subs	r6, r6, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	9308      	str	r3, [sp, #32]
 800bdf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdf4:	b1f3      	cbz	r3, 800be34 <_dtoa_r+0x78c>
 800bdf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 80b7 	beq.w	800bf6c <_dtoa_r+0x8c4>
 800bdfe:	b18c      	cbz	r4, 800be24 <_dtoa_r+0x77c>
 800be00:	4629      	mov	r1, r5
 800be02:	4622      	mov	r2, r4
 800be04:	4658      	mov	r0, fp
 800be06:	f001 f85d 	bl	800cec4 <__pow5mult>
 800be0a:	464a      	mov	r2, r9
 800be0c:	4601      	mov	r1, r0
 800be0e:	4605      	mov	r5, r0
 800be10:	4658      	mov	r0, fp
 800be12:	f000 ffad 	bl	800cd70 <__multiply>
 800be16:	4649      	mov	r1, r9
 800be18:	9004      	str	r0, [sp, #16]
 800be1a:	4658      	mov	r0, fp
 800be1c:	f000 fe94 	bl	800cb48 <_Bfree>
 800be20:	9b04      	ldr	r3, [sp, #16]
 800be22:	4699      	mov	r9, r3
 800be24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be26:	1b1a      	subs	r2, r3, r4
 800be28:	d004      	beq.n	800be34 <_dtoa_r+0x78c>
 800be2a:	4649      	mov	r1, r9
 800be2c:	4658      	mov	r0, fp
 800be2e:	f001 f849 	bl	800cec4 <__pow5mult>
 800be32:	4681      	mov	r9, r0
 800be34:	2101      	movs	r1, #1
 800be36:	4658      	mov	r0, fp
 800be38:	f000 ff84 	bl	800cd44 <__i2b>
 800be3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be3e:	4604      	mov	r4, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 81cf 	beq.w	800c1e4 <_dtoa_r+0xb3c>
 800be46:	461a      	mov	r2, r3
 800be48:	4601      	mov	r1, r0
 800be4a:	4658      	mov	r0, fp
 800be4c:	f001 f83a 	bl	800cec4 <__pow5mult>
 800be50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be52:	2b01      	cmp	r3, #1
 800be54:	4604      	mov	r4, r0
 800be56:	f300 8095 	bgt.w	800bf84 <_dtoa_r+0x8dc>
 800be5a:	9b02      	ldr	r3, [sp, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f040 8087 	bne.w	800bf70 <_dtoa_r+0x8c8>
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f040 8089 	bne.w	800bf80 <_dtoa_r+0x8d8>
 800be6e:	9b03      	ldr	r3, [sp, #12]
 800be70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be74:	0d1b      	lsrs	r3, r3, #20
 800be76:	051b      	lsls	r3, r3, #20
 800be78:	b12b      	cbz	r3, 800be86 <_dtoa_r+0x7de>
 800be7a:	9b08      	ldr	r3, [sp, #32]
 800be7c:	3301      	adds	r3, #1
 800be7e:	9308      	str	r3, [sp, #32]
 800be80:	f108 0801 	add.w	r8, r8, #1
 800be84:	2301      	movs	r3, #1
 800be86:	930a      	str	r3, [sp, #40]	@ 0x28
 800be88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 81b0 	beq.w	800c1f0 <_dtoa_r+0xb48>
 800be90:	6923      	ldr	r3, [r4, #16]
 800be92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be96:	6918      	ldr	r0, [r3, #16]
 800be98:	f000 ff08 	bl	800ccac <__hi0bits>
 800be9c:	f1c0 0020 	rsb	r0, r0, #32
 800bea0:	9b08      	ldr	r3, [sp, #32]
 800bea2:	4418      	add	r0, r3
 800bea4:	f010 001f 	ands.w	r0, r0, #31
 800bea8:	d077      	beq.n	800bf9a <_dtoa_r+0x8f2>
 800beaa:	f1c0 0320 	rsb	r3, r0, #32
 800beae:	2b04      	cmp	r3, #4
 800beb0:	dd6b      	ble.n	800bf8a <_dtoa_r+0x8e2>
 800beb2:	9b08      	ldr	r3, [sp, #32]
 800beb4:	f1c0 001c 	rsb	r0, r0, #28
 800beb8:	4403      	add	r3, r0
 800beba:	4480      	add	r8, r0
 800bebc:	4406      	add	r6, r0
 800bebe:	9308      	str	r3, [sp, #32]
 800bec0:	f1b8 0f00 	cmp.w	r8, #0
 800bec4:	dd05      	ble.n	800bed2 <_dtoa_r+0x82a>
 800bec6:	4649      	mov	r1, r9
 800bec8:	4642      	mov	r2, r8
 800beca:	4658      	mov	r0, fp
 800becc:	f001 f854 	bl	800cf78 <__lshift>
 800bed0:	4681      	mov	r9, r0
 800bed2:	9b08      	ldr	r3, [sp, #32]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dd05      	ble.n	800bee4 <_dtoa_r+0x83c>
 800bed8:	4621      	mov	r1, r4
 800beda:	461a      	mov	r2, r3
 800bedc:	4658      	mov	r0, fp
 800bede:	f001 f84b 	bl	800cf78 <__lshift>
 800bee2:	4604      	mov	r4, r0
 800bee4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d059      	beq.n	800bf9e <_dtoa_r+0x8f6>
 800beea:	4621      	mov	r1, r4
 800beec:	4648      	mov	r0, r9
 800beee:	f001 f8af 	bl	800d050 <__mcmp>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	da53      	bge.n	800bf9e <_dtoa_r+0x8f6>
 800bef6:	1e7b      	subs	r3, r7, #1
 800bef8:	9304      	str	r3, [sp, #16]
 800befa:	4649      	mov	r1, r9
 800befc:	2300      	movs	r3, #0
 800befe:	220a      	movs	r2, #10
 800bf00:	4658      	mov	r0, fp
 800bf02:	f000 fe43 	bl	800cb8c <__multadd>
 800bf06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf08:	4681      	mov	r9, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 8172 	beq.w	800c1f4 <_dtoa_r+0xb4c>
 800bf10:	2300      	movs	r3, #0
 800bf12:	4629      	mov	r1, r5
 800bf14:	220a      	movs	r2, #10
 800bf16:	4658      	mov	r0, fp
 800bf18:	f000 fe38 	bl	800cb8c <__multadd>
 800bf1c:	9b00      	ldr	r3, [sp, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	4605      	mov	r5, r0
 800bf22:	dc67      	bgt.n	800bff4 <_dtoa_r+0x94c>
 800bf24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	dc41      	bgt.n	800bfae <_dtoa_r+0x906>
 800bf2a:	e063      	b.n	800bff4 <_dtoa_r+0x94c>
 800bf2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf32:	e746      	b.n	800bdc2 <_dtoa_r+0x71a>
 800bf34:	9b07      	ldr	r3, [sp, #28]
 800bf36:	1e5c      	subs	r4, r3, #1
 800bf38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf3a:	42a3      	cmp	r3, r4
 800bf3c:	bfbf      	itttt	lt
 800bf3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bf42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf44:	1ae3      	sublt	r3, r4, r3
 800bf46:	bfb4      	ite	lt
 800bf48:	18d2      	addlt	r2, r2, r3
 800bf4a:	1b1c      	subge	r4, r3, r4
 800bf4c:	9b07      	ldr	r3, [sp, #28]
 800bf4e:	bfbc      	itt	lt
 800bf50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bf52:	2400      	movlt	r4, #0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfb5      	itete	lt
 800bf58:	eba8 0603 	sublt.w	r6, r8, r3
 800bf5c:	9b07      	ldrge	r3, [sp, #28]
 800bf5e:	2300      	movlt	r3, #0
 800bf60:	4646      	movge	r6, r8
 800bf62:	e730      	b.n	800bdc6 <_dtoa_r+0x71e>
 800bf64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf68:	4646      	mov	r6, r8
 800bf6a:	e735      	b.n	800bdd8 <_dtoa_r+0x730>
 800bf6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf6e:	e75c      	b.n	800be2a <_dtoa_r+0x782>
 800bf70:	2300      	movs	r3, #0
 800bf72:	e788      	b.n	800be86 <_dtoa_r+0x7de>
 800bf74:	3fe00000 	.word	0x3fe00000
 800bf78:	40240000 	.word	0x40240000
 800bf7c:	40140000 	.word	0x40140000
 800bf80:	9b02      	ldr	r3, [sp, #8]
 800bf82:	e780      	b.n	800be86 <_dtoa_r+0x7de>
 800bf84:	2300      	movs	r3, #0
 800bf86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf88:	e782      	b.n	800be90 <_dtoa_r+0x7e8>
 800bf8a:	d099      	beq.n	800bec0 <_dtoa_r+0x818>
 800bf8c:	9a08      	ldr	r2, [sp, #32]
 800bf8e:	331c      	adds	r3, #28
 800bf90:	441a      	add	r2, r3
 800bf92:	4498      	add	r8, r3
 800bf94:	441e      	add	r6, r3
 800bf96:	9208      	str	r2, [sp, #32]
 800bf98:	e792      	b.n	800bec0 <_dtoa_r+0x818>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	e7f6      	b.n	800bf8c <_dtoa_r+0x8e4>
 800bf9e:	9b07      	ldr	r3, [sp, #28]
 800bfa0:	9704      	str	r7, [sp, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dc20      	bgt.n	800bfe8 <_dtoa_r+0x940>
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	dd1e      	ble.n	800bfec <_dtoa_r+0x944>
 800bfae:	9b00      	ldr	r3, [sp, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f47f aec0 	bne.w	800bd36 <_dtoa_r+0x68e>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	2205      	movs	r2, #5
 800bfba:	4658      	mov	r0, fp
 800bfbc:	f000 fde6 	bl	800cb8c <__multadd>
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	4648      	mov	r0, r9
 800bfc6:	f001 f843 	bl	800d050 <__mcmp>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	f77f aeb3 	ble.w	800bd36 <_dtoa_r+0x68e>
 800bfd0:	4656      	mov	r6, sl
 800bfd2:	2331      	movs	r3, #49	@ 0x31
 800bfd4:	f806 3b01 	strb.w	r3, [r6], #1
 800bfd8:	9b04      	ldr	r3, [sp, #16]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	9304      	str	r3, [sp, #16]
 800bfde:	e6ae      	b.n	800bd3e <_dtoa_r+0x696>
 800bfe0:	9c07      	ldr	r4, [sp, #28]
 800bfe2:	9704      	str	r7, [sp, #16]
 800bfe4:	4625      	mov	r5, r4
 800bfe6:	e7f3      	b.n	800bfd0 <_dtoa_r+0x928>
 800bfe8:	9b07      	ldr	r3, [sp, #28]
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 8104 	beq.w	800c1fc <_dtoa_r+0xb54>
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	dd05      	ble.n	800c004 <_dtoa_r+0x95c>
 800bff8:	4629      	mov	r1, r5
 800bffa:	4632      	mov	r2, r6
 800bffc:	4658      	mov	r0, fp
 800bffe:	f000 ffbb 	bl	800cf78 <__lshift>
 800c002:	4605      	mov	r5, r0
 800c004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c006:	2b00      	cmp	r3, #0
 800c008:	d05a      	beq.n	800c0c0 <_dtoa_r+0xa18>
 800c00a:	6869      	ldr	r1, [r5, #4]
 800c00c:	4658      	mov	r0, fp
 800c00e:	f000 fd5b 	bl	800cac8 <_Balloc>
 800c012:	4606      	mov	r6, r0
 800c014:	b928      	cbnz	r0, 800c022 <_dtoa_r+0x97a>
 800c016:	4b84      	ldr	r3, [pc, #528]	@ (800c228 <_dtoa_r+0xb80>)
 800c018:	4602      	mov	r2, r0
 800c01a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c01e:	f7ff bb5a 	b.w	800b6d6 <_dtoa_r+0x2e>
 800c022:	692a      	ldr	r2, [r5, #16]
 800c024:	3202      	adds	r2, #2
 800c026:	0092      	lsls	r2, r2, #2
 800c028:	f105 010c 	add.w	r1, r5, #12
 800c02c:	300c      	adds	r0, #12
 800c02e:	f7ff fa76 	bl	800b51e <memcpy>
 800c032:	2201      	movs	r2, #1
 800c034:	4631      	mov	r1, r6
 800c036:	4658      	mov	r0, fp
 800c038:	f000 ff9e 	bl	800cf78 <__lshift>
 800c03c:	f10a 0301 	add.w	r3, sl, #1
 800c040:	9307      	str	r3, [sp, #28]
 800c042:	9b00      	ldr	r3, [sp, #0]
 800c044:	4453      	add	r3, sl
 800c046:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c048:	9b02      	ldr	r3, [sp, #8]
 800c04a:	f003 0301 	and.w	r3, r3, #1
 800c04e:	462f      	mov	r7, r5
 800c050:	930a      	str	r3, [sp, #40]	@ 0x28
 800c052:	4605      	mov	r5, r0
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	4621      	mov	r1, r4
 800c058:	3b01      	subs	r3, #1
 800c05a:	4648      	mov	r0, r9
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	f7ff fa9b 	bl	800b598 <quorem>
 800c062:	4639      	mov	r1, r7
 800c064:	9002      	str	r0, [sp, #8]
 800c066:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c06a:	4648      	mov	r0, r9
 800c06c:	f000 fff0 	bl	800d050 <__mcmp>
 800c070:	462a      	mov	r2, r5
 800c072:	9008      	str	r0, [sp, #32]
 800c074:	4621      	mov	r1, r4
 800c076:	4658      	mov	r0, fp
 800c078:	f001 f806 	bl	800d088 <__mdiff>
 800c07c:	68c2      	ldr	r2, [r0, #12]
 800c07e:	4606      	mov	r6, r0
 800c080:	bb02      	cbnz	r2, 800c0c4 <_dtoa_r+0xa1c>
 800c082:	4601      	mov	r1, r0
 800c084:	4648      	mov	r0, r9
 800c086:	f000 ffe3 	bl	800d050 <__mcmp>
 800c08a:	4602      	mov	r2, r0
 800c08c:	4631      	mov	r1, r6
 800c08e:	4658      	mov	r0, fp
 800c090:	920e      	str	r2, [sp, #56]	@ 0x38
 800c092:	f000 fd59 	bl	800cb48 <_Bfree>
 800c096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c098:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c09a:	9e07      	ldr	r6, [sp, #28]
 800c09c:	ea43 0102 	orr.w	r1, r3, r2
 800c0a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0a2:	4319      	orrs	r1, r3
 800c0a4:	d110      	bne.n	800c0c8 <_dtoa_r+0xa20>
 800c0a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0aa:	d029      	beq.n	800c100 <_dtoa_r+0xa58>
 800c0ac:	9b08      	ldr	r3, [sp, #32]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd02      	ble.n	800c0b8 <_dtoa_r+0xa10>
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0b8:	9b00      	ldr	r3, [sp, #0]
 800c0ba:	f883 8000 	strb.w	r8, [r3]
 800c0be:	e63f      	b.n	800bd40 <_dtoa_r+0x698>
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	e7bb      	b.n	800c03c <_dtoa_r+0x994>
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	e7e1      	b.n	800c08c <_dtoa_r+0x9e4>
 800c0c8:	9b08      	ldr	r3, [sp, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	db04      	blt.n	800c0d8 <_dtoa_r+0xa30>
 800c0ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0d4:	430b      	orrs	r3, r1
 800c0d6:	d120      	bne.n	800c11a <_dtoa_r+0xa72>
 800c0d8:	2a00      	cmp	r2, #0
 800c0da:	dded      	ble.n	800c0b8 <_dtoa_r+0xa10>
 800c0dc:	4649      	mov	r1, r9
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4658      	mov	r0, fp
 800c0e2:	f000 ff49 	bl	800cf78 <__lshift>
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4681      	mov	r9, r0
 800c0ea:	f000 ffb1 	bl	800d050 <__mcmp>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	dc03      	bgt.n	800c0fa <_dtoa_r+0xa52>
 800c0f2:	d1e1      	bne.n	800c0b8 <_dtoa_r+0xa10>
 800c0f4:	f018 0f01 	tst.w	r8, #1
 800c0f8:	d0de      	beq.n	800c0b8 <_dtoa_r+0xa10>
 800c0fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0fe:	d1d8      	bne.n	800c0b2 <_dtoa_r+0xa0a>
 800c100:	9a00      	ldr	r2, [sp, #0]
 800c102:	2339      	movs	r3, #57	@ 0x39
 800c104:	7013      	strb	r3, [r2, #0]
 800c106:	4633      	mov	r3, r6
 800c108:	461e      	mov	r6, r3
 800c10a:	3b01      	subs	r3, #1
 800c10c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c110:	2a39      	cmp	r2, #57	@ 0x39
 800c112:	d052      	beq.n	800c1ba <_dtoa_r+0xb12>
 800c114:	3201      	adds	r2, #1
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e612      	b.n	800bd40 <_dtoa_r+0x698>
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	dd07      	ble.n	800c12e <_dtoa_r+0xa86>
 800c11e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c122:	d0ed      	beq.n	800c100 <_dtoa_r+0xa58>
 800c124:	9a00      	ldr	r2, [sp, #0]
 800c126:	f108 0301 	add.w	r3, r8, #1
 800c12a:	7013      	strb	r3, [r2, #0]
 800c12c:	e608      	b.n	800bd40 <_dtoa_r+0x698>
 800c12e:	9b07      	ldr	r3, [sp, #28]
 800c130:	9a07      	ldr	r2, [sp, #28]
 800c132:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c138:	4293      	cmp	r3, r2
 800c13a:	d028      	beq.n	800c18e <_dtoa_r+0xae6>
 800c13c:	4649      	mov	r1, r9
 800c13e:	2300      	movs	r3, #0
 800c140:	220a      	movs	r2, #10
 800c142:	4658      	mov	r0, fp
 800c144:	f000 fd22 	bl	800cb8c <__multadd>
 800c148:	42af      	cmp	r7, r5
 800c14a:	4681      	mov	r9, r0
 800c14c:	f04f 0300 	mov.w	r3, #0
 800c150:	f04f 020a 	mov.w	r2, #10
 800c154:	4639      	mov	r1, r7
 800c156:	4658      	mov	r0, fp
 800c158:	d107      	bne.n	800c16a <_dtoa_r+0xac2>
 800c15a:	f000 fd17 	bl	800cb8c <__multadd>
 800c15e:	4607      	mov	r7, r0
 800c160:	4605      	mov	r5, r0
 800c162:	9b07      	ldr	r3, [sp, #28]
 800c164:	3301      	adds	r3, #1
 800c166:	9307      	str	r3, [sp, #28]
 800c168:	e774      	b.n	800c054 <_dtoa_r+0x9ac>
 800c16a:	f000 fd0f 	bl	800cb8c <__multadd>
 800c16e:	4629      	mov	r1, r5
 800c170:	4607      	mov	r7, r0
 800c172:	2300      	movs	r3, #0
 800c174:	220a      	movs	r2, #10
 800c176:	4658      	mov	r0, fp
 800c178:	f000 fd08 	bl	800cb8c <__multadd>
 800c17c:	4605      	mov	r5, r0
 800c17e:	e7f0      	b.n	800c162 <_dtoa_r+0xaba>
 800c180:	9b00      	ldr	r3, [sp, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	bfcc      	ite	gt
 800c186:	461e      	movgt	r6, r3
 800c188:	2601      	movle	r6, #1
 800c18a:	4456      	add	r6, sl
 800c18c:	2700      	movs	r7, #0
 800c18e:	4649      	mov	r1, r9
 800c190:	2201      	movs	r2, #1
 800c192:	4658      	mov	r0, fp
 800c194:	f000 fef0 	bl	800cf78 <__lshift>
 800c198:	4621      	mov	r1, r4
 800c19a:	4681      	mov	r9, r0
 800c19c:	f000 ff58 	bl	800d050 <__mcmp>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	dcb0      	bgt.n	800c106 <_dtoa_r+0xa5e>
 800c1a4:	d102      	bne.n	800c1ac <_dtoa_r+0xb04>
 800c1a6:	f018 0f01 	tst.w	r8, #1
 800c1aa:	d1ac      	bne.n	800c106 <_dtoa_r+0xa5e>
 800c1ac:	4633      	mov	r3, r6
 800c1ae:	461e      	mov	r6, r3
 800c1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1b4:	2a30      	cmp	r2, #48	@ 0x30
 800c1b6:	d0fa      	beq.n	800c1ae <_dtoa_r+0xb06>
 800c1b8:	e5c2      	b.n	800bd40 <_dtoa_r+0x698>
 800c1ba:	459a      	cmp	sl, r3
 800c1bc:	d1a4      	bne.n	800c108 <_dtoa_r+0xa60>
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	9304      	str	r3, [sp, #16]
 800c1c4:	2331      	movs	r3, #49	@ 0x31
 800c1c6:	f88a 3000 	strb.w	r3, [sl]
 800c1ca:	e5b9      	b.n	800bd40 <_dtoa_r+0x698>
 800c1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c1ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c22c <_dtoa_r+0xb84>
 800c1d2:	b11b      	cbz	r3, 800c1dc <_dtoa_r+0xb34>
 800c1d4:	f10a 0308 	add.w	r3, sl, #8
 800c1d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	4650      	mov	r0, sl
 800c1de:	b019      	add	sp, #100	@ 0x64
 800c1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	f77f ae37 	ble.w	800be5a <_dtoa_r+0x7b2>
 800c1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	e655      	b.n	800bea0 <_dtoa_r+0x7f8>
 800c1f4:	9b00      	ldr	r3, [sp, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f77f aed6 	ble.w	800bfa8 <_dtoa_r+0x900>
 800c1fc:	4656      	mov	r6, sl
 800c1fe:	4621      	mov	r1, r4
 800c200:	4648      	mov	r0, r9
 800c202:	f7ff f9c9 	bl	800b598 <quorem>
 800c206:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c20a:	f806 8b01 	strb.w	r8, [r6], #1
 800c20e:	9b00      	ldr	r3, [sp, #0]
 800c210:	eba6 020a 	sub.w	r2, r6, sl
 800c214:	4293      	cmp	r3, r2
 800c216:	ddb3      	ble.n	800c180 <_dtoa_r+0xad8>
 800c218:	4649      	mov	r1, r9
 800c21a:	2300      	movs	r3, #0
 800c21c:	220a      	movs	r2, #10
 800c21e:	4658      	mov	r0, fp
 800c220:	f000 fcb4 	bl	800cb8c <__multadd>
 800c224:	4681      	mov	r9, r0
 800c226:	e7ea      	b.n	800c1fe <_dtoa_r+0xb56>
 800c228:	0800f783 	.word	0x0800f783
 800c22c:	0800f71e 	.word	0x0800f71e

0800c230 <_free_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4605      	mov	r5, r0
 800c234:	2900      	cmp	r1, #0
 800c236:	d041      	beq.n	800c2bc <_free_r+0x8c>
 800c238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c23c:	1f0c      	subs	r4, r1, #4
 800c23e:	2b00      	cmp	r3, #0
 800c240:	bfb8      	it	lt
 800c242:	18e4      	addlt	r4, r4, r3
 800c244:	f000 fc34 	bl	800cab0 <__malloc_lock>
 800c248:	4a1d      	ldr	r2, [pc, #116]	@ (800c2c0 <_free_r+0x90>)
 800c24a:	6813      	ldr	r3, [r2, #0]
 800c24c:	b933      	cbnz	r3, 800c25c <_free_r+0x2c>
 800c24e:	6063      	str	r3, [r4, #4]
 800c250:	6014      	str	r4, [r2, #0]
 800c252:	4628      	mov	r0, r5
 800c254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c258:	f000 bc30 	b.w	800cabc <__malloc_unlock>
 800c25c:	42a3      	cmp	r3, r4
 800c25e:	d908      	bls.n	800c272 <_free_r+0x42>
 800c260:	6820      	ldr	r0, [r4, #0]
 800c262:	1821      	adds	r1, r4, r0
 800c264:	428b      	cmp	r3, r1
 800c266:	bf01      	itttt	eq
 800c268:	6819      	ldreq	r1, [r3, #0]
 800c26a:	685b      	ldreq	r3, [r3, #4]
 800c26c:	1809      	addeq	r1, r1, r0
 800c26e:	6021      	streq	r1, [r4, #0]
 800c270:	e7ed      	b.n	800c24e <_free_r+0x1e>
 800c272:	461a      	mov	r2, r3
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	b10b      	cbz	r3, 800c27c <_free_r+0x4c>
 800c278:	42a3      	cmp	r3, r4
 800c27a:	d9fa      	bls.n	800c272 <_free_r+0x42>
 800c27c:	6811      	ldr	r1, [r2, #0]
 800c27e:	1850      	adds	r0, r2, r1
 800c280:	42a0      	cmp	r0, r4
 800c282:	d10b      	bne.n	800c29c <_free_r+0x6c>
 800c284:	6820      	ldr	r0, [r4, #0]
 800c286:	4401      	add	r1, r0
 800c288:	1850      	adds	r0, r2, r1
 800c28a:	4283      	cmp	r3, r0
 800c28c:	6011      	str	r1, [r2, #0]
 800c28e:	d1e0      	bne.n	800c252 <_free_r+0x22>
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	6053      	str	r3, [r2, #4]
 800c296:	4408      	add	r0, r1
 800c298:	6010      	str	r0, [r2, #0]
 800c29a:	e7da      	b.n	800c252 <_free_r+0x22>
 800c29c:	d902      	bls.n	800c2a4 <_free_r+0x74>
 800c29e:	230c      	movs	r3, #12
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	e7d6      	b.n	800c252 <_free_r+0x22>
 800c2a4:	6820      	ldr	r0, [r4, #0]
 800c2a6:	1821      	adds	r1, r4, r0
 800c2a8:	428b      	cmp	r3, r1
 800c2aa:	bf04      	itt	eq
 800c2ac:	6819      	ldreq	r1, [r3, #0]
 800c2ae:	685b      	ldreq	r3, [r3, #4]
 800c2b0:	6063      	str	r3, [r4, #4]
 800c2b2:	bf04      	itt	eq
 800c2b4:	1809      	addeq	r1, r1, r0
 800c2b6:	6021      	streq	r1, [r4, #0]
 800c2b8:	6054      	str	r4, [r2, #4]
 800c2ba:	e7ca      	b.n	800c252 <_free_r+0x22>
 800c2bc:	bd38      	pop	{r3, r4, r5, pc}
 800c2be:	bf00      	nop
 800c2c0:	20000904 	.word	0x20000904

0800c2c4 <rshift>:
 800c2c4:	6903      	ldr	r3, [r0, #16]
 800c2c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2d2:	f100 0414 	add.w	r4, r0, #20
 800c2d6:	dd45      	ble.n	800c364 <rshift+0xa0>
 800c2d8:	f011 011f 	ands.w	r1, r1, #31
 800c2dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2e4:	d10c      	bne.n	800c300 <rshift+0x3c>
 800c2e6:	f100 0710 	add.w	r7, r0, #16
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	42b1      	cmp	r1, r6
 800c2ee:	d334      	bcc.n	800c35a <rshift+0x96>
 800c2f0:	1a9b      	subs	r3, r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	1eea      	subs	r2, r5, #3
 800c2f6:	4296      	cmp	r6, r2
 800c2f8:	bf38      	it	cc
 800c2fa:	2300      	movcc	r3, #0
 800c2fc:	4423      	add	r3, r4
 800c2fe:	e015      	b.n	800c32c <rshift+0x68>
 800c300:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c304:	f1c1 0820 	rsb	r8, r1, #32
 800c308:	40cf      	lsrs	r7, r1
 800c30a:	f105 0e04 	add.w	lr, r5, #4
 800c30e:	46a1      	mov	r9, r4
 800c310:	4576      	cmp	r6, lr
 800c312:	46f4      	mov	ip, lr
 800c314:	d815      	bhi.n	800c342 <rshift+0x7e>
 800c316:	1a9a      	subs	r2, r3, r2
 800c318:	0092      	lsls	r2, r2, #2
 800c31a:	3a04      	subs	r2, #4
 800c31c:	3501      	adds	r5, #1
 800c31e:	42ae      	cmp	r6, r5
 800c320:	bf38      	it	cc
 800c322:	2200      	movcc	r2, #0
 800c324:	18a3      	adds	r3, r4, r2
 800c326:	50a7      	str	r7, [r4, r2]
 800c328:	b107      	cbz	r7, 800c32c <rshift+0x68>
 800c32a:	3304      	adds	r3, #4
 800c32c:	1b1a      	subs	r2, r3, r4
 800c32e:	42a3      	cmp	r3, r4
 800c330:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c334:	bf08      	it	eq
 800c336:	2300      	moveq	r3, #0
 800c338:	6102      	str	r2, [r0, #16]
 800c33a:	bf08      	it	eq
 800c33c:	6143      	streq	r3, [r0, #20]
 800c33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c342:	f8dc c000 	ldr.w	ip, [ip]
 800c346:	fa0c fc08 	lsl.w	ip, ip, r8
 800c34a:	ea4c 0707 	orr.w	r7, ip, r7
 800c34e:	f849 7b04 	str.w	r7, [r9], #4
 800c352:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c356:	40cf      	lsrs	r7, r1
 800c358:	e7da      	b.n	800c310 <rshift+0x4c>
 800c35a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c35e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c362:	e7c3      	b.n	800c2ec <rshift+0x28>
 800c364:	4623      	mov	r3, r4
 800c366:	e7e1      	b.n	800c32c <rshift+0x68>

0800c368 <__hexdig_fun>:
 800c368:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c36c:	2b09      	cmp	r3, #9
 800c36e:	d802      	bhi.n	800c376 <__hexdig_fun+0xe>
 800c370:	3820      	subs	r0, #32
 800c372:	b2c0      	uxtb	r0, r0
 800c374:	4770      	bx	lr
 800c376:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c37a:	2b05      	cmp	r3, #5
 800c37c:	d801      	bhi.n	800c382 <__hexdig_fun+0x1a>
 800c37e:	3847      	subs	r0, #71	@ 0x47
 800c380:	e7f7      	b.n	800c372 <__hexdig_fun+0xa>
 800c382:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c386:	2b05      	cmp	r3, #5
 800c388:	d801      	bhi.n	800c38e <__hexdig_fun+0x26>
 800c38a:	3827      	subs	r0, #39	@ 0x27
 800c38c:	e7f1      	b.n	800c372 <__hexdig_fun+0xa>
 800c38e:	2000      	movs	r0, #0
 800c390:	4770      	bx	lr
	...

0800c394 <__gethex>:
 800c394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	b085      	sub	sp, #20
 800c39a:	468a      	mov	sl, r1
 800c39c:	9302      	str	r3, [sp, #8]
 800c39e:	680b      	ldr	r3, [r1, #0]
 800c3a0:	9001      	str	r0, [sp, #4]
 800c3a2:	4690      	mov	r8, r2
 800c3a4:	1c9c      	adds	r4, r3, #2
 800c3a6:	46a1      	mov	r9, r4
 800c3a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3ac:	2830      	cmp	r0, #48	@ 0x30
 800c3ae:	d0fa      	beq.n	800c3a6 <__gethex+0x12>
 800c3b0:	eba9 0303 	sub.w	r3, r9, r3
 800c3b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3b8:	f7ff ffd6 	bl	800c368 <__hexdig_fun>
 800c3bc:	4605      	mov	r5, r0
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d168      	bne.n	800c494 <__gethex+0x100>
 800c3c2:	49a0      	ldr	r1, [pc, #640]	@ (800c644 <__gethex+0x2b0>)
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	4648      	mov	r0, r9
 800c3c8:	f7fe ffae 	bl	800b328 <strncmp>
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d167      	bne.n	800c4a2 <__gethex+0x10e>
 800c3d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c3d6:	4626      	mov	r6, r4
 800c3d8:	f7ff ffc6 	bl	800c368 <__hexdig_fun>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d062      	beq.n	800c4a6 <__gethex+0x112>
 800c3e0:	4623      	mov	r3, r4
 800c3e2:	7818      	ldrb	r0, [r3, #0]
 800c3e4:	2830      	cmp	r0, #48	@ 0x30
 800c3e6:	4699      	mov	r9, r3
 800c3e8:	f103 0301 	add.w	r3, r3, #1
 800c3ec:	d0f9      	beq.n	800c3e2 <__gethex+0x4e>
 800c3ee:	f7ff ffbb 	bl	800c368 <__hexdig_fun>
 800c3f2:	fab0 f580 	clz	r5, r0
 800c3f6:	096d      	lsrs	r5, r5, #5
 800c3f8:	f04f 0b01 	mov.w	fp, #1
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	4616      	mov	r6, r2
 800c400:	3201      	adds	r2, #1
 800c402:	7830      	ldrb	r0, [r6, #0]
 800c404:	f7ff ffb0 	bl	800c368 <__hexdig_fun>
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1f8      	bne.n	800c3fe <__gethex+0x6a>
 800c40c:	498d      	ldr	r1, [pc, #564]	@ (800c644 <__gethex+0x2b0>)
 800c40e:	2201      	movs	r2, #1
 800c410:	4630      	mov	r0, r6
 800c412:	f7fe ff89 	bl	800b328 <strncmp>
 800c416:	2800      	cmp	r0, #0
 800c418:	d13f      	bne.n	800c49a <__gethex+0x106>
 800c41a:	b944      	cbnz	r4, 800c42e <__gethex+0x9a>
 800c41c:	1c74      	adds	r4, r6, #1
 800c41e:	4622      	mov	r2, r4
 800c420:	4616      	mov	r6, r2
 800c422:	3201      	adds	r2, #1
 800c424:	7830      	ldrb	r0, [r6, #0]
 800c426:	f7ff ff9f 	bl	800c368 <__hexdig_fun>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	d1f8      	bne.n	800c420 <__gethex+0x8c>
 800c42e:	1ba4      	subs	r4, r4, r6
 800c430:	00a7      	lsls	r7, r4, #2
 800c432:	7833      	ldrb	r3, [r6, #0]
 800c434:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c438:	2b50      	cmp	r3, #80	@ 0x50
 800c43a:	d13e      	bne.n	800c4ba <__gethex+0x126>
 800c43c:	7873      	ldrb	r3, [r6, #1]
 800c43e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c440:	d033      	beq.n	800c4aa <__gethex+0x116>
 800c442:	2b2d      	cmp	r3, #45	@ 0x2d
 800c444:	d034      	beq.n	800c4b0 <__gethex+0x11c>
 800c446:	1c71      	adds	r1, r6, #1
 800c448:	2400      	movs	r4, #0
 800c44a:	7808      	ldrb	r0, [r1, #0]
 800c44c:	f7ff ff8c 	bl	800c368 <__hexdig_fun>
 800c450:	1e43      	subs	r3, r0, #1
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b18      	cmp	r3, #24
 800c456:	d830      	bhi.n	800c4ba <__gethex+0x126>
 800c458:	f1a0 0210 	sub.w	r2, r0, #16
 800c45c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c460:	f7ff ff82 	bl	800c368 <__hexdig_fun>
 800c464:	f100 3cff 	add.w	ip, r0, #4294967295
 800c468:	fa5f fc8c 	uxtb.w	ip, ip
 800c46c:	f1bc 0f18 	cmp.w	ip, #24
 800c470:	f04f 030a 	mov.w	r3, #10
 800c474:	d91e      	bls.n	800c4b4 <__gethex+0x120>
 800c476:	b104      	cbz	r4, 800c47a <__gethex+0xe6>
 800c478:	4252      	negs	r2, r2
 800c47a:	4417      	add	r7, r2
 800c47c:	f8ca 1000 	str.w	r1, [sl]
 800c480:	b1ed      	cbz	r5, 800c4be <__gethex+0x12a>
 800c482:	f1bb 0f00 	cmp.w	fp, #0
 800c486:	bf0c      	ite	eq
 800c488:	2506      	moveq	r5, #6
 800c48a:	2500      	movne	r5, #0
 800c48c:	4628      	mov	r0, r5
 800c48e:	b005      	add	sp, #20
 800c490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c494:	2500      	movs	r5, #0
 800c496:	462c      	mov	r4, r5
 800c498:	e7b0      	b.n	800c3fc <__gethex+0x68>
 800c49a:	2c00      	cmp	r4, #0
 800c49c:	d1c7      	bne.n	800c42e <__gethex+0x9a>
 800c49e:	4627      	mov	r7, r4
 800c4a0:	e7c7      	b.n	800c432 <__gethex+0x9e>
 800c4a2:	464e      	mov	r6, r9
 800c4a4:	462f      	mov	r7, r5
 800c4a6:	2501      	movs	r5, #1
 800c4a8:	e7c3      	b.n	800c432 <__gethex+0x9e>
 800c4aa:	2400      	movs	r4, #0
 800c4ac:	1cb1      	adds	r1, r6, #2
 800c4ae:	e7cc      	b.n	800c44a <__gethex+0xb6>
 800c4b0:	2401      	movs	r4, #1
 800c4b2:	e7fb      	b.n	800c4ac <__gethex+0x118>
 800c4b4:	fb03 0002 	mla	r0, r3, r2, r0
 800c4b8:	e7ce      	b.n	800c458 <__gethex+0xc4>
 800c4ba:	4631      	mov	r1, r6
 800c4bc:	e7de      	b.n	800c47c <__gethex+0xe8>
 800c4be:	eba6 0309 	sub.w	r3, r6, r9
 800c4c2:	3b01      	subs	r3, #1
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	2b07      	cmp	r3, #7
 800c4c8:	dc0a      	bgt.n	800c4e0 <__gethex+0x14c>
 800c4ca:	9801      	ldr	r0, [sp, #4]
 800c4cc:	f000 fafc 	bl	800cac8 <_Balloc>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	b940      	cbnz	r0, 800c4e6 <__gethex+0x152>
 800c4d4:	4b5c      	ldr	r3, [pc, #368]	@ (800c648 <__gethex+0x2b4>)
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	21e4      	movs	r1, #228	@ 0xe4
 800c4da:	485c      	ldr	r0, [pc, #368]	@ (800c64c <__gethex+0x2b8>)
 800c4dc:	f7ff f83e 	bl	800b55c <__assert_func>
 800c4e0:	3101      	adds	r1, #1
 800c4e2:	105b      	asrs	r3, r3, #1
 800c4e4:	e7ef      	b.n	800c4c6 <__gethex+0x132>
 800c4e6:	f100 0a14 	add.w	sl, r0, #20
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	4655      	mov	r5, sl
 800c4ee:	469b      	mov	fp, r3
 800c4f0:	45b1      	cmp	r9, r6
 800c4f2:	d337      	bcc.n	800c564 <__gethex+0x1d0>
 800c4f4:	f845 bb04 	str.w	fp, [r5], #4
 800c4f8:	eba5 050a 	sub.w	r5, r5, sl
 800c4fc:	10ad      	asrs	r5, r5, #2
 800c4fe:	6125      	str	r5, [r4, #16]
 800c500:	4658      	mov	r0, fp
 800c502:	f000 fbd3 	bl	800ccac <__hi0bits>
 800c506:	016d      	lsls	r5, r5, #5
 800c508:	f8d8 6000 	ldr.w	r6, [r8]
 800c50c:	1a2d      	subs	r5, r5, r0
 800c50e:	42b5      	cmp	r5, r6
 800c510:	dd54      	ble.n	800c5bc <__gethex+0x228>
 800c512:	1bad      	subs	r5, r5, r6
 800c514:	4629      	mov	r1, r5
 800c516:	4620      	mov	r0, r4
 800c518:	f000 ff67 	bl	800d3ea <__any_on>
 800c51c:	4681      	mov	r9, r0
 800c51e:	b178      	cbz	r0, 800c540 <__gethex+0x1ac>
 800c520:	1e6b      	subs	r3, r5, #1
 800c522:	1159      	asrs	r1, r3, #5
 800c524:	f003 021f 	and.w	r2, r3, #31
 800c528:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c52c:	f04f 0901 	mov.w	r9, #1
 800c530:	fa09 f202 	lsl.w	r2, r9, r2
 800c534:	420a      	tst	r2, r1
 800c536:	d003      	beq.n	800c540 <__gethex+0x1ac>
 800c538:	454b      	cmp	r3, r9
 800c53a:	dc36      	bgt.n	800c5aa <__gethex+0x216>
 800c53c:	f04f 0902 	mov.w	r9, #2
 800c540:	4629      	mov	r1, r5
 800c542:	4620      	mov	r0, r4
 800c544:	f7ff febe 	bl	800c2c4 <rshift>
 800c548:	442f      	add	r7, r5
 800c54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c54e:	42bb      	cmp	r3, r7
 800c550:	da42      	bge.n	800c5d8 <__gethex+0x244>
 800c552:	9801      	ldr	r0, [sp, #4]
 800c554:	4621      	mov	r1, r4
 800c556:	f000 faf7 	bl	800cb48 <_Bfree>
 800c55a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c55c:	2300      	movs	r3, #0
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	25a3      	movs	r5, #163	@ 0xa3
 800c562:	e793      	b.n	800c48c <__gethex+0xf8>
 800c564:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c568:	2a2e      	cmp	r2, #46	@ 0x2e
 800c56a:	d012      	beq.n	800c592 <__gethex+0x1fe>
 800c56c:	2b20      	cmp	r3, #32
 800c56e:	d104      	bne.n	800c57a <__gethex+0x1e6>
 800c570:	f845 bb04 	str.w	fp, [r5], #4
 800c574:	f04f 0b00 	mov.w	fp, #0
 800c578:	465b      	mov	r3, fp
 800c57a:	7830      	ldrb	r0, [r6, #0]
 800c57c:	9303      	str	r3, [sp, #12]
 800c57e:	f7ff fef3 	bl	800c368 <__hexdig_fun>
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	f000 000f 	and.w	r0, r0, #15
 800c588:	4098      	lsls	r0, r3
 800c58a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c58e:	3304      	adds	r3, #4
 800c590:	e7ae      	b.n	800c4f0 <__gethex+0x15c>
 800c592:	45b1      	cmp	r9, r6
 800c594:	d8ea      	bhi.n	800c56c <__gethex+0x1d8>
 800c596:	492b      	ldr	r1, [pc, #172]	@ (800c644 <__gethex+0x2b0>)
 800c598:	9303      	str	r3, [sp, #12]
 800c59a:	2201      	movs	r2, #1
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7fe fec3 	bl	800b328 <strncmp>
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d1e1      	bne.n	800c56c <__gethex+0x1d8>
 800c5a8:	e7a2      	b.n	800c4f0 <__gethex+0x15c>
 800c5aa:	1ea9      	subs	r1, r5, #2
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	f000 ff1c 	bl	800d3ea <__any_on>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d0c2      	beq.n	800c53c <__gethex+0x1a8>
 800c5b6:	f04f 0903 	mov.w	r9, #3
 800c5ba:	e7c1      	b.n	800c540 <__gethex+0x1ac>
 800c5bc:	da09      	bge.n	800c5d2 <__gethex+0x23e>
 800c5be:	1b75      	subs	r5, r6, r5
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	9801      	ldr	r0, [sp, #4]
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	f000 fcd7 	bl	800cf78 <__lshift>
 800c5ca:	1b7f      	subs	r7, r7, r5
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	f100 0a14 	add.w	sl, r0, #20
 800c5d2:	f04f 0900 	mov.w	r9, #0
 800c5d6:	e7b8      	b.n	800c54a <__gethex+0x1b6>
 800c5d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5dc:	42bd      	cmp	r5, r7
 800c5de:	dd6f      	ble.n	800c6c0 <__gethex+0x32c>
 800c5e0:	1bed      	subs	r5, r5, r7
 800c5e2:	42ae      	cmp	r6, r5
 800c5e4:	dc34      	bgt.n	800c650 <__gethex+0x2bc>
 800c5e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d022      	beq.n	800c634 <__gethex+0x2a0>
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d024      	beq.n	800c63c <__gethex+0x2a8>
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d115      	bne.n	800c622 <__gethex+0x28e>
 800c5f6:	42ae      	cmp	r6, r5
 800c5f8:	d113      	bne.n	800c622 <__gethex+0x28e>
 800c5fa:	2e01      	cmp	r6, #1
 800c5fc:	d10b      	bne.n	800c616 <__gethex+0x282>
 800c5fe:	9a02      	ldr	r2, [sp, #8]
 800c600:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	2301      	movs	r3, #1
 800c608:	6123      	str	r3, [r4, #16]
 800c60a:	f8ca 3000 	str.w	r3, [sl]
 800c60e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c610:	2562      	movs	r5, #98	@ 0x62
 800c612:	601c      	str	r4, [r3, #0]
 800c614:	e73a      	b.n	800c48c <__gethex+0xf8>
 800c616:	1e71      	subs	r1, r6, #1
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fee6 	bl	800d3ea <__any_on>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d1ed      	bne.n	800c5fe <__gethex+0x26a>
 800c622:	9801      	ldr	r0, [sp, #4]
 800c624:	4621      	mov	r1, r4
 800c626:	f000 fa8f 	bl	800cb48 <_Bfree>
 800c62a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c62c:	2300      	movs	r3, #0
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	2550      	movs	r5, #80	@ 0x50
 800c632:	e72b      	b.n	800c48c <__gethex+0xf8>
 800c634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1f3      	bne.n	800c622 <__gethex+0x28e>
 800c63a:	e7e0      	b.n	800c5fe <__gethex+0x26a>
 800c63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1dd      	bne.n	800c5fe <__gethex+0x26a>
 800c642:	e7ee      	b.n	800c622 <__gethex+0x28e>
 800c644:	0800f5d8 	.word	0x0800f5d8
 800c648:	0800f783 	.word	0x0800f783
 800c64c:	0800f794 	.word	0x0800f794
 800c650:	1e6f      	subs	r7, r5, #1
 800c652:	f1b9 0f00 	cmp.w	r9, #0
 800c656:	d130      	bne.n	800c6ba <__gethex+0x326>
 800c658:	b127      	cbz	r7, 800c664 <__gethex+0x2d0>
 800c65a:	4639      	mov	r1, r7
 800c65c:	4620      	mov	r0, r4
 800c65e:	f000 fec4 	bl	800d3ea <__any_on>
 800c662:	4681      	mov	r9, r0
 800c664:	117a      	asrs	r2, r7, #5
 800c666:	2301      	movs	r3, #1
 800c668:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c66c:	f007 071f 	and.w	r7, r7, #31
 800c670:	40bb      	lsls	r3, r7
 800c672:	4213      	tst	r3, r2
 800c674:	4629      	mov	r1, r5
 800c676:	4620      	mov	r0, r4
 800c678:	bf18      	it	ne
 800c67a:	f049 0902 	orrne.w	r9, r9, #2
 800c67e:	f7ff fe21 	bl	800c2c4 <rshift>
 800c682:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c686:	1b76      	subs	r6, r6, r5
 800c688:	2502      	movs	r5, #2
 800c68a:	f1b9 0f00 	cmp.w	r9, #0
 800c68e:	d047      	beq.n	800c720 <__gethex+0x38c>
 800c690:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c694:	2b02      	cmp	r3, #2
 800c696:	d015      	beq.n	800c6c4 <__gethex+0x330>
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d017      	beq.n	800c6cc <__gethex+0x338>
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d109      	bne.n	800c6b4 <__gethex+0x320>
 800c6a0:	f019 0f02 	tst.w	r9, #2
 800c6a4:	d006      	beq.n	800c6b4 <__gethex+0x320>
 800c6a6:	f8da 3000 	ldr.w	r3, [sl]
 800c6aa:	ea49 0903 	orr.w	r9, r9, r3
 800c6ae:	f019 0f01 	tst.w	r9, #1
 800c6b2:	d10e      	bne.n	800c6d2 <__gethex+0x33e>
 800c6b4:	f045 0510 	orr.w	r5, r5, #16
 800c6b8:	e032      	b.n	800c720 <__gethex+0x38c>
 800c6ba:	f04f 0901 	mov.w	r9, #1
 800c6be:	e7d1      	b.n	800c664 <__gethex+0x2d0>
 800c6c0:	2501      	movs	r5, #1
 800c6c2:	e7e2      	b.n	800c68a <__gethex+0x2f6>
 800c6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6c6:	f1c3 0301 	rsb	r3, r3, #1
 800c6ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0f0      	beq.n	800c6b4 <__gethex+0x320>
 800c6d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6d6:	f104 0314 	add.w	r3, r4, #20
 800c6da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6e2:	f04f 0c00 	mov.w	ip, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6f0:	d01b      	beq.n	800c72a <__gethex+0x396>
 800c6f2:	3201      	adds	r2, #1
 800c6f4:	6002      	str	r2, [r0, #0]
 800c6f6:	2d02      	cmp	r5, #2
 800c6f8:	f104 0314 	add.w	r3, r4, #20
 800c6fc:	d13c      	bne.n	800c778 <__gethex+0x3e4>
 800c6fe:	f8d8 2000 	ldr.w	r2, [r8]
 800c702:	3a01      	subs	r2, #1
 800c704:	42b2      	cmp	r2, r6
 800c706:	d109      	bne.n	800c71c <__gethex+0x388>
 800c708:	1171      	asrs	r1, r6, #5
 800c70a:	2201      	movs	r2, #1
 800c70c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c710:	f006 061f 	and.w	r6, r6, #31
 800c714:	fa02 f606 	lsl.w	r6, r2, r6
 800c718:	421e      	tst	r6, r3
 800c71a:	d13a      	bne.n	800c792 <__gethex+0x3fe>
 800c71c:	f045 0520 	orr.w	r5, r5, #32
 800c720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c722:	601c      	str	r4, [r3, #0]
 800c724:	9b02      	ldr	r3, [sp, #8]
 800c726:	601f      	str	r7, [r3, #0]
 800c728:	e6b0      	b.n	800c48c <__gethex+0xf8>
 800c72a:	4299      	cmp	r1, r3
 800c72c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c730:	d8d9      	bhi.n	800c6e6 <__gethex+0x352>
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	459b      	cmp	fp, r3
 800c736:	db17      	blt.n	800c768 <__gethex+0x3d4>
 800c738:	6861      	ldr	r1, [r4, #4]
 800c73a:	9801      	ldr	r0, [sp, #4]
 800c73c:	3101      	adds	r1, #1
 800c73e:	f000 f9c3 	bl	800cac8 <_Balloc>
 800c742:	4681      	mov	r9, r0
 800c744:	b918      	cbnz	r0, 800c74e <__gethex+0x3ba>
 800c746:	4b1a      	ldr	r3, [pc, #104]	@ (800c7b0 <__gethex+0x41c>)
 800c748:	4602      	mov	r2, r0
 800c74a:	2184      	movs	r1, #132	@ 0x84
 800c74c:	e6c5      	b.n	800c4da <__gethex+0x146>
 800c74e:	6922      	ldr	r2, [r4, #16]
 800c750:	3202      	adds	r2, #2
 800c752:	f104 010c 	add.w	r1, r4, #12
 800c756:	0092      	lsls	r2, r2, #2
 800c758:	300c      	adds	r0, #12
 800c75a:	f7fe fee0 	bl	800b51e <memcpy>
 800c75e:	4621      	mov	r1, r4
 800c760:	9801      	ldr	r0, [sp, #4]
 800c762:	f000 f9f1 	bl	800cb48 <_Bfree>
 800c766:	464c      	mov	r4, r9
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c770:	6122      	str	r2, [r4, #16]
 800c772:	2201      	movs	r2, #1
 800c774:	615a      	str	r2, [r3, #20]
 800c776:	e7be      	b.n	800c6f6 <__gethex+0x362>
 800c778:	6922      	ldr	r2, [r4, #16]
 800c77a:	455a      	cmp	r2, fp
 800c77c:	dd0b      	ble.n	800c796 <__gethex+0x402>
 800c77e:	2101      	movs	r1, #1
 800c780:	4620      	mov	r0, r4
 800c782:	f7ff fd9f 	bl	800c2c4 <rshift>
 800c786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c78a:	3701      	adds	r7, #1
 800c78c:	42bb      	cmp	r3, r7
 800c78e:	f6ff aee0 	blt.w	800c552 <__gethex+0x1be>
 800c792:	2501      	movs	r5, #1
 800c794:	e7c2      	b.n	800c71c <__gethex+0x388>
 800c796:	f016 061f 	ands.w	r6, r6, #31
 800c79a:	d0fa      	beq.n	800c792 <__gethex+0x3fe>
 800c79c:	4453      	add	r3, sl
 800c79e:	f1c6 0620 	rsb	r6, r6, #32
 800c7a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7a6:	f000 fa81 	bl	800ccac <__hi0bits>
 800c7aa:	42b0      	cmp	r0, r6
 800c7ac:	dbe7      	blt.n	800c77e <__gethex+0x3ea>
 800c7ae:	e7f0      	b.n	800c792 <__gethex+0x3fe>
 800c7b0:	0800f783 	.word	0x0800f783

0800c7b4 <L_shift>:
 800c7b4:	f1c2 0208 	rsb	r2, r2, #8
 800c7b8:	0092      	lsls	r2, r2, #2
 800c7ba:	b570      	push	{r4, r5, r6, lr}
 800c7bc:	f1c2 0620 	rsb	r6, r2, #32
 800c7c0:	6843      	ldr	r3, [r0, #4]
 800c7c2:	6804      	ldr	r4, [r0, #0]
 800c7c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c7c8:	432c      	orrs	r4, r5
 800c7ca:	40d3      	lsrs	r3, r2
 800c7cc:	6004      	str	r4, [r0, #0]
 800c7ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7d2:	4288      	cmp	r0, r1
 800c7d4:	d3f4      	bcc.n	800c7c0 <L_shift+0xc>
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}

0800c7d8 <__match>:
 800c7d8:	b530      	push	{r4, r5, lr}
 800c7da:	6803      	ldr	r3, [r0, #0]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7e2:	b914      	cbnz	r4, 800c7ea <__match+0x12>
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	bd30      	pop	{r4, r5, pc}
 800c7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c7f2:	2d19      	cmp	r5, #25
 800c7f4:	bf98      	it	ls
 800c7f6:	3220      	addls	r2, #32
 800c7f8:	42a2      	cmp	r2, r4
 800c7fa:	d0f0      	beq.n	800c7de <__match+0x6>
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	e7f3      	b.n	800c7e8 <__match+0x10>

0800c800 <__hexnan>:
 800c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	680b      	ldr	r3, [r1, #0]
 800c806:	6801      	ldr	r1, [r0, #0]
 800c808:	115e      	asrs	r6, r3, #5
 800c80a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c80e:	f013 031f 	ands.w	r3, r3, #31
 800c812:	b087      	sub	sp, #28
 800c814:	bf18      	it	ne
 800c816:	3604      	addne	r6, #4
 800c818:	2500      	movs	r5, #0
 800c81a:	1f37      	subs	r7, r6, #4
 800c81c:	4682      	mov	sl, r0
 800c81e:	4690      	mov	r8, r2
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	f846 5c04 	str.w	r5, [r6, #-4]
 800c826:	46b9      	mov	r9, r7
 800c828:	463c      	mov	r4, r7
 800c82a:	9502      	str	r5, [sp, #8]
 800c82c:	46ab      	mov	fp, r5
 800c82e:	784a      	ldrb	r2, [r1, #1]
 800c830:	1c4b      	adds	r3, r1, #1
 800c832:	9303      	str	r3, [sp, #12]
 800c834:	b342      	cbz	r2, 800c888 <__hexnan+0x88>
 800c836:	4610      	mov	r0, r2
 800c838:	9105      	str	r1, [sp, #20]
 800c83a:	9204      	str	r2, [sp, #16]
 800c83c:	f7ff fd94 	bl	800c368 <__hexdig_fun>
 800c840:	2800      	cmp	r0, #0
 800c842:	d151      	bne.n	800c8e8 <__hexnan+0xe8>
 800c844:	9a04      	ldr	r2, [sp, #16]
 800c846:	9905      	ldr	r1, [sp, #20]
 800c848:	2a20      	cmp	r2, #32
 800c84a:	d818      	bhi.n	800c87e <__hexnan+0x7e>
 800c84c:	9b02      	ldr	r3, [sp, #8]
 800c84e:	459b      	cmp	fp, r3
 800c850:	dd13      	ble.n	800c87a <__hexnan+0x7a>
 800c852:	454c      	cmp	r4, r9
 800c854:	d206      	bcs.n	800c864 <__hexnan+0x64>
 800c856:	2d07      	cmp	r5, #7
 800c858:	dc04      	bgt.n	800c864 <__hexnan+0x64>
 800c85a:	462a      	mov	r2, r5
 800c85c:	4649      	mov	r1, r9
 800c85e:	4620      	mov	r0, r4
 800c860:	f7ff ffa8 	bl	800c7b4 <L_shift>
 800c864:	4544      	cmp	r4, r8
 800c866:	d952      	bls.n	800c90e <__hexnan+0x10e>
 800c868:	2300      	movs	r3, #0
 800c86a:	f1a4 0904 	sub.w	r9, r4, #4
 800c86e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c872:	f8cd b008 	str.w	fp, [sp, #8]
 800c876:	464c      	mov	r4, r9
 800c878:	461d      	mov	r5, r3
 800c87a:	9903      	ldr	r1, [sp, #12]
 800c87c:	e7d7      	b.n	800c82e <__hexnan+0x2e>
 800c87e:	2a29      	cmp	r2, #41	@ 0x29
 800c880:	d157      	bne.n	800c932 <__hexnan+0x132>
 800c882:	3102      	adds	r1, #2
 800c884:	f8ca 1000 	str.w	r1, [sl]
 800c888:	f1bb 0f00 	cmp.w	fp, #0
 800c88c:	d051      	beq.n	800c932 <__hexnan+0x132>
 800c88e:	454c      	cmp	r4, r9
 800c890:	d206      	bcs.n	800c8a0 <__hexnan+0xa0>
 800c892:	2d07      	cmp	r5, #7
 800c894:	dc04      	bgt.n	800c8a0 <__hexnan+0xa0>
 800c896:	462a      	mov	r2, r5
 800c898:	4649      	mov	r1, r9
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7ff ff8a 	bl	800c7b4 <L_shift>
 800c8a0:	4544      	cmp	r4, r8
 800c8a2:	d936      	bls.n	800c912 <__hexnan+0x112>
 800c8a4:	f1a8 0204 	sub.w	r2, r8, #4
 800c8a8:	4623      	mov	r3, r4
 800c8aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8b2:	429f      	cmp	r7, r3
 800c8b4:	d2f9      	bcs.n	800c8aa <__hexnan+0xaa>
 800c8b6:	1b3b      	subs	r3, r7, r4
 800c8b8:	f023 0303 	bic.w	r3, r3, #3
 800c8bc:	3304      	adds	r3, #4
 800c8be:	3401      	adds	r4, #1
 800c8c0:	3e03      	subs	r6, #3
 800c8c2:	42b4      	cmp	r4, r6
 800c8c4:	bf88      	it	hi
 800c8c6:	2304      	movhi	r3, #4
 800c8c8:	4443      	add	r3, r8
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f843 2b04 	str.w	r2, [r3], #4
 800c8d0:	429f      	cmp	r7, r3
 800c8d2:	d2fb      	bcs.n	800c8cc <__hexnan+0xcc>
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	b91b      	cbnz	r3, 800c8e0 <__hexnan+0xe0>
 800c8d8:	4547      	cmp	r7, r8
 800c8da:	d128      	bne.n	800c92e <__hexnan+0x12e>
 800c8dc:	2301      	movs	r3, #1
 800c8de:	603b      	str	r3, [r7, #0]
 800c8e0:	2005      	movs	r0, #5
 800c8e2:	b007      	add	sp, #28
 800c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	2d08      	cmp	r5, #8
 800c8ec:	f10b 0b01 	add.w	fp, fp, #1
 800c8f0:	dd06      	ble.n	800c900 <__hexnan+0x100>
 800c8f2:	4544      	cmp	r4, r8
 800c8f4:	d9c1      	bls.n	800c87a <__hexnan+0x7a>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8fc:	2501      	movs	r5, #1
 800c8fe:	3c04      	subs	r4, #4
 800c900:	6822      	ldr	r2, [r4, #0]
 800c902:	f000 000f 	and.w	r0, r0, #15
 800c906:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c90a:	6020      	str	r0, [r4, #0]
 800c90c:	e7b5      	b.n	800c87a <__hexnan+0x7a>
 800c90e:	2508      	movs	r5, #8
 800c910:	e7b3      	b.n	800c87a <__hexnan+0x7a>
 800c912:	9b01      	ldr	r3, [sp, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0dd      	beq.n	800c8d4 <__hexnan+0xd4>
 800c918:	f1c3 0320 	rsb	r3, r3, #32
 800c91c:	f04f 32ff 	mov.w	r2, #4294967295
 800c920:	40da      	lsrs	r2, r3
 800c922:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c926:	4013      	ands	r3, r2
 800c928:	f846 3c04 	str.w	r3, [r6, #-4]
 800c92c:	e7d2      	b.n	800c8d4 <__hexnan+0xd4>
 800c92e:	3f04      	subs	r7, #4
 800c930:	e7d0      	b.n	800c8d4 <__hexnan+0xd4>
 800c932:	2004      	movs	r0, #4
 800c934:	e7d5      	b.n	800c8e2 <__hexnan+0xe2>
	...

0800c938 <malloc>:
 800c938:	4b02      	ldr	r3, [pc, #8]	@ (800c944 <malloc+0xc>)
 800c93a:	4601      	mov	r1, r0
 800c93c:	6818      	ldr	r0, [r3, #0]
 800c93e:	f000 b825 	b.w	800c98c <_malloc_r>
 800c942:	bf00      	nop
 800c944:	2000021c 	.word	0x2000021c

0800c948 <sbrk_aligned>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4e0f      	ldr	r6, [pc, #60]	@ (800c988 <sbrk_aligned+0x40>)
 800c94c:	460c      	mov	r4, r1
 800c94e:	6831      	ldr	r1, [r6, #0]
 800c950:	4605      	mov	r5, r0
 800c952:	b911      	cbnz	r1, 800c95a <sbrk_aligned+0x12>
 800c954:	f001 f9e8 	bl	800dd28 <_sbrk_r>
 800c958:	6030      	str	r0, [r6, #0]
 800c95a:	4621      	mov	r1, r4
 800c95c:	4628      	mov	r0, r5
 800c95e:	f001 f9e3 	bl	800dd28 <_sbrk_r>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	d103      	bne.n	800c96e <sbrk_aligned+0x26>
 800c966:	f04f 34ff 	mov.w	r4, #4294967295
 800c96a:	4620      	mov	r0, r4
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	1cc4      	adds	r4, r0, #3
 800c970:	f024 0403 	bic.w	r4, r4, #3
 800c974:	42a0      	cmp	r0, r4
 800c976:	d0f8      	beq.n	800c96a <sbrk_aligned+0x22>
 800c978:	1a21      	subs	r1, r4, r0
 800c97a:	4628      	mov	r0, r5
 800c97c:	f001 f9d4 	bl	800dd28 <_sbrk_r>
 800c980:	3001      	adds	r0, #1
 800c982:	d1f2      	bne.n	800c96a <sbrk_aligned+0x22>
 800c984:	e7ef      	b.n	800c966 <sbrk_aligned+0x1e>
 800c986:	bf00      	nop
 800c988:	20000900 	.word	0x20000900

0800c98c <_malloc_r>:
 800c98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c990:	1ccd      	adds	r5, r1, #3
 800c992:	f025 0503 	bic.w	r5, r5, #3
 800c996:	3508      	adds	r5, #8
 800c998:	2d0c      	cmp	r5, #12
 800c99a:	bf38      	it	cc
 800c99c:	250c      	movcc	r5, #12
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	db01      	blt.n	800c9a8 <_malloc_r+0x1c>
 800c9a4:	42a9      	cmp	r1, r5
 800c9a6:	d904      	bls.n	800c9b2 <_malloc_r+0x26>
 800c9a8:	230c      	movs	r3, #12
 800c9aa:	6033      	str	r3, [r6, #0]
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca88 <_malloc_r+0xfc>
 800c9b6:	f000 f87b 	bl	800cab0 <__malloc_lock>
 800c9ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c9be:	461c      	mov	r4, r3
 800c9c0:	bb44      	cbnz	r4, 800ca14 <_malloc_r+0x88>
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7ff ffbf 	bl	800c948 <sbrk_aligned>
 800c9ca:	1c43      	adds	r3, r0, #1
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	d158      	bne.n	800ca82 <_malloc_r+0xf6>
 800c9d0:	f8d8 4000 	ldr.w	r4, [r8]
 800c9d4:	4627      	mov	r7, r4
 800c9d6:	2f00      	cmp	r7, #0
 800c9d8:	d143      	bne.n	800ca62 <_malloc_r+0xd6>
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	d04b      	beq.n	800ca76 <_malloc_r+0xea>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	eb04 0903 	add.w	r9, r4, r3
 800c9e8:	f001 f99e 	bl	800dd28 <_sbrk_r>
 800c9ec:	4581      	cmp	r9, r0
 800c9ee:	d142      	bne.n	800ca76 <_malloc_r+0xea>
 800c9f0:	6821      	ldr	r1, [r4, #0]
 800c9f2:	1a6d      	subs	r5, r5, r1
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7ff ffa6 	bl	800c948 <sbrk_aligned>
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d03a      	beq.n	800ca76 <_malloc_r+0xea>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	442b      	add	r3, r5
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	f8d8 3000 	ldr.w	r3, [r8]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	bb62      	cbnz	r2, 800ca68 <_malloc_r+0xdc>
 800ca0e:	f8c8 7000 	str.w	r7, [r8]
 800ca12:	e00f      	b.n	800ca34 <_malloc_r+0xa8>
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	1b52      	subs	r2, r2, r5
 800ca18:	d420      	bmi.n	800ca5c <_malloc_r+0xd0>
 800ca1a:	2a0b      	cmp	r2, #11
 800ca1c:	d917      	bls.n	800ca4e <_malloc_r+0xc2>
 800ca1e:	1961      	adds	r1, r4, r5
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	6025      	str	r5, [r4, #0]
 800ca24:	bf18      	it	ne
 800ca26:	6059      	strne	r1, [r3, #4]
 800ca28:	6863      	ldr	r3, [r4, #4]
 800ca2a:	bf08      	it	eq
 800ca2c:	f8c8 1000 	streq.w	r1, [r8]
 800ca30:	5162      	str	r2, [r4, r5]
 800ca32:	604b      	str	r3, [r1, #4]
 800ca34:	4630      	mov	r0, r6
 800ca36:	f000 f841 	bl	800cabc <__malloc_unlock>
 800ca3a:	f104 000b 	add.w	r0, r4, #11
 800ca3e:	1d23      	adds	r3, r4, #4
 800ca40:	f020 0007 	bic.w	r0, r0, #7
 800ca44:	1ac2      	subs	r2, r0, r3
 800ca46:	bf1c      	itt	ne
 800ca48:	1a1b      	subne	r3, r3, r0
 800ca4a:	50a3      	strne	r3, [r4, r2]
 800ca4c:	e7af      	b.n	800c9ae <_malloc_r+0x22>
 800ca4e:	6862      	ldr	r2, [r4, #4]
 800ca50:	42a3      	cmp	r3, r4
 800ca52:	bf0c      	ite	eq
 800ca54:	f8c8 2000 	streq.w	r2, [r8]
 800ca58:	605a      	strne	r2, [r3, #4]
 800ca5a:	e7eb      	b.n	800ca34 <_malloc_r+0xa8>
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	6864      	ldr	r4, [r4, #4]
 800ca60:	e7ae      	b.n	800c9c0 <_malloc_r+0x34>
 800ca62:	463c      	mov	r4, r7
 800ca64:	687f      	ldr	r7, [r7, #4]
 800ca66:	e7b6      	b.n	800c9d6 <_malloc_r+0x4a>
 800ca68:	461a      	mov	r2, r3
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	d1fb      	bne.n	800ca68 <_malloc_r+0xdc>
 800ca70:	2300      	movs	r3, #0
 800ca72:	6053      	str	r3, [r2, #4]
 800ca74:	e7de      	b.n	800ca34 <_malloc_r+0xa8>
 800ca76:	230c      	movs	r3, #12
 800ca78:	6033      	str	r3, [r6, #0]
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f000 f81e 	bl	800cabc <__malloc_unlock>
 800ca80:	e794      	b.n	800c9ac <_malloc_r+0x20>
 800ca82:	6005      	str	r5, [r0, #0]
 800ca84:	e7d6      	b.n	800ca34 <_malloc_r+0xa8>
 800ca86:	bf00      	nop
 800ca88:	20000904 	.word	0x20000904

0800ca8c <__ascii_mbtowc>:
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	b901      	cbnz	r1, 800ca92 <__ascii_mbtowc+0x6>
 800ca90:	a901      	add	r1, sp, #4
 800ca92:	b142      	cbz	r2, 800caa6 <__ascii_mbtowc+0x1a>
 800ca94:	b14b      	cbz	r3, 800caaa <__ascii_mbtowc+0x1e>
 800ca96:	7813      	ldrb	r3, [r2, #0]
 800ca98:	600b      	str	r3, [r1, #0]
 800ca9a:	7812      	ldrb	r2, [r2, #0]
 800ca9c:	1e10      	subs	r0, r2, #0
 800ca9e:	bf18      	it	ne
 800caa0:	2001      	movne	r0, #1
 800caa2:	b002      	add	sp, #8
 800caa4:	4770      	bx	lr
 800caa6:	4610      	mov	r0, r2
 800caa8:	e7fb      	b.n	800caa2 <__ascii_mbtowc+0x16>
 800caaa:	f06f 0001 	mvn.w	r0, #1
 800caae:	e7f8      	b.n	800caa2 <__ascii_mbtowc+0x16>

0800cab0 <__malloc_lock>:
 800cab0:	4801      	ldr	r0, [pc, #4]	@ (800cab8 <__malloc_lock+0x8>)
 800cab2:	f7fe bd32 	b.w	800b51a <__retarget_lock_acquire_recursive>
 800cab6:	bf00      	nop
 800cab8:	200008fc 	.word	0x200008fc

0800cabc <__malloc_unlock>:
 800cabc:	4801      	ldr	r0, [pc, #4]	@ (800cac4 <__malloc_unlock+0x8>)
 800cabe:	f7fe bd2d 	b.w	800b51c <__retarget_lock_release_recursive>
 800cac2:	bf00      	nop
 800cac4:	200008fc 	.word	0x200008fc

0800cac8 <_Balloc>:
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	69c6      	ldr	r6, [r0, #28]
 800cacc:	4604      	mov	r4, r0
 800cace:	460d      	mov	r5, r1
 800cad0:	b976      	cbnz	r6, 800caf0 <_Balloc+0x28>
 800cad2:	2010      	movs	r0, #16
 800cad4:	f7ff ff30 	bl	800c938 <malloc>
 800cad8:	4602      	mov	r2, r0
 800cada:	61e0      	str	r0, [r4, #28]
 800cadc:	b920      	cbnz	r0, 800cae8 <_Balloc+0x20>
 800cade:	4b18      	ldr	r3, [pc, #96]	@ (800cb40 <_Balloc+0x78>)
 800cae0:	4818      	ldr	r0, [pc, #96]	@ (800cb44 <_Balloc+0x7c>)
 800cae2:	216b      	movs	r1, #107	@ 0x6b
 800cae4:	f7fe fd3a 	bl	800b55c <__assert_func>
 800cae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caec:	6006      	str	r6, [r0, #0]
 800caee:	60c6      	str	r6, [r0, #12]
 800caf0:	69e6      	ldr	r6, [r4, #28]
 800caf2:	68f3      	ldr	r3, [r6, #12]
 800caf4:	b183      	cbz	r3, 800cb18 <_Balloc+0x50>
 800caf6:	69e3      	ldr	r3, [r4, #28]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cafe:	b9b8      	cbnz	r0, 800cb30 <_Balloc+0x68>
 800cb00:	2101      	movs	r1, #1
 800cb02:	fa01 f605 	lsl.w	r6, r1, r5
 800cb06:	1d72      	adds	r2, r6, #5
 800cb08:	0092      	lsls	r2, r2, #2
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f001 f923 	bl	800dd56 <_calloc_r>
 800cb10:	b160      	cbz	r0, 800cb2c <_Balloc+0x64>
 800cb12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb16:	e00e      	b.n	800cb36 <_Balloc+0x6e>
 800cb18:	2221      	movs	r2, #33	@ 0x21
 800cb1a:	2104      	movs	r1, #4
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f001 f91a 	bl	800dd56 <_calloc_r>
 800cb22:	69e3      	ldr	r3, [r4, #28]
 800cb24:	60f0      	str	r0, [r6, #12]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1e4      	bne.n	800caf6 <_Balloc+0x2e>
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	bd70      	pop	{r4, r5, r6, pc}
 800cb30:	6802      	ldr	r2, [r0, #0]
 800cb32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb36:	2300      	movs	r3, #0
 800cb38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb3c:	e7f7      	b.n	800cb2e <_Balloc+0x66>
 800cb3e:	bf00      	nop
 800cb40:	0800f669 	.word	0x0800f669
 800cb44:	0800f7f4 	.word	0x0800f7f4

0800cb48 <_Bfree>:
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	69c6      	ldr	r6, [r0, #28]
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	460c      	mov	r4, r1
 800cb50:	b976      	cbnz	r6, 800cb70 <_Bfree+0x28>
 800cb52:	2010      	movs	r0, #16
 800cb54:	f7ff fef0 	bl	800c938 <malloc>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	61e8      	str	r0, [r5, #28]
 800cb5c:	b920      	cbnz	r0, 800cb68 <_Bfree+0x20>
 800cb5e:	4b09      	ldr	r3, [pc, #36]	@ (800cb84 <_Bfree+0x3c>)
 800cb60:	4809      	ldr	r0, [pc, #36]	@ (800cb88 <_Bfree+0x40>)
 800cb62:	218f      	movs	r1, #143	@ 0x8f
 800cb64:	f7fe fcfa 	bl	800b55c <__assert_func>
 800cb68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb6c:	6006      	str	r6, [r0, #0]
 800cb6e:	60c6      	str	r6, [r0, #12]
 800cb70:	b13c      	cbz	r4, 800cb82 <_Bfree+0x3a>
 800cb72:	69eb      	ldr	r3, [r5, #28]
 800cb74:	6862      	ldr	r2, [r4, #4]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb7c:	6021      	str	r1, [r4, #0]
 800cb7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb82:	bd70      	pop	{r4, r5, r6, pc}
 800cb84:	0800f669 	.word	0x0800f669
 800cb88:	0800f7f4 	.word	0x0800f7f4

0800cb8c <__multadd>:
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb90:	690d      	ldr	r5, [r1, #16]
 800cb92:	4607      	mov	r7, r0
 800cb94:	460c      	mov	r4, r1
 800cb96:	461e      	mov	r6, r3
 800cb98:	f101 0c14 	add.w	ip, r1, #20
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f8dc 3000 	ldr.w	r3, [ip]
 800cba2:	b299      	uxth	r1, r3
 800cba4:	fb02 6101 	mla	r1, r2, r1, r6
 800cba8:	0c1e      	lsrs	r6, r3, #16
 800cbaa:	0c0b      	lsrs	r3, r1, #16
 800cbac:	fb02 3306 	mla	r3, r2, r6, r3
 800cbb0:	b289      	uxth	r1, r1
 800cbb2:	3001      	adds	r0, #1
 800cbb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbb8:	4285      	cmp	r5, r0
 800cbba:	f84c 1b04 	str.w	r1, [ip], #4
 800cbbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbc2:	dcec      	bgt.n	800cb9e <__multadd+0x12>
 800cbc4:	b30e      	cbz	r6, 800cc0a <__multadd+0x7e>
 800cbc6:	68a3      	ldr	r3, [r4, #8]
 800cbc8:	42ab      	cmp	r3, r5
 800cbca:	dc19      	bgt.n	800cc00 <__multadd+0x74>
 800cbcc:	6861      	ldr	r1, [r4, #4]
 800cbce:	4638      	mov	r0, r7
 800cbd0:	3101      	adds	r1, #1
 800cbd2:	f7ff ff79 	bl	800cac8 <_Balloc>
 800cbd6:	4680      	mov	r8, r0
 800cbd8:	b928      	cbnz	r0, 800cbe6 <__multadd+0x5a>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	4b0c      	ldr	r3, [pc, #48]	@ (800cc10 <__multadd+0x84>)
 800cbde:	480d      	ldr	r0, [pc, #52]	@ (800cc14 <__multadd+0x88>)
 800cbe0:	21ba      	movs	r1, #186	@ 0xba
 800cbe2:	f7fe fcbb 	bl	800b55c <__assert_func>
 800cbe6:	6922      	ldr	r2, [r4, #16]
 800cbe8:	3202      	adds	r2, #2
 800cbea:	f104 010c 	add.w	r1, r4, #12
 800cbee:	0092      	lsls	r2, r2, #2
 800cbf0:	300c      	adds	r0, #12
 800cbf2:	f7fe fc94 	bl	800b51e <memcpy>
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4638      	mov	r0, r7
 800cbfa:	f7ff ffa5 	bl	800cb48 <_Bfree>
 800cbfe:	4644      	mov	r4, r8
 800cc00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc04:	3501      	adds	r5, #1
 800cc06:	615e      	str	r6, [r3, #20]
 800cc08:	6125      	str	r5, [r4, #16]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	0800f783 	.word	0x0800f783
 800cc14:	0800f7f4 	.word	0x0800f7f4

0800cc18 <__s2b>:
 800cc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	4615      	mov	r5, r2
 800cc20:	461f      	mov	r7, r3
 800cc22:	2209      	movs	r2, #9
 800cc24:	3308      	adds	r3, #8
 800cc26:	4606      	mov	r6, r0
 800cc28:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	2201      	movs	r2, #1
 800cc30:	429a      	cmp	r2, r3
 800cc32:	db09      	blt.n	800cc48 <__s2b+0x30>
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff ff47 	bl	800cac8 <_Balloc>
 800cc3a:	b940      	cbnz	r0, 800cc4e <__s2b+0x36>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	4b19      	ldr	r3, [pc, #100]	@ (800cca4 <__s2b+0x8c>)
 800cc40:	4819      	ldr	r0, [pc, #100]	@ (800cca8 <__s2b+0x90>)
 800cc42:	21d3      	movs	r1, #211	@ 0xd3
 800cc44:	f7fe fc8a 	bl	800b55c <__assert_func>
 800cc48:	0052      	lsls	r2, r2, #1
 800cc4a:	3101      	adds	r1, #1
 800cc4c:	e7f0      	b.n	800cc30 <__s2b+0x18>
 800cc4e:	9b08      	ldr	r3, [sp, #32]
 800cc50:	6143      	str	r3, [r0, #20]
 800cc52:	2d09      	cmp	r5, #9
 800cc54:	f04f 0301 	mov.w	r3, #1
 800cc58:	6103      	str	r3, [r0, #16]
 800cc5a:	dd16      	ble.n	800cc8a <__s2b+0x72>
 800cc5c:	f104 0909 	add.w	r9, r4, #9
 800cc60:	46c8      	mov	r8, r9
 800cc62:	442c      	add	r4, r5
 800cc64:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc68:	4601      	mov	r1, r0
 800cc6a:	3b30      	subs	r3, #48	@ 0x30
 800cc6c:	220a      	movs	r2, #10
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f7ff ff8c 	bl	800cb8c <__multadd>
 800cc74:	45a0      	cmp	r8, r4
 800cc76:	d1f5      	bne.n	800cc64 <__s2b+0x4c>
 800cc78:	f1a5 0408 	sub.w	r4, r5, #8
 800cc7c:	444c      	add	r4, r9
 800cc7e:	1b2d      	subs	r5, r5, r4
 800cc80:	1963      	adds	r3, r4, r5
 800cc82:	42bb      	cmp	r3, r7
 800cc84:	db04      	blt.n	800cc90 <__s2b+0x78>
 800cc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8a:	340a      	adds	r4, #10
 800cc8c:	2509      	movs	r5, #9
 800cc8e:	e7f6      	b.n	800cc7e <__s2b+0x66>
 800cc90:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc94:	4601      	mov	r1, r0
 800cc96:	3b30      	subs	r3, #48	@ 0x30
 800cc98:	220a      	movs	r2, #10
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7ff ff76 	bl	800cb8c <__multadd>
 800cca0:	e7ee      	b.n	800cc80 <__s2b+0x68>
 800cca2:	bf00      	nop
 800cca4:	0800f783 	.word	0x0800f783
 800cca8:	0800f7f4 	.word	0x0800f7f4

0800ccac <__hi0bits>:
 800ccac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	bf36      	itet	cc
 800ccb4:	0403      	lslcc	r3, r0, #16
 800ccb6:	2000      	movcs	r0, #0
 800ccb8:	2010      	movcc	r0, #16
 800ccba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccbe:	bf3c      	itt	cc
 800ccc0:	021b      	lslcc	r3, r3, #8
 800ccc2:	3008      	addcc	r0, #8
 800ccc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccc8:	bf3c      	itt	cc
 800ccca:	011b      	lslcc	r3, r3, #4
 800cccc:	3004      	addcc	r0, #4
 800ccce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccd2:	bf3c      	itt	cc
 800ccd4:	009b      	lslcc	r3, r3, #2
 800ccd6:	3002      	addcc	r0, #2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	db05      	blt.n	800cce8 <__hi0bits+0x3c>
 800ccdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cce0:	f100 0001 	add.w	r0, r0, #1
 800cce4:	bf08      	it	eq
 800cce6:	2020      	moveq	r0, #32
 800cce8:	4770      	bx	lr

0800ccea <__lo0bits>:
 800ccea:	6803      	ldr	r3, [r0, #0]
 800ccec:	4602      	mov	r2, r0
 800ccee:	f013 0007 	ands.w	r0, r3, #7
 800ccf2:	d00b      	beq.n	800cd0c <__lo0bits+0x22>
 800ccf4:	07d9      	lsls	r1, r3, #31
 800ccf6:	d421      	bmi.n	800cd3c <__lo0bits+0x52>
 800ccf8:	0798      	lsls	r0, r3, #30
 800ccfa:	bf49      	itett	mi
 800ccfc:	085b      	lsrmi	r3, r3, #1
 800ccfe:	089b      	lsrpl	r3, r3, #2
 800cd00:	2001      	movmi	r0, #1
 800cd02:	6013      	strmi	r3, [r2, #0]
 800cd04:	bf5c      	itt	pl
 800cd06:	6013      	strpl	r3, [r2, #0]
 800cd08:	2002      	movpl	r0, #2
 800cd0a:	4770      	bx	lr
 800cd0c:	b299      	uxth	r1, r3
 800cd0e:	b909      	cbnz	r1, 800cd14 <__lo0bits+0x2a>
 800cd10:	0c1b      	lsrs	r3, r3, #16
 800cd12:	2010      	movs	r0, #16
 800cd14:	b2d9      	uxtb	r1, r3
 800cd16:	b909      	cbnz	r1, 800cd1c <__lo0bits+0x32>
 800cd18:	3008      	adds	r0, #8
 800cd1a:	0a1b      	lsrs	r3, r3, #8
 800cd1c:	0719      	lsls	r1, r3, #28
 800cd1e:	bf04      	itt	eq
 800cd20:	091b      	lsreq	r3, r3, #4
 800cd22:	3004      	addeq	r0, #4
 800cd24:	0799      	lsls	r1, r3, #30
 800cd26:	bf04      	itt	eq
 800cd28:	089b      	lsreq	r3, r3, #2
 800cd2a:	3002      	addeq	r0, #2
 800cd2c:	07d9      	lsls	r1, r3, #31
 800cd2e:	d403      	bmi.n	800cd38 <__lo0bits+0x4e>
 800cd30:	085b      	lsrs	r3, r3, #1
 800cd32:	f100 0001 	add.w	r0, r0, #1
 800cd36:	d003      	beq.n	800cd40 <__lo0bits+0x56>
 800cd38:	6013      	str	r3, [r2, #0]
 800cd3a:	4770      	bx	lr
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	4770      	bx	lr
 800cd40:	2020      	movs	r0, #32
 800cd42:	4770      	bx	lr

0800cd44 <__i2b>:
 800cd44:	b510      	push	{r4, lr}
 800cd46:	460c      	mov	r4, r1
 800cd48:	2101      	movs	r1, #1
 800cd4a:	f7ff febd 	bl	800cac8 <_Balloc>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	b928      	cbnz	r0, 800cd5e <__i2b+0x1a>
 800cd52:	4b05      	ldr	r3, [pc, #20]	@ (800cd68 <__i2b+0x24>)
 800cd54:	4805      	ldr	r0, [pc, #20]	@ (800cd6c <__i2b+0x28>)
 800cd56:	f240 1145 	movw	r1, #325	@ 0x145
 800cd5a:	f7fe fbff 	bl	800b55c <__assert_func>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	6144      	str	r4, [r0, #20]
 800cd62:	6103      	str	r3, [r0, #16]
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	bf00      	nop
 800cd68:	0800f783 	.word	0x0800f783
 800cd6c:	0800f7f4 	.word	0x0800f7f4

0800cd70 <__multiply>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	4614      	mov	r4, r2
 800cd76:	690a      	ldr	r2, [r1, #16]
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	bfa8      	it	ge
 800cd7e:	4623      	movge	r3, r4
 800cd80:	460f      	mov	r7, r1
 800cd82:	bfa4      	itt	ge
 800cd84:	460c      	movge	r4, r1
 800cd86:	461f      	movge	r7, r3
 800cd88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd90:	68a3      	ldr	r3, [r4, #8]
 800cd92:	6861      	ldr	r1, [r4, #4]
 800cd94:	eb0a 0609 	add.w	r6, sl, r9
 800cd98:	42b3      	cmp	r3, r6
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	bfb8      	it	lt
 800cd9e:	3101      	addlt	r1, #1
 800cda0:	f7ff fe92 	bl	800cac8 <_Balloc>
 800cda4:	b930      	cbnz	r0, 800cdb4 <__multiply+0x44>
 800cda6:	4602      	mov	r2, r0
 800cda8:	4b44      	ldr	r3, [pc, #272]	@ (800cebc <__multiply+0x14c>)
 800cdaa:	4845      	ldr	r0, [pc, #276]	@ (800cec0 <__multiply+0x150>)
 800cdac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdb0:	f7fe fbd4 	bl	800b55c <__assert_func>
 800cdb4:	f100 0514 	add.w	r5, r0, #20
 800cdb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	4543      	cmp	r3, r8
 800cdc2:	d321      	bcc.n	800ce08 <__multiply+0x98>
 800cdc4:	f107 0114 	add.w	r1, r7, #20
 800cdc8:	f104 0214 	add.w	r2, r4, #20
 800cdcc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdd4:	9302      	str	r3, [sp, #8]
 800cdd6:	1b13      	subs	r3, r2, r4
 800cdd8:	3b15      	subs	r3, #21
 800cdda:	f023 0303 	bic.w	r3, r3, #3
 800cdde:	3304      	adds	r3, #4
 800cde0:	f104 0715 	add.w	r7, r4, #21
 800cde4:	42ba      	cmp	r2, r7
 800cde6:	bf38      	it	cc
 800cde8:	2304      	movcc	r3, #4
 800cdea:	9301      	str	r3, [sp, #4]
 800cdec:	9b02      	ldr	r3, [sp, #8]
 800cdee:	9103      	str	r1, [sp, #12]
 800cdf0:	428b      	cmp	r3, r1
 800cdf2:	d80c      	bhi.n	800ce0e <__multiply+0x9e>
 800cdf4:	2e00      	cmp	r6, #0
 800cdf6:	dd03      	ble.n	800ce00 <__multiply+0x90>
 800cdf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d05b      	beq.n	800ceb8 <__multiply+0x148>
 800ce00:	6106      	str	r6, [r0, #16]
 800ce02:	b005      	add	sp, #20
 800ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce08:	f843 2b04 	str.w	r2, [r3], #4
 800ce0c:	e7d8      	b.n	800cdc0 <__multiply+0x50>
 800ce0e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce12:	f1ba 0f00 	cmp.w	sl, #0
 800ce16:	d024      	beq.n	800ce62 <__multiply+0xf2>
 800ce18:	f104 0e14 	add.w	lr, r4, #20
 800ce1c:	46a9      	mov	r9, r5
 800ce1e:	f04f 0c00 	mov.w	ip, #0
 800ce22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce26:	f8d9 3000 	ldr.w	r3, [r9]
 800ce2a:	fa1f fb87 	uxth.w	fp, r7
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce38:	f8d9 7000 	ldr.w	r7, [r9]
 800ce3c:	4463      	add	r3, ip
 800ce3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce42:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce50:	4572      	cmp	r2, lr
 800ce52:	f849 3b04 	str.w	r3, [r9], #4
 800ce56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce5a:	d8e2      	bhi.n	800ce22 <__multiply+0xb2>
 800ce5c:	9b01      	ldr	r3, [sp, #4]
 800ce5e:	f845 c003 	str.w	ip, [r5, r3]
 800ce62:	9b03      	ldr	r3, [sp, #12]
 800ce64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce68:	3104      	adds	r1, #4
 800ce6a:	f1b9 0f00 	cmp.w	r9, #0
 800ce6e:	d021      	beq.n	800ceb4 <__multiply+0x144>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	f104 0c14 	add.w	ip, r4, #20
 800ce76:	46ae      	mov	lr, r5
 800ce78:	f04f 0a00 	mov.w	sl, #0
 800ce7c:	f8bc b000 	ldrh.w	fp, [ip]
 800ce80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce84:	fb09 770b 	mla	r7, r9, fp, r7
 800ce88:	4457      	add	r7, sl
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce90:	f84e 3b04 	str.w	r3, [lr], #4
 800ce94:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce9c:	f8be 3000 	ldrh.w	r3, [lr]
 800cea0:	fb09 330a 	mla	r3, r9, sl, r3
 800cea4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cea8:	4562      	cmp	r2, ip
 800ceaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceae:	d8e5      	bhi.n	800ce7c <__multiply+0x10c>
 800ceb0:	9f01      	ldr	r7, [sp, #4]
 800ceb2:	51eb      	str	r3, [r5, r7]
 800ceb4:	3504      	adds	r5, #4
 800ceb6:	e799      	b.n	800cdec <__multiply+0x7c>
 800ceb8:	3e01      	subs	r6, #1
 800ceba:	e79b      	b.n	800cdf4 <__multiply+0x84>
 800cebc:	0800f783 	.word	0x0800f783
 800cec0:	0800f7f4 	.word	0x0800f7f4

0800cec4 <__pow5mult>:
 800cec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cec8:	4615      	mov	r5, r2
 800ceca:	f012 0203 	ands.w	r2, r2, #3
 800cece:	4607      	mov	r7, r0
 800ced0:	460e      	mov	r6, r1
 800ced2:	d007      	beq.n	800cee4 <__pow5mult+0x20>
 800ced4:	4c25      	ldr	r4, [pc, #148]	@ (800cf6c <__pow5mult+0xa8>)
 800ced6:	3a01      	subs	r2, #1
 800ced8:	2300      	movs	r3, #0
 800ceda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cede:	f7ff fe55 	bl	800cb8c <__multadd>
 800cee2:	4606      	mov	r6, r0
 800cee4:	10ad      	asrs	r5, r5, #2
 800cee6:	d03d      	beq.n	800cf64 <__pow5mult+0xa0>
 800cee8:	69fc      	ldr	r4, [r7, #28]
 800ceea:	b97c      	cbnz	r4, 800cf0c <__pow5mult+0x48>
 800ceec:	2010      	movs	r0, #16
 800ceee:	f7ff fd23 	bl	800c938 <malloc>
 800cef2:	4602      	mov	r2, r0
 800cef4:	61f8      	str	r0, [r7, #28]
 800cef6:	b928      	cbnz	r0, 800cf04 <__pow5mult+0x40>
 800cef8:	4b1d      	ldr	r3, [pc, #116]	@ (800cf70 <__pow5mult+0xac>)
 800cefa:	481e      	ldr	r0, [pc, #120]	@ (800cf74 <__pow5mult+0xb0>)
 800cefc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cf00:	f7fe fb2c 	bl	800b55c <__assert_func>
 800cf04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf08:	6004      	str	r4, [r0, #0]
 800cf0a:	60c4      	str	r4, [r0, #12]
 800cf0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf14:	b94c      	cbnz	r4, 800cf2a <__pow5mult+0x66>
 800cf16:	f240 2171 	movw	r1, #625	@ 0x271
 800cf1a:	4638      	mov	r0, r7
 800cf1c:	f7ff ff12 	bl	800cd44 <__i2b>
 800cf20:	2300      	movs	r3, #0
 800cf22:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf26:	4604      	mov	r4, r0
 800cf28:	6003      	str	r3, [r0, #0]
 800cf2a:	f04f 0900 	mov.w	r9, #0
 800cf2e:	07eb      	lsls	r3, r5, #31
 800cf30:	d50a      	bpl.n	800cf48 <__pow5mult+0x84>
 800cf32:	4631      	mov	r1, r6
 800cf34:	4622      	mov	r2, r4
 800cf36:	4638      	mov	r0, r7
 800cf38:	f7ff ff1a 	bl	800cd70 <__multiply>
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	4680      	mov	r8, r0
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7ff fe01 	bl	800cb48 <_Bfree>
 800cf46:	4646      	mov	r6, r8
 800cf48:	106d      	asrs	r5, r5, #1
 800cf4a:	d00b      	beq.n	800cf64 <__pow5mult+0xa0>
 800cf4c:	6820      	ldr	r0, [r4, #0]
 800cf4e:	b938      	cbnz	r0, 800cf60 <__pow5mult+0x9c>
 800cf50:	4622      	mov	r2, r4
 800cf52:	4621      	mov	r1, r4
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7ff ff0b 	bl	800cd70 <__multiply>
 800cf5a:	6020      	str	r0, [r4, #0]
 800cf5c:	f8c0 9000 	str.w	r9, [r0]
 800cf60:	4604      	mov	r4, r0
 800cf62:	e7e4      	b.n	800cf2e <__pow5mult+0x6a>
 800cf64:	4630      	mov	r0, r6
 800cf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf6a:	bf00      	nop
 800cf6c:	0800f850 	.word	0x0800f850
 800cf70:	0800f669 	.word	0x0800f669
 800cf74:	0800f7f4 	.word	0x0800f7f4

0800cf78 <__lshift>:
 800cf78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	6849      	ldr	r1, [r1, #4]
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf86:	68a3      	ldr	r3, [r4, #8]
 800cf88:	4607      	mov	r7, r0
 800cf8a:	4691      	mov	r9, r2
 800cf8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf90:	f108 0601 	add.w	r6, r8, #1
 800cf94:	42b3      	cmp	r3, r6
 800cf96:	db0b      	blt.n	800cfb0 <__lshift+0x38>
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f7ff fd95 	bl	800cac8 <_Balloc>
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	b948      	cbnz	r0, 800cfb6 <__lshift+0x3e>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b28      	ldr	r3, [pc, #160]	@ (800d048 <__lshift+0xd0>)
 800cfa6:	4829      	ldr	r0, [pc, #164]	@ (800d04c <__lshift+0xd4>)
 800cfa8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfac:	f7fe fad6 	bl	800b55c <__assert_func>
 800cfb0:	3101      	adds	r1, #1
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	e7ee      	b.n	800cf94 <__lshift+0x1c>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f100 0114 	add.w	r1, r0, #20
 800cfbc:	f100 0210 	add.w	r2, r0, #16
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	4553      	cmp	r3, sl
 800cfc4:	db33      	blt.n	800d02e <__lshift+0xb6>
 800cfc6:	6920      	ldr	r0, [r4, #16]
 800cfc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfcc:	f104 0314 	add.w	r3, r4, #20
 800cfd0:	f019 091f 	ands.w	r9, r9, #31
 800cfd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfdc:	d02b      	beq.n	800d036 <__lshift+0xbe>
 800cfde:	f1c9 0e20 	rsb	lr, r9, #32
 800cfe2:	468a      	mov	sl, r1
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	6818      	ldr	r0, [r3, #0]
 800cfe8:	fa00 f009 	lsl.w	r0, r0, r9
 800cfec:	4310      	orrs	r0, r2
 800cfee:	f84a 0b04 	str.w	r0, [sl], #4
 800cff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff6:	459c      	cmp	ip, r3
 800cff8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cffc:	d8f3      	bhi.n	800cfe6 <__lshift+0x6e>
 800cffe:	ebac 0304 	sub.w	r3, ip, r4
 800d002:	3b15      	subs	r3, #21
 800d004:	f023 0303 	bic.w	r3, r3, #3
 800d008:	3304      	adds	r3, #4
 800d00a:	f104 0015 	add.w	r0, r4, #21
 800d00e:	4584      	cmp	ip, r0
 800d010:	bf38      	it	cc
 800d012:	2304      	movcc	r3, #4
 800d014:	50ca      	str	r2, [r1, r3]
 800d016:	b10a      	cbz	r2, 800d01c <__lshift+0xa4>
 800d018:	f108 0602 	add.w	r6, r8, #2
 800d01c:	3e01      	subs	r6, #1
 800d01e:	4638      	mov	r0, r7
 800d020:	612e      	str	r6, [r5, #16]
 800d022:	4621      	mov	r1, r4
 800d024:	f7ff fd90 	bl	800cb48 <_Bfree>
 800d028:	4628      	mov	r0, r5
 800d02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d032:	3301      	adds	r3, #1
 800d034:	e7c5      	b.n	800cfc2 <__lshift+0x4a>
 800d036:	3904      	subs	r1, #4
 800d038:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d040:	459c      	cmp	ip, r3
 800d042:	d8f9      	bhi.n	800d038 <__lshift+0xc0>
 800d044:	e7ea      	b.n	800d01c <__lshift+0xa4>
 800d046:	bf00      	nop
 800d048:	0800f783 	.word	0x0800f783
 800d04c:	0800f7f4 	.word	0x0800f7f4

0800d050 <__mcmp>:
 800d050:	690a      	ldr	r2, [r1, #16]
 800d052:	4603      	mov	r3, r0
 800d054:	6900      	ldr	r0, [r0, #16]
 800d056:	1a80      	subs	r0, r0, r2
 800d058:	b530      	push	{r4, r5, lr}
 800d05a:	d10e      	bne.n	800d07a <__mcmp+0x2a>
 800d05c:	3314      	adds	r3, #20
 800d05e:	3114      	adds	r1, #20
 800d060:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d064:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d06c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d070:	4295      	cmp	r5, r2
 800d072:	d003      	beq.n	800d07c <__mcmp+0x2c>
 800d074:	d205      	bcs.n	800d082 <__mcmp+0x32>
 800d076:	f04f 30ff 	mov.w	r0, #4294967295
 800d07a:	bd30      	pop	{r4, r5, pc}
 800d07c:	42a3      	cmp	r3, r4
 800d07e:	d3f3      	bcc.n	800d068 <__mcmp+0x18>
 800d080:	e7fb      	b.n	800d07a <__mcmp+0x2a>
 800d082:	2001      	movs	r0, #1
 800d084:	e7f9      	b.n	800d07a <__mcmp+0x2a>
	...

0800d088 <__mdiff>:
 800d088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d08c:	4689      	mov	r9, r1
 800d08e:	4606      	mov	r6, r0
 800d090:	4611      	mov	r1, r2
 800d092:	4648      	mov	r0, r9
 800d094:	4614      	mov	r4, r2
 800d096:	f7ff ffdb 	bl	800d050 <__mcmp>
 800d09a:	1e05      	subs	r5, r0, #0
 800d09c:	d112      	bne.n	800d0c4 <__mdiff+0x3c>
 800d09e:	4629      	mov	r1, r5
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7ff fd11 	bl	800cac8 <_Balloc>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	b928      	cbnz	r0, 800d0b6 <__mdiff+0x2e>
 800d0aa:	4b3f      	ldr	r3, [pc, #252]	@ (800d1a8 <__mdiff+0x120>)
 800d0ac:	f240 2137 	movw	r1, #567	@ 0x237
 800d0b0:	483e      	ldr	r0, [pc, #248]	@ (800d1ac <__mdiff+0x124>)
 800d0b2:	f7fe fa53 	bl	800b55c <__assert_func>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0bc:	4610      	mov	r0, r2
 800d0be:	b003      	add	sp, #12
 800d0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c4:	bfbc      	itt	lt
 800d0c6:	464b      	movlt	r3, r9
 800d0c8:	46a1      	movlt	r9, r4
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0d0:	bfba      	itte	lt
 800d0d2:	461c      	movlt	r4, r3
 800d0d4:	2501      	movlt	r5, #1
 800d0d6:	2500      	movge	r5, #0
 800d0d8:	f7ff fcf6 	bl	800cac8 <_Balloc>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	b918      	cbnz	r0, 800d0e8 <__mdiff+0x60>
 800d0e0:	4b31      	ldr	r3, [pc, #196]	@ (800d1a8 <__mdiff+0x120>)
 800d0e2:	f240 2145 	movw	r1, #581	@ 0x245
 800d0e6:	e7e3      	b.n	800d0b0 <__mdiff+0x28>
 800d0e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0ec:	6926      	ldr	r6, [r4, #16]
 800d0ee:	60c5      	str	r5, [r0, #12]
 800d0f0:	f109 0310 	add.w	r3, r9, #16
 800d0f4:	f109 0514 	add.w	r5, r9, #20
 800d0f8:	f104 0e14 	add.w	lr, r4, #20
 800d0fc:	f100 0b14 	add.w	fp, r0, #20
 800d100:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d104:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	46d9      	mov	r9, fp
 800d10c:	f04f 0c00 	mov.w	ip, #0
 800d110:	9b01      	ldr	r3, [sp, #4]
 800d112:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d116:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	fa1f f38a 	uxth.w	r3, sl
 800d120:	4619      	mov	r1, r3
 800d122:	b283      	uxth	r3, r0
 800d124:	1acb      	subs	r3, r1, r3
 800d126:	0c00      	lsrs	r0, r0, #16
 800d128:	4463      	add	r3, ip
 800d12a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d12e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d132:	b29b      	uxth	r3, r3
 800d134:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d138:	4576      	cmp	r6, lr
 800d13a:	f849 3b04 	str.w	r3, [r9], #4
 800d13e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d142:	d8e5      	bhi.n	800d110 <__mdiff+0x88>
 800d144:	1b33      	subs	r3, r6, r4
 800d146:	3b15      	subs	r3, #21
 800d148:	f023 0303 	bic.w	r3, r3, #3
 800d14c:	3415      	adds	r4, #21
 800d14e:	3304      	adds	r3, #4
 800d150:	42a6      	cmp	r6, r4
 800d152:	bf38      	it	cc
 800d154:	2304      	movcc	r3, #4
 800d156:	441d      	add	r5, r3
 800d158:	445b      	add	r3, fp
 800d15a:	461e      	mov	r6, r3
 800d15c:	462c      	mov	r4, r5
 800d15e:	4544      	cmp	r4, r8
 800d160:	d30e      	bcc.n	800d180 <__mdiff+0xf8>
 800d162:	f108 0103 	add.w	r1, r8, #3
 800d166:	1b49      	subs	r1, r1, r5
 800d168:	f021 0103 	bic.w	r1, r1, #3
 800d16c:	3d03      	subs	r5, #3
 800d16e:	45a8      	cmp	r8, r5
 800d170:	bf38      	it	cc
 800d172:	2100      	movcc	r1, #0
 800d174:	440b      	add	r3, r1
 800d176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d17a:	b191      	cbz	r1, 800d1a2 <__mdiff+0x11a>
 800d17c:	6117      	str	r7, [r2, #16]
 800d17e:	e79d      	b.n	800d0bc <__mdiff+0x34>
 800d180:	f854 1b04 	ldr.w	r1, [r4], #4
 800d184:	46e6      	mov	lr, ip
 800d186:	0c08      	lsrs	r0, r1, #16
 800d188:	fa1c fc81 	uxtah	ip, ip, r1
 800d18c:	4471      	add	r1, lr
 800d18e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d192:	b289      	uxth	r1, r1
 800d194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d198:	f846 1b04 	str.w	r1, [r6], #4
 800d19c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d1a0:	e7dd      	b.n	800d15e <__mdiff+0xd6>
 800d1a2:	3f01      	subs	r7, #1
 800d1a4:	e7e7      	b.n	800d176 <__mdiff+0xee>
 800d1a6:	bf00      	nop
 800d1a8:	0800f783 	.word	0x0800f783
 800d1ac:	0800f7f4 	.word	0x0800f7f4

0800d1b0 <__ulp>:
 800d1b0:	b082      	sub	sp, #8
 800d1b2:	ed8d 0b00 	vstr	d0, [sp]
 800d1b6:	9a01      	ldr	r2, [sp, #4]
 800d1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d1f8 <__ulp+0x48>)
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	dc08      	bgt.n	800d1d6 <__ulp+0x26>
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d1ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1ce:	da04      	bge.n	800d1da <__ulp+0x2a>
 800d1d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d1d4:	4113      	asrs	r3, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	e008      	b.n	800d1ec <__ulp+0x3c>
 800d1da:	f1a2 0314 	sub.w	r3, r2, #20
 800d1de:	2b1e      	cmp	r3, #30
 800d1e0:	bfda      	itte	le
 800d1e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d1e6:	40da      	lsrle	r2, r3
 800d1e8:	2201      	movgt	r2, #1
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	ec41 0b10 	vmov	d0, r0, r1
 800d1f4:	b002      	add	sp, #8
 800d1f6:	4770      	bx	lr
 800d1f8:	7ff00000 	.word	0x7ff00000

0800d1fc <__b2d>:
 800d1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d200:	6906      	ldr	r6, [r0, #16]
 800d202:	f100 0814 	add.w	r8, r0, #20
 800d206:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d20a:	1f37      	subs	r7, r6, #4
 800d20c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d210:	4610      	mov	r0, r2
 800d212:	f7ff fd4b 	bl	800ccac <__hi0bits>
 800d216:	f1c0 0320 	rsb	r3, r0, #32
 800d21a:	280a      	cmp	r0, #10
 800d21c:	600b      	str	r3, [r1, #0]
 800d21e:	491b      	ldr	r1, [pc, #108]	@ (800d28c <__b2d+0x90>)
 800d220:	dc15      	bgt.n	800d24e <__b2d+0x52>
 800d222:	f1c0 0c0b 	rsb	ip, r0, #11
 800d226:	fa22 f30c 	lsr.w	r3, r2, ip
 800d22a:	45b8      	cmp	r8, r7
 800d22c:	ea43 0501 	orr.w	r5, r3, r1
 800d230:	bf34      	ite	cc
 800d232:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d236:	2300      	movcs	r3, #0
 800d238:	3015      	adds	r0, #21
 800d23a:	fa02 f000 	lsl.w	r0, r2, r0
 800d23e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d242:	4303      	orrs	r3, r0
 800d244:	461c      	mov	r4, r3
 800d246:	ec45 4b10 	vmov	d0, r4, r5
 800d24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24e:	45b8      	cmp	r8, r7
 800d250:	bf3a      	itte	cc
 800d252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d256:	f1a6 0708 	subcc.w	r7, r6, #8
 800d25a:	2300      	movcs	r3, #0
 800d25c:	380b      	subs	r0, #11
 800d25e:	d012      	beq.n	800d286 <__b2d+0x8a>
 800d260:	f1c0 0120 	rsb	r1, r0, #32
 800d264:	fa23 f401 	lsr.w	r4, r3, r1
 800d268:	4082      	lsls	r2, r0
 800d26a:	4322      	orrs	r2, r4
 800d26c:	4547      	cmp	r7, r8
 800d26e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d272:	bf8c      	ite	hi
 800d274:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d278:	2200      	movls	r2, #0
 800d27a:	4083      	lsls	r3, r0
 800d27c:	40ca      	lsrs	r2, r1
 800d27e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d282:	4313      	orrs	r3, r2
 800d284:	e7de      	b.n	800d244 <__b2d+0x48>
 800d286:	ea42 0501 	orr.w	r5, r2, r1
 800d28a:	e7db      	b.n	800d244 <__b2d+0x48>
 800d28c:	3ff00000 	.word	0x3ff00000

0800d290 <__d2b>:
 800d290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d294:	460f      	mov	r7, r1
 800d296:	2101      	movs	r1, #1
 800d298:	ec59 8b10 	vmov	r8, r9, d0
 800d29c:	4616      	mov	r6, r2
 800d29e:	f7ff fc13 	bl	800cac8 <_Balloc>
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	b930      	cbnz	r0, 800d2b4 <__d2b+0x24>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	4b23      	ldr	r3, [pc, #140]	@ (800d338 <__d2b+0xa8>)
 800d2aa:	4824      	ldr	r0, [pc, #144]	@ (800d33c <__d2b+0xac>)
 800d2ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800d2b0:	f7fe f954 	bl	800b55c <__assert_func>
 800d2b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2bc:	b10d      	cbz	r5, 800d2c2 <__d2b+0x32>
 800d2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	f1b8 0300 	subs.w	r3, r8, #0
 800d2c8:	d023      	beq.n	800d312 <__d2b+0x82>
 800d2ca:	4668      	mov	r0, sp
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	f7ff fd0c 	bl	800ccea <__lo0bits>
 800d2d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d2d6:	b1d0      	cbz	r0, 800d30e <__d2b+0x7e>
 800d2d8:	f1c0 0320 	rsb	r3, r0, #32
 800d2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e0:	430b      	orrs	r3, r1
 800d2e2:	40c2      	lsrs	r2, r0
 800d2e4:	6163      	str	r3, [r4, #20]
 800d2e6:	9201      	str	r2, [sp, #4]
 800d2e8:	9b01      	ldr	r3, [sp, #4]
 800d2ea:	61a3      	str	r3, [r4, #24]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	bf0c      	ite	eq
 800d2f0:	2201      	moveq	r2, #1
 800d2f2:	2202      	movne	r2, #2
 800d2f4:	6122      	str	r2, [r4, #16]
 800d2f6:	b1a5      	cbz	r5, 800d322 <__d2b+0x92>
 800d2f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d2fc:	4405      	add	r5, r0
 800d2fe:	603d      	str	r5, [r7, #0]
 800d300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d304:	6030      	str	r0, [r6, #0]
 800d306:	4620      	mov	r0, r4
 800d308:	b003      	add	sp, #12
 800d30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d30e:	6161      	str	r1, [r4, #20]
 800d310:	e7ea      	b.n	800d2e8 <__d2b+0x58>
 800d312:	a801      	add	r0, sp, #4
 800d314:	f7ff fce9 	bl	800ccea <__lo0bits>
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	6163      	str	r3, [r4, #20]
 800d31c:	3020      	adds	r0, #32
 800d31e:	2201      	movs	r2, #1
 800d320:	e7e8      	b.n	800d2f4 <__d2b+0x64>
 800d322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d32a:	6038      	str	r0, [r7, #0]
 800d32c:	6918      	ldr	r0, [r3, #16]
 800d32e:	f7ff fcbd 	bl	800ccac <__hi0bits>
 800d332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d336:	e7e5      	b.n	800d304 <__d2b+0x74>
 800d338:	0800f783 	.word	0x0800f783
 800d33c:	0800f7f4 	.word	0x0800f7f4

0800d340 <__ratio>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	b085      	sub	sp, #20
 800d346:	e9cd 1000 	strd	r1, r0, [sp]
 800d34a:	a902      	add	r1, sp, #8
 800d34c:	f7ff ff56 	bl	800d1fc <__b2d>
 800d350:	9800      	ldr	r0, [sp, #0]
 800d352:	a903      	add	r1, sp, #12
 800d354:	ec55 4b10 	vmov	r4, r5, d0
 800d358:	f7ff ff50 	bl	800d1fc <__b2d>
 800d35c:	9b01      	ldr	r3, [sp, #4]
 800d35e:	6919      	ldr	r1, [r3, #16]
 800d360:	9b00      	ldr	r3, [sp, #0]
 800d362:	691b      	ldr	r3, [r3, #16]
 800d364:	1ac9      	subs	r1, r1, r3
 800d366:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d36a:	1a9b      	subs	r3, r3, r2
 800d36c:	ec5b ab10 	vmov	sl, fp, d0
 800d370:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d374:	2b00      	cmp	r3, #0
 800d376:	bfce      	itee	gt
 800d378:	462a      	movgt	r2, r5
 800d37a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d37e:	465a      	movle	r2, fp
 800d380:	462f      	mov	r7, r5
 800d382:	46d9      	mov	r9, fp
 800d384:	bfcc      	ite	gt
 800d386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d38a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d38e:	464b      	mov	r3, r9
 800d390:	4652      	mov	r2, sl
 800d392:	4620      	mov	r0, r4
 800d394:	4639      	mov	r1, r7
 800d396:	f7f3 fa59 	bl	800084c <__aeabi_ddiv>
 800d39a:	ec41 0b10 	vmov	d0, r0, r1
 800d39e:	b005      	add	sp, #20
 800d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3a4 <__copybits>:
 800d3a4:	3901      	subs	r1, #1
 800d3a6:	b570      	push	{r4, r5, r6, lr}
 800d3a8:	1149      	asrs	r1, r1, #5
 800d3aa:	6914      	ldr	r4, [r2, #16]
 800d3ac:	3101      	adds	r1, #1
 800d3ae:	f102 0314 	add.w	r3, r2, #20
 800d3b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3ba:	1f05      	subs	r5, r0, #4
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	d30c      	bcc.n	800d3da <__copybits+0x36>
 800d3c0:	1aa3      	subs	r3, r4, r2
 800d3c2:	3b11      	subs	r3, #17
 800d3c4:	f023 0303 	bic.w	r3, r3, #3
 800d3c8:	3211      	adds	r2, #17
 800d3ca:	42a2      	cmp	r2, r4
 800d3cc:	bf88      	it	hi
 800d3ce:	2300      	movhi	r3, #0
 800d3d0:	4418      	add	r0, r3
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4288      	cmp	r0, r1
 800d3d6:	d305      	bcc.n	800d3e4 <__copybits+0x40>
 800d3d8:	bd70      	pop	{r4, r5, r6, pc}
 800d3da:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3de:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3e2:	e7eb      	b.n	800d3bc <__copybits+0x18>
 800d3e4:	f840 3b04 	str.w	r3, [r0], #4
 800d3e8:	e7f4      	b.n	800d3d4 <__copybits+0x30>

0800d3ea <__any_on>:
 800d3ea:	f100 0214 	add.w	r2, r0, #20
 800d3ee:	6900      	ldr	r0, [r0, #16]
 800d3f0:	114b      	asrs	r3, r1, #5
 800d3f2:	4298      	cmp	r0, r3
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	db11      	blt.n	800d41c <__any_on+0x32>
 800d3f8:	dd0a      	ble.n	800d410 <__any_on+0x26>
 800d3fa:	f011 011f 	ands.w	r1, r1, #31
 800d3fe:	d007      	beq.n	800d410 <__any_on+0x26>
 800d400:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d404:	fa24 f001 	lsr.w	r0, r4, r1
 800d408:	fa00 f101 	lsl.w	r1, r0, r1
 800d40c:	428c      	cmp	r4, r1
 800d40e:	d10b      	bne.n	800d428 <__any_on+0x3e>
 800d410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d414:	4293      	cmp	r3, r2
 800d416:	d803      	bhi.n	800d420 <__any_on+0x36>
 800d418:	2000      	movs	r0, #0
 800d41a:	bd10      	pop	{r4, pc}
 800d41c:	4603      	mov	r3, r0
 800d41e:	e7f7      	b.n	800d410 <__any_on+0x26>
 800d420:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d424:	2900      	cmp	r1, #0
 800d426:	d0f5      	beq.n	800d414 <__any_on+0x2a>
 800d428:	2001      	movs	r0, #1
 800d42a:	e7f6      	b.n	800d41a <__any_on+0x30>

0800d42c <_strtol_l.constprop.0>:
 800d42c:	2b24      	cmp	r3, #36	@ 0x24
 800d42e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d432:	4686      	mov	lr, r0
 800d434:	4690      	mov	r8, r2
 800d436:	d801      	bhi.n	800d43c <_strtol_l.constprop.0+0x10>
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d106      	bne.n	800d44a <_strtol_l.constprop.0+0x1e>
 800d43c:	f7fe f842 	bl	800b4c4 <__errno>
 800d440:	2316      	movs	r3, #22
 800d442:	6003      	str	r3, [r0, #0]
 800d444:	2000      	movs	r0, #0
 800d446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d44a:	4834      	ldr	r0, [pc, #208]	@ (800d51c <_strtol_l.constprop.0+0xf0>)
 800d44c:	460d      	mov	r5, r1
 800d44e:	462a      	mov	r2, r5
 800d450:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d454:	5d06      	ldrb	r6, [r0, r4]
 800d456:	f016 0608 	ands.w	r6, r6, #8
 800d45a:	d1f8      	bne.n	800d44e <_strtol_l.constprop.0+0x22>
 800d45c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d45e:	d12d      	bne.n	800d4bc <_strtol_l.constprop.0+0x90>
 800d460:	782c      	ldrb	r4, [r5, #0]
 800d462:	2601      	movs	r6, #1
 800d464:	1c95      	adds	r5, r2, #2
 800d466:	f033 0210 	bics.w	r2, r3, #16
 800d46a:	d109      	bne.n	800d480 <_strtol_l.constprop.0+0x54>
 800d46c:	2c30      	cmp	r4, #48	@ 0x30
 800d46e:	d12a      	bne.n	800d4c6 <_strtol_l.constprop.0+0x9a>
 800d470:	782a      	ldrb	r2, [r5, #0]
 800d472:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d476:	2a58      	cmp	r2, #88	@ 0x58
 800d478:	d125      	bne.n	800d4c6 <_strtol_l.constprop.0+0x9a>
 800d47a:	786c      	ldrb	r4, [r5, #1]
 800d47c:	2310      	movs	r3, #16
 800d47e:	3502      	adds	r5, #2
 800d480:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d484:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d488:	2200      	movs	r2, #0
 800d48a:	fbbc f9f3 	udiv	r9, ip, r3
 800d48e:	4610      	mov	r0, r2
 800d490:	fb03 ca19 	mls	sl, r3, r9, ip
 800d494:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d498:	2f09      	cmp	r7, #9
 800d49a:	d81b      	bhi.n	800d4d4 <_strtol_l.constprop.0+0xa8>
 800d49c:	463c      	mov	r4, r7
 800d49e:	42a3      	cmp	r3, r4
 800d4a0:	dd27      	ble.n	800d4f2 <_strtol_l.constprop.0+0xc6>
 800d4a2:	1c57      	adds	r7, r2, #1
 800d4a4:	d007      	beq.n	800d4b6 <_strtol_l.constprop.0+0x8a>
 800d4a6:	4581      	cmp	r9, r0
 800d4a8:	d320      	bcc.n	800d4ec <_strtol_l.constprop.0+0xc0>
 800d4aa:	d101      	bne.n	800d4b0 <_strtol_l.constprop.0+0x84>
 800d4ac:	45a2      	cmp	sl, r4
 800d4ae:	db1d      	blt.n	800d4ec <_strtol_l.constprop.0+0xc0>
 800d4b0:	fb00 4003 	mla	r0, r0, r3, r4
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4ba:	e7eb      	b.n	800d494 <_strtol_l.constprop.0+0x68>
 800d4bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d4be:	bf04      	itt	eq
 800d4c0:	782c      	ldrbeq	r4, [r5, #0]
 800d4c2:	1c95      	addeq	r5, r2, #2
 800d4c4:	e7cf      	b.n	800d466 <_strtol_l.constprop.0+0x3a>
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1da      	bne.n	800d480 <_strtol_l.constprop.0+0x54>
 800d4ca:	2c30      	cmp	r4, #48	@ 0x30
 800d4cc:	bf0c      	ite	eq
 800d4ce:	2308      	moveq	r3, #8
 800d4d0:	230a      	movne	r3, #10
 800d4d2:	e7d5      	b.n	800d480 <_strtol_l.constprop.0+0x54>
 800d4d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d4d8:	2f19      	cmp	r7, #25
 800d4da:	d801      	bhi.n	800d4e0 <_strtol_l.constprop.0+0xb4>
 800d4dc:	3c37      	subs	r4, #55	@ 0x37
 800d4de:	e7de      	b.n	800d49e <_strtol_l.constprop.0+0x72>
 800d4e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d4e4:	2f19      	cmp	r7, #25
 800d4e6:	d804      	bhi.n	800d4f2 <_strtol_l.constprop.0+0xc6>
 800d4e8:	3c57      	subs	r4, #87	@ 0x57
 800d4ea:	e7d8      	b.n	800d49e <_strtol_l.constprop.0+0x72>
 800d4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f0:	e7e1      	b.n	800d4b6 <_strtol_l.constprop.0+0x8a>
 800d4f2:	1c53      	adds	r3, r2, #1
 800d4f4:	d108      	bne.n	800d508 <_strtol_l.constprop.0+0xdc>
 800d4f6:	2322      	movs	r3, #34	@ 0x22
 800d4f8:	f8ce 3000 	str.w	r3, [lr]
 800d4fc:	4660      	mov	r0, ip
 800d4fe:	f1b8 0f00 	cmp.w	r8, #0
 800d502:	d0a0      	beq.n	800d446 <_strtol_l.constprop.0+0x1a>
 800d504:	1e69      	subs	r1, r5, #1
 800d506:	e006      	b.n	800d516 <_strtol_l.constprop.0+0xea>
 800d508:	b106      	cbz	r6, 800d50c <_strtol_l.constprop.0+0xe0>
 800d50a:	4240      	negs	r0, r0
 800d50c:	f1b8 0f00 	cmp.w	r8, #0
 800d510:	d099      	beq.n	800d446 <_strtol_l.constprop.0+0x1a>
 800d512:	2a00      	cmp	r2, #0
 800d514:	d1f6      	bne.n	800d504 <_strtol_l.constprop.0+0xd8>
 800d516:	f8c8 1000 	str.w	r1, [r8]
 800d51a:	e794      	b.n	800d446 <_strtol_l.constprop.0+0x1a>
 800d51c:	0800f951 	.word	0x0800f951

0800d520 <_strtol_r>:
 800d520:	f7ff bf84 	b.w	800d42c <_strtol_l.constprop.0>

0800d524 <__ascii_wctomb>:
 800d524:	4603      	mov	r3, r0
 800d526:	4608      	mov	r0, r1
 800d528:	b141      	cbz	r1, 800d53c <__ascii_wctomb+0x18>
 800d52a:	2aff      	cmp	r2, #255	@ 0xff
 800d52c:	d904      	bls.n	800d538 <__ascii_wctomb+0x14>
 800d52e:	228a      	movs	r2, #138	@ 0x8a
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	f04f 30ff 	mov.w	r0, #4294967295
 800d536:	4770      	bx	lr
 800d538:	700a      	strb	r2, [r1, #0]
 800d53a:	2001      	movs	r0, #1
 800d53c:	4770      	bx	lr

0800d53e <__ssputs_r>:
 800d53e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d542:	688e      	ldr	r6, [r1, #8]
 800d544:	461f      	mov	r7, r3
 800d546:	42be      	cmp	r6, r7
 800d548:	680b      	ldr	r3, [r1, #0]
 800d54a:	4682      	mov	sl, r0
 800d54c:	460c      	mov	r4, r1
 800d54e:	4690      	mov	r8, r2
 800d550:	d82d      	bhi.n	800d5ae <__ssputs_r+0x70>
 800d552:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d556:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d55a:	d026      	beq.n	800d5aa <__ssputs_r+0x6c>
 800d55c:	6965      	ldr	r5, [r4, #20]
 800d55e:	6909      	ldr	r1, [r1, #16]
 800d560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d564:	eba3 0901 	sub.w	r9, r3, r1
 800d568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d56c:	1c7b      	adds	r3, r7, #1
 800d56e:	444b      	add	r3, r9
 800d570:	106d      	asrs	r5, r5, #1
 800d572:	429d      	cmp	r5, r3
 800d574:	bf38      	it	cc
 800d576:	461d      	movcc	r5, r3
 800d578:	0553      	lsls	r3, r2, #21
 800d57a:	d527      	bpl.n	800d5cc <__ssputs_r+0x8e>
 800d57c:	4629      	mov	r1, r5
 800d57e:	f7ff fa05 	bl	800c98c <_malloc_r>
 800d582:	4606      	mov	r6, r0
 800d584:	b360      	cbz	r0, 800d5e0 <__ssputs_r+0xa2>
 800d586:	6921      	ldr	r1, [r4, #16]
 800d588:	464a      	mov	r2, r9
 800d58a:	f7fd ffc8 	bl	800b51e <memcpy>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d598:	81a3      	strh	r3, [r4, #12]
 800d59a:	6126      	str	r6, [r4, #16]
 800d59c:	6165      	str	r5, [r4, #20]
 800d59e:	444e      	add	r6, r9
 800d5a0:	eba5 0509 	sub.w	r5, r5, r9
 800d5a4:	6026      	str	r6, [r4, #0]
 800d5a6:	60a5      	str	r5, [r4, #8]
 800d5a8:	463e      	mov	r6, r7
 800d5aa:	42be      	cmp	r6, r7
 800d5ac:	d900      	bls.n	800d5b0 <__ssputs_r+0x72>
 800d5ae:	463e      	mov	r6, r7
 800d5b0:	6820      	ldr	r0, [r4, #0]
 800d5b2:	4632      	mov	r2, r6
 800d5b4:	4641      	mov	r1, r8
 800d5b6:	f000 fb7b 	bl	800dcb0 <memmove>
 800d5ba:	68a3      	ldr	r3, [r4, #8]
 800d5bc:	1b9b      	subs	r3, r3, r6
 800d5be:	60a3      	str	r3, [r4, #8]
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	4433      	add	r3, r6
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5cc:	462a      	mov	r2, r5
 800d5ce:	f000 fbd6 	bl	800dd7e <_realloc_r>
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d1e0      	bne.n	800d59a <__ssputs_r+0x5c>
 800d5d8:	6921      	ldr	r1, [r4, #16]
 800d5da:	4650      	mov	r0, sl
 800d5dc:	f7fe fe28 	bl	800c230 <_free_r>
 800d5e0:	230c      	movs	r3, #12
 800d5e2:	f8ca 3000 	str.w	r3, [sl]
 800d5e6:	89a3      	ldrh	r3, [r4, #12]
 800d5e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ec:	81a3      	strh	r3, [r4, #12]
 800d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f2:	e7e9      	b.n	800d5c8 <__ssputs_r+0x8a>

0800d5f4 <_svfiprintf_r>:
 800d5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	4698      	mov	r8, r3
 800d5fa:	898b      	ldrh	r3, [r1, #12]
 800d5fc:	061b      	lsls	r3, r3, #24
 800d5fe:	b09d      	sub	sp, #116	@ 0x74
 800d600:	4607      	mov	r7, r0
 800d602:	460d      	mov	r5, r1
 800d604:	4614      	mov	r4, r2
 800d606:	d510      	bpl.n	800d62a <_svfiprintf_r+0x36>
 800d608:	690b      	ldr	r3, [r1, #16]
 800d60a:	b973      	cbnz	r3, 800d62a <_svfiprintf_r+0x36>
 800d60c:	2140      	movs	r1, #64	@ 0x40
 800d60e:	f7ff f9bd 	bl	800c98c <_malloc_r>
 800d612:	6028      	str	r0, [r5, #0]
 800d614:	6128      	str	r0, [r5, #16]
 800d616:	b930      	cbnz	r0, 800d626 <_svfiprintf_r+0x32>
 800d618:	230c      	movs	r3, #12
 800d61a:	603b      	str	r3, [r7, #0]
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	b01d      	add	sp, #116	@ 0x74
 800d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d626:	2340      	movs	r3, #64	@ 0x40
 800d628:	616b      	str	r3, [r5, #20]
 800d62a:	2300      	movs	r3, #0
 800d62c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d62e:	2320      	movs	r3, #32
 800d630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d634:	f8cd 800c 	str.w	r8, [sp, #12]
 800d638:	2330      	movs	r3, #48	@ 0x30
 800d63a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7d8 <_svfiprintf_r+0x1e4>
 800d63e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d642:	f04f 0901 	mov.w	r9, #1
 800d646:	4623      	mov	r3, r4
 800d648:	469a      	mov	sl, r3
 800d64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d64e:	b10a      	cbz	r2, 800d654 <_svfiprintf_r+0x60>
 800d650:	2a25      	cmp	r2, #37	@ 0x25
 800d652:	d1f9      	bne.n	800d648 <_svfiprintf_r+0x54>
 800d654:	ebba 0b04 	subs.w	fp, sl, r4
 800d658:	d00b      	beq.n	800d672 <_svfiprintf_r+0x7e>
 800d65a:	465b      	mov	r3, fp
 800d65c:	4622      	mov	r2, r4
 800d65e:	4629      	mov	r1, r5
 800d660:	4638      	mov	r0, r7
 800d662:	f7ff ff6c 	bl	800d53e <__ssputs_r>
 800d666:	3001      	adds	r0, #1
 800d668:	f000 80a7 	beq.w	800d7ba <_svfiprintf_r+0x1c6>
 800d66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d66e:	445a      	add	r2, fp
 800d670:	9209      	str	r2, [sp, #36]	@ 0x24
 800d672:	f89a 3000 	ldrb.w	r3, [sl]
 800d676:	2b00      	cmp	r3, #0
 800d678:	f000 809f 	beq.w	800d7ba <_svfiprintf_r+0x1c6>
 800d67c:	2300      	movs	r3, #0
 800d67e:	f04f 32ff 	mov.w	r2, #4294967295
 800d682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d686:	f10a 0a01 	add.w	sl, sl, #1
 800d68a:	9304      	str	r3, [sp, #16]
 800d68c:	9307      	str	r3, [sp, #28]
 800d68e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d692:	931a      	str	r3, [sp, #104]	@ 0x68
 800d694:	4654      	mov	r4, sl
 800d696:	2205      	movs	r2, #5
 800d698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69c:	484e      	ldr	r0, [pc, #312]	@ (800d7d8 <_svfiprintf_r+0x1e4>)
 800d69e:	f7f2 fd97 	bl	80001d0 <memchr>
 800d6a2:	9a04      	ldr	r2, [sp, #16]
 800d6a4:	b9d8      	cbnz	r0, 800d6de <_svfiprintf_r+0xea>
 800d6a6:	06d0      	lsls	r0, r2, #27
 800d6a8:	bf44      	itt	mi
 800d6aa:	2320      	movmi	r3, #32
 800d6ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6b0:	0711      	lsls	r1, r2, #28
 800d6b2:	bf44      	itt	mi
 800d6b4:	232b      	movmi	r3, #43	@ 0x2b
 800d6b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d6be:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6c0:	d015      	beq.n	800d6ee <_svfiprintf_r+0xfa>
 800d6c2:	9a07      	ldr	r2, [sp, #28]
 800d6c4:	4654      	mov	r4, sl
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	f04f 0c0a 	mov.w	ip, #10
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6d2:	3b30      	subs	r3, #48	@ 0x30
 800d6d4:	2b09      	cmp	r3, #9
 800d6d6:	d94b      	bls.n	800d770 <_svfiprintf_r+0x17c>
 800d6d8:	b1b0      	cbz	r0, 800d708 <_svfiprintf_r+0x114>
 800d6da:	9207      	str	r2, [sp, #28]
 800d6dc:	e014      	b.n	800d708 <_svfiprintf_r+0x114>
 800d6de:	eba0 0308 	sub.w	r3, r0, r8
 800d6e2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	9304      	str	r3, [sp, #16]
 800d6ea:	46a2      	mov	sl, r4
 800d6ec:	e7d2      	b.n	800d694 <_svfiprintf_r+0xa0>
 800d6ee:	9b03      	ldr	r3, [sp, #12]
 800d6f0:	1d19      	adds	r1, r3, #4
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	9103      	str	r1, [sp, #12]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	bfbb      	ittet	lt
 800d6fa:	425b      	neglt	r3, r3
 800d6fc:	f042 0202 	orrlt.w	r2, r2, #2
 800d700:	9307      	strge	r3, [sp, #28]
 800d702:	9307      	strlt	r3, [sp, #28]
 800d704:	bfb8      	it	lt
 800d706:	9204      	strlt	r2, [sp, #16]
 800d708:	7823      	ldrb	r3, [r4, #0]
 800d70a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d70c:	d10a      	bne.n	800d724 <_svfiprintf_r+0x130>
 800d70e:	7863      	ldrb	r3, [r4, #1]
 800d710:	2b2a      	cmp	r3, #42	@ 0x2a
 800d712:	d132      	bne.n	800d77a <_svfiprintf_r+0x186>
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	1d1a      	adds	r2, r3, #4
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	9203      	str	r2, [sp, #12]
 800d71c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d720:	3402      	adds	r4, #2
 800d722:	9305      	str	r3, [sp, #20]
 800d724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7e8 <_svfiprintf_r+0x1f4>
 800d728:	7821      	ldrb	r1, [r4, #0]
 800d72a:	2203      	movs	r2, #3
 800d72c:	4650      	mov	r0, sl
 800d72e:	f7f2 fd4f 	bl	80001d0 <memchr>
 800d732:	b138      	cbz	r0, 800d744 <_svfiprintf_r+0x150>
 800d734:	9b04      	ldr	r3, [sp, #16]
 800d736:	eba0 000a 	sub.w	r0, r0, sl
 800d73a:	2240      	movs	r2, #64	@ 0x40
 800d73c:	4082      	lsls	r2, r0
 800d73e:	4313      	orrs	r3, r2
 800d740:	3401      	adds	r4, #1
 800d742:	9304      	str	r3, [sp, #16]
 800d744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d748:	4824      	ldr	r0, [pc, #144]	@ (800d7dc <_svfiprintf_r+0x1e8>)
 800d74a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d74e:	2206      	movs	r2, #6
 800d750:	f7f2 fd3e 	bl	80001d0 <memchr>
 800d754:	2800      	cmp	r0, #0
 800d756:	d036      	beq.n	800d7c6 <_svfiprintf_r+0x1d2>
 800d758:	4b21      	ldr	r3, [pc, #132]	@ (800d7e0 <_svfiprintf_r+0x1ec>)
 800d75a:	bb1b      	cbnz	r3, 800d7a4 <_svfiprintf_r+0x1b0>
 800d75c:	9b03      	ldr	r3, [sp, #12]
 800d75e:	3307      	adds	r3, #7
 800d760:	f023 0307 	bic.w	r3, r3, #7
 800d764:	3308      	adds	r3, #8
 800d766:	9303      	str	r3, [sp, #12]
 800d768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d76a:	4433      	add	r3, r6
 800d76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d76e:	e76a      	b.n	800d646 <_svfiprintf_r+0x52>
 800d770:	fb0c 3202 	mla	r2, ip, r2, r3
 800d774:	460c      	mov	r4, r1
 800d776:	2001      	movs	r0, #1
 800d778:	e7a8      	b.n	800d6cc <_svfiprintf_r+0xd8>
 800d77a:	2300      	movs	r3, #0
 800d77c:	3401      	adds	r4, #1
 800d77e:	9305      	str	r3, [sp, #20]
 800d780:	4619      	mov	r1, r3
 800d782:	f04f 0c0a 	mov.w	ip, #10
 800d786:	4620      	mov	r0, r4
 800d788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d78c:	3a30      	subs	r2, #48	@ 0x30
 800d78e:	2a09      	cmp	r2, #9
 800d790:	d903      	bls.n	800d79a <_svfiprintf_r+0x1a6>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0c6      	beq.n	800d724 <_svfiprintf_r+0x130>
 800d796:	9105      	str	r1, [sp, #20]
 800d798:	e7c4      	b.n	800d724 <_svfiprintf_r+0x130>
 800d79a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d79e:	4604      	mov	r4, r0
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e7f0      	b.n	800d786 <_svfiprintf_r+0x192>
 800d7a4:	ab03      	add	r3, sp, #12
 800d7a6:	9300      	str	r3, [sp, #0]
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d7e4 <_svfiprintf_r+0x1f0>)
 800d7ac:	a904      	add	r1, sp, #16
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	f7fc fd88 	bl	800a2c4 <_printf_float>
 800d7b4:	1c42      	adds	r2, r0, #1
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	d1d6      	bne.n	800d768 <_svfiprintf_r+0x174>
 800d7ba:	89ab      	ldrh	r3, [r5, #12]
 800d7bc:	065b      	lsls	r3, r3, #25
 800d7be:	f53f af2d 	bmi.w	800d61c <_svfiprintf_r+0x28>
 800d7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7c4:	e72c      	b.n	800d620 <_svfiprintf_r+0x2c>
 800d7c6:	ab03      	add	r3, sp, #12
 800d7c8:	9300      	str	r3, [sp, #0]
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	4b05      	ldr	r3, [pc, #20]	@ (800d7e4 <_svfiprintf_r+0x1f0>)
 800d7ce:	a904      	add	r1, sp, #16
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7fd f80f 	bl	800a7f4 <_printf_i>
 800d7d6:	e7ed      	b.n	800d7b4 <_svfiprintf_r+0x1c0>
 800d7d8:	0800fa51 	.word	0x0800fa51
 800d7dc:	0800fa5b 	.word	0x0800fa5b
 800d7e0:	0800a2c5 	.word	0x0800a2c5
 800d7e4:	0800d53f 	.word	0x0800d53f
 800d7e8:	0800fa57 	.word	0x0800fa57

0800d7ec <__sfputc_r>:
 800d7ec:	6893      	ldr	r3, [r2, #8]
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	b410      	push	{r4}
 800d7f4:	6093      	str	r3, [r2, #8]
 800d7f6:	da08      	bge.n	800d80a <__sfputc_r+0x1e>
 800d7f8:	6994      	ldr	r4, [r2, #24]
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	db01      	blt.n	800d802 <__sfputc_r+0x16>
 800d7fe:	290a      	cmp	r1, #10
 800d800:	d103      	bne.n	800d80a <__sfputc_r+0x1e>
 800d802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d806:	f7fd bcf2 	b.w	800b1ee <__swbuf_r>
 800d80a:	6813      	ldr	r3, [r2, #0]
 800d80c:	1c58      	adds	r0, r3, #1
 800d80e:	6010      	str	r0, [r2, #0]
 800d810:	7019      	strb	r1, [r3, #0]
 800d812:	4608      	mov	r0, r1
 800d814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <__sfputs_r>:
 800d81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81c:	4606      	mov	r6, r0
 800d81e:	460f      	mov	r7, r1
 800d820:	4614      	mov	r4, r2
 800d822:	18d5      	adds	r5, r2, r3
 800d824:	42ac      	cmp	r4, r5
 800d826:	d101      	bne.n	800d82c <__sfputs_r+0x12>
 800d828:	2000      	movs	r0, #0
 800d82a:	e007      	b.n	800d83c <__sfputs_r+0x22>
 800d82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d830:	463a      	mov	r2, r7
 800d832:	4630      	mov	r0, r6
 800d834:	f7ff ffda 	bl	800d7ec <__sfputc_r>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d1f3      	bne.n	800d824 <__sfputs_r+0xa>
 800d83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d840 <_vfiprintf_r>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	460d      	mov	r5, r1
 800d846:	b09d      	sub	sp, #116	@ 0x74
 800d848:	4614      	mov	r4, r2
 800d84a:	4698      	mov	r8, r3
 800d84c:	4606      	mov	r6, r0
 800d84e:	b118      	cbz	r0, 800d858 <_vfiprintf_r+0x18>
 800d850:	6a03      	ldr	r3, [r0, #32]
 800d852:	b90b      	cbnz	r3, 800d858 <_vfiprintf_r+0x18>
 800d854:	f7fd fb8e 	bl	800af74 <__sinit>
 800d858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d85a:	07d9      	lsls	r1, r3, #31
 800d85c:	d405      	bmi.n	800d86a <_vfiprintf_r+0x2a>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	059a      	lsls	r2, r3, #22
 800d862:	d402      	bmi.n	800d86a <_vfiprintf_r+0x2a>
 800d864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d866:	f7fd fe58 	bl	800b51a <__retarget_lock_acquire_recursive>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	071b      	lsls	r3, r3, #28
 800d86e:	d501      	bpl.n	800d874 <_vfiprintf_r+0x34>
 800d870:	692b      	ldr	r3, [r5, #16]
 800d872:	b99b      	cbnz	r3, 800d89c <_vfiprintf_r+0x5c>
 800d874:	4629      	mov	r1, r5
 800d876:	4630      	mov	r0, r6
 800d878:	f7fd fcf8 	bl	800b26c <__swsetup_r>
 800d87c:	b170      	cbz	r0, 800d89c <_vfiprintf_r+0x5c>
 800d87e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d880:	07dc      	lsls	r4, r3, #31
 800d882:	d504      	bpl.n	800d88e <_vfiprintf_r+0x4e>
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	b01d      	add	sp, #116	@ 0x74
 800d88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	0598      	lsls	r0, r3, #22
 800d892:	d4f7      	bmi.n	800d884 <_vfiprintf_r+0x44>
 800d894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d896:	f7fd fe41 	bl	800b51c <__retarget_lock_release_recursive>
 800d89a:	e7f3      	b.n	800d884 <_vfiprintf_r+0x44>
 800d89c:	2300      	movs	r3, #0
 800d89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8a0:	2320      	movs	r3, #32
 800d8a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8aa:	2330      	movs	r3, #48	@ 0x30
 800d8ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da5c <_vfiprintf_r+0x21c>
 800d8b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8b4:	f04f 0901 	mov.w	r9, #1
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c0:	b10a      	cbz	r2, 800d8c6 <_vfiprintf_r+0x86>
 800d8c2:	2a25      	cmp	r2, #37	@ 0x25
 800d8c4:	d1f9      	bne.n	800d8ba <_vfiprintf_r+0x7a>
 800d8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8ca:	d00b      	beq.n	800d8e4 <_vfiprintf_r+0xa4>
 800d8cc:	465b      	mov	r3, fp
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ffa1 	bl	800d81a <__sfputs_r>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f000 80a7 	beq.w	800da2c <_vfiprintf_r+0x1ec>
 800d8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8e0:	445a      	add	r2, fp
 800d8e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f000 809f 	beq.w	800da2c <_vfiprintf_r+0x1ec>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8f8:	f10a 0a01 	add.w	sl, sl, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	9307      	str	r3, [sp, #28]
 800d900:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d904:	931a      	str	r3, [sp, #104]	@ 0x68
 800d906:	4654      	mov	r4, sl
 800d908:	2205      	movs	r2, #5
 800d90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d90e:	4853      	ldr	r0, [pc, #332]	@ (800da5c <_vfiprintf_r+0x21c>)
 800d910:	f7f2 fc5e 	bl	80001d0 <memchr>
 800d914:	9a04      	ldr	r2, [sp, #16]
 800d916:	b9d8      	cbnz	r0, 800d950 <_vfiprintf_r+0x110>
 800d918:	06d1      	lsls	r1, r2, #27
 800d91a:	bf44      	itt	mi
 800d91c:	2320      	movmi	r3, #32
 800d91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d922:	0713      	lsls	r3, r2, #28
 800d924:	bf44      	itt	mi
 800d926:	232b      	movmi	r3, #43	@ 0x2b
 800d928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d92c:	f89a 3000 	ldrb.w	r3, [sl]
 800d930:	2b2a      	cmp	r3, #42	@ 0x2a
 800d932:	d015      	beq.n	800d960 <_vfiprintf_r+0x120>
 800d934:	9a07      	ldr	r2, [sp, #28]
 800d936:	4654      	mov	r4, sl
 800d938:	2000      	movs	r0, #0
 800d93a:	f04f 0c0a 	mov.w	ip, #10
 800d93e:	4621      	mov	r1, r4
 800d940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d944:	3b30      	subs	r3, #48	@ 0x30
 800d946:	2b09      	cmp	r3, #9
 800d948:	d94b      	bls.n	800d9e2 <_vfiprintf_r+0x1a2>
 800d94a:	b1b0      	cbz	r0, 800d97a <_vfiprintf_r+0x13a>
 800d94c:	9207      	str	r2, [sp, #28]
 800d94e:	e014      	b.n	800d97a <_vfiprintf_r+0x13a>
 800d950:	eba0 0308 	sub.w	r3, r0, r8
 800d954:	fa09 f303 	lsl.w	r3, r9, r3
 800d958:	4313      	orrs	r3, r2
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	46a2      	mov	sl, r4
 800d95e:	e7d2      	b.n	800d906 <_vfiprintf_r+0xc6>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	1d19      	adds	r1, r3, #4
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	9103      	str	r1, [sp, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	bfbb      	ittet	lt
 800d96c:	425b      	neglt	r3, r3
 800d96e:	f042 0202 	orrlt.w	r2, r2, #2
 800d972:	9307      	strge	r3, [sp, #28]
 800d974:	9307      	strlt	r3, [sp, #28]
 800d976:	bfb8      	it	lt
 800d978:	9204      	strlt	r2, [sp, #16]
 800d97a:	7823      	ldrb	r3, [r4, #0]
 800d97c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d97e:	d10a      	bne.n	800d996 <_vfiprintf_r+0x156>
 800d980:	7863      	ldrb	r3, [r4, #1]
 800d982:	2b2a      	cmp	r3, #42	@ 0x2a
 800d984:	d132      	bne.n	800d9ec <_vfiprintf_r+0x1ac>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	1d1a      	adds	r2, r3, #4
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	9203      	str	r2, [sp, #12]
 800d98e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d992:	3402      	adds	r4, #2
 800d994:	9305      	str	r3, [sp, #20]
 800d996:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da6c <_vfiprintf_r+0x22c>
 800d99a:	7821      	ldrb	r1, [r4, #0]
 800d99c:	2203      	movs	r2, #3
 800d99e:	4650      	mov	r0, sl
 800d9a0:	f7f2 fc16 	bl	80001d0 <memchr>
 800d9a4:	b138      	cbz	r0, 800d9b6 <_vfiprintf_r+0x176>
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	eba0 000a 	sub.w	r0, r0, sl
 800d9ac:	2240      	movs	r2, #64	@ 0x40
 800d9ae:	4082      	lsls	r2, r0
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	3401      	adds	r4, #1
 800d9b4:	9304      	str	r3, [sp, #16]
 800d9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ba:	4829      	ldr	r0, [pc, #164]	@ (800da60 <_vfiprintf_r+0x220>)
 800d9bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9c0:	2206      	movs	r2, #6
 800d9c2:	f7f2 fc05 	bl	80001d0 <memchr>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d03f      	beq.n	800da4a <_vfiprintf_r+0x20a>
 800d9ca:	4b26      	ldr	r3, [pc, #152]	@ (800da64 <_vfiprintf_r+0x224>)
 800d9cc:	bb1b      	cbnz	r3, 800da16 <_vfiprintf_r+0x1d6>
 800d9ce:	9b03      	ldr	r3, [sp, #12]
 800d9d0:	3307      	adds	r3, #7
 800d9d2:	f023 0307 	bic.w	r3, r3, #7
 800d9d6:	3308      	adds	r3, #8
 800d9d8:	9303      	str	r3, [sp, #12]
 800d9da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9dc:	443b      	add	r3, r7
 800d9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9e0:	e76a      	b.n	800d8b8 <_vfiprintf_r+0x78>
 800d9e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	2001      	movs	r0, #1
 800d9ea:	e7a8      	b.n	800d93e <_vfiprintf_r+0xfe>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	3401      	adds	r4, #1
 800d9f0:	9305      	str	r3, [sp, #20]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	f04f 0c0a 	mov.w	ip, #10
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9fe:	3a30      	subs	r2, #48	@ 0x30
 800da00:	2a09      	cmp	r2, #9
 800da02:	d903      	bls.n	800da0c <_vfiprintf_r+0x1cc>
 800da04:	2b00      	cmp	r3, #0
 800da06:	d0c6      	beq.n	800d996 <_vfiprintf_r+0x156>
 800da08:	9105      	str	r1, [sp, #20]
 800da0a:	e7c4      	b.n	800d996 <_vfiprintf_r+0x156>
 800da0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800da10:	4604      	mov	r4, r0
 800da12:	2301      	movs	r3, #1
 800da14:	e7f0      	b.n	800d9f8 <_vfiprintf_r+0x1b8>
 800da16:	ab03      	add	r3, sp, #12
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	462a      	mov	r2, r5
 800da1c:	4b12      	ldr	r3, [pc, #72]	@ (800da68 <_vfiprintf_r+0x228>)
 800da1e:	a904      	add	r1, sp, #16
 800da20:	4630      	mov	r0, r6
 800da22:	f7fc fc4f 	bl	800a2c4 <_printf_float>
 800da26:	4607      	mov	r7, r0
 800da28:	1c78      	adds	r0, r7, #1
 800da2a:	d1d6      	bne.n	800d9da <_vfiprintf_r+0x19a>
 800da2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da2e:	07d9      	lsls	r1, r3, #31
 800da30:	d405      	bmi.n	800da3e <_vfiprintf_r+0x1fe>
 800da32:	89ab      	ldrh	r3, [r5, #12]
 800da34:	059a      	lsls	r2, r3, #22
 800da36:	d402      	bmi.n	800da3e <_vfiprintf_r+0x1fe>
 800da38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da3a:	f7fd fd6f 	bl	800b51c <__retarget_lock_release_recursive>
 800da3e:	89ab      	ldrh	r3, [r5, #12]
 800da40:	065b      	lsls	r3, r3, #25
 800da42:	f53f af1f 	bmi.w	800d884 <_vfiprintf_r+0x44>
 800da46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da48:	e71e      	b.n	800d888 <_vfiprintf_r+0x48>
 800da4a:	ab03      	add	r3, sp, #12
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	462a      	mov	r2, r5
 800da50:	4b05      	ldr	r3, [pc, #20]	@ (800da68 <_vfiprintf_r+0x228>)
 800da52:	a904      	add	r1, sp, #16
 800da54:	4630      	mov	r0, r6
 800da56:	f7fc fecd 	bl	800a7f4 <_printf_i>
 800da5a:	e7e4      	b.n	800da26 <_vfiprintf_r+0x1e6>
 800da5c:	0800fa51 	.word	0x0800fa51
 800da60:	0800fa5b 	.word	0x0800fa5b
 800da64:	0800a2c5 	.word	0x0800a2c5
 800da68:	0800d81b 	.word	0x0800d81b
 800da6c:	0800fa57 	.word	0x0800fa57

0800da70 <__sflush_r>:
 800da70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da78:	0716      	lsls	r6, r2, #28
 800da7a:	4605      	mov	r5, r0
 800da7c:	460c      	mov	r4, r1
 800da7e:	d454      	bmi.n	800db2a <__sflush_r+0xba>
 800da80:	684b      	ldr	r3, [r1, #4]
 800da82:	2b00      	cmp	r3, #0
 800da84:	dc02      	bgt.n	800da8c <__sflush_r+0x1c>
 800da86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da88:	2b00      	cmp	r3, #0
 800da8a:	dd48      	ble.n	800db1e <__sflush_r+0xae>
 800da8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da8e:	2e00      	cmp	r6, #0
 800da90:	d045      	beq.n	800db1e <__sflush_r+0xae>
 800da92:	2300      	movs	r3, #0
 800da94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da98:	682f      	ldr	r7, [r5, #0]
 800da9a:	6a21      	ldr	r1, [r4, #32]
 800da9c:	602b      	str	r3, [r5, #0]
 800da9e:	d030      	beq.n	800db02 <__sflush_r+0x92>
 800daa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	0759      	lsls	r1, r3, #29
 800daa6:	d505      	bpl.n	800dab4 <__sflush_r+0x44>
 800daa8:	6863      	ldr	r3, [r4, #4]
 800daaa:	1ad2      	subs	r2, r2, r3
 800daac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800daae:	b10b      	cbz	r3, 800dab4 <__sflush_r+0x44>
 800dab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dab2:	1ad2      	subs	r2, r2, r3
 800dab4:	2300      	movs	r3, #0
 800dab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dab8:	6a21      	ldr	r1, [r4, #32]
 800daba:	4628      	mov	r0, r5
 800dabc:	47b0      	blx	r6
 800dabe:	1c43      	adds	r3, r0, #1
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	d106      	bne.n	800dad2 <__sflush_r+0x62>
 800dac4:	6829      	ldr	r1, [r5, #0]
 800dac6:	291d      	cmp	r1, #29
 800dac8:	d82b      	bhi.n	800db22 <__sflush_r+0xb2>
 800daca:	4a2a      	ldr	r2, [pc, #168]	@ (800db74 <__sflush_r+0x104>)
 800dacc:	410a      	asrs	r2, r1
 800dace:	07d6      	lsls	r6, r2, #31
 800dad0:	d427      	bmi.n	800db22 <__sflush_r+0xb2>
 800dad2:	2200      	movs	r2, #0
 800dad4:	6062      	str	r2, [r4, #4]
 800dad6:	04d9      	lsls	r1, r3, #19
 800dad8:	6922      	ldr	r2, [r4, #16]
 800dada:	6022      	str	r2, [r4, #0]
 800dadc:	d504      	bpl.n	800dae8 <__sflush_r+0x78>
 800dade:	1c42      	adds	r2, r0, #1
 800dae0:	d101      	bne.n	800dae6 <__sflush_r+0x76>
 800dae2:	682b      	ldr	r3, [r5, #0]
 800dae4:	b903      	cbnz	r3, 800dae8 <__sflush_r+0x78>
 800dae6:	6560      	str	r0, [r4, #84]	@ 0x54
 800dae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800daea:	602f      	str	r7, [r5, #0]
 800daec:	b1b9      	cbz	r1, 800db1e <__sflush_r+0xae>
 800daee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800daf2:	4299      	cmp	r1, r3
 800daf4:	d002      	beq.n	800dafc <__sflush_r+0x8c>
 800daf6:	4628      	mov	r0, r5
 800daf8:	f7fe fb9a 	bl	800c230 <_free_r>
 800dafc:	2300      	movs	r3, #0
 800dafe:	6363      	str	r3, [r4, #52]	@ 0x34
 800db00:	e00d      	b.n	800db1e <__sflush_r+0xae>
 800db02:	2301      	movs	r3, #1
 800db04:	4628      	mov	r0, r5
 800db06:	47b0      	blx	r6
 800db08:	4602      	mov	r2, r0
 800db0a:	1c50      	adds	r0, r2, #1
 800db0c:	d1c9      	bne.n	800daa2 <__sflush_r+0x32>
 800db0e:	682b      	ldr	r3, [r5, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d0c6      	beq.n	800daa2 <__sflush_r+0x32>
 800db14:	2b1d      	cmp	r3, #29
 800db16:	d001      	beq.n	800db1c <__sflush_r+0xac>
 800db18:	2b16      	cmp	r3, #22
 800db1a:	d11e      	bne.n	800db5a <__sflush_r+0xea>
 800db1c:	602f      	str	r7, [r5, #0]
 800db1e:	2000      	movs	r0, #0
 800db20:	e022      	b.n	800db68 <__sflush_r+0xf8>
 800db22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db26:	b21b      	sxth	r3, r3
 800db28:	e01b      	b.n	800db62 <__sflush_r+0xf2>
 800db2a:	690f      	ldr	r7, [r1, #16]
 800db2c:	2f00      	cmp	r7, #0
 800db2e:	d0f6      	beq.n	800db1e <__sflush_r+0xae>
 800db30:	0793      	lsls	r3, r2, #30
 800db32:	680e      	ldr	r6, [r1, #0]
 800db34:	bf08      	it	eq
 800db36:	694b      	ldreq	r3, [r1, #20]
 800db38:	600f      	str	r7, [r1, #0]
 800db3a:	bf18      	it	ne
 800db3c:	2300      	movne	r3, #0
 800db3e:	eba6 0807 	sub.w	r8, r6, r7
 800db42:	608b      	str	r3, [r1, #8]
 800db44:	f1b8 0f00 	cmp.w	r8, #0
 800db48:	dde9      	ble.n	800db1e <__sflush_r+0xae>
 800db4a:	6a21      	ldr	r1, [r4, #32]
 800db4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db4e:	4643      	mov	r3, r8
 800db50:	463a      	mov	r2, r7
 800db52:	4628      	mov	r0, r5
 800db54:	47b0      	blx	r6
 800db56:	2800      	cmp	r0, #0
 800db58:	dc08      	bgt.n	800db6c <__sflush_r+0xfc>
 800db5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	f04f 30ff 	mov.w	r0, #4294967295
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	4407      	add	r7, r0
 800db6e:	eba8 0800 	sub.w	r8, r8, r0
 800db72:	e7e7      	b.n	800db44 <__sflush_r+0xd4>
 800db74:	dfbffffe 	.word	0xdfbffffe

0800db78 <_fflush_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	690b      	ldr	r3, [r1, #16]
 800db7c:	4605      	mov	r5, r0
 800db7e:	460c      	mov	r4, r1
 800db80:	b913      	cbnz	r3, 800db88 <_fflush_r+0x10>
 800db82:	2500      	movs	r5, #0
 800db84:	4628      	mov	r0, r5
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	b118      	cbz	r0, 800db92 <_fflush_r+0x1a>
 800db8a:	6a03      	ldr	r3, [r0, #32]
 800db8c:	b90b      	cbnz	r3, 800db92 <_fflush_r+0x1a>
 800db8e:	f7fd f9f1 	bl	800af74 <__sinit>
 800db92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d0f3      	beq.n	800db82 <_fflush_r+0xa>
 800db9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db9c:	07d0      	lsls	r0, r2, #31
 800db9e:	d404      	bmi.n	800dbaa <_fflush_r+0x32>
 800dba0:	0599      	lsls	r1, r3, #22
 800dba2:	d402      	bmi.n	800dbaa <_fflush_r+0x32>
 800dba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dba6:	f7fd fcb8 	bl	800b51a <__retarget_lock_acquire_recursive>
 800dbaa:	4628      	mov	r0, r5
 800dbac:	4621      	mov	r1, r4
 800dbae:	f7ff ff5f 	bl	800da70 <__sflush_r>
 800dbb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbb4:	07da      	lsls	r2, r3, #31
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	d4e4      	bmi.n	800db84 <_fflush_r+0xc>
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	059b      	lsls	r3, r3, #22
 800dbbe:	d4e1      	bmi.n	800db84 <_fflush_r+0xc>
 800dbc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbc2:	f7fd fcab 	bl	800b51c <__retarget_lock_release_recursive>
 800dbc6:	e7dd      	b.n	800db84 <_fflush_r+0xc>

0800dbc8 <fiprintf>:
 800dbc8:	b40e      	push	{r1, r2, r3}
 800dbca:	b503      	push	{r0, r1, lr}
 800dbcc:	4601      	mov	r1, r0
 800dbce:	ab03      	add	r3, sp, #12
 800dbd0:	4805      	ldr	r0, [pc, #20]	@ (800dbe8 <fiprintf+0x20>)
 800dbd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbd6:	6800      	ldr	r0, [r0, #0]
 800dbd8:	9301      	str	r3, [sp, #4]
 800dbda:	f7ff fe31 	bl	800d840 <_vfiprintf_r>
 800dbde:	b002      	add	sp, #8
 800dbe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbe4:	b003      	add	sp, #12
 800dbe6:	4770      	bx	lr
 800dbe8:	2000021c 	.word	0x2000021c

0800dbec <__swhatbuf_r>:
 800dbec:	b570      	push	{r4, r5, r6, lr}
 800dbee:	460c      	mov	r4, r1
 800dbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf4:	2900      	cmp	r1, #0
 800dbf6:	b096      	sub	sp, #88	@ 0x58
 800dbf8:	4615      	mov	r5, r2
 800dbfa:	461e      	mov	r6, r3
 800dbfc:	da0d      	bge.n	800dc1a <__swhatbuf_r+0x2e>
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc04:	f04f 0100 	mov.w	r1, #0
 800dc08:	bf14      	ite	ne
 800dc0a:	2340      	movne	r3, #64	@ 0x40
 800dc0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc10:	2000      	movs	r0, #0
 800dc12:	6031      	str	r1, [r6, #0]
 800dc14:	602b      	str	r3, [r5, #0]
 800dc16:	b016      	add	sp, #88	@ 0x58
 800dc18:	bd70      	pop	{r4, r5, r6, pc}
 800dc1a:	466a      	mov	r2, sp
 800dc1c:	f000 f862 	bl	800dce4 <_fstat_r>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	dbec      	blt.n	800dbfe <__swhatbuf_r+0x12>
 800dc24:	9901      	ldr	r1, [sp, #4]
 800dc26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc2e:	4259      	negs	r1, r3
 800dc30:	4159      	adcs	r1, r3
 800dc32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc36:	e7eb      	b.n	800dc10 <__swhatbuf_r+0x24>

0800dc38 <__smakebuf_r>:
 800dc38:	898b      	ldrh	r3, [r1, #12]
 800dc3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc3c:	079d      	lsls	r5, r3, #30
 800dc3e:	4606      	mov	r6, r0
 800dc40:	460c      	mov	r4, r1
 800dc42:	d507      	bpl.n	800dc54 <__smakebuf_r+0x1c>
 800dc44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	6123      	str	r3, [r4, #16]
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	6163      	str	r3, [r4, #20]
 800dc50:	b003      	add	sp, #12
 800dc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc54:	ab01      	add	r3, sp, #4
 800dc56:	466a      	mov	r2, sp
 800dc58:	f7ff ffc8 	bl	800dbec <__swhatbuf_r>
 800dc5c:	9f00      	ldr	r7, [sp, #0]
 800dc5e:	4605      	mov	r5, r0
 800dc60:	4639      	mov	r1, r7
 800dc62:	4630      	mov	r0, r6
 800dc64:	f7fe fe92 	bl	800c98c <_malloc_r>
 800dc68:	b948      	cbnz	r0, 800dc7e <__smakebuf_r+0x46>
 800dc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc6e:	059a      	lsls	r2, r3, #22
 800dc70:	d4ee      	bmi.n	800dc50 <__smakebuf_r+0x18>
 800dc72:	f023 0303 	bic.w	r3, r3, #3
 800dc76:	f043 0302 	orr.w	r3, r3, #2
 800dc7a:	81a3      	strh	r3, [r4, #12]
 800dc7c:	e7e2      	b.n	800dc44 <__smakebuf_r+0xc>
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	6020      	str	r0, [r4, #0]
 800dc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc86:	81a3      	strh	r3, [r4, #12]
 800dc88:	9b01      	ldr	r3, [sp, #4]
 800dc8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc8e:	b15b      	cbz	r3, 800dca8 <__smakebuf_r+0x70>
 800dc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc94:	4630      	mov	r0, r6
 800dc96:	f000 f837 	bl	800dd08 <_isatty_r>
 800dc9a:	b128      	cbz	r0, 800dca8 <__smakebuf_r+0x70>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	f023 0303 	bic.w	r3, r3, #3
 800dca2:	f043 0301 	orr.w	r3, r3, #1
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	431d      	orrs	r5, r3
 800dcac:	81a5      	strh	r5, [r4, #12]
 800dcae:	e7cf      	b.n	800dc50 <__smakebuf_r+0x18>

0800dcb0 <memmove>:
 800dcb0:	4288      	cmp	r0, r1
 800dcb2:	b510      	push	{r4, lr}
 800dcb4:	eb01 0402 	add.w	r4, r1, r2
 800dcb8:	d902      	bls.n	800dcc0 <memmove+0x10>
 800dcba:	4284      	cmp	r4, r0
 800dcbc:	4623      	mov	r3, r4
 800dcbe:	d807      	bhi.n	800dcd0 <memmove+0x20>
 800dcc0:	1e43      	subs	r3, r0, #1
 800dcc2:	42a1      	cmp	r1, r4
 800dcc4:	d008      	beq.n	800dcd8 <memmove+0x28>
 800dcc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcce:	e7f8      	b.n	800dcc2 <memmove+0x12>
 800dcd0:	4402      	add	r2, r0
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	428a      	cmp	r2, r1
 800dcd6:	d100      	bne.n	800dcda <memmove+0x2a>
 800dcd8:	bd10      	pop	{r4, pc}
 800dcda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dce2:	e7f7      	b.n	800dcd4 <memmove+0x24>

0800dce4 <_fstat_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4d07      	ldr	r5, [pc, #28]	@ (800dd04 <_fstat_r+0x20>)
 800dce8:	2300      	movs	r3, #0
 800dcea:	4604      	mov	r4, r0
 800dcec:	4608      	mov	r0, r1
 800dcee:	4611      	mov	r1, r2
 800dcf0:	602b      	str	r3, [r5, #0]
 800dcf2:	f7f7 ff9b 	bl	8005c2c <_fstat>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	d102      	bne.n	800dd00 <_fstat_r+0x1c>
 800dcfa:	682b      	ldr	r3, [r5, #0]
 800dcfc:	b103      	cbz	r3, 800dd00 <_fstat_r+0x1c>
 800dcfe:	6023      	str	r3, [r4, #0]
 800dd00:	bd38      	pop	{r3, r4, r5, pc}
 800dd02:	bf00      	nop
 800dd04:	200008f8 	.word	0x200008f8

0800dd08 <_isatty_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d06      	ldr	r5, [pc, #24]	@ (800dd24 <_isatty_r+0x1c>)
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4604      	mov	r4, r0
 800dd10:	4608      	mov	r0, r1
 800dd12:	602b      	str	r3, [r5, #0]
 800dd14:	f7f7 ff9a 	bl	8005c4c <_isatty>
 800dd18:	1c43      	adds	r3, r0, #1
 800dd1a:	d102      	bne.n	800dd22 <_isatty_r+0x1a>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	b103      	cbz	r3, 800dd22 <_isatty_r+0x1a>
 800dd20:	6023      	str	r3, [r4, #0]
 800dd22:	bd38      	pop	{r3, r4, r5, pc}
 800dd24:	200008f8 	.word	0x200008f8

0800dd28 <_sbrk_r>:
 800dd28:	b538      	push	{r3, r4, r5, lr}
 800dd2a:	4d06      	ldr	r5, [pc, #24]	@ (800dd44 <_sbrk_r+0x1c>)
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	4604      	mov	r4, r0
 800dd30:	4608      	mov	r0, r1
 800dd32:	602b      	str	r3, [r5, #0]
 800dd34:	f7f7 ffa2 	bl	8005c7c <_sbrk>
 800dd38:	1c43      	adds	r3, r0, #1
 800dd3a:	d102      	bne.n	800dd42 <_sbrk_r+0x1a>
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	b103      	cbz	r3, 800dd42 <_sbrk_r+0x1a>
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	bd38      	pop	{r3, r4, r5, pc}
 800dd44:	200008f8 	.word	0x200008f8

0800dd48 <abort>:
 800dd48:	b508      	push	{r3, lr}
 800dd4a:	2006      	movs	r0, #6
 800dd4c:	f000 f86e 	bl	800de2c <raise>
 800dd50:	2001      	movs	r0, #1
 800dd52:	f7f7 ff37 	bl	8005bc4 <_exit>

0800dd56 <_calloc_r>:
 800dd56:	b570      	push	{r4, r5, r6, lr}
 800dd58:	fba1 5402 	umull	r5, r4, r1, r2
 800dd5c:	b93c      	cbnz	r4, 800dd6e <_calloc_r+0x18>
 800dd5e:	4629      	mov	r1, r5
 800dd60:	f7fe fe14 	bl	800c98c <_malloc_r>
 800dd64:	4606      	mov	r6, r0
 800dd66:	b928      	cbnz	r0, 800dd74 <_calloc_r+0x1e>
 800dd68:	2600      	movs	r6, #0
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}
 800dd6e:	220c      	movs	r2, #12
 800dd70:	6002      	str	r2, [r0, #0]
 800dd72:	e7f9      	b.n	800dd68 <_calloc_r+0x12>
 800dd74:	462a      	mov	r2, r5
 800dd76:	4621      	mov	r1, r4
 800dd78:	f7fd face 	bl	800b318 <memset>
 800dd7c:	e7f5      	b.n	800dd6a <_calloc_r+0x14>

0800dd7e <_realloc_r>:
 800dd7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd82:	4680      	mov	r8, r0
 800dd84:	4615      	mov	r5, r2
 800dd86:	460c      	mov	r4, r1
 800dd88:	b921      	cbnz	r1, 800dd94 <_realloc_r+0x16>
 800dd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8e:	4611      	mov	r1, r2
 800dd90:	f7fe bdfc 	b.w	800c98c <_malloc_r>
 800dd94:	b92a      	cbnz	r2, 800dda2 <_realloc_r+0x24>
 800dd96:	f7fe fa4b 	bl	800c230 <_free_r>
 800dd9a:	2400      	movs	r4, #0
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda2:	f000 f85f 	bl	800de64 <_malloc_usable_size_r>
 800dda6:	4285      	cmp	r5, r0
 800dda8:	4606      	mov	r6, r0
 800ddaa:	d802      	bhi.n	800ddb2 <_realloc_r+0x34>
 800ddac:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ddb0:	d8f4      	bhi.n	800dd9c <_realloc_r+0x1e>
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	f7fe fde9 	bl	800c98c <_malloc_r>
 800ddba:	4607      	mov	r7, r0
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d0ec      	beq.n	800dd9a <_realloc_r+0x1c>
 800ddc0:	42b5      	cmp	r5, r6
 800ddc2:	462a      	mov	r2, r5
 800ddc4:	4621      	mov	r1, r4
 800ddc6:	bf28      	it	cs
 800ddc8:	4632      	movcs	r2, r6
 800ddca:	f7fd fba8 	bl	800b51e <memcpy>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	f7fe fa2d 	bl	800c230 <_free_r>
 800ddd6:	463c      	mov	r4, r7
 800ddd8:	e7e0      	b.n	800dd9c <_realloc_r+0x1e>

0800ddda <_raise_r>:
 800ddda:	291f      	cmp	r1, #31
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	4605      	mov	r5, r0
 800dde0:	460c      	mov	r4, r1
 800dde2:	d904      	bls.n	800ddee <_raise_r+0x14>
 800dde4:	2316      	movs	r3, #22
 800dde6:	6003      	str	r3, [r0, #0]
 800dde8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddec:	bd38      	pop	{r3, r4, r5, pc}
 800ddee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ddf0:	b112      	cbz	r2, 800ddf8 <_raise_r+0x1e>
 800ddf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddf6:	b94b      	cbnz	r3, 800de0c <_raise_r+0x32>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 f831 	bl	800de60 <_getpid_r>
 800ddfe:	4622      	mov	r2, r4
 800de00:	4601      	mov	r1, r0
 800de02:	4628      	mov	r0, r5
 800de04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de08:	f000 b818 	b.w	800de3c <_kill_r>
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d00a      	beq.n	800de26 <_raise_r+0x4c>
 800de10:	1c59      	adds	r1, r3, #1
 800de12:	d103      	bne.n	800de1c <_raise_r+0x42>
 800de14:	2316      	movs	r3, #22
 800de16:	6003      	str	r3, [r0, #0]
 800de18:	2001      	movs	r0, #1
 800de1a:	e7e7      	b.n	800ddec <_raise_r+0x12>
 800de1c:	2100      	movs	r1, #0
 800de1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de22:	4620      	mov	r0, r4
 800de24:	4798      	blx	r3
 800de26:	2000      	movs	r0, #0
 800de28:	e7e0      	b.n	800ddec <_raise_r+0x12>
	...

0800de2c <raise>:
 800de2c:	4b02      	ldr	r3, [pc, #8]	@ (800de38 <raise+0xc>)
 800de2e:	4601      	mov	r1, r0
 800de30:	6818      	ldr	r0, [r3, #0]
 800de32:	f7ff bfd2 	b.w	800ddda <_raise_r>
 800de36:	bf00      	nop
 800de38:	2000021c 	.word	0x2000021c

0800de3c <_kill_r>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	4d07      	ldr	r5, [pc, #28]	@ (800de5c <_kill_r+0x20>)
 800de40:	2300      	movs	r3, #0
 800de42:	4604      	mov	r4, r0
 800de44:	4608      	mov	r0, r1
 800de46:	4611      	mov	r1, r2
 800de48:	602b      	str	r3, [r5, #0]
 800de4a:	f7f7 feab 	bl	8005ba4 <_kill>
 800de4e:	1c43      	adds	r3, r0, #1
 800de50:	d102      	bne.n	800de58 <_kill_r+0x1c>
 800de52:	682b      	ldr	r3, [r5, #0]
 800de54:	b103      	cbz	r3, 800de58 <_kill_r+0x1c>
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	bd38      	pop	{r3, r4, r5, pc}
 800de5a:	bf00      	nop
 800de5c:	200008f8 	.word	0x200008f8

0800de60 <_getpid_r>:
 800de60:	f7f7 be98 	b.w	8005b94 <_getpid>

0800de64 <_malloc_usable_size_r>:
 800de64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de68:	1f18      	subs	r0, r3, #4
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	bfbc      	itt	lt
 800de6e:	580b      	ldrlt	r3, [r1, r0]
 800de70:	18c0      	addlt	r0, r0, r3
 800de72:	4770      	bx	lr

0800de74 <fmod>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	ed2d 8b02 	vpush	{d8}
 800de7a:	ec57 6b10 	vmov	r6, r7, d0
 800de7e:	ec55 4b11 	vmov	r4, r5, d1
 800de82:	f000 fbd3 	bl	800e62c <__ieee754_fmod>
 800de86:	4622      	mov	r2, r4
 800de88:	462b      	mov	r3, r5
 800de8a:	4630      	mov	r0, r6
 800de8c:	4639      	mov	r1, r7
 800de8e:	eeb0 8a40 	vmov.f32	s16, s0
 800de92:	eef0 8a60 	vmov.f32	s17, s1
 800de96:	f7f2 fe49 	bl	8000b2c <__aeabi_dcmpun>
 800de9a:	b990      	cbnz	r0, 800dec2 <fmod+0x4e>
 800de9c:	2200      	movs	r2, #0
 800de9e:	2300      	movs	r3, #0
 800dea0:	4620      	mov	r0, r4
 800dea2:	4629      	mov	r1, r5
 800dea4:	f7f2 fe10 	bl	8000ac8 <__aeabi_dcmpeq>
 800dea8:	b158      	cbz	r0, 800dec2 <fmod+0x4e>
 800deaa:	f7fd fb0b 	bl	800b4c4 <__errno>
 800deae:	2321      	movs	r3, #33	@ 0x21
 800deb0:	6003      	str	r3, [r0, #0]
 800deb2:	2200      	movs	r2, #0
 800deb4:	2300      	movs	r3, #0
 800deb6:	4610      	mov	r0, r2
 800deb8:	4619      	mov	r1, r3
 800deba:	f7f2 fcc7 	bl	800084c <__aeabi_ddiv>
 800debe:	ec41 0b18 	vmov	d8, r0, r1
 800dec2:	eeb0 0a48 	vmov.f32	s0, s16
 800dec6:	eef0 0a68 	vmov.f32	s1, s17
 800deca:	ecbd 8b02 	vpop	{d8}
 800dece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ded0 <sqrt>:
 800ded0:	b538      	push	{r3, r4, r5, lr}
 800ded2:	ed2d 8b02 	vpush	{d8}
 800ded6:	ec55 4b10 	vmov	r4, r5, d0
 800deda:	f000 f94b 	bl	800e174 <__ieee754_sqrt>
 800dede:	4622      	mov	r2, r4
 800dee0:	462b      	mov	r3, r5
 800dee2:	4620      	mov	r0, r4
 800dee4:	4629      	mov	r1, r5
 800dee6:	eeb0 8a40 	vmov.f32	s16, s0
 800deea:	eef0 8a60 	vmov.f32	s17, s1
 800deee:	f7f2 fe1d 	bl	8000b2c <__aeabi_dcmpun>
 800def2:	b990      	cbnz	r0, 800df1a <sqrt+0x4a>
 800def4:	2200      	movs	r2, #0
 800def6:	2300      	movs	r3, #0
 800def8:	4620      	mov	r0, r4
 800defa:	4629      	mov	r1, r5
 800defc:	f7f2 fdee 	bl	8000adc <__aeabi_dcmplt>
 800df00:	b158      	cbz	r0, 800df1a <sqrt+0x4a>
 800df02:	f7fd fadf 	bl	800b4c4 <__errno>
 800df06:	2321      	movs	r3, #33	@ 0x21
 800df08:	6003      	str	r3, [r0, #0]
 800df0a:	2200      	movs	r2, #0
 800df0c:	2300      	movs	r3, #0
 800df0e:	4610      	mov	r0, r2
 800df10:	4619      	mov	r1, r3
 800df12:	f7f2 fc9b 	bl	800084c <__aeabi_ddiv>
 800df16:	ec41 0b18 	vmov	d8, r0, r1
 800df1a:	eeb0 0a48 	vmov.f32	s0, s16
 800df1e:	eef0 0a68 	vmov.f32	s1, s17
 800df22:	ecbd 8b02 	vpop	{d8}
 800df26:	bd38      	pop	{r3, r4, r5, pc}

0800df28 <cos>:
 800df28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df2a:	ec53 2b10 	vmov	r2, r3, d0
 800df2e:	4826      	ldr	r0, [pc, #152]	@ (800dfc8 <cos+0xa0>)
 800df30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800df34:	4281      	cmp	r1, r0
 800df36:	d806      	bhi.n	800df46 <cos+0x1e>
 800df38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800dfc0 <cos+0x98>
 800df3c:	b005      	add	sp, #20
 800df3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800df42:	f000 b9f1 	b.w	800e328 <__kernel_cos>
 800df46:	4821      	ldr	r0, [pc, #132]	@ (800dfcc <cos+0xa4>)
 800df48:	4281      	cmp	r1, r0
 800df4a:	d908      	bls.n	800df5e <cos+0x36>
 800df4c:	4610      	mov	r0, r2
 800df4e:	4619      	mov	r1, r3
 800df50:	f7f2 f99a 	bl	8000288 <__aeabi_dsub>
 800df54:	ec41 0b10 	vmov	d0, r0, r1
 800df58:	b005      	add	sp, #20
 800df5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800df5e:	4668      	mov	r0, sp
 800df60:	f000 fc6e 	bl	800e840 <__ieee754_rem_pio2>
 800df64:	f000 0003 	and.w	r0, r0, #3
 800df68:	2801      	cmp	r0, #1
 800df6a:	d00b      	beq.n	800df84 <cos+0x5c>
 800df6c:	2802      	cmp	r0, #2
 800df6e:	d015      	beq.n	800df9c <cos+0x74>
 800df70:	b9d8      	cbnz	r0, 800dfaa <cos+0x82>
 800df72:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df76:	ed9d 0b00 	vldr	d0, [sp]
 800df7a:	f000 f9d5 	bl	800e328 <__kernel_cos>
 800df7e:	ec51 0b10 	vmov	r0, r1, d0
 800df82:	e7e7      	b.n	800df54 <cos+0x2c>
 800df84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df88:	ed9d 0b00 	vldr	d0, [sp]
 800df8c:	f000 fa94 	bl	800e4b8 <__kernel_sin>
 800df90:	ec53 2b10 	vmov	r2, r3, d0
 800df94:	4610      	mov	r0, r2
 800df96:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800df9a:	e7db      	b.n	800df54 <cos+0x2c>
 800df9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfa0:	ed9d 0b00 	vldr	d0, [sp]
 800dfa4:	f000 f9c0 	bl	800e328 <__kernel_cos>
 800dfa8:	e7f2      	b.n	800df90 <cos+0x68>
 800dfaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfae:	ed9d 0b00 	vldr	d0, [sp]
 800dfb2:	2001      	movs	r0, #1
 800dfb4:	f000 fa80 	bl	800e4b8 <__kernel_sin>
 800dfb8:	e7e1      	b.n	800df7e <cos+0x56>
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
	...
 800dfc8:	3fe921fb 	.word	0x3fe921fb
 800dfcc:	7fefffff 	.word	0x7fefffff

0800dfd0 <sin>:
 800dfd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfd2:	ec53 2b10 	vmov	r2, r3, d0
 800dfd6:	4826      	ldr	r0, [pc, #152]	@ (800e070 <sin+0xa0>)
 800dfd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dfdc:	4281      	cmp	r1, r0
 800dfde:	d807      	bhi.n	800dff0 <sin+0x20>
 800dfe0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e068 <sin+0x98>
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	b005      	add	sp, #20
 800dfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfec:	f000 ba64 	b.w	800e4b8 <__kernel_sin>
 800dff0:	4820      	ldr	r0, [pc, #128]	@ (800e074 <sin+0xa4>)
 800dff2:	4281      	cmp	r1, r0
 800dff4:	d908      	bls.n	800e008 <sin+0x38>
 800dff6:	4610      	mov	r0, r2
 800dff8:	4619      	mov	r1, r3
 800dffa:	f7f2 f945 	bl	8000288 <__aeabi_dsub>
 800dffe:	ec41 0b10 	vmov	d0, r0, r1
 800e002:	b005      	add	sp, #20
 800e004:	f85d fb04 	ldr.w	pc, [sp], #4
 800e008:	4668      	mov	r0, sp
 800e00a:	f000 fc19 	bl	800e840 <__ieee754_rem_pio2>
 800e00e:	f000 0003 	and.w	r0, r0, #3
 800e012:	2801      	cmp	r0, #1
 800e014:	d00c      	beq.n	800e030 <sin+0x60>
 800e016:	2802      	cmp	r0, #2
 800e018:	d011      	beq.n	800e03e <sin+0x6e>
 800e01a:	b9e8      	cbnz	r0, 800e058 <sin+0x88>
 800e01c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e020:	ed9d 0b00 	vldr	d0, [sp]
 800e024:	2001      	movs	r0, #1
 800e026:	f000 fa47 	bl	800e4b8 <__kernel_sin>
 800e02a:	ec51 0b10 	vmov	r0, r1, d0
 800e02e:	e7e6      	b.n	800dffe <sin+0x2e>
 800e030:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e034:	ed9d 0b00 	vldr	d0, [sp]
 800e038:	f000 f976 	bl	800e328 <__kernel_cos>
 800e03c:	e7f5      	b.n	800e02a <sin+0x5a>
 800e03e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e042:	ed9d 0b00 	vldr	d0, [sp]
 800e046:	2001      	movs	r0, #1
 800e048:	f000 fa36 	bl	800e4b8 <__kernel_sin>
 800e04c:	ec53 2b10 	vmov	r2, r3, d0
 800e050:	4610      	mov	r0, r2
 800e052:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e056:	e7d2      	b.n	800dffe <sin+0x2e>
 800e058:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e05c:	ed9d 0b00 	vldr	d0, [sp]
 800e060:	f000 f962 	bl	800e328 <__kernel_cos>
 800e064:	e7f2      	b.n	800e04c <sin+0x7c>
 800e066:	bf00      	nop
	...
 800e070:	3fe921fb 	.word	0x3fe921fb
 800e074:	7fefffff 	.word	0x7fefffff

0800e078 <fmax>:
 800e078:	b508      	push	{r3, lr}
 800e07a:	ed2d 8b04 	vpush	{d8-d9}
 800e07e:	eeb0 8a40 	vmov.f32	s16, s0
 800e082:	eef0 8a60 	vmov.f32	s17, s1
 800e086:	eeb0 9a41 	vmov.f32	s18, s2
 800e08a:	eef0 9a61 	vmov.f32	s19, s3
 800e08e:	f000 f847 	bl	800e120 <__fpclassifyd>
 800e092:	b950      	cbnz	r0, 800e0aa <fmax+0x32>
 800e094:	eeb0 8a49 	vmov.f32	s16, s18
 800e098:	eef0 8a69 	vmov.f32	s17, s19
 800e09c:	eeb0 0a48 	vmov.f32	s0, s16
 800e0a0:	eef0 0a68 	vmov.f32	s1, s17
 800e0a4:	ecbd 8b04 	vpop	{d8-d9}
 800e0a8:	bd08      	pop	{r3, pc}
 800e0aa:	eeb0 0a49 	vmov.f32	s0, s18
 800e0ae:	eef0 0a69 	vmov.f32	s1, s19
 800e0b2:	f000 f835 	bl	800e120 <__fpclassifyd>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d0f0      	beq.n	800e09c <fmax+0x24>
 800e0ba:	ec53 2b19 	vmov	r2, r3, d9
 800e0be:	ec51 0b18 	vmov	r0, r1, d8
 800e0c2:	f7f2 fd29 	bl	8000b18 <__aeabi_dcmpgt>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d0e4      	beq.n	800e094 <fmax+0x1c>
 800e0ca:	e7e7      	b.n	800e09c <fmax+0x24>

0800e0cc <fmin>:
 800e0cc:	b508      	push	{r3, lr}
 800e0ce:	ed2d 8b04 	vpush	{d8-d9}
 800e0d2:	eeb0 8a40 	vmov.f32	s16, s0
 800e0d6:	eef0 8a60 	vmov.f32	s17, s1
 800e0da:	eeb0 9a41 	vmov.f32	s18, s2
 800e0de:	eef0 9a61 	vmov.f32	s19, s3
 800e0e2:	f000 f81d 	bl	800e120 <__fpclassifyd>
 800e0e6:	b950      	cbnz	r0, 800e0fe <fmin+0x32>
 800e0e8:	eeb0 8a49 	vmov.f32	s16, s18
 800e0ec:	eef0 8a69 	vmov.f32	s17, s19
 800e0f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e0f4:	eef0 0a68 	vmov.f32	s1, s17
 800e0f8:	ecbd 8b04 	vpop	{d8-d9}
 800e0fc:	bd08      	pop	{r3, pc}
 800e0fe:	eeb0 0a49 	vmov.f32	s0, s18
 800e102:	eef0 0a69 	vmov.f32	s1, s19
 800e106:	f000 f80b 	bl	800e120 <__fpclassifyd>
 800e10a:	2800      	cmp	r0, #0
 800e10c:	d0f0      	beq.n	800e0f0 <fmin+0x24>
 800e10e:	ec53 2b19 	vmov	r2, r3, d9
 800e112:	ec51 0b18 	vmov	r0, r1, d8
 800e116:	f7f2 fce1 	bl	8000adc <__aeabi_dcmplt>
 800e11a:	2800      	cmp	r0, #0
 800e11c:	d0e4      	beq.n	800e0e8 <fmin+0x1c>
 800e11e:	e7e7      	b.n	800e0f0 <fmin+0x24>

0800e120 <__fpclassifyd>:
 800e120:	ec51 0b10 	vmov	r0, r1, d0
 800e124:	b510      	push	{r4, lr}
 800e126:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800e12a:	460b      	mov	r3, r1
 800e12c:	d019      	beq.n	800e162 <__fpclassifyd+0x42>
 800e12e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800e132:	490e      	ldr	r1, [pc, #56]	@ (800e16c <__fpclassifyd+0x4c>)
 800e134:	428a      	cmp	r2, r1
 800e136:	d90e      	bls.n	800e156 <__fpclassifyd+0x36>
 800e138:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800e13c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800e140:	428a      	cmp	r2, r1
 800e142:	d908      	bls.n	800e156 <__fpclassifyd+0x36>
 800e144:	4a0a      	ldr	r2, [pc, #40]	@ (800e170 <__fpclassifyd+0x50>)
 800e146:	4213      	tst	r3, r2
 800e148:	d007      	beq.n	800e15a <__fpclassifyd+0x3a>
 800e14a:	4294      	cmp	r4, r2
 800e14c:	d107      	bne.n	800e15e <__fpclassifyd+0x3e>
 800e14e:	fab0 f080 	clz	r0, r0
 800e152:	0940      	lsrs	r0, r0, #5
 800e154:	bd10      	pop	{r4, pc}
 800e156:	2004      	movs	r0, #4
 800e158:	e7fc      	b.n	800e154 <__fpclassifyd+0x34>
 800e15a:	2003      	movs	r0, #3
 800e15c:	e7fa      	b.n	800e154 <__fpclassifyd+0x34>
 800e15e:	2000      	movs	r0, #0
 800e160:	e7f8      	b.n	800e154 <__fpclassifyd+0x34>
 800e162:	2800      	cmp	r0, #0
 800e164:	d1ee      	bne.n	800e144 <__fpclassifyd+0x24>
 800e166:	2002      	movs	r0, #2
 800e168:	e7f4      	b.n	800e154 <__fpclassifyd+0x34>
 800e16a:	bf00      	nop
 800e16c:	7fdfffff 	.word	0x7fdfffff
 800e170:	7ff00000 	.word	0x7ff00000

0800e174 <__ieee754_sqrt>:
 800e174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	4a68      	ldr	r2, [pc, #416]	@ (800e31c <__ieee754_sqrt+0x1a8>)
 800e17a:	ec55 4b10 	vmov	r4, r5, d0
 800e17e:	43aa      	bics	r2, r5
 800e180:	462b      	mov	r3, r5
 800e182:	4621      	mov	r1, r4
 800e184:	d110      	bne.n	800e1a8 <__ieee754_sqrt+0x34>
 800e186:	4622      	mov	r2, r4
 800e188:	4620      	mov	r0, r4
 800e18a:	4629      	mov	r1, r5
 800e18c:	f7f2 fa34 	bl	80005f8 <__aeabi_dmul>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	4620      	mov	r0, r4
 800e196:	4629      	mov	r1, r5
 800e198:	f7f2 f878 	bl	800028c <__adddf3>
 800e19c:	4604      	mov	r4, r0
 800e19e:	460d      	mov	r5, r1
 800e1a0:	ec45 4b10 	vmov	d0, r4, r5
 800e1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a8:	2d00      	cmp	r5, #0
 800e1aa:	dc0e      	bgt.n	800e1ca <__ieee754_sqrt+0x56>
 800e1ac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e1b0:	4322      	orrs	r2, r4
 800e1b2:	d0f5      	beq.n	800e1a0 <__ieee754_sqrt+0x2c>
 800e1b4:	b19d      	cbz	r5, 800e1de <__ieee754_sqrt+0x6a>
 800e1b6:	4622      	mov	r2, r4
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	f7f2 f864 	bl	8000288 <__aeabi_dsub>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	f7f2 fb42 	bl	800084c <__aeabi_ddiv>
 800e1c8:	e7e8      	b.n	800e19c <__ieee754_sqrt+0x28>
 800e1ca:	152a      	asrs	r2, r5, #20
 800e1cc:	d115      	bne.n	800e1fa <__ieee754_sqrt+0x86>
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	e009      	b.n	800e1e6 <__ieee754_sqrt+0x72>
 800e1d2:	0acb      	lsrs	r3, r1, #11
 800e1d4:	3a15      	subs	r2, #21
 800e1d6:	0549      	lsls	r1, r1, #21
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0fa      	beq.n	800e1d2 <__ieee754_sqrt+0x5e>
 800e1dc:	e7f7      	b.n	800e1ce <__ieee754_sqrt+0x5a>
 800e1de:	462a      	mov	r2, r5
 800e1e0:	e7fa      	b.n	800e1d8 <__ieee754_sqrt+0x64>
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	02dc      	lsls	r4, r3, #11
 800e1e8:	d5fb      	bpl.n	800e1e2 <__ieee754_sqrt+0x6e>
 800e1ea:	1e44      	subs	r4, r0, #1
 800e1ec:	1b12      	subs	r2, r2, r4
 800e1ee:	f1c0 0420 	rsb	r4, r0, #32
 800e1f2:	fa21 f404 	lsr.w	r4, r1, r4
 800e1f6:	4323      	orrs	r3, r4
 800e1f8:	4081      	lsls	r1, r0
 800e1fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1fe:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e206:	07d2      	lsls	r2, r2, #31
 800e208:	bf5c      	itt	pl
 800e20a:	005b      	lslpl	r3, r3, #1
 800e20c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e210:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e214:	bf58      	it	pl
 800e216:	0049      	lslpl	r1, r1, #1
 800e218:	2600      	movs	r6, #0
 800e21a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e21e:	106d      	asrs	r5, r5, #1
 800e220:	0049      	lsls	r1, r1, #1
 800e222:	2016      	movs	r0, #22
 800e224:	4632      	mov	r2, r6
 800e226:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e22a:	1917      	adds	r7, r2, r4
 800e22c:	429f      	cmp	r7, r3
 800e22e:	bfde      	ittt	le
 800e230:	193a      	addle	r2, r7, r4
 800e232:	1bdb      	suble	r3, r3, r7
 800e234:	1936      	addle	r6, r6, r4
 800e236:	0fcf      	lsrs	r7, r1, #31
 800e238:	3801      	subs	r0, #1
 800e23a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e23e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e242:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e246:	d1f0      	bne.n	800e22a <__ieee754_sqrt+0xb6>
 800e248:	4604      	mov	r4, r0
 800e24a:	2720      	movs	r7, #32
 800e24c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e250:	429a      	cmp	r2, r3
 800e252:	eb00 0e0c 	add.w	lr, r0, ip
 800e256:	db02      	blt.n	800e25e <__ieee754_sqrt+0xea>
 800e258:	d113      	bne.n	800e282 <__ieee754_sqrt+0x10e>
 800e25a:	458e      	cmp	lr, r1
 800e25c:	d811      	bhi.n	800e282 <__ieee754_sqrt+0x10e>
 800e25e:	f1be 0f00 	cmp.w	lr, #0
 800e262:	eb0e 000c 	add.w	r0, lr, ip
 800e266:	da42      	bge.n	800e2ee <__ieee754_sqrt+0x17a>
 800e268:	2800      	cmp	r0, #0
 800e26a:	db40      	blt.n	800e2ee <__ieee754_sqrt+0x17a>
 800e26c:	f102 0801 	add.w	r8, r2, #1
 800e270:	1a9b      	subs	r3, r3, r2
 800e272:	458e      	cmp	lr, r1
 800e274:	bf88      	it	hi
 800e276:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e27a:	eba1 010e 	sub.w	r1, r1, lr
 800e27e:	4464      	add	r4, ip
 800e280:	4642      	mov	r2, r8
 800e282:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e286:	3f01      	subs	r7, #1
 800e288:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e28c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e290:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e294:	d1dc      	bne.n	800e250 <__ieee754_sqrt+0xdc>
 800e296:	4319      	orrs	r1, r3
 800e298:	d01b      	beq.n	800e2d2 <__ieee754_sqrt+0x15e>
 800e29a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e320 <__ieee754_sqrt+0x1ac>
 800e29e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e324 <__ieee754_sqrt+0x1b0>
 800e2a2:	e9da 0100 	ldrd	r0, r1, [sl]
 800e2a6:	e9db 2300 	ldrd	r2, r3, [fp]
 800e2aa:	f7f1 ffed 	bl	8000288 <__aeabi_dsub>
 800e2ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	f7f2 fc19 	bl	8000af0 <__aeabi_dcmple>
 800e2be:	b140      	cbz	r0, 800e2d2 <__ieee754_sqrt+0x15e>
 800e2c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e2c4:	e9da 0100 	ldrd	r0, r1, [sl]
 800e2c8:	e9db 2300 	ldrd	r2, r3, [fp]
 800e2cc:	d111      	bne.n	800e2f2 <__ieee754_sqrt+0x17e>
 800e2ce:	3601      	adds	r6, #1
 800e2d0:	463c      	mov	r4, r7
 800e2d2:	1072      	asrs	r2, r6, #1
 800e2d4:	0863      	lsrs	r3, r4, #1
 800e2d6:	07f1      	lsls	r1, r6, #31
 800e2d8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e2dc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e2e0:	bf48      	it	mi
 800e2e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e2e6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	e756      	b.n	800e19c <__ieee754_sqrt+0x28>
 800e2ee:	4690      	mov	r8, r2
 800e2f0:	e7be      	b.n	800e270 <__ieee754_sqrt+0xfc>
 800e2f2:	f7f1 ffcb 	bl	800028c <__adddf3>
 800e2f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4640      	mov	r0, r8
 800e300:	4649      	mov	r1, r9
 800e302:	f7f2 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800e306:	b120      	cbz	r0, 800e312 <__ieee754_sqrt+0x19e>
 800e308:	1ca0      	adds	r0, r4, #2
 800e30a:	bf08      	it	eq
 800e30c:	3601      	addeq	r6, #1
 800e30e:	3402      	adds	r4, #2
 800e310:	e7df      	b.n	800e2d2 <__ieee754_sqrt+0x15e>
 800e312:	1c63      	adds	r3, r4, #1
 800e314:	f023 0401 	bic.w	r4, r3, #1
 800e318:	e7db      	b.n	800e2d2 <__ieee754_sqrt+0x15e>
 800e31a:	bf00      	nop
 800e31c:	7ff00000 	.word	0x7ff00000
 800e320:	20000278 	.word	0x20000278
 800e324:	20000270 	.word	0x20000270

0800e328 <__kernel_cos>:
 800e328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32c:	ec57 6b10 	vmov	r6, r7, d0
 800e330:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e334:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e338:	ed8d 1b00 	vstr	d1, [sp]
 800e33c:	d206      	bcs.n	800e34c <__kernel_cos+0x24>
 800e33e:	4630      	mov	r0, r6
 800e340:	4639      	mov	r1, r7
 800e342:	f7f2 fc09 	bl	8000b58 <__aeabi_d2iz>
 800e346:	2800      	cmp	r0, #0
 800e348:	f000 8088 	beq.w	800e45c <__kernel_cos+0x134>
 800e34c:	4632      	mov	r2, r6
 800e34e:	463b      	mov	r3, r7
 800e350:	4630      	mov	r0, r6
 800e352:	4639      	mov	r1, r7
 800e354:	f7f2 f950 	bl	80005f8 <__aeabi_dmul>
 800e358:	4b51      	ldr	r3, [pc, #324]	@ (800e4a0 <__kernel_cos+0x178>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	4604      	mov	r4, r0
 800e35e:	460d      	mov	r5, r1
 800e360:	f7f2 f94a 	bl	80005f8 <__aeabi_dmul>
 800e364:	a340      	add	r3, pc, #256	@ (adr r3, 800e468 <__kernel_cos+0x140>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	4682      	mov	sl, r0
 800e36c:	468b      	mov	fp, r1
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	f7f2 f941 	bl	80005f8 <__aeabi_dmul>
 800e376:	a33e      	add	r3, pc, #248	@ (adr r3, 800e470 <__kernel_cos+0x148>)
 800e378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37c:	f7f1 ff86 	bl	800028c <__adddf3>
 800e380:	4622      	mov	r2, r4
 800e382:	462b      	mov	r3, r5
 800e384:	f7f2 f938 	bl	80005f8 <__aeabi_dmul>
 800e388:	a33b      	add	r3, pc, #236	@ (adr r3, 800e478 <__kernel_cos+0x150>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	f7f1 ff7b 	bl	8000288 <__aeabi_dsub>
 800e392:	4622      	mov	r2, r4
 800e394:	462b      	mov	r3, r5
 800e396:	f7f2 f92f 	bl	80005f8 <__aeabi_dmul>
 800e39a:	a339      	add	r3, pc, #228	@ (adr r3, 800e480 <__kernel_cos+0x158>)
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	f7f1 ff74 	bl	800028c <__adddf3>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	462b      	mov	r3, r5
 800e3a8:	f7f2 f926 	bl	80005f8 <__aeabi_dmul>
 800e3ac:	a336      	add	r3, pc, #216	@ (adr r3, 800e488 <__kernel_cos+0x160>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	f7f1 ff69 	bl	8000288 <__aeabi_dsub>
 800e3b6:	4622      	mov	r2, r4
 800e3b8:	462b      	mov	r3, r5
 800e3ba:	f7f2 f91d 	bl	80005f8 <__aeabi_dmul>
 800e3be:	a334      	add	r3, pc, #208	@ (adr r3, 800e490 <__kernel_cos+0x168>)
 800e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c4:	f7f1 ff62 	bl	800028c <__adddf3>
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	462b      	mov	r3, r5
 800e3cc:	f7f2 f914 	bl	80005f8 <__aeabi_dmul>
 800e3d0:	4622      	mov	r2, r4
 800e3d2:	462b      	mov	r3, r5
 800e3d4:	f7f2 f910 	bl	80005f8 <__aeabi_dmul>
 800e3d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3dc:	4604      	mov	r4, r0
 800e3de:	460d      	mov	r5, r1
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	f7f2 f908 	bl	80005f8 <__aeabi_dmul>
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f7f1 ff4a 	bl	8000288 <__aeabi_dsub>
 800e3f4:	4b2b      	ldr	r3, [pc, #172]	@ (800e4a4 <__kernel_cos+0x17c>)
 800e3f6:	4598      	cmp	r8, r3
 800e3f8:	4606      	mov	r6, r0
 800e3fa:	460f      	mov	r7, r1
 800e3fc:	d810      	bhi.n	800e420 <__kernel_cos+0xf8>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	4650      	mov	r0, sl
 800e404:	4659      	mov	r1, fp
 800e406:	f7f1 ff3f 	bl	8000288 <__aeabi_dsub>
 800e40a:	460b      	mov	r3, r1
 800e40c:	4926      	ldr	r1, [pc, #152]	@ (800e4a8 <__kernel_cos+0x180>)
 800e40e:	4602      	mov	r2, r0
 800e410:	2000      	movs	r0, #0
 800e412:	f7f1 ff39 	bl	8000288 <__aeabi_dsub>
 800e416:	ec41 0b10 	vmov	d0, r0, r1
 800e41a:	b003      	add	sp, #12
 800e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e420:	4b22      	ldr	r3, [pc, #136]	@ (800e4ac <__kernel_cos+0x184>)
 800e422:	4921      	ldr	r1, [pc, #132]	@ (800e4a8 <__kernel_cos+0x180>)
 800e424:	4598      	cmp	r8, r3
 800e426:	bf8c      	ite	hi
 800e428:	4d21      	ldrhi	r5, [pc, #132]	@ (800e4b0 <__kernel_cos+0x188>)
 800e42a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e42e:	2400      	movs	r4, #0
 800e430:	4622      	mov	r2, r4
 800e432:	462b      	mov	r3, r5
 800e434:	2000      	movs	r0, #0
 800e436:	f7f1 ff27 	bl	8000288 <__aeabi_dsub>
 800e43a:	4622      	mov	r2, r4
 800e43c:	4680      	mov	r8, r0
 800e43e:	4689      	mov	r9, r1
 800e440:	462b      	mov	r3, r5
 800e442:	4650      	mov	r0, sl
 800e444:	4659      	mov	r1, fp
 800e446:	f7f1 ff1f 	bl	8000288 <__aeabi_dsub>
 800e44a:	4632      	mov	r2, r6
 800e44c:	463b      	mov	r3, r7
 800e44e:	f7f1 ff1b 	bl	8000288 <__aeabi_dsub>
 800e452:	4602      	mov	r2, r0
 800e454:	460b      	mov	r3, r1
 800e456:	4640      	mov	r0, r8
 800e458:	4649      	mov	r1, r9
 800e45a:	e7da      	b.n	800e412 <__kernel_cos+0xea>
 800e45c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e498 <__kernel_cos+0x170>
 800e460:	e7db      	b.n	800e41a <__kernel_cos+0xf2>
 800e462:	bf00      	nop
 800e464:	f3af 8000 	nop.w
 800e468:	be8838d4 	.word	0xbe8838d4
 800e46c:	bda8fae9 	.word	0xbda8fae9
 800e470:	bdb4b1c4 	.word	0xbdb4b1c4
 800e474:	3e21ee9e 	.word	0x3e21ee9e
 800e478:	809c52ad 	.word	0x809c52ad
 800e47c:	3e927e4f 	.word	0x3e927e4f
 800e480:	19cb1590 	.word	0x19cb1590
 800e484:	3efa01a0 	.word	0x3efa01a0
 800e488:	16c15177 	.word	0x16c15177
 800e48c:	3f56c16c 	.word	0x3f56c16c
 800e490:	5555554c 	.word	0x5555554c
 800e494:	3fa55555 	.word	0x3fa55555
 800e498:	00000000 	.word	0x00000000
 800e49c:	3ff00000 	.word	0x3ff00000
 800e4a0:	3fe00000 	.word	0x3fe00000
 800e4a4:	3fd33332 	.word	0x3fd33332
 800e4a8:	3ff00000 	.word	0x3ff00000
 800e4ac:	3fe90000 	.word	0x3fe90000
 800e4b0:	3fd20000 	.word	0x3fd20000
 800e4b4:	00000000 	.word	0x00000000

0800e4b8 <__kernel_sin>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	ec55 4b10 	vmov	r4, r5, d0
 800e4c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e4c4:	b085      	sub	sp, #20
 800e4c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e4ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e4ce:	4680      	mov	r8, r0
 800e4d0:	d205      	bcs.n	800e4de <__kernel_sin+0x26>
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	f7f2 fb3f 	bl	8000b58 <__aeabi_d2iz>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d052      	beq.n	800e584 <__kernel_sin+0xcc>
 800e4de:	4622      	mov	r2, r4
 800e4e0:	462b      	mov	r3, r5
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	f7f2 f887 	bl	80005f8 <__aeabi_dmul>
 800e4ea:	4682      	mov	sl, r0
 800e4ec:	468b      	mov	fp, r1
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	f7f2 f87f 	bl	80005f8 <__aeabi_dmul>
 800e4fa:	a342      	add	r3, pc, #264	@ (adr r3, 800e604 <__kernel_sin+0x14c>)
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	e9cd 0100 	strd	r0, r1, [sp]
 800e504:	4650      	mov	r0, sl
 800e506:	4659      	mov	r1, fp
 800e508:	f7f2 f876 	bl	80005f8 <__aeabi_dmul>
 800e50c:	a33f      	add	r3, pc, #252	@ (adr r3, 800e60c <__kernel_sin+0x154>)
 800e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e512:	f7f1 feb9 	bl	8000288 <__aeabi_dsub>
 800e516:	4652      	mov	r2, sl
 800e518:	465b      	mov	r3, fp
 800e51a:	f7f2 f86d 	bl	80005f8 <__aeabi_dmul>
 800e51e:	a33d      	add	r3, pc, #244	@ (adr r3, 800e614 <__kernel_sin+0x15c>)
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	f7f1 feb2 	bl	800028c <__adddf3>
 800e528:	4652      	mov	r2, sl
 800e52a:	465b      	mov	r3, fp
 800e52c:	f7f2 f864 	bl	80005f8 <__aeabi_dmul>
 800e530:	a33a      	add	r3, pc, #232	@ (adr r3, 800e61c <__kernel_sin+0x164>)
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	f7f1 fea7 	bl	8000288 <__aeabi_dsub>
 800e53a:	4652      	mov	r2, sl
 800e53c:	465b      	mov	r3, fp
 800e53e:	f7f2 f85b 	bl	80005f8 <__aeabi_dmul>
 800e542:	a338      	add	r3, pc, #224	@ (adr r3, 800e624 <__kernel_sin+0x16c>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f7f1 fea0 	bl	800028c <__adddf3>
 800e54c:	4606      	mov	r6, r0
 800e54e:	460f      	mov	r7, r1
 800e550:	f1b8 0f00 	cmp.w	r8, #0
 800e554:	d11b      	bne.n	800e58e <__kernel_sin+0xd6>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4650      	mov	r0, sl
 800e55c:	4659      	mov	r1, fp
 800e55e:	f7f2 f84b 	bl	80005f8 <__aeabi_dmul>
 800e562:	a325      	add	r3, pc, #148	@ (adr r3, 800e5f8 <__kernel_sin+0x140>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f1 fe8e 	bl	8000288 <__aeabi_dsub>
 800e56c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e570:	f7f2 f842 	bl	80005f8 <__aeabi_dmul>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	4620      	mov	r0, r4
 800e57a:	4629      	mov	r1, r5
 800e57c:	f7f1 fe86 	bl	800028c <__adddf3>
 800e580:	4604      	mov	r4, r0
 800e582:	460d      	mov	r5, r1
 800e584:	ec45 4b10 	vmov	d0, r4, r5
 800e588:	b005      	add	sp, #20
 800e58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e592:	4b1b      	ldr	r3, [pc, #108]	@ (800e600 <__kernel_sin+0x148>)
 800e594:	2200      	movs	r2, #0
 800e596:	f7f2 f82f 	bl	80005f8 <__aeabi_dmul>
 800e59a:	4632      	mov	r2, r6
 800e59c:	4680      	mov	r8, r0
 800e59e:	4689      	mov	r9, r1
 800e5a0:	463b      	mov	r3, r7
 800e5a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5a6:	f7f2 f827 	bl	80005f8 <__aeabi_dmul>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	f7f1 fe69 	bl	8000288 <__aeabi_dsub>
 800e5b6:	4652      	mov	r2, sl
 800e5b8:	465b      	mov	r3, fp
 800e5ba:	f7f2 f81d 	bl	80005f8 <__aeabi_dmul>
 800e5be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5c2:	f7f1 fe61 	bl	8000288 <__aeabi_dsub>
 800e5c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e5f8 <__kernel_sin+0x140>)
 800e5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	460f      	mov	r7, r1
 800e5d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5d4:	f7f2 f810 	bl	80005f8 <__aeabi_dmul>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4630      	mov	r0, r6
 800e5de:	4639      	mov	r1, r7
 800e5e0:	f7f1 fe54 	bl	800028c <__adddf3>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	f7f1 fe4c 	bl	8000288 <__aeabi_dsub>
 800e5f0:	e7c6      	b.n	800e580 <__kernel_sin+0xc8>
 800e5f2:	bf00      	nop
 800e5f4:	f3af 8000 	nop.w
 800e5f8:	55555549 	.word	0x55555549
 800e5fc:	3fc55555 	.word	0x3fc55555
 800e600:	3fe00000 	.word	0x3fe00000
 800e604:	5acfd57c 	.word	0x5acfd57c
 800e608:	3de5d93a 	.word	0x3de5d93a
 800e60c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e610:	3e5ae5e6 	.word	0x3e5ae5e6
 800e614:	57b1fe7d 	.word	0x57b1fe7d
 800e618:	3ec71de3 	.word	0x3ec71de3
 800e61c:	19c161d5 	.word	0x19c161d5
 800e620:	3f2a01a0 	.word	0x3f2a01a0
 800e624:	1110f8a6 	.word	0x1110f8a6
 800e628:	3f811111 	.word	0x3f811111

0800e62c <__ieee754_fmod>:
 800e62c:	ec53 2b11 	vmov	r2, r3, d1
 800e630:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800e634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e638:	ea52 040c 	orrs.w	r4, r2, ip
 800e63c:	ec51 0b10 	vmov	r0, r1, d0
 800e640:	461e      	mov	r6, r3
 800e642:	4617      	mov	r7, r2
 800e644:	4696      	mov	lr, r2
 800e646:	d00c      	beq.n	800e662 <__ieee754_fmod+0x36>
 800e648:	4c77      	ldr	r4, [pc, #476]	@ (800e828 <__ieee754_fmod+0x1fc>)
 800e64a:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800e64e:	45a0      	cmp	r8, r4
 800e650:	4689      	mov	r9, r1
 800e652:	d806      	bhi.n	800e662 <__ieee754_fmod+0x36>
 800e654:	4254      	negs	r4, r2
 800e656:	4d75      	ldr	r5, [pc, #468]	@ (800e82c <__ieee754_fmod+0x200>)
 800e658:	4314      	orrs	r4, r2
 800e65a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800e65e:	42ac      	cmp	r4, r5
 800e660:	d909      	bls.n	800e676 <__ieee754_fmod+0x4a>
 800e662:	f7f1 ffc9 	bl	80005f8 <__aeabi_dmul>
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	f7f2 f8ef 	bl	800084c <__aeabi_ddiv>
 800e66e:	ec41 0b10 	vmov	d0, r0, r1
 800e672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e676:	45e0      	cmp	r8, ip
 800e678:	4682      	mov	sl, r0
 800e67a:	4604      	mov	r4, r0
 800e67c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800e680:	dc09      	bgt.n	800e696 <__ieee754_fmod+0x6a>
 800e682:	dbf4      	blt.n	800e66e <__ieee754_fmod+0x42>
 800e684:	4282      	cmp	r2, r0
 800e686:	d8f2      	bhi.n	800e66e <__ieee754_fmod+0x42>
 800e688:	d105      	bne.n	800e696 <__ieee754_fmod+0x6a>
 800e68a:	4b69      	ldr	r3, [pc, #420]	@ (800e830 <__ieee754_fmod+0x204>)
 800e68c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800e690:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e694:	e7eb      	b.n	800e66e <__ieee754_fmod+0x42>
 800e696:	4a65      	ldr	r2, [pc, #404]	@ (800e82c <__ieee754_fmod+0x200>)
 800e698:	ea19 0f02 	tst.w	r9, r2
 800e69c:	d148      	bne.n	800e730 <__ieee754_fmod+0x104>
 800e69e:	f1b8 0f00 	cmp.w	r8, #0
 800e6a2:	d13d      	bne.n	800e720 <__ieee754_fmod+0xf4>
 800e6a4:	4963      	ldr	r1, [pc, #396]	@ (800e834 <__ieee754_fmod+0x208>)
 800e6a6:	4653      	mov	r3, sl
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dc36      	bgt.n	800e71a <__ieee754_fmod+0xee>
 800e6ac:	4216      	tst	r6, r2
 800e6ae:	d14f      	bne.n	800e750 <__ieee754_fmod+0x124>
 800e6b0:	f1bc 0f00 	cmp.w	ip, #0
 800e6b4:	d144      	bne.n	800e740 <__ieee754_fmod+0x114>
 800e6b6:	4a5f      	ldr	r2, [pc, #380]	@ (800e834 <__ieee754_fmod+0x208>)
 800e6b8:	463b      	mov	r3, r7
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	dc3d      	bgt.n	800e73a <__ieee754_fmod+0x10e>
 800e6be:	485e      	ldr	r0, [pc, #376]	@ (800e838 <__ieee754_fmod+0x20c>)
 800e6c0:	4281      	cmp	r1, r0
 800e6c2:	db4a      	blt.n	800e75a <__ieee754_fmod+0x12e>
 800e6c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e6cc:	485a      	ldr	r0, [pc, #360]	@ (800e838 <__ieee754_fmod+0x20c>)
 800e6ce:	4282      	cmp	r2, r0
 800e6d0:	db57      	blt.n	800e782 <__ieee754_fmod+0x156>
 800e6d2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e6d6:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800e6da:	1a89      	subs	r1, r1, r2
 800e6dc:	1b98      	subs	r0, r3, r6
 800e6de:	eba4 070e 	sub.w	r7, r4, lr
 800e6e2:	2900      	cmp	r1, #0
 800e6e4:	d162      	bne.n	800e7ac <__ieee754_fmod+0x180>
 800e6e6:	4574      	cmp	r4, lr
 800e6e8:	bf38      	it	cc
 800e6ea:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	bfa4      	itt	ge
 800e6f2:	463c      	movge	r4, r7
 800e6f4:	4603      	movge	r3, r0
 800e6f6:	ea53 0104 	orrs.w	r1, r3, r4
 800e6fa:	d0c6      	beq.n	800e68a <__ieee754_fmod+0x5e>
 800e6fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e700:	db69      	blt.n	800e7d6 <__ieee754_fmod+0x1aa>
 800e702:	494d      	ldr	r1, [pc, #308]	@ (800e838 <__ieee754_fmod+0x20c>)
 800e704:	428a      	cmp	r2, r1
 800e706:	db6c      	blt.n	800e7e2 <__ieee754_fmod+0x1b6>
 800e708:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e70c:	432b      	orrs	r3, r5
 800e70e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800e712:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e716:	4620      	mov	r0, r4
 800e718:	e7a9      	b.n	800e66e <__ieee754_fmod+0x42>
 800e71a:	3901      	subs	r1, #1
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	e7c3      	b.n	800e6a8 <__ieee754_fmod+0x7c>
 800e720:	4945      	ldr	r1, [pc, #276]	@ (800e838 <__ieee754_fmod+0x20c>)
 800e722:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e726:	2b00      	cmp	r3, #0
 800e728:	ddc0      	ble.n	800e6ac <__ieee754_fmod+0x80>
 800e72a:	3901      	subs	r1, #1
 800e72c:	005b      	lsls	r3, r3, #1
 800e72e:	e7fa      	b.n	800e726 <__ieee754_fmod+0xfa>
 800e730:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e734:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e738:	e7b8      	b.n	800e6ac <__ieee754_fmod+0x80>
 800e73a:	3a01      	subs	r2, #1
 800e73c:	005b      	lsls	r3, r3, #1
 800e73e:	e7bc      	b.n	800e6ba <__ieee754_fmod+0x8e>
 800e740:	4a3d      	ldr	r2, [pc, #244]	@ (800e838 <__ieee754_fmod+0x20c>)
 800e742:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800e746:	2b00      	cmp	r3, #0
 800e748:	ddb9      	ble.n	800e6be <__ieee754_fmod+0x92>
 800e74a:	3a01      	subs	r2, #1
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	e7fa      	b.n	800e746 <__ieee754_fmod+0x11a>
 800e750:	ea4f 522c 	mov.w	r2, ip, asr #20
 800e754:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e758:	e7b1      	b.n	800e6be <__ieee754_fmod+0x92>
 800e75a:	1a40      	subs	r0, r0, r1
 800e75c:	281f      	cmp	r0, #31
 800e75e:	dc0a      	bgt.n	800e776 <__ieee754_fmod+0x14a>
 800e760:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800e764:	fa08 f800 	lsl.w	r8, r8, r0
 800e768:	fa2a f303 	lsr.w	r3, sl, r3
 800e76c:	ea43 0308 	orr.w	r3, r3, r8
 800e770:	fa0a f400 	lsl.w	r4, sl, r0
 800e774:	e7aa      	b.n	800e6cc <__ieee754_fmod+0xa0>
 800e776:	4b31      	ldr	r3, [pc, #196]	@ (800e83c <__ieee754_fmod+0x210>)
 800e778:	1a5b      	subs	r3, r3, r1
 800e77a:	fa0a f303 	lsl.w	r3, sl, r3
 800e77e:	2400      	movs	r4, #0
 800e780:	e7a4      	b.n	800e6cc <__ieee754_fmod+0xa0>
 800e782:	1a80      	subs	r0, r0, r2
 800e784:	281f      	cmp	r0, #31
 800e786:	dc0a      	bgt.n	800e79e <__ieee754_fmod+0x172>
 800e788:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800e78c:	fa0c fc00 	lsl.w	ip, ip, r0
 800e790:	fa27 f606 	lsr.w	r6, r7, r6
 800e794:	ea46 060c 	orr.w	r6, r6, ip
 800e798:	fa07 fe00 	lsl.w	lr, r7, r0
 800e79c:	e79d      	b.n	800e6da <__ieee754_fmod+0xae>
 800e79e:	4e27      	ldr	r6, [pc, #156]	@ (800e83c <__ieee754_fmod+0x210>)
 800e7a0:	1ab6      	subs	r6, r6, r2
 800e7a2:	fa07 f606 	lsl.w	r6, r7, r6
 800e7a6:	f04f 0e00 	mov.w	lr, #0
 800e7aa:	e796      	b.n	800e6da <__ieee754_fmod+0xae>
 800e7ac:	4574      	cmp	r4, lr
 800e7ae:	bf38      	it	cc
 800e7b0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	da05      	bge.n	800e7c4 <__ieee754_fmod+0x198>
 800e7b8:	0fe0      	lsrs	r0, r4, #31
 800e7ba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e7be:	0064      	lsls	r4, r4, #1
 800e7c0:	3901      	subs	r1, #1
 800e7c2:	e78b      	b.n	800e6dc <__ieee754_fmod+0xb0>
 800e7c4:	ea50 0307 	orrs.w	r3, r0, r7
 800e7c8:	f43f af5f 	beq.w	800e68a <__ieee754_fmod+0x5e>
 800e7cc:	0ffb      	lsrs	r3, r7, #31
 800e7ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e7d2:	007c      	lsls	r4, r7, #1
 800e7d4:	e7f4      	b.n	800e7c0 <__ieee754_fmod+0x194>
 800e7d6:	0fe1      	lsrs	r1, r4, #31
 800e7d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e7dc:	0064      	lsls	r4, r4, #1
 800e7de:	3a01      	subs	r2, #1
 800e7e0:	e78c      	b.n	800e6fc <__ieee754_fmod+0xd0>
 800e7e2:	1a89      	subs	r1, r1, r2
 800e7e4:	2914      	cmp	r1, #20
 800e7e6:	dc0a      	bgt.n	800e7fe <__ieee754_fmod+0x1d2>
 800e7e8:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e7ec:	fa03 f202 	lsl.w	r2, r3, r2
 800e7f0:	40cc      	lsrs	r4, r1
 800e7f2:	4322      	orrs	r2, r4
 800e7f4:	410b      	asrs	r3, r1
 800e7f6:	ea43 0105 	orr.w	r1, r3, r5
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	e737      	b.n	800e66e <__ieee754_fmod+0x42>
 800e7fe:	291f      	cmp	r1, #31
 800e800:	dc07      	bgt.n	800e812 <__ieee754_fmod+0x1e6>
 800e802:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e806:	40cc      	lsrs	r4, r1
 800e808:	fa03 f202 	lsl.w	r2, r3, r2
 800e80c:	4322      	orrs	r2, r4
 800e80e:	462b      	mov	r3, r5
 800e810:	e7f1      	b.n	800e7f6 <__ieee754_fmod+0x1ca>
 800e812:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800e816:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800e81a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800e81e:	32e2      	adds	r2, #226	@ 0xe2
 800e820:	fa43 f202 	asr.w	r2, r3, r2
 800e824:	e7f3      	b.n	800e80e <__ieee754_fmod+0x1e2>
 800e826:	bf00      	nop
 800e828:	7fefffff 	.word	0x7fefffff
 800e82c:	7ff00000 	.word	0x7ff00000
 800e830:	0800fa68 	.word	0x0800fa68
 800e834:	fffffbed 	.word	0xfffffbed
 800e838:	fffffc02 	.word	0xfffffc02
 800e83c:	fffffbe2 	.word	0xfffffbe2

0800e840 <__ieee754_rem_pio2>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	ec57 6b10 	vmov	r6, r7, d0
 800e848:	4bc5      	ldr	r3, [pc, #788]	@ (800eb60 <__ieee754_rem_pio2+0x320>)
 800e84a:	b08d      	sub	sp, #52	@ 0x34
 800e84c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e850:	4598      	cmp	r8, r3
 800e852:	4604      	mov	r4, r0
 800e854:	9704      	str	r7, [sp, #16]
 800e856:	d807      	bhi.n	800e868 <__ieee754_rem_pio2+0x28>
 800e858:	2200      	movs	r2, #0
 800e85a:	2300      	movs	r3, #0
 800e85c:	ed80 0b00 	vstr	d0, [r0]
 800e860:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e864:	2500      	movs	r5, #0
 800e866:	e028      	b.n	800e8ba <__ieee754_rem_pio2+0x7a>
 800e868:	4bbe      	ldr	r3, [pc, #760]	@ (800eb64 <__ieee754_rem_pio2+0x324>)
 800e86a:	4598      	cmp	r8, r3
 800e86c:	d878      	bhi.n	800e960 <__ieee754_rem_pio2+0x120>
 800e86e:	9b04      	ldr	r3, [sp, #16]
 800e870:	4dbd      	ldr	r5, [pc, #756]	@ (800eb68 <__ieee754_rem_pio2+0x328>)
 800e872:	2b00      	cmp	r3, #0
 800e874:	4630      	mov	r0, r6
 800e876:	a3ac      	add	r3, pc, #688	@ (adr r3, 800eb28 <__ieee754_rem_pio2+0x2e8>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	4639      	mov	r1, r7
 800e87e:	dd38      	ble.n	800e8f2 <__ieee754_rem_pio2+0xb2>
 800e880:	f7f1 fd02 	bl	8000288 <__aeabi_dsub>
 800e884:	45a8      	cmp	r8, r5
 800e886:	4606      	mov	r6, r0
 800e888:	460f      	mov	r7, r1
 800e88a:	d01a      	beq.n	800e8c2 <__ieee754_rem_pio2+0x82>
 800e88c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800eb30 <__ieee754_rem_pio2+0x2f0>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fcf9 	bl	8000288 <__aeabi_dsub>
 800e896:	4602      	mov	r2, r0
 800e898:	460b      	mov	r3, r1
 800e89a:	4680      	mov	r8, r0
 800e89c:	4689      	mov	r9, r1
 800e89e:	4630      	mov	r0, r6
 800e8a0:	4639      	mov	r1, r7
 800e8a2:	f7f1 fcf1 	bl	8000288 <__aeabi_dsub>
 800e8a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800eb30 <__ieee754_rem_pio2+0x2f0>)
 800e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ac:	f7f1 fcec 	bl	8000288 <__aeabi_dsub>
 800e8b0:	e9c4 8900 	strd	r8, r9, [r4]
 800e8b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e8b8:	2501      	movs	r5, #1
 800e8ba:	4628      	mov	r0, r5
 800e8bc:	b00d      	add	sp, #52	@ 0x34
 800e8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c2:	a39d      	add	r3, pc, #628	@ (adr r3, 800eb38 <__ieee754_rem_pio2+0x2f8>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 fcde 	bl	8000288 <__aeabi_dsub>
 800e8cc:	a39c      	add	r3, pc, #624	@ (adr r3, 800eb40 <__ieee754_rem_pio2+0x300>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	f7f1 fcd7 	bl	8000288 <__aeabi_dsub>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4680      	mov	r8, r0
 800e8e0:	4689      	mov	r9, r1
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	f7f1 fccf 	bl	8000288 <__aeabi_dsub>
 800e8ea:	a395      	add	r3, pc, #596	@ (adr r3, 800eb40 <__ieee754_rem_pio2+0x300>)
 800e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f0:	e7dc      	b.n	800e8ac <__ieee754_rem_pio2+0x6c>
 800e8f2:	f7f1 fccb 	bl	800028c <__adddf3>
 800e8f6:	45a8      	cmp	r8, r5
 800e8f8:	4606      	mov	r6, r0
 800e8fa:	460f      	mov	r7, r1
 800e8fc:	d018      	beq.n	800e930 <__ieee754_rem_pio2+0xf0>
 800e8fe:	a38c      	add	r3, pc, #560	@ (adr r3, 800eb30 <__ieee754_rem_pio2+0x2f0>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	f7f1 fcc2 	bl	800028c <__adddf3>
 800e908:	4602      	mov	r2, r0
 800e90a:	460b      	mov	r3, r1
 800e90c:	4680      	mov	r8, r0
 800e90e:	4689      	mov	r9, r1
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f1 fcb8 	bl	8000288 <__aeabi_dsub>
 800e918:	a385      	add	r3, pc, #532	@ (adr r3, 800eb30 <__ieee754_rem_pio2+0x2f0>)
 800e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91e:	f7f1 fcb5 	bl	800028c <__adddf3>
 800e922:	f04f 35ff 	mov.w	r5, #4294967295
 800e926:	e9c4 8900 	strd	r8, r9, [r4]
 800e92a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e92e:	e7c4      	b.n	800e8ba <__ieee754_rem_pio2+0x7a>
 800e930:	a381      	add	r3, pc, #516	@ (adr r3, 800eb38 <__ieee754_rem_pio2+0x2f8>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f1 fca9 	bl	800028c <__adddf3>
 800e93a:	a381      	add	r3, pc, #516	@ (adr r3, 800eb40 <__ieee754_rem_pio2+0x300>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	4606      	mov	r6, r0
 800e942:	460f      	mov	r7, r1
 800e944:	f7f1 fca2 	bl	800028c <__adddf3>
 800e948:	4602      	mov	r2, r0
 800e94a:	460b      	mov	r3, r1
 800e94c:	4680      	mov	r8, r0
 800e94e:	4689      	mov	r9, r1
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f1 fc98 	bl	8000288 <__aeabi_dsub>
 800e958:	a379      	add	r3, pc, #484	@ (adr r3, 800eb40 <__ieee754_rem_pio2+0x300>)
 800e95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95e:	e7de      	b.n	800e91e <__ieee754_rem_pio2+0xde>
 800e960:	4b82      	ldr	r3, [pc, #520]	@ (800eb6c <__ieee754_rem_pio2+0x32c>)
 800e962:	4598      	cmp	r8, r3
 800e964:	f200 80d1 	bhi.w	800eb0a <__ieee754_rem_pio2+0x2ca>
 800e968:	f000 f966 	bl	800ec38 <fabs>
 800e96c:	ec57 6b10 	vmov	r6, r7, d0
 800e970:	a375      	add	r3, pc, #468	@ (adr r3, 800eb48 <__ieee754_rem_pio2+0x308>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	4630      	mov	r0, r6
 800e978:	4639      	mov	r1, r7
 800e97a:	f7f1 fe3d 	bl	80005f8 <__aeabi_dmul>
 800e97e:	4b7c      	ldr	r3, [pc, #496]	@ (800eb70 <__ieee754_rem_pio2+0x330>)
 800e980:	2200      	movs	r2, #0
 800e982:	f7f1 fc83 	bl	800028c <__adddf3>
 800e986:	f7f2 f8e7 	bl	8000b58 <__aeabi_d2iz>
 800e98a:	4605      	mov	r5, r0
 800e98c:	f7f1 fdca 	bl	8000524 <__aeabi_i2d>
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e998:	a363      	add	r3, pc, #396	@ (adr r3, 800eb28 <__ieee754_rem_pio2+0x2e8>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fe2b 	bl	80005f8 <__aeabi_dmul>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f1 fc6d 	bl	8000288 <__aeabi_dsub>
 800e9ae:	a360      	add	r3, pc, #384	@ (adr r3, 800eb30 <__ieee754_rem_pio2+0x2f0>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	4682      	mov	sl, r0
 800e9b6:	468b      	mov	fp, r1
 800e9b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9bc:	f7f1 fe1c 	bl	80005f8 <__aeabi_dmul>
 800e9c0:	2d1f      	cmp	r5, #31
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	dc0c      	bgt.n	800e9e2 <__ieee754_rem_pio2+0x1a2>
 800e9c8:	4b6a      	ldr	r3, [pc, #424]	@ (800eb74 <__ieee754_rem_pio2+0x334>)
 800e9ca:	1e6a      	subs	r2, r5, #1
 800e9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d0:	4543      	cmp	r3, r8
 800e9d2:	d006      	beq.n	800e9e2 <__ieee754_rem_pio2+0x1a2>
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	463b      	mov	r3, r7
 800e9d8:	4650      	mov	r0, sl
 800e9da:	4659      	mov	r1, fp
 800e9dc:	f7f1 fc54 	bl	8000288 <__aeabi_dsub>
 800e9e0:	e00e      	b.n	800ea00 <__ieee754_rem_pio2+0x1c0>
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	4650      	mov	r0, sl
 800e9e8:	4659      	mov	r1, fp
 800e9ea:	f7f1 fc4d 	bl	8000288 <__aeabi_dsub>
 800e9ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e9f2:	9305      	str	r3, [sp, #20]
 800e9f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e9fc:	2b10      	cmp	r3, #16
 800e9fe:	dc02      	bgt.n	800ea06 <__ieee754_rem_pio2+0x1c6>
 800ea00:	e9c4 0100 	strd	r0, r1, [r4]
 800ea04:	e039      	b.n	800ea7a <__ieee754_rem_pio2+0x23a>
 800ea06:	a34c      	add	r3, pc, #304	@ (adr r3, 800eb38 <__ieee754_rem_pio2+0x2f8>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea10:	f7f1 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4650      	mov	r0, sl
 800ea1e:	4659      	mov	r1, fp
 800ea20:	f7f1 fc32 	bl	8000288 <__aeabi_dsub>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4680      	mov	r8, r0
 800ea2a:	4689      	mov	r9, r1
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	4659      	mov	r1, fp
 800ea30:	f7f1 fc2a 	bl	8000288 <__aeabi_dsub>
 800ea34:	4632      	mov	r2, r6
 800ea36:	463b      	mov	r3, r7
 800ea38:	f7f1 fc26 	bl	8000288 <__aeabi_dsub>
 800ea3c:	a340      	add	r3, pc, #256	@ (adr r3, 800eb40 <__ieee754_rem_pio2+0x300>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	4606      	mov	r6, r0
 800ea44:	460f      	mov	r7, r1
 800ea46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea4a:	f7f1 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ea4e:	4632      	mov	r2, r6
 800ea50:	463b      	mov	r3, r7
 800ea52:	f7f1 fc19 	bl	8000288 <__aeabi_dsub>
 800ea56:	4602      	mov	r2, r0
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	460f      	mov	r7, r1
 800ea5e:	4640      	mov	r0, r8
 800ea60:	4649      	mov	r1, r9
 800ea62:	f7f1 fc11 	bl	8000288 <__aeabi_dsub>
 800ea66:	9a05      	ldr	r2, [sp, #20]
 800ea68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	2b31      	cmp	r3, #49	@ 0x31
 800ea70:	dc20      	bgt.n	800eab4 <__ieee754_rem_pio2+0x274>
 800ea72:	e9c4 0100 	strd	r0, r1, [r4]
 800ea76:	46c2      	mov	sl, r8
 800ea78:	46cb      	mov	fp, r9
 800ea7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ea7e:	4650      	mov	r0, sl
 800ea80:	4642      	mov	r2, r8
 800ea82:	464b      	mov	r3, r9
 800ea84:	4659      	mov	r1, fp
 800ea86:	f7f1 fbff 	bl	8000288 <__aeabi_dsub>
 800ea8a:	463b      	mov	r3, r7
 800ea8c:	4632      	mov	r2, r6
 800ea8e:	f7f1 fbfb 	bl	8000288 <__aeabi_dsub>
 800ea92:	9b04      	ldr	r3, [sp, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea9a:	f6bf af0e 	bge.w	800e8ba <__ieee754_rem_pio2+0x7a>
 800ea9e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800eaa2:	6063      	str	r3, [r4, #4]
 800eaa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eaa8:	f8c4 8000 	str.w	r8, [r4]
 800eaac:	60a0      	str	r0, [r4, #8]
 800eaae:	60e3      	str	r3, [r4, #12]
 800eab0:	426d      	negs	r5, r5
 800eab2:	e702      	b.n	800e8ba <__ieee754_rem_pio2+0x7a>
 800eab4:	a326      	add	r3, pc, #152	@ (adr r3, 800eb50 <__ieee754_rem_pio2+0x310>)
 800eab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eabe:	f7f1 fd9b 	bl	80005f8 <__aeabi_dmul>
 800eac2:	4606      	mov	r6, r0
 800eac4:	460f      	mov	r7, r1
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	4640      	mov	r0, r8
 800eacc:	4649      	mov	r1, r9
 800eace:	f7f1 fbdb 	bl	8000288 <__aeabi_dsub>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4682      	mov	sl, r0
 800ead8:	468b      	mov	fp, r1
 800eada:	4640      	mov	r0, r8
 800eadc:	4649      	mov	r1, r9
 800eade:	f7f1 fbd3 	bl	8000288 <__aeabi_dsub>
 800eae2:	4632      	mov	r2, r6
 800eae4:	463b      	mov	r3, r7
 800eae6:	f7f1 fbcf 	bl	8000288 <__aeabi_dsub>
 800eaea:	a31b      	add	r3, pc, #108	@ (adr r3, 800eb58 <__ieee754_rem_pio2+0x318>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	4606      	mov	r6, r0
 800eaf2:	460f      	mov	r7, r1
 800eaf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaf8:	f7f1 fd7e 	bl	80005f8 <__aeabi_dmul>
 800eafc:	4632      	mov	r2, r6
 800eafe:	463b      	mov	r3, r7
 800eb00:	f7f1 fbc2 	bl	8000288 <__aeabi_dsub>
 800eb04:	4606      	mov	r6, r0
 800eb06:	460f      	mov	r7, r1
 800eb08:	e764      	b.n	800e9d4 <__ieee754_rem_pio2+0x194>
 800eb0a:	4b1b      	ldr	r3, [pc, #108]	@ (800eb78 <__ieee754_rem_pio2+0x338>)
 800eb0c:	4598      	cmp	r8, r3
 800eb0e:	d935      	bls.n	800eb7c <__ieee754_rem_pio2+0x33c>
 800eb10:	4632      	mov	r2, r6
 800eb12:	463b      	mov	r3, r7
 800eb14:	4630      	mov	r0, r6
 800eb16:	4639      	mov	r1, r7
 800eb18:	f7f1 fbb6 	bl	8000288 <__aeabi_dsub>
 800eb1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eb20:	e9c4 0100 	strd	r0, r1, [r4]
 800eb24:	e69e      	b.n	800e864 <__ieee754_rem_pio2+0x24>
 800eb26:	bf00      	nop
 800eb28:	54400000 	.word	0x54400000
 800eb2c:	3ff921fb 	.word	0x3ff921fb
 800eb30:	1a626331 	.word	0x1a626331
 800eb34:	3dd0b461 	.word	0x3dd0b461
 800eb38:	1a600000 	.word	0x1a600000
 800eb3c:	3dd0b461 	.word	0x3dd0b461
 800eb40:	2e037073 	.word	0x2e037073
 800eb44:	3ba3198a 	.word	0x3ba3198a
 800eb48:	6dc9c883 	.word	0x6dc9c883
 800eb4c:	3fe45f30 	.word	0x3fe45f30
 800eb50:	2e000000 	.word	0x2e000000
 800eb54:	3ba3198a 	.word	0x3ba3198a
 800eb58:	252049c1 	.word	0x252049c1
 800eb5c:	397b839a 	.word	0x397b839a
 800eb60:	3fe921fb 	.word	0x3fe921fb
 800eb64:	4002d97b 	.word	0x4002d97b
 800eb68:	3ff921fb 	.word	0x3ff921fb
 800eb6c:	413921fb 	.word	0x413921fb
 800eb70:	3fe00000 	.word	0x3fe00000
 800eb74:	0800fa78 	.word	0x0800fa78
 800eb78:	7fefffff 	.word	0x7fefffff
 800eb7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800eb80:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800eb84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800eb88:	4630      	mov	r0, r6
 800eb8a:	460f      	mov	r7, r1
 800eb8c:	f7f1 ffe4 	bl	8000b58 <__aeabi_d2iz>
 800eb90:	f7f1 fcc8 	bl	8000524 <__aeabi_i2d>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	4630      	mov	r0, r6
 800eb9a:	4639      	mov	r1, r7
 800eb9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eba0:	f7f1 fb72 	bl	8000288 <__aeabi_dsub>
 800eba4:	4b22      	ldr	r3, [pc, #136]	@ (800ec30 <__ieee754_rem_pio2+0x3f0>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	f7f1 fd26 	bl	80005f8 <__aeabi_dmul>
 800ebac:	460f      	mov	r7, r1
 800ebae:	4606      	mov	r6, r0
 800ebb0:	f7f1 ffd2 	bl	8000b58 <__aeabi_d2iz>
 800ebb4:	f7f1 fcb6 	bl	8000524 <__aeabi_i2d>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ebc4:	f7f1 fb60 	bl	8000288 <__aeabi_dsub>
 800ebc8:	4b19      	ldr	r3, [pc, #100]	@ (800ec30 <__ieee754_rem_pio2+0x3f0>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f7f1 fd14 	bl	80005f8 <__aeabi_dmul>
 800ebd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ebd4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ebd8:	f04f 0803 	mov.w	r8, #3
 800ebdc:	2600      	movs	r6, #0
 800ebde:	2700      	movs	r7, #0
 800ebe0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ebe4:	4632      	mov	r2, r6
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	46c2      	mov	sl, r8
 800ebea:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebee:	f7f1 ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d1f4      	bne.n	800ebe0 <__ieee754_rem_pio2+0x3a0>
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	@ (800ec34 <__ieee754_rem_pio2+0x3f4>)
 800ebf8:	9301      	str	r3, [sp, #4]
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	462a      	mov	r2, r5
 800ec00:	4653      	mov	r3, sl
 800ec02:	4621      	mov	r1, r4
 800ec04:	a806      	add	r0, sp, #24
 800ec06:	f000 f81f 	bl	800ec48 <__kernel_rem_pio2>
 800ec0a:	9b04      	ldr	r3, [sp, #16]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	4605      	mov	r5, r0
 800ec10:	f6bf ae53 	bge.w	800e8ba <__ieee754_rem_pio2+0x7a>
 800ec14:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ec18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec1c:	e9c4 2300 	strd	r2, r3, [r4]
 800ec20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ec24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ec2c:	e740      	b.n	800eab0 <__ieee754_rem_pio2+0x270>
 800ec2e:	bf00      	nop
 800ec30:	41700000 	.word	0x41700000
 800ec34:	0800faf8 	.word	0x0800faf8

0800ec38 <fabs>:
 800ec38:	ec51 0b10 	vmov	r0, r1, d0
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ec42:	ec43 2b10 	vmov	d0, r2, r3
 800ec46:	4770      	bx	lr

0800ec48 <__kernel_rem_pio2>:
 800ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	ed2d 8b02 	vpush	{d8}
 800ec50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ec54:	f112 0f14 	cmn.w	r2, #20
 800ec58:	9306      	str	r3, [sp, #24]
 800ec5a:	9104      	str	r1, [sp, #16]
 800ec5c:	4bbe      	ldr	r3, [pc, #760]	@ (800ef58 <__kernel_rem_pio2+0x310>)
 800ec5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ec60:	9008      	str	r0, [sp, #32]
 800ec62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	9b06      	ldr	r3, [sp, #24]
 800ec6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec6e:	bfa8      	it	ge
 800ec70:	1ed4      	subge	r4, r2, #3
 800ec72:	9305      	str	r3, [sp, #20]
 800ec74:	bfb2      	itee	lt
 800ec76:	2400      	movlt	r4, #0
 800ec78:	2318      	movge	r3, #24
 800ec7a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ec7e:	f06f 0317 	mvn.w	r3, #23
 800ec82:	fb04 3303 	mla	r3, r4, r3, r3
 800ec86:	eb03 0b02 	add.w	fp, r3, r2
 800ec8a:	9b00      	ldr	r3, [sp, #0]
 800ec8c:	9a05      	ldr	r2, [sp, #20]
 800ec8e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ef48 <__kernel_rem_pio2+0x300>
 800ec92:	eb03 0802 	add.w	r8, r3, r2
 800ec96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ec98:	1aa7      	subs	r7, r4, r2
 800ec9a:	ae20      	add	r6, sp, #128	@ 0x80
 800ec9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eca0:	2500      	movs	r5, #0
 800eca2:	4545      	cmp	r5, r8
 800eca4:	dd13      	ble.n	800ecce <__kernel_rem_pio2+0x86>
 800eca6:	9b06      	ldr	r3, [sp, #24]
 800eca8:	aa20      	add	r2, sp, #128	@ 0x80
 800ecaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ecae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ecb2:	f04f 0800 	mov.w	r8, #0
 800ecb6:	9b00      	ldr	r3, [sp, #0]
 800ecb8:	4598      	cmp	r8, r3
 800ecba:	dc31      	bgt.n	800ed20 <__kernel_rem_pio2+0xd8>
 800ecbc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ef48 <__kernel_rem_pio2+0x300>
 800ecc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecc8:	462f      	mov	r7, r5
 800ecca:	2600      	movs	r6, #0
 800eccc:	e01b      	b.n	800ed06 <__kernel_rem_pio2+0xbe>
 800ecce:	42ef      	cmn	r7, r5
 800ecd0:	d407      	bmi.n	800ece2 <__kernel_rem_pio2+0x9a>
 800ecd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ecd6:	f7f1 fc25 	bl	8000524 <__aeabi_i2d>
 800ecda:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ecde:	3501      	adds	r5, #1
 800ece0:	e7df      	b.n	800eca2 <__kernel_rem_pio2+0x5a>
 800ece2:	ec51 0b18 	vmov	r0, r1, d8
 800ece6:	e7f8      	b.n	800ecda <__kernel_rem_pio2+0x92>
 800ece8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ecf0:	f7f1 fc82 	bl	80005f8 <__aeabi_dmul>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecfc:	f7f1 fac6 	bl	800028c <__adddf3>
 800ed00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed04:	3601      	adds	r6, #1
 800ed06:	9b05      	ldr	r3, [sp, #20]
 800ed08:	429e      	cmp	r6, r3
 800ed0a:	f1a7 0708 	sub.w	r7, r7, #8
 800ed0e:	ddeb      	ble.n	800ece8 <__kernel_rem_pio2+0xa0>
 800ed10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed14:	f108 0801 	add.w	r8, r8, #1
 800ed18:	ecaa 7b02 	vstmia	sl!, {d7}
 800ed1c:	3508      	adds	r5, #8
 800ed1e:	e7ca      	b.n	800ecb6 <__kernel_rem_pio2+0x6e>
 800ed20:	9b00      	ldr	r3, [sp, #0]
 800ed22:	f8dd 8000 	ldr.w	r8, [sp]
 800ed26:	aa0c      	add	r2, sp, #48	@ 0x30
 800ed28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ed30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ed3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed3c:	ab98      	add	r3, sp, #608	@ 0x260
 800ed3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ed42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ed46:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed4a:	ac0c      	add	r4, sp, #48	@ 0x30
 800ed4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ed4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ed52:	46a1      	mov	r9, r4
 800ed54:	46c2      	mov	sl, r8
 800ed56:	f1ba 0f00 	cmp.w	sl, #0
 800ed5a:	f1a5 0508 	sub.w	r5, r5, #8
 800ed5e:	dc77      	bgt.n	800ee50 <__kernel_rem_pio2+0x208>
 800ed60:	4658      	mov	r0, fp
 800ed62:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ed66:	f000 fac7 	bl	800f2f8 <scalbn>
 800ed6a:	ec57 6b10 	vmov	r6, r7, d0
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ed74:	4630      	mov	r0, r6
 800ed76:	4639      	mov	r1, r7
 800ed78:	f7f1 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ed7c:	ec41 0b10 	vmov	d0, r0, r1
 800ed80:	f000 fb3a 	bl	800f3f8 <floor>
 800ed84:	4b75      	ldr	r3, [pc, #468]	@ (800ef5c <__kernel_rem_pio2+0x314>)
 800ed86:	ec51 0b10 	vmov	r0, r1, d0
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f7f1 fc34 	bl	80005f8 <__aeabi_dmul>
 800ed90:	4602      	mov	r2, r0
 800ed92:	460b      	mov	r3, r1
 800ed94:	4630      	mov	r0, r6
 800ed96:	4639      	mov	r1, r7
 800ed98:	f7f1 fa76 	bl	8000288 <__aeabi_dsub>
 800ed9c:	460f      	mov	r7, r1
 800ed9e:	4606      	mov	r6, r0
 800eda0:	f7f1 feda 	bl	8000b58 <__aeabi_d2iz>
 800eda4:	9002      	str	r0, [sp, #8]
 800eda6:	f7f1 fbbd 	bl	8000524 <__aeabi_i2d>
 800edaa:	4602      	mov	r2, r0
 800edac:	460b      	mov	r3, r1
 800edae:	4630      	mov	r0, r6
 800edb0:	4639      	mov	r1, r7
 800edb2:	f7f1 fa69 	bl	8000288 <__aeabi_dsub>
 800edb6:	f1bb 0f00 	cmp.w	fp, #0
 800edba:	4606      	mov	r6, r0
 800edbc:	460f      	mov	r7, r1
 800edbe:	dd6c      	ble.n	800ee9a <__kernel_rem_pio2+0x252>
 800edc0:	f108 31ff 	add.w	r1, r8, #4294967295
 800edc4:	ab0c      	add	r3, sp, #48	@ 0x30
 800edc6:	9d02      	ldr	r5, [sp, #8]
 800edc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edcc:	f1cb 0018 	rsb	r0, fp, #24
 800edd0:	fa43 f200 	asr.w	r2, r3, r0
 800edd4:	4415      	add	r5, r2
 800edd6:	4082      	lsls	r2, r0
 800edd8:	1a9b      	subs	r3, r3, r2
 800edda:	aa0c      	add	r2, sp, #48	@ 0x30
 800eddc:	9502      	str	r5, [sp, #8]
 800edde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ede2:	f1cb 0217 	rsb	r2, fp, #23
 800ede6:	fa43 f902 	asr.w	r9, r3, r2
 800edea:	f1b9 0f00 	cmp.w	r9, #0
 800edee:	dd64      	ble.n	800eeba <__kernel_rem_pio2+0x272>
 800edf0:	9b02      	ldr	r3, [sp, #8]
 800edf2:	2200      	movs	r2, #0
 800edf4:	3301      	adds	r3, #1
 800edf6:	9302      	str	r3, [sp, #8]
 800edf8:	4615      	mov	r5, r2
 800edfa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800edfe:	4590      	cmp	r8, r2
 800ee00:	f300 80b8 	bgt.w	800ef74 <__kernel_rem_pio2+0x32c>
 800ee04:	f1bb 0f00 	cmp.w	fp, #0
 800ee08:	dd07      	ble.n	800ee1a <__kernel_rem_pio2+0x1d2>
 800ee0a:	f1bb 0f01 	cmp.w	fp, #1
 800ee0e:	f000 80bf 	beq.w	800ef90 <__kernel_rem_pio2+0x348>
 800ee12:	f1bb 0f02 	cmp.w	fp, #2
 800ee16:	f000 80c6 	beq.w	800efa6 <__kernel_rem_pio2+0x35e>
 800ee1a:	f1b9 0f02 	cmp.w	r9, #2
 800ee1e:	d14c      	bne.n	800eeba <__kernel_rem_pio2+0x272>
 800ee20:	4632      	mov	r2, r6
 800ee22:	463b      	mov	r3, r7
 800ee24:	494e      	ldr	r1, [pc, #312]	@ (800ef60 <__kernel_rem_pio2+0x318>)
 800ee26:	2000      	movs	r0, #0
 800ee28:	f7f1 fa2e 	bl	8000288 <__aeabi_dsub>
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	460f      	mov	r7, r1
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	d042      	beq.n	800eeba <__kernel_rem_pio2+0x272>
 800ee34:	4658      	mov	r0, fp
 800ee36:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ef50 <__kernel_rem_pio2+0x308>
 800ee3a:	f000 fa5d 	bl	800f2f8 <scalbn>
 800ee3e:	4630      	mov	r0, r6
 800ee40:	4639      	mov	r1, r7
 800ee42:	ec53 2b10 	vmov	r2, r3, d0
 800ee46:	f7f1 fa1f 	bl	8000288 <__aeabi_dsub>
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	460f      	mov	r7, r1
 800ee4e:	e034      	b.n	800eeba <__kernel_rem_pio2+0x272>
 800ee50:	4b44      	ldr	r3, [pc, #272]	@ (800ef64 <__kernel_rem_pio2+0x31c>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee58:	f7f1 fbce 	bl	80005f8 <__aeabi_dmul>
 800ee5c:	f7f1 fe7c 	bl	8000b58 <__aeabi_d2iz>
 800ee60:	f7f1 fb60 	bl	8000524 <__aeabi_i2d>
 800ee64:	4b40      	ldr	r3, [pc, #256]	@ (800ef68 <__kernel_rem_pio2+0x320>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	4606      	mov	r6, r0
 800ee6a:	460f      	mov	r7, r1
 800ee6c:	f7f1 fbc4 	bl	80005f8 <__aeabi_dmul>
 800ee70:	4602      	mov	r2, r0
 800ee72:	460b      	mov	r3, r1
 800ee74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee78:	f7f1 fa06 	bl	8000288 <__aeabi_dsub>
 800ee7c:	f7f1 fe6c 	bl	8000b58 <__aeabi_d2iz>
 800ee80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee84:	f849 0b04 	str.w	r0, [r9], #4
 800ee88:	4639      	mov	r1, r7
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7f1 f9fe 	bl	800028c <__adddf3>
 800ee90:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee98:	e75d      	b.n	800ed56 <__kernel_rem_pio2+0x10e>
 800ee9a:	d107      	bne.n	800eeac <__kernel_rem_pio2+0x264>
 800ee9c:	f108 33ff 	add.w	r3, r8, #4294967295
 800eea0:	aa0c      	add	r2, sp, #48	@ 0x30
 800eea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eea6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800eeaa:	e79e      	b.n	800edea <__kernel_rem_pio2+0x1a2>
 800eeac:	4b2f      	ldr	r3, [pc, #188]	@ (800ef6c <__kernel_rem_pio2+0x324>)
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f7f1 fe28 	bl	8000b04 <__aeabi_dcmpge>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d143      	bne.n	800ef40 <__kernel_rem_pio2+0x2f8>
 800eeb8:	4681      	mov	r9, r0
 800eeba:	2200      	movs	r2, #0
 800eebc:	2300      	movs	r3, #0
 800eebe:	4630      	mov	r0, r6
 800eec0:	4639      	mov	r1, r7
 800eec2:	f7f1 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f000 80bf 	beq.w	800f04a <__kernel_rem_pio2+0x402>
 800eecc:	f108 33ff 	add.w	r3, r8, #4294967295
 800eed0:	2200      	movs	r2, #0
 800eed2:	9900      	ldr	r1, [sp, #0]
 800eed4:	428b      	cmp	r3, r1
 800eed6:	da6e      	bge.n	800efb6 <__kernel_rem_pio2+0x36e>
 800eed8:	2a00      	cmp	r2, #0
 800eeda:	f000 8089 	beq.w	800eff0 <__kernel_rem_pio2+0x3a8>
 800eede:	f108 38ff 	add.w	r8, r8, #4294967295
 800eee2:	ab0c      	add	r3, sp, #48	@ 0x30
 800eee4:	f1ab 0b18 	sub.w	fp, fp, #24
 800eee8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d0f6      	beq.n	800eede <__kernel_rem_pio2+0x296>
 800eef0:	4658      	mov	r0, fp
 800eef2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ef50 <__kernel_rem_pio2+0x308>
 800eef6:	f000 f9ff 	bl	800f2f8 <scalbn>
 800eefa:	f108 0301 	add.w	r3, r8, #1
 800eefe:	00da      	lsls	r2, r3, #3
 800ef00:	9205      	str	r2, [sp, #20]
 800ef02:	ec55 4b10 	vmov	r4, r5, d0
 800ef06:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ef08:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ef64 <__kernel_rem_pio2+0x31c>
 800ef0c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ef10:	4646      	mov	r6, r8
 800ef12:	f04f 0a00 	mov.w	sl, #0
 800ef16:	2e00      	cmp	r6, #0
 800ef18:	f280 80cf 	bge.w	800f0ba <__kernel_rem_pio2+0x472>
 800ef1c:	4644      	mov	r4, r8
 800ef1e:	2c00      	cmp	r4, #0
 800ef20:	f2c0 80fd 	blt.w	800f11e <__kernel_rem_pio2+0x4d6>
 800ef24:	4b12      	ldr	r3, [pc, #72]	@ (800ef70 <__kernel_rem_pio2+0x328>)
 800ef26:	461f      	mov	r7, r3
 800ef28:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ef2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef2e:	9306      	str	r3, [sp, #24]
 800ef30:	f04f 0a00 	mov.w	sl, #0
 800ef34:	f04f 0b00 	mov.w	fp, #0
 800ef38:	2600      	movs	r6, #0
 800ef3a:	eba8 0504 	sub.w	r5, r8, r4
 800ef3e:	e0e2      	b.n	800f106 <__kernel_rem_pio2+0x4be>
 800ef40:	f04f 0902 	mov.w	r9, #2
 800ef44:	e754      	b.n	800edf0 <__kernel_rem_pio2+0x1a8>
 800ef46:	bf00      	nop
	...
 800ef54:	3ff00000 	.word	0x3ff00000
 800ef58:	0800fc40 	.word	0x0800fc40
 800ef5c:	40200000 	.word	0x40200000
 800ef60:	3ff00000 	.word	0x3ff00000
 800ef64:	3e700000 	.word	0x3e700000
 800ef68:	41700000 	.word	0x41700000
 800ef6c:	3fe00000 	.word	0x3fe00000
 800ef70:	0800fc00 	.word	0x0800fc00
 800ef74:	f854 3b04 	ldr.w	r3, [r4], #4
 800ef78:	b945      	cbnz	r5, 800ef8c <__kernel_rem_pio2+0x344>
 800ef7a:	b123      	cbz	r3, 800ef86 <__kernel_rem_pio2+0x33e>
 800ef7c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ef80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef84:	2301      	movs	r3, #1
 800ef86:	3201      	adds	r2, #1
 800ef88:	461d      	mov	r5, r3
 800ef8a:	e738      	b.n	800edfe <__kernel_rem_pio2+0x1b6>
 800ef8c:	1acb      	subs	r3, r1, r3
 800ef8e:	e7f7      	b.n	800ef80 <__kernel_rem_pio2+0x338>
 800ef90:	f108 32ff 	add.w	r2, r8, #4294967295
 800ef94:	ab0c      	add	r3, sp, #48	@ 0x30
 800ef96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef9e:	a90c      	add	r1, sp, #48	@ 0x30
 800efa0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800efa4:	e739      	b.n	800ee1a <__kernel_rem_pio2+0x1d2>
 800efa6:	f108 32ff 	add.w	r2, r8, #4294967295
 800efaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800efac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800efb4:	e7f3      	b.n	800ef9e <__kernel_rem_pio2+0x356>
 800efb6:	a90c      	add	r1, sp, #48	@ 0x30
 800efb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800efbc:	3b01      	subs	r3, #1
 800efbe:	430a      	orrs	r2, r1
 800efc0:	e787      	b.n	800eed2 <__kernel_rem_pio2+0x28a>
 800efc2:	3401      	adds	r4, #1
 800efc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800efc8:	2a00      	cmp	r2, #0
 800efca:	d0fa      	beq.n	800efc2 <__kernel_rem_pio2+0x37a>
 800efcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800efd2:	eb0d 0503 	add.w	r5, sp, r3
 800efd6:	9b06      	ldr	r3, [sp, #24]
 800efd8:	aa20      	add	r2, sp, #128	@ 0x80
 800efda:	4443      	add	r3, r8
 800efdc:	f108 0701 	add.w	r7, r8, #1
 800efe0:	3d98      	subs	r5, #152	@ 0x98
 800efe2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800efe6:	4444      	add	r4, r8
 800efe8:	42bc      	cmp	r4, r7
 800efea:	da04      	bge.n	800eff6 <__kernel_rem_pio2+0x3ae>
 800efec:	46a0      	mov	r8, r4
 800efee:	e6a2      	b.n	800ed36 <__kernel_rem_pio2+0xee>
 800eff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eff2:	2401      	movs	r4, #1
 800eff4:	e7e6      	b.n	800efc4 <__kernel_rem_pio2+0x37c>
 800eff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800effc:	f7f1 fa92 	bl	8000524 <__aeabi_i2d>
 800f000:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800f2c8 <__kernel_rem_pio2+0x680>
 800f004:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f008:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f00c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f010:	46b2      	mov	sl, r6
 800f012:	f04f 0800 	mov.w	r8, #0
 800f016:	9b05      	ldr	r3, [sp, #20]
 800f018:	4598      	cmp	r8, r3
 800f01a:	dd05      	ble.n	800f028 <__kernel_rem_pio2+0x3e0>
 800f01c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f020:	3701      	adds	r7, #1
 800f022:	eca5 7b02 	vstmia	r5!, {d7}
 800f026:	e7df      	b.n	800efe8 <__kernel_rem_pio2+0x3a0>
 800f028:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f02c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f030:	f7f1 fae2 	bl	80005f8 <__aeabi_dmul>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f03c:	f7f1 f926 	bl	800028c <__adddf3>
 800f040:	f108 0801 	add.w	r8, r8, #1
 800f044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f048:	e7e5      	b.n	800f016 <__kernel_rem_pio2+0x3ce>
 800f04a:	f1cb 0000 	rsb	r0, fp, #0
 800f04e:	ec47 6b10 	vmov	d0, r6, r7
 800f052:	f000 f951 	bl	800f2f8 <scalbn>
 800f056:	ec55 4b10 	vmov	r4, r5, d0
 800f05a:	4b9d      	ldr	r3, [pc, #628]	@ (800f2d0 <__kernel_rem_pio2+0x688>)
 800f05c:	2200      	movs	r2, #0
 800f05e:	4620      	mov	r0, r4
 800f060:	4629      	mov	r1, r5
 800f062:	f7f1 fd4f 	bl	8000b04 <__aeabi_dcmpge>
 800f066:	b300      	cbz	r0, 800f0aa <__kernel_rem_pio2+0x462>
 800f068:	4b9a      	ldr	r3, [pc, #616]	@ (800f2d4 <__kernel_rem_pio2+0x68c>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	4620      	mov	r0, r4
 800f06e:	4629      	mov	r1, r5
 800f070:	f7f1 fac2 	bl	80005f8 <__aeabi_dmul>
 800f074:	f7f1 fd70 	bl	8000b58 <__aeabi_d2iz>
 800f078:	4606      	mov	r6, r0
 800f07a:	f7f1 fa53 	bl	8000524 <__aeabi_i2d>
 800f07e:	4b94      	ldr	r3, [pc, #592]	@ (800f2d0 <__kernel_rem_pio2+0x688>)
 800f080:	2200      	movs	r2, #0
 800f082:	f7f1 fab9 	bl	80005f8 <__aeabi_dmul>
 800f086:	460b      	mov	r3, r1
 800f088:	4602      	mov	r2, r0
 800f08a:	4629      	mov	r1, r5
 800f08c:	4620      	mov	r0, r4
 800f08e:	f7f1 f8fb 	bl	8000288 <__aeabi_dsub>
 800f092:	f7f1 fd61 	bl	8000b58 <__aeabi_d2iz>
 800f096:	ab0c      	add	r3, sp, #48	@ 0x30
 800f098:	f10b 0b18 	add.w	fp, fp, #24
 800f09c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f0a0:	f108 0801 	add.w	r8, r8, #1
 800f0a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f0a8:	e722      	b.n	800eef0 <__kernel_rem_pio2+0x2a8>
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	4629      	mov	r1, r5
 800f0ae:	f7f1 fd53 	bl	8000b58 <__aeabi_d2iz>
 800f0b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f0b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f0b8:	e71a      	b.n	800eef0 <__kernel_rem_pio2+0x2a8>
 800f0ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800f0bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f0c0:	f7f1 fa30 	bl	8000524 <__aeabi_i2d>
 800f0c4:	4622      	mov	r2, r4
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	f7f1 fa96 	bl	80005f8 <__aeabi_dmul>
 800f0cc:	4652      	mov	r2, sl
 800f0ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f0d2:	465b      	mov	r3, fp
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	3e01      	subs	r6, #1
 800f0de:	4604      	mov	r4, r0
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	e718      	b.n	800ef16 <__kernel_rem_pio2+0x2ce>
 800f0e4:	9906      	ldr	r1, [sp, #24]
 800f0e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f0ea:	9106      	str	r1, [sp, #24]
 800f0ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f0f0:	f7f1 fa82 	bl	80005f8 <__aeabi_dmul>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4650      	mov	r0, sl
 800f0fa:	4659      	mov	r1, fp
 800f0fc:	f7f1 f8c6 	bl	800028c <__adddf3>
 800f100:	3601      	adds	r6, #1
 800f102:	4682      	mov	sl, r0
 800f104:	468b      	mov	fp, r1
 800f106:	9b00      	ldr	r3, [sp, #0]
 800f108:	429e      	cmp	r6, r3
 800f10a:	dc01      	bgt.n	800f110 <__kernel_rem_pio2+0x4c8>
 800f10c:	42b5      	cmp	r5, r6
 800f10e:	dae9      	bge.n	800f0e4 <__kernel_rem_pio2+0x49c>
 800f110:	ab48      	add	r3, sp, #288	@ 0x120
 800f112:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f116:	e9c5 ab00 	strd	sl, fp, [r5]
 800f11a:	3c01      	subs	r4, #1
 800f11c:	e6ff      	b.n	800ef1e <__kernel_rem_pio2+0x2d6>
 800f11e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f120:	2b02      	cmp	r3, #2
 800f122:	dc0b      	bgt.n	800f13c <__kernel_rem_pio2+0x4f4>
 800f124:	2b00      	cmp	r3, #0
 800f126:	dc39      	bgt.n	800f19c <__kernel_rem_pio2+0x554>
 800f128:	d05d      	beq.n	800f1e6 <__kernel_rem_pio2+0x59e>
 800f12a:	9b02      	ldr	r3, [sp, #8]
 800f12c:	f003 0007 	and.w	r0, r3, #7
 800f130:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f134:	ecbd 8b02 	vpop	{d8}
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f13e:	2b03      	cmp	r3, #3
 800f140:	d1f3      	bne.n	800f12a <__kernel_rem_pio2+0x4e2>
 800f142:	9b05      	ldr	r3, [sp, #20]
 800f144:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f148:	eb0d 0403 	add.w	r4, sp, r3
 800f14c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f150:	4625      	mov	r5, r4
 800f152:	46c2      	mov	sl, r8
 800f154:	f1ba 0f00 	cmp.w	sl, #0
 800f158:	f1a5 0508 	sub.w	r5, r5, #8
 800f15c:	dc6b      	bgt.n	800f236 <__kernel_rem_pio2+0x5ee>
 800f15e:	4645      	mov	r5, r8
 800f160:	2d01      	cmp	r5, #1
 800f162:	f1a4 0408 	sub.w	r4, r4, #8
 800f166:	f300 8087 	bgt.w	800f278 <__kernel_rem_pio2+0x630>
 800f16a:	9c05      	ldr	r4, [sp, #20]
 800f16c:	ab48      	add	r3, sp, #288	@ 0x120
 800f16e:	441c      	add	r4, r3
 800f170:	2000      	movs	r0, #0
 800f172:	2100      	movs	r1, #0
 800f174:	f1b8 0f01 	cmp.w	r8, #1
 800f178:	f300 809c 	bgt.w	800f2b4 <__kernel_rem_pio2+0x66c>
 800f17c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f180:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f184:	f1b9 0f00 	cmp.w	r9, #0
 800f188:	f040 80a6 	bne.w	800f2d8 <__kernel_rem_pio2+0x690>
 800f18c:	9b04      	ldr	r3, [sp, #16]
 800f18e:	e9c3 7800 	strd	r7, r8, [r3]
 800f192:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f196:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f19a:	e7c6      	b.n	800f12a <__kernel_rem_pio2+0x4e2>
 800f19c:	9d05      	ldr	r5, [sp, #20]
 800f19e:	ab48      	add	r3, sp, #288	@ 0x120
 800f1a0:	441d      	add	r5, r3
 800f1a2:	4644      	mov	r4, r8
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	2c00      	cmp	r4, #0
 800f1aa:	da35      	bge.n	800f218 <__kernel_rem_pio2+0x5d0>
 800f1ac:	f1b9 0f00 	cmp.w	r9, #0
 800f1b0:	d038      	beq.n	800f224 <__kernel_rem_pio2+0x5dc>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1b8:	9c04      	ldr	r4, [sp, #16]
 800f1ba:	e9c4 2300 	strd	r2, r3, [r4]
 800f1be:	4602      	mov	r2, r0
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f1c6:	f7f1 f85f 	bl	8000288 <__aeabi_dsub>
 800f1ca:	ad4a      	add	r5, sp, #296	@ 0x128
 800f1cc:	2401      	movs	r4, #1
 800f1ce:	45a0      	cmp	r8, r4
 800f1d0:	da2b      	bge.n	800f22a <__kernel_rem_pio2+0x5e2>
 800f1d2:	f1b9 0f00 	cmp.w	r9, #0
 800f1d6:	d002      	beq.n	800f1de <__kernel_rem_pio2+0x596>
 800f1d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1dc:	4619      	mov	r1, r3
 800f1de:	9b04      	ldr	r3, [sp, #16]
 800f1e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f1e4:	e7a1      	b.n	800f12a <__kernel_rem_pio2+0x4e2>
 800f1e6:	9c05      	ldr	r4, [sp, #20]
 800f1e8:	ab48      	add	r3, sp, #288	@ 0x120
 800f1ea:	441c      	add	r4, r3
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	f1b8 0f00 	cmp.w	r8, #0
 800f1f4:	da09      	bge.n	800f20a <__kernel_rem_pio2+0x5c2>
 800f1f6:	f1b9 0f00 	cmp.w	r9, #0
 800f1fa:	d002      	beq.n	800f202 <__kernel_rem_pio2+0x5ba>
 800f1fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f200:	4619      	mov	r1, r3
 800f202:	9b04      	ldr	r3, [sp, #16]
 800f204:	e9c3 0100 	strd	r0, r1, [r3]
 800f208:	e78f      	b.n	800f12a <__kernel_rem_pio2+0x4e2>
 800f20a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f20e:	f7f1 f83d 	bl	800028c <__adddf3>
 800f212:	f108 38ff 	add.w	r8, r8, #4294967295
 800f216:	e7eb      	b.n	800f1f0 <__kernel_rem_pio2+0x5a8>
 800f218:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f21c:	f7f1 f836 	bl	800028c <__adddf3>
 800f220:	3c01      	subs	r4, #1
 800f222:	e7c1      	b.n	800f1a8 <__kernel_rem_pio2+0x560>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	e7c6      	b.n	800f1b8 <__kernel_rem_pio2+0x570>
 800f22a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f22e:	f7f1 f82d 	bl	800028c <__adddf3>
 800f232:	3401      	adds	r4, #1
 800f234:	e7cb      	b.n	800f1ce <__kernel_rem_pio2+0x586>
 800f236:	ed95 7b00 	vldr	d7, [r5]
 800f23a:	ed8d 7b00 	vstr	d7, [sp]
 800f23e:	ed95 7b02 	vldr	d7, [r5, #8]
 800f242:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f246:	ec53 2b17 	vmov	r2, r3, d7
 800f24a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f24e:	f7f1 f81d 	bl	800028c <__adddf3>
 800f252:	4602      	mov	r2, r0
 800f254:	460b      	mov	r3, r1
 800f256:	4606      	mov	r6, r0
 800f258:	460f      	mov	r7, r1
 800f25a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f25e:	f7f1 f813 	bl	8000288 <__aeabi_dsub>
 800f262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f266:	f7f1 f811 	bl	800028c <__adddf3>
 800f26a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f26e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f272:	e9c5 6700 	strd	r6, r7, [r5]
 800f276:	e76d      	b.n	800f154 <__kernel_rem_pio2+0x50c>
 800f278:	ed94 7b00 	vldr	d7, [r4]
 800f27c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f280:	ec51 0b17 	vmov	r0, r1, d7
 800f284:	4652      	mov	r2, sl
 800f286:	465b      	mov	r3, fp
 800f288:	ed8d 7b00 	vstr	d7, [sp]
 800f28c:	f7f0 fffe 	bl	800028c <__adddf3>
 800f290:	4602      	mov	r2, r0
 800f292:	460b      	mov	r3, r1
 800f294:	4606      	mov	r6, r0
 800f296:	460f      	mov	r7, r1
 800f298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f29c:	f7f0 fff4 	bl	8000288 <__aeabi_dsub>
 800f2a0:	4652      	mov	r2, sl
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	f7f0 fff2 	bl	800028c <__adddf3>
 800f2a8:	3d01      	subs	r5, #1
 800f2aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f2ae:	e9c4 6700 	strd	r6, r7, [r4]
 800f2b2:	e755      	b.n	800f160 <__kernel_rem_pio2+0x518>
 800f2b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f2b8:	f7f0 ffe8 	bl	800028c <__adddf3>
 800f2bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800f2c0:	e758      	b.n	800f174 <__kernel_rem_pio2+0x52c>
 800f2c2:	bf00      	nop
 800f2c4:	f3af 8000 	nop.w
	...
 800f2d0:	41700000 	.word	0x41700000
 800f2d4:	3e700000 	.word	0x3e700000
 800f2d8:	9b04      	ldr	r3, [sp, #16]
 800f2da:	9a04      	ldr	r2, [sp, #16]
 800f2dc:	601f      	str	r7, [r3, #0]
 800f2de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f2e2:	605c      	str	r4, [r3, #4]
 800f2e4:	609d      	str	r5, [r3, #8]
 800f2e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f2ea:	60d3      	str	r3, [r2, #12]
 800f2ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2f0:	6110      	str	r0, [r2, #16]
 800f2f2:	6153      	str	r3, [r2, #20]
 800f2f4:	e719      	b.n	800f12a <__kernel_rem_pio2+0x4e2>
 800f2f6:	bf00      	nop

0800f2f8 <scalbn>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	ec55 4b10 	vmov	r4, r5, d0
 800f2fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f302:	4606      	mov	r6, r0
 800f304:	462b      	mov	r3, r5
 800f306:	b991      	cbnz	r1, 800f32e <scalbn+0x36>
 800f308:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f30c:	4323      	orrs	r3, r4
 800f30e:	d03d      	beq.n	800f38c <scalbn+0x94>
 800f310:	4b35      	ldr	r3, [pc, #212]	@ (800f3e8 <scalbn+0xf0>)
 800f312:	4620      	mov	r0, r4
 800f314:	4629      	mov	r1, r5
 800f316:	2200      	movs	r2, #0
 800f318:	f7f1 f96e 	bl	80005f8 <__aeabi_dmul>
 800f31c:	4b33      	ldr	r3, [pc, #204]	@ (800f3ec <scalbn+0xf4>)
 800f31e:	429e      	cmp	r6, r3
 800f320:	4604      	mov	r4, r0
 800f322:	460d      	mov	r5, r1
 800f324:	da0f      	bge.n	800f346 <scalbn+0x4e>
 800f326:	a328      	add	r3, pc, #160	@ (adr r3, 800f3c8 <scalbn+0xd0>)
 800f328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32c:	e01e      	b.n	800f36c <scalbn+0x74>
 800f32e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f332:	4291      	cmp	r1, r2
 800f334:	d10b      	bne.n	800f34e <scalbn+0x56>
 800f336:	4622      	mov	r2, r4
 800f338:	4620      	mov	r0, r4
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f0 ffa6 	bl	800028c <__adddf3>
 800f340:	4604      	mov	r4, r0
 800f342:	460d      	mov	r5, r1
 800f344:	e022      	b.n	800f38c <scalbn+0x94>
 800f346:	460b      	mov	r3, r1
 800f348:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f34c:	3936      	subs	r1, #54	@ 0x36
 800f34e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f352:	4296      	cmp	r6, r2
 800f354:	dd0d      	ble.n	800f372 <scalbn+0x7a>
 800f356:	2d00      	cmp	r5, #0
 800f358:	a11d      	add	r1, pc, #116	@ (adr r1, 800f3d0 <scalbn+0xd8>)
 800f35a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f35e:	da02      	bge.n	800f366 <scalbn+0x6e>
 800f360:	a11d      	add	r1, pc, #116	@ (adr r1, 800f3d8 <scalbn+0xe0>)
 800f362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f366:	a31a      	add	r3, pc, #104	@ (adr r3, 800f3d0 <scalbn+0xd8>)
 800f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36c:	f7f1 f944 	bl	80005f8 <__aeabi_dmul>
 800f370:	e7e6      	b.n	800f340 <scalbn+0x48>
 800f372:	1872      	adds	r2, r6, r1
 800f374:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f378:	428a      	cmp	r2, r1
 800f37a:	dcec      	bgt.n	800f356 <scalbn+0x5e>
 800f37c:	2a00      	cmp	r2, #0
 800f37e:	dd08      	ble.n	800f392 <scalbn+0x9a>
 800f380:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f384:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f388:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f38c:	ec45 4b10 	vmov	d0, r4, r5
 800f390:	bd70      	pop	{r4, r5, r6, pc}
 800f392:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f396:	da08      	bge.n	800f3aa <scalbn+0xb2>
 800f398:	2d00      	cmp	r5, #0
 800f39a:	a10b      	add	r1, pc, #44	@ (adr r1, 800f3c8 <scalbn+0xd0>)
 800f39c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a0:	dac1      	bge.n	800f326 <scalbn+0x2e>
 800f3a2:	a10f      	add	r1, pc, #60	@ (adr r1, 800f3e0 <scalbn+0xe8>)
 800f3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a8:	e7bd      	b.n	800f326 <scalbn+0x2e>
 800f3aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f3ae:	3236      	adds	r2, #54	@ 0x36
 800f3b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f3b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f0 <scalbn+0xf8>)
 800f3bc:	4629      	mov	r1, r5
 800f3be:	2200      	movs	r2, #0
 800f3c0:	e7d4      	b.n	800f36c <scalbn+0x74>
 800f3c2:	bf00      	nop
 800f3c4:	f3af 8000 	nop.w
 800f3c8:	c2f8f359 	.word	0xc2f8f359
 800f3cc:	01a56e1f 	.word	0x01a56e1f
 800f3d0:	8800759c 	.word	0x8800759c
 800f3d4:	7e37e43c 	.word	0x7e37e43c
 800f3d8:	8800759c 	.word	0x8800759c
 800f3dc:	fe37e43c 	.word	0xfe37e43c
 800f3e0:	c2f8f359 	.word	0xc2f8f359
 800f3e4:	81a56e1f 	.word	0x81a56e1f
 800f3e8:	43500000 	.word	0x43500000
 800f3ec:	ffff3cb0 	.word	0xffff3cb0
 800f3f0:	3c900000 	.word	0x3c900000
 800f3f4:	00000000 	.word	0x00000000

0800f3f8 <floor>:
 800f3f8:	ec51 0b10 	vmov	r0, r1, d0
 800f3fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f404:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f408:	2e13      	cmp	r6, #19
 800f40a:	460c      	mov	r4, r1
 800f40c:	4605      	mov	r5, r0
 800f40e:	4680      	mov	r8, r0
 800f410:	dc34      	bgt.n	800f47c <floor+0x84>
 800f412:	2e00      	cmp	r6, #0
 800f414:	da17      	bge.n	800f446 <floor+0x4e>
 800f416:	a332      	add	r3, pc, #200	@ (adr r3, 800f4e0 <floor+0xe8>)
 800f418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41c:	f7f0 ff36 	bl	800028c <__adddf3>
 800f420:	2200      	movs	r2, #0
 800f422:	2300      	movs	r3, #0
 800f424:	f7f1 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 800f428:	b150      	cbz	r0, 800f440 <floor+0x48>
 800f42a:	2c00      	cmp	r4, #0
 800f42c:	da55      	bge.n	800f4da <floor+0xe2>
 800f42e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f432:	432c      	orrs	r4, r5
 800f434:	2500      	movs	r5, #0
 800f436:	42ac      	cmp	r4, r5
 800f438:	4c2b      	ldr	r4, [pc, #172]	@ (800f4e8 <floor+0xf0>)
 800f43a:	bf08      	it	eq
 800f43c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f440:	4621      	mov	r1, r4
 800f442:	4628      	mov	r0, r5
 800f444:	e023      	b.n	800f48e <floor+0x96>
 800f446:	4f29      	ldr	r7, [pc, #164]	@ (800f4ec <floor+0xf4>)
 800f448:	4137      	asrs	r7, r6
 800f44a:	ea01 0307 	and.w	r3, r1, r7
 800f44e:	4303      	orrs	r3, r0
 800f450:	d01d      	beq.n	800f48e <floor+0x96>
 800f452:	a323      	add	r3, pc, #140	@ (adr r3, 800f4e0 <floor+0xe8>)
 800f454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f458:	f7f0 ff18 	bl	800028c <__adddf3>
 800f45c:	2200      	movs	r2, #0
 800f45e:	2300      	movs	r3, #0
 800f460:	f7f1 fb5a 	bl	8000b18 <__aeabi_dcmpgt>
 800f464:	2800      	cmp	r0, #0
 800f466:	d0eb      	beq.n	800f440 <floor+0x48>
 800f468:	2c00      	cmp	r4, #0
 800f46a:	bfbe      	ittt	lt
 800f46c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f470:	4133      	asrlt	r3, r6
 800f472:	18e4      	addlt	r4, r4, r3
 800f474:	ea24 0407 	bic.w	r4, r4, r7
 800f478:	2500      	movs	r5, #0
 800f47a:	e7e1      	b.n	800f440 <floor+0x48>
 800f47c:	2e33      	cmp	r6, #51	@ 0x33
 800f47e:	dd0a      	ble.n	800f496 <floor+0x9e>
 800f480:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f484:	d103      	bne.n	800f48e <floor+0x96>
 800f486:	4602      	mov	r2, r0
 800f488:	460b      	mov	r3, r1
 800f48a:	f7f0 feff 	bl	800028c <__adddf3>
 800f48e:	ec41 0b10 	vmov	d0, r0, r1
 800f492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f496:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f49a:	f04f 37ff 	mov.w	r7, #4294967295
 800f49e:	40df      	lsrs	r7, r3
 800f4a0:	4207      	tst	r7, r0
 800f4a2:	d0f4      	beq.n	800f48e <floor+0x96>
 800f4a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800f4e0 <floor+0xe8>)
 800f4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4aa:	f7f0 feef 	bl	800028c <__adddf3>
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f7f1 fb31 	bl	8000b18 <__aeabi_dcmpgt>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d0c2      	beq.n	800f440 <floor+0x48>
 800f4ba:	2c00      	cmp	r4, #0
 800f4bc:	da0a      	bge.n	800f4d4 <floor+0xdc>
 800f4be:	2e14      	cmp	r6, #20
 800f4c0:	d101      	bne.n	800f4c6 <floor+0xce>
 800f4c2:	3401      	adds	r4, #1
 800f4c4:	e006      	b.n	800f4d4 <floor+0xdc>
 800f4c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	40b3      	lsls	r3, r6
 800f4ce:	441d      	add	r5, r3
 800f4d0:	4545      	cmp	r5, r8
 800f4d2:	d3f6      	bcc.n	800f4c2 <floor+0xca>
 800f4d4:	ea25 0507 	bic.w	r5, r5, r7
 800f4d8:	e7b2      	b.n	800f440 <floor+0x48>
 800f4da:	2500      	movs	r5, #0
 800f4dc:	462c      	mov	r4, r5
 800f4de:	e7af      	b.n	800f440 <floor+0x48>
 800f4e0:	8800759c 	.word	0x8800759c
 800f4e4:	7e37e43c 	.word	0x7e37e43c
 800f4e8:	bff00000 	.word	0xbff00000
 800f4ec:	000fffff 	.word	0x000fffff

0800f4f0 <_init>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr

0800f4fc <_fini>:
 800f4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fe:	bf00      	nop
 800f500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f502:	bc08      	pop	{r3}
 800f504:	469e      	mov	lr, r3
 800f506:	4770      	bx	lr
