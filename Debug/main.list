
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08009238  08009238  0000a238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800967c  0800967c  0000b1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009684  08009684  0000b1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  0000a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800968c  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e4  2**0
                  CONTENTS
 10 .bss          00000454  200001e8  200001e8  0000b1e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000063c  2000063c  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d36c  00000000  00000000  0000b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6b  00000000  00000000  00018580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  0001a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a88  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000290f  00000000  00000000  0001bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef85  00000000  00000000  0001e4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd88d  00000000  00000000  0002d484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fad11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dac  00000000  00000000  000fad54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000ffb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800921c 	.word	0x0800921c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800921c 	.word	0x0800921c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Motor_Init>:

#define MAX_PWM 1000 // Maximum PWM value
#define CPR 2970 // Counts per revolution of the encoder
#define k 0.1 // Motor characteristic constant (RPS per PWM)
// MOTOR
void Motor_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // Init PWM1 -> RPWM
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <Motor_Init+0x48>)
 8000fec:	f002 fbcc 	bl	8003788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // Init PWM2 -> LPWM
 8000ff0:	210c      	movs	r1, #12
 8000ff2:	480e      	ldr	r0, [pc, #56]	@ (800102c <Motor_Init+0x48>)
 8000ff4:	f002 fbc8 	bl	8003788 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Init PWM3 -> RPWM
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	480d      	ldr	r0, [pc, #52]	@ (8001030 <Motor_Init+0x4c>)
 8000ffc:	f002 fbc4 	bl	8003788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Init PWM4 -> LPWM
 8001000:	210c      	movs	r1, #12
 8001002:	480b      	ldr	r0, [pc, #44]	@ (8001030 <Motor_Init+0x4c>)
 8001004:	f002 fbc0 	bl	8003788 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 8001008:	2100      	movs	r1, #0
 800100a:	480a      	ldr	r0, [pc, #40]	@ (8001034 <Motor_Init+0x50>)
 800100c:	f002 fbbc 	bl	8003788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 8001010:	2104      	movs	r1, #4
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <Motor_Init+0x50>)
 8001014:	f002 fbb8 	bl	8003788 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 8001018:	2100      	movs	r1, #0
 800101a:	4807      	ldr	r0, [pc, #28]	@ (8001038 <Motor_Init+0x54>)
 800101c:	f002 fbb4 	bl	8003788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 8001020:	2104      	movs	r1, #4
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <Motor_Init+0x54>)
 8001024:	f002 fbb0 	bl	8003788 <HAL_TIM_PWM_Start>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000338 	.word	0x20000338
 8001030:	200002a8 	.word	0x200002a8
 8001034:	20000410 	.word	0x20000410
 8001038:	20000458 	.word	0x20000458

0800103c <Motor_Control1>:

void Motor_Control1(uint8_t direction, uint16_t speed) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	80bb      	strh	r3, [r7, #4]
	// Speed limit -> đến 1000
	if (speed > MAX_SPEED)
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <Motor_Control1+0x70>)
 8001050:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001054:	4293      	cmp	r3, r2
 8001056:	dd03      	ble.n	8001060 <Motor_Control1+0x24>
		speed = MAX_SPEED;
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <Motor_Control1+0x70>)
 800105a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105e:	80bb      	strh	r3, [r7, #4]
	// Clockwise
	if (direction == 1) {
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <Motor_Control1+0x3c>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, speed);
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <Motor_Control1+0x74>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <Motor_Control1+0x74>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	639a      	str	r2, [r3, #56]	@ 0x38
	// Stop
	} else {
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
	}
}
 8001076:	e013      	b.n	80010a0 <Motor_Control1+0x64>
	} else if (direction == 2) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d108      	bne.n	8001090 <Motor_Control1+0x54>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <Motor_Control1+0x74>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, speed);
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <Motor_Control1+0x74>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	88ba      	ldrh	r2, [r7, #4]
 800108c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800108e:	e007      	b.n	80010a0 <Motor_Control1+0x64>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <Motor_Control1+0x74>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <Motor_Control1+0x74>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000458 	.word	0x20000458

080010b4 <Encoder_Init>:


// ENCODER


void Encoder_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Init Timer 1 -> mode Encoder
 80010b8:	213c      	movs	r1, #60	@ 0x3c
 80010ba:	4808      	ldr	r0, [pc, #32]	@ (80010dc <Encoder_Init+0x28>)
 80010bc:	f002 fcd2 	bl	8003a64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Init Timer 3 -> mode Encoder
 80010c0:	213c      	movs	r1, #60	@ 0x3c
 80010c2:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <Encoder_Init+0x2c>)
 80010c4:	f002 fcce 	bl	8003a64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Init Timer 5 -> mode Encoder
 80010c8:	213c      	movs	r1, #60	@ 0x3c
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <Encoder_Init+0x30>)
 80010cc:	f002 fcca 	bl	8003a64 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL); // Init Timer 8 -> mode Encoder
 80010d0:	213c      	movs	r1, #60	@ 0x3c
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <Encoder_Init+0x34>)
 80010d4:	f002 fcc6 	bl	8003a64 <HAL_TIM_Encoder_Start>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000260 	.word	0x20000260
 80010e0:	200002f0 	.word	0x200002f0
 80010e4:	20000380 	.word	0x20000380
 80010e8:	200003c8 	.word	0x200003c8

080010ec <Read_Encoder1>:
int16_t Read_Encoder1(void) {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim1);
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <Read_Encoder1+0x18>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	b21b      	sxth	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000260 	.word	0x20000260

08001108 <Reset_Encoder1>:
void Reset_Encoder1(void) {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <Reset_Encoder1+0x18>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000260 	.word	0x20000260

08001124 <Read_Encoder2>:
int16_t Read_Encoder2(void) {
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim3);
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <Read_Encoder2+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112e:	b21b      	sxth	r3, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	200002f0 	.word	0x200002f0

08001140 <Reset_Encoder2>:
void Reset_Encoder2(void) {
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <Reset_Encoder2+0x18>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200002f0 	.word	0x200002f0

0800115c <Read_Encoder3>:
int16_t Read_Encoder3(void) {
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5);
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <Read_Encoder3+0x18>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001166:	b21b      	sxth	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000380 	.word	0x20000380

08001178 <Reset_Encoder3>:
void Reset_Encoder3(void) {
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 800117c:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <Reset_Encoder3+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000380 	.word	0x20000380

08001194 <Read_Encoder4>:
int16_t Read_Encoder4(void) {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim8);
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <Read_Encoder4+0x18>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	b21b      	sxth	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200003c8 	.word	0x200003c8

080011b0 <Reset_Encoder4>:
void Reset_Encoder4(void) {
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <Reset_Encoder4+0x18>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200003c8 	.word	0x200003c8

080011cc <readEncoder>:

void readEncoder(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	positionMotor1 = Read_Encoder1();
 80011d0:	f7ff ff8c 	bl	80010ec <Read_Encoder1>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <readEncoder+0x40>)
 80011da:	801a      	strh	r2, [r3, #0]
	positionMotor2 = Read_Encoder2();
 80011dc:	f7ff ffa2 	bl	8001124 <Read_Encoder2>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <readEncoder+0x44>)
 80011e6:	801a      	strh	r2, [r3, #0]
	positionMotor3 = Read_Encoder3();
 80011e8:	f7ff ffb8 	bl	800115c <Read_Encoder3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <readEncoder+0x48>)
 80011f2:	801a      	strh	r2, [r3, #0]
	positionMotor4 = Read_Encoder4();
 80011f4:	f7ff ffce 	bl	8001194 <Read_Encoder4>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <readEncoder+0x4c>)
 80011fe:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	@ 0x64
 8001202:	f001 fb1b 	bl	800283c <HAL_Delay>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000204 	.word	0x20000204
 8001210:	20000206 	.word	0x20000206
 8001214:	20000208 	.word	0x20000208
 8001218:	2000020a 	.word	0x2000020a
 800121c:	00000000 	.word	0x00000000

08001220 <controlMotor>:
static double kalmanEstimate = 0.0; // Estimated velocity
static double kalmanErrorCovariance = 1.0; // Error covariance
static const double processNoise = 0.01; // Process noise covariance
static const double measurementNoise = 0.1; // Measurement noise covariance
float ang =0.0;
void controlMotor(float velIN,float velTAG,uint32_t deltaTime) {
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	ed87 0a03 	vstr	s0, [r7, #12]
 800122a:	edc7 0a02 	vstr	s1, [r7, #8]
 800122e:	6078      	str	r0, [r7, #4]
	   // Calculate the error
	    error = velTAG - velIN;
 8001230:	ed97 7a02 	vldr	s14, [r7, #8]
 8001234:	edd7 7a03 	vldr	s15, [r7, #12]
 8001238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	49a3      	ldr	r1, [pc, #652]	@ (80014d8 <controlMotor+0x2b8>)
 800124a:	e9c1 2300 	strd	r2, r3, [r1]

	    // Kalman Filter Prediction Step
	    // Predict the next state (velocity)
	    kalmanEstimate = kalmanEstimate; // No control input in this simple example
 800124e:	4ba3      	ldr	r3, [pc, #652]	@ (80014dc <controlMotor+0x2bc>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	49a1      	ldr	r1, [pc, #644]	@ (80014dc <controlMotor+0x2bc>)
 8001256:	e9c1 2300 	strd	r2, r3, [r1]
	    kalmanErrorCovariance += processNoise; // Update error covariance
 800125a:	4ba1      	ldr	r3, [pc, #644]	@ (80014e0 <controlMotor+0x2c0>)
 800125c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001260:	a399      	add	r3, pc, #612	@ (adr r3, 80014c8 <controlMotor+0x2a8>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	499c      	ldr	r1, [pc, #624]	@ (80014e0 <controlMotor+0x2c0>)
 8001270:	e9c1 2300 	strd	r2, r3, [r1]

	    // Kalman Filter Update Step
	    // Update the estimate with the new measurement
	    double kalmanGain = kalmanErrorCovariance / (kalmanErrorCovariance + measurementNoise);
 8001274:	4b9a      	ldr	r3, [pc, #616]	@ (80014e0 <controlMotor+0x2c0>)
 8001276:	e9d3 4500 	ldrd	r4, r5, [r3]
 800127a:	4b99      	ldr	r3, [pc, #612]	@ (80014e0 <controlMotor+0x2c0>)
 800127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001280:	a393      	add	r3, pc, #588	@ (adr r3, 80014d0 <controlMotor+0x2b0>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff f801 	bl	800028c <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff fadb 	bl	800084c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	    kalmanEstimate += kalmanGain * (velIN - kalmanEstimate); // Update estimate
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff f952 	bl	8000548 <__aeabi_f2d>
 80012a4:	4b8d      	ldr	r3, [pc, #564]	@ (80014dc <controlMotor+0x2bc>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7fe ffed 	bl	8000288 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	4b85      	ldr	r3, [pc, #532]	@ (80014dc <controlMotor+0x2bc>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7fe ffde 	bl	800028c <__adddf3>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4981      	ldr	r1, [pc, #516]	@ (80014dc <controlMotor+0x2bc>)
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
	    kalmanErrorCovariance *= (1 - kalmanGain); // Update error covariance
 80012da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012de:	f04f 0000 	mov.w	r0, #0
 80012e2:	4980      	ldr	r1, [pc, #512]	@ (80014e4 <controlMotor+0x2c4>)
 80012e4:	f7fe ffd0 	bl	8000288 <__aeabi_dsub>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4b7b      	ldr	r3, [pc, #492]	@ (80014e0 <controlMotor+0x2c0>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f97f 	bl	80005f8 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4978      	ldr	r1, [pc, #480]	@ (80014e0 <controlMotor+0x2c0>)
 8001300:	e9c1 2300 	strd	r2, r3, [r1]

	    // Calculate the integral
	    integral += error; // Assuming loop runs at a consistent rate
 8001304:	4b78      	ldr	r3, [pc, #480]	@ (80014e8 <controlMotor+0x2c8>)
 8001306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130a:	4b73      	ldr	r3, [pc, #460]	@ (80014d8 <controlMotor+0x2b8>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7fe ffbc 	bl	800028c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4973      	ldr	r1, [pc, #460]	@ (80014e8 <controlMotor+0x2c8>)
 800131a:	e9c1 2300 	strd	r2, r3, [r1]
	    if (integral > INTEGRAL_LIMIT) {
 800131e:	4b72      	ldr	r3, [pc, #456]	@ (80014e8 <controlMotor+0x2c8>)
 8001320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <controlMotor+0x2cc>)
 800132a:	f7ff fbf5 	bl	8000b18 <__aeabi_dcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <controlMotor+0x122>
	        integral = INTEGRAL_LIMIT; // Clamp the integral term
 8001334:	496c      	ldr	r1, [pc, #432]	@ (80014e8 <controlMotor+0x2c8>)
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b6c      	ldr	r3, [pc, #432]	@ (80014ec <controlMotor+0x2cc>)
 800133c:	e9c1 2300 	strd	r2, r3, [r1]
 8001340:	e010      	b.n	8001364 <controlMotor+0x144>
	    } else if (integral < -INTEGRAL_LIMIT) {
 8001342:	4b69      	ldr	r3, [pc, #420]	@ (80014e8 <controlMotor+0x2c8>)
 8001344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b68      	ldr	r3, [pc, #416]	@ (80014f0 <controlMotor+0x2d0>)
 800134e:	f7ff fbc5 	bl	8000adc <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <controlMotor+0x144>
	        integral = -INTEGRAL_LIMIT; // Clamp the integral term
 8001358:	4963      	ldr	r1, [pc, #396]	@ (80014e8 <controlMotor+0x2c8>)
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b64      	ldr	r3, [pc, #400]	@ (80014f0 <controlMotor+0x2d0>)
 8001360:	e9c1 2300 	strd	r2, r3, [r1]
	    }

	    // Calculate the derivative
	    double derivative = (deltaTime > 0) ? (error - lastError) / deltaTime : 0.0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d017      	beq.n	800139a <controlMotor+0x17a>
 800136a:	4b5b      	ldr	r3, [pc, #364]	@ (80014d8 <controlMotor+0x2b8>)
 800136c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001370:	4b60      	ldr	r3, [pc, #384]	@ (80014f4 <controlMotor+0x2d4>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7fe ff87 	bl	8000288 <__aeabi_dsub>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4614      	mov	r4, r2
 8001380:	461d      	mov	r5, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f8be 	bl	8000504 <__aeabi_ui2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff fa5c 	bl	800084c <__aeabi_ddiv>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	e003      	b.n	80013a2 <controlMotor+0x182>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	e9c7 2308 	strd	r2, r3, [r7, #32]

	    // Apply low-pass filter to the derivative
	    static double filteredDerivative = 0.0; // Static variable for filtering
	    const double alpha = 0.1; // Smoothing factor (0 < alpha < 1)
 80013a6:	a34a      	add	r3, pc, #296	@ (adr r3, 80014d0 <controlMotor+0x2b0>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    filteredDerivative = alpha * derivative + (1 - alpha) * filteredDerivative;
 80013b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013b8:	f7ff f91e 	bl	80005f8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	461d      	mov	r5, r3
 80013c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c8:	f04f 0000 	mov.w	r0, #0
 80013cc:	4945      	ldr	r1, [pc, #276]	@ (80014e4 <controlMotor+0x2c4>)
 80013ce:	f7fe ff5b 	bl	8000288 <__aeabi_dsub>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <controlMotor+0x2d8>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f90a 	bl	80005f8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4620      	mov	r0, r4
 80013ea:	4629      	mov	r1, r5
 80013ec:	f7fe ff4e 	bl	800028c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4940      	ldr	r1, [pc, #256]	@ (80014f8 <controlMotor+0x2d8>)
 80013f6:	e9c1 2300 	strd	r2, r3, [r1]

	    // Calculate the control signal
	    controlSignal = Kp * error + Ki * integral + Kd * filteredDerivative;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <controlMotor+0x2c8>)
 80013fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001400:	a333      	add	r3, pc, #204	@ (adr r3, 80014d0 <controlMotor+0x2b0>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f8f7 	bl	80005f8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <controlMotor+0x2b8>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7fe ff38 	bl	800028c <__adddf3>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <controlMotor+0x2d8>)
 8001426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142a:	a327      	add	r3, pc, #156	@ (adr r3, 80014c8 <controlMotor+0x2a8>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff f8e2 	bl	80005f8 <__aeabi_dmul>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4620      	mov	r0, r4
 800143a:	4629      	mov	r1, r5
 800143c:	f7fe ff26 	bl	800028c <__adddf3>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbce 	bl	8000be8 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	4a2b      	ldr	r2, [pc, #172]	@ (80014fc <controlMotor+0x2dc>)
 8001450:	6013      	str	r3, [r2, #0]

	    // Rate limiting the control signal
	    const double MAX_CONTROL_SIGNAL_CHANGE = 0.1; // Maximum change per call
 8001452:	a31f      	add	r3, pc, #124	@ (adr r3, 80014d0 <controlMotor+0x2b0>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    if (fabs(controlSignal - lastControlSignal) > MAX_CONTROL_SIGNAL_CHANGE) {
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <controlMotor+0x2dc>)
 800145e:	ed93 7a00 	vldr	s14, [r3]
 8001462:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <controlMotor+0x2e0>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146c:	eef0 7ae7 	vabs.f32	s15, s15
 8001470:	ee17 0a90 	vmov	r0, s15
 8001474:	f7ff f868 	bl	8000548 <__aeabi_f2d>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001480:	f7ff fb2c 	bl	8000adc <__aeabi_dcmplt>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d04e      	beq.n	8001528 <controlMotor+0x308>
	        if (controlSignal > lastControlSignal) {
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <controlMotor+0x2dc>)
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <controlMotor+0x2e0>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dd31      	ble.n	8001504 <controlMotor+0x2e4>
	            controlSignal = lastControlSignal + MAX_CONTROL_SIGNAL_CHANGE;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <controlMotor+0x2e0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014ae:	f7fe feed 	bl	800028c <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff fb95 	bl	8000be8 <__aeabi_d2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <controlMotor+0x2dc>)
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e030      	b.n	8001528 <controlMotor+0x308>
 80014c6:	bf00      	nop
 80014c8:	47ae147b 	.word	0x47ae147b
 80014cc:	3f847ae1 	.word	0x3f847ae1
 80014d0:	9999999a 	.word	0x9999999a
 80014d4:	3fb99999 	.word	0x3fb99999
 80014d8:	20000228 	.word	0x20000228
 80014dc:	20000248 	.word	0x20000248
 80014e0:	20000008 	.word	0x20000008
 80014e4:	3ff00000 	.word	0x3ff00000
 80014e8:	20000230 	.word	0x20000230
 80014ec:	40140000 	.word	0x40140000
 80014f0:	c0140000 	.word	0xc0140000
 80014f4:	20000238 	.word	0x20000238
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000240 	.word	0x20000240
 8001500:	20000244 	.word	0x20000244
	        } else {
	            controlSignal = lastControlSignal - MAX_CONTROL_SIGNAL_CHANGE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <controlMotor+0x324>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f81d 	bl	8000548 <__aeabi_f2d>
 800150e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001512:	f7fe feb9 	bl	8000288 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff fb63 	bl	8000be8 <__aeabi_d2f>
 8001522:	4603      	mov	r3, r0
 8001524:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <controlMotor+0x328>)
 8001526:	6013      	str	r3, [r2, #0]
	        }
	    }


	    // Update last error and control signal
	    lastError = error;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <controlMotor+0x32c>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	4908      	ldr	r1, [pc, #32]	@ (8001550 <controlMotor+0x330>)
 8001530:	e9c1 2300 	strd	r2, r3, [r1]
	    lastControlSignal = controlSignal; // Store the last control signal for rate limiting
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <controlMotor+0x328>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a02      	ldr	r2, [pc, #8]	@ (8001544 <controlMotor+0x324>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	@ 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	20000244 	.word	0x20000244
 8001548:	20000240 	.word	0x20000240
 800154c:	20000228 	.word	0x20000228
 8001550:	20000238 	.word	0x20000238
 8001554:	00000000 	.word	0x00000000

08001558 <read>:

void  read(void){
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

			currentTime = HAL_GetTick();  // Current time in milliseconds
 800155e:	f001 f961 	bl	8002824 <HAL_GetTick>
 8001562:	4603      	mov	r3, r0
 8001564:	4a68      	ldr	r2, [pc, #416]	@ (8001708 <read+0x1b0>)
 8001566:	6013      	str	r3, [r2, #0]
	        uint32_t deltaTime = currentTime - lastTime;  // Time since last measurement (ms)
 8001568:	4b67      	ldr	r3, [pc, #412]	@ (8001708 <read+0x1b0>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b67      	ldr	r3, [pc, #412]	@ (800170c <read+0x1b4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	60fb      	str	r3, [r7, #12]

	        // Only proceed if at least 100 ms have passed

	               // Read the encoder count
	               int32_t encoderCount = Read_Encoder1();  // Read the encoder count
 8001574:	f7ff fdba 	bl	80010ec <Read_Encoder1>
 8001578:	4603      	mov	r3, r0
 800157a:	60bb      	str	r3, [r7, #8]

	               // Calculate angular velocity (rad/s)
	               int16_t deltaCount = encoderCount - lastEncoderCount; // New pulses
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <read+0x1b8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b29b      	uxth	r3, r3
 800158a:	80fb      	strh	r3, [r7, #6]
	               if (deltaTime > 0) {
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d03e      	beq.n	8001610 <read+0xb8>
	                   angularVelocity = (double)deltaCount / PPR * M_PI * 2 / (deltaTime / 1000.0);  // rad/s
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffc4 	bl	8000524 <__aeabi_i2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffbd 	bl	8000524 <__aeabi_i2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4620      	mov	r0, r4
 80015b0:	4629      	mov	r1, r5
 80015b2:	f7ff f94b 	bl	800084c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	a34c      	add	r3, pc, #304	@ (adr r3, 80016f0 <read+0x198>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff f818 	bl	80005f8 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	f7fe fe5a 	bl	800028c <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4614      	mov	r4, r2
 80015de:	461d      	mov	r5, r3
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7fe ff8f 	bl	8000504 <__aeabi_ui2d>
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <read+0x1bc>)
 80015ec:	f7ff f92e 	bl	800084c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7ff f928 	bl	800084c <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff faf0 	bl	8000be8 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4a43      	ldr	r2, [pc, #268]	@ (8001718 <read+0x1c0>)
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e003      	b.n	8001618 <read+0xc0>
	               } else {
	                   angularVelocity = 0;  // Avoid division by zero
 8001610:	4b41      	ldr	r3, [pc, #260]	@ (8001718 <read+0x1c0>)
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
	               }
	               angular_velocity_deg_s = angularVelocity * (180.0f / 3.14159f);
 8001618:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <read+0x1c0>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800171c <read+0x1c4>
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <read+0x1c8>)
 8001628:	edc3 7a00 	vstr	s15, [r3]

	               // Calculate linear velocity (m/s)
	               linearVelocity = angularVelocity * R;
 800162c:	4b3a      	ldr	r3, [pc, #232]	@ (8001718 <read+0x1c0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff89 	bl	8000548 <__aeabi_f2d>
 8001636:	a330      	add	r3, pc, #192	@ (adr r3, 80016f8 <read+0x1a0>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe ffdc 	bl	80005f8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff face 	bl	8000be8 <__aeabi_d2f>
 800164c:	4603      	mov	r3, r0
 800164e:	4a35      	ldr	r2, [pc, #212]	@ (8001724 <read+0x1cc>)
 8001650:	6013      	str	r3, [r2, #0]

	               // Calculate position (m)
	               position = (double)encoderCount / PPR * C;
 8001652:	68b8      	ldr	r0, [r7, #8]
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe ff5f 	bl	8000524 <__aeabi_i2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7ff f8ed 	bl	800084c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a321      	add	r3, pc, #132	@ (adr r3, 8001700 <read+0x1a8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe ffba 	bl	80005f8 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff faac 	bl	8000be8 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	4a25      	ldr	r2, [pc, #148]	@ (8001728 <read+0x1d0>)
 8001694:	6013      	str	r3, [r2, #0]
	               ang += angular_velocity_deg_s;
 8001696:	4b25      	ldr	r3, [pc, #148]	@ (800172c <read+0x1d4>)
 8001698:	ed93 7a00 	vldr	s14, [r3]
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <read+0x1c8>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	4b21      	ldr	r3, [pc, #132]	@ (800172c <read+0x1d4>)
 80016a8:	edc3 7a00 	vstr	s15, [r3]
	               // Update values for the next measurement
	               lastEncoderCount = encoderCount;
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4a18      	ldr	r2, [pc, #96]	@ (8001710 <read+0x1b8>)
 80016b0:	6013      	str	r3, [r2, #0]
	               lastTime = currentTime; // Update lastTime to the current time
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <read+0x1b0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a15      	ldr	r2, [pc, #84]	@ (800170c <read+0x1b4>)
 80016b8:	6013      	str	r3, [r2, #0]

	               // Optional: Send joint state or perform other actions
	             //  sendJointState(position, 0.0, 0.0, 0.0, angularVelocity, 0.0, 0.0, 0.0);
	               if(currentTime>=1215){
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <read+0x1b0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f240 42be 	movw	r2, #1214	@ 0x4be
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d903      	bls.n	80016ce <read+0x176>
	            	   Motor_Control1(0, 0); // time error
 80016c6:	2100      	movs	r1, #0
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fcb7 	bl	800103c <Motor_Control1>
	               }
	               controlMotor(angularVelocity,0.5,deltaTime );
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <read+0x1c0>)
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	f7ff fd9f 	bl	8001220 <controlMotor>

}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bdb0      	pop	{r4, r5, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	54442d18 	.word	0x54442d18
 80016f4:	400921fb 	.word	0x400921fb
 80016f8:	2b020c4a 	.word	0x2b020c4a
 80016fc:	3fa91687 	.word	0x3fa91687
 8001700:	c8884488 	.word	0xc8884488
 8001704:	3fd3b43c 	.word	0x3fd3b43c
 8001708:	20000224 	.word	0x20000224
 800170c:	2000021c 	.word	0x2000021c
 8001710:	20000220 	.word	0x20000220
 8001714:	408f4000 	.word	0x408f4000
 8001718:	2000020c 	.word	0x2000020c
 800171c:	42652eed 	.word	0x42652eed
 8001720:	20000214 	.word	0x20000214
 8001724:	20000210 	.word	0x20000210
 8001728:	20000218 	.word	0x20000218
 800172c:	20000250 	.word	0x20000250

08001730 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001738:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800173c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001748:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800174c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001750:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001758:	e000      	b.n	800175c <ITM_SendChar+0x2c>
    {
      __NOP();
 800175a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800175c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f9      	beq.n	800175a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001766:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001782:	f000 ffe9 	bl	8002758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001786:	f000 f82b 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178a:	f000 fbf1 	bl	8001f70 <MX_GPIO_Init>
  MX_TIM1_Init();
 800178e:	f000 f88f 	bl	80018b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001792:	f000 f8e5 	bl	8001960 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001796:	f000 f963 	bl	8001a60 <MX_TIM3_Init>
  MX_TIM5_Init();
 800179a:	f000 fa37 	bl	8001c0c <MX_TIM5_Init>
  MX_TIM8_Init();
 800179e:	f000 fa89 	bl	8001cb4 <MX_TIM8_Init>
  MX_TIM9_Init();
 80017a2:	f000 fadf 	bl	8001d64 <MX_TIM9_Init>
  MX_TIM12_Init();
 80017a6:	f000 fb4b 	bl	8001e40 <MX_TIM12_Init>
  MX_TIM4_Init();
 80017aa:	f000 f9ad 	bl	8001b08 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80017ae:	f000 fbb5 	bl	8001f1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init();  // Khởi động encoder
 80017b2:	f7ff fc7f 	bl	80010b4 <Encoder_Init>
	Motor_Init();    // Khởi động Motor
 80017b6:	f7ff fc15 	bl	8000fe4 <Motor_Init>
	Reset_Encoder1();
 80017ba:	f7ff fca5 	bl	8001108 <Reset_Encoder1>
	Reset_Encoder2();
 80017be:	f7ff fcbf 	bl	8001140 <Reset_Encoder2>
	Reset_Encoder3();
 80017c2:	f7ff fcd9 	bl	8001178 <Reset_Encoder3>
	Reset_Encoder4();
 80017c6:	f7ff fcf3 	bl	80011b0 <Reset_Encoder4>




	Motor_Control1(2, 1000);
 80017ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7ff fc34 	bl	800103c <Motor_Control1>

		//standardMode(1);

	while (1) {
    /* USER CODE END WHILE */
		readEncoder();
 80017d4:	f7ff fcfa 	bl	80011cc <readEncoder>
		read();
 80017d8:	f7ff febe 	bl	8001558 <read>
		readEncoder();
 80017dc:	bf00      	nop
 80017de:	e7f9      	b.n	80017d4 <main+0x56>

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	@ 0x50
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2230      	movs	r2, #48	@ 0x30
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 ffda 	bl	80067a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <SystemClock_Config+0xc8>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	4a26      	ldr	r2, [pc, #152]	@ (80018a8 <SystemClock_Config+0xc8>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	@ 0x40
 8001814:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <SystemClock_Config+0xc8>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <SystemClock_Config+0xcc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a20      	ldr	r2, [pc, #128]	@ (80018ac <SystemClock_Config+0xcc>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <SystemClock_Config+0xcc>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800183c:	2302      	movs	r3, #2
 800183e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001848:	2302      	movs	r3, #2
 800184a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001850:	2308      	movs	r3, #8
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001854:	2350      	movs	r3, #80	@ 0x50
 8001856:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fa8f 	bl	8002d88 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001870:	f000 fbec 	bl	800204c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2102      	movs	r1, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fcf1 	bl	8003278 <HAL_RCC_ClockConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800189c:	f000 fbd6 	bl	800204c <Error_Handler>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3750      	adds	r7, #80	@ 0x50
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000

080018b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	@ 0x30
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2224      	movs	r2, #36	@ 0x24
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 ff72 	bl	80067a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018cc:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018ce:	4a23      	ldr	r2, [pc, #140]	@ (800195c <MX_TIM1_Init+0xac>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80018d2:	4b21      	ldr	r3, [pc, #132]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018d4:	2263      	movs	r2, #99	@ 0x63
 80018d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018de:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <MX_TIM1_Init+0xa8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018f8:	2303      	movs	r3, #3
 80018fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001900:	2301      	movs	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001910:	2301      	movs	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <MX_TIM1_Init+0xa8>)
 8001924:	f001 fff8 	bl	8003918 <HAL_TIM_Encoder_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800192e:	f000 fb8d 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <MX_TIM1_Init+0xa8>)
 8001940:	f002 fdc4 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800194a:	f000 fb7f 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3730      	adds	r7, #48	@ 0x30
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000260 	.word	0x20000260
 800195c:	40010000 	.word	0x40010000

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001990:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 800199a:	224f      	movs	r2, #79	@ 0x4f
 800199c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b8:	4828      	ldr	r0, [pc, #160]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019ba:	f001 fe3d 	bl	8003638 <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019c4:	f000 fb42 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4821      	ldr	r0, [pc, #132]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019d6:	f002 f995 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019e0:	f000 fb34 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e4:	481d      	ldr	r0, [pc, #116]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019e6:	f001 fe76 	bl	80036d6 <HAL_TIM_PWM_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019f0:	f000 fb2c 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4619      	mov	r1, r3
 8001a02:	4816      	ldr	r0, [pc, #88]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a04:	f002 fd62 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a0e:	f000 fb1d 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	@ 0x60
 8001a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2208      	movs	r2, #8
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a2a:	f002 f8a9 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a34:	f000 fb0a 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a40:	f002 f89e 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a4a:	f000 faff 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a4e:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a50:	f000 fc74 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001a54:	bf00      	nop
 8001a56:	3738      	adds	r7, #56	@ 0x38
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200002a8 	.word	0x200002a8

08001a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	@ 0x30
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2224      	movs	r2, #36	@ 0x24
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 fe9a 	bl	80067a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7c:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001a7e:	4a21      	ldr	r2, [pc, #132]	@ (8001b04 <MX_TIM3_Init+0xa4>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001a84:	224f      	movs	r2, #79	@ 0x4f
 8001a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001ace:	f001 ff23 	bl	8003918 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001ad8:	f000 fab8 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <MX_TIM3_Init+0xa0>)
 8001aea:	f002 fcef 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001af4:	f000 faaa 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3730      	adds	r7, #48	@ 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200002f0 	.word	0x200002f0
 8001b04:	40000400 	.word	0x40000400

08001b08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	@ 0x38
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 0320 	add.w	r3, r7, #32
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b3a:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <MX_TIM4_Init+0x100>)
 8001b3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8001b3e:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b40:	224f      	movs	r2, #79	@ 0x4f
 8001b42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b2a      	ldr	r3, [pc, #168]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b5e:	4829      	ldr	r0, [pc, #164]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b60:	f001 fd6a 	bl	8003638 <HAL_TIM_Base_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b6a:	f000 fa6f 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4822      	ldr	r0, [pc, #136]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b7c:	f002 f8c2 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b86:	f000 fa61 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b8a:	481e      	ldr	r0, [pc, #120]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001b8c:	f001 fda3 	bl	80036d6 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b96:	f000 fa59 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4816      	ldr	r0, [pc, #88]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001baa:	f002 fc8f 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bb4:	f000 fa4a 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	@ 0x60
 8001bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2208      	movs	r2, #8
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001bd0:	f001 ffd6 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bda:	f000 fa37 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	220c      	movs	r2, #12
 8001be2:	4619      	mov	r1, r3
 8001be4:	4807      	ldr	r0, [pc, #28]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001be6:	f001 ffcb 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001bf0:	f000 fa2c 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bf4:	4803      	ldr	r0, [pc, #12]	@ (8001c04 <MX_TIM4_Init+0xfc>)
 8001bf6:	f000 fba1 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001bfa:	bf00      	nop
 8001bfc:	3738      	adds	r7, #56	@ 0x38
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000338 	.word	0x20000338
 8001c08:	40000800 	.word	0x40000800

08001c0c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	@ 0x30
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2224      	movs	r2, #36	@ 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fdc4 	bl	80067a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c28:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c2a:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <MX_TIM5_Init+0xa4>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c30:	224f      	movs	r2, #79	@ 0x4f
 8001c32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c56:	2301      	movs	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c66:	2301      	movs	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c7a:	f001 fe4d 	bl	8003918 <HAL_TIM_Encoder_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 f9e2 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_TIM5_Init+0xa0>)
 8001c96:	f002 fc19 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001ca0:	f000 f9d4 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3730      	adds	r7, #48	@ 0x30
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000380 	.word	0x20000380
 8001cb0:	40000c00 	.word	0x40000c00

08001cb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	2224      	movs	r2, #36	@ 0x24
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fd70 	bl	80067a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001cd2:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <MX_TIM8_Init+0xac>)
 8001cd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001cd8:	224f      	movs	r2, #79	@ 0x4f
 8001cda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001ce4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d10:	2300      	movs	r3, #0
 8001d12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001d28:	f001 fdf6 	bl	8003918 <HAL_TIM_Encoder_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001d32:	f000 f98b 	bl	800204c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <MX_TIM8_Init+0xa8>)
 8001d44:	f002 fbc2 	bl	80044cc <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001d4e:	f000 f97d 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	@ 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003c8 	.word	0x200003c8
 8001d60:	40010400 	.word	0x40010400

08001d64 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	@ 0x30
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	615a      	str	r2, [r3, #20]
 8001d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <MX_TIM9_Init+0xd8>)
 8001d8e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 80-1;
 8001d90:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001d92:	224f      	movs	r2, #79	@ 0x4f
 8001d94:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8001d9c:	4b26      	ldr	r3, [pc, #152]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001d9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001db0:	4821      	ldr	r0, [pc, #132]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001db2:	f001 fc41 	bl	8003638 <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001dbc:	f000 f946 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001dc6:	f107 0320 	add.w	r3, r7, #32
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481a      	ldr	r0, [pc, #104]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001dce:	f001 ff99 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001dd8:	f000 f938 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001ddc:	4816      	ldr	r0, [pc, #88]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001dde:	f001 fc7a 	bl	80036d6 <HAL_TIM_PWM_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001de8:	f000 f930 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dec:	2360      	movs	r3, #96	@ 0x60
 8001dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	4619      	mov	r1, r3
 8001e02:	480d      	ldr	r0, [pc, #52]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001e04:	f001 febc 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e0e:	f000 f91d 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2204      	movs	r2, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001e1a:	f001 feb1 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8001e24:	f000 f912 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <MX_TIM9_Init+0xd4>)
 8001e2a:	f000 fa87 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001e2e:	bf00      	nop
 8001e30:	3730      	adds	r7, #48	@ 0x30
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000410 	.word	0x20000410
 8001e3c:	40014000 	.word	0x40014000

08001e40 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	@ 0x30
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e68:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <MX_TIM12_Init+0xd8>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 8001e6c:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e6e:	224f      	movs	r2, #79	@ 0x4f
 8001e70:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e7e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e80:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e8c:	4821      	ldr	r0, [pc, #132]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001e8e:	f001 fbd3 	bl	8003638 <HAL_TIM_Base_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001e98:	f000 f8d8 	bl	800204c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481a      	ldr	r0, [pc, #104]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001eaa:	f001 ff2b 	bl	8003d04 <HAL_TIM_ConfigClockSource>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001eb4:	f000 f8ca 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001eb8:	4816      	ldr	r0, [pc, #88]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001eba:	f001 fc0c 	bl	80036d6 <HAL_TIM_PWM_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001ec4:	f000 f8c2 	bl	800204c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec8:	2360      	movs	r3, #96	@ 0x60
 8001eca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	480d      	ldr	r0, [pc, #52]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001ee0:	f001 fe4e 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8001eea:	f000 f8af 	bl	800204c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001ef6:	f001 fe43 	bl	8003b80 <HAL_TIM_PWM_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8001f00:	f000 f8a4 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f04:	4803      	ldr	r0, [pc, #12]	@ (8001f14 <MX_TIM12_Init+0xd4>)
 8001f06:	f000 fa19 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000458 	.word	0x20000458
 8001f18:	40001800 	.word	0x40001800

08001f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	@ (8001f6c <MX_USART2_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_USART2_UART_Init+0x4c>)
 8001f54:	f002 fb36 	bl	80045c4 <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f000 f875 	bl	800204c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200004a0 	.word	0x200004a0
 8001f6c:	40004400 	.word	0x40004400

08001f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001f80:	f043 0310 	orr.w	r3, r3, #16
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a16      	ldr	r2, [pc, #88]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b0d      	ldr	r3, [pc, #52]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a08      	ldr	r2, [pc, #32]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b06      	ldr	r3, [pc, #24]	@ (8002010 <MX_GPIO_Init+0xa0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e009      	b.n	800203a <_write+0x26>
		ITM_SendChar(*ptr++);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fb7e 	bl	8001730 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	dbf1      	blt.n	8002026 <_write+0x12>
	}
	return len;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002050:	b672      	cpsid	i
}
 8002052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <Error_Handler+0x8>

08002058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b10      	ldr	r3, [pc, #64]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206c:	6453      	str	r3, [r2, #68]	@ 0x44
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a08      	ldr	r2, [pc, #32]	@ (80020a4 <HAL_MspInit+0x4c>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b090      	sub	sp, #64	@ 0x40
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a64      	ldr	r2, [pc, #400]	@ (8002258 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12d      	bne.n	8002126 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ce:	4b63      	ldr	r3, [pc, #396]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	4a62      	ldr	r2, [pc, #392]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020da:	4b60      	ldr	r3, [pc, #384]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ea:	4b5c      	ldr	r3, [pc, #368]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a5b      	ldr	r2, [pc, #364]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80020f0:	f043 0310 	orr.w	r3, r3, #16
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b59      	ldr	r3, [pc, #356]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002102:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210c:	2301      	movs	r3, #1
 800210e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002114:	2301      	movs	r3, #1
 8002116:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211c:	4619      	mov	r1, r3
 800211e:	4850      	ldr	r0, [pc, #320]	@ (8002260 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8002120:	f000 fc96 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002124:	e094      	b.n	8002250 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a4e      	ldr	r2, [pc, #312]	@ (8002264 <HAL_TIM_Encoder_MspInit+0x1bc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d12c      	bne.n	800218a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	4b49      	ldr	r3, [pc, #292]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	4a48      	ldr	r2, [pc, #288]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002140:	4b46      	ldr	r3, [pc, #280]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	4b42      	ldr	r3, [pc, #264]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	4a41      	ldr	r2, [pc, #260]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6313      	str	r3, [r2, #48]	@ 0x30
 800215c:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
 8002166:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002168:	23c0      	movs	r3, #192	@ 0xc0
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002178:	2302      	movs	r3, #2
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002180:	4619      	mov	r1, r3
 8002182:	4839      	ldr	r0, [pc, #228]	@ (8002268 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8002184:	f000 fc64 	bl	8002a50 <HAL_GPIO_Init>
}
 8002188:	e062      	b.n	8002250 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a37      	ldr	r2, [pc, #220]	@ (800226c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d12c      	bne.n	80021ee <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	4b30      	ldr	r3, [pc, #192]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	4a2f      	ldr	r2, [pc, #188]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b8:	4a28      	ldr	r2, [pc, #160]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021cc:	2303      	movs	r3, #3
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021dc:	2302      	movs	r3, #2
 80021de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e4:	4619      	mov	r1, r3
 80021e6:	4820      	ldr	r0, [pc, #128]	@ (8002268 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80021e8:	f000 fc32 	bl	8002a50 <HAL_GPIO_Init>
}
 80021ec:	e030      	b.n	8002250 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d12b      	bne.n	8002250 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80021fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002200:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002202:	f043 0302 	orr.w	r3, r3, #2
 8002206:	6453      	str	r3, [r2, #68]	@ 0x44
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800220a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	4a0f      	ldr	r2, [pc, #60]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6313      	str	r3, [r2, #48]	@ 0x30
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002230:	23c0      	movs	r3, #192	@ 0xc0
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002240:	2303      	movs	r3, #3
 8002242:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002248:	4619      	mov	r1, r3
 800224a:	480a      	ldr	r0, [pc, #40]	@ (8002274 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800224c:	f000 fc00 	bl	8002a50 <HAL_GPIO_Init>
}
 8002250:	bf00      	nop
 8002252:	3740      	adds	r7, #64	@ 0x40
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40010000 	.word	0x40010000
 800225c:	40023800 	.word	0x40023800
 8002260:	40021000 	.word	0x40021000
 8002264:	40000400 	.word	0x40000400
 8002268:	40020000 	.word	0x40020000
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40010400 	.word	0x40010400
 8002274:	40020800 	.word	0x40020800

08002278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	4b27      	ldr	r3, [pc, #156]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a26      	ldr	r2, [pc, #152]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80022a6:	e03a      	b.n	800231e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a20      	ldr	r2, [pc, #128]	@ (8002330 <HAL_TIM_Base_MspInit+0xb8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	4a1c      	ldr	r2, [pc, #112]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022c2:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
}
 80022ce:	e026      	b.n	800231e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_TIM_Base_MspInit+0xbc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	4a12      	ldr	r2, [pc, #72]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ea:	4b10      	ldr	r3, [pc, #64]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	e012      	b.n	800231e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002338 <HAL_TIM_Base_MspInit+0xc0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10d      	bne.n	800231e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 800230c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_TIM_Base_MspInit+0xb4>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40000800 	.word	0x40000800
 8002334:	40014000 	.word	0x40014000
 8002338:	40001800 	.word	0x40001800

0800233c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	@ 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235c:	d11f      	bne.n	800239e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a46      	ldr	r2, [pc, #280]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b44      	ldr	r3, [pc, #272]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800237a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238c:	2301      	movs	r3, #1
 800238e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	483b      	ldr	r0, [pc, #236]	@ (8002484 <HAL_TIM_MspPostInit+0x148>)
 8002398:	f000 fb5a 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800239c:	e06c      	b.n	8002478 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a39      	ldr	r2, [pc, #228]	@ (8002488 <HAL_TIM_MspPostInit+0x14c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d11f      	bne.n	80023e8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	4b34      	ldr	r3, [pc, #208]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	4a33      	ldr	r2, [pc, #204]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b8:	4b31      	ldr	r3, [pc, #196]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80023c4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023d6:	2302      	movs	r3, #2
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	482a      	ldr	r0, [pc, #168]	@ (800248c <HAL_TIM_MspPostInit+0x150>)
 80023e2:	f000 fb35 	bl	8002a50 <HAL_GPIO_Init>
}
 80023e6:	e047      	b.n	8002478 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a28      	ldr	r2, [pc, #160]	@ (8002490 <HAL_TIM_MspPostInit+0x154>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d11e      	bne.n	8002430 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800240e:	2360      	movs	r3, #96	@ 0x60
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800241e:	2303      	movs	r3, #3
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	4619      	mov	r1, r3
 8002428:	481a      	ldr	r0, [pc, #104]	@ (8002494 <HAL_TIM_MspPostInit+0x158>)
 800242a:	f000 fb11 	bl	8002a50 <HAL_GPIO_Init>
}
 800242e:	e023      	b.n	8002478 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a18      	ldr	r2, [pc, #96]	@ (8002498 <HAL_TIM_MspPostInit+0x15c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d11e      	bne.n	8002478 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a0f      	ldr	r2, [pc, #60]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_TIM_MspPostInit+0x144>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002456:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002460:	2301      	movs	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002468:	2309      	movs	r3, #9
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	4804      	ldr	r0, [pc, #16]	@ (8002484 <HAL_TIM_MspPostInit+0x148>)
 8002474:	f000 faec 	bl	8002a50 <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	@ 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	40020400 	.word	0x40020400
 8002488:	40000800 	.word	0x40000800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40014000 	.word	0x40014000
 8002494:	40021000 	.word	0x40021000
 8002498:	40001800 	.word	0x40001800

0800249c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	@ 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_UART_MspInit+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12b      	bne.n	8002516 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_UART_MspInit+0x88>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_UART_MspInit+0x88>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_UART_MspInit+0x88>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_UART_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a10      	ldr	r2, [pc, #64]	@ (8002524 <HAL_UART_MspInit+0x88>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_UART_MspInit+0x88>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024f6:	230c      	movs	r3, #12
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002506:	2307      	movs	r3, #7
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <HAL_UART_MspInit+0x8c>)
 8002512:	f000 fa9d 	bl	8002a50 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40004400 	.word	0x40004400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020000 	.word	0x40020000

0800252c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <NMI_Handler+0x4>

08002534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <MemManage_Handler+0x4>

08002544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <BusFault_Handler+0x4>

0800254c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <UsageFault_Handler+0x4>

08002554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002582:	f000 f93b 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}

0800258a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  return 1;
 800258e:	2301      	movs	r3, #1
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_kill>:

int _kill(int pid, int sig)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025a4:	f004 f964 	bl	8006870 <__errno>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2216      	movs	r2, #22
 80025ac:	601a      	str	r2, [r3, #0]
  return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_exit>:

void _exit (int status)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025c2:	f04f 31ff 	mov.w	r1, #4294967295
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffe7 	bl	800259a <_kill>
  while (1) {}    /* Make sure we hang here */
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <_exit+0x12>

080025d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e00a      	b.n	80025f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025e2:	f3af 8000 	nop.w
 80025e6:	4601      	mov	r1, r0
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	b2ca      	uxtb	r2, r1
 80025f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	dbf0      	blt.n	80025e2 <_read+0x12>
  }

  return len;
 8002600:	687b      	ldr	r3, [r7, #4]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_close>:
  }
  return len;
}

int _close(int file)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002632:	605a      	str	r2, [r3, #4]
  return 0;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_isatty>:

int _isatty(int file)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f004 f8e4 	bl	8006870 <__errno>
 80026a8:	4603      	mov	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a05      	ldr	r2, [pc, #20]	@ (80026d8 <_sbrk+0x64>)
 80026c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20020000 	.word	0x20020000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	200004e8 	.word	0x200004e8
 80026dc:	20000640 	.word	0x20000640

080026e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <SystemInit+0x20>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <SystemInit+0x20>)
 80026ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800273c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002708:	f7ff ffea 	bl	80026e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800270c:	480c      	ldr	r0, [pc, #48]	@ (8002740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800270e:	490d      	ldr	r1, [pc, #52]	@ (8002744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	@ (800274c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002724:	4c0a      	ldr	r4, [pc, #40]	@ (8002750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002732:	f004 f8a3 	bl	800687c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002736:	f7ff f822 	bl	800177e <main>
  bx  lr    
 800273a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800273c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002748:	0800968c 	.word	0x0800968c
  ldr r2, =_sbss
 800274c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002750:	2000063c 	.word	0x2000063c

08002754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC_IRQHandler>
	...

08002758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800275c:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <HAL_Init+0x40>)
 8002762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <HAL_Init+0x40>)
 800276e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a07      	ldr	r2, [pc, #28]	@ (8002798 <HAL_Init+0x40>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f000 f931 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002786:	200f      	movs	r0, #15
 8002788:	f000 f808 	bl	800279c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800278c:	f7ff fc64 	bl	8002058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40023c00 	.word	0x40023c00

0800279c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_InitTick+0x54>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_InitTick+0x58>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f93b 	bl	8002a36 <HAL_SYSTICK_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00e      	b.n	80027e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d80a      	bhi.n	80027e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d0:	2200      	movs	r2, #0
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f000 f911 	bl	80029fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027dc:	4a06      	ldr	r2, [pc, #24]	@ (80027f8 <HAL_InitTick+0x5c>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000010 	.word	0x20000010
 80027f4:	20000018 	.word	0x20000018
 80027f8:	20000014 	.word	0x20000014

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_IncTick+0x20>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_IncTick+0x24>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_IncTick+0x24>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000018 	.word	0x20000018
 8002820:	200004ec 	.word	0x200004ec

08002824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <HAL_GetTick+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	200004ec 	.word	0x200004ec

0800283c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff ffee 	bl	8002824 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d005      	beq.n	8002862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_Delay+0x44>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002862:	bf00      	nop
 8002864:	f7ff ffde 	bl	8002824 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d8f7      	bhi.n	8002864 <HAL_Delay+0x28>
  {
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000018 	.word	0x20000018

08002884 <__NVIC_SetPriorityGrouping>:
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	@ (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_GetPriorityGrouping>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_SetPriority>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	@ (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	@ (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <SysTick_Config>:
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b4:	d301      	bcc.n	80029ba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ba:	4a0a      	ldr	r2, [pc, #40]	@ (80029e4 <SysTick_Config+0x40>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c2:	210f      	movs	r1, #15
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
 80029c8:	f7ff ff8e 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <SysTick_Config+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d2:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <SysTick_Config+0x40>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff47 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff5c 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff8e 	bl	800293c <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5d 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffb0 	bl	80029a4 <SysTick_Config>
 8002a44:	4603      	mov	r3, r0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e16b      	b.n	8002d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 815a 	bne.w	8002d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80b4 	beq.w	8002d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b60      	ldr	r3, [pc, #384]	@ (8002d5c <HAL_GPIO_Init+0x30c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	4a5f      	ldr	r2, [pc, #380]	@ (8002d5c <HAL_GPIO_Init+0x30c>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d5c <HAL_GPIO_Init+0x30c>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d60 <HAL_GPIO_Init+0x310>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a52      	ldr	r2, [pc, #328]	@ (8002d64 <HAL_GPIO_Init+0x314>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d02b      	beq.n	8002c76 <HAL_GPIO_Init+0x226>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a51      	ldr	r2, [pc, #324]	@ (8002d68 <HAL_GPIO_Init+0x318>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x222>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a50      	ldr	r2, [pc, #320]	@ (8002d6c <HAL_GPIO_Init+0x31c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x21e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4f      	ldr	r2, [pc, #316]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x21a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4e      	ldr	r2, [pc, #312]	@ (8002d74 <HAL_GPIO_Init+0x324>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x216>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4d      	ldr	r2, [pc, #308]	@ (8002d78 <HAL_GPIO_Init+0x328>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4c      	ldr	r2, [pc, #304]	@ (8002d7c <HAL_GPIO_Init+0x32c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4b      	ldr	r2, [pc, #300]	@ (8002d80 <HAL_GPIO_Init+0x330>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x20a>
 8002c56:	2307      	movs	r3, #7
 8002c58:	e00e      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	e00c      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c5e:	2306      	movs	r3, #6
 8002c60:	e00a      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c62:	2305      	movs	r3, #5
 8002c64:	e008      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_GPIO_Init+0x228>
 8002c76:	2300      	movs	r3, #0
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f002 0203 	and.w	r2, r2, #3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4093      	lsls	r3, r2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c88:	4935      	ldr	r1, [pc, #212]	@ (8002d60 <HAL_GPIO_Init+0x310>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b3b      	ldr	r3, [pc, #236]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a32      	ldr	r2, [pc, #200]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b30      	ldr	r3, [pc, #192]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a27      	ldr	r2, [pc, #156]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cea:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d38:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <HAL_GPIO_Init+0x334>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f ae90 	bls.w	8002a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3724      	adds	r7, #36	@ 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40021400 	.word	0x40021400
 8002d7c:	40021800 	.word	0x40021800
 8002d80:	40021c00 	.word	0x40021c00
 8002d84:	40013c00 	.word	0x40013c00

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e267      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d075      	beq.n	8002e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002da6:	4b88      	ldr	r3, [pc, #544]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d00c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b85      	ldr	r3, [pc, #532]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbe:	4b82      	ldr	r3, [pc, #520]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d05b      	beq.n	8002e90 <HAL_RCC_OscConfig+0x108>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d157      	bne.n	8002e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e242      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x74>
 8002dee:	4b76      	ldr	r3, [pc, #472]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a75      	ldr	r2, [pc, #468]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e01d      	b.n	8002e38 <HAL_RCC_OscConfig+0xb0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b70      	ldr	r3, [pc, #448]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b6d      	ldr	r3, [pc, #436]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6c      	ldr	r2, [pc, #432]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0xb0>
 8002e20:	4b69      	ldr	r3, [pc, #420]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a68      	ldr	r2, [pc, #416]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b66      	ldr	r3, [pc, #408]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7ff fcf0 	bl	8002824 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e48:	f7ff fcec 	bl	8002824 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	@ 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e207      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0xc0>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff fcdc 	bl	8002824 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7ff fcd8 	bl	8002824 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1f3      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	4b51      	ldr	r3, [pc, #324]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0xe8>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d063      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b47      	ldr	r3, [pc, #284]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d11c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb6:	4b44      	ldr	r3, [pc, #272]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d116      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	4b41      	ldr	r3, [pc, #260]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e1c7      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4937      	ldr	r1, [pc, #220]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	e03a      	b.n	8002f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef8:	4b34      	ldr	r3, [pc, #208]	@ (8002fcc <HAL_RCC_OscConfig+0x244>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7ff fc91 	bl	8002824 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f06:	f7ff fc8d 	bl	8002824 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1a8      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f18:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f24:	4b28      	ldr	r3, [pc, #160]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4925      	ldr	r1, [pc, #148]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]
 8002f38:	e015      	b.n	8002f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3a:	4b24      	ldr	r3, [pc, #144]	@ (8002fcc <HAL_RCC_OscConfig+0x244>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7ff fc70 	bl	8002824 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f48:	f7ff fc6c 	bl	8002824 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e187      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7a:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <HAL_RCC_OscConfig+0x248>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7ff fc50 	bl	8002824 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f88:	f7ff fc4c 	bl	8002824 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e167      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x200>
 8002fa6:	e01b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <HAL_RCC_OscConfig+0x248>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7ff fc39 	bl	8002824 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb4:	e00e      	b.n	8002fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7ff fc35 	bl	8002824 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d907      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e150      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	42470000 	.word	0x42470000
 8002fd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	4b88      	ldr	r3, [pc, #544]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ea      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8097 	beq.w	800311c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b81      	ldr	r3, [pc, #516]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b7d      	ldr	r3, [pc, #500]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4a7c      	ldr	r2, [pc, #496]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	@ 0x40
 800300e:	4b7a      	ldr	r3, [pc, #488]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b77      	ldr	r3, [pc, #476]	@ (80031fc <HAL_RCC_OscConfig+0x474>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302a:	4b74      	ldr	r3, [pc, #464]	@ (80031fc <HAL_RCC_OscConfig+0x474>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a73      	ldr	r2, [pc, #460]	@ (80031fc <HAL_RCC_OscConfig+0x474>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7ff fbf5 	bl	8002824 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7ff fbf1 	bl	8002824 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e10c      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b6a      	ldr	r3, [pc, #424]	@ (80031fc <HAL_RCC_OscConfig+0x474>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x2ea>
 8003064:	4b64      	ldr	r3, [pc, #400]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003068:	4a63      	ldr	r2, [pc, #396]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003070:	e01c      	b.n	80030ac <HAL_RCC_OscConfig+0x324>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x30c>
 800307a:	4b5f      	ldr	r3, [pc, #380]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307e:	4a5e      	ldr	r2, [pc, #376]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6713      	str	r3, [r2, #112]	@ 0x70
 8003086:	4b5c      	ldr	r3, [pc, #368]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	4a5b      	ldr	r2, [pc, #364]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x324>
 8003094:	4b58      	ldr	r3, [pc, #352]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003098:	4a57      	ldr	r2, [pc, #348]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a0:	4b55      	ldr	r3, [pc, #340]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4a54      	ldr	r2, [pc, #336]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7ff fbb6 	bl	8002824 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7ff fbb2 	bl	8002824 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0cb      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	4b49      	ldr	r3, [pc, #292]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ee      	beq.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7ff fba0 	bl	8002824 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e8:	f7ff fb9c 	bl	8002824 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0b5      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	4b3e      	ldr	r3, [pc, #248]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ee      	bne.n	80030e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800310a:	7dfb      	ldrb	r3, [r7, #23]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b39      	ldr	r3, [pc, #228]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	4a38      	ldr	r2, [pc, #224]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800311a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a1 	beq.w	8003268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003126:	4b34      	ldr	r3, [pc, #208]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b08      	cmp	r3, #8
 8003130:	d05c      	beq.n	80031ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d141      	bne.n	80031be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b31      	ldr	r3, [pc, #196]	@ (8003200 <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff fb70 	bl	8002824 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7ff fb6c 	bl	8002824 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e087      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b27      	ldr	r3, [pc, #156]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	3b01      	subs	r3, #1
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	491b      	ldr	r1, [pc, #108]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003190:	4b1b      	ldr	r3, [pc, #108]	@ (8003200 <HAL_RCC_OscConfig+0x478>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7ff fb45 	bl	8002824 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319e:	f7ff fb41 	bl	8002824 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e05c      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x416>
 80031bc:	e054      	b.n	8003268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCC_OscConfig+0x478>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7ff fb2e 	bl	8002824 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7ff fb2a 	bl	8002824 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e045      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_RCC_OscConfig+0x470>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
 80031ea:	e03d      	b.n	8003268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e038      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40007000 	.word	0x40007000
 8003200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003204:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <HAL_RCC_OscConfig+0x4ec>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d028      	beq.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d121      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d11a      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800323a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	4293      	cmp	r3, r2
 800323e:	d111      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d107      	bne.n	8003264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0cc      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b68      	ldr	r3, [pc, #416]	@ (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d90c      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b65      	ldr	r3, [pc, #404]	@ (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b63      	ldr	r3, [pc, #396]	@ (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b8      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b59      	ldr	r3, [pc, #356]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a58      	ldr	r2, [pc, #352]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e4:	4b53      	ldr	r3, [pc, #332]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a52      	ldr	r2, [pc, #328]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b50      	ldr	r3, [pc, #320]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	494d      	ldr	r1, [pc, #308]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d044      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b47      	ldr	r3, [pc, #284]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d119      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	2b03      	cmp	r3, #3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b3f      	ldr	r3, [pc, #252]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e067      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b37      	ldr	r3, [pc, #220]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4934      	ldr	r1, [pc, #208]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7ff fa5c 	bl	8002824 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7ff fa58 	bl	8002824 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2b      	ldr	r3, [pc, #172]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b25      	ldr	r3, [pc, #148]	@ (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d20c      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b22      	ldr	r3, [pc, #136]	@ (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b20      	ldr	r3, [pc, #128]	@ (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4916      	ldr	r1, [pc, #88]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ea:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	490e      	ldr	r1, [pc, #56]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033fe:	f000 f821 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8003402:	4602      	mov	r2, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	490a      	ldr	r1, [pc, #40]	@ (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	5ccb      	ldrb	r3, [r1, r3]
 8003412:	fa22 f303 	lsr.w	r3, r2, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	@ (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff f9bc 	bl	800279c <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08009238 	.word	0x08009238
 800343c:	20000010 	.word	0x20000010
 8003440:	20000014 	.word	0x20000014

08003444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b090      	sub	sp, #64	@ 0x40
 800344a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345c:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b08      	cmp	r3, #8
 8003466:	d00d      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x40>
 8003468:	2b08      	cmp	r3, #8
 800346a:	f200 80a1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x34>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d003      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x3a>
 8003476:	e09b      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800347a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800347c:	e09b      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347e:	4b53      	ldr	r3, [pc, #332]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003480:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003482:	e098      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003484:	4b4f      	ldr	r3, [pc, #316]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800348c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348e:	4b4d      	ldr	r3, [pc, #308]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d028      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349a:	4b4a      	ldr	r3, [pc, #296]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	2200      	movs	r2, #0
 80034a2:	623b      	str	r3, [r7, #32]
 80034a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034ac:	2100      	movs	r1, #0
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x188>)
 80034b0:	fb03 f201 	mul.w	r2, r3, r1
 80034b4:	2300      	movs	r3, #0
 80034b6:	fb00 f303 	mul.w	r3, r0, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	4a43      	ldr	r2, [pc, #268]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x188>)
 80034be:	fba0 1202 	umull	r1, r2, r0, r2
 80034c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c4:	460a      	mov	r2, r1
 80034c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ca:	4413      	add	r3, r2
 80034cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d0:	2200      	movs	r2, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	61fa      	str	r2, [r7, #28]
 80034d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034de:	f7fd fbd3 	bl	8000c88 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4613      	mov	r3, r2
 80034e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ea:	e053      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ec:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	2200      	movs	r2, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	617a      	str	r2, [r7, #20]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034fe:	f04f 0b00 	mov.w	fp, #0
 8003502:	4652      	mov	r2, sl
 8003504:	465b      	mov	r3, fp
 8003506:	f04f 0000 	mov.w	r0, #0
 800350a:	f04f 0100 	mov.w	r1, #0
 800350e:	0159      	lsls	r1, r3, #5
 8003510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003514:	0150      	lsls	r0, r2, #5
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	ebb2 080a 	subs.w	r8, r2, sl
 800351e:	eb63 090b 	sbc.w	r9, r3, fp
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800352e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003532:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003536:	ebb2 0408 	subs.w	r4, r2, r8
 800353a:	eb63 0509 	sbc.w	r5, r3, r9
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	00eb      	lsls	r3, r5, #3
 8003548:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354c:	00e2      	lsls	r2, r4, #3
 800354e:	4614      	mov	r4, r2
 8003550:	461d      	mov	r5, r3
 8003552:	eb14 030a 	adds.w	r3, r4, sl
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	eb45 030b 	adc.w	r3, r5, fp
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357e:	2200      	movs	r2, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	60fa      	str	r2, [r7, #12]
 8003584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003588:	f7fd fb7e 	bl	8000c88 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80035b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3740      	adds	r7, #64	@ 0x40
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	017d7840 	.word	0x017d7840

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000010 	.word	0x20000010

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	@ (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08009248 	.word	0x08009248

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	@ (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08009248 	.word	0x08009248

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe fe0a 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 fc0c 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e041      	b.n	800376c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f839 	bl	8003774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f000 fbbd 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07c      	b.n	80038f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fe20 	bl	8004480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_PWM_Start+0xcc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <HAL_TIM_PWM_Start+0x178>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_TIM_PWM_Start+0xd0>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_TIM_PWM_Start+0xd2>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003880:	d01d      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <HAL_TIM_PWM_Start+0x17c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <HAL_TIM_PWM_Start+0x180>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	@ (800390c <HAL_TIM_PWM_Start+0x184>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a16      	ldr	r2, [pc, #88]	@ (8003900 <HAL_TIM_PWM_Start+0x178>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	@ (8003910 <HAL_TIM_PWM_Start+0x188>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	@ (8003914 <HAL_TIM_PWM_Start+0x18c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d111      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d010      	beq.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	e007      	b.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010000 	.word	0x40010000
 8003900:	40010400 	.word	0x40010400
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40001800 	.word	0x40001800

08003918 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e097      	b.n	8003a5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d106      	bne.n	8003946 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fe fbb1 	bl	80020a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f000 fa91 	bl	8003e94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	4313      	orrs	r3, r2
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039b8:	f023 030c 	bic.w	r3, r3, #12
 80039bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	4313      	orrs	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	011a      	lsls	r2, r3, #4
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	031b      	lsls	r3, r3, #12
 80039e8:	4313      	orrs	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d110      	bne.n	8003ab6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d102      	bne.n	8003aa0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a9a:	7b7b      	ldrb	r3, [r7, #13]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e069      	b.n	8003b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ab4:	e031      	b.n	8003b1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d110      	bne.n	8003ade <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d102      	bne.n	8003ac8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ac2:	7b3b      	ldrb	r3, [r7, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e055      	b.n	8003b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003adc:	e01d      	b.n	8003b1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d108      	bne.n	8003af6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae4:	7bbb      	ldrb	r3, [r7, #14]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d105      	bne.n	8003af6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aea:	7b7b      	ldrb	r3, [r7, #13]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d102      	bne.n	8003af6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003af0:	7b3b      	ldrb	r3, [r7, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e03e      	b.n	8003b78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_TIM_Encoder_Start+0xc4>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d008      	beq.n	8003b38 <HAL_TIM_Encoder_Start+0xd4>
 8003b26:	e00f      	b.n	8003b48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fca5 	bl	8004480 <TIM_CCxChannelCmd>
      break;
 8003b36:	e016      	b.n	8003b66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2104      	movs	r1, #4
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fc9d 	bl	8004480 <TIM_CCxChannelCmd>
      break;
 8003b46:	e00e      	b.n	8003b66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fc95 	bl	8004480 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fc8e 	bl	8004480 <TIM_CCxChannelCmd>
      break;
 8003b64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e0ae      	b.n	8003cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	f200 809f 	bhi.w	8003cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bae:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003ced 	.word	0x08003ced
 8003bbc:	08003ced 	.word	0x08003ced
 8003bc0:	08003ced 	.word	0x08003ced
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003ced 	.word	0x08003ced
 8003bcc:	08003ced 	.word	0x08003ced
 8003bd0:	08003ced 	.word	0x08003ced
 8003bd4:	08003c6b 	.word	0x08003c6b
 8003bd8:	08003ced 	.word	0x08003ced
 8003bdc:	08003ced 	.word	0x08003ced
 8003be0:	08003ced 	.word	0x08003ced
 8003be4:	08003cab 	.word	0x08003cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f9fc 	bl	8003fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6999      	ldr	r1, [r3, #24]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	619a      	str	r2, [r3, #24]
      break;
 8003c26:	e064      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fa4c 	bl	80040cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6999      	ldr	r1, [r3, #24]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	619a      	str	r2, [r3, #24]
      break;
 8003c68:	e043      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 faa1 	bl	80041b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0208 	orr.w	r2, r2, #8
 8003c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0204 	bic.w	r2, r2, #4
 8003c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69d9      	ldr	r1, [r3, #28]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
      break;
 8003ca8:	e023      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 faf5 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69da      	ldr	r2, [r3, #28]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69d9      	ldr	r1, [r3, #28]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	021a      	lsls	r2, r3, #8
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	61da      	str	r2, [r3, #28]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_TIM_ConfigClockSource+0x1c>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0b4      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x186>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d58:	d03e      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5e:	f200 8087 	bhi.w	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d66:	f000 8086 	beq.w	8003e76 <HAL_TIM_ConfigClockSource+0x172>
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6e:	d87f      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b70      	cmp	r3, #112	@ 0x70
 8003d72:	d01a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0xa6>
 8003d74:	2b70      	cmp	r3, #112	@ 0x70
 8003d76:	d87b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b60      	cmp	r3, #96	@ 0x60
 8003d7a:	d050      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x11a>
 8003d7c:	2b60      	cmp	r3, #96	@ 0x60
 8003d7e:	d877      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b50      	cmp	r3, #80	@ 0x50
 8003d82:	d03c      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0xfa>
 8003d84:	2b50      	cmp	r3, #80	@ 0x50
 8003d86:	d873      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b40      	cmp	r3, #64	@ 0x40
 8003d8a:	d058      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x13a>
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d86f      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b30      	cmp	r3, #48	@ 0x30
 8003d92:	d064      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b30      	cmp	r3, #48	@ 0x30
 8003d96:	d86b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d060      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d867      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d05c      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d05a      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	e062      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dba:	f000 fb41 	bl	8004440 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	609a      	str	r2, [r3, #8]
      break;
 8003dd6:	e04f      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de8:	f000 fb2a 	bl	8004440 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dfa:	609a      	str	r2, [r3, #8]
      break;
 8003dfc:	e03c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 fa9e 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2150      	movs	r1, #80	@ 0x50
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 faf7 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e02c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 fabd 	bl	80043aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2160      	movs	r1, #96	@ 0x60
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fae7 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e01c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 fa7e 	bl	800434c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2140      	movs	r1, #64	@ 0x40
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fad7 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e00c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f000 face 	bl	800440a <TIM_ITRx_SetConfig>
      break;
 8003e6e:	e003      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a46      	ldr	r2, [pc, #280]	@ (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a43      	ldr	r2, [pc, #268]	@ (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a42      	ldr	r2, [pc, #264]	@ (8003fc8 <TIM_Base_SetConfig+0x134>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a41      	ldr	r2, [pc, #260]	@ (8003fcc <TIM_Base_SetConfig+0x138>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a40      	ldr	r2, [pc, #256]	@ (8003fd0 <TIM_Base_SetConfig+0x13c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a35      	ldr	r2, [pc, #212]	@ (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef4:	d027      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a32      	ldr	r2, [pc, #200]	@ (8003fc4 <TIM_Base_SetConfig+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d023      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a31      	ldr	r2, [pc, #196]	@ (8003fc8 <TIM_Base_SetConfig+0x134>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01f      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a30      	ldr	r2, [pc, #192]	@ (8003fcc <TIM_Base_SetConfig+0x138>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd0 <TIM_Base_SetConfig+0x13c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d017      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd4 <TIM_Base_SetConfig+0x140>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd8 <TIM_Base_SetConfig+0x144>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00f      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2c      	ldr	r2, [pc, #176]	@ (8003fdc <TIM_Base_SetConfig+0x148>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe0 <TIM_Base_SetConfig+0x14c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe4 <TIM_Base_SetConfig+0x150>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a29      	ldr	r2, [pc, #164]	@ (8003fe8 <TIM_Base_SetConfig+0x154>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d108      	bne.n	8003f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a10      	ldr	r2, [pc, #64]	@ (8003fc0 <TIM_Base_SetConfig+0x12c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0xf8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a12      	ldr	r2, [pc, #72]	@ (8003fd0 <TIM_Base_SetConfig+0x13c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d103      	bne.n	8003f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40010400 	.word	0x40010400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800
 8003fe0:	40001800 	.word	0x40001800
 8003fe4:	40001c00 	.word	0x40001c00
 8003fe8:	40002000 	.word	0x40002000

08003fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f023 0201 	bic.w	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0302 	bic.w	r3, r3, #2
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a20      	ldr	r2, [pc, #128]	@ (80040c4 <TIM_OC1_SetConfig+0xd8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_OC1_SetConfig+0x64>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <TIM_OC1_SetConfig+0xdc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d10c      	bne.n	800406a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0308 	bic.w	r3, r3, #8
 8004056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <TIM_OC1_SetConfig+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_OC1_SetConfig+0x8e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a14      	ldr	r2, [pc, #80]	@ (80040c8 <TIM_OC1_SetConfig+0xdc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d111      	bne.n	800409e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 0210 	bic.w	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0320 	bic.w	r3, r3, #32
 8004116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a22      	ldr	r2, [pc, #136]	@ (80041b0 <TIM_OC2_SetConfig+0xe4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC2_SetConfig+0x68>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a21      	ldr	r2, [pc, #132]	@ (80041b4 <TIM_OC2_SetConfig+0xe8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10d      	bne.n	8004150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <TIM_OC2_SetConfig+0xe4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_OC2_SetConfig+0x94>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <TIM_OC2_SetConfig+0xe8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d113      	bne.n	8004188 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40010400 	.word	0x40010400

080041b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <TIM_OC3_SetConfig+0xe0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_OC3_SetConfig+0x66>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a20      	ldr	r2, [pc, #128]	@ (800429c <TIM_OC3_SetConfig+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10d      	bne.n	800423a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <TIM_OC3_SetConfig+0xe0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_OC3_SetConfig+0x92>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a15      	ldr	r2, [pc, #84]	@ (800429c <TIM_OC3_SetConfig+0xe4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d113      	bne.n	8004272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40010000 	.word	0x40010000
 800429c:	40010400 	.word	0x40010400

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a12      	ldr	r2, [pc, #72]	@ (8004344 <TIM_OC4_SetConfig+0xa4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC4_SetConfig+0x68>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <TIM_OC4_SetConfig+0xa8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d109      	bne.n	800431c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800430e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	019b      	lsls	r3, r3, #6
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40010000 	.word	0x40010000
 8004348:	40010400 	.word	0x40010400

0800434c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f023 030a 	bic.w	r3, r3, #10
 8004388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 0210 	bic.w	r2, r3, #16
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	031b      	lsls	r3, r3, #12
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	f043 0307 	orr.w	r3, r3, #7
 800442c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800445a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	431a      	orrs	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	609a      	str	r2, [r3, #8]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2201      	movs	r2, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e05a      	b.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a21      	ldr	r2, [pc, #132]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d022      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004530:	d01d      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1d      	ldr	r2, [pc, #116]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d018      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1b      	ldr	r2, [pc, #108]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1a      	ldr	r2, [pc, #104]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a18      	ldr	r2, [pc, #96]	@ (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a17      	ldr	r2, [pc, #92]	@ (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a15      	ldr	r2, [pc, #84]	@ (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d10c      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40001800 	.word	0x40001800

080045c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e042      	b.n	800465c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fd ff56 	bl	800249c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	@ 0x24
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f82b 	bl	8004664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800461c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800462c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800463c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b0c0      	sub	sp, #256	@ 0x100
 800466a:	af00      	add	r7, sp, #0
 800466c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	68d9      	ldr	r1, [r3, #12]
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	ea40 0301 	orr.w	r3, r0, r1
 800468c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	431a      	orrs	r2, r3
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046bc:	f021 010c 	bic.w	r1, r1, #12
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046ca:	430b      	orrs	r3, r1
 80046cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	6999      	ldr	r1, [r3, #24]
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	ea40 0301 	orr.w	r3, r0, r1
 80046ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004930 <UART_SetConfig+0x2cc>)
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d005      	beq.n	8004704 <UART_SetConfig+0xa0>
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004934 <UART_SetConfig+0x2d0>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d104      	bne.n	800470e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004704:	f7fe ff84 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8004708:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800470c:	e003      	b.n	8004716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800470e:	f7fe ff6b 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8004712:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004720:	f040 810c 	bne.w	800493c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004728:	2200      	movs	r2, #0
 800472a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800472e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	1891      	adds	r1, r2, r2
 800473c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800473e:	415b      	adcs	r3, r3
 8004740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004746:	4621      	mov	r1, r4
 8004748:	eb12 0801 	adds.w	r8, r2, r1
 800474c:	4629      	mov	r1, r5
 800474e:	eb43 0901 	adc.w	r9, r3, r1
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800475e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004766:	4690      	mov	r8, r2
 8004768:	4699      	mov	r9, r3
 800476a:	4623      	mov	r3, r4
 800476c:	eb18 0303 	adds.w	r3, r8, r3
 8004770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004774:	462b      	mov	r3, r5
 8004776:	eb49 0303 	adc.w	r3, r9, r3
 800477a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800478a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800478e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004792:	460b      	mov	r3, r1
 8004794:	18db      	adds	r3, r3, r3
 8004796:	653b      	str	r3, [r7, #80]	@ 0x50
 8004798:	4613      	mov	r3, r2
 800479a:	eb42 0303 	adc.w	r3, r2, r3
 800479e:	657b      	str	r3, [r7, #84]	@ 0x54
 80047a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047a8:	f7fc fa6e 	bl	8000c88 <__aeabi_uldivmod>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <UART_SetConfig+0x2d4>)
 80047b2:	fba3 2302 	umull	r2, r3, r3, r2
 80047b6:	095b      	lsrs	r3, r3, #5
 80047b8:	011c      	lsls	r4, r3, #4
 80047ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047cc:	4642      	mov	r2, r8
 80047ce:	464b      	mov	r3, r9
 80047d0:	1891      	adds	r1, r2, r2
 80047d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047d4:	415b      	adcs	r3, r3
 80047d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047dc:	4641      	mov	r1, r8
 80047de:	eb12 0a01 	adds.w	sl, r2, r1
 80047e2:	4649      	mov	r1, r9
 80047e4:	eb43 0b01 	adc.w	fp, r3, r1
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047fc:	4692      	mov	sl, r2
 80047fe:	469b      	mov	fp, r3
 8004800:	4643      	mov	r3, r8
 8004802:	eb1a 0303 	adds.w	r3, sl, r3
 8004806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800480a:	464b      	mov	r3, r9
 800480c:	eb4b 0303 	adc.w	r3, fp, r3
 8004810:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004820:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004828:	460b      	mov	r3, r1
 800482a:	18db      	adds	r3, r3, r3
 800482c:	643b      	str	r3, [r7, #64]	@ 0x40
 800482e:	4613      	mov	r3, r2
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	647b      	str	r3, [r7, #68]	@ 0x44
 8004836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800483a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800483e:	f7fc fa23 	bl	8000c88 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4611      	mov	r1, r2
 8004848:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <UART_SetConfig+0x2d4>)
 800484a:	fba3 2301 	umull	r2, r3, r3, r1
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2264      	movs	r2, #100	@ 0x64
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	1acb      	subs	r3, r1, r3
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800485e:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <UART_SetConfig+0x2d4>)
 8004860:	fba3 2302 	umull	r2, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800486c:	441c      	add	r4, r3
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004878:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800487c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004888:	415b      	adcs	r3, r3
 800488a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800488c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004890:	4641      	mov	r1, r8
 8004892:	1851      	adds	r1, r2, r1
 8004894:	6339      	str	r1, [r7, #48]	@ 0x30
 8004896:	4649      	mov	r1, r9
 8004898:	414b      	adcs	r3, r1
 800489a:	637b      	str	r3, [r7, #52]	@ 0x34
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048a8:	4659      	mov	r1, fp
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4651      	mov	r1, sl
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4642      	mov	r2, r8
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048c4:	464b      	mov	r3, r9
 80048c6:	460a      	mov	r2, r1
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048e4:	460b      	mov	r3, r1
 80048e6:	18db      	adds	r3, r3, r3
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ea:	4613      	mov	r3, r2
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048fa:	f7fc f9c5 	bl	8000c88 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4b0d      	ldr	r3, [pc, #52]	@ (8004938 <UART_SetConfig+0x2d4>)
 8004904:	fba3 1302 	umull	r1, r3, r3, r2
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	2164      	movs	r1, #100	@ 0x64
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	3332      	adds	r3, #50	@ 0x32
 8004916:	4a08      	ldr	r2, [pc, #32]	@ (8004938 <UART_SetConfig+0x2d4>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 0207 	and.w	r2, r3, #7
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4422      	add	r2, r4
 800492a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800492c:	e106      	b.n	8004b3c <UART_SetConfig+0x4d8>
 800492e:	bf00      	nop
 8004930:	40011000 	.word	0x40011000
 8004934:	40011400 	.word	0x40011400
 8004938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800493c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004940:	2200      	movs	r2, #0
 8004942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004946:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800494a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	1891      	adds	r1, r2, r2
 8004954:	6239      	str	r1, [r7, #32]
 8004956:	415b      	adcs	r3, r3
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
 800495a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800495e:	4641      	mov	r1, r8
 8004960:	1854      	adds	r4, r2, r1
 8004962:	4649      	mov	r1, r9
 8004964:	eb43 0501 	adc.w	r5, r3, r1
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	00eb      	lsls	r3, r5, #3
 8004972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	4643      	mov	r3, r8
 800497e:	18e3      	adds	r3, r4, r3
 8004980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004984:	464b      	mov	r3, r9
 8004986:	eb45 0303 	adc.w	r3, r5, r3
 800498a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800499a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049aa:	4629      	mov	r1, r5
 80049ac:	008b      	lsls	r3, r1, #2
 80049ae:	4621      	mov	r1, r4
 80049b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049b4:	4621      	mov	r1, r4
 80049b6:	008a      	lsls	r2, r1, #2
 80049b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049bc:	f7fc f964 	bl	8000c88 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4b60      	ldr	r3, [pc, #384]	@ (8004b48 <UART_SetConfig+0x4e4>)
 80049c6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	011c      	lsls	r4, r3, #4
 80049ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	1891      	adds	r1, r2, r2
 80049e6:	61b9      	str	r1, [r7, #24]
 80049e8:	415b      	adcs	r3, r3
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f0:	4641      	mov	r1, r8
 80049f2:	1851      	adds	r1, r2, r1
 80049f4:	6139      	str	r1, [r7, #16]
 80049f6:	4649      	mov	r1, r9
 80049f8:	414b      	adcs	r3, r1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a08:	4659      	mov	r1, fp
 8004a0a:	00cb      	lsls	r3, r1, #3
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a12:	4651      	mov	r1, sl
 8004a14:	00ca      	lsls	r2, r1, #3
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4642      	mov	r2, r8
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a24:	464b      	mov	r3, r9
 8004a26:	460a      	mov	r2, r1
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a48:	4649      	mov	r1, r9
 8004a4a:	008b      	lsls	r3, r1, #2
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a52:	4641      	mov	r1, r8
 8004a54:	008a      	lsls	r2, r1, #2
 8004a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a5a:	f7fc f915 	bl	8000c88 <__aeabi_uldivmod>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	4611      	mov	r1, r2
 8004a64:	4b38      	ldr	r3, [pc, #224]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004a66:	fba3 2301 	umull	r2, r3, r3, r1
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2264      	movs	r2, #100	@ 0x64
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	1acb      	subs	r3, r1, r3
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	3332      	adds	r3, #50	@ 0x32
 8004a78:	4a33      	ldr	r2, [pc, #204]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a84:	441c      	add	r4, r3
 8004a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a94:	4642      	mov	r2, r8
 8004a96:	464b      	mov	r3, r9
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa4:	4641      	mov	r1, r8
 8004aa6:	1851      	adds	r1, r2, r1
 8004aa8:	6039      	str	r1, [r7, #0]
 8004aaa:	4649      	mov	r1, r9
 8004aac:	414b      	adcs	r3, r1
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004abc:	4659      	mov	r1, fp
 8004abe:	00cb      	lsls	r3, r1, #3
 8004ac0:	4651      	mov	r1, sl
 8004ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	00ca      	lsls	r2, r1, #3
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4642      	mov	r2, r8
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	460a      	mov	r2, r1
 8004ada:	eb42 0303 	adc.w	r3, r2, r3
 8004ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004af8:	4649      	mov	r1, r9
 8004afa:	008b      	lsls	r3, r1, #2
 8004afc:	4641      	mov	r1, r8
 8004afe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b02:	4641      	mov	r1, r8
 8004b04:	008a      	lsls	r2, r1, #2
 8004b06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b0a:	f7fc f8bd 	bl	8000c88 <__aeabi_uldivmod>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004b14:	fba3 1302 	umull	r1, r3, r3, r2
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	2164      	movs	r1, #100	@ 0x64
 8004b1c:	fb01 f303 	mul.w	r3, r1, r3
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	3332      	adds	r3, #50	@ 0x32
 8004b26:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <UART_SetConfig+0x4e4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f003 020f 	and.w	r2, r3, #15
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4422      	add	r2, r4
 8004b3a:	609a      	str	r2, [r3, #8]
}
 8004b3c:	bf00      	nop
 8004b3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b42:	46bd      	mov	sp, r7
 8004b44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b48:	51eb851f 	.word	0x51eb851f

08004b4c <sulp>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	ec45 4b10 	vmov	d0, r4, r5
 8004b56:	4616      	mov	r6, r2
 8004b58:	f003 fcfe 	bl	8008558 <__ulp>
 8004b5c:	ec51 0b10 	vmov	r0, r1, d0
 8004b60:	b17e      	cbz	r6, 8004b82 <sulp+0x36>
 8004b62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004b66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dd09      	ble.n	8004b82 <sulp+0x36>
 8004b6e:	051b      	lsls	r3, r3, #20
 8004b70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004b74:	2400      	movs	r4, #0
 8004b76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	f7fb fd3b 	bl	80005f8 <__aeabi_dmul>
 8004b82:	ec41 0b10 	vmov	d0, r0, r1
 8004b86:	bd70      	pop	{r4, r5, r6, pc}

08004b88 <_strtod_l>:
 8004b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	b09f      	sub	sp, #124	@ 0x7c
 8004b8e:	460c      	mov	r4, r1
 8004b90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004b92:	2200      	movs	r2, #0
 8004b94:	921a      	str	r2, [sp, #104]	@ 0x68
 8004b96:	9005      	str	r0, [sp, #20]
 8004b98:	f04f 0a00 	mov.w	sl, #0
 8004b9c:	f04f 0b00 	mov.w	fp, #0
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ba4:	7811      	ldrb	r1, [r2, #0]
 8004ba6:	292b      	cmp	r1, #43	@ 0x2b
 8004ba8:	d04a      	beq.n	8004c40 <_strtod_l+0xb8>
 8004baa:	d838      	bhi.n	8004c1e <_strtod_l+0x96>
 8004bac:	290d      	cmp	r1, #13
 8004bae:	d832      	bhi.n	8004c16 <_strtod_l+0x8e>
 8004bb0:	2908      	cmp	r1, #8
 8004bb2:	d832      	bhi.n	8004c1a <_strtod_l+0x92>
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	d03b      	beq.n	8004c30 <_strtod_l+0xa8>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004bbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004bbe:	782a      	ldrb	r2, [r5, #0]
 8004bc0:	2a30      	cmp	r2, #48	@ 0x30
 8004bc2:	f040 80b3 	bne.w	8004d2c <_strtod_l+0x1a4>
 8004bc6:	786a      	ldrb	r2, [r5, #1]
 8004bc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004bcc:	2a58      	cmp	r2, #88	@ 0x58
 8004bce:	d16e      	bne.n	8004cae <_strtod_l+0x126>
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	ab1a      	add	r3, sp, #104	@ 0x68
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4a8e      	ldr	r2, [pc, #568]	@ (8004e14 <_strtod_l+0x28c>)
 8004bdc:	9805      	ldr	r0, [sp, #20]
 8004bde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004be0:	a919      	add	r1, sp, #100	@ 0x64
 8004be2:	f002 fdab 	bl	800773c <__gethex>
 8004be6:	f010 060f 	ands.w	r6, r0, #15
 8004bea:	4604      	mov	r4, r0
 8004bec:	d005      	beq.n	8004bfa <_strtod_l+0x72>
 8004bee:	2e06      	cmp	r6, #6
 8004bf0:	d128      	bne.n	8004c44 <_strtod_l+0xbc>
 8004bf2:	3501      	adds	r5, #1
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9519      	str	r5, [sp, #100]	@ 0x64
 8004bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 858e 	bne.w	800571e <_strtod_l+0xb96>
 8004c02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c04:	b1cb      	cbz	r3, 8004c3a <_strtod_l+0xb2>
 8004c06:	4652      	mov	r2, sl
 8004c08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004c0c:	ec43 2b10 	vmov	d0, r2, r3
 8004c10:	b01f      	add	sp, #124	@ 0x7c
 8004c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c16:	2920      	cmp	r1, #32
 8004c18:	d1ce      	bne.n	8004bb8 <_strtod_l+0x30>
 8004c1a:	3201      	adds	r2, #1
 8004c1c:	e7c1      	b.n	8004ba2 <_strtod_l+0x1a>
 8004c1e:	292d      	cmp	r1, #45	@ 0x2d
 8004c20:	d1ca      	bne.n	8004bb8 <_strtod_l+0x30>
 8004c22:	2101      	movs	r1, #1
 8004c24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004c26:	1c51      	adds	r1, r2, #1
 8004c28:	9119      	str	r1, [sp, #100]	@ 0x64
 8004c2a:	7852      	ldrb	r2, [r2, #1]
 8004c2c:	2a00      	cmp	r2, #0
 8004c2e:	d1c5      	bne.n	8004bbc <_strtod_l+0x34>
 8004c30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c32:	9419      	str	r4, [sp, #100]	@ 0x64
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 8570 	bne.w	800571a <_strtod_l+0xb92>
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	465b      	mov	r3, fp
 8004c3e:	e7e5      	b.n	8004c0c <_strtod_l+0x84>
 8004c40:	2100      	movs	r1, #0
 8004c42:	e7ef      	b.n	8004c24 <_strtod_l+0x9c>
 8004c44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004c46:	b13a      	cbz	r2, 8004c58 <_strtod_l+0xd0>
 8004c48:	2135      	movs	r1, #53	@ 0x35
 8004c4a:	a81c      	add	r0, sp, #112	@ 0x70
 8004c4c:	f003 fd7e 	bl	800874c <__copybits>
 8004c50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004c52:	9805      	ldr	r0, [sp, #20]
 8004c54:	f003 f94c 	bl	8007ef0 <_Bfree>
 8004c58:	3e01      	subs	r6, #1
 8004c5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004c5c:	2e04      	cmp	r6, #4
 8004c5e:	d806      	bhi.n	8004c6e <_strtod_l+0xe6>
 8004c60:	e8df f006 	tbb	[pc, r6]
 8004c64:	201d0314 	.word	0x201d0314
 8004c68:	14          	.byte	0x14
 8004c69:	00          	.byte	0x00
 8004c6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004c6e:	05e1      	lsls	r1, r4, #23
 8004c70:	bf48      	it	mi
 8004c72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004c76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004c7a:	0d1b      	lsrs	r3, r3, #20
 8004c7c:	051b      	lsls	r3, r3, #20
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1bb      	bne.n	8004bfa <_strtod_l+0x72>
 8004c82:	f001 fdf5 	bl	8006870 <__errno>
 8004c86:	2322      	movs	r3, #34	@ 0x22
 8004c88:	6003      	str	r3, [r0, #0]
 8004c8a:	e7b6      	b.n	8004bfa <_strtod_l+0x72>
 8004c8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004c90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004c94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004c98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004c9c:	e7e7      	b.n	8004c6e <_strtod_l+0xe6>
 8004c9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004e1c <_strtod_l+0x294>
 8004ca2:	e7e4      	b.n	8004c6e <_strtod_l+0xe6>
 8004ca4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004ca8:	f04f 3aff 	mov.w	sl, #4294967295
 8004cac:	e7df      	b.n	8004c6e <_strtod_l+0xe6>
 8004cae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	2b30      	cmp	r3, #48	@ 0x30
 8004cb8:	d0f9      	beq.n	8004cae <_strtod_l+0x126>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d09d      	beq.n	8004bfa <_strtod_l+0x72>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004cc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9308      	str	r3, [sp, #32]
 8004cca:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ccc:	461f      	mov	r7, r3
 8004cce:	220a      	movs	r2, #10
 8004cd0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004cd2:	7805      	ldrb	r5, [r0, #0]
 8004cd4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004cd8:	b2d9      	uxtb	r1, r3
 8004cda:	2909      	cmp	r1, #9
 8004cdc:	d928      	bls.n	8004d30 <_strtod_l+0x1a8>
 8004cde:	494e      	ldr	r1, [pc, #312]	@ (8004e18 <_strtod_l+0x290>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f001 fd69 	bl	80067b8 <strncmp>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d032      	beq.n	8004d50 <_strtod_l+0x1c8>
 8004cea:	2000      	movs	r0, #0
 8004cec:	462a      	mov	r2, r5
 8004cee:	4681      	mov	r9, r0
 8004cf0:	463d      	mov	r5, r7
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2a65      	cmp	r2, #101	@ 0x65
 8004cf6:	d001      	beq.n	8004cfc <_strtod_l+0x174>
 8004cf8:	2a45      	cmp	r2, #69	@ 0x45
 8004cfa:	d114      	bne.n	8004d26 <_strtod_l+0x19e>
 8004cfc:	b91d      	cbnz	r5, 8004d06 <_strtod_l+0x17e>
 8004cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d00:	4302      	orrs	r2, r0
 8004d02:	d095      	beq.n	8004c30 <_strtod_l+0xa8>
 8004d04:	2500      	movs	r5, #0
 8004d06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004d08:	1c62      	adds	r2, r4, #1
 8004d0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d0c:	7862      	ldrb	r2, [r4, #1]
 8004d0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8004d10:	d077      	beq.n	8004e02 <_strtod_l+0x27a>
 8004d12:	2a2d      	cmp	r2, #45	@ 0x2d
 8004d14:	d07b      	beq.n	8004e0e <_strtod_l+0x286>
 8004d16:	f04f 0c00 	mov.w	ip, #0
 8004d1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004d1e:	2909      	cmp	r1, #9
 8004d20:	f240 8082 	bls.w	8004e28 <_strtod_l+0x2a0>
 8004d24:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d26:	f04f 0800 	mov.w	r8, #0
 8004d2a:	e0a2      	b.n	8004e72 <_strtod_l+0x2ea>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e7c7      	b.n	8004cc0 <_strtod_l+0x138>
 8004d30:	2f08      	cmp	r7, #8
 8004d32:	bfd5      	itete	le
 8004d34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004d36:	9908      	ldrgt	r1, [sp, #32]
 8004d38:	fb02 3301 	mlale	r3, r2, r1, r3
 8004d3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004d40:	f100 0001 	add.w	r0, r0, #1
 8004d44:	bfd4      	ite	le
 8004d46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004d48:	9308      	strgt	r3, [sp, #32]
 8004d4a:	3701      	adds	r7, #1
 8004d4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8004d4e:	e7bf      	b.n	8004cd0 <_strtod_l+0x148>
 8004d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d56:	785a      	ldrb	r2, [r3, #1]
 8004d58:	b37f      	cbz	r7, 8004dba <_strtod_l+0x232>
 8004d5a:	4681      	mov	r9, r0
 8004d5c:	463d      	mov	r5, r7
 8004d5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	d912      	bls.n	8004d8c <_strtod_l+0x204>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e7c4      	b.n	8004cf4 <_strtod_l+0x16c>
 8004d6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d70:	785a      	ldrb	r2, [r3, #1]
 8004d72:	3001      	adds	r0, #1
 8004d74:	2a30      	cmp	r2, #48	@ 0x30
 8004d76:	d0f8      	beq.n	8004d6a <_strtod_l+0x1e2>
 8004d78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	f200 84d3 	bhi.w	8005728 <_strtod_l+0xba0>
 8004d82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d84:	930c      	str	r3, [sp, #48]	@ 0x30
 8004d86:	4681      	mov	r9, r0
 8004d88:	2000      	movs	r0, #0
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	3a30      	subs	r2, #48	@ 0x30
 8004d8e:	f100 0301 	add.w	r3, r0, #1
 8004d92:	d02a      	beq.n	8004dea <_strtod_l+0x262>
 8004d94:	4499      	add	r9, r3
 8004d96:	eb00 0c05 	add.w	ip, r0, r5
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	210a      	movs	r1, #10
 8004d9e:	4563      	cmp	r3, ip
 8004da0:	d10d      	bne.n	8004dbe <_strtod_l+0x236>
 8004da2:	1c69      	adds	r1, r5, #1
 8004da4:	4401      	add	r1, r0
 8004da6:	4428      	add	r0, r5
 8004da8:	2808      	cmp	r0, #8
 8004daa:	dc16      	bgt.n	8004dda <_strtod_l+0x252>
 8004dac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dae:	230a      	movs	r3, #10
 8004db0:	fb03 2300 	mla	r3, r3, r0, r2
 8004db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004db6:	2300      	movs	r3, #0
 8004db8:	e018      	b.n	8004dec <_strtod_l+0x264>
 8004dba:	4638      	mov	r0, r7
 8004dbc:	e7da      	b.n	8004d74 <_strtod_l+0x1ec>
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	f103 0301 	add.w	r3, r3, #1
 8004dc4:	dc03      	bgt.n	8004dce <_strtod_l+0x246>
 8004dc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004dc8:	434e      	muls	r6, r1
 8004dca:	960a      	str	r6, [sp, #40]	@ 0x28
 8004dcc:	e7e7      	b.n	8004d9e <_strtod_l+0x216>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	bfde      	ittt	le
 8004dd2:	9e08      	ldrle	r6, [sp, #32]
 8004dd4:	434e      	mulle	r6, r1
 8004dd6:	9608      	strle	r6, [sp, #32]
 8004dd8:	e7e1      	b.n	8004d9e <_strtod_l+0x216>
 8004dda:	280f      	cmp	r0, #15
 8004ddc:	dceb      	bgt.n	8004db6 <_strtod_l+0x22e>
 8004dde:	9808      	ldr	r0, [sp, #32]
 8004de0:	230a      	movs	r3, #10
 8004de2:	fb03 2300 	mla	r3, r3, r0, r2
 8004de6:	9308      	str	r3, [sp, #32]
 8004de8:	e7e5      	b.n	8004db6 <_strtod_l+0x22e>
 8004dea:	4629      	mov	r1, r5
 8004dec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004dee:	1c50      	adds	r0, r2, #1
 8004df0:	9019      	str	r0, [sp, #100]	@ 0x64
 8004df2:	7852      	ldrb	r2, [r2, #1]
 8004df4:	4618      	mov	r0, r3
 8004df6:	460d      	mov	r5, r1
 8004df8:	e7b1      	b.n	8004d5e <_strtod_l+0x1d6>
 8004dfa:	f04f 0900 	mov.w	r9, #0
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e77d      	b.n	8004cfe <_strtod_l+0x176>
 8004e02:	f04f 0c00 	mov.w	ip, #0
 8004e06:	1ca2      	adds	r2, r4, #2
 8004e08:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e0a:	78a2      	ldrb	r2, [r4, #2]
 8004e0c:	e785      	b.n	8004d1a <_strtod_l+0x192>
 8004e0e:	f04f 0c01 	mov.w	ip, #1
 8004e12:	e7f8      	b.n	8004e06 <_strtod_l+0x27e>
 8004e14:	08009268 	.word	0x08009268
 8004e18:	08009250 	.word	0x08009250
 8004e1c:	7ff00000 	.word	0x7ff00000
 8004e20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e22:	1c51      	adds	r1, r2, #1
 8004e24:	9119      	str	r1, [sp, #100]	@ 0x64
 8004e26:	7852      	ldrb	r2, [r2, #1]
 8004e28:	2a30      	cmp	r2, #48	@ 0x30
 8004e2a:	d0f9      	beq.n	8004e20 <_strtod_l+0x298>
 8004e2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004e30:	2908      	cmp	r1, #8
 8004e32:	f63f af78 	bhi.w	8004d26 <_strtod_l+0x19e>
 8004e36:	3a30      	subs	r2, #48	@ 0x30
 8004e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004e3e:	f04f 080a 	mov.w	r8, #10
 8004e42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e44:	1c56      	adds	r6, r2, #1
 8004e46:	9619      	str	r6, [sp, #100]	@ 0x64
 8004e48:	7852      	ldrb	r2, [r2, #1]
 8004e4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004e4e:	f1be 0f09 	cmp.w	lr, #9
 8004e52:	d939      	bls.n	8004ec8 <_strtod_l+0x340>
 8004e54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e56:	1a76      	subs	r6, r6, r1
 8004e58:	2e08      	cmp	r6, #8
 8004e5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004e5e:	dc03      	bgt.n	8004e68 <_strtod_l+0x2e0>
 8004e60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004e62:	4588      	cmp	r8, r1
 8004e64:	bfa8      	it	ge
 8004e66:	4688      	movge	r8, r1
 8004e68:	f1bc 0f00 	cmp.w	ip, #0
 8004e6c:	d001      	beq.n	8004e72 <_strtod_l+0x2ea>
 8004e6e:	f1c8 0800 	rsb	r8, r8, #0
 8004e72:	2d00      	cmp	r5, #0
 8004e74:	d14e      	bne.n	8004f14 <_strtod_l+0x38c>
 8004e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e78:	4308      	orrs	r0, r1
 8004e7a:	f47f aebe 	bne.w	8004bfa <_strtod_l+0x72>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f47f aed6 	bne.w	8004c30 <_strtod_l+0xa8>
 8004e84:	2a69      	cmp	r2, #105	@ 0x69
 8004e86:	d028      	beq.n	8004eda <_strtod_l+0x352>
 8004e88:	dc25      	bgt.n	8004ed6 <_strtod_l+0x34e>
 8004e8a:	2a49      	cmp	r2, #73	@ 0x49
 8004e8c:	d025      	beq.n	8004eda <_strtod_l+0x352>
 8004e8e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004e90:	f47f aece 	bne.w	8004c30 <_strtod_l+0xa8>
 8004e94:	499b      	ldr	r1, [pc, #620]	@ (8005104 <_strtod_l+0x57c>)
 8004e96:	a819      	add	r0, sp, #100	@ 0x64
 8004e98:	f002 fe72 	bl	8007b80 <__match>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f43f aec7 	beq.w	8004c30 <_strtod_l+0xa8>
 8004ea2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b28      	cmp	r3, #40	@ 0x28
 8004ea8:	d12e      	bne.n	8004f08 <_strtod_l+0x380>
 8004eaa:	4997      	ldr	r1, [pc, #604]	@ (8005108 <_strtod_l+0x580>)
 8004eac:	aa1c      	add	r2, sp, #112	@ 0x70
 8004eae:	a819      	add	r0, sp, #100	@ 0x64
 8004eb0:	f002 fe7a 	bl	8007ba8 <__hexnan>
 8004eb4:	2805      	cmp	r0, #5
 8004eb6:	d127      	bne.n	8004f08 <_strtod_l+0x380>
 8004eb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004eba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004ebe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004ec2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004ec6:	e698      	b.n	8004bfa <_strtod_l+0x72>
 8004ec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004eca:	fb08 2101 	mla	r1, r8, r1, r2
 8004ece:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004ed2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004ed4:	e7b5      	b.n	8004e42 <_strtod_l+0x2ba>
 8004ed6:	2a6e      	cmp	r2, #110	@ 0x6e
 8004ed8:	e7da      	b.n	8004e90 <_strtod_l+0x308>
 8004eda:	498c      	ldr	r1, [pc, #560]	@ (800510c <_strtod_l+0x584>)
 8004edc:	a819      	add	r0, sp, #100	@ 0x64
 8004ede:	f002 fe4f 	bl	8007b80 <__match>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	f43f aea4 	beq.w	8004c30 <_strtod_l+0xa8>
 8004ee8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004eea:	4989      	ldr	r1, [pc, #548]	@ (8005110 <_strtod_l+0x588>)
 8004eec:	3b01      	subs	r3, #1
 8004eee:	a819      	add	r0, sp, #100	@ 0x64
 8004ef0:	9319      	str	r3, [sp, #100]	@ 0x64
 8004ef2:	f002 fe45 	bl	8007b80 <__match>
 8004ef6:	b910      	cbnz	r0, 8004efe <_strtod_l+0x376>
 8004ef8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004efa:	3301      	adds	r3, #1
 8004efc:	9319      	str	r3, [sp, #100]	@ 0x64
 8004efe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005120 <_strtod_l+0x598>
 8004f02:	f04f 0a00 	mov.w	sl, #0
 8004f06:	e678      	b.n	8004bfa <_strtod_l+0x72>
 8004f08:	4882      	ldr	r0, [pc, #520]	@ (8005114 <_strtod_l+0x58c>)
 8004f0a:	f001 fced 	bl	80068e8 <nan>
 8004f0e:	ec5b ab10 	vmov	sl, fp, d0
 8004f12:	e672      	b.n	8004bfa <_strtod_l+0x72>
 8004f14:	eba8 0309 	sub.w	r3, r8, r9
 8004f18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f1c:	2f00      	cmp	r7, #0
 8004f1e:	bf08      	it	eq
 8004f20:	462f      	moveq	r7, r5
 8004f22:	2d10      	cmp	r5, #16
 8004f24:	462c      	mov	r4, r5
 8004f26:	bfa8      	it	ge
 8004f28:	2410      	movge	r4, #16
 8004f2a:	f7fb faeb 	bl	8000504 <__aeabi_ui2d>
 8004f2e:	2d09      	cmp	r5, #9
 8004f30:	4682      	mov	sl, r0
 8004f32:	468b      	mov	fp, r1
 8004f34:	dc13      	bgt.n	8004f5e <_strtod_l+0x3d6>
 8004f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f43f ae5e 	beq.w	8004bfa <_strtod_l+0x72>
 8004f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f40:	dd78      	ble.n	8005034 <_strtod_l+0x4ac>
 8004f42:	2b16      	cmp	r3, #22
 8004f44:	dc5f      	bgt.n	8005006 <_strtod_l+0x47e>
 8004f46:	4974      	ldr	r1, [pc, #464]	@ (8005118 <_strtod_l+0x590>)
 8004f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f50:	4652      	mov	r2, sl
 8004f52:	465b      	mov	r3, fp
 8004f54:	f7fb fb50 	bl	80005f8 <__aeabi_dmul>
 8004f58:	4682      	mov	sl, r0
 8004f5a:	468b      	mov	fp, r1
 8004f5c:	e64d      	b.n	8004bfa <_strtod_l+0x72>
 8004f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8005118 <_strtod_l+0x590>)
 8004f60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004f68:	f7fb fb46 	bl	80005f8 <__aeabi_dmul>
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	9808      	ldr	r0, [sp, #32]
 8004f70:	468b      	mov	fp, r1
 8004f72:	f7fb fac7 	bl	8000504 <__aeabi_ui2d>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	f7fb f985 	bl	800028c <__adddf3>
 8004f82:	2d0f      	cmp	r5, #15
 8004f84:	4682      	mov	sl, r0
 8004f86:	468b      	mov	fp, r1
 8004f88:	ddd5      	ble.n	8004f36 <_strtod_l+0x3ae>
 8004f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f8c:	1b2c      	subs	r4, r5, r4
 8004f8e:	441c      	add	r4, r3
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	f340 8096 	ble.w	80050c2 <_strtod_l+0x53a>
 8004f96:	f014 030f 	ands.w	r3, r4, #15
 8004f9a:	d00a      	beq.n	8004fb2 <_strtod_l+0x42a>
 8004f9c:	495e      	ldr	r1, [pc, #376]	@ (8005118 <_strtod_l+0x590>)
 8004f9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	465b      	mov	r3, fp
 8004fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004faa:	f7fb fb25 	bl	80005f8 <__aeabi_dmul>
 8004fae:	4682      	mov	sl, r0
 8004fb0:	468b      	mov	fp, r1
 8004fb2:	f034 040f 	bics.w	r4, r4, #15
 8004fb6:	d073      	beq.n	80050a0 <_strtod_l+0x518>
 8004fb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004fbc:	dd48      	ble.n	8005050 <_strtod_l+0x4c8>
 8004fbe:	2400      	movs	r4, #0
 8004fc0:	46a0      	mov	r8, r4
 8004fc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004fc4:	46a1      	mov	r9, r4
 8004fc6:	9a05      	ldr	r2, [sp, #20]
 8004fc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005120 <_strtod_l+0x598>
 8004fcc:	2322      	movs	r3, #34	@ 0x22
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	f04f 0a00 	mov.w	sl, #0
 8004fd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f43f ae0f 	beq.w	8004bfa <_strtod_l+0x72>
 8004fdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004fde:	9805      	ldr	r0, [sp, #20]
 8004fe0:	f002 ff86 	bl	8007ef0 <_Bfree>
 8004fe4:	9805      	ldr	r0, [sp, #20]
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	f002 ff82 	bl	8007ef0 <_Bfree>
 8004fec:	9805      	ldr	r0, [sp, #20]
 8004fee:	4641      	mov	r1, r8
 8004ff0:	f002 ff7e 	bl	8007ef0 <_Bfree>
 8004ff4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ff6:	9805      	ldr	r0, [sp, #20]
 8004ff8:	f002 ff7a 	bl	8007ef0 <_Bfree>
 8004ffc:	9805      	ldr	r0, [sp, #20]
 8004ffe:	4621      	mov	r1, r4
 8005000:	f002 ff76 	bl	8007ef0 <_Bfree>
 8005004:	e5f9      	b.n	8004bfa <_strtod_l+0x72>
 8005006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005008:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800500c:	4293      	cmp	r3, r2
 800500e:	dbbc      	blt.n	8004f8a <_strtod_l+0x402>
 8005010:	4c41      	ldr	r4, [pc, #260]	@ (8005118 <_strtod_l+0x590>)
 8005012:	f1c5 050f 	rsb	r5, r5, #15
 8005016:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800501a:	4652      	mov	r2, sl
 800501c:	465b      	mov	r3, fp
 800501e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005022:	f7fb fae9 	bl	80005f8 <__aeabi_dmul>
 8005026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005028:	1b5d      	subs	r5, r3, r5
 800502a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800502e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005032:	e78f      	b.n	8004f54 <_strtod_l+0x3cc>
 8005034:	3316      	adds	r3, #22
 8005036:	dba8      	blt.n	8004f8a <_strtod_l+0x402>
 8005038:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <_strtod_l+0x590>)
 800503a:	eba9 0808 	sub.w	r8, r9, r8
 800503e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005042:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005046:	4650      	mov	r0, sl
 8005048:	4659      	mov	r1, fp
 800504a:	f7fb fbff 	bl	800084c <__aeabi_ddiv>
 800504e:	e783      	b.n	8004f58 <_strtod_l+0x3d0>
 8005050:	4b32      	ldr	r3, [pc, #200]	@ (800511c <_strtod_l+0x594>)
 8005052:	9308      	str	r3, [sp, #32]
 8005054:	2300      	movs	r3, #0
 8005056:	1124      	asrs	r4, r4, #4
 8005058:	4650      	mov	r0, sl
 800505a:	4659      	mov	r1, fp
 800505c:	461e      	mov	r6, r3
 800505e:	2c01      	cmp	r4, #1
 8005060:	dc21      	bgt.n	80050a6 <_strtod_l+0x51e>
 8005062:	b10b      	cbz	r3, 8005068 <_strtod_l+0x4e0>
 8005064:	4682      	mov	sl, r0
 8005066:	468b      	mov	fp, r1
 8005068:	492c      	ldr	r1, [pc, #176]	@ (800511c <_strtod_l+0x594>)
 800506a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800506e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005072:	4652      	mov	r2, sl
 8005074:	465b      	mov	r3, fp
 8005076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800507a:	f7fb fabd 	bl	80005f8 <__aeabi_dmul>
 800507e:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <_strtod_l+0x598>)
 8005080:	460a      	mov	r2, r1
 8005082:	400b      	ands	r3, r1
 8005084:	4927      	ldr	r1, [pc, #156]	@ (8005124 <_strtod_l+0x59c>)
 8005086:	428b      	cmp	r3, r1
 8005088:	4682      	mov	sl, r0
 800508a:	d898      	bhi.n	8004fbe <_strtod_l+0x436>
 800508c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005090:	428b      	cmp	r3, r1
 8005092:	bf86      	itte	hi
 8005094:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005128 <_strtod_l+0x5a0>
 8005098:	f04f 3aff 	movhi.w	sl, #4294967295
 800509c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80050a0:	2300      	movs	r3, #0
 80050a2:	9308      	str	r3, [sp, #32]
 80050a4:	e07a      	b.n	800519c <_strtod_l+0x614>
 80050a6:	07e2      	lsls	r2, r4, #31
 80050a8:	d505      	bpl.n	80050b6 <_strtod_l+0x52e>
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb faa2 	bl	80005f8 <__aeabi_dmul>
 80050b4:	2301      	movs	r3, #1
 80050b6:	9a08      	ldr	r2, [sp, #32]
 80050b8:	3208      	adds	r2, #8
 80050ba:	3601      	adds	r6, #1
 80050bc:	1064      	asrs	r4, r4, #1
 80050be:	9208      	str	r2, [sp, #32]
 80050c0:	e7cd      	b.n	800505e <_strtod_l+0x4d6>
 80050c2:	d0ed      	beq.n	80050a0 <_strtod_l+0x518>
 80050c4:	4264      	negs	r4, r4
 80050c6:	f014 020f 	ands.w	r2, r4, #15
 80050ca:	d00a      	beq.n	80050e2 <_strtod_l+0x55a>
 80050cc:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <_strtod_l+0x590>)
 80050ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050d2:	4650      	mov	r0, sl
 80050d4:	4659      	mov	r1, fp
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb fbb7 	bl	800084c <__aeabi_ddiv>
 80050de:	4682      	mov	sl, r0
 80050e0:	468b      	mov	fp, r1
 80050e2:	1124      	asrs	r4, r4, #4
 80050e4:	d0dc      	beq.n	80050a0 <_strtod_l+0x518>
 80050e6:	2c1f      	cmp	r4, #31
 80050e8:	dd20      	ble.n	800512c <_strtod_l+0x5a4>
 80050ea:	2400      	movs	r4, #0
 80050ec:	46a0      	mov	r8, r4
 80050ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80050f0:	46a1      	mov	r9, r4
 80050f2:	9a05      	ldr	r2, [sp, #20]
 80050f4:	2322      	movs	r3, #34	@ 0x22
 80050f6:	f04f 0a00 	mov.w	sl, #0
 80050fa:	f04f 0b00 	mov.w	fp, #0
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e768      	b.n	8004fd4 <_strtod_l+0x44c>
 8005102:	bf00      	nop
 8005104:	080092b5 	.word	0x080092b5
 8005108:	08009254 	.word	0x08009254
 800510c:	080092ad 	.word	0x080092ad
 8005110:	08009328 	.word	0x08009328
 8005114:	08009324 	.word	0x08009324
 8005118:	080094a0 	.word	0x080094a0
 800511c:	08009478 	.word	0x08009478
 8005120:	7ff00000 	.word	0x7ff00000
 8005124:	7ca00000 	.word	0x7ca00000
 8005128:	7fefffff 	.word	0x7fefffff
 800512c:	f014 0310 	ands.w	r3, r4, #16
 8005130:	bf18      	it	ne
 8005132:	236a      	movne	r3, #106	@ 0x6a
 8005134:	4ea9      	ldr	r6, [pc, #676]	@ (80053dc <_strtod_l+0x854>)
 8005136:	9308      	str	r3, [sp, #32]
 8005138:	4650      	mov	r0, sl
 800513a:	4659      	mov	r1, fp
 800513c:	2300      	movs	r3, #0
 800513e:	07e2      	lsls	r2, r4, #31
 8005140:	d504      	bpl.n	800514c <_strtod_l+0x5c4>
 8005142:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005146:	f7fb fa57 	bl	80005f8 <__aeabi_dmul>
 800514a:	2301      	movs	r3, #1
 800514c:	1064      	asrs	r4, r4, #1
 800514e:	f106 0608 	add.w	r6, r6, #8
 8005152:	d1f4      	bne.n	800513e <_strtod_l+0x5b6>
 8005154:	b10b      	cbz	r3, 800515a <_strtod_l+0x5d2>
 8005156:	4682      	mov	sl, r0
 8005158:	468b      	mov	fp, r1
 800515a:	9b08      	ldr	r3, [sp, #32]
 800515c:	b1b3      	cbz	r3, 800518c <_strtod_l+0x604>
 800515e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005162:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005166:	2b00      	cmp	r3, #0
 8005168:	4659      	mov	r1, fp
 800516a:	dd0f      	ble.n	800518c <_strtod_l+0x604>
 800516c:	2b1f      	cmp	r3, #31
 800516e:	dd55      	ble.n	800521c <_strtod_l+0x694>
 8005170:	2b34      	cmp	r3, #52	@ 0x34
 8005172:	bfde      	ittt	le
 8005174:	f04f 33ff 	movle.w	r3, #4294967295
 8005178:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800517c:	4093      	lslle	r3, r2
 800517e:	f04f 0a00 	mov.w	sl, #0
 8005182:	bfcc      	ite	gt
 8005184:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005188:	ea03 0b01 	andle.w	fp, r3, r1
 800518c:	2200      	movs	r2, #0
 800518e:	2300      	movs	r3, #0
 8005190:	4650      	mov	r0, sl
 8005192:	4659      	mov	r1, fp
 8005194:	f7fb fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8005198:	2800      	cmp	r0, #0
 800519a:	d1a6      	bne.n	80050ea <_strtod_l+0x562>
 800519c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80051a2:	9805      	ldr	r0, [sp, #20]
 80051a4:	462b      	mov	r3, r5
 80051a6:	463a      	mov	r2, r7
 80051a8:	f002 ff0a 	bl	8007fc0 <__s2b>
 80051ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80051ae:	2800      	cmp	r0, #0
 80051b0:	f43f af05 	beq.w	8004fbe <_strtod_l+0x436>
 80051b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	eba9 0308 	sub.w	r3, r9, r8
 80051bc:	bfa8      	it	ge
 80051be:	2300      	movge	r3, #0
 80051c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80051c2:	2400      	movs	r4, #0
 80051c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80051c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80051ca:	46a0      	mov	r8, r4
 80051cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ce:	9805      	ldr	r0, [sp, #20]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	f002 fe4d 	bl	8007e70 <_Balloc>
 80051d6:	4681      	mov	r9, r0
 80051d8:	2800      	cmp	r0, #0
 80051da:	f43f aef4 	beq.w	8004fc6 <_strtod_l+0x43e>
 80051de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	3202      	adds	r2, #2
 80051e4:	f103 010c 	add.w	r1, r3, #12
 80051e8:	0092      	lsls	r2, r2, #2
 80051ea:	300c      	adds	r0, #12
 80051ec:	f001 fb6d 	bl	80068ca <memcpy>
 80051f0:	ec4b ab10 	vmov	d0, sl, fp
 80051f4:	9805      	ldr	r0, [sp, #20]
 80051f6:	aa1c      	add	r2, sp, #112	@ 0x70
 80051f8:	a91b      	add	r1, sp, #108	@ 0x6c
 80051fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80051fe:	f003 fa1b 	bl	8008638 <__d2b>
 8005202:	901a      	str	r0, [sp, #104]	@ 0x68
 8005204:	2800      	cmp	r0, #0
 8005206:	f43f aede 	beq.w	8004fc6 <_strtod_l+0x43e>
 800520a:	9805      	ldr	r0, [sp, #20]
 800520c:	2101      	movs	r1, #1
 800520e:	f002 ff6d 	bl	80080ec <__i2b>
 8005212:	4680      	mov	r8, r0
 8005214:	b948      	cbnz	r0, 800522a <_strtod_l+0x6a2>
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	e6d4      	b.n	8004fc6 <_strtod_l+0x43e>
 800521c:	f04f 32ff 	mov.w	r2, #4294967295
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	ea03 0a0a 	and.w	sl, r3, sl
 8005228:	e7b0      	b.n	800518c <_strtod_l+0x604>
 800522a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800522c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800522e:	2d00      	cmp	r5, #0
 8005230:	bfab      	itete	ge
 8005232:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005234:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005236:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005238:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800523a:	bfac      	ite	ge
 800523c:	18ef      	addge	r7, r5, r3
 800523e:	1b5e      	sublt	r6, r3, r5
 8005240:	9b08      	ldr	r3, [sp, #32]
 8005242:	1aed      	subs	r5, r5, r3
 8005244:	4415      	add	r5, r2
 8005246:	4b66      	ldr	r3, [pc, #408]	@ (80053e0 <_strtod_l+0x858>)
 8005248:	3d01      	subs	r5, #1
 800524a:	429d      	cmp	r5, r3
 800524c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005250:	da50      	bge.n	80052f4 <_strtod_l+0x76c>
 8005252:	1b5b      	subs	r3, r3, r5
 8005254:	2b1f      	cmp	r3, #31
 8005256:	eba2 0203 	sub.w	r2, r2, r3
 800525a:	f04f 0101 	mov.w	r1, #1
 800525e:	dc3d      	bgt.n	80052dc <_strtod_l+0x754>
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005266:	2300      	movs	r3, #0
 8005268:	9310      	str	r3, [sp, #64]	@ 0x40
 800526a:	18bd      	adds	r5, r7, r2
 800526c:	9b08      	ldr	r3, [sp, #32]
 800526e:	42af      	cmp	r7, r5
 8005270:	4416      	add	r6, r2
 8005272:	441e      	add	r6, r3
 8005274:	463b      	mov	r3, r7
 8005276:	bfa8      	it	ge
 8005278:	462b      	movge	r3, r5
 800527a:	42b3      	cmp	r3, r6
 800527c:	bfa8      	it	ge
 800527e:	4633      	movge	r3, r6
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfc2      	ittt	gt
 8005284:	1aed      	subgt	r5, r5, r3
 8005286:	1af6      	subgt	r6, r6, r3
 8005288:	1aff      	subgt	r7, r7, r3
 800528a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800528c:	2b00      	cmp	r3, #0
 800528e:	dd16      	ble.n	80052be <_strtod_l+0x736>
 8005290:	4641      	mov	r1, r8
 8005292:	9805      	ldr	r0, [sp, #20]
 8005294:	461a      	mov	r2, r3
 8005296:	f002 ffe9 	bl	800826c <__pow5mult>
 800529a:	4680      	mov	r8, r0
 800529c:	2800      	cmp	r0, #0
 800529e:	d0ba      	beq.n	8005216 <_strtod_l+0x68e>
 80052a0:	4601      	mov	r1, r0
 80052a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80052a4:	9805      	ldr	r0, [sp, #20]
 80052a6:	f002 ff37 	bl	8008118 <__multiply>
 80052aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f43f ae8a 	beq.w	8004fc6 <_strtod_l+0x43e>
 80052b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80052b4:	9805      	ldr	r0, [sp, #20]
 80052b6:	f002 fe1b 	bl	8007ef0 <_Bfree>
 80052ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80052be:	2d00      	cmp	r5, #0
 80052c0:	dc1d      	bgt.n	80052fe <_strtod_l+0x776>
 80052c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd23      	ble.n	8005310 <_strtod_l+0x788>
 80052c8:	4649      	mov	r1, r9
 80052ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80052cc:	9805      	ldr	r0, [sp, #20]
 80052ce:	f002 ffcd 	bl	800826c <__pow5mult>
 80052d2:	4681      	mov	r9, r0
 80052d4:	b9e0      	cbnz	r0, 8005310 <_strtod_l+0x788>
 80052d6:	f04f 0900 	mov.w	r9, #0
 80052da:	e674      	b.n	8004fc6 <_strtod_l+0x43e>
 80052dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80052e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80052e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80052e8:	35e2      	adds	r5, #226	@ 0xe2
 80052ea:	fa01 f305 	lsl.w	r3, r1, r5
 80052ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80052f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80052f2:	e7ba      	b.n	800526a <_strtod_l+0x6e2>
 80052f4:	2300      	movs	r3, #0
 80052f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80052f8:	2301      	movs	r3, #1
 80052fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052fc:	e7b5      	b.n	800526a <_strtod_l+0x6e2>
 80052fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005300:	9805      	ldr	r0, [sp, #20]
 8005302:	462a      	mov	r2, r5
 8005304:	f003 f80c 	bl	8008320 <__lshift>
 8005308:	901a      	str	r0, [sp, #104]	@ 0x68
 800530a:	2800      	cmp	r0, #0
 800530c:	d1d9      	bne.n	80052c2 <_strtod_l+0x73a>
 800530e:	e65a      	b.n	8004fc6 <_strtod_l+0x43e>
 8005310:	2e00      	cmp	r6, #0
 8005312:	dd07      	ble.n	8005324 <_strtod_l+0x79c>
 8005314:	4649      	mov	r1, r9
 8005316:	9805      	ldr	r0, [sp, #20]
 8005318:	4632      	mov	r2, r6
 800531a:	f003 f801 	bl	8008320 <__lshift>
 800531e:	4681      	mov	r9, r0
 8005320:	2800      	cmp	r0, #0
 8005322:	d0d8      	beq.n	80052d6 <_strtod_l+0x74e>
 8005324:	2f00      	cmp	r7, #0
 8005326:	dd08      	ble.n	800533a <_strtod_l+0x7b2>
 8005328:	4641      	mov	r1, r8
 800532a:	9805      	ldr	r0, [sp, #20]
 800532c:	463a      	mov	r2, r7
 800532e:	f002 fff7 	bl	8008320 <__lshift>
 8005332:	4680      	mov	r8, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	f43f ae46 	beq.w	8004fc6 <_strtod_l+0x43e>
 800533a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800533c:	9805      	ldr	r0, [sp, #20]
 800533e:	464a      	mov	r2, r9
 8005340:	f003 f876 	bl	8008430 <__mdiff>
 8005344:	4604      	mov	r4, r0
 8005346:	2800      	cmp	r0, #0
 8005348:	f43f ae3d 	beq.w	8004fc6 <_strtod_l+0x43e>
 800534c:	68c3      	ldr	r3, [r0, #12]
 800534e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005350:	2300      	movs	r3, #0
 8005352:	60c3      	str	r3, [r0, #12]
 8005354:	4641      	mov	r1, r8
 8005356:	f003 f84f 	bl	80083f8 <__mcmp>
 800535a:	2800      	cmp	r0, #0
 800535c:	da46      	bge.n	80053ec <_strtod_l+0x864>
 800535e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005360:	ea53 030a 	orrs.w	r3, r3, sl
 8005364:	d16c      	bne.n	8005440 <_strtod_l+0x8b8>
 8005366:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800536a:	2b00      	cmp	r3, #0
 800536c:	d168      	bne.n	8005440 <_strtod_l+0x8b8>
 800536e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005372:	0d1b      	lsrs	r3, r3, #20
 8005374:	051b      	lsls	r3, r3, #20
 8005376:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800537a:	d961      	bls.n	8005440 <_strtod_l+0x8b8>
 800537c:	6963      	ldr	r3, [r4, #20]
 800537e:	b913      	cbnz	r3, 8005386 <_strtod_l+0x7fe>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	2b01      	cmp	r3, #1
 8005384:	dd5c      	ble.n	8005440 <_strtod_l+0x8b8>
 8005386:	4621      	mov	r1, r4
 8005388:	2201      	movs	r2, #1
 800538a:	9805      	ldr	r0, [sp, #20]
 800538c:	f002 ffc8 	bl	8008320 <__lshift>
 8005390:	4641      	mov	r1, r8
 8005392:	4604      	mov	r4, r0
 8005394:	f003 f830 	bl	80083f8 <__mcmp>
 8005398:	2800      	cmp	r0, #0
 800539a:	dd51      	ble.n	8005440 <_strtod_l+0x8b8>
 800539c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80053a0:	9a08      	ldr	r2, [sp, #32]
 80053a2:	0d1b      	lsrs	r3, r3, #20
 80053a4:	051b      	lsls	r3, r3, #20
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	d06b      	beq.n	8005482 <_strtod_l+0x8fa>
 80053aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80053ae:	d868      	bhi.n	8005482 <_strtod_l+0x8fa>
 80053b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80053b4:	f67f ae9d 	bls.w	80050f2 <_strtod_l+0x56a>
 80053b8:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <_strtod_l+0x85c>)
 80053ba:	4650      	mov	r0, sl
 80053bc:	4659      	mov	r1, fp
 80053be:	2200      	movs	r2, #0
 80053c0:	f7fb f91a 	bl	80005f8 <__aeabi_dmul>
 80053c4:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <_strtod_l+0x860>)
 80053c6:	400b      	ands	r3, r1
 80053c8:	4682      	mov	sl, r0
 80053ca:	468b      	mov	fp, r1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f47f ae05 	bne.w	8004fdc <_strtod_l+0x454>
 80053d2:	9a05      	ldr	r2, [sp, #20]
 80053d4:	2322      	movs	r3, #34	@ 0x22
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e600      	b.n	8004fdc <_strtod_l+0x454>
 80053da:	bf00      	nop
 80053dc:	08009280 	.word	0x08009280
 80053e0:	fffffc02 	.word	0xfffffc02
 80053e4:	39500000 	.word	0x39500000
 80053e8:	7ff00000 	.word	0x7ff00000
 80053ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80053f0:	d165      	bne.n	80054be <_strtod_l+0x936>
 80053f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80053f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053f8:	b35a      	cbz	r2, 8005452 <_strtod_l+0x8ca>
 80053fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005678 <_strtod_l+0xaf0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d12b      	bne.n	8005458 <_strtod_l+0x8d0>
 8005400:	9b08      	ldr	r3, [sp, #32]
 8005402:	4651      	mov	r1, sl
 8005404:	b303      	cbz	r3, 8005448 <_strtod_l+0x8c0>
 8005406:	4b9d      	ldr	r3, [pc, #628]	@ (800567c <_strtod_l+0xaf4>)
 8005408:	465a      	mov	r2, fp
 800540a:	4013      	ands	r3, r2
 800540c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	d81b      	bhi.n	800544e <_strtod_l+0x8c6>
 8005416:	0d1b      	lsrs	r3, r3, #20
 8005418:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	4299      	cmp	r1, r3
 8005422:	d119      	bne.n	8005458 <_strtod_l+0x8d0>
 8005424:	4b96      	ldr	r3, [pc, #600]	@ (8005680 <_strtod_l+0xaf8>)
 8005426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005428:	429a      	cmp	r2, r3
 800542a:	d102      	bne.n	8005432 <_strtod_l+0x8aa>
 800542c:	3101      	adds	r1, #1
 800542e:	f43f adca 	beq.w	8004fc6 <_strtod_l+0x43e>
 8005432:	4b92      	ldr	r3, [pc, #584]	@ (800567c <_strtod_l+0xaf4>)
 8005434:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005436:	401a      	ands	r2, r3
 8005438:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800543c:	f04f 0a00 	mov.w	sl, #0
 8005440:	9b08      	ldr	r3, [sp, #32]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1b8      	bne.n	80053b8 <_strtod_l+0x830>
 8005446:	e5c9      	b.n	8004fdc <_strtod_l+0x454>
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
 800544c:	e7e8      	b.n	8005420 <_strtod_l+0x898>
 800544e:	4613      	mov	r3, r2
 8005450:	e7e6      	b.n	8005420 <_strtod_l+0x898>
 8005452:	ea53 030a 	orrs.w	r3, r3, sl
 8005456:	d0a1      	beq.n	800539c <_strtod_l+0x814>
 8005458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800545a:	b1db      	cbz	r3, 8005494 <_strtod_l+0x90c>
 800545c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800545e:	4213      	tst	r3, r2
 8005460:	d0ee      	beq.n	8005440 <_strtod_l+0x8b8>
 8005462:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005464:	9a08      	ldr	r2, [sp, #32]
 8005466:	4650      	mov	r0, sl
 8005468:	4659      	mov	r1, fp
 800546a:	b1bb      	cbz	r3, 800549c <_strtod_l+0x914>
 800546c:	f7ff fb6e 	bl	8004b4c <sulp>
 8005470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005474:	ec53 2b10 	vmov	r2, r3, d0
 8005478:	f7fa ff08 	bl	800028c <__adddf3>
 800547c:	4682      	mov	sl, r0
 800547e:	468b      	mov	fp, r1
 8005480:	e7de      	b.n	8005440 <_strtod_l+0x8b8>
 8005482:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005486:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800548a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800548e:	f04f 3aff 	mov.w	sl, #4294967295
 8005492:	e7d5      	b.n	8005440 <_strtod_l+0x8b8>
 8005494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005496:	ea13 0f0a 	tst.w	r3, sl
 800549a:	e7e1      	b.n	8005460 <_strtod_l+0x8d8>
 800549c:	f7ff fb56 	bl	8004b4c <sulp>
 80054a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054a4:	ec53 2b10 	vmov	r2, r3, d0
 80054a8:	f7fa feee 	bl	8000288 <__aeabi_dsub>
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	4682      	mov	sl, r0
 80054b2:	468b      	mov	fp, r1
 80054b4:	f7fb fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0c1      	beq.n	8005440 <_strtod_l+0x8b8>
 80054bc:	e619      	b.n	80050f2 <_strtod_l+0x56a>
 80054be:	4641      	mov	r1, r8
 80054c0:	4620      	mov	r0, r4
 80054c2:	f003 f911 	bl	80086e8 <__ratio>
 80054c6:	ec57 6b10 	vmov	r6, r7, d0
 80054ca:	2200      	movs	r2, #0
 80054cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80054d0:	4630      	mov	r0, r6
 80054d2:	4639      	mov	r1, r7
 80054d4:	f7fb fb0c 	bl	8000af0 <__aeabi_dcmple>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d06f      	beq.n	80055bc <_strtod_l+0xa34>
 80054dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d17a      	bne.n	80055d8 <_strtod_l+0xa50>
 80054e2:	f1ba 0f00 	cmp.w	sl, #0
 80054e6:	d158      	bne.n	800559a <_strtod_l+0xa12>
 80054e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d15a      	bne.n	80055a8 <_strtod_l+0xa20>
 80054f2:	4b64      	ldr	r3, [pc, #400]	@ (8005684 <_strtod_l+0xafc>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	4630      	mov	r0, r6
 80054f8:	4639      	mov	r1, r7
 80054fa:	f7fb faef 	bl	8000adc <__aeabi_dcmplt>
 80054fe:	2800      	cmp	r0, #0
 8005500:	d159      	bne.n	80055b6 <_strtod_l+0xa2e>
 8005502:	4630      	mov	r0, r6
 8005504:	4639      	mov	r1, r7
 8005506:	4b60      	ldr	r3, [pc, #384]	@ (8005688 <_strtod_l+0xb00>)
 8005508:	2200      	movs	r2, #0
 800550a:	f7fb f875 	bl	80005f8 <__aeabi_dmul>
 800550e:	4606      	mov	r6, r0
 8005510:	460f      	mov	r7, r1
 8005512:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005516:	9606      	str	r6, [sp, #24]
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800551e:	4d57      	ldr	r5, [pc, #348]	@ (800567c <_strtod_l+0xaf4>)
 8005520:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005526:	401d      	ands	r5, r3
 8005528:	4b58      	ldr	r3, [pc, #352]	@ (800568c <_strtod_l+0xb04>)
 800552a:	429d      	cmp	r5, r3
 800552c:	f040 80b2 	bne.w	8005694 <_strtod_l+0xb0c>
 8005530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005532:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005536:	ec4b ab10 	vmov	d0, sl, fp
 800553a:	f003 f80d 	bl	8008558 <__ulp>
 800553e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005542:	ec51 0b10 	vmov	r0, r1, d0
 8005546:	f7fb f857 	bl	80005f8 <__aeabi_dmul>
 800554a:	4652      	mov	r2, sl
 800554c:	465b      	mov	r3, fp
 800554e:	f7fa fe9d 	bl	800028c <__adddf3>
 8005552:	460b      	mov	r3, r1
 8005554:	4949      	ldr	r1, [pc, #292]	@ (800567c <_strtod_l+0xaf4>)
 8005556:	4a4e      	ldr	r2, [pc, #312]	@ (8005690 <_strtod_l+0xb08>)
 8005558:	4019      	ands	r1, r3
 800555a:	4291      	cmp	r1, r2
 800555c:	4682      	mov	sl, r0
 800555e:	d942      	bls.n	80055e6 <_strtod_l+0xa5e>
 8005560:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005562:	4b47      	ldr	r3, [pc, #284]	@ (8005680 <_strtod_l+0xaf8>)
 8005564:	429a      	cmp	r2, r3
 8005566:	d103      	bne.n	8005570 <_strtod_l+0x9e8>
 8005568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800556a:	3301      	adds	r3, #1
 800556c:	f43f ad2b 	beq.w	8004fc6 <_strtod_l+0x43e>
 8005570:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005680 <_strtod_l+0xaf8>
 8005574:	f04f 3aff 	mov.w	sl, #4294967295
 8005578:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800557a:	9805      	ldr	r0, [sp, #20]
 800557c:	f002 fcb8 	bl	8007ef0 <_Bfree>
 8005580:	9805      	ldr	r0, [sp, #20]
 8005582:	4649      	mov	r1, r9
 8005584:	f002 fcb4 	bl	8007ef0 <_Bfree>
 8005588:	9805      	ldr	r0, [sp, #20]
 800558a:	4641      	mov	r1, r8
 800558c:	f002 fcb0 	bl	8007ef0 <_Bfree>
 8005590:	9805      	ldr	r0, [sp, #20]
 8005592:	4621      	mov	r1, r4
 8005594:	f002 fcac 	bl	8007ef0 <_Bfree>
 8005598:	e618      	b.n	80051cc <_strtod_l+0x644>
 800559a:	f1ba 0f01 	cmp.w	sl, #1
 800559e:	d103      	bne.n	80055a8 <_strtod_l+0xa20>
 80055a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f43f ada5 	beq.w	80050f2 <_strtod_l+0x56a>
 80055a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005658 <_strtod_l+0xad0>
 80055ac:	4f35      	ldr	r7, [pc, #212]	@ (8005684 <_strtod_l+0xafc>)
 80055ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80055b2:	2600      	movs	r6, #0
 80055b4:	e7b1      	b.n	800551a <_strtod_l+0x992>
 80055b6:	4f34      	ldr	r7, [pc, #208]	@ (8005688 <_strtod_l+0xb00>)
 80055b8:	2600      	movs	r6, #0
 80055ba:	e7aa      	b.n	8005512 <_strtod_l+0x98a>
 80055bc:	4b32      	ldr	r3, [pc, #200]	@ (8005688 <_strtod_l+0xb00>)
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	2200      	movs	r2, #0
 80055c4:	f7fb f818 	bl	80005f8 <__aeabi_dmul>
 80055c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055ca:	4606      	mov	r6, r0
 80055cc:	460f      	mov	r7, r1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d09f      	beq.n	8005512 <_strtod_l+0x98a>
 80055d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80055d6:	e7a0      	b.n	800551a <_strtod_l+0x992>
 80055d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005660 <_strtod_l+0xad8>
 80055dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80055e0:	ec57 6b17 	vmov	r6, r7, d7
 80055e4:	e799      	b.n	800551a <_strtod_l+0x992>
 80055e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80055ea:	9b08      	ldr	r3, [sp, #32]
 80055ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1c1      	bne.n	8005578 <_strtod_l+0x9f0>
 80055f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80055f8:	0d1b      	lsrs	r3, r3, #20
 80055fa:	051b      	lsls	r3, r3, #20
 80055fc:	429d      	cmp	r5, r3
 80055fe:	d1bb      	bne.n	8005578 <_strtod_l+0x9f0>
 8005600:	4630      	mov	r0, r6
 8005602:	4639      	mov	r1, r7
 8005604:	f7fb fb58 	bl	8000cb8 <__aeabi_d2lz>
 8005608:	f7fa ffc8 	bl	800059c <__aeabi_l2d>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4630      	mov	r0, r6
 8005612:	4639      	mov	r1, r7
 8005614:	f7fa fe38 	bl	8000288 <__aeabi_dsub>
 8005618:	460b      	mov	r3, r1
 800561a:	4602      	mov	r2, r0
 800561c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005620:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005626:	ea46 060a 	orr.w	r6, r6, sl
 800562a:	431e      	orrs	r6, r3
 800562c:	d06f      	beq.n	800570e <_strtod_l+0xb86>
 800562e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005668 <_strtod_l+0xae0>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fb fa52 	bl	8000adc <__aeabi_dcmplt>
 8005638:	2800      	cmp	r0, #0
 800563a:	f47f accf 	bne.w	8004fdc <_strtod_l+0x454>
 800563e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005670 <_strtod_l+0xae8>)
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005648:	f7fb fa66 	bl	8000b18 <__aeabi_dcmpgt>
 800564c:	2800      	cmp	r0, #0
 800564e:	d093      	beq.n	8005578 <_strtod_l+0x9f0>
 8005650:	e4c4      	b.n	8004fdc <_strtod_l+0x454>
 8005652:	bf00      	nop
 8005654:	f3af 8000 	nop.w
 8005658:	00000000 	.word	0x00000000
 800565c:	bff00000 	.word	0xbff00000
 8005660:	00000000 	.word	0x00000000
 8005664:	3ff00000 	.word	0x3ff00000
 8005668:	94a03595 	.word	0x94a03595
 800566c:	3fdfffff 	.word	0x3fdfffff
 8005670:	35afe535 	.word	0x35afe535
 8005674:	3fe00000 	.word	0x3fe00000
 8005678:	000fffff 	.word	0x000fffff
 800567c:	7ff00000 	.word	0x7ff00000
 8005680:	7fefffff 	.word	0x7fefffff
 8005684:	3ff00000 	.word	0x3ff00000
 8005688:	3fe00000 	.word	0x3fe00000
 800568c:	7fe00000 	.word	0x7fe00000
 8005690:	7c9fffff 	.word	0x7c9fffff
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	b323      	cbz	r3, 80056e2 <_strtod_l+0xb5a>
 8005698:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800569c:	d821      	bhi.n	80056e2 <_strtod_l+0xb5a>
 800569e:	a328      	add	r3, pc, #160	@ (adr r3, 8005740 <_strtod_l+0xbb8>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb fa22 	bl	8000af0 <__aeabi_dcmple>
 80056ac:	b1a0      	cbz	r0, 80056d8 <_strtod_l+0xb50>
 80056ae:	4639      	mov	r1, r7
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7fb fa79 	bl	8000ba8 <__aeabi_d2uiz>
 80056b6:	2801      	cmp	r0, #1
 80056b8:	bf38      	it	cc
 80056ba:	2001      	movcc	r0, #1
 80056bc:	f7fa ff22 	bl	8000504 <__aeabi_ui2d>
 80056c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056c2:	4606      	mov	r6, r0
 80056c4:	460f      	mov	r7, r1
 80056c6:	b9fb      	cbnz	r3, 8005708 <_strtod_l+0xb80>
 80056c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80056ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80056d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80056d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80056d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80056da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80056de:	1b5b      	subs	r3, r3, r5
 80056e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80056e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80056e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80056ea:	f002 ff35 	bl	8008558 <__ulp>
 80056ee:	4650      	mov	r0, sl
 80056f0:	ec53 2b10 	vmov	r2, r3, d0
 80056f4:	4659      	mov	r1, fp
 80056f6:	f7fa ff7f 	bl	80005f8 <__aeabi_dmul>
 80056fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80056fe:	f7fa fdc5 	bl	800028c <__adddf3>
 8005702:	4682      	mov	sl, r0
 8005704:	468b      	mov	fp, r1
 8005706:	e770      	b.n	80055ea <_strtod_l+0xa62>
 8005708:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800570c:	e7e0      	b.n	80056d0 <_strtod_l+0xb48>
 800570e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005748 <_strtod_l+0xbc0>)
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fb f9e2 	bl	8000adc <__aeabi_dcmplt>
 8005718:	e798      	b.n	800564c <_strtod_l+0xac4>
 800571a:	2300      	movs	r3, #0
 800571c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800571e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	f7ff ba6d 	b.w	8004c02 <_strtod_l+0x7a>
 8005728:	2a65      	cmp	r2, #101	@ 0x65
 800572a:	f43f ab66 	beq.w	8004dfa <_strtod_l+0x272>
 800572e:	2a45      	cmp	r2, #69	@ 0x45
 8005730:	f43f ab63 	beq.w	8004dfa <_strtod_l+0x272>
 8005734:	2301      	movs	r3, #1
 8005736:	f7ff bb9e 	b.w	8004e76 <_strtod_l+0x2ee>
 800573a:	bf00      	nop
 800573c:	f3af 8000 	nop.w
 8005740:	ffc00000 	.word	0xffc00000
 8005744:	41dfffff 	.word	0x41dfffff
 8005748:	94a03595 	.word	0x94a03595
 800574c:	3fcfffff 	.word	0x3fcfffff

08005750 <_strtod_r>:
 8005750:	4b01      	ldr	r3, [pc, #4]	@ (8005758 <_strtod_r+0x8>)
 8005752:	f7ff ba19 	b.w	8004b88 <_strtod_l>
 8005756:	bf00      	nop
 8005758:	20000028 	.word	0x20000028

0800575c <__cvt>:
 800575c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	ec57 6b10 	vmov	r6, r7, d0
 8005764:	2f00      	cmp	r7, #0
 8005766:	460c      	mov	r4, r1
 8005768:	4619      	mov	r1, r3
 800576a:	463b      	mov	r3, r7
 800576c:	bfbb      	ittet	lt
 800576e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005772:	461f      	movlt	r7, r3
 8005774:	2300      	movge	r3, #0
 8005776:	232d      	movlt	r3, #45	@ 0x2d
 8005778:	700b      	strb	r3, [r1, #0]
 800577a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800577c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005780:	4691      	mov	r9, r2
 8005782:	f023 0820 	bic.w	r8, r3, #32
 8005786:	bfbc      	itt	lt
 8005788:	4632      	movlt	r2, r6
 800578a:	4616      	movlt	r6, r2
 800578c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005790:	d005      	beq.n	800579e <__cvt+0x42>
 8005792:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005796:	d100      	bne.n	800579a <__cvt+0x3e>
 8005798:	3401      	adds	r4, #1
 800579a:	2102      	movs	r1, #2
 800579c:	e000      	b.n	80057a0 <__cvt+0x44>
 800579e:	2103      	movs	r1, #3
 80057a0:	ab03      	add	r3, sp, #12
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	ab02      	add	r3, sp, #8
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	ec47 6b10 	vmov	d0, r6, r7
 80057ac:	4653      	mov	r3, sl
 80057ae:	4622      	mov	r2, r4
 80057b0:	f001 f94e 	bl	8006a50 <_dtoa_r>
 80057b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057b8:	4605      	mov	r5, r0
 80057ba:	d119      	bne.n	80057f0 <__cvt+0x94>
 80057bc:	f019 0f01 	tst.w	r9, #1
 80057c0:	d00e      	beq.n	80057e0 <__cvt+0x84>
 80057c2:	eb00 0904 	add.w	r9, r0, r4
 80057c6:	2200      	movs	r2, #0
 80057c8:	2300      	movs	r3, #0
 80057ca:	4630      	mov	r0, r6
 80057cc:	4639      	mov	r1, r7
 80057ce:	f7fb f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80057d2:	b108      	cbz	r0, 80057d8 <__cvt+0x7c>
 80057d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80057d8:	2230      	movs	r2, #48	@ 0x30
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	454b      	cmp	r3, r9
 80057de:	d31e      	bcc.n	800581e <__cvt+0xc2>
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057e4:	1b5b      	subs	r3, r3, r5
 80057e6:	4628      	mov	r0, r5
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	b004      	add	sp, #16
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057f4:	eb00 0904 	add.w	r9, r0, r4
 80057f8:	d1e5      	bne.n	80057c6 <__cvt+0x6a>
 80057fa:	7803      	ldrb	r3, [r0, #0]
 80057fc:	2b30      	cmp	r3, #48	@ 0x30
 80057fe:	d10a      	bne.n	8005816 <__cvt+0xba>
 8005800:	2200      	movs	r2, #0
 8005802:	2300      	movs	r3, #0
 8005804:	4630      	mov	r0, r6
 8005806:	4639      	mov	r1, r7
 8005808:	f7fb f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800580c:	b918      	cbnz	r0, 8005816 <__cvt+0xba>
 800580e:	f1c4 0401 	rsb	r4, r4, #1
 8005812:	f8ca 4000 	str.w	r4, [sl]
 8005816:	f8da 3000 	ldr.w	r3, [sl]
 800581a:	4499      	add	r9, r3
 800581c:	e7d3      	b.n	80057c6 <__cvt+0x6a>
 800581e:	1c59      	adds	r1, r3, #1
 8005820:	9103      	str	r1, [sp, #12]
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e7d9      	b.n	80057da <__cvt+0x7e>

08005826 <__exponent>:
 8005826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005828:	2900      	cmp	r1, #0
 800582a:	bfba      	itte	lt
 800582c:	4249      	neglt	r1, r1
 800582e:	232d      	movlt	r3, #45	@ 0x2d
 8005830:	232b      	movge	r3, #43	@ 0x2b
 8005832:	2909      	cmp	r1, #9
 8005834:	7002      	strb	r2, [r0, #0]
 8005836:	7043      	strb	r3, [r0, #1]
 8005838:	dd29      	ble.n	800588e <__exponent+0x68>
 800583a:	f10d 0307 	add.w	r3, sp, #7
 800583e:	461d      	mov	r5, r3
 8005840:	270a      	movs	r7, #10
 8005842:	461a      	mov	r2, r3
 8005844:	fbb1 f6f7 	udiv	r6, r1, r7
 8005848:	fb07 1416 	mls	r4, r7, r6, r1
 800584c:	3430      	adds	r4, #48	@ 0x30
 800584e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005852:	460c      	mov	r4, r1
 8005854:	2c63      	cmp	r4, #99	@ 0x63
 8005856:	f103 33ff 	add.w	r3, r3, #4294967295
 800585a:	4631      	mov	r1, r6
 800585c:	dcf1      	bgt.n	8005842 <__exponent+0x1c>
 800585e:	3130      	adds	r1, #48	@ 0x30
 8005860:	1e94      	subs	r4, r2, #2
 8005862:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005866:	1c41      	adds	r1, r0, #1
 8005868:	4623      	mov	r3, r4
 800586a:	42ab      	cmp	r3, r5
 800586c:	d30a      	bcc.n	8005884 <__exponent+0x5e>
 800586e:	f10d 0309 	add.w	r3, sp, #9
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	42ac      	cmp	r4, r5
 8005876:	bf88      	it	hi
 8005878:	2300      	movhi	r3, #0
 800587a:	3302      	adds	r3, #2
 800587c:	4403      	add	r3, r0
 800587e:	1a18      	subs	r0, r3, r0
 8005880:	b003      	add	sp, #12
 8005882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005884:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005888:	f801 6f01 	strb.w	r6, [r1, #1]!
 800588c:	e7ed      	b.n	800586a <__exponent+0x44>
 800588e:	2330      	movs	r3, #48	@ 0x30
 8005890:	3130      	adds	r1, #48	@ 0x30
 8005892:	7083      	strb	r3, [r0, #2]
 8005894:	70c1      	strb	r1, [r0, #3]
 8005896:	1d03      	adds	r3, r0, #4
 8005898:	e7f1      	b.n	800587e <__exponent+0x58>
	...

0800589c <_printf_float>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	b08d      	sub	sp, #52	@ 0x34
 80058a2:	460c      	mov	r4, r1
 80058a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058a8:	4616      	mov	r6, r2
 80058aa:	461f      	mov	r7, r3
 80058ac:	4605      	mov	r5, r0
 80058ae:	f000 ff95 	bl	80067dc <_localeconv_r>
 80058b2:	6803      	ldr	r3, [r0, #0]
 80058b4:	9304      	str	r3, [sp, #16]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fa fcda 	bl	8000270 <strlen>
 80058bc:	2300      	movs	r3, #0
 80058be:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c0:	f8d8 3000 	ldr.w	r3, [r8]
 80058c4:	9005      	str	r0, [sp, #20]
 80058c6:	3307      	adds	r3, #7
 80058c8:	f023 0307 	bic.w	r3, r3, #7
 80058cc:	f103 0208 	add.w	r2, r3, #8
 80058d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058d4:	f8d4 b000 	ldr.w	fp, [r4]
 80058d8:	f8c8 2000 	str.w	r2, [r8]
 80058dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058e4:	9307      	str	r3, [sp, #28]
 80058e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b64 <_printf_float+0x2c8>)
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295
 80058f8:	f7fb f918 	bl	8000b2c <__aeabi_dcmpun>
 80058fc:	bb70      	cbnz	r0, 800595c <_printf_float+0xc0>
 80058fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005902:	4b98      	ldr	r3, [pc, #608]	@ (8005b64 <_printf_float+0x2c8>)
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	f7fb f8f2 	bl	8000af0 <__aeabi_dcmple>
 800590c:	bb30      	cbnz	r0, 800595c <_printf_float+0xc0>
 800590e:	2200      	movs	r2, #0
 8005910:	2300      	movs	r3, #0
 8005912:	4640      	mov	r0, r8
 8005914:	4649      	mov	r1, r9
 8005916:	f7fb f8e1 	bl	8000adc <__aeabi_dcmplt>
 800591a:	b110      	cbz	r0, 8005922 <_printf_float+0x86>
 800591c:	232d      	movs	r3, #45	@ 0x2d
 800591e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005922:	4a91      	ldr	r2, [pc, #580]	@ (8005b68 <_printf_float+0x2cc>)
 8005924:	4b91      	ldr	r3, [pc, #580]	@ (8005b6c <_printf_float+0x2d0>)
 8005926:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800592a:	bf94      	ite	ls
 800592c:	4690      	movls	r8, r2
 800592e:	4698      	movhi	r8, r3
 8005930:	2303      	movs	r3, #3
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	f02b 0304 	bic.w	r3, fp, #4
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	f04f 0900 	mov.w	r9, #0
 800593e:	9700      	str	r7, [sp, #0]
 8005940:	4633      	mov	r3, r6
 8005942:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005944:	4621      	mov	r1, r4
 8005946:	4628      	mov	r0, r5
 8005948:	f000 f9d2 	bl	8005cf0 <_printf_common>
 800594c:	3001      	adds	r0, #1
 800594e:	f040 808d 	bne.w	8005a6c <_printf_float+0x1d0>
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	b00d      	add	sp, #52	@ 0x34
 8005958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595c:	4642      	mov	r2, r8
 800595e:	464b      	mov	r3, r9
 8005960:	4640      	mov	r0, r8
 8005962:	4649      	mov	r1, r9
 8005964:	f7fb f8e2 	bl	8000b2c <__aeabi_dcmpun>
 8005968:	b140      	cbz	r0, 800597c <_printf_float+0xe0>
 800596a:	464b      	mov	r3, r9
 800596c:	2b00      	cmp	r3, #0
 800596e:	bfbc      	itt	lt
 8005970:	232d      	movlt	r3, #45	@ 0x2d
 8005972:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005976:	4a7e      	ldr	r2, [pc, #504]	@ (8005b70 <_printf_float+0x2d4>)
 8005978:	4b7e      	ldr	r3, [pc, #504]	@ (8005b74 <_printf_float+0x2d8>)
 800597a:	e7d4      	b.n	8005926 <_printf_float+0x8a>
 800597c:	6863      	ldr	r3, [r4, #4]
 800597e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005982:	9206      	str	r2, [sp, #24]
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	d13b      	bne.n	8005a00 <_printf_float+0x164>
 8005988:	2306      	movs	r3, #6
 800598a:	6063      	str	r3, [r4, #4]
 800598c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005990:	2300      	movs	r3, #0
 8005992:	6022      	str	r2, [r4, #0]
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	ab0a      	add	r3, sp, #40	@ 0x28
 8005998:	e9cd a301 	strd	sl, r3, [sp, #4]
 800599c:	ab09      	add	r3, sp, #36	@ 0x24
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	6861      	ldr	r1, [r4, #4]
 80059a2:	ec49 8b10 	vmov	d0, r8, r9
 80059a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059aa:	4628      	mov	r0, r5
 80059ac:	f7ff fed6 	bl	800575c <__cvt>
 80059b0:	9b06      	ldr	r3, [sp, #24]
 80059b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059b4:	2b47      	cmp	r3, #71	@ 0x47
 80059b6:	4680      	mov	r8, r0
 80059b8:	d129      	bne.n	8005a0e <_printf_float+0x172>
 80059ba:	1cc8      	adds	r0, r1, #3
 80059bc:	db02      	blt.n	80059c4 <_printf_float+0x128>
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	4299      	cmp	r1, r3
 80059c2:	dd41      	ble.n	8005a48 <_printf_float+0x1ac>
 80059c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80059c8:	fa5f fa8a 	uxtb.w	sl, sl
 80059cc:	3901      	subs	r1, #1
 80059ce:	4652      	mov	r2, sl
 80059d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80059d6:	f7ff ff26 	bl	8005826 <__exponent>
 80059da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059dc:	1813      	adds	r3, r2, r0
 80059de:	2a01      	cmp	r2, #1
 80059e0:	4681      	mov	r9, r0
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	dc02      	bgt.n	80059ec <_printf_float+0x150>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	07d2      	lsls	r2, r2, #31
 80059ea:	d501      	bpl.n	80059f0 <_printf_float+0x154>
 80059ec:	3301      	adds	r3, #1
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0a2      	beq.n	800593e <_printf_float+0xa2>
 80059f8:	232d      	movs	r3, #45	@ 0x2d
 80059fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059fe:	e79e      	b.n	800593e <_printf_float+0xa2>
 8005a00:	9a06      	ldr	r2, [sp, #24]
 8005a02:	2a47      	cmp	r2, #71	@ 0x47
 8005a04:	d1c2      	bne.n	800598c <_printf_float+0xf0>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1c0      	bne.n	800598c <_printf_float+0xf0>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e7bd      	b.n	800598a <_printf_float+0xee>
 8005a0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a12:	d9db      	bls.n	80059cc <_printf_float+0x130>
 8005a14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a18:	d118      	bne.n	8005a4c <_printf_float+0x1b0>
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	6863      	ldr	r3, [r4, #4]
 8005a1e:	dd0b      	ble.n	8005a38 <_printf_float+0x19c>
 8005a20:	6121      	str	r1, [r4, #16]
 8005a22:	b913      	cbnz	r3, 8005a2a <_printf_float+0x18e>
 8005a24:	6822      	ldr	r2, [r4, #0]
 8005a26:	07d0      	lsls	r0, r2, #31
 8005a28:	d502      	bpl.n	8005a30 <_printf_float+0x194>
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	440b      	add	r3, r1
 8005a2e:	6123      	str	r3, [r4, #16]
 8005a30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a32:	f04f 0900 	mov.w	r9, #0
 8005a36:	e7db      	b.n	80059f0 <_printf_float+0x154>
 8005a38:	b913      	cbnz	r3, 8005a40 <_printf_float+0x1a4>
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	07d2      	lsls	r2, r2, #31
 8005a3e:	d501      	bpl.n	8005a44 <_printf_float+0x1a8>
 8005a40:	3302      	adds	r3, #2
 8005a42:	e7f4      	b.n	8005a2e <_printf_float+0x192>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e7f2      	b.n	8005a2e <_printf_float+0x192>
 8005a48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	db05      	blt.n	8005a5e <_printf_float+0x1c2>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	6121      	str	r1, [r4, #16]
 8005a56:	07d8      	lsls	r0, r3, #31
 8005a58:	d5ea      	bpl.n	8005a30 <_printf_float+0x194>
 8005a5a:	1c4b      	adds	r3, r1, #1
 8005a5c:	e7e7      	b.n	8005a2e <_printf_float+0x192>
 8005a5e:	2900      	cmp	r1, #0
 8005a60:	bfd4      	ite	le
 8005a62:	f1c1 0202 	rsble	r2, r1, #2
 8005a66:	2201      	movgt	r2, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	e7e0      	b.n	8005a2e <_printf_float+0x192>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	055a      	lsls	r2, r3, #21
 8005a70:	d407      	bmi.n	8005a82 <_printf_float+0x1e6>
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	4642      	mov	r2, r8
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d12b      	bne.n	8005ad8 <_printf_float+0x23c>
 8005a80:	e767      	b.n	8005952 <_printf_float+0xb6>
 8005a82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a86:	f240 80dd 	bls.w	8005c44 <_printf_float+0x3a8>
 8005a8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	f7fb f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d033      	beq.n	8005b02 <_printf_float+0x266>
 8005a9a:	4a37      	ldr	r2, [pc, #220]	@ (8005b78 <_printf_float+0x2dc>)
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f43f af54 	beq.w	8005952 <_printf_float+0xb6>
 8005aaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005aae:	4543      	cmp	r3, r8
 8005ab0:	db02      	blt.n	8005ab8 <_printf_float+0x21c>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	07d8      	lsls	r0, r3, #31
 8005ab6:	d50f      	bpl.n	8005ad8 <_printf_float+0x23c>
 8005ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f af45 	beq.w	8005952 <_printf_float+0xb6>
 8005ac8:	f04f 0900 	mov.w	r9, #0
 8005acc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ad0:	f104 0a1a 	add.w	sl, r4, #26
 8005ad4:	45c8      	cmp	r8, r9
 8005ad6:	dc09      	bgt.n	8005aec <_printf_float+0x250>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	079b      	lsls	r3, r3, #30
 8005adc:	f100 8103 	bmi.w	8005ce6 <_printf_float+0x44a>
 8005ae0:	68e0      	ldr	r0, [r4, #12]
 8005ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	bfb8      	it	lt
 8005ae8:	4618      	movlt	r0, r3
 8005aea:	e734      	b.n	8005956 <_printf_float+0xba>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4652      	mov	r2, sl
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	f43f af2b 	beq.w	8005952 <_printf_float+0xb6>
 8005afc:	f109 0901 	add.w	r9, r9, #1
 8005b00:	e7e8      	b.n	8005ad4 <_printf_float+0x238>
 8005b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dc39      	bgt.n	8005b7c <_printf_float+0x2e0>
 8005b08:	4a1b      	ldr	r2, [pc, #108]	@ (8005b78 <_printf_float+0x2dc>)
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	f43f af1d 	beq.w	8005952 <_printf_float+0xb6>
 8005b18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b1c:	ea59 0303 	orrs.w	r3, r9, r3
 8005b20:	d102      	bne.n	8005b28 <_printf_float+0x28c>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	07d9      	lsls	r1, r3, #31
 8005b26:	d5d7      	bpl.n	8005ad8 <_printf_float+0x23c>
 8005b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4628      	mov	r0, r5
 8005b30:	47b8      	blx	r7
 8005b32:	3001      	adds	r0, #1
 8005b34:	f43f af0d 	beq.w	8005952 <_printf_float+0xb6>
 8005b38:	f04f 0a00 	mov.w	sl, #0
 8005b3c:	f104 0b1a 	add.w	fp, r4, #26
 8005b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b42:	425b      	negs	r3, r3
 8005b44:	4553      	cmp	r3, sl
 8005b46:	dc01      	bgt.n	8005b4c <_printf_float+0x2b0>
 8005b48:	464b      	mov	r3, r9
 8005b4a:	e793      	b.n	8005a74 <_printf_float+0x1d8>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	465a      	mov	r2, fp
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f aefb 	beq.w	8005952 <_printf_float+0xb6>
 8005b5c:	f10a 0a01 	add.w	sl, sl, #1
 8005b60:	e7ee      	b.n	8005b40 <_printf_float+0x2a4>
 8005b62:	bf00      	nop
 8005b64:	7fefffff 	.word	0x7fefffff
 8005b68:	080092a8 	.word	0x080092a8
 8005b6c:	080092ac 	.word	0x080092ac
 8005b70:	080092b0 	.word	0x080092b0
 8005b74:	080092b4 	.word	0x080092b4
 8005b78:	080092b8 	.word	0x080092b8
 8005b7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b82:	4553      	cmp	r3, sl
 8005b84:	bfa8      	it	ge
 8005b86:	4653      	movge	r3, sl
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	4699      	mov	r9, r3
 8005b8c:	dc36      	bgt.n	8005bfc <_printf_float+0x360>
 8005b8e:	f04f 0b00 	mov.w	fp, #0
 8005b92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b96:	f104 021a 	add.w	r2, r4, #26
 8005b9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b9c:	9306      	str	r3, [sp, #24]
 8005b9e:	eba3 0309 	sub.w	r3, r3, r9
 8005ba2:	455b      	cmp	r3, fp
 8005ba4:	dc31      	bgt.n	8005c0a <_printf_float+0x36e>
 8005ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba8:	459a      	cmp	sl, r3
 8005baa:	dc3a      	bgt.n	8005c22 <_printf_float+0x386>
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	07da      	lsls	r2, r3, #31
 8005bb0:	d437      	bmi.n	8005c22 <_printf_float+0x386>
 8005bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb4:	ebaa 0903 	sub.w	r9, sl, r3
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	ebaa 0303 	sub.w	r3, sl, r3
 8005bbe:	4599      	cmp	r9, r3
 8005bc0:	bfa8      	it	ge
 8005bc2:	4699      	movge	r9, r3
 8005bc4:	f1b9 0f00 	cmp.w	r9, #0
 8005bc8:	dc33      	bgt.n	8005c32 <_printf_float+0x396>
 8005bca:	f04f 0800 	mov.w	r8, #0
 8005bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bd2:	f104 0b1a 	add.w	fp, r4, #26
 8005bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bdc:	eba3 0309 	sub.w	r3, r3, r9
 8005be0:	4543      	cmp	r3, r8
 8005be2:	f77f af79 	ble.w	8005ad8 <_printf_float+0x23c>
 8005be6:	2301      	movs	r3, #1
 8005be8:	465a      	mov	r2, fp
 8005bea:	4631      	mov	r1, r6
 8005bec:	4628      	mov	r0, r5
 8005bee:	47b8      	blx	r7
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f aeae 	beq.w	8005952 <_printf_float+0xb6>
 8005bf6:	f108 0801 	add.w	r8, r8, #1
 8005bfa:	e7ec      	b.n	8005bd6 <_printf_float+0x33a>
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d1c2      	bne.n	8005b8e <_printf_float+0x2f2>
 8005c08:	e6a3      	b.n	8005952 <_printf_float+0xb6>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	9206      	str	r2, [sp, #24]
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f ae9c 	beq.w	8005952 <_printf_float+0xb6>
 8005c1a:	9a06      	ldr	r2, [sp, #24]
 8005c1c:	f10b 0b01 	add.w	fp, fp, #1
 8005c20:	e7bb      	b.n	8005b9a <_printf_float+0x2fe>
 8005c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c26:	4631      	mov	r1, r6
 8005c28:	4628      	mov	r0, r5
 8005c2a:	47b8      	blx	r7
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d1c0      	bne.n	8005bb2 <_printf_float+0x316>
 8005c30:	e68f      	b.n	8005952 <_printf_float+0xb6>
 8005c32:	9a06      	ldr	r2, [sp, #24]
 8005c34:	464b      	mov	r3, r9
 8005c36:	4442      	add	r2, r8
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d1c3      	bne.n	8005bca <_printf_float+0x32e>
 8005c42:	e686      	b.n	8005952 <_printf_float+0xb6>
 8005c44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c48:	f1ba 0f01 	cmp.w	sl, #1
 8005c4c:	dc01      	bgt.n	8005c52 <_printf_float+0x3b6>
 8005c4e:	07db      	lsls	r3, r3, #31
 8005c50:	d536      	bpl.n	8005cc0 <_printf_float+0x424>
 8005c52:	2301      	movs	r3, #1
 8005c54:	4642      	mov	r2, r8
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae78 	beq.w	8005952 <_printf_float+0xb6>
 8005c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f ae70 	beq.w	8005952 <_printf_float+0xb6>
 8005c72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c76:	2200      	movs	r2, #0
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c7e:	f7fa ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c82:	b9c0      	cbnz	r0, 8005cb6 <_printf_float+0x41a>
 8005c84:	4653      	mov	r3, sl
 8005c86:	f108 0201 	add.w	r2, r8, #1
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	d10c      	bne.n	8005cae <_printf_float+0x412>
 8005c94:	e65d      	b.n	8005952 <_printf_float+0xb6>
 8005c96:	2301      	movs	r3, #1
 8005c98:	465a      	mov	r2, fp
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae56 	beq.w	8005952 <_printf_float+0xb6>
 8005ca6:	f108 0801 	add.w	r8, r8, #1
 8005caa:	45d0      	cmp	r8, sl
 8005cac:	dbf3      	blt.n	8005c96 <_printf_float+0x3fa>
 8005cae:	464b      	mov	r3, r9
 8005cb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005cb4:	e6df      	b.n	8005a76 <_printf_float+0x1da>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	f104 0b1a 	add.w	fp, r4, #26
 8005cbe:	e7f4      	b.n	8005caa <_printf_float+0x40e>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	4642      	mov	r2, r8
 8005cc4:	e7e1      	b.n	8005c8a <_printf_float+0x3ee>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	464a      	mov	r2, r9
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae3e 	beq.w	8005952 <_printf_float+0xb6>
 8005cd6:	f108 0801 	add.w	r8, r8, #1
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cde:	1a5b      	subs	r3, r3, r1
 8005ce0:	4543      	cmp	r3, r8
 8005ce2:	dcf0      	bgt.n	8005cc6 <_printf_float+0x42a>
 8005ce4:	e6fc      	b.n	8005ae0 <_printf_float+0x244>
 8005ce6:	f04f 0800 	mov.w	r8, #0
 8005cea:	f104 0919 	add.w	r9, r4, #25
 8005cee:	e7f4      	b.n	8005cda <_printf_float+0x43e>

08005cf0 <_printf_common>:
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	4698      	mov	r8, r3
 8005cf8:	688a      	ldr	r2, [r1, #8]
 8005cfa:	690b      	ldr	r3, [r1, #16]
 8005cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d00:	4293      	cmp	r3, r2
 8005d02:	bfb8      	it	lt
 8005d04:	4613      	movlt	r3, r2
 8005d06:	6033      	str	r3, [r6, #0]
 8005d08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	b10a      	cbz	r2, 8005d16 <_printf_common+0x26>
 8005d12:	3301      	adds	r3, #1
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	0699      	lsls	r1, r3, #26
 8005d1a:	bf42      	ittt	mi
 8005d1c:	6833      	ldrmi	r3, [r6, #0]
 8005d1e:	3302      	addmi	r3, #2
 8005d20:	6033      	strmi	r3, [r6, #0]
 8005d22:	6825      	ldr	r5, [r4, #0]
 8005d24:	f015 0506 	ands.w	r5, r5, #6
 8005d28:	d106      	bne.n	8005d38 <_printf_common+0x48>
 8005d2a:	f104 0a19 	add.w	sl, r4, #25
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	6832      	ldr	r2, [r6, #0]
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	dc26      	bgt.n	8005d86 <_printf_common+0x96>
 8005d38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	3b00      	subs	r3, #0
 8005d40:	bf18      	it	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	0692      	lsls	r2, r2, #26
 8005d46:	d42b      	bmi.n	8005da0 <_printf_common+0xb0>
 8005d48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	4638      	mov	r0, r7
 8005d50:	47c8      	blx	r9
 8005d52:	3001      	adds	r0, #1
 8005d54:	d01e      	beq.n	8005d94 <_printf_common+0xa4>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	6922      	ldr	r2, [r4, #16]
 8005d5a:	f003 0306 	and.w	r3, r3, #6
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	bf02      	ittt	eq
 8005d62:	68e5      	ldreq	r5, [r4, #12]
 8005d64:	6833      	ldreq	r3, [r6, #0]
 8005d66:	1aed      	subeq	r5, r5, r3
 8005d68:	68a3      	ldr	r3, [r4, #8]
 8005d6a:	bf0c      	ite	eq
 8005d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d70:	2500      	movne	r5, #0
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bfc4      	itt	gt
 8005d76:	1a9b      	subgt	r3, r3, r2
 8005d78:	18ed      	addgt	r5, r5, r3
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	341a      	adds	r4, #26
 8005d7e:	42b5      	cmp	r5, r6
 8005d80:	d11a      	bne.n	8005db8 <_printf_common+0xc8>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e008      	b.n	8005d98 <_printf_common+0xa8>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	47c8      	blx	r9
 8005d90:	3001      	adds	r0, #1
 8005d92:	d103      	bne.n	8005d9c <_printf_common+0xac>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	3501      	adds	r5, #1
 8005d9e:	e7c6      	b.n	8005d2e <_printf_common+0x3e>
 8005da0:	18e1      	adds	r1, r4, r3
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	2030      	movs	r0, #48	@ 0x30
 8005da6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005daa:	4422      	add	r2, r4
 8005dac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005db0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005db4:	3302      	adds	r3, #2
 8005db6:	e7c7      	b.n	8005d48 <_printf_common+0x58>
 8005db8:	2301      	movs	r3, #1
 8005dba:	4622      	mov	r2, r4
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	47c8      	blx	r9
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d0e6      	beq.n	8005d94 <_printf_common+0xa4>
 8005dc6:	3601      	adds	r6, #1
 8005dc8:	e7d9      	b.n	8005d7e <_printf_common+0x8e>
	...

08005dcc <_printf_i>:
 8005dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	7e0f      	ldrb	r7, [r1, #24]
 8005dd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dd4:	2f78      	cmp	r7, #120	@ 0x78
 8005dd6:	4691      	mov	r9, r2
 8005dd8:	4680      	mov	r8, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	469a      	mov	sl, r3
 8005dde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005de2:	d807      	bhi.n	8005df4 <_printf_i+0x28>
 8005de4:	2f62      	cmp	r7, #98	@ 0x62
 8005de6:	d80a      	bhi.n	8005dfe <_printf_i+0x32>
 8005de8:	2f00      	cmp	r7, #0
 8005dea:	f000 80d2 	beq.w	8005f92 <_printf_i+0x1c6>
 8005dee:	2f58      	cmp	r7, #88	@ 0x58
 8005df0:	f000 80b9 	beq.w	8005f66 <_printf_i+0x19a>
 8005df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dfc:	e03a      	b.n	8005e74 <_printf_i+0xa8>
 8005dfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e02:	2b15      	cmp	r3, #21
 8005e04:	d8f6      	bhi.n	8005df4 <_printf_i+0x28>
 8005e06:	a101      	add	r1, pc, #4	@ (adr r1, 8005e0c <_printf_i+0x40>)
 8005e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e0c:	08005e65 	.word	0x08005e65
 8005e10:	08005e79 	.word	0x08005e79
 8005e14:	08005df5 	.word	0x08005df5
 8005e18:	08005df5 	.word	0x08005df5
 8005e1c:	08005df5 	.word	0x08005df5
 8005e20:	08005df5 	.word	0x08005df5
 8005e24:	08005e79 	.word	0x08005e79
 8005e28:	08005df5 	.word	0x08005df5
 8005e2c:	08005df5 	.word	0x08005df5
 8005e30:	08005df5 	.word	0x08005df5
 8005e34:	08005df5 	.word	0x08005df5
 8005e38:	08005f79 	.word	0x08005f79
 8005e3c:	08005ea3 	.word	0x08005ea3
 8005e40:	08005f33 	.word	0x08005f33
 8005e44:	08005df5 	.word	0x08005df5
 8005e48:	08005df5 	.word	0x08005df5
 8005e4c:	08005f9b 	.word	0x08005f9b
 8005e50:	08005df5 	.word	0x08005df5
 8005e54:	08005ea3 	.word	0x08005ea3
 8005e58:	08005df5 	.word	0x08005df5
 8005e5c:	08005df5 	.word	0x08005df5
 8005e60:	08005f3b 	.word	0x08005f3b
 8005e64:	6833      	ldr	r3, [r6, #0]
 8005e66:	1d1a      	adds	r2, r3, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6032      	str	r2, [r6, #0]
 8005e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e74:	2301      	movs	r3, #1
 8005e76:	e09d      	b.n	8005fb4 <_printf_i+0x1e8>
 8005e78:	6833      	ldr	r3, [r6, #0]
 8005e7a:	6820      	ldr	r0, [r4, #0]
 8005e7c:	1d19      	adds	r1, r3, #4
 8005e7e:	6031      	str	r1, [r6, #0]
 8005e80:	0606      	lsls	r6, r0, #24
 8005e82:	d501      	bpl.n	8005e88 <_printf_i+0xbc>
 8005e84:	681d      	ldr	r5, [r3, #0]
 8005e86:	e003      	b.n	8005e90 <_printf_i+0xc4>
 8005e88:	0645      	lsls	r5, r0, #25
 8005e8a:	d5fb      	bpl.n	8005e84 <_printf_i+0xb8>
 8005e8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	da03      	bge.n	8005e9c <_printf_i+0xd0>
 8005e94:	232d      	movs	r3, #45	@ 0x2d
 8005e96:	426d      	negs	r5, r5
 8005e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e9c:	4859      	ldr	r0, [pc, #356]	@ (8006004 <_printf_i+0x238>)
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	e011      	b.n	8005ec6 <_printf_i+0xfa>
 8005ea2:	6821      	ldr	r1, [r4, #0]
 8005ea4:	6833      	ldr	r3, [r6, #0]
 8005ea6:	0608      	lsls	r0, r1, #24
 8005ea8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005eac:	d402      	bmi.n	8005eb4 <_printf_i+0xe8>
 8005eae:	0649      	lsls	r1, r1, #25
 8005eb0:	bf48      	it	mi
 8005eb2:	b2ad      	uxthmi	r5, r5
 8005eb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eb6:	4853      	ldr	r0, [pc, #332]	@ (8006004 <_printf_i+0x238>)
 8005eb8:	6033      	str	r3, [r6, #0]
 8005eba:	bf14      	ite	ne
 8005ebc:	230a      	movne	r3, #10
 8005ebe:	2308      	moveq	r3, #8
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ec6:	6866      	ldr	r6, [r4, #4]
 8005ec8:	60a6      	str	r6, [r4, #8]
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	bfa2      	ittt	ge
 8005ece:	6821      	ldrge	r1, [r4, #0]
 8005ed0:	f021 0104 	bicge.w	r1, r1, #4
 8005ed4:	6021      	strge	r1, [r4, #0]
 8005ed6:	b90d      	cbnz	r5, 8005edc <_printf_i+0x110>
 8005ed8:	2e00      	cmp	r6, #0
 8005eda:	d04b      	beq.n	8005f74 <_printf_i+0x1a8>
 8005edc:	4616      	mov	r6, r2
 8005ede:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ee2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ee6:	5dc7      	ldrb	r7, [r0, r7]
 8005ee8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005eec:	462f      	mov	r7, r5
 8005eee:	42bb      	cmp	r3, r7
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	d9f4      	bls.n	8005ede <_printf_i+0x112>
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d10b      	bne.n	8005f10 <_printf_i+0x144>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	07df      	lsls	r7, r3, #31
 8005efc:	d508      	bpl.n	8005f10 <_printf_i+0x144>
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	6861      	ldr	r1, [r4, #4]
 8005f02:	4299      	cmp	r1, r3
 8005f04:	bfde      	ittt	le
 8005f06:	2330      	movle	r3, #48	@ 0x30
 8005f08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f10:	1b92      	subs	r2, r2, r6
 8005f12:	6122      	str	r2, [r4, #16]
 8005f14:	f8cd a000 	str.w	sl, [sp]
 8005f18:	464b      	mov	r3, r9
 8005f1a:	aa03      	add	r2, sp, #12
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f7ff fee6 	bl	8005cf0 <_printf_common>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d14a      	bne.n	8005fbe <_printf_i+0x1f2>
 8005f28:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2c:	b004      	add	sp, #16
 8005f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	f043 0320 	orr.w	r3, r3, #32
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	4833      	ldr	r0, [pc, #204]	@ (8006008 <_printf_i+0x23c>)
 8005f3c:	2778      	movs	r7, #120	@ 0x78
 8005f3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	6831      	ldr	r1, [r6, #0]
 8005f46:	061f      	lsls	r7, r3, #24
 8005f48:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f4c:	d402      	bmi.n	8005f54 <_printf_i+0x188>
 8005f4e:	065f      	lsls	r7, r3, #25
 8005f50:	bf48      	it	mi
 8005f52:	b2ad      	uxthmi	r5, r5
 8005f54:	6031      	str	r1, [r6, #0]
 8005f56:	07d9      	lsls	r1, r3, #31
 8005f58:	bf44      	itt	mi
 8005f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f5e:	6023      	strmi	r3, [r4, #0]
 8005f60:	b11d      	cbz	r5, 8005f6a <_printf_i+0x19e>
 8005f62:	2310      	movs	r3, #16
 8005f64:	e7ac      	b.n	8005ec0 <_printf_i+0xf4>
 8005f66:	4827      	ldr	r0, [pc, #156]	@ (8006004 <_printf_i+0x238>)
 8005f68:	e7e9      	b.n	8005f3e <_printf_i+0x172>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f023 0320 	bic.w	r3, r3, #32
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	e7f6      	b.n	8005f62 <_printf_i+0x196>
 8005f74:	4616      	mov	r6, r2
 8005f76:	e7bd      	b.n	8005ef4 <_printf_i+0x128>
 8005f78:	6833      	ldr	r3, [r6, #0]
 8005f7a:	6825      	ldr	r5, [r4, #0]
 8005f7c:	6961      	ldr	r1, [r4, #20]
 8005f7e:	1d18      	adds	r0, r3, #4
 8005f80:	6030      	str	r0, [r6, #0]
 8005f82:	062e      	lsls	r6, r5, #24
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	d501      	bpl.n	8005f8c <_printf_i+0x1c0>
 8005f88:	6019      	str	r1, [r3, #0]
 8005f8a:	e002      	b.n	8005f92 <_printf_i+0x1c6>
 8005f8c:	0668      	lsls	r0, r5, #25
 8005f8e:	d5fb      	bpl.n	8005f88 <_printf_i+0x1bc>
 8005f90:	8019      	strh	r1, [r3, #0]
 8005f92:	2300      	movs	r3, #0
 8005f94:	6123      	str	r3, [r4, #16]
 8005f96:	4616      	mov	r6, r2
 8005f98:	e7bc      	b.n	8005f14 <_printf_i+0x148>
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	1d1a      	adds	r2, r3, #4
 8005f9e:	6032      	str	r2, [r6, #0]
 8005fa0:	681e      	ldr	r6, [r3, #0]
 8005fa2:	6862      	ldr	r2, [r4, #4]
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7fa f912 	bl	80001d0 <memchr>
 8005fac:	b108      	cbz	r0, 8005fb2 <_printf_i+0x1e6>
 8005fae:	1b80      	subs	r0, r0, r6
 8005fb0:	6060      	str	r0, [r4, #4]
 8005fb2:	6863      	ldr	r3, [r4, #4]
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fbc:	e7aa      	b.n	8005f14 <_printf_i+0x148>
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	47d0      	blx	sl
 8005fc8:	3001      	adds	r0, #1
 8005fca:	d0ad      	beq.n	8005f28 <_printf_i+0x15c>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	079b      	lsls	r3, r3, #30
 8005fd0:	d413      	bmi.n	8005ffa <_printf_i+0x22e>
 8005fd2:	68e0      	ldr	r0, [r4, #12]
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	4298      	cmp	r0, r3
 8005fd8:	bfb8      	it	lt
 8005fda:	4618      	movlt	r0, r3
 8005fdc:	e7a6      	b.n	8005f2c <_printf_i+0x160>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	47d0      	blx	sl
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d09d      	beq.n	8005f28 <_printf_i+0x15c>
 8005fec:	3501      	adds	r5, #1
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	9903      	ldr	r1, [sp, #12]
 8005ff2:	1a5b      	subs	r3, r3, r1
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	dcf2      	bgt.n	8005fde <_printf_i+0x212>
 8005ff8:	e7eb      	b.n	8005fd2 <_printf_i+0x206>
 8005ffa:	2500      	movs	r5, #0
 8005ffc:	f104 0619 	add.w	r6, r4, #25
 8006000:	e7f5      	b.n	8005fee <_printf_i+0x222>
 8006002:	bf00      	nop
 8006004:	080092ba 	.word	0x080092ba
 8006008:	080092cb 	.word	0x080092cb

0800600c <_scanf_float>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	b087      	sub	sp, #28
 8006012:	4617      	mov	r7, r2
 8006014:	9303      	str	r3, [sp, #12]
 8006016:	688b      	ldr	r3, [r1, #8]
 8006018:	1e5a      	subs	r2, r3, #1
 800601a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800601e:	bf81      	itttt	hi
 8006020:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006024:	eb03 0b05 	addhi.w	fp, r3, r5
 8006028:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800602c:	608b      	strhi	r3, [r1, #8]
 800602e:	680b      	ldr	r3, [r1, #0]
 8006030:	460a      	mov	r2, r1
 8006032:	f04f 0500 	mov.w	r5, #0
 8006036:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800603a:	f842 3b1c 	str.w	r3, [r2], #28
 800603e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006042:	4680      	mov	r8, r0
 8006044:	460c      	mov	r4, r1
 8006046:	bf98      	it	ls
 8006048:	f04f 0b00 	movls.w	fp, #0
 800604c:	9201      	str	r2, [sp, #4]
 800604e:	4616      	mov	r6, r2
 8006050:	46aa      	mov	sl, r5
 8006052:	46a9      	mov	r9, r5
 8006054:	9502      	str	r5, [sp, #8]
 8006056:	68a2      	ldr	r2, [r4, #8]
 8006058:	b152      	cbz	r2, 8006070 <_scanf_float+0x64>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006060:	d864      	bhi.n	800612c <_scanf_float+0x120>
 8006062:	2b40      	cmp	r3, #64	@ 0x40
 8006064:	d83c      	bhi.n	80060e0 <_scanf_float+0xd4>
 8006066:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800606a:	b2c8      	uxtb	r0, r1
 800606c:	280e      	cmp	r0, #14
 800606e:	d93a      	bls.n	80060e6 <_scanf_float+0xda>
 8006070:	f1b9 0f00 	cmp.w	r9, #0
 8006074:	d003      	beq.n	800607e <_scanf_float+0x72>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006082:	f1ba 0f01 	cmp.w	sl, #1
 8006086:	f200 8117 	bhi.w	80062b8 <_scanf_float+0x2ac>
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	429e      	cmp	r6, r3
 800608e:	f200 8108 	bhi.w	80062a2 <_scanf_float+0x296>
 8006092:	2001      	movs	r0, #1
 8006094:	b007      	add	sp, #28
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800609e:	2a0d      	cmp	r2, #13
 80060a0:	d8e6      	bhi.n	8006070 <_scanf_float+0x64>
 80060a2:	a101      	add	r1, pc, #4	@ (adr r1, 80060a8 <_scanf_float+0x9c>)
 80060a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060a8:	080061ef 	.word	0x080061ef
 80060ac:	08006071 	.word	0x08006071
 80060b0:	08006071 	.word	0x08006071
 80060b4:	08006071 	.word	0x08006071
 80060b8:	0800624f 	.word	0x0800624f
 80060bc:	08006227 	.word	0x08006227
 80060c0:	08006071 	.word	0x08006071
 80060c4:	08006071 	.word	0x08006071
 80060c8:	080061fd 	.word	0x080061fd
 80060cc:	08006071 	.word	0x08006071
 80060d0:	08006071 	.word	0x08006071
 80060d4:	08006071 	.word	0x08006071
 80060d8:	08006071 	.word	0x08006071
 80060dc:	080061b5 	.word	0x080061b5
 80060e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80060e4:	e7db      	b.n	800609e <_scanf_float+0x92>
 80060e6:	290e      	cmp	r1, #14
 80060e8:	d8c2      	bhi.n	8006070 <_scanf_float+0x64>
 80060ea:	a001      	add	r0, pc, #4	@ (adr r0, 80060f0 <_scanf_float+0xe4>)
 80060ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060f0:	080061a5 	.word	0x080061a5
 80060f4:	08006071 	.word	0x08006071
 80060f8:	080061a5 	.word	0x080061a5
 80060fc:	0800623b 	.word	0x0800623b
 8006100:	08006071 	.word	0x08006071
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800618b 	.word	0x0800618b
 800610c:	0800618b 	.word	0x0800618b
 8006110:	0800618b 	.word	0x0800618b
 8006114:	0800618b 	.word	0x0800618b
 8006118:	0800618b 	.word	0x0800618b
 800611c:	0800618b 	.word	0x0800618b
 8006120:	0800618b 	.word	0x0800618b
 8006124:	0800618b 	.word	0x0800618b
 8006128:	0800618b 	.word	0x0800618b
 800612c:	2b6e      	cmp	r3, #110	@ 0x6e
 800612e:	d809      	bhi.n	8006144 <_scanf_float+0x138>
 8006130:	2b60      	cmp	r3, #96	@ 0x60
 8006132:	d8b2      	bhi.n	800609a <_scanf_float+0x8e>
 8006134:	2b54      	cmp	r3, #84	@ 0x54
 8006136:	d07b      	beq.n	8006230 <_scanf_float+0x224>
 8006138:	2b59      	cmp	r3, #89	@ 0x59
 800613a:	d199      	bne.n	8006070 <_scanf_float+0x64>
 800613c:	2d07      	cmp	r5, #7
 800613e:	d197      	bne.n	8006070 <_scanf_float+0x64>
 8006140:	2508      	movs	r5, #8
 8006142:	e02c      	b.n	800619e <_scanf_float+0x192>
 8006144:	2b74      	cmp	r3, #116	@ 0x74
 8006146:	d073      	beq.n	8006230 <_scanf_float+0x224>
 8006148:	2b79      	cmp	r3, #121	@ 0x79
 800614a:	e7f6      	b.n	800613a <_scanf_float+0x12e>
 800614c:	6821      	ldr	r1, [r4, #0]
 800614e:	05c8      	lsls	r0, r1, #23
 8006150:	d51b      	bpl.n	800618a <_scanf_float+0x17e>
 8006152:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006156:	6021      	str	r1, [r4, #0]
 8006158:	f109 0901 	add.w	r9, r9, #1
 800615c:	f1bb 0f00 	cmp.w	fp, #0
 8006160:	d003      	beq.n	800616a <_scanf_float+0x15e>
 8006162:	3201      	adds	r2, #1
 8006164:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006168:	60a2      	str	r2, [r4, #8]
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	3b01      	subs	r3, #1
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	3301      	adds	r3, #1
 8006174:	6123      	str	r3, [r4, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	f340 8087 	ble.w	8006290 <_scanf_float+0x284>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	3301      	adds	r3, #1
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	e765      	b.n	8006056 <_scanf_float+0x4a>
 800618a:	eb1a 0105 	adds.w	r1, sl, r5
 800618e:	f47f af6f 	bne.w	8006070 <_scanf_float+0x64>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	460d      	mov	r5, r1
 800619c:	468a      	mov	sl, r1
 800619e:	f806 3b01 	strb.w	r3, [r6], #1
 80061a2:	e7e2      	b.n	800616a <_scanf_float+0x15e>
 80061a4:	6822      	ldr	r2, [r4, #0]
 80061a6:	0610      	lsls	r0, r2, #24
 80061a8:	f57f af62 	bpl.w	8006070 <_scanf_float+0x64>
 80061ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061b0:	6022      	str	r2, [r4, #0]
 80061b2:	e7f4      	b.n	800619e <_scanf_float+0x192>
 80061b4:	f1ba 0f00 	cmp.w	sl, #0
 80061b8:	d10e      	bne.n	80061d8 <_scanf_float+0x1cc>
 80061ba:	f1b9 0f00 	cmp.w	r9, #0
 80061be:	d10e      	bne.n	80061de <_scanf_float+0x1d2>
 80061c0:	6822      	ldr	r2, [r4, #0]
 80061c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061ca:	d108      	bne.n	80061de <_scanf_float+0x1d2>
 80061cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061d0:	6022      	str	r2, [r4, #0]
 80061d2:	f04f 0a01 	mov.w	sl, #1
 80061d6:	e7e2      	b.n	800619e <_scanf_float+0x192>
 80061d8:	f1ba 0f02 	cmp.w	sl, #2
 80061dc:	d055      	beq.n	800628a <_scanf_float+0x27e>
 80061de:	2d01      	cmp	r5, #1
 80061e0:	d002      	beq.n	80061e8 <_scanf_float+0x1dc>
 80061e2:	2d04      	cmp	r5, #4
 80061e4:	f47f af44 	bne.w	8006070 <_scanf_float+0x64>
 80061e8:	3501      	adds	r5, #1
 80061ea:	b2ed      	uxtb	r5, r5
 80061ec:	e7d7      	b.n	800619e <_scanf_float+0x192>
 80061ee:	f1ba 0f01 	cmp.w	sl, #1
 80061f2:	f47f af3d 	bne.w	8006070 <_scanf_float+0x64>
 80061f6:	f04f 0a02 	mov.w	sl, #2
 80061fa:	e7d0      	b.n	800619e <_scanf_float+0x192>
 80061fc:	b97d      	cbnz	r5, 800621e <_scanf_float+0x212>
 80061fe:	f1b9 0f00 	cmp.w	r9, #0
 8006202:	f47f af38 	bne.w	8006076 <_scanf_float+0x6a>
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800620c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006210:	f040 8108 	bne.w	8006424 <_scanf_float+0x418>
 8006214:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006218:	6022      	str	r2, [r4, #0]
 800621a:	2501      	movs	r5, #1
 800621c:	e7bf      	b.n	800619e <_scanf_float+0x192>
 800621e:	2d03      	cmp	r5, #3
 8006220:	d0e2      	beq.n	80061e8 <_scanf_float+0x1dc>
 8006222:	2d05      	cmp	r5, #5
 8006224:	e7de      	b.n	80061e4 <_scanf_float+0x1d8>
 8006226:	2d02      	cmp	r5, #2
 8006228:	f47f af22 	bne.w	8006070 <_scanf_float+0x64>
 800622c:	2503      	movs	r5, #3
 800622e:	e7b6      	b.n	800619e <_scanf_float+0x192>
 8006230:	2d06      	cmp	r5, #6
 8006232:	f47f af1d 	bne.w	8006070 <_scanf_float+0x64>
 8006236:	2507      	movs	r5, #7
 8006238:	e7b1      	b.n	800619e <_scanf_float+0x192>
 800623a:	6822      	ldr	r2, [r4, #0]
 800623c:	0591      	lsls	r1, r2, #22
 800623e:	f57f af17 	bpl.w	8006070 <_scanf_float+0x64>
 8006242:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006246:	6022      	str	r2, [r4, #0]
 8006248:	f8cd 9008 	str.w	r9, [sp, #8]
 800624c:	e7a7      	b.n	800619e <_scanf_float+0x192>
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006254:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006258:	d006      	beq.n	8006268 <_scanf_float+0x25c>
 800625a:	0550      	lsls	r0, r2, #21
 800625c:	f57f af08 	bpl.w	8006070 <_scanf_float+0x64>
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	f000 80de 	beq.w	8006424 <_scanf_float+0x418>
 8006268:	0591      	lsls	r1, r2, #22
 800626a:	bf58      	it	pl
 800626c:	9902      	ldrpl	r1, [sp, #8]
 800626e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006272:	bf58      	it	pl
 8006274:	eba9 0101 	subpl.w	r1, r9, r1
 8006278:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800627c:	bf58      	it	pl
 800627e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006282:	6022      	str	r2, [r4, #0]
 8006284:	f04f 0900 	mov.w	r9, #0
 8006288:	e789      	b.n	800619e <_scanf_float+0x192>
 800628a:	f04f 0a03 	mov.w	sl, #3
 800628e:	e786      	b.n	800619e <_scanf_float+0x192>
 8006290:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006294:	4639      	mov	r1, r7
 8006296:	4640      	mov	r0, r8
 8006298:	4798      	blx	r3
 800629a:	2800      	cmp	r0, #0
 800629c:	f43f aedb 	beq.w	8006056 <_scanf_float+0x4a>
 80062a0:	e6e6      	b.n	8006070 <_scanf_float+0x64>
 80062a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062aa:	463a      	mov	r2, r7
 80062ac:	4640      	mov	r0, r8
 80062ae:	4798      	blx	r3
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	6123      	str	r3, [r4, #16]
 80062b6:	e6e8      	b.n	800608a <_scanf_float+0x7e>
 80062b8:	1e6b      	subs	r3, r5, #1
 80062ba:	2b06      	cmp	r3, #6
 80062bc:	d824      	bhi.n	8006308 <_scanf_float+0x2fc>
 80062be:	2d02      	cmp	r5, #2
 80062c0:	d836      	bhi.n	8006330 <_scanf_float+0x324>
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	429e      	cmp	r6, r3
 80062c6:	f67f aee4 	bls.w	8006092 <_scanf_float+0x86>
 80062ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062d2:	463a      	mov	r2, r7
 80062d4:	4640      	mov	r0, r8
 80062d6:	4798      	blx	r3
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	3b01      	subs	r3, #1
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	e7f0      	b.n	80062c2 <_scanf_float+0x2b6>
 80062e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80062e8:	463a      	mov	r2, r7
 80062ea:	4640      	mov	r0, r8
 80062ec:	4798      	blx	r3
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	6123      	str	r3, [r4, #16]
 80062f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062f8:	fa5f fa8a 	uxtb.w	sl, sl
 80062fc:	f1ba 0f02 	cmp.w	sl, #2
 8006300:	d1ee      	bne.n	80062e0 <_scanf_float+0x2d4>
 8006302:	3d03      	subs	r5, #3
 8006304:	b2ed      	uxtb	r5, r5
 8006306:	1b76      	subs	r6, r6, r5
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	05da      	lsls	r2, r3, #23
 800630c:	d530      	bpl.n	8006370 <_scanf_float+0x364>
 800630e:	055b      	lsls	r3, r3, #21
 8006310:	d511      	bpl.n	8006336 <_scanf_float+0x32a>
 8006312:	9b01      	ldr	r3, [sp, #4]
 8006314:	429e      	cmp	r6, r3
 8006316:	f67f aebc 	bls.w	8006092 <_scanf_float+0x86>
 800631a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800631e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006322:	463a      	mov	r2, r7
 8006324:	4640      	mov	r0, r8
 8006326:	4798      	blx	r3
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	3b01      	subs	r3, #1
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	e7f0      	b.n	8006312 <_scanf_float+0x306>
 8006330:	46aa      	mov	sl, r5
 8006332:	46b3      	mov	fp, r6
 8006334:	e7de      	b.n	80062f4 <_scanf_float+0x2e8>
 8006336:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	2965      	cmp	r1, #101	@ 0x65
 800633e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006342:	f106 35ff 	add.w	r5, r6, #4294967295
 8006346:	6123      	str	r3, [r4, #16]
 8006348:	d00c      	beq.n	8006364 <_scanf_float+0x358>
 800634a:	2945      	cmp	r1, #69	@ 0x45
 800634c:	d00a      	beq.n	8006364 <_scanf_float+0x358>
 800634e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006352:	463a      	mov	r2, r7
 8006354:	4640      	mov	r0, r8
 8006356:	4798      	blx	r3
 8006358:	6923      	ldr	r3, [r4, #16]
 800635a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800635e:	3b01      	subs	r3, #1
 8006360:	1eb5      	subs	r5, r6, #2
 8006362:	6123      	str	r3, [r4, #16]
 8006364:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006368:	463a      	mov	r2, r7
 800636a:	4640      	mov	r0, r8
 800636c:	4798      	blx	r3
 800636e:	462e      	mov	r6, r5
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	f012 0210 	ands.w	r2, r2, #16
 8006376:	d001      	beq.n	800637c <_scanf_float+0x370>
 8006378:	2000      	movs	r0, #0
 800637a:	e68b      	b.n	8006094 <_scanf_float+0x88>
 800637c:	7032      	strb	r2, [r6, #0]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006388:	d11c      	bne.n	80063c4 <_scanf_float+0x3b8>
 800638a:	9b02      	ldr	r3, [sp, #8]
 800638c:	454b      	cmp	r3, r9
 800638e:	eba3 0209 	sub.w	r2, r3, r9
 8006392:	d123      	bne.n	80063dc <_scanf_float+0x3d0>
 8006394:	9901      	ldr	r1, [sp, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	4640      	mov	r0, r8
 800639a:	f7ff f9d9 	bl	8005750 <_strtod_r>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f011 0f02 	tst.w	r1, #2
 80063a8:	ec57 6b10 	vmov	r6, r7, d0
 80063ac:	f103 0204 	add.w	r2, r3, #4
 80063b0:	d01f      	beq.n	80063f2 <_scanf_float+0x3e6>
 80063b2:	9903      	ldr	r1, [sp, #12]
 80063b4:	600a      	str	r2, [r1, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	e9c3 6700 	strd	r6, r7, [r3]
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60e3      	str	r3, [r4, #12]
 80063c2:	e7d9      	b.n	8006378 <_scanf_float+0x36c>
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0e4      	beq.n	8006394 <_scanf_float+0x388>
 80063ca:	9905      	ldr	r1, [sp, #20]
 80063cc:	230a      	movs	r3, #10
 80063ce:	3101      	adds	r1, #1
 80063d0:	4640      	mov	r0, r8
 80063d2:	f002 fa79 	bl	80088c8 <_strtol_r>
 80063d6:	9b04      	ldr	r3, [sp, #16]
 80063d8:	9e05      	ldr	r6, [sp, #20]
 80063da:	1ac2      	subs	r2, r0, r3
 80063dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80063e0:	429e      	cmp	r6, r3
 80063e2:	bf28      	it	cs
 80063e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80063e8:	4910      	ldr	r1, [pc, #64]	@ (800642c <_scanf_float+0x420>)
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 f8e4 	bl	80065b8 <siprintf>
 80063f0:	e7d0      	b.n	8006394 <_scanf_float+0x388>
 80063f2:	f011 0f04 	tst.w	r1, #4
 80063f6:	9903      	ldr	r1, [sp, #12]
 80063f8:	600a      	str	r2, [r1, #0]
 80063fa:	d1dc      	bne.n	80063b6 <_scanf_float+0x3aa>
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	4632      	mov	r2, r6
 8006400:	463b      	mov	r3, r7
 8006402:	4630      	mov	r0, r6
 8006404:	4639      	mov	r1, r7
 8006406:	f7fa fb91 	bl	8000b2c <__aeabi_dcmpun>
 800640a:	b128      	cbz	r0, 8006418 <_scanf_float+0x40c>
 800640c:	4808      	ldr	r0, [pc, #32]	@ (8006430 <_scanf_float+0x424>)
 800640e:	f000 fa73 	bl	80068f8 <nanf>
 8006412:	ed85 0a00 	vstr	s0, [r5]
 8006416:	e7d1      	b.n	80063bc <_scanf_float+0x3b0>
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	f7fa fbe4 	bl	8000be8 <__aeabi_d2f>
 8006420:	6028      	str	r0, [r5, #0]
 8006422:	e7cb      	b.n	80063bc <_scanf_float+0x3b0>
 8006424:	f04f 0900 	mov.w	r9, #0
 8006428:	e629      	b.n	800607e <_scanf_float+0x72>
 800642a:	bf00      	nop
 800642c:	080092dc 	.word	0x080092dc
 8006430:	08009324 	.word	0x08009324

08006434 <std>:
 8006434:	2300      	movs	r3, #0
 8006436:	b510      	push	{r4, lr}
 8006438:	4604      	mov	r4, r0
 800643a:	e9c0 3300 	strd	r3, r3, [r0]
 800643e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006442:	6083      	str	r3, [r0, #8]
 8006444:	8181      	strh	r1, [r0, #12]
 8006446:	6643      	str	r3, [r0, #100]	@ 0x64
 8006448:	81c2      	strh	r2, [r0, #14]
 800644a:	6183      	str	r3, [r0, #24]
 800644c:	4619      	mov	r1, r3
 800644e:	2208      	movs	r2, #8
 8006450:	305c      	adds	r0, #92	@ 0x5c
 8006452:	f000 f9a9 	bl	80067a8 <memset>
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x58>)
 8006458:	6263      	str	r3, [r4, #36]	@ 0x24
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <std+0x5c>)
 800645c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800645e:	4b0d      	ldr	r3, [pc, #52]	@ (8006494 <std+0x60>)
 8006460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006462:	4b0d      	ldr	r3, [pc, #52]	@ (8006498 <std+0x64>)
 8006464:	6323      	str	r3, [r4, #48]	@ 0x30
 8006466:	4b0d      	ldr	r3, [pc, #52]	@ (800649c <std+0x68>)
 8006468:	6224      	str	r4, [r4, #32]
 800646a:	429c      	cmp	r4, r3
 800646c:	d006      	beq.n	800647c <std+0x48>
 800646e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006472:	4294      	cmp	r4, r2
 8006474:	d002      	beq.n	800647c <std+0x48>
 8006476:	33d0      	adds	r3, #208	@ 0xd0
 8006478:	429c      	cmp	r4, r3
 800647a:	d105      	bne.n	8006488 <std+0x54>
 800647c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006484:	f000 ba1e 	b.w	80068c4 <__retarget_lock_init_recursive>
 8006488:	bd10      	pop	{r4, pc}
 800648a:	bf00      	nop
 800648c:	080065f9 	.word	0x080065f9
 8006490:	0800661b 	.word	0x0800661b
 8006494:	08006653 	.word	0x08006653
 8006498:	08006677 	.word	0x08006677
 800649c:	200004f0 	.word	0x200004f0

080064a0 <stdio_exit_handler>:
 80064a0:	4a02      	ldr	r2, [pc, #8]	@ (80064ac <stdio_exit_handler+0xc>)
 80064a2:	4903      	ldr	r1, [pc, #12]	@ (80064b0 <stdio_exit_handler+0x10>)
 80064a4:	4803      	ldr	r0, [pc, #12]	@ (80064b4 <stdio_exit_handler+0x14>)
 80064a6:	f000 b869 	b.w	800657c <_fwalk_sglue>
 80064aa:	bf00      	nop
 80064ac:	2000001c 	.word	0x2000001c
 80064b0:	08008f21 	.word	0x08008f21
 80064b4:	20000198 	.word	0x20000198

080064b8 <cleanup_stdio>:
 80064b8:	6841      	ldr	r1, [r0, #4]
 80064ba:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <cleanup_stdio+0x34>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	b510      	push	{r4, lr}
 80064c0:	4604      	mov	r4, r0
 80064c2:	d001      	beq.n	80064c8 <cleanup_stdio+0x10>
 80064c4:	f002 fd2c 	bl	8008f20 <_fflush_r>
 80064c8:	68a1      	ldr	r1, [r4, #8]
 80064ca:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <cleanup_stdio+0x38>)
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <cleanup_stdio+0x1e>
 80064d0:	4620      	mov	r0, r4
 80064d2:	f002 fd25 	bl	8008f20 <_fflush_r>
 80064d6:	68e1      	ldr	r1, [r4, #12]
 80064d8:	4b06      	ldr	r3, [pc, #24]	@ (80064f4 <cleanup_stdio+0x3c>)
 80064da:	4299      	cmp	r1, r3
 80064dc:	d004      	beq.n	80064e8 <cleanup_stdio+0x30>
 80064de:	4620      	mov	r0, r4
 80064e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e4:	f002 bd1c 	b.w	8008f20 <_fflush_r>
 80064e8:	bd10      	pop	{r4, pc}
 80064ea:	bf00      	nop
 80064ec:	200004f0 	.word	0x200004f0
 80064f0:	20000558 	.word	0x20000558
 80064f4:	200005c0 	.word	0x200005c0

080064f8 <global_stdio_init.part.0>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006528 <global_stdio_init.part.0+0x30>)
 80064fc:	4c0b      	ldr	r4, [pc, #44]	@ (800652c <global_stdio_init.part.0+0x34>)
 80064fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006530 <global_stdio_init.part.0+0x38>)
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	4620      	mov	r0, r4
 8006504:	2200      	movs	r2, #0
 8006506:	2104      	movs	r1, #4
 8006508:	f7ff ff94 	bl	8006434 <std>
 800650c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006510:	2201      	movs	r2, #1
 8006512:	2109      	movs	r1, #9
 8006514:	f7ff ff8e 	bl	8006434 <std>
 8006518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800651c:	2202      	movs	r2, #2
 800651e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006522:	2112      	movs	r1, #18
 8006524:	f7ff bf86 	b.w	8006434 <std>
 8006528:	20000628 	.word	0x20000628
 800652c:	200004f0 	.word	0x200004f0
 8006530:	080064a1 	.word	0x080064a1

08006534 <__sfp_lock_acquire>:
 8006534:	4801      	ldr	r0, [pc, #4]	@ (800653c <__sfp_lock_acquire+0x8>)
 8006536:	f000 b9c6 	b.w	80068c6 <__retarget_lock_acquire_recursive>
 800653a:	bf00      	nop
 800653c:	20000631 	.word	0x20000631

08006540 <__sfp_lock_release>:
 8006540:	4801      	ldr	r0, [pc, #4]	@ (8006548 <__sfp_lock_release+0x8>)
 8006542:	f000 b9c1 	b.w	80068c8 <__retarget_lock_release_recursive>
 8006546:	bf00      	nop
 8006548:	20000631 	.word	0x20000631

0800654c <__sinit>:
 800654c:	b510      	push	{r4, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	f7ff fff0 	bl	8006534 <__sfp_lock_acquire>
 8006554:	6a23      	ldr	r3, [r4, #32]
 8006556:	b11b      	cbz	r3, 8006560 <__sinit+0x14>
 8006558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800655c:	f7ff bff0 	b.w	8006540 <__sfp_lock_release>
 8006560:	4b04      	ldr	r3, [pc, #16]	@ (8006574 <__sinit+0x28>)
 8006562:	6223      	str	r3, [r4, #32]
 8006564:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <__sinit+0x2c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1f5      	bne.n	8006558 <__sinit+0xc>
 800656c:	f7ff ffc4 	bl	80064f8 <global_stdio_init.part.0>
 8006570:	e7f2      	b.n	8006558 <__sinit+0xc>
 8006572:	bf00      	nop
 8006574:	080064b9 	.word	0x080064b9
 8006578:	20000628 	.word	0x20000628

0800657c <_fwalk_sglue>:
 800657c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006580:	4607      	mov	r7, r0
 8006582:	4688      	mov	r8, r1
 8006584:	4614      	mov	r4, r2
 8006586:	2600      	movs	r6, #0
 8006588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800658c:	f1b9 0901 	subs.w	r9, r9, #1
 8006590:	d505      	bpl.n	800659e <_fwalk_sglue+0x22>
 8006592:	6824      	ldr	r4, [r4, #0]
 8006594:	2c00      	cmp	r4, #0
 8006596:	d1f7      	bne.n	8006588 <_fwalk_sglue+0xc>
 8006598:	4630      	mov	r0, r6
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	89ab      	ldrh	r3, [r5, #12]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d907      	bls.n	80065b4 <_fwalk_sglue+0x38>
 80065a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065a8:	3301      	adds	r3, #1
 80065aa:	d003      	beq.n	80065b4 <_fwalk_sglue+0x38>
 80065ac:	4629      	mov	r1, r5
 80065ae:	4638      	mov	r0, r7
 80065b0:	47c0      	blx	r8
 80065b2:	4306      	orrs	r6, r0
 80065b4:	3568      	adds	r5, #104	@ 0x68
 80065b6:	e7e9      	b.n	800658c <_fwalk_sglue+0x10>

080065b8 <siprintf>:
 80065b8:	b40e      	push	{r1, r2, r3}
 80065ba:	b500      	push	{lr}
 80065bc:	b09c      	sub	sp, #112	@ 0x70
 80065be:	ab1d      	add	r3, sp, #116	@ 0x74
 80065c0:	9002      	str	r0, [sp, #8]
 80065c2:	9006      	str	r0, [sp, #24]
 80065c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065c8:	4809      	ldr	r0, [pc, #36]	@ (80065f0 <siprintf+0x38>)
 80065ca:	9107      	str	r1, [sp, #28]
 80065cc:	9104      	str	r1, [sp, #16]
 80065ce:	4909      	ldr	r1, [pc, #36]	@ (80065f4 <siprintf+0x3c>)
 80065d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d4:	9105      	str	r1, [sp, #20]
 80065d6:	6800      	ldr	r0, [r0, #0]
 80065d8:	9301      	str	r3, [sp, #4]
 80065da:	a902      	add	r1, sp, #8
 80065dc:	f002 f9de 	bl	800899c <_svfiprintf_r>
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	b01c      	add	sp, #112	@ 0x70
 80065e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ec:	b003      	add	sp, #12
 80065ee:	4770      	bx	lr
 80065f0:	20000194 	.word	0x20000194
 80065f4:	ffff0208 	.word	0xffff0208

080065f8 <__sread>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	460c      	mov	r4, r1
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	f000 f912 	bl	8006828 <_read_r>
 8006604:	2800      	cmp	r0, #0
 8006606:	bfab      	itete	ge
 8006608:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800660a:	89a3      	ldrhlt	r3, [r4, #12]
 800660c:	181b      	addge	r3, r3, r0
 800660e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006612:	bfac      	ite	ge
 8006614:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006616:	81a3      	strhlt	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__swrite>:
 800661a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	461f      	mov	r7, r3
 8006620:	898b      	ldrh	r3, [r1, #12]
 8006622:	05db      	lsls	r3, r3, #23
 8006624:	4605      	mov	r5, r0
 8006626:	460c      	mov	r4, r1
 8006628:	4616      	mov	r6, r2
 800662a:	d505      	bpl.n	8006638 <__swrite+0x1e>
 800662c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006630:	2302      	movs	r3, #2
 8006632:	2200      	movs	r2, #0
 8006634:	f000 f8e6 	bl	8006804 <_lseek_r>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800663e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	4632      	mov	r2, r6
 8006646:	463b      	mov	r3, r7
 8006648:	4628      	mov	r0, r5
 800664a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	f000 b8fd 	b.w	800684c <_write_r>

08006652 <__sseek>:
 8006652:	b510      	push	{r4, lr}
 8006654:	460c      	mov	r4, r1
 8006656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665a:	f000 f8d3 	bl	8006804 <_lseek_r>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	bf15      	itete	ne
 8006664:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006666:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800666a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800666e:	81a3      	strheq	r3, [r4, #12]
 8006670:	bf18      	it	ne
 8006672:	81a3      	strhne	r3, [r4, #12]
 8006674:	bd10      	pop	{r4, pc}

08006676 <__sclose>:
 8006676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667a:	f000 b8b3 	b.w	80067e4 <_close_r>

0800667e <__swbuf_r>:
 800667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006680:	460e      	mov	r6, r1
 8006682:	4614      	mov	r4, r2
 8006684:	4605      	mov	r5, r0
 8006686:	b118      	cbz	r0, 8006690 <__swbuf_r+0x12>
 8006688:	6a03      	ldr	r3, [r0, #32]
 800668a:	b90b      	cbnz	r3, 8006690 <__swbuf_r+0x12>
 800668c:	f7ff ff5e 	bl	800654c <__sinit>
 8006690:	69a3      	ldr	r3, [r4, #24]
 8006692:	60a3      	str	r3, [r4, #8]
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	071a      	lsls	r2, r3, #28
 8006698:	d501      	bpl.n	800669e <__swbuf_r+0x20>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	b943      	cbnz	r3, 80066b0 <__swbuf_r+0x32>
 800669e:	4621      	mov	r1, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 f82b 	bl	80066fc <__swsetup_r>
 80066a6:	b118      	cbz	r0, 80066b0 <__swbuf_r+0x32>
 80066a8:	f04f 37ff 	mov.w	r7, #4294967295
 80066ac:	4638      	mov	r0, r7
 80066ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	6922      	ldr	r2, [r4, #16]
 80066b4:	1a98      	subs	r0, r3, r2
 80066b6:	6963      	ldr	r3, [r4, #20]
 80066b8:	b2f6      	uxtb	r6, r6
 80066ba:	4283      	cmp	r3, r0
 80066bc:	4637      	mov	r7, r6
 80066be:	dc05      	bgt.n	80066cc <__swbuf_r+0x4e>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f002 fc2c 	bl	8008f20 <_fflush_r>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d1ed      	bne.n	80066a8 <__swbuf_r+0x2a>
 80066cc:	68a3      	ldr	r3, [r4, #8]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	60a3      	str	r3, [r4, #8]
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	701e      	strb	r6, [r3, #0]
 80066da:	6962      	ldr	r2, [r4, #20]
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	429a      	cmp	r2, r3
 80066e0:	d004      	beq.n	80066ec <__swbuf_r+0x6e>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	07db      	lsls	r3, r3, #31
 80066e6:	d5e1      	bpl.n	80066ac <__swbuf_r+0x2e>
 80066e8:	2e0a      	cmp	r6, #10
 80066ea:	d1df      	bne.n	80066ac <__swbuf_r+0x2e>
 80066ec:	4621      	mov	r1, r4
 80066ee:	4628      	mov	r0, r5
 80066f0:	f002 fc16 	bl	8008f20 <_fflush_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	d0d9      	beq.n	80066ac <__swbuf_r+0x2e>
 80066f8:	e7d6      	b.n	80066a8 <__swbuf_r+0x2a>
	...

080066fc <__swsetup_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <__swsetup_r+0xa8>)
 8006700:	4605      	mov	r5, r0
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	460c      	mov	r4, r1
 8006706:	b118      	cbz	r0, 8006710 <__swsetup_r+0x14>
 8006708:	6a03      	ldr	r3, [r0, #32]
 800670a:	b90b      	cbnz	r3, 8006710 <__swsetup_r+0x14>
 800670c:	f7ff ff1e 	bl	800654c <__sinit>
 8006710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006714:	0719      	lsls	r1, r3, #28
 8006716:	d422      	bmi.n	800675e <__swsetup_r+0x62>
 8006718:	06da      	lsls	r2, r3, #27
 800671a:	d407      	bmi.n	800672c <__swsetup_r+0x30>
 800671c:	2209      	movs	r2, #9
 800671e:	602a      	str	r2, [r5, #0]
 8006720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	f04f 30ff 	mov.w	r0, #4294967295
 800672a:	e033      	b.n	8006794 <__swsetup_r+0x98>
 800672c:	0758      	lsls	r0, r3, #29
 800672e:	d512      	bpl.n	8006756 <__swsetup_r+0x5a>
 8006730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006732:	b141      	cbz	r1, 8006746 <__swsetup_r+0x4a>
 8006734:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006738:	4299      	cmp	r1, r3
 800673a:	d002      	beq.n	8006742 <__swsetup_r+0x46>
 800673c:	4628      	mov	r0, r5
 800673e:	f000 ff4b 	bl	80075d8 <_free_r>
 8006742:	2300      	movs	r3, #0
 8006744:	6363      	str	r3, [r4, #52]	@ 0x34
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	2300      	movs	r3, #0
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f043 0308 	orr.w	r3, r3, #8
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	b94b      	cbnz	r3, 8006776 <__swsetup_r+0x7a>
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800676c:	d003      	beq.n	8006776 <__swsetup_r+0x7a>
 800676e:	4621      	mov	r1, r4
 8006770:	4628      	mov	r0, r5
 8006772:	f002 fc35 	bl	8008fe0 <__smakebuf_r>
 8006776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677a:	f013 0201 	ands.w	r2, r3, #1
 800677e:	d00a      	beq.n	8006796 <__swsetup_r+0x9a>
 8006780:	2200      	movs	r2, #0
 8006782:	60a2      	str	r2, [r4, #8]
 8006784:	6962      	ldr	r2, [r4, #20]
 8006786:	4252      	negs	r2, r2
 8006788:	61a2      	str	r2, [r4, #24]
 800678a:	6922      	ldr	r2, [r4, #16]
 800678c:	b942      	cbnz	r2, 80067a0 <__swsetup_r+0xa4>
 800678e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006792:	d1c5      	bne.n	8006720 <__swsetup_r+0x24>
 8006794:	bd38      	pop	{r3, r4, r5, pc}
 8006796:	0799      	lsls	r1, r3, #30
 8006798:	bf58      	it	pl
 800679a:	6962      	ldrpl	r2, [r4, #20]
 800679c:	60a2      	str	r2, [r4, #8]
 800679e:	e7f4      	b.n	800678a <__swsetup_r+0x8e>
 80067a0:	2000      	movs	r0, #0
 80067a2:	e7f7      	b.n	8006794 <__swsetup_r+0x98>
 80067a4:	20000194 	.word	0x20000194

080067a8 <memset>:
 80067a8:	4402      	add	r2, r0
 80067aa:	4603      	mov	r3, r0
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d100      	bne.n	80067b2 <memset+0xa>
 80067b0:	4770      	bx	lr
 80067b2:	f803 1b01 	strb.w	r1, [r3], #1
 80067b6:	e7f9      	b.n	80067ac <memset+0x4>

080067b8 <strncmp>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	b16a      	cbz	r2, 80067d8 <strncmp+0x20>
 80067bc:	3901      	subs	r1, #1
 80067be:	1884      	adds	r4, r0, r2
 80067c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d103      	bne.n	80067d4 <strncmp+0x1c>
 80067cc:	42a0      	cmp	r0, r4
 80067ce:	d001      	beq.n	80067d4 <strncmp+0x1c>
 80067d0:	2a00      	cmp	r2, #0
 80067d2:	d1f5      	bne.n	80067c0 <strncmp+0x8>
 80067d4:	1ad0      	subs	r0, r2, r3
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	4610      	mov	r0, r2
 80067da:	e7fc      	b.n	80067d6 <strncmp+0x1e>

080067dc <_localeconv_r>:
 80067dc:	4800      	ldr	r0, [pc, #0]	@ (80067e0 <_localeconv_r+0x4>)
 80067de:	4770      	bx	lr
 80067e0:	20000118 	.word	0x20000118

080067e4 <_close_r>:
 80067e4:	b538      	push	{r3, r4, r5, lr}
 80067e6:	4d06      	ldr	r5, [pc, #24]	@ (8006800 <_close_r+0x1c>)
 80067e8:	2300      	movs	r3, #0
 80067ea:	4604      	mov	r4, r0
 80067ec:	4608      	mov	r0, r1
 80067ee:	602b      	str	r3, [r5, #0]
 80067f0:	f7fb ff0b 	bl	800260a <_close>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_close_r+0x1a>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_close_r+0x1a>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	2000062c 	.word	0x2000062c

08006804 <_lseek_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	@ (8006824 <_lseek_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fb ff20 	bl	8002658 <_lseek>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_lseek_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_lseek_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	2000062c 	.word	0x2000062c

08006828 <_read_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d07      	ldr	r5, [pc, #28]	@ (8006848 <_read_r+0x20>)
 800682c:	4604      	mov	r4, r0
 800682e:	4608      	mov	r0, r1
 8006830:	4611      	mov	r1, r2
 8006832:	2200      	movs	r2, #0
 8006834:	602a      	str	r2, [r5, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f7fb feca 	bl	80025d0 <_read>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_read_r+0x1e>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_read_r+0x1e>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	2000062c 	.word	0x2000062c

0800684c <_write_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d07      	ldr	r5, [pc, #28]	@ (800686c <_write_r+0x20>)
 8006850:	4604      	mov	r4, r0
 8006852:	4608      	mov	r0, r1
 8006854:	4611      	mov	r1, r2
 8006856:	2200      	movs	r2, #0
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fb fbda 	bl	8002014 <_write>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_write_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_write_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	2000062c 	.word	0x2000062c

08006870 <__errno>:
 8006870:	4b01      	ldr	r3, [pc, #4]	@ (8006878 <__errno+0x8>)
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20000194 	.word	0x20000194

0800687c <__libc_init_array>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	4d0d      	ldr	r5, [pc, #52]	@ (80068b4 <__libc_init_array+0x38>)
 8006880:	4c0d      	ldr	r4, [pc, #52]	@ (80068b8 <__libc_init_array+0x3c>)
 8006882:	1b64      	subs	r4, r4, r5
 8006884:	10a4      	asrs	r4, r4, #2
 8006886:	2600      	movs	r6, #0
 8006888:	42a6      	cmp	r6, r4
 800688a:	d109      	bne.n	80068a0 <__libc_init_array+0x24>
 800688c:	4d0b      	ldr	r5, [pc, #44]	@ (80068bc <__libc_init_array+0x40>)
 800688e:	4c0c      	ldr	r4, [pc, #48]	@ (80068c0 <__libc_init_array+0x44>)
 8006890:	f002 fcc4 	bl	800921c <_init>
 8006894:	1b64      	subs	r4, r4, r5
 8006896:	10a4      	asrs	r4, r4, #2
 8006898:	2600      	movs	r6, #0
 800689a:	42a6      	cmp	r6, r4
 800689c:	d105      	bne.n	80068aa <__libc_init_array+0x2e>
 800689e:	bd70      	pop	{r4, r5, r6, pc}
 80068a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a4:	4798      	blx	r3
 80068a6:	3601      	adds	r6, #1
 80068a8:	e7ee      	b.n	8006888 <__libc_init_array+0xc>
 80068aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ae:	4798      	blx	r3
 80068b0:	3601      	adds	r6, #1
 80068b2:	e7f2      	b.n	800689a <__libc_init_array+0x1e>
 80068b4:	08009684 	.word	0x08009684
 80068b8:	08009684 	.word	0x08009684
 80068bc:	08009684 	.word	0x08009684
 80068c0:	08009688 	.word	0x08009688

080068c4 <__retarget_lock_init_recursive>:
 80068c4:	4770      	bx	lr

080068c6 <__retarget_lock_acquire_recursive>:
 80068c6:	4770      	bx	lr

080068c8 <__retarget_lock_release_recursive>:
 80068c8:	4770      	bx	lr

080068ca <memcpy>:
 80068ca:	440a      	add	r2, r1
 80068cc:	4291      	cmp	r1, r2
 80068ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80068d2:	d100      	bne.n	80068d6 <memcpy+0xc>
 80068d4:	4770      	bx	lr
 80068d6:	b510      	push	{r4, lr}
 80068d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e0:	4291      	cmp	r1, r2
 80068e2:	d1f9      	bne.n	80068d8 <memcpy+0xe>
 80068e4:	bd10      	pop	{r4, pc}
	...

080068e8 <nan>:
 80068e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80068f0 <nan+0x8>
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	00000000 	.word	0x00000000
 80068f4:	7ff80000 	.word	0x7ff80000

080068f8 <nanf>:
 80068f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006900 <nanf+0x8>
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	7fc00000 	.word	0x7fc00000

08006904 <__assert_func>:
 8006904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006906:	4614      	mov	r4, r2
 8006908:	461a      	mov	r2, r3
 800690a:	4b09      	ldr	r3, [pc, #36]	@ (8006930 <__assert_func+0x2c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4605      	mov	r5, r0
 8006910:	68d8      	ldr	r0, [r3, #12]
 8006912:	b954      	cbnz	r4, 800692a <__assert_func+0x26>
 8006914:	4b07      	ldr	r3, [pc, #28]	@ (8006934 <__assert_func+0x30>)
 8006916:	461c      	mov	r4, r3
 8006918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800691c:	9100      	str	r1, [sp, #0]
 800691e:	462b      	mov	r3, r5
 8006920:	4905      	ldr	r1, [pc, #20]	@ (8006938 <__assert_func+0x34>)
 8006922:	f002 fb25 	bl	8008f70 <fiprintf>
 8006926:	f002 fbe3 	bl	80090f0 <abort>
 800692a:	4b04      	ldr	r3, [pc, #16]	@ (800693c <__assert_func+0x38>)
 800692c:	e7f4      	b.n	8006918 <__assert_func+0x14>
 800692e:	bf00      	nop
 8006930:	20000194 	.word	0x20000194
 8006934:	08009324 	.word	0x08009324
 8006938:	080092f6 	.word	0x080092f6
 800693c:	080092e9 	.word	0x080092e9

08006940 <quorem>:
 8006940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	6903      	ldr	r3, [r0, #16]
 8006946:	690c      	ldr	r4, [r1, #16]
 8006948:	42a3      	cmp	r3, r4
 800694a:	4607      	mov	r7, r0
 800694c:	db7e      	blt.n	8006a4c <quorem+0x10c>
 800694e:	3c01      	subs	r4, #1
 8006950:	f101 0814 	add.w	r8, r1, #20
 8006954:	00a3      	lsls	r3, r4, #2
 8006956:	f100 0514 	add.w	r5, r0, #20
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800696a:	3301      	adds	r3, #1
 800696c:	429a      	cmp	r2, r3
 800696e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006972:	fbb2 f6f3 	udiv	r6, r2, r3
 8006976:	d32e      	bcc.n	80069d6 <quorem+0x96>
 8006978:	f04f 0a00 	mov.w	sl, #0
 800697c:	46c4      	mov	ip, r8
 800697e:	46ae      	mov	lr, r5
 8006980:	46d3      	mov	fp, sl
 8006982:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006986:	b298      	uxth	r0, r3
 8006988:	fb06 a000 	mla	r0, r6, r0, sl
 800698c:	0c02      	lsrs	r2, r0, #16
 800698e:	0c1b      	lsrs	r3, r3, #16
 8006990:	fb06 2303 	mla	r3, r6, r3, r2
 8006994:	f8de 2000 	ldr.w	r2, [lr]
 8006998:	b280      	uxth	r0, r0
 800699a:	b292      	uxth	r2, r2
 800699c:	1a12      	subs	r2, r2, r0
 800699e:	445a      	add	r2, fp
 80069a0:	f8de 0000 	ldr.w	r0, [lr]
 80069a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80069ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80069b2:	b292      	uxth	r2, r2
 80069b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069b8:	45e1      	cmp	r9, ip
 80069ba:	f84e 2b04 	str.w	r2, [lr], #4
 80069be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80069c2:	d2de      	bcs.n	8006982 <quorem+0x42>
 80069c4:	9b00      	ldr	r3, [sp, #0]
 80069c6:	58eb      	ldr	r3, [r5, r3]
 80069c8:	b92b      	cbnz	r3, 80069d6 <quorem+0x96>
 80069ca:	9b01      	ldr	r3, [sp, #4]
 80069cc:	3b04      	subs	r3, #4
 80069ce:	429d      	cmp	r5, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	d32f      	bcc.n	8006a34 <quorem+0xf4>
 80069d4:	613c      	str	r4, [r7, #16]
 80069d6:	4638      	mov	r0, r7
 80069d8:	f001 fd0e 	bl	80083f8 <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	db25      	blt.n	8006a2c <quorem+0xec>
 80069e0:	4629      	mov	r1, r5
 80069e2:	2000      	movs	r0, #0
 80069e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80069e8:	f8d1 c000 	ldr.w	ip, [r1]
 80069ec:	fa1f fe82 	uxth.w	lr, r2
 80069f0:	fa1f f38c 	uxth.w	r3, ip
 80069f4:	eba3 030e 	sub.w	r3, r3, lr
 80069f8:	4403      	add	r3, r0
 80069fa:	0c12      	lsrs	r2, r2, #16
 80069fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a0a:	45c1      	cmp	r9, r8
 8006a0c:	f841 3b04 	str.w	r3, [r1], #4
 8006a10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006a14:	d2e6      	bcs.n	80069e4 <quorem+0xa4>
 8006a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a1e:	b922      	cbnz	r2, 8006a2a <quorem+0xea>
 8006a20:	3b04      	subs	r3, #4
 8006a22:	429d      	cmp	r5, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	d30b      	bcc.n	8006a40 <quorem+0x100>
 8006a28:	613c      	str	r4, [r7, #16]
 8006a2a:	3601      	adds	r6, #1
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	b003      	add	sp, #12
 8006a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	3b04      	subs	r3, #4
 8006a38:	2a00      	cmp	r2, #0
 8006a3a:	d1cb      	bne.n	80069d4 <quorem+0x94>
 8006a3c:	3c01      	subs	r4, #1
 8006a3e:	e7c6      	b.n	80069ce <quorem+0x8e>
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	3b04      	subs	r3, #4
 8006a44:	2a00      	cmp	r2, #0
 8006a46:	d1ef      	bne.n	8006a28 <quorem+0xe8>
 8006a48:	3c01      	subs	r4, #1
 8006a4a:	e7ea      	b.n	8006a22 <quorem+0xe2>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e7ee      	b.n	8006a2e <quorem+0xee>

08006a50 <_dtoa_r>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	69c7      	ldr	r7, [r0, #28]
 8006a56:	b099      	sub	sp, #100	@ 0x64
 8006a58:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a5c:	ec55 4b10 	vmov	r4, r5, d0
 8006a60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a62:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a64:	4683      	mov	fp, r0
 8006a66:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a6a:	b97f      	cbnz	r7, 8006a8c <_dtoa_r+0x3c>
 8006a6c:	2010      	movs	r0, #16
 8006a6e:	f001 f937 	bl	8007ce0 <malloc>
 8006a72:	4602      	mov	r2, r0
 8006a74:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a78:	b920      	cbnz	r0, 8006a84 <_dtoa_r+0x34>
 8006a7a:	4ba7      	ldr	r3, [pc, #668]	@ (8006d18 <_dtoa_r+0x2c8>)
 8006a7c:	21ef      	movs	r1, #239	@ 0xef
 8006a7e:	48a7      	ldr	r0, [pc, #668]	@ (8006d1c <_dtoa_r+0x2cc>)
 8006a80:	f7ff ff40 	bl	8006904 <__assert_func>
 8006a84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a88:	6007      	str	r7, [r0, #0]
 8006a8a:	60c7      	str	r7, [r0, #12]
 8006a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a90:	6819      	ldr	r1, [r3, #0]
 8006a92:	b159      	cbz	r1, 8006aac <_dtoa_r+0x5c>
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	604a      	str	r2, [r1, #4]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4093      	lsls	r3, r2
 8006a9c:	608b      	str	r3, [r1, #8]
 8006a9e:	4658      	mov	r0, fp
 8006aa0:	f001 fa26 	bl	8007ef0 <_Bfree>
 8006aa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	1e2b      	subs	r3, r5, #0
 8006aae:	bfb9      	ittee	lt
 8006ab0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ab4:	9303      	strlt	r3, [sp, #12]
 8006ab6:	2300      	movge	r3, #0
 8006ab8:	6033      	strge	r3, [r6, #0]
 8006aba:	9f03      	ldr	r7, [sp, #12]
 8006abc:	4b98      	ldr	r3, [pc, #608]	@ (8006d20 <_dtoa_r+0x2d0>)
 8006abe:	bfbc      	itt	lt
 8006ac0:	2201      	movlt	r2, #1
 8006ac2:	6032      	strlt	r2, [r6, #0]
 8006ac4:	43bb      	bics	r3, r7
 8006ac6:	d112      	bne.n	8006aee <_dtoa_r+0x9e>
 8006ac8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006aca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ace:	6013      	str	r3, [r2, #0]
 8006ad0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ad4:	4323      	orrs	r3, r4
 8006ad6:	f000 854d 	beq.w	8007574 <_dtoa_r+0xb24>
 8006ada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006adc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006d34 <_dtoa_r+0x2e4>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 854f 	beq.w	8007584 <_dtoa_r+0xb34>
 8006ae6:	f10a 0303 	add.w	r3, sl, #3
 8006aea:	f000 bd49 	b.w	8007580 <_dtoa_r+0xb30>
 8006aee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	ec51 0b17 	vmov	r0, r1, d7
 8006af8:	2300      	movs	r3, #0
 8006afa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006afe:	f7f9 ffe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b02:	4680      	mov	r8, r0
 8006b04:	b158      	cbz	r0, 8006b1e <_dtoa_r+0xce>
 8006b06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b0e:	b113      	cbz	r3, 8006b16 <_dtoa_r+0xc6>
 8006b10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006b12:	4b84      	ldr	r3, [pc, #528]	@ (8006d24 <_dtoa_r+0x2d4>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d38 <_dtoa_r+0x2e8>
 8006b1a:	f000 bd33 	b.w	8007584 <_dtoa_r+0xb34>
 8006b1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006b22:	aa16      	add	r2, sp, #88	@ 0x58
 8006b24:	a917      	add	r1, sp, #92	@ 0x5c
 8006b26:	4658      	mov	r0, fp
 8006b28:	f001 fd86 	bl	8008638 <__d2b>
 8006b2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006b30:	4681      	mov	r9, r0
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	d077      	beq.n	8006c26 <_dtoa_r+0x1d6>
 8006b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b50:	4619      	mov	r1, r3
 8006b52:	2200      	movs	r2, #0
 8006b54:	4b74      	ldr	r3, [pc, #464]	@ (8006d28 <_dtoa_r+0x2d8>)
 8006b56:	f7f9 fb97 	bl	8000288 <__aeabi_dsub>
 8006b5a:	a369      	add	r3, pc, #420	@ (adr r3, 8006d00 <_dtoa_r+0x2b0>)
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f7f9 fd4a 	bl	80005f8 <__aeabi_dmul>
 8006b64:	a368      	add	r3, pc, #416	@ (adr r3, 8006d08 <_dtoa_r+0x2b8>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f7f9 fb8f 	bl	800028c <__adddf3>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4630      	mov	r0, r6
 8006b72:	460d      	mov	r5, r1
 8006b74:	f7f9 fcd6 	bl	8000524 <__aeabi_i2d>
 8006b78:	a365      	add	r3, pc, #404	@ (adr r3, 8006d10 <_dtoa_r+0x2c0>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fd3b 	bl	80005f8 <__aeabi_dmul>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	f7f9 fb7f 	bl	800028c <__adddf3>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	f7f9 ffe1 	bl	8000b58 <__aeabi_d2iz>
 8006b96:	2200      	movs	r2, #0
 8006b98:	4607      	mov	r7, r0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8006ba4:	b140      	cbz	r0, 8006bb8 <_dtoa_r+0x168>
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	f7f9 fcbc 	bl	8000524 <__aeabi_i2d>
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	f7f9 ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb4:	b900      	cbnz	r0, 8006bb8 <_dtoa_r+0x168>
 8006bb6:	3f01      	subs	r7, #1
 8006bb8:	2f16      	cmp	r7, #22
 8006bba:	d851      	bhi.n	8006c60 <_dtoa_r+0x210>
 8006bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8006d2c <_dtoa_r+0x2dc>)
 8006bbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bca:	f7f9 ff87 	bl	8000adc <__aeabi_dcmplt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d048      	beq.n	8006c64 <_dtoa_r+0x214>
 8006bd2:	3f01      	subs	r7, #1
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006bd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006bda:	1b9b      	subs	r3, r3, r6
 8006bdc:	1e5a      	subs	r2, r3, #1
 8006bde:	bf44      	itt	mi
 8006be0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006be4:	2300      	movmi	r3, #0
 8006be6:	9208      	str	r2, [sp, #32]
 8006be8:	bf54      	ite	pl
 8006bea:	f04f 0800 	movpl.w	r8, #0
 8006bee:	9308      	strmi	r3, [sp, #32]
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	db39      	blt.n	8006c68 <_dtoa_r+0x218>
 8006bf4:	9b08      	ldr	r3, [sp, #32]
 8006bf6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006bf8:	443b      	add	r3, r7
 8006bfa:	9308      	str	r3, [sp, #32]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	d864      	bhi.n	8006cd0 <_dtoa_r+0x280>
 8006c06:	2b05      	cmp	r3, #5
 8006c08:	bfc4      	itt	gt
 8006c0a:	3b04      	subgt	r3, #4
 8006c0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c10:	f1a3 0302 	sub.w	r3, r3, #2
 8006c14:	bfcc      	ite	gt
 8006c16:	2400      	movgt	r4, #0
 8006c18:	2401      	movle	r4, #1
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d863      	bhi.n	8006ce6 <_dtoa_r+0x296>
 8006c1e:	e8df f003 	tbb	[pc, r3]
 8006c22:	372a      	.short	0x372a
 8006c24:	5535      	.short	0x5535
 8006c26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006c2a:	441e      	add	r6, r3
 8006c2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	bfc1      	itttt	gt
 8006c34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c38:	409f      	lslgt	r7, r3
 8006c3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c42:	bfd6      	itet	le
 8006c44:	f1c3 0320 	rsble	r3, r3, #32
 8006c48:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c4c:	fa04 f003 	lslle.w	r0, r4, r3
 8006c50:	f7f9 fc58 	bl	8000504 <__aeabi_ui2d>
 8006c54:	2201      	movs	r2, #1
 8006c56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c5a:	3e01      	subs	r6, #1
 8006c5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c5e:	e777      	b.n	8006b50 <_dtoa_r+0x100>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7b8      	b.n	8006bd6 <_dtoa_r+0x186>
 8006c64:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c66:	e7b7      	b.n	8006bd8 <_dtoa_r+0x188>
 8006c68:	427b      	negs	r3, r7
 8006c6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	eba8 0807 	sub.w	r8, r8, r7
 8006c72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c74:	e7c4      	b.n	8006c00 <_dtoa_r+0x1b0>
 8006c76:	2300      	movs	r3, #0
 8006c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dc35      	bgt.n	8006cec <_dtoa_r+0x29c>
 8006c80:	2301      	movs	r3, #1
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	9307      	str	r3, [sp, #28]
 8006c86:	461a      	mov	r2, r3
 8006c88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c8a:	e00b      	b.n	8006ca4 <_dtoa_r+0x254>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e7f3      	b.n	8006c78 <_dtoa_r+0x228>
 8006c90:	2300      	movs	r3, #0
 8006c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	bfb8      	it	lt
 8006ca2:	2301      	movlt	r3, #1
 8006ca4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	2204      	movs	r2, #4
 8006cac:	f102 0514 	add.w	r5, r2, #20
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	d91f      	bls.n	8006cf4 <_dtoa_r+0x2a4>
 8006cb4:	6041      	str	r1, [r0, #4]
 8006cb6:	4658      	mov	r0, fp
 8006cb8:	f001 f8da 	bl	8007e70 <_Balloc>
 8006cbc:	4682      	mov	sl, r0
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d13c      	bne.n	8006d3c <_dtoa_r+0x2ec>
 8006cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <_dtoa_r+0x2e0>)
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006cca:	e6d8      	b.n	8006a7e <_dtoa_r+0x2e>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e7e0      	b.n	8006c92 <_dtoa_r+0x242>
 8006cd0:	2401      	movs	r4, #1
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2312      	movs	r3, #18
 8006ce4:	e7d0      	b.n	8006c88 <_dtoa_r+0x238>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cea:	e7f5      	b.n	8006cd8 <_dtoa_r+0x288>
 8006cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	9307      	str	r3, [sp, #28]
 8006cf2:	e7d7      	b.n	8006ca4 <_dtoa_r+0x254>
 8006cf4:	3101      	adds	r1, #1
 8006cf6:	0052      	lsls	r2, r2, #1
 8006cf8:	e7d8      	b.n	8006cac <_dtoa_r+0x25c>
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w
 8006d00:	636f4361 	.word	0x636f4361
 8006d04:	3fd287a7 	.word	0x3fd287a7
 8006d08:	8b60c8b3 	.word	0x8b60c8b3
 8006d0c:	3fc68a28 	.word	0x3fc68a28
 8006d10:	509f79fb 	.word	0x509f79fb
 8006d14:	3fd34413 	.word	0x3fd34413
 8006d18:	08009332 	.word	0x08009332
 8006d1c:	08009349 	.word	0x08009349
 8006d20:	7ff00000 	.word	0x7ff00000
 8006d24:	080092b9 	.word	0x080092b9
 8006d28:	3ff80000 	.word	0x3ff80000
 8006d2c:	080094a0 	.word	0x080094a0
 8006d30:	080093a1 	.word	0x080093a1
 8006d34:	0800932e 	.word	0x0800932e
 8006d38:	080092b8 	.word	0x080092b8
 8006d3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d40:	6018      	str	r0, [r3, #0]
 8006d42:	9b07      	ldr	r3, [sp, #28]
 8006d44:	2b0e      	cmp	r3, #14
 8006d46:	f200 80a4 	bhi.w	8006e92 <_dtoa_r+0x442>
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	f000 80a1 	beq.w	8006e92 <_dtoa_r+0x442>
 8006d50:	2f00      	cmp	r7, #0
 8006d52:	dd33      	ble.n	8006dbc <_dtoa_r+0x36c>
 8006d54:	4bad      	ldr	r3, [pc, #692]	@ (800700c <_dtoa_r+0x5bc>)
 8006d56:	f007 020f 	and.w	r2, r7, #15
 8006d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d5e:	ed93 7b00 	vldr	d7, [r3]
 8006d62:	05f8      	lsls	r0, r7, #23
 8006d64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d6c:	d516      	bpl.n	8006d9c <_dtoa_r+0x34c>
 8006d6e:	4ba8      	ldr	r3, [pc, #672]	@ (8007010 <_dtoa_r+0x5c0>)
 8006d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d78:	f7f9 fd68 	bl	800084c <__aeabi_ddiv>
 8006d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d80:	f004 040f 	and.w	r4, r4, #15
 8006d84:	2603      	movs	r6, #3
 8006d86:	4da2      	ldr	r5, [pc, #648]	@ (8007010 <_dtoa_r+0x5c0>)
 8006d88:	b954      	cbnz	r4, 8006da0 <_dtoa_r+0x350>
 8006d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d92:	f7f9 fd5b 	bl	800084c <__aeabi_ddiv>
 8006d96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9a:	e028      	b.n	8006dee <_dtoa_r+0x39e>
 8006d9c:	2602      	movs	r6, #2
 8006d9e:	e7f2      	b.n	8006d86 <_dtoa_r+0x336>
 8006da0:	07e1      	lsls	r1, r4, #31
 8006da2:	d508      	bpl.n	8006db6 <_dtoa_r+0x366>
 8006da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dac:	f7f9 fc24 	bl	80005f8 <__aeabi_dmul>
 8006db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006db4:	3601      	adds	r6, #1
 8006db6:	1064      	asrs	r4, r4, #1
 8006db8:	3508      	adds	r5, #8
 8006dba:	e7e5      	b.n	8006d88 <_dtoa_r+0x338>
 8006dbc:	f000 80d2 	beq.w	8006f64 <_dtoa_r+0x514>
 8006dc0:	427c      	negs	r4, r7
 8006dc2:	4b92      	ldr	r3, [pc, #584]	@ (800700c <_dtoa_r+0x5bc>)
 8006dc4:	4d92      	ldr	r5, [pc, #584]	@ (8007010 <_dtoa_r+0x5c0>)
 8006dc6:	f004 020f 	and.w	r2, r4, #15
 8006dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dd6:	f7f9 fc0f 	bl	80005f8 <__aeabi_dmul>
 8006dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dde:	1124      	asrs	r4, r4, #4
 8006de0:	2300      	movs	r3, #0
 8006de2:	2602      	movs	r6, #2
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	f040 80b2 	bne.w	8006f4e <_dtoa_r+0x4fe>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d3      	bne.n	8006d96 <_dtoa_r+0x346>
 8006dee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006df0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80b7 	beq.w	8006f68 <_dtoa_r+0x518>
 8006dfa:	4b86      	ldr	r3, [pc, #536]	@ (8007014 <_dtoa_r+0x5c4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4620      	mov	r0, r4
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7f9 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f000 80ae 	beq.w	8006f68 <_dtoa_r+0x518>
 8006e0c:	9b07      	ldr	r3, [sp, #28]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 80aa 	beq.w	8006f68 <_dtoa_r+0x518>
 8006e14:	9b00      	ldr	r3, [sp, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	dd37      	ble.n	8006e8a <_dtoa_r+0x43a>
 8006e1a:	1e7b      	subs	r3, r7, #1
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4b7d      	ldr	r3, [pc, #500]	@ (8007018 <_dtoa_r+0x5c8>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	4629      	mov	r1, r5
 8006e26:	f7f9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8006e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e2e:	9c00      	ldr	r4, [sp, #0]
 8006e30:	3601      	adds	r6, #1
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7f9 fb76 	bl	8000524 <__aeabi_i2d>
 8006e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e3c:	f7f9 fbdc 	bl	80005f8 <__aeabi_dmul>
 8006e40:	4b76      	ldr	r3, [pc, #472]	@ (800701c <_dtoa_r+0x5cc>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	f7f9 fa22 	bl	800028c <__adddf3>
 8006e48:	4605      	mov	r5, r0
 8006e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	f040 808d 	bne.w	8006f6e <_dtoa_r+0x51e>
 8006e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e58:	4b71      	ldr	r3, [pc, #452]	@ (8007020 <_dtoa_r+0x5d0>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f7f9 fa14 	bl	8000288 <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e68:	462a      	mov	r2, r5
 8006e6a:	4633      	mov	r3, r6
 8006e6c:	f7f9 fe54 	bl	8000b18 <__aeabi_dcmpgt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	f040 828b 	bne.w	800738c <_dtoa_r+0x93c>
 8006e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e80:	f7f9 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 8128 	bne.w	80070da <_dtoa_r+0x68a>
 8006e8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f2c0 815a 	blt.w	800714e <_dtoa_r+0x6fe>
 8006e9a:	2f0e      	cmp	r7, #14
 8006e9c:	f300 8157 	bgt.w	800714e <_dtoa_r+0x6fe>
 8006ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800700c <_dtoa_r+0x5bc>)
 8006ea2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ea6:	ed93 7b00 	vldr	d7, [r3]
 8006eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	ed8d 7b00 	vstr	d7, [sp]
 8006eb2:	da03      	bge.n	8006ebc <_dtoa_r+0x46c>
 8006eb4:	9b07      	ldr	r3, [sp, #28]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f340 8101 	ble.w	80070be <_dtoa_r+0x66e>
 8006ebc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ec0:	4656      	mov	r6, sl
 8006ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 fcbf 	bl	800084c <__aeabi_ddiv>
 8006ece:	f7f9 fe43 	bl	8000b58 <__aeabi_d2iz>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	f7f9 fb26 	bl	8000524 <__aeabi_i2d>
 8006ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006edc:	f7f9 fb8c 	bl	80005f8 <__aeabi_dmul>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006eec:	f7f9 f9cc 	bl	8000288 <__aeabi_dsub>
 8006ef0:	f806 4b01 	strb.w	r4, [r6], #1
 8006ef4:	9d07      	ldr	r5, [sp, #28]
 8006ef6:	eba6 040a 	sub.w	r4, r6, sl
 8006efa:	42a5      	cmp	r5, r4
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	f040 8117 	bne.w	8007132 <_dtoa_r+0x6e2>
 8006f04:	f7f9 f9c2 	bl	800028c <__adddf3>
 8006f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	460d      	mov	r5, r1
 8006f10:	f7f9 fe02 	bl	8000b18 <__aeabi_dcmpgt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f040 80f9 	bne.w	800710c <_dtoa_r+0x6bc>
 8006f1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7f9 fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f26:	b118      	cbz	r0, 8006f30 <_dtoa_r+0x4e0>
 8006f28:	f018 0f01 	tst.w	r8, #1
 8006f2c:	f040 80ee 	bne.w	800710c <_dtoa_r+0x6bc>
 8006f30:	4649      	mov	r1, r9
 8006f32:	4658      	mov	r0, fp
 8006f34:	f000 ffdc 	bl	8007ef0 <_Bfree>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	7033      	strb	r3, [r6, #0]
 8006f3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f3e:	3701      	adds	r7, #1
 8006f40:	601f      	str	r7, [r3, #0]
 8006f42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 831d 	beq.w	8007584 <_dtoa_r+0xb34>
 8006f4a:	601e      	str	r6, [r3, #0]
 8006f4c:	e31a      	b.n	8007584 <_dtoa_r+0xb34>
 8006f4e:	07e2      	lsls	r2, r4, #31
 8006f50:	d505      	bpl.n	8006f5e <_dtoa_r+0x50e>
 8006f52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	3601      	adds	r6, #1
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	1064      	asrs	r4, r4, #1
 8006f60:	3508      	adds	r5, #8
 8006f62:	e73f      	b.n	8006de4 <_dtoa_r+0x394>
 8006f64:	2602      	movs	r6, #2
 8006f66:	e742      	b.n	8006dee <_dtoa_r+0x39e>
 8006f68:	9c07      	ldr	r4, [sp, #28]
 8006f6a:	9704      	str	r7, [sp, #16]
 8006f6c:	e761      	b.n	8006e32 <_dtoa_r+0x3e2>
 8006f6e:	4b27      	ldr	r3, [pc, #156]	@ (800700c <_dtoa_r+0x5bc>)
 8006f70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f7a:	4454      	add	r4, sl
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d053      	beq.n	8007028 <_dtoa_r+0x5d8>
 8006f80:	4928      	ldr	r1, [pc, #160]	@ (8007024 <_dtoa_r+0x5d4>)
 8006f82:	2000      	movs	r0, #0
 8006f84:	f7f9 fc62 	bl	800084c <__aeabi_ddiv>
 8006f88:	4633      	mov	r3, r6
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	f7f9 f97c 	bl	8000288 <__aeabi_dsub>
 8006f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f94:	4656      	mov	r6, sl
 8006f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f9a:	f7f9 fddd 	bl	8000b58 <__aeabi_d2iz>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	f7f9 fac0 	bl	8000524 <__aeabi_i2d>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fac:	f7f9 f96c 	bl	8000288 <__aeabi_dsub>
 8006fb0:	3530      	adds	r5, #48	@ 0x30
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fba:	f806 5b01 	strb.w	r5, [r6], #1
 8006fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fc2:	f7f9 fd8b 	bl	8000adc <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d171      	bne.n	80070ae <_dtoa_r+0x65e>
 8006fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fce:	4911      	ldr	r1, [pc, #68]	@ (8007014 <_dtoa_r+0x5c4>)
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7f9 f959 	bl	8000288 <__aeabi_dsub>
 8006fd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fda:	f7f9 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8095 	bne.w	800710e <_dtoa_r+0x6be>
 8006fe4:	42a6      	cmp	r6, r4
 8006fe6:	f43f af50 	beq.w	8006e8a <_dtoa_r+0x43a>
 8006fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fee:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <_dtoa_r+0x5c8>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f7f9 fb01 	bl	80005f8 <__aeabi_dmul>
 8006ff6:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <_dtoa_r+0x5c8>)
 8006ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007002:	f7f9 faf9 	bl	80005f8 <__aeabi_dmul>
 8007006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800700a:	e7c4      	b.n	8006f96 <_dtoa_r+0x546>
 800700c:	080094a0 	.word	0x080094a0
 8007010:	08009478 	.word	0x08009478
 8007014:	3ff00000 	.word	0x3ff00000
 8007018:	40240000 	.word	0x40240000
 800701c:	401c0000 	.word	0x401c0000
 8007020:	40140000 	.word	0x40140000
 8007024:	3fe00000 	.word	0x3fe00000
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	f7f9 fae4 	bl	80005f8 <__aeabi_dmul>
 8007030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007034:	9415      	str	r4, [sp, #84]	@ 0x54
 8007036:	4656      	mov	r6, sl
 8007038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703c:	f7f9 fd8c 	bl	8000b58 <__aeabi_d2iz>
 8007040:	4605      	mov	r5, r0
 8007042:	f7f9 fa6f 	bl	8000524 <__aeabi_i2d>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704e:	f7f9 f91b 	bl	8000288 <__aeabi_dsub>
 8007052:	3530      	adds	r5, #48	@ 0x30
 8007054:	f806 5b01 	strb.w	r5, [r6], #1
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	42a6      	cmp	r6, r4
 800705e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	d124      	bne.n	80070b2 <_dtoa_r+0x662>
 8007068:	4bac      	ldr	r3, [pc, #688]	@ (800731c <_dtoa_r+0x8cc>)
 800706a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800706e:	f7f9 f90d 	bl	800028c <__adddf3>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800707a:	f7f9 fd4d 	bl	8000b18 <__aeabi_dcmpgt>
 800707e:	2800      	cmp	r0, #0
 8007080:	d145      	bne.n	800710e <_dtoa_r+0x6be>
 8007082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007086:	49a5      	ldr	r1, [pc, #660]	@ (800731c <_dtoa_r+0x8cc>)
 8007088:	2000      	movs	r0, #0
 800708a:	f7f9 f8fd 	bl	8000288 <__aeabi_dsub>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007096:	f7f9 fd21 	bl	8000adc <__aeabi_dcmplt>
 800709a:	2800      	cmp	r0, #0
 800709c:	f43f aef5 	beq.w	8006e8a <_dtoa_r+0x43a>
 80070a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80070a2:	1e73      	subs	r3, r6, #1
 80070a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80070a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070aa:	2b30      	cmp	r3, #48	@ 0x30
 80070ac:	d0f8      	beq.n	80070a0 <_dtoa_r+0x650>
 80070ae:	9f04      	ldr	r7, [sp, #16]
 80070b0:	e73e      	b.n	8006f30 <_dtoa_r+0x4e0>
 80070b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007320 <_dtoa_r+0x8d0>)
 80070b4:	f7f9 faa0 	bl	80005f8 <__aeabi_dmul>
 80070b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070bc:	e7bc      	b.n	8007038 <_dtoa_r+0x5e8>
 80070be:	d10c      	bne.n	80070da <_dtoa_r+0x68a>
 80070c0:	4b98      	ldr	r3, [pc, #608]	@ (8007324 <_dtoa_r+0x8d4>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070c8:	f7f9 fa96 	bl	80005f8 <__aeabi_dmul>
 80070cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070d0:	f7f9 fd18 	bl	8000b04 <__aeabi_dcmpge>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f000 8157 	beq.w	8007388 <_dtoa_r+0x938>
 80070da:	2400      	movs	r4, #0
 80070dc:	4625      	mov	r5, r4
 80070de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e0:	43db      	mvns	r3, r3
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	4656      	mov	r6, sl
 80070e6:	2700      	movs	r7, #0
 80070e8:	4621      	mov	r1, r4
 80070ea:	4658      	mov	r0, fp
 80070ec:	f000 ff00 	bl	8007ef0 <_Bfree>
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	d0dc      	beq.n	80070ae <_dtoa_r+0x65e>
 80070f4:	b12f      	cbz	r7, 8007102 <_dtoa_r+0x6b2>
 80070f6:	42af      	cmp	r7, r5
 80070f8:	d003      	beq.n	8007102 <_dtoa_r+0x6b2>
 80070fa:	4639      	mov	r1, r7
 80070fc:	4658      	mov	r0, fp
 80070fe:	f000 fef7 	bl	8007ef0 <_Bfree>
 8007102:	4629      	mov	r1, r5
 8007104:	4658      	mov	r0, fp
 8007106:	f000 fef3 	bl	8007ef0 <_Bfree>
 800710a:	e7d0      	b.n	80070ae <_dtoa_r+0x65e>
 800710c:	9704      	str	r7, [sp, #16]
 800710e:	4633      	mov	r3, r6
 8007110:	461e      	mov	r6, r3
 8007112:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007116:	2a39      	cmp	r2, #57	@ 0x39
 8007118:	d107      	bne.n	800712a <_dtoa_r+0x6da>
 800711a:	459a      	cmp	sl, r3
 800711c:	d1f8      	bne.n	8007110 <_dtoa_r+0x6c0>
 800711e:	9a04      	ldr	r2, [sp, #16]
 8007120:	3201      	adds	r2, #1
 8007122:	9204      	str	r2, [sp, #16]
 8007124:	2230      	movs	r2, #48	@ 0x30
 8007126:	f88a 2000 	strb.w	r2, [sl]
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	3201      	adds	r2, #1
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	e7bd      	b.n	80070ae <_dtoa_r+0x65e>
 8007132:	4b7b      	ldr	r3, [pc, #492]	@ (8007320 <_dtoa_r+0x8d0>)
 8007134:	2200      	movs	r2, #0
 8007136:	f7f9 fa5f 	bl	80005f8 <__aeabi_dmul>
 800713a:	2200      	movs	r2, #0
 800713c:	2300      	movs	r3, #0
 800713e:	4604      	mov	r4, r0
 8007140:	460d      	mov	r5, r1
 8007142:	f7f9 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f aebb 	beq.w	8006ec2 <_dtoa_r+0x472>
 800714c:	e6f0      	b.n	8006f30 <_dtoa_r+0x4e0>
 800714e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007150:	2a00      	cmp	r2, #0
 8007152:	f000 80db 	beq.w	800730c <_dtoa_r+0x8bc>
 8007156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007158:	2a01      	cmp	r2, #1
 800715a:	f300 80bf 	bgt.w	80072dc <_dtoa_r+0x88c>
 800715e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007160:	2a00      	cmp	r2, #0
 8007162:	f000 80b7 	beq.w	80072d4 <_dtoa_r+0x884>
 8007166:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800716a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800716c:	4646      	mov	r6, r8
 800716e:	9a08      	ldr	r2, [sp, #32]
 8007170:	2101      	movs	r1, #1
 8007172:	441a      	add	r2, r3
 8007174:	4658      	mov	r0, fp
 8007176:	4498      	add	r8, r3
 8007178:	9208      	str	r2, [sp, #32]
 800717a:	f000 ffb7 	bl	80080ec <__i2b>
 800717e:	4605      	mov	r5, r0
 8007180:	b15e      	cbz	r6, 800719a <_dtoa_r+0x74a>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dd08      	ble.n	800719a <_dtoa_r+0x74a>
 8007188:	42b3      	cmp	r3, r6
 800718a:	9a08      	ldr	r2, [sp, #32]
 800718c:	bfa8      	it	ge
 800718e:	4633      	movge	r3, r6
 8007190:	eba8 0803 	sub.w	r8, r8, r3
 8007194:	1af6      	subs	r6, r6, r3
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	9308      	str	r3, [sp, #32]
 800719a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800719c:	b1f3      	cbz	r3, 80071dc <_dtoa_r+0x78c>
 800719e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 80b7 	beq.w	8007314 <_dtoa_r+0x8c4>
 80071a6:	b18c      	cbz	r4, 80071cc <_dtoa_r+0x77c>
 80071a8:	4629      	mov	r1, r5
 80071aa:	4622      	mov	r2, r4
 80071ac:	4658      	mov	r0, fp
 80071ae:	f001 f85d 	bl	800826c <__pow5mult>
 80071b2:	464a      	mov	r2, r9
 80071b4:	4601      	mov	r1, r0
 80071b6:	4605      	mov	r5, r0
 80071b8:	4658      	mov	r0, fp
 80071ba:	f000 ffad 	bl	8008118 <__multiply>
 80071be:	4649      	mov	r1, r9
 80071c0:	9004      	str	r0, [sp, #16]
 80071c2:	4658      	mov	r0, fp
 80071c4:	f000 fe94 	bl	8007ef0 <_Bfree>
 80071c8:	9b04      	ldr	r3, [sp, #16]
 80071ca:	4699      	mov	r9, r3
 80071cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ce:	1b1a      	subs	r2, r3, r4
 80071d0:	d004      	beq.n	80071dc <_dtoa_r+0x78c>
 80071d2:	4649      	mov	r1, r9
 80071d4:	4658      	mov	r0, fp
 80071d6:	f001 f849 	bl	800826c <__pow5mult>
 80071da:	4681      	mov	r9, r0
 80071dc:	2101      	movs	r1, #1
 80071de:	4658      	mov	r0, fp
 80071e0:	f000 ff84 	bl	80080ec <__i2b>
 80071e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e6:	4604      	mov	r4, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 81cf 	beq.w	800758c <_dtoa_r+0xb3c>
 80071ee:	461a      	mov	r2, r3
 80071f0:	4601      	mov	r1, r0
 80071f2:	4658      	mov	r0, fp
 80071f4:	f001 f83a 	bl	800826c <__pow5mult>
 80071f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	4604      	mov	r4, r0
 80071fe:	f300 8095 	bgt.w	800732c <_dtoa_r+0x8dc>
 8007202:	9b02      	ldr	r3, [sp, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 8087 	bne.w	8007318 <_dtoa_r+0x8c8>
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007210:	2b00      	cmp	r3, #0
 8007212:	f040 8089 	bne.w	8007328 <_dtoa_r+0x8d8>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	0d1b      	lsrs	r3, r3, #20
 800721e:	051b      	lsls	r3, r3, #20
 8007220:	b12b      	cbz	r3, 800722e <_dtoa_r+0x7de>
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	3301      	adds	r3, #1
 8007226:	9308      	str	r3, [sp, #32]
 8007228:	f108 0801 	add.w	r8, r8, #1
 800722c:	2301      	movs	r3, #1
 800722e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 81b0 	beq.w	8007598 <_dtoa_r+0xb48>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800723e:	6918      	ldr	r0, [r3, #16]
 8007240:	f000 ff08 	bl	8008054 <__hi0bits>
 8007244:	f1c0 0020 	rsb	r0, r0, #32
 8007248:	9b08      	ldr	r3, [sp, #32]
 800724a:	4418      	add	r0, r3
 800724c:	f010 001f 	ands.w	r0, r0, #31
 8007250:	d077      	beq.n	8007342 <_dtoa_r+0x8f2>
 8007252:	f1c0 0320 	rsb	r3, r0, #32
 8007256:	2b04      	cmp	r3, #4
 8007258:	dd6b      	ble.n	8007332 <_dtoa_r+0x8e2>
 800725a:	9b08      	ldr	r3, [sp, #32]
 800725c:	f1c0 001c 	rsb	r0, r0, #28
 8007260:	4403      	add	r3, r0
 8007262:	4480      	add	r8, r0
 8007264:	4406      	add	r6, r0
 8007266:	9308      	str	r3, [sp, #32]
 8007268:	f1b8 0f00 	cmp.w	r8, #0
 800726c:	dd05      	ble.n	800727a <_dtoa_r+0x82a>
 800726e:	4649      	mov	r1, r9
 8007270:	4642      	mov	r2, r8
 8007272:	4658      	mov	r0, fp
 8007274:	f001 f854 	bl	8008320 <__lshift>
 8007278:	4681      	mov	r9, r0
 800727a:	9b08      	ldr	r3, [sp, #32]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dd05      	ble.n	800728c <_dtoa_r+0x83c>
 8007280:	4621      	mov	r1, r4
 8007282:	461a      	mov	r2, r3
 8007284:	4658      	mov	r0, fp
 8007286:	f001 f84b 	bl	8008320 <__lshift>
 800728a:	4604      	mov	r4, r0
 800728c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800728e:	2b00      	cmp	r3, #0
 8007290:	d059      	beq.n	8007346 <_dtoa_r+0x8f6>
 8007292:	4621      	mov	r1, r4
 8007294:	4648      	mov	r0, r9
 8007296:	f001 f8af 	bl	80083f8 <__mcmp>
 800729a:	2800      	cmp	r0, #0
 800729c:	da53      	bge.n	8007346 <_dtoa_r+0x8f6>
 800729e:	1e7b      	subs	r3, r7, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	4649      	mov	r1, r9
 80072a4:	2300      	movs	r3, #0
 80072a6:	220a      	movs	r2, #10
 80072a8:	4658      	mov	r0, fp
 80072aa:	f000 fe43 	bl	8007f34 <__multadd>
 80072ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b0:	4681      	mov	r9, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8172 	beq.w	800759c <_dtoa_r+0xb4c>
 80072b8:	2300      	movs	r3, #0
 80072ba:	4629      	mov	r1, r5
 80072bc:	220a      	movs	r2, #10
 80072be:	4658      	mov	r0, fp
 80072c0:	f000 fe38 	bl	8007f34 <__multadd>
 80072c4:	9b00      	ldr	r3, [sp, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	4605      	mov	r5, r0
 80072ca:	dc67      	bgt.n	800739c <_dtoa_r+0x94c>
 80072cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	dc41      	bgt.n	8007356 <_dtoa_r+0x906>
 80072d2:	e063      	b.n	800739c <_dtoa_r+0x94c>
 80072d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072da:	e746      	b.n	800716a <_dtoa_r+0x71a>
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	1e5c      	subs	r4, r3, #1
 80072e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	bfbf      	itttt	lt
 80072e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072ec:	1ae3      	sublt	r3, r4, r3
 80072ee:	bfb4      	ite	lt
 80072f0:	18d2      	addlt	r2, r2, r3
 80072f2:	1b1c      	subge	r4, r3, r4
 80072f4:	9b07      	ldr	r3, [sp, #28]
 80072f6:	bfbc      	itt	lt
 80072f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072fa:	2400      	movlt	r4, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb5      	itete	lt
 8007300:	eba8 0603 	sublt.w	r6, r8, r3
 8007304:	9b07      	ldrge	r3, [sp, #28]
 8007306:	2300      	movlt	r3, #0
 8007308:	4646      	movge	r6, r8
 800730a:	e730      	b.n	800716e <_dtoa_r+0x71e>
 800730c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800730e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007310:	4646      	mov	r6, r8
 8007312:	e735      	b.n	8007180 <_dtoa_r+0x730>
 8007314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007316:	e75c      	b.n	80071d2 <_dtoa_r+0x782>
 8007318:	2300      	movs	r3, #0
 800731a:	e788      	b.n	800722e <_dtoa_r+0x7de>
 800731c:	3fe00000 	.word	0x3fe00000
 8007320:	40240000 	.word	0x40240000
 8007324:	40140000 	.word	0x40140000
 8007328:	9b02      	ldr	r3, [sp, #8]
 800732a:	e780      	b.n	800722e <_dtoa_r+0x7de>
 800732c:	2300      	movs	r3, #0
 800732e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007330:	e782      	b.n	8007238 <_dtoa_r+0x7e8>
 8007332:	d099      	beq.n	8007268 <_dtoa_r+0x818>
 8007334:	9a08      	ldr	r2, [sp, #32]
 8007336:	331c      	adds	r3, #28
 8007338:	441a      	add	r2, r3
 800733a:	4498      	add	r8, r3
 800733c:	441e      	add	r6, r3
 800733e:	9208      	str	r2, [sp, #32]
 8007340:	e792      	b.n	8007268 <_dtoa_r+0x818>
 8007342:	4603      	mov	r3, r0
 8007344:	e7f6      	b.n	8007334 <_dtoa_r+0x8e4>
 8007346:	9b07      	ldr	r3, [sp, #28]
 8007348:	9704      	str	r7, [sp, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dc20      	bgt.n	8007390 <_dtoa_r+0x940>
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007352:	2b02      	cmp	r3, #2
 8007354:	dd1e      	ble.n	8007394 <_dtoa_r+0x944>
 8007356:	9b00      	ldr	r3, [sp, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f47f aec0 	bne.w	80070de <_dtoa_r+0x68e>
 800735e:	4621      	mov	r1, r4
 8007360:	2205      	movs	r2, #5
 8007362:	4658      	mov	r0, fp
 8007364:	f000 fde6 	bl	8007f34 <__multadd>
 8007368:	4601      	mov	r1, r0
 800736a:	4604      	mov	r4, r0
 800736c:	4648      	mov	r0, r9
 800736e:	f001 f843 	bl	80083f8 <__mcmp>
 8007372:	2800      	cmp	r0, #0
 8007374:	f77f aeb3 	ble.w	80070de <_dtoa_r+0x68e>
 8007378:	4656      	mov	r6, sl
 800737a:	2331      	movs	r3, #49	@ 0x31
 800737c:	f806 3b01 	strb.w	r3, [r6], #1
 8007380:	9b04      	ldr	r3, [sp, #16]
 8007382:	3301      	adds	r3, #1
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	e6ae      	b.n	80070e6 <_dtoa_r+0x696>
 8007388:	9c07      	ldr	r4, [sp, #28]
 800738a:	9704      	str	r7, [sp, #16]
 800738c:	4625      	mov	r5, r4
 800738e:	e7f3      	b.n	8007378 <_dtoa_r+0x928>
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8104 	beq.w	80075a4 <_dtoa_r+0xb54>
 800739c:	2e00      	cmp	r6, #0
 800739e:	dd05      	ble.n	80073ac <_dtoa_r+0x95c>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4632      	mov	r2, r6
 80073a4:	4658      	mov	r0, fp
 80073a6:	f000 ffbb 	bl	8008320 <__lshift>
 80073aa:	4605      	mov	r5, r0
 80073ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d05a      	beq.n	8007468 <_dtoa_r+0xa18>
 80073b2:	6869      	ldr	r1, [r5, #4]
 80073b4:	4658      	mov	r0, fp
 80073b6:	f000 fd5b 	bl	8007e70 <_Balloc>
 80073ba:	4606      	mov	r6, r0
 80073bc:	b928      	cbnz	r0, 80073ca <_dtoa_r+0x97a>
 80073be:	4b84      	ldr	r3, [pc, #528]	@ (80075d0 <_dtoa_r+0xb80>)
 80073c0:	4602      	mov	r2, r0
 80073c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80073c6:	f7ff bb5a 	b.w	8006a7e <_dtoa_r+0x2e>
 80073ca:	692a      	ldr	r2, [r5, #16]
 80073cc:	3202      	adds	r2, #2
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	f105 010c 	add.w	r1, r5, #12
 80073d4:	300c      	adds	r0, #12
 80073d6:	f7ff fa78 	bl	80068ca <memcpy>
 80073da:	2201      	movs	r2, #1
 80073dc:	4631      	mov	r1, r6
 80073de:	4658      	mov	r0, fp
 80073e0:	f000 ff9e 	bl	8008320 <__lshift>
 80073e4:	f10a 0301 	add.w	r3, sl, #1
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	4453      	add	r3, sl
 80073ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	462f      	mov	r7, r5
 80073f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80073fa:	4605      	mov	r5, r0
 80073fc:	9b07      	ldr	r3, [sp, #28]
 80073fe:	4621      	mov	r1, r4
 8007400:	3b01      	subs	r3, #1
 8007402:	4648      	mov	r0, r9
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	f7ff fa9b 	bl	8006940 <quorem>
 800740a:	4639      	mov	r1, r7
 800740c:	9002      	str	r0, [sp, #8]
 800740e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007412:	4648      	mov	r0, r9
 8007414:	f000 fff0 	bl	80083f8 <__mcmp>
 8007418:	462a      	mov	r2, r5
 800741a:	9008      	str	r0, [sp, #32]
 800741c:	4621      	mov	r1, r4
 800741e:	4658      	mov	r0, fp
 8007420:	f001 f806 	bl	8008430 <__mdiff>
 8007424:	68c2      	ldr	r2, [r0, #12]
 8007426:	4606      	mov	r6, r0
 8007428:	bb02      	cbnz	r2, 800746c <_dtoa_r+0xa1c>
 800742a:	4601      	mov	r1, r0
 800742c:	4648      	mov	r0, r9
 800742e:	f000 ffe3 	bl	80083f8 <__mcmp>
 8007432:	4602      	mov	r2, r0
 8007434:	4631      	mov	r1, r6
 8007436:	4658      	mov	r0, fp
 8007438:	920e      	str	r2, [sp, #56]	@ 0x38
 800743a:	f000 fd59 	bl	8007ef0 <_Bfree>
 800743e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007440:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007442:	9e07      	ldr	r6, [sp, #28]
 8007444:	ea43 0102 	orr.w	r1, r3, r2
 8007448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800744a:	4319      	orrs	r1, r3
 800744c:	d110      	bne.n	8007470 <_dtoa_r+0xa20>
 800744e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007452:	d029      	beq.n	80074a8 <_dtoa_r+0xa58>
 8007454:	9b08      	ldr	r3, [sp, #32]
 8007456:	2b00      	cmp	r3, #0
 8007458:	dd02      	ble.n	8007460 <_dtoa_r+0xa10>
 800745a:	9b02      	ldr	r3, [sp, #8]
 800745c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007460:	9b00      	ldr	r3, [sp, #0]
 8007462:	f883 8000 	strb.w	r8, [r3]
 8007466:	e63f      	b.n	80070e8 <_dtoa_r+0x698>
 8007468:	4628      	mov	r0, r5
 800746a:	e7bb      	b.n	80073e4 <_dtoa_r+0x994>
 800746c:	2201      	movs	r2, #1
 800746e:	e7e1      	b.n	8007434 <_dtoa_r+0x9e4>
 8007470:	9b08      	ldr	r3, [sp, #32]
 8007472:	2b00      	cmp	r3, #0
 8007474:	db04      	blt.n	8007480 <_dtoa_r+0xa30>
 8007476:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007478:	430b      	orrs	r3, r1
 800747a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800747c:	430b      	orrs	r3, r1
 800747e:	d120      	bne.n	80074c2 <_dtoa_r+0xa72>
 8007480:	2a00      	cmp	r2, #0
 8007482:	dded      	ble.n	8007460 <_dtoa_r+0xa10>
 8007484:	4649      	mov	r1, r9
 8007486:	2201      	movs	r2, #1
 8007488:	4658      	mov	r0, fp
 800748a:	f000 ff49 	bl	8008320 <__lshift>
 800748e:	4621      	mov	r1, r4
 8007490:	4681      	mov	r9, r0
 8007492:	f000 ffb1 	bl	80083f8 <__mcmp>
 8007496:	2800      	cmp	r0, #0
 8007498:	dc03      	bgt.n	80074a2 <_dtoa_r+0xa52>
 800749a:	d1e1      	bne.n	8007460 <_dtoa_r+0xa10>
 800749c:	f018 0f01 	tst.w	r8, #1
 80074a0:	d0de      	beq.n	8007460 <_dtoa_r+0xa10>
 80074a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074a6:	d1d8      	bne.n	800745a <_dtoa_r+0xa0a>
 80074a8:	9a00      	ldr	r2, [sp, #0]
 80074aa:	2339      	movs	r3, #57	@ 0x39
 80074ac:	7013      	strb	r3, [r2, #0]
 80074ae:	4633      	mov	r3, r6
 80074b0:	461e      	mov	r6, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80074b8:	2a39      	cmp	r2, #57	@ 0x39
 80074ba:	d052      	beq.n	8007562 <_dtoa_r+0xb12>
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e612      	b.n	80070e8 <_dtoa_r+0x698>
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	dd07      	ble.n	80074d6 <_dtoa_r+0xa86>
 80074c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074ca:	d0ed      	beq.n	80074a8 <_dtoa_r+0xa58>
 80074cc:	9a00      	ldr	r2, [sp, #0]
 80074ce:	f108 0301 	add.w	r3, r8, #1
 80074d2:	7013      	strb	r3, [r2, #0]
 80074d4:	e608      	b.n	80070e8 <_dtoa_r+0x698>
 80074d6:	9b07      	ldr	r3, [sp, #28]
 80074d8:	9a07      	ldr	r2, [sp, #28]
 80074da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d028      	beq.n	8007536 <_dtoa_r+0xae6>
 80074e4:	4649      	mov	r1, r9
 80074e6:	2300      	movs	r3, #0
 80074e8:	220a      	movs	r2, #10
 80074ea:	4658      	mov	r0, fp
 80074ec:	f000 fd22 	bl	8007f34 <__multadd>
 80074f0:	42af      	cmp	r7, r5
 80074f2:	4681      	mov	r9, r0
 80074f4:	f04f 0300 	mov.w	r3, #0
 80074f8:	f04f 020a 	mov.w	r2, #10
 80074fc:	4639      	mov	r1, r7
 80074fe:	4658      	mov	r0, fp
 8007500:	d107      	bne.n	8007512 <_dtoa_r+0xac2>
 8007502:	f000 fd17 	bl	8007f34 <__multadd>
 8007506:	4607      	mov	r7, r0
 8007508:	4605      	mov	r5, r0
 800750a:	9b07      	ldr	r3, [sp, #28]
 800750c:	3301      	adds	r3, #1
 800750e:	9307      	str	r3, [sp, #28]
 8007510:	e774      	b.n	80073fc <_dtoa_r+0x9ac>
 8007512:	f000 fd0f 	bl	8007f34 <__multadd>
 8007516:	4629      	mov	r1, r5
 8007518:	4607      	mov	r7, r0
 800751a:	2300      	movs	r3, #0
 800751c:	220a      	movs	r2, #10
 800751e:	4658      	mov	r0, fp
 8007520:	f000 fd08 	bl	8007f34 <__multadd>
 8007524:	4605      	mov	r5, r0
 8007526:	e7f0      	b.n	800750a <_dtoa_r+0xaba>
 8007528:	9b00      	ldr	r3, [sp, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	bfcc      	ite	gt
 800752e:	461e      	movgt	r6, r3
 8007530:	2601      	movle	r6, #1
 8007532:	4456      	add	r6, sl
 8007534:	2700      	movs	r7, #0
 8007536:	4649      	mov	r1, r9
 8007538:	2201      	movs	r2, #1
 800753a:	4658      	mov	r0, fp
 800753c:	f000 fef0 	bl	8008320 <__lshift>
 8007540:	4621      	mov	r1, r4
 8007542:	4681      	mov	r9, r0
 8007544:	f000 ff58 	bl	80083f8 <__mcmp>
 8007548:	2800      	cmp	r0, #0
 800754a:	dcb0      	bgt.n	80074ae <_dtoa_r+0xa5e>
 800754c:	d102      	bne.n	8007554 <_dtoa_r+0xb04>
 800754e:	f018 0f01 	tst.w	r8, #1
 8007552:	d1ac      	bne.n	80074ae <_dtoa_r+0xa5e>
 8007554:	4633      	mov	r3, r6
 8007556:	461e      	mov	r6, r3
 8007558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800755c:	2a30      	cmp	r2, #48	@ 0x30
 800755e:	d0fa      	beq.n	8007556 <_dtoa_r+0xb06>
 8007560:	e5c2      	b.n	80070e8 <_dtoa_r+0x698>
 8007562:	459a      	cmp	sl, r3
 8007564:	d1a4      	bne.n	80074b0 <_dtoa_r+0xa60>
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	3301      	adds	r3, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	2331      	movs	r3, #49	@ 0x31
 800756e:	f88a 3000 	strb.w	r3, [sl]
 8007572:	e5b9      	b.n	80070e8 <_dtoa_r+0x698>
 8007574:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007576:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80075d4 <_dtoa_r+0xb84>
 800757a:	b11b      	cbz	r3, 8007584 <_dtoa_r+0xb34>
 800757c:	f10a 0308 	add.w	r3, sl, #8
 8007580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	4650      	mov	r0, sl
 8007586:	b019      	add	sp, #100	@ 0x64
 8007588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800758e:	2b01      	cmp	r3, #1
 8007590:	f77f ae37 	ble.w	8007202 <_dtoa_r+0x7b2>
 8007594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007596:	930a      	str	r3, [sp, #40]	@ 0x28
 8007598:	2001      	movs	r0, #1
 800759a:	e655      	b.n	8007248 <_dtoa_r+0x7f8>
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f77f aed6 	ble.w	8007350 <_dtoa_r+0x900>
 80075a4:	4656      	mov	r6, sl
 80075a6:	4621      	mov	r1, r4
 80075a8:	4648      	mov	r0, r9
 80075aa:	f7ff f9c9 	bl	8006940 <quorem>
 80075ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075b2:	f806 8b01 	strb.w	r8, [r6], #1
 80075b6:	9b00      	ldr	r3, [sp, #0]
 80075b8:	eba6 020a 	sub.w	r2, r6, sl
 80075bc:	4293      	cmp	r3, r2
 80075be:	ddb3      	ble.n	8007528 <_dtoa_r+0xad8>
 80075c0:	4649      	mov	r1, r9
 80075c2:	2300      	movs	r3, #0
 80075c4:	220a      	movs	r2, #10
 80075c6:	4658      	mov	r0, fp
 80075c8:	f000 fcb4 	bl	8007f34 <__multadd>
 80075cc:	4681      	mov	r9, r0
 80075ce:	e7ea      	b.n	80075a6 <_dtoa_r+0xb56>
 80075d0:	080093a1 	.word	0x080093a1
 80075d4:	08009325 	.word	0x08009325

080075d8 <_free_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4605      	mov	r5, r0
 80075dc:	2900      	cmp	r1, #0
 80075de:	d041      	beq.n	8007664 <_free_r+0x8c>
 80075e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e4:	1f0c      	subs	r4, r1, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bfb8      	it	lt
 80075ea:	18e4      	addlt	r4, r4, r3
 80075ec:	f000 fc34 	bl	8007e58 <__malloc_lock>
 80075f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007668 <_free_r+0x90>)
 80075f2:	6813      	ldr	r3, [r2, #0]
 80075f4:	b933      	cbnz	r3, 8007604 <_free_r+0x2c>
 80075f6:	6063      	str	r3, [r4, #4]
 80075f8:	6014      	str	r4, [r2, #0]
 80075fa:	4628      	mov	r0, r5
 80075fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007600:	f000 bc30 	b.w	8007e64 <__malloc_unlock>
 8007604:	42a3      	cmp	r3, r4
 8007606:	d908      	bls.n	800761a <_free_r+0x42>
 8007608:	6820      	ldr	r0, [r4, #0]
 800760a:	1821      	adds	r1, r4, r0
 800760c:	428b      	cmp	r3, r1
 800760e:	bf01      	itttt	eq
 8007610:	6819      	ldreq	r1, [r3, #0]
 8007612:	685b      	ldreq	r3, [r3, #4]
 8007614:	1809      	addeq	r1, r1, r0
 8007616:	6021      	streq	r1, [r4, #0]
 8007618:	e7ed      	b.n	80075f6 <_free_r+0x1e>
 800761a:	461a      	mov	r2, r3
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	b10b      	cbz	r3, 8007624 <_free_r+0x4c>
 8007620:	42a3      	cmp	r3, r4
 8007622:	d9fa      	bls.n	800761a <_free_r+0x42>
 8007624:	6811      	ldr	r1, [r2, #0]
 8007626:	1850      	adds	r0, r2, r1
 8007628:	42a0      	cmp	r0, r4
 800762a:	d10b      	bne.n	8007644 <_free_r+0x6c>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	4401      	add	r1, r0
 8007630:	1850      	adds	r0, r2, r1
 8007632:	4283      	cmp	r3, r0
 8007634:	6011      	str	r1, [r2, #0]
 8007636:	d1e0      	bne.n	80075fa <_free_r+0x22>
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	6053      	str	r3, [r2, #4]
 800763e:	4408      	add	r0, r1
 8007640:	6010      	str	r0, [r2, #0]
 8007642:	e7da      	b.n	80075fa <_free_r+0x22>
 8007644:	d902      	bls.n	800764c <_free_r+0x74>
 8007646:	230c      	movs	r3, #12
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	e7d6      	b.n	80075fa <_free_r+0x22>
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	1821      	adds	r1, r4, r0
 8007650:	428b      	cmp	r3, r1
 8007652:	bf04      	itt	eq
 8007654:	6819      	ldreq	r1, [r3, #0]
 8007656:	685b      	ldreq	r3, [r3, #4]
 8007658:	6063      	str	r3, [r4, #4]
 800765a:	bf04      	itt	eq
 800765c:	1809      	addeq	r1, r1, r0
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	6054      	str	r4, [r2, #4]
 8007662:	e7ca      	b.n	80075fa <_free_r+0x22>
 8007664:	bd38      	pop	{r3, r4, r5, pc}
 8007666:	bf00      	nop
 8007668:	20000638 	.word	0x20000638

0800766c <rshift>:
 800766c:	6903      	ldr	r3, [r0, #16]
 800766e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007672:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007676:	ea4f 1261 	mov.w	r2, r1, asr #5
 800767a:	f100 0414 	add.w	r4, r0, #20
 800767e:	dd45      	ble.n	800770c <rshift+0xa0>
 8007680:	f011 011f 	ands.w	r1, r1, #31
 8007684:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007688:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800768c:	d10c      	bne.n	80076a8 <rshift+0x3c>
 800768e:	f100 0710 	add.w	r7, r0, #16
 8007692:	4629      	mov	r1, r5
 8007694:	42b1      	cmp	r1, r6
 8007696:	d334      	bcc.n	8007702 <rshift+0x96>
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	1eea      	subs	r2, r5, #3
 800769e:	4296      	cmp	r6, r2
 80076a0:	bf38      	it	cc
 80076a2:	2300      	movcc	r3, #0
 80076a4:	4423      	add	r3, r4
 80076a6:	e015      	b.n	80076d4 <rshift+0x68>
 80076a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80076ac:	f1c1 0820 	rsb	r8, r1, #32
 80076b0:	40cf      	lsrs	r7, r1
 80076b2:	f105 0e04 	add.w	lr, r5, #4
 80076b6:	46a1      	mov	r9, r4
 80076b8:	4576      	cmp	r6, lr
 80076ba:	46f4      	mov	ip, lr
 80076bc:	d815      	bhi.n	80076ea <rshift+0x7e>
 80076be:	1a9a      	subs	r2, r3, r2
 80076c0:	0092      	lsls	r2, r2, #2
 80076c2:	3a04      	subs	r2, #4
 80076c4:	3501      	adds	r5, #1
 80076c6:	42ae      	cmp	r6, r5
 80076c8:	bf38      	it	cc
 80076ca:	2200      	movcc	r2, #0
 80076cc:	18a3      	adds	r3, r4, r2
 80076ce:	50a7      	str	r7, [r4, r2]
 80076d0:	b107      	cbz	r7, 80076d4 <rshift+0x68>
 80076d2:	3304      	adds	r3, #4
 80076d4:	1b1a      	subs	r2, r3, r4
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80076dc:	bf08      	it	eq
 80076de:	2300      	moveq	r3, #0
 80076e0:	6102      	str	r2, [r0, #16]
 80076e2:	bf08      	it	eq
 80076e4:	6143      	streq	r3, [r0, #20]
 80076e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ea:	f8dc c000 	ldr.w	ip, [ip]
 80076ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80076f2:	ea4c 0707 	orr.w	r7, ip, r7
 80076f6:	f849 7b04 	str.w	r7, [r9], #4
 80076fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076fe:	40cf      	lsrs	r7, r1
 8007700:	e7da      	b.n	80076b8 <rshift+0x4c>
 8007702:	f851 cb04 	ldr.w	ip, [r1], #4
 8007706:	f847 cf04 	str.w	ip, [r7, #4]!
 800770a:	e7c3      	b.n	8007694 <rshift+0x28>
 800770c:	4623      	mov	r3, r4
 800770e:	e7e1      	b.n	80076d4 <rshift+0x68>

08007710 <__hexdig_fun>:
 8007710:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007714:	2b09      	cmp	r3, #9
 8007716:	d802      	bhi.n	800771e <__hexdig_fun+0xe>
 8007718:	3820      	subs	r0, #32
 800771a:	b2c0      	uxtb	r0, r0
 800771c:	4770      	bx	lr
 800771e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007722:	2b05      	cmp	r3, #5
 8007724:	d801      	bhi.n	800772a <__hexdig_fun+0x1a>
 8007726:	3847      	subs	r0, #71	@ 0x47
 8007728:	e7f7      	b.n	800771a <__hexdig_fun+0xa>
 800772a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800772e:	2b05      	cmp	r3, #5
 8007730:	d801      	bhi.n	8007736 <__hexdig_fun+0x26>
 8007732:	3827      	subs	r0, #39	@ 0x27
 8007734:	e7f1      	b.n	800771a <__hexdig_fun+0xa>
 8007736:	2000      	movs	r0, #0
 8007738:	4770      	bx	lr
	...

0800773c <__gethex>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	b085      	sub	sp, #20
 8007742:	468a      	mov	sl, r1
 8007744:	9302      	str	r3, [sp, #8]
 8007746:	680b      	ldr	r3, [r1, #0]
 8007748:	9001      	str	r0, [sp, #4]
 800774a:	4690      	mov	r8, r2
 800774c:	1c9c      	adds	r4, r3, #2
 800774e:	46a1      	mov	r9, r4
 8007750:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007754:	2830      	cmp	r0, #48	@ 0x30
 8007756:	d0fa      	beq.n	800774e <__gethex+0x12>
 8007758:	eba9 0303 	sub.w	r3, r9, r3
 800775c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007760:	f7ff ffd6 	bl	8007710 <__hexdig_fun>
 8007764:	4605      	mov	r5, r0
 8007766:	2800      	cmp	r0, #0
 8007768:	d168      	bne.n	800783c <__gethex+0x100>
 800776a:	49a0      	ldr	r1, [pc, #640]	@ (80079ec <__gethex+0x2b0>)
 800776c:	2201      	movs	r2, #1
 800776e:	4648      	mov	r0, r9
 8007770:	f7ff f822 	bl	80067b8 <strncmp>
 8007774:	4607      	mov	r7, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	d167      	bne.n	800784a <__gethex+0x10e>
 800777a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800777e:	4626      	mov	r6, r4
 8007780:	f7ff ffc6 	bl	8007710 <__hexdig_fun>
 8007784:	2800      	cmp	r0, #0
 8007786:	d062      	beq.n	800784e <__gethex+0x112>
 8007788:	4623      	mov	r3, r4
 800778a:	7818      	ldrb	r0, [r3, #0]
 800778c:	2830      	cmp	r0, #48	@ 0x30
 800778e:	4699      	mov	r9, r3
 8007790:	f103 0301 	add.w	r3, r3, #1
 8007794:	d0f9      	beq.n	800778a <__gethex+0x4e>
 8007796:	f7ff ffbb 	bl	8007710 <__hexdig_fun>
 800779a:	fab0 f580 	clz	r5, r0
 800779e:	096d      	lsrs	r5, r5, #5
 80077a0:	f04f 0b01 	mov.w	fp, #1
 80077a4:	464a      	mov	r2, r9
 80077a6:	4616      	mov	r6, r2
 80077a8:	3201      	adds	r2, #1
 80077aa:	7830      	ldrb	r0, [r6, #0]
 80077ac:	f7ff ffb0 	bl	8007710 <__hexdig_fun>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1f8      	bne.n	80077a6 <__gethex+0x6a>
 80077b4:	498d      	ldr	r1, [pc, #564]	@ (80079ec <__gethex+0x2b0>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7fe fffd 	bl	80067b8 <strncmp>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d13f      	bne.n	8007842 <__gethex+0x106>
 80077c2:	b944      	cbnz	r4, 80077d6 <__gethex+0x9a>
 80077c4:	1c74      	adds	r4, r6, #1
 80077c6:	4622      	mov	r2, r4
 80077c8:	4616      	mov	r6, r2
 80077ca:	3201      	adds	r2, #1
 80077cc:	7830      	ldrb	r0, [r6, #0]
 80077ce:	f7ff ff9f 	bl	8007710 <__hexdig_fun>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d1f8      	bne.n	80077c8 <__gethex+0x8c>
 80077d6:	1ba4      	subs	r4, r4, r6
 80077d8:	00a7      	lsls	r7, r4, #2
 80077da:	7833      	ldrb	r3, [r6, #0]
 80077dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80077e0:	2b50      	cmp	r3, #80	@ 0x50
 80077e2:	d13e      	bne.n	8007862 <__gethex+0x126>
 80077e4:	7873      	ldrb	r3, [r6, #1]
 80077e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80077e8:	d033      	beq.n	8007852 <__gethex+0x116>
 80077ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80077ec:	d034      	beq.n	8007858 <__gethex+0x11c>
 80077ee:	1c71      	adds	r1, r6, #1
 80077f0:	2400      	movs	r4, #0
 80077f2:	7808      	ldrb	r0, [r1, #0]
 80077f4:	f7ff ff8c 	bl	8007710 <__hexdig_fun>
 80077f8:	1e43      	subs	r3, r0, #1
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b18      	cmp	r3, #24
 80077fe:	d830      	bhi.n	8007862 <__gethex+0x126>
 8007800:	f1a0 0210 	sub.w	r2, r0, #16
 8007804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007808:	f7ff ff82 	bl	8007710 <__hexdig_fun>
 800780c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007810:	fa5f fc8c 	uxtb.w	ip, ip
 8007814:	f1bc 0f18 	cmp.w	ip, #24
 8007818:	f04f 030a 	mov.w	r3, #10
 800781c:	d91e      	bls.n	800785c <__gethex+0x120>
 800781e:	b104      	cbz	r4, 8007822 <__gethex+0xe6>
 8007820:	4252      	negs	r2, r2
 8007822:	4417      	add	r7, r2
 8007824:	f8ca 1000 	str.w	r1, [sl]
 8007828:	b1ed      	cbz	r5, 8007866 <__gethex+0x12a>
 800782a:	f1bb 0f00 	cmp.w	fp, #0
 800782e:	bf0c      	ite	eq
 8007830:	2506      	moveq	r5, #6
 8007832:	2500      	movne	r5, #0
 8007834:	4628      	mov	r0, r5
 8007836:	b005      	add	sp, #20
 8007838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783c:	2500      	movs	r5, #0
 800783e:	462c      	mov	r4, r5
 8007840:	e7b0      	b.n	80077a4 <__gethex+0x68>
 8007842:	2c00      	cmp	r4, #0
 8007844:	d1c7      	bne.n	80077d6 <__gethex+0x9a>
 8007846:	4627      	mov	r7, r4
 8007848:	e7c7      	b.n	80077da <__gethex+0x9e>
 800784a:	464e      	mov	r6, r9
 800784c:	462f      	mov	r7, r5
 800784e:	2501      	movs	r5, #1
 8007850:	e7c3      	b.n	80077da <__gethex+0x9e>
 8007852:	2400      	movs	r4, #0
 8007854:	1cb1      	adds	r1, r6, #2
 8007856:	e7cc      	b.n	80077f2 <__gethex+0xb6>
 8007858:	2401      	movs	r4, #1
 800785a:	e7fb      	b.n	8007854 <__gethex+0x118>
 800785c:	fb03 0002 	mla	r0, r3, r2, r0
 8007860:	e7ce      	b.n	8007800 <__gethex+0xc4>
 8007862:	4631      	mov	r1, r6
 8007864:	e7de      	b.n	8007824 <__gethex+0xe8>
 8007866:	eba6 0309 	sub.w	r3, r6, r9
 800786a:	3b01      	subs	r3, #1
 800786c:	4629      	mov	r1, r5
 800786e:	2b07      	cmp	r3, #7
 8007870:	dc0a      	bgt.n	8007888 <__gethex+0x14c>
 8007872:	9801      	ldr	r0, [sp, #4]
 8007874:	f000 fafc 	bl	8007e70 <_Balloc>
 8007878:	4604      	mov	r4, r0
 800787a:	b940      	cbnz	r0, 800788e <__gethex+0x152>
 800787c:	4b5c      	ldr	r3, [pc, #368]	@ (80079f0 <__gethex+0x2b4>)
 800787e:	4602      	mov	r2, r0
 8007880:	21e4      	movs	r1, #228	@ 0xe4
 8007882:	485c      	ldr	r0, [pc, #368]	@ (80079f4 <__gethex+0x2b8>)
 8007884:	f7ff f83e 	bl	8006904 <__assert_func>
 8007888:	3101      	adds	r1, #1
 800788a:	105b      	asrs	r3, r3, #1
 800788c:	e7ef      	b.n	800786e <__gethex+0x132>
 800788e:	f100 0a14 	add.w	sl, r0, #20
 8007892:	2300      	movs	r3, #0
 8007894:	4655      	mov	r5, sl
 8007896:	469b      	mov	fp, r3
 8007898:	45b1      	cmp	r9, r6
 800789a:	d337      	bcc.n	800790c <__gethex+0x1d0>
 800789c:	f845 bb04 	str.w	fp, [r5], #4
 80078a0:	eba5 050a 	sub.w	r5, r5, sl
 80078a4:	10ad      	asrs	r5, r5, #2
 80078a6:	6125      	str	r5, [r4, #16]
 80078a8:	4658      	mov	r0, fp
 80078aa:	f000 fbd3 	bl	8008054 <__hi0bits>
 80078ae:	016d      	lsls	r5, r5, #5
 80078b0:	f8d8 6000 	ldr.w	r6, [r8]
 80078b4:	1a2d      	subs	r5, r5, r0
 80078b6:	42b5      	cmp	r5, r6
 80078b8:	dd54      	ble.n	8007964 <__gethex+0x228>
 80078ba:	1bad      	subs	r5, r5, r6
 80078bc:	4629      	mov	r1, r5
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 ff67 	bl	8008792 <__any_on>
 80078c4:	4681      	mov	r9, r0
 80078c6:	b178      	cbz	r0, 80078e8 <__gethex+0x1ac>
 80078c8:	1e6b      	subs	r3, r5, #1
 80078ca:	1159      	asrs	r1, r3, #5
 80078cc:	f003 021f 	and.w	r2, r3, #31
 80078d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80078d4:	f04f 0901 	mov.w	r9, #1
 80078d8:	fa09 f202 	lsl.w	r2, r9, r2
 80078dc:	420a      	tst	r2, r1
 80078de:	d003      	beq.n	80078e8 <__gethex+0x1ac>
 80078e0:	454b      	cmp	r3, r9
 80078e2:	dc36      	bgt.n	8007952 <__gethex+0x216>
 80078e4:	f04f 0902 	mov.w	r9, #2
 80078e8:	4629      	mov	r1, r5
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff febe 	bl	800766c <rshift>
 80078f0:	442f      	add	r7, r5
 80078f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078f6:	42bb      	cmp	r3, r7
 80078f8:	da42      	bge.n	8007980 <__gethex+0x244>
 80078fa:	9801      	ldr	r0, [sp, #4]
 80078fc:	4621      	mov	r1, r4
 80078fe:	f000 faf7 	bl	8007ef0 <_Bfree>
 8007902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007904:	2300      	movs	r3, #0
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	25a3      	movs	r5, #163	@ 0xa3
 800790a:	e793      	b.n	8007834 <__gethex+0xf8>
 800790c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007910:	2a2e      	cmp	r2, #46	@ 0x2e
 8007912:	d012      	beq.n	800793a <__gethex+0x1fe>
 8007914:	2b20      	cmp	r3, #32
 8007916:	d104      	bne.n	8007922 <__gethex+0x1e6>
 8007918:	f845 bb04 	str.w	fp, [r5], #4
 800791c:	f04f 0b00 	mov.w	fp, #0
 8007920:	465b      	mov	r3, fp
 8007922:	7830      	ldrb	r0, [r6, #0]
 8007924:	9303      	str	r3, [sp, #12]
 8007926:	f7ff fef3 	bl	8007710 <__hexdig_fun>
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	f000 000f 	and.w	r0, r0, #15
 8007930:	4098      	lsls	r0, r3
 8007932:	ea4b 0b00 	orr.w	fp, fp, r0
 8007936:	3304      	adds	r3, #4
 8007938:	e7ae      	b.n	8007898 <__gethex+0x15c>
 800793a:	45b1      	cmp	r9, r6
 800793c:	d8ea      	bhi.n	8007914 <__gethex+0x1d8>
 800793e:	492b      	ldr	r1, [pc, #172]	@ (80079ec <__gethex+0x2b0>)
 8007940:	9303      	str	r3, [sp, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	4630      	mov	r0, r6
 8007946:	f7fe ff37 	bl	80067b8 <strncmp>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	2800      	cmp	r0, #0
 800794e:	d1e1      	bne.n	8007914 <__gethex+0x1d8>
 8007950:	e7a2      	b.n	8007898 <__gethex+0x15c>
 8007952:	1ea9      	subs	r1, r5, #2
 8007954:	4620      	mov	r0, r4
 8007956:	f000 ff1c 	bl	8008792 <__any_on>
 800795a:	2800      	cmp	r0, #0
 800795c:	d0c2      	beq.n	80078e4 <__gethex+0x1a8>
 800795e:	f04f 0903 	mov.w	r9, #3
 8007962:	e7c1      	b.n	80078e8 <__gethex+0x1ac>
 8007964:	da09      	bge.n	800797a <__gethex+0x23e>
 8007966:	1b75      	subs	r5, r6, r5
 8007968:	4621      	mov	r1, r4
 800796a:	9801      	ldr	r0, [sp, #4]
 800796c:	462a      	mov	r2, r5
 800796e:	f000 fcd7 	bl	8008320 <__lshift>
 8007972:	1b7f      	subs	r7, r7, r5
 8007974:	4604      	mov	r4, r0
 8007976:	f100 0a14 	add.w	sl, r0, #20
 800797a:	f04f 0900 	mov.w	r9, #0
 800797e:	e7b8      	b.n	80078f2 <__gethex+0x1b6>
 8007980:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007984:	42bd      	cmp	r5, r7
 8007986:	dd6f      	ble.n	8007a68 <__gethex+0x32c>
 8007988:	1bed      	subs	r5, r5, r7
 800798a:	42ae      	cmp	r6, r5
 800798c:	dc34      	bgt.n	80079f8 <__gethex+0x2bc>
 800798e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d022      	beq.n	80079dc <__gethex+0x2a0>
 8007996:	2b03      	cmp	r3, #3
 8007998:	d024      	beq.n	80079e4 <__gethex+0x2a8>
 800799a:	2b01      	cmp	r3, #1
 800799c:	d115      	bne.n	80079ca <__gethex+0x28e>
 800799e:	42ae      	cmp	r6, r5
 80079a0:	d113      	bne.n	80079ca <__gethex+0x28e>
 80079a2:	2e01      	cmp	r6, #1
 80079a4:	d10b      	bne.n	80079be <__gethex+0x282>
 80079a6:	9a02      	ldr	r2, [sp, #8]
 80079a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	2301      	movs	r3, #1
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	f8ca 3000 	str.w	r3, [sl]
 80079b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b8:	2562      	movs	r5, #98	@ 0x62
 80079ba:	601c      	str	r4, [r3, #0]
 80079bc:	e73a      	b.n	8007834 <__gethex+0xf8>
 80079be:	1e71      	subs	r1, r6, #1
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 fee6 	bl	8008792 <__any_on>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d1ed      	bne.n	80079a6 <__gethex+0x26a>
 80079ca:	9801      	ldr	r0, [sp, #4]
 80079cc:	4621      	mov	r1, r4
 80079ce:	f000 fa8f 	bl	8007ef0 <_Bfree>
 80079d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079d4:	2300      	movs	r3, #0
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	2550      	movs	r5, #80	@ 0x50
 80079da:	e72b      	b.n	8007834 <__gethex+0xf8>
 80079dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f3      	bne.n	80079ca <__gethex+0x28e>
 80079e2:	e7e0      	b.n	80079a6 <__gethex+0x26a>
 80079e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1dd      	bne.n	80079a6 <__gethex+0x26a>
 80079ea:	e7ee      	b.n	80079ca <__gethex+0x28e>
 80079ec:	08009250 	.word	0x08009250
 80079f0:	080093a1 	.word	0x080093a1
 80079f4:	080093b2 	.word	0x080093b2
 80079f8:	1e6f      	subs	r7, r5, #1
 80079fa:	f1b9 0f00 	cmp.w	r9, #0
 80079fe:	d130      	bne.n	8007a62 <__gethex+0x326>
 8007a00:	b127      	cbz	r7, 8007a0c <__gethex+0x2d0>
 8007a02:	4639      	mov	r1, r7
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fec4 	bl	8008792 <__any_on>
 8007a0a:	4681      	mov	r9, r0
 8007a0c:	117a      	asrs	r2, r7, #5
 8007a0e:	2301      	movs	r3, #1
 8007a10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007a14:	f007 071f 	and.w	r7, r7, #31
 8007a18:	40bb      	lsls	r3, r7
 8007a1a:	4213      	tst	r3, r2
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4620      	mov	r0, r4
 8007a20:	bf18      	it	ne
 8007a22:	f049 0902 	orrne.w	r9, r9, #2
 8007a26:	f7ff fe21 	bl	800766c <rshift>
 8007a2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007a2e:	1b76      	subs	r6, r6, r5
 8007a30:	2502      	movs	r5, #2
 8007a32:	f1b9 0f00 	cmp.w	r9, #0
 8007a36:	d047      	beq.n	8007ac8 <__gethex+0x38c>
 8007a38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d015      	beq.n	8007a6c <__gethex+0x330>
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d017      	beq.n	8007a74 <__gethex+0x338>
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d109      	bne.n	8007a5c <__gethex+0x320>
 8007a48:	f019 0f02 	tst.w	r9, #2
 8007a4c:	d006      	beq.n	8007a5c <__gethex+0x320>
 8007a4e:	f8da 3000 	ldr.w	r3, [sl]
 8007a52:	ea49 0903 	orr.w	r9, r9, r3
 8007a56:	f019 0f01 	tst.w	r9, #1
 8007a5a:	d10e      	bne.n	8007a7a <__gethex+0x33e>
 8007a5c:	f045 0510 	orr.w	r5, r5, #16
 8007a60:	e032      	b.n	8007ac8 <__gethex+0x38c>
 8007a62:	f04f 0901 	mov.w	r9, #1
 8007a66:	e7d1      	b.n	8007a0c <__gethex+0x2d0>
 8007a68:	2501      	movs	r5, #1
 8007a6a:	e7e2      	b.n	8007a32 <__gethex+0x2f6>
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6e:	f1c3 0301 	rsb	r3, r3, #1
 8007a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <__gethex+0x320>
 8007a7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a7e:	f104 0314 	add.w	r3, r4, #20
 8007a82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a8a:	f04f 0c00 	mov.w	ip, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007a98:	d01b      	beq.n	8007ad2 <__gethex+0x396>
 8007a9a:	3201      	adds	r2, #1
 8007a9c:	6002      	str	r2, [r0, #0]
 8007a9e:	2d02      	cmp	r5, #2
 8007aa0:	f104 0314 	add.w	r3, r4, #20
 8007aa4:	d13c      	bne.n	8007b20 <__gethex+0x3e4>
 8007aa6:	f8d8 2000 	ldr.w	r2, [r8]
 8007aaa:	3a01      	subs	r2, #1
 8007aac:	42b2      	cmp	r2, r6
 8007aae:	d109      	bne.n	8007ac4 <__gethex+0x388>
 8007ab0:	1171      	asrs	r1, r6, #5
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ab8:	f006 061f 	and.w	r6, r6, #31
 8007abc:	fa02 f606 	lsl.w	r6, r2, r6
 8007ac0:	421e      	tst	r6, r3
 8007ac2:	d13a      	bne.n	8007b3a <__gethex+0x3fe>
 8007ac4:	f045 0520 	orr.w	r5, r5, #32
 8007ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aca:	601c      	str	r4, [r3, #0]
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	601f      	str	r7, [r3, #0]
 8007ad0:	e6b0      	b.n	8007834 <__gethex+0xf8>
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	f843 cc04 	str.w	ip, [r3, #-4]
 8007ad8:	d8d9      	bhi.n	8007a8e <__gethex+0x352>
 8007ada:	68a3      	ldr	r3, [r4, #8]
 8007adc:	459b      	cmp	fp, r3
 8007ade:	db17      	blt.n	8007b10 <__gethex+0x3d4>
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	9801      	ldr	r0, [sp, #4]
 8007ae4:	3101      	adds	r1, #1
 8007ae6:	f000 f9c3 	bl	8007e70 <_Balloc>
 8007aea:	4681      	mov	r9, r0
 8007aec:	b918      	cbnz	r0, 8007af6 <__gethex+0x3ba>
 8007aee:	4b1a      	ldr	r3, [pc, #104]	@ (8007b58 <__gethex+0x41c>)
 8007af0:	4602      	mov	r2, r0
 8007af2:	2184      	movs	r1, #132	@ 0x84
 8007af4:	e6c5      	b.n	8007882 <__gethex+0x146>
 8007af6:	6922      	ldr	r2, [r4, #16]
 8007af8:	3202      	adds	r2, #2
 8007afa:	f104 010c 	add.w	r1, r4, #12
 8007afe:	0092      	lsls	r2, r2, #2
 8007b00:	300c      	adds	r0, #12
 8007b02:	f7fe fee2 	bl	80068ca <memcpy>
 8007b06:	4621      	mov	r1, r4
 8007b08:	9801      	ldr	r0, [sp, #4]
 8007b0a:	f000 f9f1 	bl	8007ef0 <_Bfree>
 8007b0e:	464c      	mov	r4, r9
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b18:	6122      	str	r2, [r4, #16]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	615a      	str	r2, [r3, #20]
 8007b1e:	e7be      	b.n	8007a9e <__gethex+0x362>
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	455a      	cmp	r2, fp
 8007b24:	dd0b      	ble.n	8007b3e <__gethex+0x402>
 8007b26:	2101      	movs	r1, #1
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff fd9f 	bl	800766c <rshift>
 8007b2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b32:	3701      	adds	r7, #1
 8007b34:	42bb      	cmp	r3, r7
 8007b36:	f6ff aee0 	blt.w	80078fa <__gethex+0x1be>
 8007b3a:	2501      	movs	r5, #1
 8007b3c:	e7c2      	b.n	8007ac4 <__gethex+0x388>
 8007b3e:	f016 061f 	ands.w	r6, r6, #31
 8007b42:	d0fa      	beq.n	8007b3a <__gethex+0x3fe>
 8007b44:	4453      	add	r3, sl
 8007b46:	f1c6 0620 	rsb	r6, r6, #32
 8007b4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007b4e:	f000 fa81 	bl	8008054 <__hi0bits>
 8007b52:	42b0      	cmp	r0, r6
 8007b54:	dbe7      	blt.n	8007b26 <__gethex+0x3ea>
 8007b56:	e7f0      	b.n	8007b3a <__gethex+0x3fe>
 8007b58:	080093a1 	.word	0x080093a1

08007b5c <L_shift>:
 8007b5c:	f1c2 0208 	rsb	r2, r2, #8
 8007b60:	0092      	lsls	r2, r2, #2
 8007b62:	b570      	push	{r4, r5, r6, lr}
 8007b64:	f1c2 0620 	rsb	r6, r2, #32
 8007b68:	6843      	ldr	r3, [r0, #4]
 8007b6a:	6804      	ldr	r4, [r0, #0]
 8007b6c:	fa03 f506 	lsl.w	r5, r3, r6
 8007b70:	432c      	orrs	r4, r5
 8007b72:	40d3      	lsrs	r3, r2
 8007b74:	6004      	str	r4, [r0, #0]
 8007b76:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b7a:	4288      	cmp	r0, r1
 8007b7c:	d3f4      	bcc.n	8007b68 <L_shift+0xc>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <__match>:
 8007b80:	b530      	push	{r4, r5, lr}
 8007b82:	6803      	ldr	r3, [r0, #0]
 8007b84:	3301      	adds	r3, #1
 8007b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b8a:	b914      	cbnz	r4, 8007b92 <__match+0x12>
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	2001      	movs	r0, #1
 8007b90:	bd30      	pop	{r4, r5, pc}
 8007b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007b9a:	2d19      	cmp	r5, #25
 8007b9c:	bf98      	it	ls
 8007b9e:	3220      	addls	r2, #32
 8007ba0:	42a2      	cmp	r2, r4
 8007ba2:	d0f0      	beq.n	8007b86 <__match+0x6>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e7f3      	b.n	8007b90 <__match+0x10>

08007ba8 <__hexnan>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	680b      	ldr	r3, [r1, #0]
 8007bae:	6801      	ldr	r1, [r0, #0]
 8007bb0:	115e      	asrs	r6, r3, #5
 8007bb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007bb6:	f013 031f 	ands.w	r3, r3, #31
 8007bba:	b087      	sub	sp, #28
 8007bbc:	bf18      	it	ne
 8007bbe:	3604      	addne	r6, #4
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	1f37      	subs	r7, r6, #4
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	4690      	mov	r8, r2
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	f846 5c04 	str.w	r5, [r6, #-4]
 8007bce:	46b9      	mov	r9, r7
 8007bd0:	463c      	mov	r4, r7
 8007bd2:	9502      	str	r5, [sp, #8]
 8007bd4:	46ab      	mov	fp, r5
 8007bd6:	784a      	ldrb	r2, [r1, #1]
 8007bd8:	1c4b      	adds	r3, r1, #1
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	b342      	cbz	r2, 8007c30 <__hexnan+0x88>
 8007bde:	4610      	mov	r0, r2
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	9204      	str	r2, [sp, #16]
 8007be4:	f7ff fd94 	bl	8007710 <__hexdig_fun>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d151      	bne.n	8007c90 <__hexnan+0xe8>
 8007bec:	9a04      	ldr	r2, [sp, #16]
 8007bee:	9905      	ldr	r1, [sp, #20]
 8007bf0:	2a20      	cmp	r2, #32
 8007bf2:	d818      	bhi.n	8007c26 <__hexnan+0x7e>
 8007bf4:	9b02      	ldr	r3, [sp, #8]
 8007bf6:	459b      	cmp	fp, r3
 8007bf8:	dd13      	ble.n	8007c22 <__hexnan+0x7a>
 8007bfa:	454c      	cmp	r4, r9
 8007bfc:	d206      	bcs.n	8007c0c <__hexnan+0x64>
 8007bfe:	2d07      	cmp	r5, #7
 8007c00:	dc04      	bgt.n	8007c0c <__hexnan+0x64>
 8007c02:	462a      	mov	r2, r5
 8007c04:	4649      	mov	r1, r9
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff ffa8 	bl	8007b5c <L_shift>
 8007c0c:	4544      	cmp	r4, r8
 8007c0e:	d952      	bls.n	8007cb6 <__hexnan+0x10e>
 8007c10:	2300      	movs	r3, #0
 8007c12:	f1a4 0904 	sub.w	r9, r4, #4
 8007c16:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c1a:	f8cd b008 	str.w	fp, [sp, #8]
 8007c1e:	464c      	mov	r4, r9
 8007c20:	461d      	mov	r5, r3
 8007c22:	9903      	ldr	r1, [sp, #12]
 8007c24:	e7d7      	b.n	8007bd6 <__hexnan+0x2e>
 8007c26:	2a29      	cmp	r2, #41	@ 0x29
 8007c28:	d157      	bne.n	8007cda <__hexnan+0x132>
 8007c2a:	3102      	adds	r1, #2
 8007c2c:	f8ca 1000 	str.w	r1, [sl]
 8007c30:	f1bb 0f00 	cmp.w	fp, #0
 8007c34:	d051      	beq.n	8007cda <__hexnan+0x132>
 8007c36:	454c      	cmp	r4, r9
 8007c38:	d206      	bcs.n	8007c48 <__hexnan+0xa0>
 8007c3a:	2d07      	cmp	r5, #7
 8007c3c:	dc04      	bgt.n	8007c48 <__hexnan+0xa0>
 8007c3e:	462a      	mov	r2, r5
 8007c40:	4649      	mov	r1, r9
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7ff ff8a 	bl	8007b5c <L_shift>
 8007c48:	4544      	cmp	r4, r8
 8007c4a:	d936      	bls.n	8007cba <__hexnan+0x112>
 8007c4c:	f1a8 0204 	sub.w	r2, r8, #4
 8007c50:	4623      	mov	r3, r4
 8007c52:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c56:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c5a:	429f      	cmp	r7, r3
 8007c5c:	d2f9      	bcs.n	8007c52 <__hexnan+0xaa>
 8007c5e:	1b3b      	subs	r3, r7, r4
 8007c60:	f023 0303 	bic.w	r3, r3, #3
 8007c64:	3304      	adds	r3, #4
 8007c66:	3401      	adds	r4, #1
 8007c68:	3e03      	subs	r6, #3
 8007c6a:	42b4      	cmp	r4, r6
 8007c6c:	bf88      	it	hi
 8007c6e:	2304      	movhi	r3, #4
 8007c70:	4443      	add	r3, r8
 8007c72:	2200      	movs	r2, #0
 8007c74:	f843 2b04 	str.w	r2, [r3], #4
 8007c78:	429f      	cmp	r7, r3
 8007c7a:	d2fb      	bcs.n	8007c74 <__hexnan+0xcc>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	b91b      	cbnz	r3, 8007c88 <__hexnan+0xe0>
 8007c80:	4547      	cmp	r7, r8
 8007c82:	d128      	bne.n	8007cd6 <__hexnan+0x12e>
 8007c84:	2301      	movs	r3, #1
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	2005      	movs	r0, #5
 8007c8a:	b007      	add	sp, #28
 8007c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c90:	3501      	adds	r5, #1
 8007c92:	2d08      	cmp	r5, #8
 8007c94:	f10b 0b01 	add.w	fp, fp, #1
 8007c98:	dd06      	ble.n	8007ca8 <__hexnan+0x100>
 8007c9a:	4544      	cmp	r4, r8
 8007c9c:	d9c1      	bls.n	8007c22 <__hexnan+0x7a>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ca4:	2501      	movs	r5, #1
 8007ca6:	3c04      	subs	r4, #4
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	f000 000f 	and.w	r0, r0, #15
 8007cae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007cb2:	6020      	str	r0, [r4, #0]
 8007cb4:	e7b5      	b.n	8007c22 <__hexnan+0x7a>
 8007cb6:	2508      	movs	r5, #8
 8007cb8:	e7b3      	b.n	8007c22 <__hexnan+0x7a>
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d0dd      	beq.n	8007c7c <__hexnan+0xd4>
 8007cc0:	f1c3 0320 	rsb	r3, r3, #32
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	40da      	lsrs	r2, r3
 8007cca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8007cd4:	e7d2      	b.n	8007c7c <__hexnan+0xd4>
 8007cd6:	3f04      	subs	r7, #4
 8007cd8:	e7d0      	b.n	8007c7c <__hexnan+0xd4>
 8007cda:	2004      	movs	r0, #4
 8007cdc:	e7d5      	b.n	8007c8a <__hexnan+0xe2>
	...

08007ce0 <malloc>:
 8007ce0:	4b02      	ldr	r3, [pc, #8]	@ (8007cec <malloc+0xc>)
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f000 b825 	b.w	8007d34 <_malloc_r>
 8007cea:	bf00      	nop
 8007cec:	20000194 	.word	0x20000194

08007cf0 <sbrk_aligned>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	4e0f      	ldr	r6, [pc, #60]	@ (8007d30 <sbrk_aligned+0x40>)
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	6831      	ldr	r1, [r6, #0]
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	b911      	cbnz	r1, 8007d02 <sbrk_aligned+0x12>
 8007cfc:	f001 f9e8 	bl	80090d0 <_sbrk_r>
 8007d00:	6030      	str	r0, [r6, #0]
 8007d02:	4621      	mov	r1, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	f001 f9e3 	bl	80090d0 <_sbrk_r>
 8007d0a:	1c43      	adds	r3, r0, #1
 8007d0c:	d103      	bne.n	8007d16 <sbrk_aligned+0x26>
 8007d0e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d12:	4620      	mov	r0, r4
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
 8007d16:	1cc4      	adds	r4, r0, #3
 8007d18:	f024 0403 	bic.w	r4, r4, #3
 8007d1c:	42a0      	cmp	r0, r4
 8007d1e:	d0f8      	beq.n	8007d12 <sbrk_aligned+0x22>
 8007d20:	1a21      	subs	r1, r4, r0
 8007d22:	4628      	mov	r0, r5
 8007d24:	f001 f9d4 	bl	80090d0 <_sbrk_r>
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d1f2      	bne.n	8007d12 <sbrk_aligned+0x22>
 8007d2c:	e7ef      	b.n	8007d0e <sbrk_aligned+0x1e>
 8007d2e:	bf00      	nop
 8007d30:	20000634 	.word	0x20000634

08007d34 <_malloc_r>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	1ccd      	adds	r5, r1, #3
 8007d3a:	f025 0503 	bic.w	r5, r5, #3
 8007d3e:	3508      	adds	r5, #8
 8007d40:	2d0c      	cmp	r5, #12
 8007d42:	bf38      	it	cc
 8007d44:	250c      	movcc	r5, #12
 8007d46:	2d00      	cmp	r5, #0
 8007d48:	4606      	mov	r6, r0
 8007d4a:	db01      	blt.n	8007d50 <_malloc_r+0x1c>
 8007d4c:	42a9      	cmp	r1, r5
 8007d4e:	d904      	bls.n	8007d5a <_malloc_r+0x26>
 8007d50:	230c      	movs	r3, #12
 8007d52:	6033      	str	r3, [r6, #0]
 8007d54:	2000      	movs	r0, #0
 8007d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e30 <_malloc_r+0xfc>
 8007d5e:	f000 f87b 	bl	8007e58 <__malloc_lock>
 8007d62:	f8d8 3000 	ldr.w	r3, [r8]
 8007d66:	461c      	mov	r4, r3
 8007d68:	bb44      	cbnz	r4, 8007dbc <_malloc_r+0x88>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff ffbf 	bl	8007cf0 <sbrk_aligned>
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	4604      	mov	r4, r0
 8007d76:	d158      	bne.n	8007e2a <_malloc_r+0xf6>
 8007d78:	f8d8 4000 	ldr.w	r4, [r8]
 8007d7c:	4627      	mov	r7, r4
 8007d7e:	2f00      	cmp	r7, #0
 8007d80:	d143      	bne.n	8007e0a <_malloc_r+0xd6>
 8007d82:	2c00      	cmp	r4, #0
 8007d84:	d04b      	beq.n	8007e1e <_malloc_r+0xea>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	4639      	mov	r1, r7
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	eb04 0903 	add.w	r9, r4, r3
 8007d90:	f001 f99e 	bl	80090d0 <_sbrk_r>
 8007d94:	4581      	cmp	r9, r0
 8007d96:	d142      	bne.n	8007e1e <_malloc_r+0xea>
 8007d98:	6821      	ldr	r1, [r4, #0]
 8007d9a:	1a6d      	subs	r5, r5, r1
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4630      	mov	r0, r6
 8007da0:	f7ff ffa6 	bl	8007cf0 <sbrk_aligned>
 8007da4:	3001      	adds	r0, #1
 8007da6:	d03a      	beq.n	8007e1e <_malloc_r+0xea>
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	442b      	add	r3, r5
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	f8d8 3000 	ldr.w	r3, [r8]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	bb62      	cbnz	r2, 8007e10 <_malloc_r+0xdc>
 8007db6:	f8c8 7000 	str.w	r7, [r8]
 8007dba:	e00f      	b.n	8007ddc <_malloc_r+0xa8>
 8007dbc:	6822      	ldr	r2, [r4, #0]
 8007dbe:	1b52      	subs	r2, r2, r5
 8007dc0:	d420      	bmi.n	8007e04 <_malloc_r+0xd0>
 8007dc2:	2a0b      	cmp	r2, #11
 8007dc4:	d917      	bls.n	8007df6 <_malloc_r+0xc2>
 8007dc6:	1961      	adds	r1, r4, r5
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	6025      	str	r5, [r4, #0]
 8007dcc:	bf18      	it	ne
 8007dce:	6059      	strne	r1, [r3, #4]
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	bf08      	it	eq
 8007dd4:	f8c8 1000 	streq.w	r1, [r8]
 8007dd8:	5162      	str	r2, [r4, r5]
 8007dda:	604b      	str	r3, [r1, #4]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f841 	bl	8007e64 <__malloc_unlock>
 8007de2:	f104 000b 	add.w	r0, r4, #11
 8007de6:	1d23      	adds	r3, r4, #4
 8007de8:	f020 0007 	bic.w	r0, r0, #7
 8007dec:	1ac2      	subs	r2, r0, r3
 8007dee:	bf1c      	itt	ne
 8007df0:	1a1b      	subne	r3, r3, r0
 8007df2:	50a3      	strne	r3, [r4, r2]
 8007df4:	e7af      	b.n	8007d56 <_malloc_r+0x22>
 8007df6:	6862      	ldr	r2, [r4, #4]
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	bf0c      	ite	eq
 8007dfc:	f8c8 2000 	streq.w	r2, [r8]
 8007e00:	605a      	strne	r2, [r3, #4]
 8007e02:	e7eb      	b.n	8007ddc <_malloc_r+0xa8>
 8007e04:	4623      	mov	r3, r4
 8007e06:	6864      	ldr	r4, [r4, #4]
 8007e08:	e7ae      	b.n	8007d68 <_malloc_r+0x34>
 8007e0a:	463c      	mov	r4, r7
 8007e0c:	687f      	ldr	r7, [r7, #4]
 8007e0e:	e7b6      	b.n	8007d7e <_malloc_r+0x4a>
 8007e10:	461a      	mov	r2, r3
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d1fb      	bne.n	8007e10 <_malloc_r+0xdc>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6053      	str	r3, [r2, #4]
 8007e1c:	e7de      	b.n	8007ddc <_malloc_r+0xa8>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	4630      	mov	r0, r6
 8007e24:	f000 f81e 	bl	8007e64 <__malloc_unlock>
 8007e28:	e794      	b.n	8007d54 <_malloc_r+0x20>
 8007e2a:	6005      	str	r5, [r0, #0]
 8007e2c:	e7d6      	b.n	8007ddc <_malloc_r+0xa8>
 8007e2e:	bf00      	nop
 8007e30:	20000638 	.word	0x20000638

08007e34 <__ascii_mbtowc>:
 8007e34:	b082      	sub	sp, #8
 8007e36:	b901      	cbnz	r1, 8007e3a <__ascii_mbtowc+0x6>
 8007e38:	a901      	add	r1, sp, #4
 8007e3a:	b142      	cbz	r2, 8007e4e <__ascii_mbtowc+0x1a>
 8007e3c:	b14b      	cbz	r3, 8007e52 <__ascii_mbtowc+0x1e>
 8007e3e:	7813      	ldrb	r3, [r2, #0]
 8007e40:	600b      	str	r3, [r1, #0]
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	1e10      	subs	r0, r2, #0
 8007e46:	bf18      	it	ne
 8007e48:	2001      	movne	r0, #1
 8007e4a:	b002      	add	sp, #8
 8007e4c:	4770      	bx	lr
 8007e4e:	4610      	mov	r0, r2
 8007e50:	e7fb      	b.n	8007e4a <__ascii_mbtowc+0x16>
 8007e52:	f06f 0001 	mvn.w	r0, #1
 8007e56:	e7f8      	b.n	8007e4a <__ascii_mbtowc+0x16>

08007e58 <__malloc_lock>:
 8007e58:	4801      	ldr	r0, [pc, #4]	@ (8007e60 <__malloc_lock+0x8>)
 8007e5a:	f7fe bd34 	b.w	80068c6 <__retarget_lock_acquire_recursive>
 8007e5e:	bf00      	nop
 8007e60:	20000630 	.word	0x20000630

08007e64 <__malloc_unlock>:
 8007e64:	4801      	ldr	r0, [pc, #4]	@ (8007e6c <__malloc_unlock+0x8>)
 8007e66:	f7fe bd2f 	b.w	80068c8 <__retarget_lock_release_recursive>
 8007e6a:	bf00      	nop
 8007e6c:	20000630 	.word	0x20000630

08007e70 <_Balloc>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	69c6      	ldr	r6, [r0, #28]
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	b976      	cbnz	r6, 8007e98 <_Balloc+0x28>
 8007e7a:	2010      	movs	r0, #16
 8007e7c:	f7ff ff30 	bl	8007ce0 <malloc>
 8007e80:	4602      	mov	r2, r0
 8007e82:	61e0      	str	r0, [r4, #28]
 8007e84:	b920      	cbnz	r0, 8007e90 <_Balloc+0x20>
 8007e86:	4b18      	ldr	r3, [pc, #96]	@ (8007ee8 <_Balloc+0x78>)
 8007e88:	4818      	ldr	r0, [pc, #96]	@ (8007eec <_Balloc+0x7c>)
 8007e8a:	216b      	movs	r1, #107	@ 0x6b
 8007e8c:	f7fe fd3a 	bl	8006904 <__assert_func>
 8007e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e94:	6006      	str	r6, [r0, #0]
 8007e96:	60c6      	str	r6, [r0, #12]
 8007e98:	69e6      	ldr	r6, [r4, #28]
 8007e9a:	68f3      	ldr	r3, [r6, #12]
 8007e9c:	b183      	cbz	r3, 8007ec0 <_Balloc+0x50>
 8007e9e:	69e3      	ldr	r3, [r4, #28]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ea6:	b9b8      	cbnz	r0, 8007ed8 <_Balloc+0x68>
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8007eae:	1d72      	adds	r2, r6, #5
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f001 f923 	bl	80090fe <_calloc_r>
 8007eb8:	b160      	cbz	r0, 8007ed4 <_Balloc+0x64>
 8007eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ebe:	e00e      	b.n	8007ede <_Balloc+0x6e>
 8007ec0:	2221      	movs	r2, #33	@ 0x21
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f001 f91a 	bl	80090fe <_calloc_r>
 8007eca:	69e3      	ldr	r3, [r4, #28]
 8007ecc:	60f0      	str	r0, [r6, #12]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e4      	bne.n	8007e9e <_Balloc+0x2e>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	6802      	ldr	r2, [r0, #0]
 8007eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ee4:	e7f7      	b.n	8007ed6 <_Balloc+0x66>
 8007ee6:	bf00      	nop
 8007ee8:	08009332 	.word	0x08009332
 8007eec:	08009412 	.word	0x08009412

08007ef0 <_Bfree>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	69c6      	ldr	r6, [r0, #28]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	b976      	cbnz	r6, 8007f18 <_Bfree+0x28>
 8007efa:	2010      	movs	r0, #16
 8007efc:	f7ff fef0 	bl	8007ce0 <malloc>
 8007f00:	4602      	mov	r2, r0
 8007f02:	61e8      	str	r0, [r5, #28]
 8007f04:	b920      	cbnz	r0, 8007f10 <_Bfree+0x20>
 8007f06:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <_Bfree+0x3c>)
 8007f08:	4809      	ldr	r0, [pc, #36]	@ (8007f30 <_Bfree+0x40>)
 8007f0a:	218f      	movs	r1, #143	@ 0x8f
 8007f0c:	f7fe fcfa 	bl	8006904 <__assert_func>
 8007f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f14:	6006      	str	r6, [r0, #0]
 8007f16:	60c6      	str	r6, [r0, #12]
 8007f18:	b13c      	cbz	r4, 8007f2a <_Bfree+0x3a>
 8007f1a:	69eb      	ldr	r3, [r5, #28]
 8007f1c:	6862      	ldr	r2, [r4, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f24:	6021      	str	r1, [r4, #0]
 8007f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	08009332 	.word	0x08009332
 8007f30:	08009412 	.word	0x08009412

08007f34 <__multadd>:
 8007f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f38:	690d      	ldr	r5, [r1, #16]
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	461e      	mov	r6, r3
 8007f40:	f101 0c14 	add.w	ip, r1, #20
 8007f44:	2000      	movs	r0, #0
 8007f46:	f8dc 3000 	ldr.w	r3, [ip]
 8007f4a:	b299      	uxth	r1, r3
 8007f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f50:	0c1e      	lsrs	r6, r3, #16
 8007f52:	0c0b      	lsrs	r3, r1, #16
 8007f54:	fb02 3306 	mla	r3, r2, r6, r3
 8007f58:	b289      	uxth	r1, r1
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f60:	4285      	cmp	r5, r0
 8007f62:	f84c 1b04 	str.w	r1, [ip], #4
 8007f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f6a:	dcec      	bgt.n	8007f46 <__multadd+0x12>
 8007f6c:	b30e      	cbz	r6, 8007fb2 <__multadd+0x7e>
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	dc19      	bgt.n	8007fa8 <__multadd+0x74>
 8007f74:	6861      	ldr	r1, [r4, #4]
 8007f76:	4638      	mov	r0, r7
 8007f78:	3101      	adds	r1, #1
 8007f7a:	f7ff ff79 	bl	8007e70 <_Balloc>
 8007f7e:	4680      	mov	r8, r0
 8007f80:	b928      	cbnz	r0, 8007f8e <__multadd+0x5a>
 8007f82:	4602      	mov	r2, r0
 8007f84:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <__multadd+0x84>)
 8007f86:	480d      	ldr	r0, [pc, #52]	@ (8007fbc <__multadd+0x88>)
 8007f88:	21ba      	movs	r1, #186	@ 0xba
 8007f8a:	f7fe fcbb 	bl	8006904 <__assert_func>
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	3202      	adds	r2, #2
 8007f92:	f104 010c 	add.w	r1, r4, #12
 8007f96:	0092      	lsls	r2, r2, #2
 8007f98:	300c      	adds	r0, #12
 8007f9a:	f7fe fc96 	bl	80068ca <memcpy>
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff ffa5 	bl	8007ef0 <_Bfree>
 8007fa6:	4644      	mov	r4, r8
 8007fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fac:	3501      	adds	r5, #1
 8007fae:	615e      	str	r6, [r3, #20]
 8007fb0:	6125      	str	r5, [r4, #16]
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	080093a1 	.word	0x080093a1
 8007fbc:	08009412 	.word	0x08009412

08007fc0 <__s2b>:
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	4615      	mov	r5, r2
 8007fc8:	461f      	mov	r7, r3
 8007fca:	2209      	movs	r2, #9
 8007fcc:	3308      	adds	r3, #8
 8007fce:	4606      	mov	r6, r0
 8007fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	db09      	blt.n	8007ff0 <__s2b+0x30>
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7ff ff47 	bl	8007e70 <_Balloc>
 8007fe2:	b940      	cbnz	r0, 8007ff6 <__s2b+0x36>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	4b19      	ldr	r3, [pc, #100]	@ (800804c <__s2b+0x8c>)
 8007fe8:	4819      	ldr	r0, [pc, #100]	@ (8008050 <__s2b+0x90>)
 8007fea:	21d3      	movs	r1, #211	@ 0xd3
 8007fec:	f7fe fc8a 	bl	8006904 <__assert_func>
 8007ff0:	0052      	lsls	r2, r2, #1
 8007ff2:	3101      	adds	r1, #1
 8007ff4:	e7f0      	b.n	8007fd8 <__s2b+0x18>
 8007ff6:	9b08      	ldr	r3, [sp, #32]
 8007ff8:	6143      	str	r3, [r0, #20]
 8007ffa:	2d09      	cmp	r5, #9
 8007ffc:	f04f 0301 	mov.w	r3, #1
 8008000:	6103      	str	r3, [r0, #16]
 8008002:	dd16      	ble.n	8008032 <__s2b+0x72>
 8008004:	f104 0909 	add.w	r9, r4, #9
 8008008:	46c8      	mov	r8, r9
 800800a:	442c      	add	r4, r5
 800800c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008010:	4601      	mov	r1, r0
 8008012:	3b30      	subs	r3, #48	@ 0x30
 8008014:	220a      	movs	r2, #10
 8008016:	4630      	mov	r0, r6
 8008018:	f7ff ff8c 	bl	8007f34 <__multadd>
 800801c:	45a0      	cmp	r8, r4
 800801e:	d1f5      	bne.n	800800c <__s2b+0x4c>
 8008020:	f1a5 0408 	sub.w	r4, r5, #8
 8008024:	444c      	add	r4, r9
 8008026:	1b2d      	subs	r5, r5, r4
 8008028:	1963      	adds	r3, r4, r5
 800802a:	42bb      	cmp	r3, r7
 800802c:	db04      	blt.n	8008038 <__s2b+0x78>
 800802e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008032:	340a      	adds	r4, #10
 8008034:	2509      	movs	r5, #9
 8008036:	e7f6      	b.n	8008026 <__s2b+0x66>
 8008038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800803c:	4601      	mov	r1, r0
 800803e:	3b30      	subs	r3, #48	@ 0x30
 8008040:	220a      	movs	r2, #10
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ff76 	bl	8007f34 <__multadd>
 8008048:	e7ee      	b.n	8008028 <__s2b+0x68>
 800804a:	bf00      	nop
 800804c:	080093a1 	.word	0x080093a1
 8008050:	08009412 	.word	0x08009412

08008054 <__hi0bits>:
 8008054:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008058:	4603      	mov	r3, r0
 800805a:	bf36      	itet	cc
 800805c:	0403      	lslcc	r3, r0, #16
 800805e:	2000      	movcs	r0, #0
 8008060:	2010      	movcc	r0, #16
 8008062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008066:	bf3c      	itt	cc
 8008068:	021b      	lslcc	r3, r3, #8
 800806a:	3008      	addcc	r0, #8
 800806c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008070:	bf3c      	itt	cc
 8008072:	011b      	lslcc	r3, r3, #4
 8008074:	3004      	addcc	r0, #4
 8008076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807a:	bf3c      	itt	cc
 800807c:	009b      	lslcc	r3, r3, #2
 800807e:	3002      	addcc	r0, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	db05      	blt.n	8008090 <__hi0bits+0x3c>
 8008084:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008088:	f100 0001 	add.w	r0, r0, #1
 800808c:	bf08      	it	eq
 800808e:	2020      	moveq	r0, #32
 8008090:	4770      	bx	lr

08008092 <__lo0bits>:
 8008092:	6803      	ldr	r3, [r0, #0]
 8008094:	4602      	mov	r2, r0
 8008096:	f013 0007 	ands.w	r0, r3, #7
 800809a:	d00b      	beq.n	80080b4 <__lo0bits+0x22>
 800809c:	07d9      	lsls	r1, r3, #31
 800809e:	d421      	bmi.n	80080e4 <__lo0bits+0x52>
 80080a0:	0798      	lsls	r0, r3, #30
 80080a2:	bf49      	itett	mi
 80080a4:	085b      	lsrmi	r3, r3, #1
 80080a6:	089b      	lsrpl	r3, r3, #2
 80080a8:	2001      	movmi	r0, #1
 80080aa:	6013      	strmi	r3, [r2, #0]
 80080ac:	bf5c      	itt	pl
 80080ae:	6013      	strpl	r3, [r2, #0]
 80080b0:	2002      	movpl	r0, #2
 80080b2:	4770      	bx	lr
 80080b4:	b299      	uxth	r1, r3
 80080b6:	b909      	cbnz	r1, 80080bc <__lo0bits+0x2a>
 80080b8:	0c1b      	lsrs	r3, r3, #16
 80080ba:	2010      	movs	r0, #16
 80080bc:	b2d9      	uxtb	r1, r3
 80080be:	b909      	cbnz	r1, 80080c4 <__lo0bits+0x32>
 80080c0:	3008      	adds	r0, #8
 80080c2:	0a1b      	lsrs	r3, r3, #8
 80080c4:	0719      	lsls	r1, r3, #28
 80080c6:	bf04      	itt	eq
 80080c8:	091b      	lsreq	r3, r3, #4
 80080ca:	3004      	addeq	r0, #4
 80080cc:	0799      	lsls	r1, r3, #30
 80080ce:	bf04      	itt	eq
 80080d0:	089b      	lsreq	r3, r3, #2
 80080d2:	3002      	addeq	r0, #2
 80080d4:	07d9      	lsls	r1, r3, #31
 80080d6:	d403      	bmi.n	80080e0 <__lo0bits+0x4e>
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	f100 0001 	add.w	r0, r0, #1
 80080de:	d003      	beq.n	80080e8 <__lo0bits+0x56>
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	4770      	bx	lr
 80080e4:	2000      	movs	r0, #0
 80080e6:	4770      	bx	lr
 80080e8:	2020      	movs	r0, #32
 80080ea:	4770      	bx	lr

080080ec <__i2b>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	460c      	mov	r4, r1
 80080f0:	2101      	movs	r1, #1
 80080f2:	f7ff febd 	bl	8007e70 <_Balloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	b928      	cbnz	r0, 8008106 <__i2b+0x1a>
 80080fa:	4b05      	ldr	r3, [pc, #20]	@ (8008110 <__i2b+0x24>)
 80080fc:	4805      	ldr	r0, [pc, #20]	@ (8008114 <__i2b+0x28>)
 80080fe:	f240 1145 	movw	r1, #325	@ 0x145
 8008102:	f7fe fbff 	bl	8006904 <__assert_func>
 8008106:	2301      	movs	r3, #1
 8008108:	6144      	str	r4, [r0, #20]
 800810a:	6103      	str	r3, [r0, #16]
 800810c:	bd10      	pop	{r4, pc}
 800810e:	bf00      	nop
 8008110:	080093a1 	.word	0x080093a1
 8008114:	08009412 	.word	0x08009412

08008118 <__multiply>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4614      	mov	r4, r2
 800811e:	690a      	ldr	r2, [r1, #16]
 8008120:	6923      	ldr	r3, [r4, #16]
 8008122:	429a      	cmp	r2, r3
 8008124:	bfa8      	it	ge
 8008126:	4623      	movge	r3, r4
 8008128:	460f      	mov	r7, r1
 800812a:	bfa4      	itt	ge
 800812c:	460c      	movge	r4, r1
 800812e:	461f      	movge	r7, r3
 8008130:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008134:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	6861      	ldr	r1, [r4, #4]
 800813c:	eb0a 0609 	add.w	r6, sl, r9
 8008140:	42b3      	cmp	r3, r6
 8008142:	b085      	sub	sp, #20
 8008144:	bfb8      	it	lt
 8008146:	3101      	addlt	r1, #1
 8008148:	f7ff fe92 	bl	8007e70 <_Balloc>
 800814c:	b930      	cbnz	r0, 800815c <__multiply+0x44>
 800814e:	4602      	mov	r2, r0
 8008150:	4b44      	ldr	r3, [pc, #272]	@ (8008264 <__multiply+0x14c>)
 8008152:	4845      	ldr	r0, [pc, #276]	@ (8008268 <__multiply+0x150>)
 8008154:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008158:	f7fe fbd4 	bl	8006904 <__assert_func>
 800815c:	f100 0514 	add.w	r5, r0, #20
 8008160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008164:	462b      	mov	r3, r5
 8008166:	2200      	movs	r2, #0
 8008168:	4543      	cmp	r3, r8
 800816a:	d321      	bcc.n	80081b0 <__multiply+0x98>
 800816c:	f107 0114 	add.w	r1, r7, #20
 8008170:	f104 0214 	add.w	r2, r4, #20
 8008174:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008178:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800817c:	9302      	str	r3, [sp, #8]
 800817e:	1b13      	subs	r3, r2, r4
 8008180:	3b15      	subs	r3, #21
 8008182:	f023 0303 	bic.w	r3, r3, #3
 8008186:	3304      	adds	r3, #4
 8008188:	f104 0715 	add.w	r7, r4, #21
 800818c:	42ba      	cmp	r2, r7
 800818e:	bf38      	it	cc
 8008190:	2304      	movcc	r3, #4
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	9b02      	ldr	r3, [sp, #8]
 8008196:	9103      	str	r1, [sp, #12]
 8008198:	428b      	cmp	r3, r1
 800819a:	d80c      	bhi.n	80081b6 <__multiply+0x9e>
 800819c:	2e00      	cmp	r6, #0
 800819e:	dd03      	ble.n	80081a8 <__multiply+0x90>
 80081a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d05b      	beq.n	8008260 <__multiply+0x148>
 80081a8:	6106      	str	r6, [r0, #16]
 80081aa:	b005      	add	sp, #20
 80081ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b0:	f843 2b04 	str.w	r2, [r3], #4
 80081b4:	e7d8      	b.n	8008168 <__multiply+0x50>
 80081b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80081ba:	f1ba 0f00 	cmp.w	sl, #0
 80081be:	d024      	beq.n	800820a <__multiply+0xf2>
 80081c0:	f104 0e14 	add.w	lr, r4, #20
 80081c4:	46a9      	mov	r9, r5
 80081c6:	f04f 0c00 	mov.w	ip, #0
 80081ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081ce:	f8d9 3000 	ldr.w	r3, [r9]
 80081d2:	fa1f fb87 	uxth.w	fp, r7
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80081dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80081e0:	f8d9 7000 	ldr.w	r7, [r9]
 80081e4:	4463      	add	r3, ip
 80081e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80081ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081f8:	4572      	cmp	r2, lr
 80081fa:	f849 3b04 	str.w	r3, [r9], #4
 80081fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008202:	d8e2      	bhi.n	80081ca <__multiply+0xb2>
 8008204:	9b01      	ldr	r3, [sp, #4]
 8008206:	f845 c003 	str.w	ip, [r5, r3]
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008210:	3104      	adds	r1, #4
 8008212:	f1b9 0f00 	cmp.w	r9, #0
 8008216:	d021      	beq.n	800825c <__multiply+0x144>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	f104 0c14 	add.w	ip, r4, #20
 800821e:	46ae      	mov	lr, r5
 8008220:	f04f 0a00 	mov.w	sl, #0
 8008224:	f8bc b000 	ldrh.w	fp, [ip]
 8008228:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800822c:	fb09 770b 	mla	r7, r9, fp, r7
 8008230:	4457      	add	r7, sl
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008238:	f84e 3b04 	str.w	r3, [lr], #4
 800823c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008244:	f8be 3000 	ldrh.w	r3, [lr]
 8008248:	fb09 330a 	mla	r3, r9, sl, r3
 800824c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008250:	4562      	cmp	r2, ip
 8008252:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008256:	d8e5      	bhi.n	8008224 <__multiply+0x10c>
 8008258:	9f01      	ldr	r7, [sp, #4]
 800825a:	51eb      	str	r3, [r5, r7]
 800825c:	3504      	adds	r5, #4
 800825e:	e799      	b.n	8008194 <__multiply+0x7c>
 8008260:	3e01      	subs	r6, #1
 8008262:	e79b      	b.n	800819c <__multiply+0x84>
 8008264:	080093a1 	.word	0x080093a1
 8008268:	08009412 	.word	0x08009412

0800826c <__pow5mult>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	4615      	mov	r5, r2
 8008272:	f012 0203 	ands.w	r2, r2, #3
 8008276:	4607      	mov	r7, r0
 8008278:	460e      	mov	r6, r1
 800827a:	d007      	beq.n	800828c <__pow5mult+0x20>
 800827c:	4c25      	ldr	r4, [pc, #148]	@ (8008314 <__pow5mult+0xa8>)
 800827e:	3a01      	subs	r2, #1
 8008280:	2300      	movs	r3, #0
 8008282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008286:	f7ff fe55 	bl	8007f34 <__multadd>
 800828a:	4606      	mov	r6, r0
 800828c:	10ad      	asrs	r5, r5, #2
 800828e:	d03d      	beq.n	800830c <__pow5mult+0xa0>
 8008290:	69fc      	ldr	r4, [r7, #28]
 8008292:	b97c      	cbnz	r4, 80082b4 <__pow5mult+0x48>
 8008294:	2010      	movs	r0, #16
 8008296:	f7ff fd23 	bl	8007ce0 <malloc>
 800829a:	4602      	mov	r2, r0
 800829c:	61f8      	str	r0, [r7, #28]
 800829e:	b928      	cbnz	r0, 80082ac <__pow5mult+0x40>
 80082a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <__pow5mult+0xac>)
 80082a2:	481e      	ldr	r0, [pc, #120]	@ (800831c <__pow5mult+0xb0>)
 80082a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082a8:	f7fe fb2c 	bl	8006904 <__assert_func>
 80082ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b0:	6004      	str	r4, [r0, #0]
 80082b2:	60c4      	str	r4, [r0, #12]
 80082b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082bc:	b94c      	cbnz	r4, 80082d2 <__pow5mult+0x66>
 80082be:	f240 2171 	movw	r1, #625	@ 0x271
 80082c2:	4638      	mov	r0, r7
 80082c4:	f7ff ff12 	bl	80080ec <__i2b>
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80082ce:	4604      	mov	r4, r0
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	07eb      	lsls	r3, r5, #31
 80082d8:	d50a      	bpl.n	80082f0 <__pow5mult+0x84>
 80082da:	4631      	mov	r1, r6
 80082dc:	4622      	mov	r2, r4
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff ff1a 	bl	8008118 <__multiply>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4680      	mov	r8, r0
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff fe01 	bl	8007ef0 <_Bfree>
 80082ee:	4646      	mov	r6, r8
 80082f0:	106d      	asrs	r5, r5, #1
 80082f2:	d00b      	beq.n	800830c <__pow5mult+0xa0>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	b938      	cbnz	r0, 8008308 <__pow5mult+0x9c>
 80082f8:	4622      	mov	r2, r4
 80082fa:	4621      	mov	r1, r4
 80082fc:	4638      	mov	r0, r7
 80082fe:	f7ff ff0b 	bl	8008118 <__multiply>
 8008302:	6020      	str	r0, [r4, #0]
 8008304:	f8c0 9000 	str.w	r9, [r0]
 8008308:	4604      	mov	r4, r0
 800830a:	e7e4      	b.n	80082d6 <__pow5mult+0x6a>
 800830c:	4630      	mov	r0, r6
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	bf00      	nop
 8008314:	0800946c 	.word	0x0800946c
 8008318:	08009332 	.word	0x08009332
 800831c:	08009412 	.word	0x08009412

08008320 <__lshift>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	460c      	mov	r4, r1
 8008326:	6849      	ldr	r1, [r1, #4]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	4607      	mov	r7, r0
 8008332:	4691      	mov	r9, r2
 8008334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008338:	f108 0601 	add.w	r6, r8, #1
 800833c:	42b3      	cmp	r3, r6
 800833e:	db0b      	blt.n	8008358 <__lshift+0x38>
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff fd95 	bl	8007e70 <_Balloc>
 8008346:	4605      	mov	r5, r0
 8008348:	b948      	cbnz	r0, 800835e <__lshift+0x3e>
 800834a:	4602      	mov	r2, r0
 800834c:	4b28      	ldr	r3, [pc, #160]	@ (80083f0 <__lshift+0xd0>)
 800834e:	4829      	ldr	r0, [pc, #164]	@ (80083f4 <__lshift+0xd4>)
 8008350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008354:	f7fe fad6 	bl	8006904 <__assert_func>
 8008358:	3101      	adds	r1, #1
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	e7ee      	b.n	800833c <__lshift+0x1c>
 800835e:	2300      	movs	r3, #0
 8008360:	f100 0114 	add.w	r1, r0, #20
 8008364:	f100 0210 	add.w	r2, r0, #16
 8008368:	4618      	mov	r0, r3
 800836a:	4553      	cmp	r3, sl
 800836c:	db33      	blt.n	80083d6 <__lshift+0xb6>
 800836e:	6920      	ldr	r0, [r4, #16]
 8008370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008374:	f104 0314 	add.w	r3, r4, #20
 8008378:	f019 091f 	ands.w	r9, r9, #31
 800837c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008380:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008384:	d02b      	beq.n	80083de <__lshift+0xbe>
 8008386:	f1c9 0e20 	rsb	lr, r9, #32
 800838a:	468a      	mov	sl, r1
 800838c:	2200      	movs	r2, #0
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	fa00 f009 	lsl.w	r0, r0, r9
 8008394:	4310      	orrs	r0, r2
 8008396:	f84a 0b04 	str.w	r0, [sl], #4
 800839a:	f853 2b04 	ldr.w	r2, [r3], #4
 800839e:	459c      	cmp	ip, r3
 80083a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80083a4:	d8f3      	bhi.n	800838e <__lshift+0x6e>
 80083a6:	ebac 0304 	sub.w	r3, ip, r4
 80083aa:	3b15      	subs	r3, #21
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	3304      	adds	r3, #4
 80083b2:	f104 0015 	add.w	r0, r4, #21
 80083b6:	4584      	cmp	ip, r0
 80083b8:	bf38      	it	cc
 80083ba:	2304      	movcc	r3, #4
 80083bc:	50ca      	str	r2, [r1, r3]
 80083be:	b10a      	cbz	r2, 80083c4 <__lshift+0xa4>
 80083c0:	f108 0602 	add.w	r6, r8, #2
 80083c4:	3e01      	subs	r6, #1
 80083c6:	4638      	mov	r0, r7
 80083c8:	612e      	str	r6, [r5, #16]
 80083ca:	4621      	mov	r1, r4
 80083cc:	f7ff fd90 	bl	8007ef0 <_Bfree>
 80083d0:	4628      	mov	r0, r5
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80083da:	3301      	adds	r3, #1
 80083dc:	e7c5      	b.n	800836a <__lshift+0x4a>
 80083de:	3904      	subs	r1, #4
 80083e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80083e8:	459c      	cmp	ip, r3
 80083ea:	d8f9      	bhi.n	80083e0 <__lshift+0xc0>
 80083ec:	e7ea      	b.n	80083c4 <__lshift+0xa4>
 80083ee:	bf00      	nop
 80083f0:	080093a1 	.word	0x080093a1
 80083f4:	08009412 	.word	0x08009412

080083f8 <__mcmp>:
 80083f8:	690a      	ldr	r2, [r1, #16]
 80083fa:	4603      	mov	r3, r0
 80083fc:	6900      	ldr	r0, [r0, #16]
 80083fe:	1a80      	subs	r0, r0, r2
 8008400:	b530      	push	{r4, r5, lr}
 8008402:	d10e      	bne.n	8008422 <__mcmp+0x2a>
 8008404:	3314      	adds	r3, #20
 8008406:	3114      	adds	r1, #20
 8008408:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800840c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008418:	4295      	cmp	r5, r2
 800841a:	d003      	beq.n	8008424 <__mcmp+0x2c>
 800841c:	d205      	bcs.n	800842a <__mcmp+0x32>
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	bd30      	pop	{r4, r5, pc}
 8008424:	42a3      	cmp	r3, r4
 8008426:	d3f3      	bcc.n	8008410 <__mcmp+0x18>
 8008428:	e7fb      	b.n	8008422 <__mcmp+0x2a>
 800842a:	2001      	movs	r0, #1
 800842c:	e7f9      	b.n	8008422 <__mcmp+0x2a>
	...

08008430 <__mdiff>:
 8008430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	4689      	mov	r9, r1
 8008436:	4606      	mov	r6, r0
 8008438:	4611      	mov	r1, r2
 800843a:	4648      	mov	r0, r9
 800843c:	4614      	mov	r4, r2
 800843e:	f7ff ffdb 	bl	80083f8 <__mcmp>
 8008442:	1e05      	subs	r5, r0, #0
 8008444:	d112      	bne.n	800846c <__mdiff+0x3c>
 8008446:	4629      	mov	r1, r5
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff fd11 	bl	8007e70 <_Balloc>
 800844e:	4602      	mov	r2, r0
 8008450:	b928      	cbnz	r0, 800845e <__mdiff+0x2e>
 8008452:	4b3f      	ldr	r3, [pc, #252]	@ (8008550 <__mdiff+0x120>)
 8008454:	f240 2137 	movw	r1, #567	@ 0x237
 8008458:	483e      	ldr	r0, [pc, #248]	@ (8008554 <__mdiff+0x124>)
 800845a:	f7fe fa53 	bl	8006904 <__assert_func>
 800845e:	2301      	movs	r3, #1
 8008460:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008464:	4610      	mov	r0, r2
 8008466:	b003      	add	sp, #12
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	bfbc      	itt	lt
 800846e:	464b      	movlt	r3, r9
 8008470:	46a1      	movlt	r9, r4
 8008472:	4630      	mov	r0, r6
 8008474:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008478:	bfba      	itte	lt
 800847a:	461c      	movlt	r4, r3
 800847c:	2501      	movlt	r5, #1
 800847e:	2500      	movge	r5, #0
 8008480:	f7ff fcf6 	bl	8007e70 <_Balloc>
 8008484:	4602      	mov	r2, r0
 8008486:	b918      	cbnz	r0, 8008490 <__mdiff+0x60>
 8008488:	4b31      	ldr	r3, [pc, #196]	@ (8008550 <__mdiff+0x120>)
 800848a:	f240 2145 	movw	r1, #581	@ 0x245
 800848e:	e7e3      	b.n	8008458 <__mdiff+0x28>
 8008490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008494:	6926      	ldr	r6, [r4, #16]
 8008496:	60c5      	str	r5, [r0, #12]
 8008498:	f109 0310 	add.w	r3, r9, #16
 800849c:	f109 0514 	add.w	r5, r9, #20
 80084a0:	f104 0e14 	add.w	lr, r4, #20
 80084a4:	f100 0b14 	add.w	fp, r0, #20
 80084a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084b0:	9301      	str	r3, [sp, #4]
 80084b2:	46d9      	mov	r9, fp
 80084b4:	f04f 0c00 	mov.w	ip, #0
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	fa1f f38a 	uxth.w	r3, sl
 80084c8:	4619      	mov	r1, r3
 80084ca:	b283      	uxth	r3, r0
 80084cc:	1acb      	subs	r3, r1, r3
 80084ce:	0c00      	lsrs	r0, r0, #16
 80084d0:	4463      	add	r3, ip
 80084d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084da:	b29b      	uxth	r3, r3
 80084dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084e0:	4576      	cmp	r6, lr
 80084e2:	f849 3b04 	str.w	r3, [r9], #4
 80084e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084ea:	d8e5      	bhi.n	80084b8 <__mdiff+0x88>
 80084ec:	1b33      	subs	r3, r6, r4
 80084ee:	3b15      	subs	r3, #21
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	3415      	adds	r4, #21
 80084f6:	3304      	adds	r3, #4
 80084f8:	42a6      	cmp	r6, r4
 80084fa:	bf38      	it	cc
 80084fc:	2304      	movcc	r3, #4
 80084fe:	441d      	add	r5, r3
 8008500:	445b      	add	r3, fp
 8008502:	461e      	mov	r6, r3
 8008504:	462c      	mov	r4, r5
 8008506:	4544      	cmp	r4, r8
 8008508:	d30e      	bcc.n	8008528 <__mdiff+0xf8>
 800850a:	f108 0103 	add.w	r1, r8, #3
 800850e:	1b49      	subs	r1, r1, r5
 8008510:	f021 0103 	bic.w	r1, r1, #3
 8008514:	3d03      	subs	r5, #3
 8008516:	45a8      	cmp	r8, r5
 8008518:	bf38      	it	cc
 800851a:	2100      	movcc	r1, #0
 800851c:	440b      	add	r3, r1
 800851e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008522:	b191      	cbz	r1, 800854a <__mdiff+0x11a>
 8008524:	6117      	str	r7, [r2, #16]
 8008526:	e79d      	b.n	8008464 <__mdiff+0x34>
 8008528:	f854 1b04 	ldr.w	r1, [r4], #4
 800852c:	46e6      	mov	lr, ip
 800852e:	0c08      	lsrs	r0, r1, #16
 8008530:	fa1c fc81 	uxtah	ip, ip, r1
 8008534:	4471      	add	r1, lr
 8008536:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800853a:	b289      	uxth	r1, r1
 800853c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008540:	f846 1b04 	str.w	r1, [r6], #4
 8008544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008548:	e7dd      	b.n	8008506 <__mdiff+0xd6>
 800854a:	3f01      	subs	r7, #1
 800854c:	e7e7      	b.n	800851e <__mdiff+0xee>
 800854e:	bf00      	nop
 8008550:	080093a1 	.word	0x080093a1
 8008554:	08009412 	.word	0x08009412

08008558 <__ulp>:
 8008558:	b082      	sub	sp, #8
 800855a:	ed8d 0b00 	vstr	d0, [sp]
 800855e:	9a01      	ldr	r2, [sp, #4]
 8008560:	4b0f      	ldr	r3, [pc, #60]	@ (80085a0 <__ulp+0x48>)
 8008562:	4013      	ands	r3, r2
 8008564:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008568:	2b00      	cmp	r3, #0
 800856a:	dc08      	bgt.n	800857e <__ulp+0x26>
 800856c:	425b      	negs	r3, r3
 800856e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008572:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008576:	da04      	bge.n	8008582 <__ulp+0x2a>
 8008578:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800857c:	4113      	asrs	r3, r2
 800857e:	2200      	movs	r2, #0
 8008580:	e008      	b.n	8008594 <__ulp+0x3c>
 8008582:	f1a2 0314 	sub.w	r3, r2, #20
 8008586:	2b1e      	cmp	r3, #30
 8008588:	bfda      	itte	le
 800858a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800858e:	40da      	lsrle	r2, r3
 8008590:	2201      	movgt	r2, #1
 8008592:	2300      	movs	r3, #0
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	ec41 0b10 	vmov	d0, r0, r1
 800859c:	b002      	add	sp, #8
 800859e:	4770      	bx	lr
 80085a0:	7ff00000 	.word	0x7ff00000

080085a4 <__b2d>:
 80085a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	6906      	ldr	r6, [r0, #16]
 80085aa:	f100 0814 	add.w	r8, r0, #20
 80085ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085b2:	1f37      	subs	r7, r6, #4
 80085b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085b8:	4610      	mov	r0, r2
 80085ba:	f7ff fd4b 	bl	8008054 <__hi0bits>
 80085be:	f1c0 0320 	rsb	r3, r0, #32
 80085c2:	280a      	cmp	r0, #10
 80085c4:	600b      	str	r3, [r1, #0]
 80085c6:	491b      	ldr	r1, [pc, #108]	@ (8008634 <__b2d+0x90>)
 80085c8:	dc15      	bgt.n	80085f6 <__b2d+0x52>
 80085ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80085ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80085d2:	45b8      	cmp	r8, r7
 80085d4:	ea43 0501 	orr.w	r5, r3, r1
 80085d8:	bf34      	ite	cc
 80085da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085de:	2300      	movcs	r3, #0
 80085e0:	3015      	adds	r0, #21
 80085e2:	fa02 f000 	lsl.w	r0, r2, r0
 80085e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80085ea:	4303      	orrs	r3, r0
 80085ec:	461c      	mov	r4, r3
 80085ee:	ec45 4b10 	vmov	d0, r4, r5
 80085f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f6:	45b8      	cmp	r8, r7
 80085f8:	bf3a      	itte	cc
 80085fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008602:	2300      	movcs	r3, #0
 8008604:	380b      	subs	r0, #11
 8008606:	d012      	beq.n	800862e <__b2d+0x8a>
 8008608:	f1c0 0120 	rsb	r1, r0, #32
 800860c:	fa23 f401 	lsr.w	r4, r3, r1
 8008610:	4082      	lsls	r2, r0
 8008612:	4322      	orrs	r2, r4
 8008614:	4547      	cmp	r7, r8
 8008616:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800861a:	bf8c      	ite	hi
 800861c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008620:	2200      	movls	r2, #0
 8008622:	4083      	lsls	r3, r0
 8008624:	40ca      	lsrs	r2, r1
 8008626:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800862a:	4313      	orrs	r3, r2
 800862c:	e7de      	b.n	80085ec <__b2d+0x48>
 800862e:	ea42 0501 	orr.w	r5, r2, r1
 8008632:	e7db      	b.n	80085ec <__b2d+0x48>
 8008634:	3ff00000 	.word	0x3ff00000

08008638 <__d2b>:
 8008638:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800863c:	460f      	mov	r7, r1
 800863e:	2101      	movs	r1, #1
 8008640:	ec59 8b10 	vmov	r8, r9, d0
 8008644:	4616      	mov	r6, r2
 8008646:	f7ff fc13 	bl	8007e70 <_Balloc>
 800864a:	4604      	mov	r4, r0
 800864c:	b930      	cbnz	r0, 800865c <__d2b+0x24>
 800864e:	4602      	mov	r2, r0
 8008650:	4b23      	ldr	r3, [pc, #140]	@ (80086e0 <__d2b+0xa8>)
 8008652:	4824      	ldr	r0, [pc, #144]	@ (80086e4 <__d2b+0xac>)
 8008654:	f240 310f 	movw	r1, #783	@ 0x30f
 8008658:	f7fe f954 	bl	8006904 <__assert_func>
 800865c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008664:	b10d      	cbz	r5, 800866a <__d2b+0x32>
 8008666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	f1b8 0300 	subs.w	r3, r8, #0
 8008670:	d023      	beq.n	80086ba <__d2b+0x82>
 8008672:	4668      	mov	r0, sp
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	f7ff fd0c 	bl	8008092 <__lo0bits>
 800867a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800867e:	b1d0      	cbz	r0, 80086b6 <__d2b+0x7e>
 8008680:	f1c0 0320 	rsb	r3, r0, #32
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	430b      	orrs	r3, r1
 800868a:	40c2      	lsrs	r2, r0
 800868c:	6163      	str	r3, [r4, #20]
 800868e:	9201      	str	r2, [sp, #4]
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	61a3      	str	r3, [r4, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	bf0c      	ite	eq
 8008698:	2201      	moveq	r2, #1
 800869a:	2202      	movne	r2, #2
 800869c:	6122      	str	r2, [r4, #16]
 800869e:	b1a5      	cbz	r5, 80086ca <__d2b+0x92>
 80086a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086a4:	4405      	add	r5, r0
 80086a6:	603d      	str	r5, [r7, #0]
 80086a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086ac:	6030      	str	r0, [r6, #0]
 80086ae:	4620      	mov	r0, r4
 80086b0:	b003      	add	sp, #12
 80086b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086b6:	6161      	str	r1, [r4, #20]
 80086b8:	e7ea      	b.n	8008690 <__d2b+0x58>
 80086ba:	a801      	add	r0, sp, #4
 80086bc:	f7ff fce9 	bl	8008092 <__lo0bits>
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	6163      	str	r3, [r4, #20]
 80086c4:	3020      	adds	r0, #32
 80086c6:	2201      	movs	r2, #1
 80086c8:	e7e8      	b.n	800869c <__d2b+0x64>
 80086ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086d2:	6038      	str	r0, [r7, #0]
 80086d4:	6918      	ldr	r0, [r3, #16]
 80086d6:	f7ff fcbd 	bl	8008054 <__hi0bits>
 80086da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086de:	e7e5      	b.n	80086ac <__d2b+0x74>
 80086e0:	080093a1 	.word	0x080093a1
 80086e4:	08009412 	.word	0x08009412

080086e8 <__ratio>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	b085      	sub	sp, #20
 80086ee:	e9cd 1000 	strd	r1, r0, [sp]
 80086f2:	a902      	add	r1, sp, #8
 80086f4:	f7ff ff56 	bl	80085a4 <__b2d>
 80086f8:	9800      	ldr	r0, [sp, #0]
 80086fa:	a903      	add	r1, sp, #12
 80086fc:	ec55 4b10 	vmov	r4, r5, d0
 8008700:	f7ff ff50 	bl	80085a4 <__b2d>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	6919      	ldr	r1, [r3, #16]
 8008708:	9b00      	ldr	r3, [sp, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	1ac9      	subs	r1, r1, r3
 800870e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	ec5b ab10 	vmov	sl, fp, d0
 8008718:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfce      	itee	gt
 8008720:	462a      	movgt	r2, r5
 8008722:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008726:	465a      	movle	r2, fp
 8008728:	462f      	mov	r7, r5
 800872a:	46d9      	mov	r9, fp
 800872c:	bfcc      	ite	gt
 800872e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008732:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008736:	464b      	mov	r3, r9
 8008738:	4652      	mov	r2, sl
 800873a:	4620      	mov	r0, r4
 800873c:	4639      	mov	r1, r7
 800873e:	f7f8 f885 	bl	800084c <__aeabi_ddiv>
 8008742:	ec41 0b10 	vmov	d0, r0, r1
 8008746:	b005      	add	sp, #20
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800874c <__copybits>:
 800874c:	3901      	subs	r1, #1
 800874e:	b570      	push	{r4, r5, r6, lr}
 8008750:	1149      	asrs	r1, r1, #5
 8008752:	6914      	ldr	r4, [r2, #16]
 8008754:	3101      	adds	r1, #1
 8008756:	f102 0314 	add.w	r3, r2, #20
 800875a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800875e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008762:	1f05      	subs	r5, r0, #4
 8008764:	42a3      	cmp	r3, r4
 8008766:	d30c      	bcc.n	8008782 <__copybits+0x36>
 8008768:	1aa3      	subs	r3, r4, r2
 800876a:	3b11      	subs	r3, #17
 800876c:	f023 0303 	bic.w	r3, r3, #3
 8008770:	3211      	adds	r2, #17
 8008772:	42a2      	cmp	r2, r4
 8008774:	bf88      	it	hi
 8008776:	2300      	movhi	r3, #0
 8008778:	4418      	add	r0, r3
 800877a:	2300      	movs	r3, #0
 800877c:	4288      	cmp	r0, r1
 800877e:	d305      	bcc.n	800878c <__copybits+0x40>
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	f853 6b04 	ldr.w	r6, [r3], #4
 8008786:	f845 6f04 	str.w	r6, [r5, #4]!
 800878a:	e7eb      	b.n	8008764 <__copybits+0x18>
 800878c:	f840 3b04 	str.w	r3, [r0], #4
 8008790:	e7f4      	b.n	800877c <__copybits+0x30>

08008792 <__any_on>:
 8008792:	f100 0214 	add.w	r2, r0, #20
 8008796:	6900      	ldr	r0, [r0, #16]
 8008798:	114b      	asrs	r3, r1, #5
 800879a:	4298      	cmp	r0, r3
 800879c:	b510      	push	{r4, lr}
 800879e:	db11      	blt.n	80087c4 <__any_on+0x32>
 80087a0:	dd0a      	ble.n	80087b8 <__any_on+0x26>
 80087a2:	f011 011f 	ands.w	r1, r1, #31
 80087a6:	d007      	beq.n	80087b8 <__any_on+0x26>
 80087a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087ac:	fa24 f001 	lsr.w	r0, r4, r1
 80087b0:	fa00 f101 	lsl.w	r1, r0, r1
 80087b4:	428c      	cmp	r4, r1
 80087b6:	d10b      	bne.n	80087d0 <__any_on+0x3e>
 80087b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087bc:	4293      	cmp	r3, r2
 80087be:	d803      	bhi.n	80087c8 <__any_on+0x36>
 80087c0:	2000      	movs	r0, #0
 80087c2:	bd10      	pop	{r4, pc}
 80087c4:	4603      	mov	r3, r0
 80087c6:	e7f7      	b.n	80087b8 <__any_on+0x26>
 80087c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087cc:	2900      	cmp	r1, #0
 80087ce:	d0f5      	beq.n	80087bc <__any_on+0x2a>
 80087d0:	2001      	movs	r0, #1
 80087d2:	e7f6      	b.n	80087c2 <__any_on+0x30>

080087d4 <_strtol_l.constprop.0>:
 80087d4:	2b24      	cmp	r3, #36	@ 0x24
 80087d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087da:	4686      	mov	lr, r0
 80087dc:	4690      	mov	r8, r2
 80087de:	d801      	bhi.n	80087e4 <_strtol_l.constprop.0+0x10>
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d106      	bne.n	80087f2 <_strtol_l.constprop.0+0x1e>
 80087e4:	f7fe f844 	bl	8006870 <__errno>
 80087e8:	2316      	movs	r3, #22
 80087ea:	6003      	str	r3, [r0, #0]
 80087ec:	2000      	movs	r0, #0
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	4834      	ldr	r0, [pc, #208]	@ (80088c4 <_strtol_l.constprop.0+0xf0>)
 80087f4:	460d      	mov	r5, r1
 80087f6:	462a      	mov	r2, r5
 80087f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087fc:	5d06      	ldrb	r6, [r0, r4]
 80087fe:	f016 0608 	ands.w	r6, r6, #8
 8008802:	d1f8      	bne.n	80087f6 <_strtol_l.constprop.0+0x22>
 8008804:	2c2d      	cmp	r4, #45	@ 0x2d
 8008806:	d12d      	bne.n	8008864 <_strtol_l.constprop.0+0x90>
 8008808:	782c      	ldrb	r4, [r5, #0]
 800880a:	2601      	movs	r6, #1
 800880c:	1c95      	adds	r5, r2, #2
 800880e:	f033 0210 	bics.w	r2, r3, #16
 8008812:	d109      	bne.n	8008828 <_strtol_l.constprop.0+0x54>
 8008814:	2c30      	cmp	r4, #48	@ 0x30
 8008816:	d12a      	bne.n	800886e <_strtol_l.constprop.0+0x9a>
 8008818:	782a      	ldrb	r2, [r5, #0]
 800881a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800881e:	2a58      	cmp	r2, #88	@ 0x58
 8008820:	d125      	bne.n	800886e <_strtol_l.constprop.0+0x9a>
 8008822:	786c      	ldrb	r4, [r5, #1]
 8008824:	2310      	movs	r3, #16
 8008826:	3502      	adds	r5, #2
 8008828:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800882c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008830:	2200      	movs	r2, #0
 8008832:	fbbc f9f3 	udiv	r9, ip, r3
 8008836:	4610      	mov	r0, r2
 8008838:	fb03 ca19 	mls	sl, r3, r9, ip
 800883c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008840:	2f09      	cmp	r7, #9
 8008842:	d81b      	bhi.n	800887c <_strtol_l.constprop.0+0xa8>
 8008844:	463c      	mov	r4, r7
 8008846:	42a3      	cmp	r3, r4
 8008848:	dd27      	ble.n	800889a <_strtol_l.constprop.0+0xc6>
 800884a:	1c57      	adds	r7, r2, #1
 800884c:	d007      	beq.n	800885e <_strtol_l.constprop.0+0x8a>
 800884e:	4581      	cmp	r9, r0
 8008850:	d320      	bcc.n	8008894 <_strtol_l.constprop.0+0xc0>
 8008852:	d101      	bne.n	8008858 <_strtol_l.constprop.0+0x84>
 8008854:	45a2      	cmp	sl, r4
 8008856:	db1d      	blt.n	8008894 <_strtol_l.constprop.0+0xc0>
 8008858:	fb00 4003 	mla	r0, r0, r3, r4
 800885c:	2201      	movs	r2, #1
 800885e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008862:	e7eb      	b.n	800883c <_strtol_l.constprop.0+0x68>
 8008864:	2c2b      	cmp	r4, #43	@ 0x2b
 8008866:	bf04      	itt	eq
 8008868:	782c      	ldrbeq	r4, [r5, #0]
 800886a:	1c95      	addeq	r5, r2, #2
 800886c:	e7cf      	b.n	800880e <_strtol_l.constprop.0+0x3a>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1da      	bne.n	8008828 <_strtol_l.constprop.0+0x54>
 8008872:	2c30      	cmp	r4, #48	@ 0x30
 8008874:	bf0c      	ite	eq
 8008876:	2308      	moveq	r3, #8
 8008878:	230a      	movne	r3, #10
 800887a:	e7d5      	b.n	8008828 <_strtol_l.constprop.0+0x54>
 800887c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008880:	2f19      	cmp	r7, #25
 8008882:	d801      	bhi.n	8008888 <_strtol_l.constprop.0+0xb4>
 8008884:	3c37      	subs	r4, #55	@ 0x37
 8008886:	e7de      	b.n	8008846 <_strtol_l.constprop.0+0x72>
 8008888:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800888c:	2f19      	cmp	r7, #25
 800888e:	d804      	bhi.n	800889a <_strtol_l.constprop.0+0xc6>
 8008890:	3c57      	subs	r4, #87	@ 0x57
 8008892:	e7d8      	b.n	8008846 <_strtol_l.constprop.0+0x72>
 8008894:	f04f 32ff 	mov.w	r2, #4294967295
 8008898:	e7e1      	b.n	800885e <_strtol_l.constprop.0+0x8a>
 800889a:	1c53      	adds	r3, r2, #1
 800889c:	d108      	bne.n	80088b0 <_strtol_l.constprop.0+0xdc>
 800889e:	2322      	movs	r3, #34	@ 0x22
 80088a0:	f8ce 3000 	str.w	r3, [lr]
 80088a4:	4660      	mov	r0, ip
 80088a6:	f1b8 0f00 	cmp.w	r8, #0
 80088aa:	d0a0      	beq.n	80087ee <_strtol_l.constprop.0+0x1a>
 80088ac:	1e69      	subs	r1, r5, #1
 80088ae:	e006      	b.n	80088be <_strtol_l.constprop.0+0xea>
 80088b0:	b106      	cbz	r6, 80088b4 <_strtol_l.constprop.0+0xe0>
 80088b2:	4240      	negs	r0, r0
 80088b4:	f1b8 0f00 	cmp.w	r8, #0
 80088b8:	d099      	beq.n	80087ee <_strtol_l.constprop.0+0x1a>
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	d1f6      	bne.n	80088ac <_strtol_l.constprop.0+0xd8>
 80088be:	f8c8 1000 	str.w	r1, [r8]
 80088c2:	e794      	b.n	80087ee <_strtol_l.constprop.0+0x1a>
 80088c4:	08009569 	.word	0x08009569

080088c8 <_strtol_r>:
 80088c8:	f7ff bf84 	b.w	80087d4 <_strtol_l.constprop.0>

080088cc <__ascii_wctomb>:
 80088cc:	4603      	mov	r3, r0
 80088ce:	4608      	mov	r0, r1
 80088d0:	b141      	cbz	r1, 80088e4 <__ascii_wctomb+0x18>
 80088d2:	2aff      	cmp	r2, #255	@ 0xff
 80088d4:	d904      	bls.n	80088e0 <__ascii_wctomb+0x14>
 80088d6:	228a      	movs	r2, #138	@ 0x8a
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	f04f 30ff 	mov.w	r0, #4294967295
 80088de:	4770      	bx	lr
 80088e0:	700a      	strb	r2, [r1, #0]
 80088e2:	2001      	movs	r0, #1
 80088e4:	4770      	bx	lr

080088e6 <__ssputs_r>:
 80088e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ea:	688e      	ldr	r6, [r1, #8]
 80088ec:	461f      	mov	r7, r3
 80088ee:	42be      	cmp	r6, r7
 80088f0:	680b      	ldr	r3, [r1, #0]
 80088f2:	4682      	mov	sl, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	4690      	mov	r8, r2
 80088f8:	d82d      	bhi.n	8008956 <__ssputs_r+0x70>
 80088fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008902:	d026      	beq.n	8008952 <__ssputs_r+0x6c>
 8008904:	6965      	ldr	r5, [r4, #20]
 8008906:	6909      	ldr	r1, [r1, #16]
 8008908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800890c:	eba3 0901 	sub.w	r9, r3, r1
 8008910:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008914:	1c7b      	adds	r3, r7, #1
 8008916:	444b      	add	r3, r9
 8008918:	106d      	asrs	r5, r5, #1
 800891a:	429d      	cmp	r5, r3
 800891c:	bf38      	it	cc
 800891e:	461d      	movcc	r5, r3
 8008920:	0553      	lsls	r3, r2, #21
 8008922:	d527      	bpl.n	8008974 <__ssputs_r+0x8e>
 8008924:	4629      	mov	r1, r5
 8008926:	f7ff fa05 	bl	8007d34 <_malloc_r>
 800892a:	4606      	mov	r6, r0
 800892c:	b360      	cbz	r0, 8008988 <__ssputs_r+0xa2>
 800892e:	6921      	ldr	r1, [r4, #16]
 8008930:	464a      	mov	r2, r9
 8008932:	f7fd ffca 	bl	80068ca <memcpy>
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800893c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	6126      	str	r6, [r4, #16]
 8008944:	6165      	str	r5, [r4, #20]
 8008946:	444e      	add	r6, r9
 8008948:	eba5 0509 	sub.w	r5, r5, r9
 800894c:	6026      	str	r6, [r4, #0]
 800894e:	60a5      	str	r5, [r4, #8]
 8008950:	463e      	mov	r6, r7
 8008952:	42be      	cmp	r6, r7
 8008954:	d900      	bls.n	8008958 <__ssputs_r+0x72>
 8008956:	463e      	mov	r6, r7
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	4632      	mov	r2, r6
 800895c:	4641      	mov	r1, r8
 800895e:	f000 fb7b 	bl	8009058 <memmove>
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	1b9b      	subs	r3, r3, r6
 8008966:	60a3      	str	r3, [r4, #8]
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	4433      	add	r3, r6
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	2000      	movs	r0, #0
 8008970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008974:	462a      	mov	r2, r5
 8008976:	f000 fbd6 	bl	8009126 <_realloc_r>
 800897a:	4606      	mov	r6, r0
 800897c:	2800      	cmp	r0, #0
 800897e:	d1e0      	bne.n	8008942 <__ssputs_r+0x5c>
 8008980:	6921      	ldr	r1, [r4, #16]
 8008982:	4650      	mov	r0, sl
 8008984:	f7fe fe28 	bl	80075d8 <_free_r>
 8008988:	230c      	movs	r3, #12
 800898a:	f8ca 3000 	str.w	r3, [sl]
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	e7e9      	b.n	8008970 <__ssputs_r+0x8a>

0800899c <_svfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4698      	mov	r8, r3
 80089a2:	898b      	ldrh	r3, [r1, #12]
 80089a4:	061b      	lsls	r3, r3, #24
 80089a6:	b09d      	sub	sp, #116	@ 0x74
 80089a8:	4607      	mov	r7, r0
 80089aa:	460d      	mov	r5, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	d510      	bpl.n	80089d2 <_svfiprintf_r+0x36>
 80089b0:	690b      	ldr	r3, [r1, #16]
 80089b2:	b973      	cbnz	r3, 80089d2 <_svfiprintf_r+0x36>
 80089b4:	2140      	movs	r1, #64	@ 0x40
 80089b6:	f7ff f9bd 	bl	8007d34 <_malloc_r>
 80089ba:	6028      	str	r0, [r5, #0]
 80089bc:	6128      	str	r0, [r5, #16]
 80089be:	b930      	cbnz	r0, 80089ce <_svfiprintf_r+0x32>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b01d      	add	sp, #116	@ 0x74
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	2340      	movs	r3, #64	@ 0x40
 80089d0:	616b      	str	r3, [r5, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089d6:	2320      	movs	r3, #32
 80089d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e0:	2330      	movs	r3, #48	@ 0x30
 80089e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b80 <_svfiprintf_r+0x1e4>
 80089e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089ea:	f04f 0901 	mov.w	r9, #1
 80089ee:	4623      	mov	r3, r4
 80089f0:	469a      	mov	sl, r3
 80089f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f6:	b10a      	cbz	r2, 80089fc <_svfiprintf_r+0x60>
 80089f8:	2a25      	cmp	r2, #37	@ 0x25
 80089fa:	d1f9      	bne.n	80089f0 <_svfiprintf_r+0x54>
 80089fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008a00:	d00b      	beq.n	8008a1a <_svfiprintf_r+0x7e>
 8008a02:	465b      	mov	r3, fp
 8008a04:	4622      	mov	r2, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7ff ff6c 	bl	80088e6 <__ssputs_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f000 80a7 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a16:	445a      	add	r2, fp
 8008a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 809f 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2e:	f10a 0a01 	add.w	sl, sl, #1
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a3c:	4654      	mov	r4, sl
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	484e      	ldr	r0, [pc, #312]	@ (8008b80 <_svfiprintf_r+0x1e4>)
 8008a46:	f7f7 fbc3 	bl	80001d0 <memchr>
 8008a4a:	9a04      	ldr	r2, [sp, #16]
 8008a4c:	b9d8      	cbnz	r0, 8008a86 <_svfiprintf_r+0xea>
 8008a4e:	06d0      	lsls	r0, r2, #27
 8008a50:	bf44      	itt	mi
 8008a52:	2320      	movmi	r3, #32
 8008a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a58:	0711      	lsls	r1, r2, #28
 8008a5a:	bf44      	itt	mi
 8008a5c:	232b      	movmi	r3, #43	@ 0x2b
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a62:	f89a 3000 	ldrb.w	r3, [sl]
 8008a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a68:	d015      	beq.n	8008a96 <_svfiprintf_r+0xfa>
 8008a6a:	9a07      	ldr	r2, [sp, #28]
 8008a6c:	4654      	mov	r4, sl
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f04f 0c0a 	mov.w	ip, #10
 8008a74:	4621      	mov	r1, r4
 8008a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7a:	3b30      	subs	r3, #48	@ 0x30
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d94b      	bls.n	8008b18 <_svfiprintf_r+0x17c>
 8008a80:	b1b0      	cbz	r0, 8008ab0 <_svfiprintf_r+0x114>
 8008a82:	9207      	str	r2, [sp, #28]
 8008a84:	e014      	b.n	8008ab0 <_svfiprintf_r+0x114>
 8008a86:	eba0 0308 	sub.w	r3, r0, r8
 8008a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	46a2      	mov	sl, r4
 8008a94:	e7d2      	b.n	8008a3c <_svfiprintf_r+0xa0>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	1d19      	adds	r1, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	9103      	str	r1, [sp, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbb      	ittet	lt
 8008aa2:	425b      	neglt	r3, r3
 8008aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa8:	9307      	strge	r3, [sp, #28]
 8008aaa:	9307      	strlt	r3, [sp, #28]
 8008aac:	bfb8      	it	lt
 8008aae:	9204      	strlt	r2, [sp, #16]
 8008ab0:	7823      	ldrb	r3, [r4, #0]
 8008ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ab4:	d10a      	bne.n	8008acc <_svfiprintf_r+0x130>
 8008ab6:	7863      	ldrb	r3, [r4, #1]
 8008ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aba:	d132      	bne.n	8008b22 <_svfiprintf_r+0x186>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ac8:	3402      	adds	r4, #2
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b90 <_svfiprintf_r+0x1f4>
 8008ad0:	7821      	ldrb	r1, [r4, #0]
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	f7f7 fb7b 	bl	80001d0 <memchr>
 8008ada:	b138      	cbz	r0, 8008aec <_svfiprintf_r+0x150>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	eba0 000a 	sub.w	r0, r0, sl
 8008ae2:	2240      	movs	r2, #64	@ 0x40
 8008ae4:	4082      	lsls	r2, r0
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	3401      	adds	r4, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af0:	4824      	ldr	r0, [pc, #144]	@ (8008b84 <_svfiprintf_r+0x1e8>)
 8008af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008af6:	2206      	movs	r2, #6
 8008af8:	f7f7 fb6a 	bl	80001d0 <memchr>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d036      	beq.n	8008b6e <_svfiprintf_r+0x1d2>
 8008b00:	4b21      	ldr	r3, [pc, #132]	@ (8008b88 <_svfiprintf_r+0x1ec>)
 8008b02:	bb1b      	cbnz	r3, 8008b4c <_svfiprintf_r+0x1b0>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	3307      	adds	r3, #7
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b12:	4433      	add	r3, r6
 8008b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b16:	e76a      	b.n	80089ee <_svfiprintf_r+0x52>
 8008b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7a8      	b.n	8008a74 <_svfiprintf_r+0xd8>
 8008b22:	2300      	movs	r3, #0
 8008b24:	3401      	adds	r4, #1
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f04f 0c0a 	mov.w	ip, #10
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b34:	3a30      	subs	r2, #48	@ 0x30
 8008b36:	2a09      	cmp	r2, #9
 8008b38:	d903      	bls.n	8008b42 <_svfiprintf_r+0x1a6>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c6      	beq.n	8008acc <_svfiprintf_r+0x130>
 8008b3e:	9105      	str	r1, [sp, #20]
 8008b40:	e7c4      	b.n	8008acc <_svfiprintf_r+0x130>
 8008b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b46:	4604      	mov	r4, r0
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7f0      	b.n	8008b2e <_svfiprintf_r+0x192>
 8008b4c:	ab03      	add	r3, sp, #12
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	462a      	mov	r2, r5
 8008b52:	4b0e      	ldr	r3, [pc, #56]	@ (8008b8c <_svfiprintf_r+0x1f0>)
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7fc fea0 	bl	800589c <_printf_float>
 8008b5c:	1c42      	adds	r2, r0, #1
 8008b5e:	4606      	mov	r6, r0
 8008b60:	d1d6      	bne.n	8008b10 <_svfiprintf_r+0x174>
 8008b62:	89ab      	ldrh	r3, [r5, #12]
 8008b64:	065b      	lsls	r3, r3, #25
 8008b66:	f53f af2d 	bmi.w	80089c4 <_svfiprintf_r+0x28>
 8008b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b6c:	e72c      	b.n	80089c8 <_svfiprintf_r+0x2c>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <_svfiprintf_r+0x1f0>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7fd f927 	bl	8005dcc <_printf_i>
 8008b7e:	e7ed      	b.n	8008b5c <_svfiprintf_r+0x1c0>
 8008b80:	08009669 	.word	0x08009669
 8008b84:	08009673 	.word	0x08009673
 8008b88:	0800589d 	.word	0x0800589d
 8008b8c:	080088e7 	.word	0x080088e7
 8008b90:	0800966f 	.word	0x0800966f

08008b94 <__sfputc_r>:
 8008b94:	6893      	ldr	r3, [r2, #8]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	b410      	push	{r4}
 8008b9c:	6093      	str	r3, [r2, #8]
 8008b9e:	da08      	bge.n	8008bb2 <__sfputc_r+0x1e>
 8008ba0:	6994      	ldr	r4, [r2, #24]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	db01      	blt.n	8008baa <__sfputc_r+0x16>
 8008ba6:	290a      	cmp	r1, #10
 8008ba8:	d103      	bne.n	8008bb2 <__sfputc_r+0x1e>
 8008baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bae:	f7fd bd66 	b.w	800667e <__swbuf_r>
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	1c58      	adds	r0, r3, #1
 8008bb6:	6010      	str	r0, [r2, #0]
 8008bb8:	7019      	strb	r1, [r3, #0]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <__sfputs_r>:
 8008bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460f      	mov	r7, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	18d5      	adds	r5, r2, r3
 8008bcc:	42ac      	cmp	r4, r5
 8008bce:	d101      	bne.n	8008bd4 <__sfputs_r+0x12>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e007      	b.n	8008be4 <__sfputs_r+0x22>
 8008bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd8:	463a      	mov	r2, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffda 	bl	8008b94 <__sfputc_r>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d1f3      	bne.n	8008bcc <__sfputs_r+0xa>
 8008be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008be8 <_vfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	460d      	mov	r5, r1
 8008bee:	b09d      	sub	sp, #116	@ 0x74
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	4698      	mov	r8, r3
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	b118      	cbz	r0, 8008c00 <_vfiprintf_r+0x18>
 8008bf8:	6a03      	ldr	r3, [r0, #32]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <_vfiprintf_r+0x18>
 8008bfc:	f7fd fca6 	bl	800654c <__sinit>
 8008c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	d405      	bmi.n	8008c12 <_vfiprintf_r+0x2a>
 8008c06:	89ab      	ldrh	r3, [r5, #12]
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_vfiprintf_r+0x2a>
 8008c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c0e:	f7fd fe5a 	bl	80068c6 <__retarget_lock_acquire_recursive>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	071b      	lsls	r3, r3, #28
 8008c16:	d501      	bpl.n	8008c1c <_vfiprintf_r+0x34>
 8008c18:	692b      	ldr	r3, [r5, #16]
 8008c1a:	b99b      	cbnz	r3, 8008c44 <_vfiprintf_r+0x5c>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7fd fd6c 	bl	80066fc <__swsetup_r>
 8008c24:	b170      	cbz	r0, 8008c44 <_vfiprintf_r+0x5c>
 8008c26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c28:	07dc      	lsls	r4, r3, #31
 8008c2a:	d504      	bpl.n	8008c36 <_vfiprintf_r+0x4e>
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c30:	b01d      	add	sp, #116	@ 0x74
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	0598      	lsls	r0, r3, #22
 8008c3a:	d4f7      	bmi.n	8008c2c <_vfiprintf_r+0x44>
 8008c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3e:	f7fd fe43 	bl	80068c8 <__retarget_lock_release_recursive>
 8008c42:	e7f3      	b.n	8008c2c <_vfiprintf_r+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c48:	2320      	movs	r3, #32
 8008c4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c52:	2330      	movs	r3, #48	@ 0x30
 8008c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e04 <_vfiprintf_r+0x21c>
 8008c58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c5c:	f04f 0901 	mov.w	r9, #1
 8008c60:	4623      	mov	r3, r4
 8008c62:	469a      	mov	sl, r3
 8008c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c68:	b10a      	cbz	r2, 8008c6e <_vfiprintf_r+0x86>
 8008c6a:	2a25      	cmp	r2, #37	@ 0x25
 8008c6c:	d1f9      	bne.n	8008c62 <_vfiprintf_r+0x7a>
 8008c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c72:	d00b      	beq.n	8008c8c <_vfiprintf_r+0xa4>
 8008c74:	465b      	mov	r3, fp
 8008c76:	4622      	mov	r2, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff ffa1 	bl	8008bc2 <__sfputs_r>
 8008c80:	3001      	adds	r0, #1
 8008c82:	f000 80a7 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c88:	445a      	add	r2, fp
 8008c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 809f 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca0:	f10a 0a01 	add.w	sl, sl, #1
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	9307      	str	r3, [sp, #28]
 8008ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cae:	4654      	mov	r4, sl
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb6:	4853      	ldr	r0, [pc, #332]	@ (8008e04 <_vfiprintf_r+0x21c>)
 8008cb8:	f7f7 fa8a 	bl	80001d0 <memchr>
 8008cbc:	9a04      	ldr	r2, [sp, #16]
 8008cbe:	b9d8      	cbnz	r0, 8008cf8 <_vfiprintf_r+0x110>
 8008cc0:	06d1      	lsls	r1, r2, #27
 8008cc2:	bf44      	itt	mi
 8008cc4:	2320      	movmi	r3, #32
 8008cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cca:	0713      	lsls	r3, r2, #28
 8008ccc:	bf44      	itt	mi
 8008cce:	232b      	movmi	r3, #43	@ 0x2b
 8008cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cda:	d015      	beq.n	8008d08 <_vfiprintf_r+0x120>
 8008cdc:	9a07      	ldr	r2, [sp, #28]
 8008cde:	4654      	mov	r4, sl
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f04f 0c0a 	mov.w	ip, #10
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cec:	3b30      	subs	r3, #48	@ 0x30
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d94b      	bls.n	8008d8a <_vfiprintf_r+0x1a2>
 8008cf2:	b1b0      	cbz	r0, 8008d22 <_vfiprintf_r+0x13a>
 8008cf4:	9207      	str	r2, [sp, #28]
 8008cf6:	e014      	b.n	8008d22 <_vfiprintf_r+0x13a>
 8008cf8:	eba0 0308 	sub.w	r3, r0, r8
 8008cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8008d00:	4313      	orrs	r3, r2
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	46a2      	mov	sl, r4
 8008d06:	e7d2      	b.n	8008cae <_vfiprintf_r+0xc6>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	1d19      	adds	r1, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9103      	str	r1, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfbb      	ittet	lt
 8008d14:	425b      	neglt	r3, r3
 8008d16:	f042 0202 	orrlt.w	r2, r2, #2
 8008d1a:	9307      	strge	r3, [sp, #28]
 8008d1c:	9307      	strlt	r3, [sp, #28]
 8008d1e:	bfb8      	it	lt
 8008d20:	9204      	strlt	r2, [sp, #16]
 8008d22:	7823      	ldrb	r3, [r4, #0]
 8008d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d26:	d10a      	bne.n	8008d3e <_vfiprintf_r+0x156>
 8008d28:	7863      	ldrb	r3, [r4, #1]
 8008d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d2c:	d132      	bne.n	8008d94 <_vfiprintf_r+0x1ac>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	1d1a      	adds	r2, r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	9203      	str	r2, [sp, #12]
 8008d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d3a:	3402      	adds	r4, #2
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e14 <_vfiprintf_r+0x22c>
 8008d42:	7821      	ldrb	r1, [r4, #0]
 8008d44:	2203      	movs	r2, #3
 8008d46:	4650      	mov	r0, sl
 8008d48:	f7f7 fa42 	bl	80001d0 <memchr>
 8008d4c:	b138      	cbz	r0, 8008d5e <_vfiprintf_r+0x176>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	eba0 000a 	sub.w	r0, r0, sl
 8008d54:	2240      	movs	r2, #64	@ 0x40
 8008d56:	4082      	lsls	r2, r0
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d62:	4829      	ldr	r0, [pc, #164]	@ (8008e08 <_vfiprintf_r+0x220>)
 8008d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d68:	2206      	movs	r2, #6
 8008d6a:	f7f7 fa31 	bl	80001d0 <memchr>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d03f      	beq.n	8008df2 <_vfiprintf_r+0x20a>
 8008d72:	4b26      	ldr	r3, [pc, #152]	@ (8008e0c <_vfiprintf_r+0x224>)
 8008d74:	bb1b      	cbnz	r3, 8008dbe <_vfiprintf_r+0x1d6>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	3307      	adds	r3, #7
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	3308      	adds	r3, #8
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d84:	443b      	add	r3, r7
 8008d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d88:	e76a      	b.n	8008c60 <_vfiprintf_r+0x78>
 8008d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d8e:	460c      	mov	r4, r1
 8008d90:	2001      	movs	r0, #1
 8008d92:	e7a8      	b.n	8008ce6 <_vfiprintf_r+0xfe>
 8008d94:	2300      	movs	r3, #0
 8008d96:	3401      	adds	r4, #1
 8008d98:	9305      	str	r3, [sp, #20]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	4620      	mov	r0, r4
 8008da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da6:	3a30      	subs	r2, #48	@ 0x30
 8008da8:	2a09      	cmp	r2, #9
 8008daa:	d903      	bls.n	8008db4 <_vfiprintf_r+0x1cc>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0c6      	beq.n	8008d3e <_vfiprintf_r+0x156>
 8008db0:	9105      	str	r1, [sp, #20]
 8008db2:	e7c4      	b.n	8008d3e <_vfiprintf_r+0x156>
 8008db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db8:	4604      	mov	r4, r0
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7f0      	b.n	8008da0 <_vfiprintf_r+0x1b8>
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4b12      	ldr	r3, [pc, #72]	@ (8008e10 <_vfiprintf_r+0x228>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7fc fd67 	bl	800589c <_printf_float>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	1c78      	adds	r0, r7, #1
 8008dd2:	d1d6      	bne.n	8008d82 <_vfiprintf_r+0x19a>
 8008dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d405      	bmi.n	8008de6 <_vfiprintf_r+0x1fe>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d402      	bmi.n	8008de6 <_vfiprintf_r+0x1fe>
 8008de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008de2:	f7fd fd71 	bl	80068c8 <__retarget_lock_release_recursive>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	065b      	lsls	r3, r3, #25
 8008dea:	f53f af1f 	bmi.w	8008c2c <_vfiprintf_r+0x44>
 8008dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008df0:	e71e      	b.n	8008c30 <_vfiprintf_r+0x48>
 8008df2:	ab03      	add	r3, sp, #12
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	462a      	mov	r2, r5
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <_vfiprintf_r+0x228>)
 8008dfa:	a904      	add	r1, sp, #16
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7fc ffe5 	bl	8005dcc <_printf_i>
 8008e02:	e7e4      	b.n	8008dce <_vfiprintf_r+0x1e6>
 8008e04:	08009669 	.word	0x08009669
 8008e08:	08009673 	.word	0x08009673
 8008e0c:	0800589d 	.word	0x0800589d
 8008e10:	08008bc3 	.word	0x08008bc3
 8008e14:	0800966f 	.word	0x0800966f

08008e18 <__sflush_r>:
 8008e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e20:	0716      	lsls	r6, r2, #28
 8008e22:	4605      	mov	r5, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	d454      	bmi.n	8008ed2 <__sflush_r+0xba>
 8008e28:	684b      	ldr	r3, [r1, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	dc02      	bgt.n	8008e34 <__sflush_r+0x1c>
 8008e2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dd48      	ble.n	8008ec6 <__sflush_r+0xae>
 8008e34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d045      	beq.n	8008ec6 <__sflush_r+0xae>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e40:	682f      	ldr	r7, [r5, #0]
 8008e42:	6a21      	ldr	r1, [r4, #32]
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	d030      	beq.n	8008eaa <__sflush_r+0x92>
 8008e48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	0759      	lsls	r1, r3, #29
 8008e4e:	d505      	bpl.n	8008e5c <__sflush_r+0x44>
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	1ad2      	subs	r2, r2, r3
 8008e54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e56:	b10b      	cbz	r3, 8008e5c <__sflush_r+0x44>
 8008e58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e5a:	1ad2      	subs	r2, r2, r3
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e60:	6a21      	ldr	r1, [r4, #32]
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b0      	blx	r6
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	d106      	bne.n	8008e7a <__sflush_r+0x62>
 8008e6c:	6829      	ldr	r1, [r5, #0]
 8008e6e:	291d      	cmp	r1, #29
 8008e70:	d82b      	bhi.n	8008eca <__sflush_r+0xb2>
 8008e72:	4a2a      	ldr	r2, [pc, #168]	@ (8008f1c <__sflush_r+0x104>)
 8008e74:	410a      	asrs	r2, r1
 8008e76:	07d6      	lsls	r6, r2, #31
 8008e78:	d427      	bmi.n	8008eca <__sflush_r+0xb2>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	6062      	str	r2, [r4, #4]
 8008e7e:	04d9      	lsls	r1, r3, #19
 8008e80:	6922      	ldr	r2, [r4, #16]
 8008e82:	6022      	str	r2, [r4, #0]
 8008e84:	d504      	bpl.n	8008e90 <__sflush_r+0x78>
 8008e86:	1c42      	adds	r2, r0, #1
 8008e88:	d101      	bne.n	8008e8e <__sflush_r+0x76>
 8008e8a:	682b      	ldr	r3, [r5, #0]
 8008e8c:	b903      	cbnz	r3, 8008e90 <__sflush_r+0x78>
 8008e8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e92:	602f      	str	r7, [r5, #0]
 8008e94:	b1b9      	cbz	r1, 8008ec6 <__sflush_r+0xae>
 8008e96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e9a:	4299      	cmp	r1, r3
 8008e9c:	d002      	beq.n	8008ea4 <__sflush_r+0x8c>
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f7fe fb9a 	bl	80075d8 <_free_r>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ea8:	e00d      	b.n	8008ec6 <__sflush_r+0xae>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b0      	blx	r6
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	1c50      	adds	r0, r2, #1
 8008eb4:	d1c9      	bne.n	8008e4a <__sflush_r+0x32>
 8008eb6:	682b      	ldr	r3, [r5, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0c6      	beq.n	8008e4a <__sflush_r+0x32>
 8008ebc:	2b1d      	cmp	r3, #29
 8008ebe:	d001      	beq.n	8008ec4 <__sflush_r+0xac>
 8008ec0:	2b16      	cmp	r3, #22
 8008ec2:	d11e      	bne.n	8008f02 <__sflush_r+0xea>
 8008ec4:	602f      	str	r7, [r5, #0]
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e022      	b.n	8008f10 <__sflush_r+0xf8>
 8008eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ece:	b21b      	sxth	r3, r3
 8008ed0:	e01b      	b.n	8008f0a <__sflush_r+0xf2>
 8008ed2:	690f      	ldr	r7, [r1, #16]
 8008ed4:	2f00      	cmp	r7, #0
 8008ed6:	d0f6      	beq.n	8008ec6 <__sflush_r+0xae>
 8008ed8:	0793      	lsls	r3, r2, #30
 8008eda:	680e      	ldr	r6, [r1, #0]
 8008edc:	bf08      	it	eq
 8008ede:	694b      	ldreq	r3, [r1, #20]
 8008ee0:	600f      	str	r7, [r1, #0]
 8008ee2:	bf18      	it	ne
 8008ee4:	2300      	movne	r3, #0
 8008ee6:	eba6 0807 	sub.w	r8, r6, r7
 8008eea:	608b      	str	r3, [r1, #8]
 8008eec:	f1b8 0f00 	cmp.w	r8, #0
 8008ef0:	dde9      	ble.n	8008ec6 <__sflush_r+0xae>
 8008ef2:	6a21      	ldr	r1, [r4, #32]
 8008ef4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ef6:	4643      	mov	r3, r8
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b0      	blx	r6
 8008efe:	2800      	cmp	r0, #0
 8008f00:	dc08      	bgt.n	8008f14 <__sflush_r+0xfc>
 8008f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	4407      	add	r7, r0
 8008f16:	eba8 0800 	sub.w	r8, r8, r0
 8008f1a:	e7e7      	b.n	8008eec <__sflush_r+0xd4>
 8008f1c:	dfbffffe 	.word	0xdfbffffe

08008f20 <_fflush_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	690b      	ldr	r3, [r1, #16]
 8008f24:	4605      	mov	r5, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	b913      	cbnz	r3, 8008f30 <_fflush_r+0x10>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	b118      	cbz	r0, 8008f3a <_fflush_r+0x1a>
 8008f32:	6a03      	ldr	r3, [r0, #32]
 8008f34:	b90b      	cbnz	r3, 8008f3a <_fflush_r+0x1a>
 8008f36:	f7fd fb09 	bl	800654c <__sinit>
 8008f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0f3      	beq.n	8008f2a <_fflush_r+0xa>
 8008f42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f44:	07d0      	lsls	r0, r2, #31
 8008f46:	d404      	bmi.n	8008f52 <_fflush_r+0x32>
 8008f48:	0599      	lsls	r1, r3, #22
 8008f4a:	d402      	bmi.n	8008f52 <_fflush_r+0x32>
 8008f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f4e:	f7fd fcba 	bl	80068c6 <__retarget_lock_acquire_recursive>
 8008f52:	4628      	mov	r0, r5
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7ff ff5f 	bl	8008e18 <__sflush_r>
 8008f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f5c:	07da      	lsls	r2, r3, #31
 8008f5e:	4605      	mov	r5, r0
 8008f60:	d4e4      	bmi.n	8008f2c <_fflush_r+0xc>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	059b      	lsls	r3, r3, #22
 8008f66:	d4e1      	bmi.n	8008f2c <_fflush_r+0xc>
 8008f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f6a:	f7fd fcad 	bl	80068c8 <__retarget_lock_release_recursive>
 8008f6e:	e7dd      	b.n	8008f2c <_fflush_r+0xc>

08008f70 <fiprintf>:
 8008f70:	b40e      	push	{r1, r2, r3}
 8008f72:	b503      	push	{r0, r1, lr}
 8008f74:	4601      	mov	r1, r0
 8008f76:	ab03      	add	r3, sp, #12
 8008f78:	4805      	ldr	r0, [pc, #20]	@ (8008f90 <fiprintf+0x20>)
 8008f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7e:	6800      	ldr	r0, [r0, #0]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f7ff fe31 	bl	8008be8 <_vfiprintf_r>
 8008f86:	b002      	add	sp, #8
 8008f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f8c:	b003      	add	sp, #12
 8008f8e:	4770      	bx	lr
 8008f90:	20000194 	.word	0x20000194

08008f94 <__swhatbuf_r>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	460c      	mov	r4, r1
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	b096      	sub	sp, #88	@ 0x58
 8008fa0:	4615      	mov	r5, r2
 8008fa2:	461e      	mov	r6, r3
 8008fa4:	da0d      	bge.n	8008fc2 <__swhatbuf_r+0x2e>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fac:	f04f 0100 	mov.w	r1, #0
 8008fb0:	bf14      	ite	ne
 8008fb2:	2340      	movne	r3, #64	@ 0x40
 8008fb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fb8:	2000      	movs	r0, #0
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	b016      	add	sp, #88	@ 0x58
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	466a      	mov	r2, sp
 8008fc4:	f000 f862 	bl	800908c <_fstat_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	dbec      	blt.n	8008fa6 <__swhatbuf_r+0x12>
 8008fcc:	9901      	ldr	r1, [sp, #4]
 8008fce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fd6:	4259      	negs	r1, r3
 8008fd8:	4159      	adcs	r1, r3
 8008fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fde:	e7eb      	b.n	8008fb8 <__swhatbuf_r+0x24>

08008fe0 <__smakebuf_r>:
 8008fe0:	898b      	ldrh	r3, [r1, #12]
 8008fe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fe4:	079d      	lsls	r5, r3, #30
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	d507      	bpl.n	8008ffc <__smakebuf_r+0x1c>
 8008fec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	6163      	str	r3, [r4, #20]
 8008ff8:	b003      	add	sp, #12
 8008ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ffc:	ab01      	add	r3, sp, #4
 8008ffe:	466a      	mov	r2, sp
 8009000:	f7ff ffc8 	bl	8008f94 <__swhatbuf_r>
 8009004:	9f00      	ldr	r7, [sp, #0]
 8009006:	4605      	mov	r5, r0
 8009008:	4639      	mov	r1, r7
 800900a:	4630      	mov	r0, r6
 800900c:	f7fe fe92 	bl	8007d34 <_malloc_r>
 8009010:	b948      	cbnz	r0, 8009026 <__smakebuf_r+0x46>
 8009012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009016:	059a      	lsls	r2, r3, #22
 8009018:	d4ee      	bmi.n	8008ff8 <__smakebuf_r+0x18>
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	f043 0302 	orr.w	r3, r3, #2
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	e7e2      	b.n	8008fec <__smakebuf_r+0xc>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	6020      	str	r0, [r4, #0]
 800902a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009036:	b15b      	cbz	r3, 8009050 <__smakebuf_r+0x70>
 8009038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800903c:	4630      	mov	r0, r6
 800903e:	f000 f837 	bl	80090b0 <_isatty_r>
 8009042:	b128      	cbz	r0, 8009050 <__smakebuf_r+0x70>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f023 0303 	bic.w	r3, r3, #3
 800904a:	f043 0301 	orr.w	r3, r3, #1
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	431d      	orrs	r5, r3
 8009054:	81a5      	strh	r5, [r4, #12]
 8009056:	e7cf      	b.n	8008ff8 <__smakebuf_r+0x18>

08009058 <memmove>:
 8009058:	4288      	cmp	r0, r1
 800905a:	b510      	push	{r4, lr}
 800905c:	eb01 0402 	add.w	r4, r1, r2
 8009060:	d902      	bls.n	8009068 <memmove+0x10>
 8009062:	4284      	cmp	r4, r0
 8009064:	4623      	mov	r3, r4
 8009066:	d807      	bhi.n	8009078 <memmove+0x20>
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	42a1      	cmp	r1, r4
 800906c:	d008      	beq.n	8009080 <memmove+0x28>
 800906e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009076:	e7f8      	b.n	800906a <memmove+0x12>
 8009078:	4402      	add	r2, r0
 800907a:	4601      	mov	r1, r0
 800907c:	428a      	cmp	r2, r1
 800907e:	d100      	bne.n	8009082 <memmove+0x2a>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800908a:	e7f7      	b.n	800907c <memmove+0x24>

0800908c <_fstat_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	@ (80090ac <_fstat_r+0x20>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f9 fac2 	bl	8002622 <_fstat>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_fstat_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_fstat_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	2000062c 	.word	0x2000062c

080090b0 <_isatty_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	@ (80090cc <_isatty_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7f9 fac1 	bl	8002642 <_isatty>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_isatty_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_isatty_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	2000062c 	.word	0x2000062c

080090d0 <_sbrk_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d06      	ldr	r5, [pc, #24]	@ (80090ec <_sbrk_r+0x1c>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	f7f9 faca 	bl	8002674 <_sbrk>
 80090e0:	1c43      	adds	r3, r0, #1
 80090e2:	d102      	bne.n	80090ea <_sbrk_r+0x1a>
 80090e4:	682b      	ldr	r3, [r5, #0]
 80090e6:	b103      	cbz	r3, 80090ea <_sbrk_r+0x1a>
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bd38      	pop	{r3, r4, r5, pc}
 80090ec:	2000062c 	.word	0x2000062c

080090f0 <abort>:
 80090f0:	b508      	push	{r3, lr}
 80090f2:	2006      	movs	r0, #6
 80090f4:	f000 f86e 	bl	80091d4 <raise>
 80090f8:	2001      	movs	r0, #1
 80090fa:	f7f9 fa5e 	bl	80025ba <_exit>

080090fe <_calloc_r>:
 80090fe:	b570      	push	{r4, r5, r6, lr}
 8009100:	fba1 5402 	umull	r5, r4, r1, r2
 8009104:	b93c      	cbnz	r4, 8009116 <_calloc_r+0x18>
 8009106:	4629      	mov	r1, r5
 8009108:	f7fe fe14 	bl	8007d34 <_malloc_r>
 800910c:	4606      	mov	r6, r0
 800910e:	b928      	cbnz	r0, 800911c <_calloc_r+0x1e>
 8009110:	2600      	movs	r6, #0
 8009112:	4630      	mov	r0, r6
 8009114:	bd70      	pop	{r4, r5, r6, pc}
 8009116:	220c      	movs	r2, #12
 8009118:	6002      	str	r2, [r0, #0]
 800911a:	e7f9      	b.n	8009110 <_calloc_r+0x12>
 800911c:	462a      	mov	r2, r5
 800911e:	4621      	mov	r1, r4
 8009120:	f7fd fb42 	bl	80067a8 <memset>
 8009124:	e7f5      	b.n	8009112 <_calloc_r+0x14>

08009126 <_realloc_r>:
 8009126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912a:	4680      	mov	r8, r0
 800912c:	4615      	mov	r5, r2
 800912e:	460c      	mov	r4, r1
 8009130:	b921      	cbnz	r1, 800913c <_realloc_r+0x16>
 8009132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	4611      	mov	r1, r2
 8009138:	f7fe bdfc 	b.w	8007d34 <_malloc_r>
 800913c:	b92a      	cbnz	r2, 800914a <_realloc_r+0x24>
 800913e:	f7fe fa4b 	bl	80075d8 <_free_r>
 8009142:	2400      	movs	r4, #0
 8009144:	4620      	mov	r0, r4
 8009146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914a:	f000 f85f 	bl	800920c <_malloc_usable_size_r>
 800914e:	4285      	cmp	r5, r0
 8009150:	4606      	mov	r6, r0
 8009152:	d802      	bhi.n	800915a <_realloc_r+0x34>
 8009154:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009158:	d8f4      	bhi.n	8009144 <_realloc_r+0x1e>
 800915a:	4629      	mov	r1, r5
 800915c:	4640      	mov	r0, r8
 800915e:	f7fe fde9 	bl	8007d34 <_malloc_r>
 8009162:	4607      	mov	r7, r0
 8009164:	2800      	cmp	r0, #0
 8009166:	d0ec      	beq.n	8009142 <_realloc_r+0x1c>
 8009168:	42b5      	cmp	r5, r6
 800916a:	462a      	mov	r2, r5
 800916c:	4621      	mov	r1, r4
 800916e:	bf28      	it	cs
 8009170:	4632      	movcs	r2, r6
 8009172:	f7fd fbaa 	bl	80068ca <memcpy>
 8009176:	4621      	mov	r1, r4
 8009178:	4640      	mov	r0, r8
 800917a:	f7fe fa2d 	bl	80075d8 <_free_r>
 800917e:	463c      	mov	r4, r7
 8009180:	e7e0      	b.n	8009144 <_realloc_r+0x1e>

08009182 <_raise_r>:
 8009182:	291f      	cmp	r1, #31
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4605      	mov	r5, r0
 8009188:	460c      	mov	r4, r1
 800918a:	d904      	bls.n	8009196 <_raise_r+0x14>
 800918c:	2316      	movs	r3, #22
 800918e:	6003      	str	r3, [r0, #0]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	bd38      	pop	{r3, r4, r5, pc}
 8009196:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009198:	b112      	cbz	r2, 80091a0 <_raise_r+0x1e>
 800919a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800919e:	b94b      	cbnz	r3, 80091b4 <_raise_r+0x32>
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 f831 	bl	8009208 <_getpid_r>
 80091a6:	4622      	mov	r2, r4
 80091a8:	4601      	mov	r1, r0
 80091aa:	4628      	mov	r0, r5
 80091ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091b0:	f000 b818 	b.w	80091e4 <_kill_r>
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d00a      	beq.n	80091ce <_raise_r+0x4c>
 80091b8:	1c59      	adds	r1, r3, #1
 80091ba:	d103      	bne.n	80091c4 <_raise_r+0x42>
 80091bc:	2316      	movs	r3, #22
 80091be:	6003      	str	r3, [r0, #0]
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7e7      	b.n	8009194 <_raise_r+0x12>
 80091c4:	2100      	movs	r1, #0
 80091c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091ca:	4620      	mov	r0, r4
 80091cc:	4798      	blx	r3
 80091ce:	2000      	movs	r0, #0
 80091d0:	e7e0      	b.n	8009194 <_raise_r+0x12>
	...

080091d4 <raise>:
 80091d4:	4b02      	ldr	r3, [pc, #8]	@ (80091e0 <raise+0xc>)
 80091d6:	4601      	mov	r1, r0
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f7ff bfd2 	b.w	8009182 <_raise_r>
 80091de:	bf00      	nop
 80091e0:	20000194 	.word	0x20000194

080091e4 <_kill_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4d07      	ldr	r5, [pc, #28]	@ (8009204 <_kill_r+0x20>)
 80091e8:	2300      	movs	r3, #0
 80091ea:	4604      	mov	r4, r0
 80091ec:	4608      	mov	r0, r1
 80091ee:	4611      	mov	r1, r2
 80091f0:	602b      	str	r3, [r5, #0]
 80091f2:	f7f9 f9d2 	bl	800259a <_kill>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	d102      	bne.n	8009200 <_kill_r+0x1c>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	b103      	cbz	r3, 8009200 <_kill_r+0x1c>
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	bd38      	pop	{r3, r4, r5, pc}
 8009202:	bf00      	nop
 8009204:	2000062c 	.word	0x2000062c

08009208 <_getpid_r>:
 8009208:	f7f9 b9bf 	b.w	800258a <_getpid>

0800920c <_malloc_usable_size_r>:
 800920c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009210:	1f18      	subs	r0, r3, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfbc      	itt	lt
 8009216:	580b      	ldrlt	r3, [r1, r0]
 8009218:	18c0      	addlt	r0, r0, r3
 800921a:	4770      	bx	lr

0800921c <_init>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	bf00      	nop
 8009220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009222:	bc08      	pop	{r3}
 8009224:	469e      	mov	lr, r3
 8009226:	4770      	bx	lr

08009228 <_fini>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	bf00      	nop
 800922c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922e:	bc08      	pop	{r3}
 8009230:	469e      	mov	lr, r3
 8009232:	4770      	bx	lr
