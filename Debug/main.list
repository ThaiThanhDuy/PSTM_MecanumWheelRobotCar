
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b960  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800baf0  0800baf0  0000caf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c04c  0800c04c  0000e254  2**0
                  CONTENTS
  4 .ARM          00000008  0800c04c  0800c04c  0000d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c054  0800c054  0000e254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c054  0800c054  0000d054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c058  0800c058  0000d058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800c05c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e254  2**0
                  CONTENTS
 10 .bss          00000560  20000258  20000258  0000e258  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200007b8  200007b8  0000e258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec8a  00000000  00000000  0000e284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020fe  00000000  00000000  0001cf0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  0001f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b11  00000000  00000000  0001fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002caf  00000000  00000000  00020949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001001c  00000000  00000000  000235f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce06b  00000000  00000000  00033614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010167f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005344  00000000  00000000  001016c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00106a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bad8 	.word	0x0800bad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800bad8 	.word	0x0800bad8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <sendJointState>:
uint8_t buffer[30]; // Buffer to hold the received string
float value1, value2, value3, value4;
float oldValue1, oldValue2 ,oldValue3,oldValue4;
/// SEND DATA

void sendJointState(float pos1, float pos2, float pos3, float pos4, float velO1, float velO2, float velO3, float velO4) {
 8000fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe8:	b0e0      	sub	sp, #384	@ 0x180
 8000fea:	af10      	add	r7, sp, #64	@ 0x40
 8000fec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ff4:	ed83 0a00 	vstr	s0, [r3]
 8000ff8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001000:	edc3 0a00 	vstr	s1, [r3]
 8001004:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001008:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800100c:	ed83 1a00 	vstr	s2, [r3]
 8001010:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001014:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001018:	edc3 1a00 	vstr	s3, [r3]
 800101c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001020:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001024:	ed83 2a00 	vstr	s4, [r3]
 8001028:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800102c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001030:	edc3 2a00 	vstr	s5, [r3]
 8001034:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001038:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800103c:	ed83 3a00 	vstr	s6, [r3]
 8001040:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001044:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001048:	edc3 3a00 	vstr	s7, [r3]
    HAL_Delay(100);*/
    // Prepare a buffer to hold the complete joint state message
       char txBuffer[256]; // Ensure this buffer is large enough to hold the entire message

       // Format the joint state message into the buffer
       snprintf(txBuffer, sizeof(txBuffer), "pos1:%.2f vel1:%.2f pos2:%.2f vel2:%.2f pos3:%.2f vel3:%.2f pos4:%.2f vel4:%.2f\n",
 800104c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	4682      	mov	sl, r0
 800105c:	468b      	mov	fp, r1
 800105e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001062:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	f7ff fa6e 	bl	8000548 <__aeabi_f2d>
 800106c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001070:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f7ff fa65 	bl	8000548 <__aeabi_f2d>
 800107e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001082:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001086:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f7ff fa5c 	bl	8000548 <__aeabi_f2d>
 8001090:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001094:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001098:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	e9c7 0100 	strd	r0, r1, [r7]
 80010a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_f2d>
 80010b4:	4680      	mov	r8, r0
 80010b6:	4689      	mov	r9, r1
 80010b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff fa41 	bl	8000548 <__aeabi_f2d>
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
 80010ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80010e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 80010e4:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 80010e8:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80010ec:	ed97 7b00 	vldr	d7, [r7]
 80010f0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80010f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80010f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001100:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001104:	ed97 7b06 	vldr	d7, [r7, #24]
 8001108:	ed8d 7b02 	vstr	d7, [sp, #8]
 800110c:	e9cd ab00 	strd	sl, fp, [sp]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <sendJointState+0x164>)
 8001112:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001116:	f007 fd87 	bl	8008c28 <sniprintf>
                pos1, velO1, pos2, velO2, pos3, velO3, pos4, velO4);

       // Transmit the complete message over UART
       HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800111a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f8a6 	bl	8000270 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	4806      	ldr	r0, [pc, #24]	@ (800114c <sendJointState+0x168>)
 8001132:	f005 fb6f 	bl	8006814 <HAL_UART_Transmit>
       // Optional delay to prevent flooding the UART
       HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f003 fc58 	bl	80049ec <HAL_Delay>
}
 800113c:	bf00      	nop
 800113e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001148:	0800baf0 	.word	0x0800baf0
 800114c:	2000061c 	.word	0x2000061c

08001150 <UART_ReceiveString>:

/// REVICE DATA


void UART_ReceiveString(uint8_t *buffer, size_t length) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    // Clear the buffer before receiving new data
    memset(buffer, 0, length); // Clear the buffer
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f007 fe8e 	bl	8008e80 <memset>

    // Receive data with a timeout of 256 ms
    if (HAL_UART_Receive(&huart2, buffer, length - 1, 256) == HAL_OK) {
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29a      	uxth	r2, r3
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <UART_ReceiveString+0x4c>)
 8001174:	f005 fbd9 	bl	800692a <HAL_UART_Receive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <UART_ReceiveString+0x3c>
        buffer[length - 1] = '\0'; // Null-terminate the string
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
    } else {
        // Handle reception error
        printf("UART reception error\n");
    }
}
 800118a:	e002      	b.n	8001192 <UART_ReceiveString+0x42>
        printf("UART reception error\n");
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <UART_ReceiveString+0x50>)
 800118e:	f007 fd43 	bl	8008c18 <puts>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000061c 	.word	0x2000061c
 80011a0:	0800bb44 	.word	0x0800bb44

080011a4 <ReadFourFloats>:

// Function to read four float values from a received string
void ReadFourFloats(float *val1, float *val2, float *val3, float *val4) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	@ 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
	HAL_Delay(100); // Wait for 100 ms before receiving new data
 80011b2:	2064      	movs	r0, #100	@ 0x64
 80011b4:	f003 fc1a 	bl	80049ec <HAL_Delay>
	UART_ReceiveString(buffer, sizeof(buffer)); // Receive the string from UART
 80011b8:	211e      	movs	r1, #30
 80011ba:	4860      	ldr	r0, [pc, #384]	@ (800133c <ReadFourFloats+0x198>)
 80011bc:	f7ff ffc8 	bl	8001150 <UART_ReceiveString>
	// Example input: "c: 0.54,0.54,0.54,0.54"

	// Print the received buffer for debugging
	printf("Received buffer: %s\n", buffer);
 80011c0:	495e      	ldr	r1, [pc, #376]	@ (800133c <ReadFourFloats+0x198>)
 80011c2:	485f      	ldr	r0, [pc, #380]	@ (8001340 <ReadFourFloats+0x19c>)
 80011c4:	f007 fcc0 	bl	8008b48 <iprintf>

	// Pointer to the start of the buffer
	char *start = (char *)buffer;
 80011c8:	4b5c      	ldr	r3, [pc, #368]	@ (800133c <ReadFourFloats+0x198>)
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Loop to find and process all valid messages
	while ((start = strstr(start, "c:")) != NULL) {
 80011cc:	e0a7      	b.n	800131e <ReadFourFloats+0x17a>
	    // Move the pointer past "c:"
	    char *data = start + 2;
 80011ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d0:	3302      	adds	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]

	    // Find the end of the message (next 'c:' or end of buffer)
	    char *end = strstr(data, "c:");
 80011d4:	495b      	ldr	r1, [pc, #364]	@ (8001344 <ReadFourFloats+0x1a0>)
 80011d6:	69b8      	ldr	r0, [r7, #24]
 80011d8:	f007 fec8 	bl	8008f6c <strstr>
 80011dc:	6178      	str	r0, [r7, #20]
	    if (end != NULL) {
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <ReadFourFloats+0x46>
	        *end = '\0'; // Temporarily terminate the string for parsing
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
	    }

	    // Print the data after the prefix for debugging
	    printf("Data after prefix: %s\n", data);
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	4856      	ldr	r0, [pc, #344]	@ (8001348 <ReadFourFloats+0x1a4>)
 80011ee:	f007 fcab 	bl	8008b48 <iprintf>

	    // Parse the string
	    char *token = strtok(data, ",");
 80011f2:	4956      	ldr	r1, [pc, #344]	@ (800134c <ReadFourFloats+0x1a8>)
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f007 fe5d 	bl	8008eb4 <strtok>
 80011fa:	6138      	str	r0, [r7, #16]
	    float newValue1, newValue2, newValue3, newValue4; // Store new values

	    if (token != NULL) {
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <ReadFourFloats+0x74>
	        newValue1 = atof(token); // Convert to float
 8001202:	6938      	ldr	r0, [r7, #16]
 8001204:	f005 ff58 	bl	80070b8 <atof>
 8001208:	ec53 2b10 	vmov	r2, r3, d0
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fcea 	bl	8000be8 <__aeabi_d2f>
 8001214:	4603      	mov	r3, r0
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
	    //    printf("Parsed val1: %.2f\n", newValue1);
	    }

	    token = strtok(NULL, ",");
 8001218:	494c      	ldr	r1, [pc, #304]	@ (800134c <ReadFourFloats+0x1a8>)
 800121a:	2000      	movs	r0, #0
 800121c:	f007 fe4a 	bl	8008eb4 <strtok>
 8001220:	6138      	str	r0, [r7, #16]
	    if (token != NULL) {
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d012      	beq.n	800124e <ReadFourFloats+0xaa>
	        newValue2 = atof(token); // Convert to float
 8001228:	6938      	ldr	r0, [r7, #16]
 800122a:	f005 ff45 	bl	80070b8 <atof>
 800122e:	ec53 2b10 	vmov	r2, r3, d0
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fcd7 	bl	8000be8 <__aeabi_d2f>
 800123a:	4603      	mov	r3, r0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
	        printf("Parsed val2: %.2f\n", newValue2);
 800123e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4841      	ldr	r0, [pc, #260]	@ (8001350 <ReadFourFloats+0x1ac>)
 800124a:	f007 fc7d 	bl	8008b48 <iprintf>
	    }

	    token = strtok(NULL, ",");
 800124e:	493f      	ldr	r1, [pc, #252]	@ (800134c <ReadFourFloats+0x1a8>)
 8001250:	2000      	movs	r0, #0
 8001252:	f007 fe2f 	bl	8008eb4 <strtok>
 8001256:	6138      	str	r0, [r7, #16]
	    if (token != NULL) {
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00a      	beq.n	8001274 <ReadFourFloats+0xd0>
	        newValue3 = atof(token); // Convert to float
 800125e:	6938      	ldr	r0, [r7, #16]
 8001260:	f005 ff2a 	bl	80070b8 <atof>
 8001264:	ec53 2b10 	vmov	r2, r3, d0
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fcbc 	bl	8000be8 <__aeabi_d2f>
 8001270:	4603      	mov	r3, r0
 8001272:	623b      	str	r3, [r7, #32]
	    //    printf("Parsed val3: %.2f\n", newValue3);
	    }

	    token = strtok(NULL, ",");
 8001274:	4935      	ldr	r1, [pc, #212]	@ (800134c <ReadFourFloats+0x1a8>)
 8001276:	2000      	movs	r0, #0
 8001278:	f007 fe1c 	bl	8008eb4 <strtok>
 800127c:	6138      	str	r0, [r7, #16]
	    if (token != NULL) {
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00a      	beq.n	800129a <ReadFourFloats+0xf6>
	        newValue4 = atof(token); // Convert to float
 8001284:	6938      	ldr	r0, [r7, #16]
 8001286:	f005 ff17 	bl	80070b8 <atof>
 800128a:	ec53 2b10 	vmov	r2, r3, d0
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fca9 	bl	8000be8 <__aeabi_d2f>
 8001296:	4603      	mov	r3, r0
 8001298:	61fb      	str	r3, [r7, #28]
	       // printf("Parsed val4: %.2f\n", newValue4);
	    }

	    // Check if new values are different from old values
	    if (newValue1 != oldValue1 || newValue2 != oldValue2 || newValue3 != oldValue3 || newValue4 != oldValue4) {
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <ReadFourFloats+0x1b0>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d11d      	bne.n	80012ea <ReadFourFloats+0x146>
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <ReadFourFloats+0x1b4>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80012b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d113      	bne.n	80012ea <ReadFourFloats+0x146>
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <ReadFourFloats+0x1b8>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80012cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d109      	bne.n	80012ea <ReadFourFloats+0x146>
 80012d6:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <ReadFourFloats+0x1bc>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80012e0:	eeb4 7a67 	vcmp.f32	s14, s15
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d017      	beq.n	800131a <ReadFourFloats+0x176>
	        *val1 = newValue1;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012ee:	601a      	str	r2, [r3, #0]
	        *val2 = newValue2;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f4:	601a      	str	r2, [r3, #0]
	        *val3 = newValue3;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a3a      	ldr	r2, [r7, #32]
 80012fa:	601a      	str	r2, [r3, #0]
	        *val4 = newValue4;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	601a      	str	r2, [r3, #0]

	        oldValue1 = newValue1;
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <ReadFourFloats+0x1b0>)
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001306:	6013      	str	r3, [r2, #0]
	        oldValue2 = newValue2;
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <ReadFourFloats+0x1b4>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	6013      	str	r3, [r2, #0]
	        oldValue3 = newValue3;
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <ReadFourFloats+0x1b8>)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	6013      	str	r3, [r2, #0]
	        oldValue4 = newValue4;
 8001314:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <ReadFourFloats+0x1bc>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	6013      	str	r3, [r2, #0]
	    }

	    // Move the start pointer to the end of the current message for the next iteration
	    start = end;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while ((start = strstr(start, "c:")) != NULL) {
 800131e:	4909      	ldr	r1, [pc, #36]	@ (8001344 <ReadFourFloats+0x1a0>)
 8001320:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001322:	f007 fe23 	bl	8008f6c <strstr>
 8001326:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f af4f 	bne.w	80011ce <ReadFourFloats+0x2a>
	}
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3730      	adds	r7, #48	@ 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000274 	.word	0x20000274
 8001340:	0800bb5c 	.word	0x0800bb5c
 8001344:	0800bb74 	.word	0x0800bb74
 8001348:	0800bb78 	.word	0x0800bb78
 800134c:	0800bb90 	.word	0x0800bb90
 8001350:	0800bb94 	.word	0x0800bb94
 8001354:	200002a4 	.word	0x200002a4
 8001358:	200002a8 	.word	0x200002a8
 800135c:	200002ac 	.word	0x200002ac
 8001360:	200002b0 	.word	0x200002b0
 8001364:	00000000 	.word	0x00000000

08001368 <moving_average_filter1>:
float angular_position_deg1 = 0.0; // Angular position in degrees
float realVel1;
float realRPM1;

// Function to calculate exponential moving average
float moving_average_filter1(float new_velocity) {
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	ed87 0a01 	vstr	s0, [r7, #4]
    static float ema1 = 0.0; // Initialize EMA variable
    ema1 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema1);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	a318      	add	r3, pc, #96	@ (adr r3, 80013dc <moving_average_filter1+0x74>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f93b 	bl	80005f8 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4614      	mov	r4, r2
 8001388:	461d      	mov	r5, r3
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <moving_average_filter1+0x70>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8da 	bl	8000548 <__aeabi_f2d>
 8001394:	a30e      	add	r3, pc, #56	@ (adr r3, 80013d0 <moving_average_filter1+0x68>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff f92d 	bl	80005f8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4620      	mov	r0, r4
 80013a4:	4629      	mov	r1, r5
 80013a6:	f7fe ff71 	bl	800028c <__adddf3>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff fc19 	bl	8000be8 <__aeabi_d2f>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a07      	ldr	r2, [pc, #28]	@ (80013d8 <moving_average_filter1+0x70>)
 80013ba:	6013      	str	r3, [r2, #0]
    return ema1;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <moving_average_filter1+0x70>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	ee07 3a90 	vmov	s15, r3
}
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	9999999a 	.word	0x9999999a
 80013d4:	3fe99999 	.word	0x3fe99999
 80013d8:	200003bc 	.word	0x200003bc
 80013dc:	9999999a 	.word	0x9999999a
 80013e0:	3fc99999 	.word	0x3fc99999
 80013e4:	00000000 	.word	0x00000000

080013e8 <calculate_pwm1>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm1(float desired_velocity) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	ed87 0a01 	vstr	s0, [r7, #4]
    if (desired_velocity < 0) {
 80013f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	d505      	bpl.n	800140c <calculate_pwm1+0x24>
        desired_velocity = -desired_velocity;
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	eef1 7a67 	vneg.f32	s15, s15
 8001408:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	a310      	add	r3, pc, #64	@ (adr r3, 8001454 <calculate_pwm1+0x6c>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fa18 	bl	800084c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <calculate_pwm1+0x68>)
 800142a:	f7ff f8e5 	bl	80005f8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbd7 	bl	8000be8 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	f3af 8000 	nop.w
 8001450:	408f4000 	.word	0x408f4000
 8001454:	147ae148 	.word	0x147ae148
 8001458:	3fd147ae 	.word	0x3fd147ae

0800145c <PID_Controller1>:

// PID Controller Function with Anti-Windup
float PID_Controller1(float Kp, float Ki, float Kd, float *integral, float last_error, float setpoint, float measured_value) {
 800145c:	b480      	push	{r7}
 800145e:	b08d      	sub	sp, #52	@ 0x34
 8001460:	af00      	add	r7, sp, #0
 8001462:	ed87 0a07 	vstr	s0, [r7, #28]
 8001466:	edc7 0a06 	vstr	s1, [r7, #24]
 800146a:	ed87 1a05 	vstr	s2, [r7, #20]
 800146e:	6138      	str	r0, [r7, #16]
 8001470:	edc7 1a03 	vstr	s3, [r7, #12]
 8001474:	ed87 2a02 	vstr	s4, [r7, #8]
 8001478:	edc7 2a01 	vstr	s5, [r7, #4]
    // Calculate the error
    float error1 = setpoint - measured_value;
 800147c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001488:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Update the integral term with clamping to prevent windup
    *integral += error1;
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	edc3 7a00 	vstr	s15, [r3]
    if (*integral > MAX_INTEGRAL) {
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001530 <PID_Controller1+0xd4>
 80014aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	dd03      	ble.n	80014bc <PID_Controller1+0x60>
        *integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001534 <PID_Controller1+0xd8>)
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00c      	b.n	80014d6 <PID_Controller1+0x7a>
    } else if (*integral < -MAX_INTEGRAL) {
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001538 <PID_Controller1+0xdc>
 80014c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d502      	bpl.n	80014d6 <PID_Controller1+0x7a>
        *integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4a1a      	ldr	r2, [pc, #104]	@ (800153c <PID_Controller1+0xe0>)
 80014d4:	601a      	str	r2, [r3, #0]
    }

    // Calculate the derivative term
    float derivative1 = error1 - last_error;
 80014d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014da:	edd7 7a03 	vldr	s15, [r7, #12]
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Calculate the output
    float output1 = (Kp * error1) + (Ki * (*integral)) + (Kd * derivative1);
 80014e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	edd3 6a00 	vldr	s13, [r3]
 80014f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001504:	edd7 6a05 	vldr	s13, [r7, #20]
 8001508:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800150c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Save the last error for next iteration
    last_error = error1;
 8001518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151a:	60fb      	str	r3, [r7, #12]

    return output1; // Return the control output
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	ee07 3a90 	vmov	s15, r3
}
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	3734      	adds	r7, #52	@ 0x34
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	42c80000 	.word	0x42c80000
 8001534:	42c80000 	.word	0x42c80000
 8001538:	c2c80000 	.word	0xc2c80000
 800153c:	c2c80000 	.word	0xc2c80000

08001540 <calculateVel1>:

int32_t current_pulse_count1 = 0;


// Function to calculate RPM and control the motor
void calculateVel1(float velTag1, float current_time1) {
 8001540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	ed87 0a01 	vstr	s0, [r7, #4]
 800154c:	edc7 0a00 	vstr	s1, [r7]
    static float distance_traveled1 = 0.0;

    // Check if velTag1 is within the deadband
    if (fabs(velTag1) < DEAD_BAND) {
 8001550:	edd7 7a01 	vldr	s15, [r7, #4]
 8001554:	eef0 7ae7 	vabs.f32	s15, s15
 8001558:	ee17 0a90 	vmov	r0, s15
 800155c:	f7fe fff4 	bl	8000548 <__aeabi_f2d>
 8001560:	a382      	add	r3, pc, #520	@ (adr r3, 800176c <calculateVel1+0x22c>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff fab9 	bl	8000adc <__aeabi_dcmplt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <calculateVel1+0x36>
        velTag1 = 0; // Set velTag1 to zero if within deadband
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
    }

    // Immediate stop if velTag1 is 0
    if (velTag1 == 0) {
 8001576:	edd7 7a01 	vldr	s15, [r7, #4]
 800157a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d13c      	bne.n	80015fe <calculateVel1+0xbe>
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001584:	4b68      	ldr	r3, [pc, #416]	@ (8001728 <calculateVel1+0x1e8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 800158c:	4b66      	ldr	r3, [pc, #408]	@ (8001728 <calculateVel1+0x1e8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	639a      	str	r2, [r3, #56]	@ 0x38
        vel1 = 0.0;
 8001594:	4b65      	ldr	r3, [pc, #404]	@ (800172c <calculateVel1+0x1ec>)
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 800159c:	4b64      	ldr	r3, [pc, #400]	@ (8001730 <calculateVel1+0x1f0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24
        rpm1 = 0.0;
 80015a4:	4963      	ldr	r1, [pc, #396]	@ (8001734 <calculateVel1+0x1f4>)
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	e9c1 2300 	strd	r2, r3, [r1]
        control_output1 = 0.0;
 80015b2:	4b61      	ldr	r3, [pc, #388]	@ (8001738 <calculateVel1+0x1f8>)
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
        // Reset variables except angular_position_rad1
        realVel1 = 0.0;
 80015ba:	4b60      	ldr	r3, [pc, #384]	@ (800173c <calculateVel1+0x1fc>)
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
        realRPM1 = 0.0;
 80015c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001740 <calculateVel1+0x200>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
        integral1_1 = 0.0;
 80015ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001744 <calculateVel1+0x204>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
        last_error1 = 0.0;
 80015d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001748 <calculateVel1+0x208>)
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
        last_control_output1 = 0.0;
 80015da:	4b5c      	ldr	r3, [pc, #368]	@ (800174c <calculateVel1+0x20c>)
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
        distance_traveled1 = 0.0;
 80015e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001750 <calculateVel1+0x210>)
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
        pulse_count1 = 0; // Reset pulse count
 80015ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001754 <calculateVel1+0x214>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
        last_velTag1 = velTag1; // Update last velTag1
 80015f0:	4a59      	ldr	r2, [pc, #356]	@ (8001758 <calculateVel1+0x218>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
        HAL_Delay(STOP_DURATION); // Wait for 100 ms
 80015f6:	2064      	movs	r0, #100	@ 0x64
 80015f8:	f003 f9f8 	bl	80049ec <HAL_Delay>
        return; // Exit the function
 80015fc:	e2f6      	b.n	8001bec <calculateVel1+0x6ac>
    }

    // Calculate the time elapsed since the last update
    float delta_time1 = current_time1 - last_time1;
 80015fe:	4b57      	ldr	r3, [pc, #348]	@ (800175c <calculateVel1+0x21c>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ed97 7a00 	vldr	s14, [r7]
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Read the current pulse count
    current_pulse_count1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001610:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <calculateVel1+0x1f0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	461a      	mov	r2, r3
 8001618:	4b51      	ldr	r3, [pc, #324]	@ (8001760 <calculateVel1+0x220>)
 800161a:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 800161c:	200a      	movs	r0, #10
 800161e:	f003 f9e5 	bl	80049ec <HAL_Delay>

    // Calculate the difference in pulse count
    int32_t pulse_difference1 = current_pulse_count1 - pulse_count1;
 8001622:	4b4f      	ldr	r3, [pc, #316]	@ (8001760 <calculateVel1+0x220>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b4a      	ldr	r3, [pc, #296]	@ (8001754 <calculateVel1+0x214>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	60fb      	str	r3, [r7, #12]

    // Calculate RPM as a positive value
    rpm1 = fabs((float)pulse_difference1 / (float)PPR) * 60.0; // Always positive
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163a:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800163e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001642:	eef0 7ae7 	vabs.f32	s15, s15
 8001646:	ee17 0a90 	vmov	r0, s15
 800164a:	f7fe ff7d 	bl	8000548 <__aeabi_f2d>
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <calculateVel1+0x224>)
 8001654:	f7fe ffd0 	bl	80005f8 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4935      	ldr	r1, [pc, #212]	@ (8001734 <calculateVel1+0x1f4>)
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
    pulse_count1 = current_pulse_count1;
 8001662:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <calculateVel1+0x220>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <calculateVel1+0x214>)
 800166a:	601a      	str	r2, [r3, #0]

    // Limit RPM to the range [0, 250]
       rpm1 = fmax(0.0, fmin(250.0, rpm1));
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <calculateVel1+0x1f4>)
 800166e:	ed93 7b00 	vldr	d7, [r3]
 8001672:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001710 <calculateVel1+0x1d0>
 8001676:	eeb0 0a47 	vmov.f32	s0, s14
 800167a:	eef0 0a67 	vmov.f32	s1, s15
 800167e:	f00a f9d7 	bl	800ba30 <fmin>
 8001682:	eeb0 7a40 	vmov.f32	s14, s0
 8001686:	eef0 7a60 	vmov.f32	s15, s1
 800168a:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001718 <calculateVel1+0x1d8>
 800168e:	eeb0 0a47 	vmov.f32	s0, s14
 8001692:	eef0 0a67 	vmov.f32	s1, s15
 8001696:	f00a f9a1 	bl	800b9dc <fmax>
 800169a:	eeb0 7a40 	vmov.f32	s14, s0
 800169e:	eef0 7a60 	vmov.f32	s15, s1
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <calculateVel1+0x1f4>)
 80016a4:	ed83 7b00 	vstr	d7, [r3]
    // Calculate linear velocity (m/s)
    float new_vel1;
    if (pulse_difference1 < 0) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da62      	bge.n	8001774 <calculateVel1+0x234>
        new_vel1 = -((rpm1 / 60.0) * dia1 * M_PI); // Negative velocity for reverse direction
 80016ae:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <calculateVel1+0x1f4>)
 80016b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001764 <calculateVel1+0x224>)
 80016ba:	f7ff f8c7 	bl	800084c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4614      	mov	r4, r2
 80016c4:	461d      	mov	r5, r3
 80016c6:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <calculateVel1+0x228>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff3c 	bl	8000548 <__aeabi_f2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ff8e 	bl	80005f8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001720 <calculateVel1+0x1e0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff85 	bl	80005f8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa77 	bl	8000be8 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef1 7a67 	vneg.f32	s15, s15
 8001704:	edc7 7a05 	vstr	s15, [r7, #20]
 8001708:	e05c      	b.n	80017c4 <calculateVel1+0x284>
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	00000000 	.word	0x00000000
 8001714:	406f4000 	.word	0x406f4000
	...
 8001720:	54442d18 	.word	0x54442d18
 8001724:	400921fb 	.word	0x400921fb
 8001728:	200005d4 	.word	0x200005d4
 800172c:	200002c8 	.word	0x200002c8
 8001730:	200003dc 	.word	0x200003dc
 8001734:	200002c0 	.word	0x200002c0
 8001738:	200002cc 	.word	0x200002cc
 800173c:	200002f0 	.word	0x200002f0
 8001740:	200002f4 	.word	0x200002f4
 8001744:	200002d0 	.word	0x200002d0
 8001748:	200002d4 	.word	0x200002d4
 800174c:	200002d8 	.word	0x200002d8
 8001750:	200003c0 	.word	0x200003c0
 8001754:	200002b8 	.word	0x200002b8
 8001758:	200002dc 	.word	0x200002dc
 800175c:	200002e4 	.word	0x200002e4
 8001760:	200002f8 	.word	0x200002f8
 8001764:	404e0000 	.word	0x404e0000
 8001768:	20000000 	.word	0x20000000
 800176c:	47ae147b 	.word	0x47ae147b
 8001770:	3f847ae1 	.word	0x3f847ae1
    } else {
        new_vel1 = (rpm1 / 60.0) * dia1 * M_PI; // Positive velocity for forward direction
 8001774:	4bac      	ldr	r3, [pc, #688]	@ (8001a28 <calculateVel1+0x4e8>)
 8001776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4bab      	ldr	r3, [pc, #684]	@ (8001a2c <calculateVel1+0x4ec>)
 8001780:	f7ff f864 	bl	800084c <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4ba8      	ldr	r3, [pc, #672]	@ (8001a30 <calculateVel1+0x4f0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	a397      	add	r3, pc, #604	@ (adr r3, 8001a08 <calculateVel1+0x4c8>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe ff22 	bl	80005f8 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa14 	bl	8000be8 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	617b      	str	r3, [r7, #20]
    }

    // Apply moving average filter for velocity
  //  vel1 = moving_average_filter1(new_vel1);
    // Constrain the velocity to the range [-1, 1]
       vel1= fmax(-1.0, fmin(1.0, moving_average_filter1(new_vel1)));
 80017c4:	ed97 0a05 	vldr	s0, [r7, #20]
 80017c8:	f7ff fdce 	bl	8001368 <moving_average_filter1>
 80017cc:	ee10 3a10 	vmov	r3, s0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe feb9 	bl	8000548 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8001a10 <calculateVel1+0x4d0>
 80017de:	ec43 2b10 	vmov	d0, r2, r3
 80017e2:	f00a f925 	bl	800ba30 <fmin>
 80017e6:	eeb0 7a40 	vmov.f32	s14, s0
 80017ea:	eef0 7a60 	vmov.f32	s15, s1
 80017ee:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8001a18 <calculateVel1+0x4d8>
 80017f2:	eeb0 0a47 	vmov.f32	s0, s14
 80017f6:	eef0 0a67 	vmov.f32	s1, s15
 80017fa:	f00a f8ef 	bl	800b9dc <fmax>
 80017fe:	ec53 2b10 	vmov	r2, r3, d0
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7ff f9ef 	bl	8000be8 <__aeabi_d2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4a89      	ldr	r2, [pc, #548]	@ (8001a34 <calculateVel1+0x4f4>)
 800180e:	6013      	str	r3, [r2, #0]
    // Update position based on velocity and elapsed time
    distance_traveled1 += vel1 * (delta_time1 / 1000.0); // Linear distance traveled in meters
 8001810:	4b89      	ldr	r3, [pc, #548]	@ (8001a38 <calculateVel1+0x4f8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe97 	bl	8000548 <__aeabi_f2d>
 800181a:	4604      	mov	r4, r0
 800181c:	460d      	mov	r5, r1
 800181e:	4b85      	ldr	r3, [pc, #532]	@ (8001a34 <calculateVel1+0x4f4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe90 	bl	8000548 <__aeabi_f2d>
 8001828:	4680      	mov	r8, r0
 800182a:	4689      	mov	r9, r1
 800182c:	6938      	ldr	r0, [r7, #16]
 800182e:	f7fe fe8b 	bl	8000548 <__aeabi_f2d>
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b81      	ldr	r3, [pc, #516]	@ (8001a3c <calculateVel1+0x4fc>)
 8001838:	f7ff f808 	bl	800084c <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7fe fed8 	bl	80005f8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe fd1c 	bl	800028c <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f9c4 	bl	8000be8 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	4a75      	ldr	r2, [pc, #468]	@ (8001a38 <calculateVel1+0x4f8>)
 8001864:	6013      	str	r3, [r2, #0]
    angular_position_rad1 += distance_traveled1 / (dia1 / 2.0); // Update angular position in radians
 8001866:	4b76      	ldr	r3, [pc, #472]	@ (8001a40 <calculateVel1+0x500>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe6c 	bl	8000548 <__aeabi_f2d>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	4b70      	ldr	r3, [pc, #448]	@ (8001a38 <calculateVel1+0x4f8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	4680      	mov	r8, r0
 8001880:	4689      	mov	r9, r1
 8001882:	4b6b      	ldr	r3, [pc, #428]	@ (8001a30 <calculateVel1+0x4f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe5e 	bl	8000548 <__aeabi_f2d>
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001894:	f7fe ffda 	bl	800084c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4640      	mov	r0, r8
 800189e:	4649      	mov	r1, r9
 80018a0:	f7fe ffd4 	bl	800084c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcee 	bl	800028c <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f996 	bl	8000be8 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a60      	ldr	r2, [pc, #384]	@ (8001a40 <calculateVel1+0x500>)
 80018c0:	6013      	str	r3, [r2, #0]
    angular_position_deg1 = angular_position_rad1 * (180.0 / M_PI); // Convert to degrees
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <calculateVel1+0x500>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe3e 	bl	8000548 <__aeabi_f2d>
 80018cc:	a354      	add	r3, pc, #336	@ (adr r3, 8001a20 <calculateVel1+0x4e0>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fe91 	bl	80005f8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff f983 	bl	8000be8 <__aeabi_d2f>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <calculateVel1+0x504>)
 80018e6:	6013      	str	r3, [r2, #0]

    // Kalman filter update
    estimate1 = estimate1; // Predicted state (previous estimate)
 80018e8:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <calculateVel1+0x508>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a56      	ldr	r2, [pc, #344]	@ (8001a48 <calculateVel1+0x508>)
 80018ee:	6013      	str	r3, [r2, #0]
    error_covariance1 += process_noise1; // Update error covariance
 80018f0:	4b56      	ldr	r3, [pc, #344]	@ (8001a4c <calculateVel1+0x50c>)
 80018f2:	ed93 7a00 	vldr	s14, [r3]
 80018f6:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <calculateVel1+0x510>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001900:	4b52      	ldr	r3, [pc, #328]	@ (8001a4c <calculateVel1+0x50c>)
 8001902:	edc3 7a00 	vstr	s15, [r3]

    // Measurement update
    kalman_gain1 = error_covariance1 / (error_covariance1 + measurement_noise1); // Calculate Kalman gain
 8001906:	4b51      	ldr	r3, [pc, #324]	@ (8001a4c <calculateVel1+0x50c>)
 8001908:	edd3 6a00 	vldr	s13, [r3]
 800190c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a4c <calculateVel1+0x50c>)
 800190e:	ed93 7a00 	vldr	s14, [r3]
 8001912:	4b50      	ldr	r3, [pc, #320]	@ (8001a54 <calculateVel1+0x514>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800191c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001920:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <calculateVel1+0x518>)
 8001922:	edc3 7a00 	vstr	s15, [r3]
    estimate1 += kalman_gain1 * (vel1 - estimate1); // Update estimate with measurement
 8001926:	4b43      	ldr	r3, [pc, #268]	@ (8001a34 <calculateVel1+0x4f4>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4b46      	ldr	r3, [pc, #280]	@ (8001a48 <calculateVel1+0x508>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001936:	4b48      	ldr	r3, [pc, #288]	@ (8001a58 <calculateVel1+0x518>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001940:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <calculateVel1+0x508>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a48 <calculateVel1+0x508>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
    error_covariance1 = (1 - kalman_gain1) * error_covariance1; // Update error covariance
 8001950:	4b41      	ldr	r3, [pc, #260]	@ (8001a58 <calculateVel1+0x518>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800195a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <calculateVel1+0x50c>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <calculateVel1+0x50c>)
 800196a:	edc3 7a00 	vstr	s15, [r3]

    // Calculate control output using PID controller
    control_output1 = PID_Controller1(Kp1, Ki1, Kd1, &integral1_1, last_error1, velTag1, vel1);
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <calculateVel1+0x51c>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <calculateVel1+0x520>)
 8001976:	ed93 7a00 	vldr	s14, [r3]
 800197a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a64 <calculateVel1+0x524>)
 800197c:	edd3 6a00 	vldr	s13, [r3]
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <calculateVel1+0x528>)
 8001982:	ed93 6a00 	vldr	s12, [r3]
 8001986:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <calculateVel1+0x4f4>)
 8001988:	edd3 5a00 	vldr	s11, [r3]
 800198c:	eef0 2a65 	vmov.f32	s5, s11
 8001990:	ed97 2a01 	vldr	s4, [r7, #4]
 8001994:	eef0 1a46 	vmov.f32	s3, s12
 8001998:	4834      	ldr	r0, [pc, #208]	@ (8001a6c <calculateVel1+0x52c>)
 800199a:	eeb0 1a66 	vmov.f32	s2, s13
 800199e:	eef0 0a47 	vmov.f32	s1, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff fd59 	bl	800145c <PID_Controller1>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
 80019ae:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <calculateVel1+0x530>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]

    // Implement ramping to control output
    if (fabs(control_output1 - last_control_output1) > RAMP_RATE) {
 80019b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <calculateVel1+0x530>)
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <calculateVel1+0x534>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c4:	eef0 7ae7 	vabs.f32	s15, s15
 80019c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	dd60      	ble.n	8001a98 <calculateVel1+0x558>
        control_output1 = last_control_output1 + (control_output1 > last_control_output1 ? RAMP_RATE : -RAMP_RATE);
 80019d6:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <calculateVel1+0x534>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdb4 	bl	8000548 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4922      	ldr	r1, [pc, #136]	@ (8001a70 <calculateVel1+0x530>)
 80019e6:	ed91 7a00 	vldr	s14, [r1]
 80019ea:	4922      	ldr	r1, [pc, #136]	@ (8001a74 <calculateVel1+0x534>)
 80019ec:	edd1 7a00 	vldr	s15, [r1]
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	dd40      	ble.n	8001a7c <calculateVel1+0x53c>
 80019fa:	f04f 0000 	mov.w	r0, #0
 80019fe:	491e      	ldr	r1, [pc, #120]	@ (8001a78 <calculateVel1+0x538>)
 8001a00:	e03f      	b.n	8001a82 <calculateVel1+0x542>
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	54442d18 	.word	0x54442d18
 8001a0c:	400921fb 	.word	0x400921fb
 8001a10:	00000000 	.word	0x00000000
 8001a14:	3ff00000 	.word	0x3ff00000
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	bff00000 	.word	0xbff00000
 8001a20:	1a63c1f8 	.word	0x1a63c1f8
 8001a24:	404ca5dc 	.word	0x404ca5dc
 8001a28:	200002c0 	.word	0x200002c0
 8001a2c:	404e0000 	.word	0x404e0000
 8001a30:	20000000 	.word	0x20000000
 8001a34:	200002c8 	.word	0x200002c8
 8001a38:	200003c0 	.word	0x200003c0
 8001a3c:	408f4000 	.word	0x408f4000
 8001a40:	200002e8 	.word	0x200002e8
 8001a44:	200002ec 	.word	0x200002ec
 8001a48:	200002e0 	.word	0x200002e0
 8001a4c:	20000014 	.word	0x20000014
 8001a50:	20000018 	.word	0x20000018
 8001a54:	2000001c 	.word	0x2000001c
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	20000008 	.word	0x20000008
 8001a64:	2000000c 	.word	0x2000000c
 8001a68:	200002d4 	.word	0x200002d4
 8001a6c:	200002d0 	.word	0x200002d0
 8001a70:	200002cc 	.word	0x200002cc
 8001a74:	200002d8 	.word	0x200002d8
 8001a78:	40140000 	.word	0x40140000
 8001a7c:	f04f 0000 	mov.w	r0, #0
 8001a80:	4965      	ldr	r1, [pc, #404]	@ (8001c18 <calculateVel1+0x6d8>)
 8001a82:	f7fe fc03 	bl	800028c <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8ab 	bl	8000be8 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a61      	ldr	r2, [pc, #388]	@ (8001c1c <calculateVel1+0x6dc>)
 8001a96:	6013      	str	r3, [r2, #0]
    }

    // Implement hysteresis to prevent rapid switching
    if ((last_control_output1 > 0 && control_output1 < -HYSTERESIS) || (last_control_output1 < 0 && control_output1 > HYSTERESIS)) {
 8001a98:	4b61      	ldr	r3, [pc, #388]	@ (8001c20 <calculateVel1+0x6e0>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	dd0c      	ble.n	8001ac2 <calculateVel1+0x582>
 8001aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c1c <calculateVel1+0x6dc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd4b 	bl	8000548 <__aeabi_f2d>
 8001ab2:	a351      	add	r3, pc, #324	@ (adr r3, 8001bf8 <calculateVel1+0x6b8>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7ff f810 	bl	8000adc <__aeabi_dcmplt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d114      	bne.n	8001aec <calculateVel1+0x5ac>
 8001ac2:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <calculateVel1+0x6e0>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad0:	d510      	bpl.n	8001af4 <calculateVel1+0x5b4>
 8001ad2:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <calculateVel1+0x6dc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd36 	bl	8000548 <__aeabi_f2d>
 8001adc:	a348      	add	r3, pc, #288	@ (adr r3, 8001c00 <calculateVel1+0x6c0>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7ff f819 	bl	8000b18 <__aeabi_dcmpgt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <calculateVel1+0x5b4>
        control_output1 = last_control_output1; // Maintain last control output if within hysteresis
 8001aec:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <calculateVel1+0x6e0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a4a      	ldr	r2, [pc, #296]	@ (8001c1c <calculateVel1+0x6dc>)
 8001af2:	6013      	str	r3, [r2, #0]
    }

    realVel1 = vel1 / 2.0; // Scale factor
 8001af4:	4b4b      	ldr	r3, [pc, #300]	@ (8001c24 <calculateVel1+0x6e4>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b02:	4b49      	ldr	r3, [pc, #292]	@ (8001c28 <calculateVel1+0x6e8>)
 8001b04:	edc3 7a00 	vstr	s15, [r3]
    realRPM1 = rpm1 / 2.0;
 8001b08:	4b48      	ldr	r3, [pc, #288]	@ (8001c2c <calculateVel1+0x6ec>)
 8001b0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f861 	bl	8000be8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a41      	ldr	r2, [pc, #260]	@ (8001c30 <calculateVel1+0x6f0>)
 8001b2a:	6013      	str	r3, [r2, #0]
    // Limit control_output4 to the range [-0.27, 0.27]
       control_output1 = fmax(-0.27, fmin(0.27, control_output1));
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <calculateVel1+0x6dc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8001c08 <calculateVel1+0x6c8>
 8001b3e:	ec43 2b10 	vmov	d0, r2, r3
 8001b42:	f009 ff75 	bl	800ba30 <fmin>
 8001b46:	eeb0 7a40 	vmov.f32	s14, s0
 8001b4a:	eef0 7a60 	vmov.f32	s15, s1
 8001b4e:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8001c10 <calculateVel1+0x6d0>
 8001b52:	eeb0 0a47 	vmov.f32	s0, s14
 8001b56:	eef0 0a67 	vmov.f32	s1, s15
 8001b5a:	f009 ff3f 	bl	800b9dc <fmax>
 8001b5e:	ec53 2b10 	vmov	r2, r3, d0
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff f83f 	bl	8000be8 <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c1c <calculateVel1+0x6dc>)
 8001b6e:	6013      	str	r3, [r2, #0]
    // Set the PWM duty cycle based on the sign of desired_velocity
    if (velTag1 >  0) {
 8001b70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	dd14      	ble.n	8001ba8 <calculateVel1+0x668>
        // Positive velocity
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <calculateVel1+0x6f4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, calculate_pwm1(control_output1));
 8001b86:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <calculateVel1+0x6dc>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b90:	f7ff fc2a 	bl	80013e8 <calculate_pwm1>
 8001b94:	eef0 7a40 	vmov.f32	s15, s0
 8001b98:	4b26      	ldr	r3, [pc, #152]	@ (8001c34 <calculateVel1+0x6f4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba0:	ee17 2a90 	vmov	r2, s15
 8001ba4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ba6:	e01a      	b.n	8001bde <calculateVel1+0x69e>
    } else if (velTag1 < 0) {
 8001ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d513      	bpl.n	8001bde <calculateVel1+0x69e>
        // Negative velocity
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, calculate_pwm1(control_output1));
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <calculateVel1+0x6dc>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc0:	f7ff fc12 	bl	80013e8 <calculate_pwm1>
 8001bc4:	eef0 7a40 	vmov.f32	s15, s0
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <calculateVel1+0x6f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd0:	ee17 2a90 	vmov	r2, s15
 8001bd4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <calculateVel1+0x6f4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Update last time and last control output
    last_time1 = current_time1;
 8001bde:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <calculateVel1+0x6f8>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6013      	str	r3, [r2, #0]
    last_control_output1 = control_output1;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <calculateVel1+0x6dc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <calculateVel1+0x6e0>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	9999999a 	.word	0x9999999a
 8001bfc:	bfa99999 	.word	0xbfa99999
 8001c00:	9999999a 	.word	0x9999999a
 8001c04:	3fa99999 	.word	0x3fa99999
 8001c08:	147ae148 	.word	0x147ae148
 8001c0c:	3fd147ae 	.word	0x3fd147ae
 8001c10:	147ae148 	.word	0x147ae148
 8001c14:	bfd147ae 	.word	0xbfd147ae
 8001c18:	c0140000 	.word	0xc0140000
 8001c1c:	200002cc 	.word	0x200002cc
 8001c20:	200002d8 	.word	0x200002d8
 8001c24:	200002c8 	.word	0x200002c8
 8001c28:	200002f0 	.word	0x200002f0
 8001c2c:	200002c0 	.word	0x200002c0
 8001c30:	200002f4 	.word	0x200002f4
 8001c34:	200005d4 	.word	0x200005d4
 8001c38:	200002e4 	.word	0x200002e4
 8001c3c:	00000000 	.word	0x00000000

08001c40 <moving_average_filter2>:
float angular_position_deg2 = 0.0; // Angular position in degrees
float realVel2;
float realRPM2;

// Function to calculate exponential moving average
float moving_average_filter2(float new_velocity) {
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	ed87 0a01 	vstr	s0, [r7, #4]
    static float ema2 = 0.0; // Initialize EMA variable
    ema2 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema2);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	a318      	add	r3, pc, #96	@ (adr r3, 8001cb4 <moving_average_filter2+0x74>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <moving_average_filter2+0x70>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ca8 <moving_average_filter2+0x68>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	f7fe fb05 	bl	800028c <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffad 	bl	8000be8 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <moving_average_filter2+0x70>)
 8001c92:	6013      	str	r3, [r2, #0]
    return ema2;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <moving_average_filter2+0x70>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
}
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	9999999a 	.word	0x9999999a
 8001cac:	3fe99999 	.word	0x3fe99999
 8001cb0:	200003c4 	.word	0x200003c4
 8001cb4:	9999999a 	.word	0x9999999a
 8001cb8:	3fc99999 	.word	0x3fc99999
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <calculate_pwm2>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm2(float desired_velocity) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (desired_velocity < 0) {
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d505      	bpl.n	8001ce4 <calculate_pwm2+0x24>
        desired_velocity = -desired_velocity;
 8001cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cdc:	eef1 7a67 	vneg.f32	s15, s15
 8001ce0:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7fe fc2f 	bl	8000548 <__aeabi_f2d>
 8001cea:	a310      	add	r3, pc, #64	@ (adr r3, 8001d2c <calculate_pwm2+0x6c>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fdac 	bl	800084c <__aeabi_ddiv>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <calculate_pwm2+0x68>)
 8001d02:	f7fe fc79 	bl	80005f8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff6b 	bl	8000be8 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	ee07 3a90 	vmov	s15, r3
}
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	408f4000 	.word	0x408f4000
 8001d2c:	147ae148 	.word	0x147ae148
 8001d30:	3fd147ae 	.word	0x3fd147ae

08001d34 <PID_Controller2>:

// PID Controller Function with Anti-Windup
float PID_Controller2(float Kp, float Ki, float Kd, float *integral, float last_error, float setpoint, float measured_value) {
 8001d34:	b480      	push	{r7}
 8001d36:	b08d      	sub	sp, #52	@ 0x34
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d3e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d42:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d46:	6138      	str	r0, [r7, #16]
 8001d48:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d4c:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d50:	edc7 2a01 	vstr	s5, [r7, #4]
    // Calculate the error
    float error2 = setpoint - measured_value;
 8001d54:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Update the integral term with clamping to prevent windup
    *integral += error2;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	edc3 7a00 	vstr	s15, [r3]
    if (*integral > MAX_INTEGRAL) {
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e08 <PID_Controller2+0xd4>
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd03      	ble.n	8001d94 <PID_Controller2+0x60>
        *integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e0c <PID_Controller2+0xd8>)
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00c      	b.n	8001dae <PID_Controller2+0x7a>
    } else if (*integral < -MAX_INTEGRAL) {
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e10 <PID_Controller2+0xdc>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d502      	bpl.n	8001dae <PID_Controller2+0x7a>
        *integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e14 <PID_Controller2+0xe0>)
 8001dac:	601a      	str	r2, [r3, #0]
    }

    // Calculate the derivative term
    float derivative2 = error2 - last_error;
 8001dae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Calculate the output
    float output2 = (Kp * error2) + (Ki * (*integral)) + (Kd * derivative2);
 8001dbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	edd3 6a00 	vldr	s13, [r3]
 8001dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ddc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001de0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Save the last error for next iteration
    last_error = error2;
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df2:	60fb      	str	r3, [r7, #12]

    return output2; // Return the control output
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	ee07 3a90 	vmov	s15, r3
}
 8001dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfe:	3734      	adds	r7, #52	@ 0x34
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	42c80000 	.word	0x42c80000
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	c2c80000 	.word	0xc2c80000
 8001e14:	c2c80000 	.word	0xc2c80000

08001e18 <calculateVel2>:

int32_t current_pulse_count2 = 0;

// Function to calculate RPM and control the motor
void calculateVel2(float velTag2, float current_time2) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e24:	edc7 0a00 	vstr	s1, [r7]
    static float distance_traveled2 = 0.0;

    // Check if velTag2 is within the deadband
    if (fabs(velTag2) < DEAD_BAND) {
 8001e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e30:	ee17 0a90 	vmov	r0, s15
 8001e34:	f7fe fb88 	bl	8000548 <__aeabi_f2d>
 8001e38:	a382      	add	r3, pc, #520	@ (adr r3, 8002044 <calculateVel2+0x22c>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fe4d 	bl	8000adc <__aeabi_dcmplt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <calculateVel2+0x36>
        velTag2 = 0; // Set velTag2 to zero if within deadband
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
    }

    // Immediate stop if velTag2 is 0
    if (velTag2 == 0) {
 8001e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	d13c      	bne.n	8001ed6 <calculateVel2+0xbe>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001e5c:	4b68      	ldr	r3, [pc, #416]	@ (8002000 <calculateVel2+0x1e8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <calculateVel2+0x1e8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40
        vel2 = 0.0;
 8001e6c:	4b65      	ldr	r3, [pc, #404]	@ (8002004 <calculateVel2+0x1ec>)
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e74:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <calculateVel2+0x1f0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        rpm2 = 0.0;
 8001e7c:	4963      	ldr	r1, [pc, #396]	@ (800200c <calculateVel2+0x1f4>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
        control_output2 = 0.0;
 8001e8a:	4b61      	ldr	r3, [pc, #388]	@ (8002010 <calculateVel2+0x1f8>)
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
        // Reset variables except angular_position_rad2
        realVel2 = 0.0;
 8001e92:	4b60      	ldr	r3, [pc, #384]	@ (8002014 <calculateVel2+0x1fc>)
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
        realRPM2 = 0.0;
 8001e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002018 <calculateVel2+0x200>)
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
        integral1_2 = 0.0;
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800201c <calculateVel2+0x204>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
        last_error2 = 0.0;
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8002020 <calculateVel2+0x208>)
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
        last_control_output2 = 0.0;
 8001eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8002024 <calculateVel2+0x20c>)
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
        distance_traveled2 = 0.0;
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <calculateVel2+0x210>)
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
        pulse_count2 = 0; // Reset pulse count
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800202c <calculateVel2+0x214>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
        last_velTag2 = velTag2; // Update last velTag2
 8001ec8:	4a59      	ldr	r2, [pc, #356]	@ (8002030 <calculateVel2+0x218>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
        HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8001ece:	2064      	movs	r0, #100	@ 0x64
 8001ed0:	f002 fd8c 	bl	80049ec <HAL_Delay>
        return; // Exit the function
 8001ed4:	e2f6      	b.n	80024c4 <calculateVel2+0x6ac>
    }

    // Calculate the time elapsed since the last update
    float delta_time2 = current_time2 - last_time2;
 8001ed6:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <calculateVel2+0x21c>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ed97 7a00 	vldr	s14, [r7]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	edc7 7a04 	vstr	s15, [r7, #16]

    // Read the current pulse count
    current_pulse_count2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001ee8:	4b47      	ldr	r3, [pc, #284]	@ (8002008 <calculateVel2+0x1f0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b51      	ldr	r3, [pc, #324]	@ (8002038 <calculateVel2+0x220>)
 8001ef2:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 8001ef4:	200a      	movs	r0, #10
 8001ef6:	f002 fd79 	bl	80049ec <HAL_Delay>

    // Calculate the difference in pulse count
    int32_t pulse_difference2 = current_pulse_count2 - pulse_count2;
 8001efa:	4b4f      	ldr	r3, [pc, #316]	@ (8002038 <calculateVel2+0x220>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b4a      	ldr	r3, [pc, #296]	@ (800202c <calculateVel2+0x214>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	60fb      	str	r3, [r7, #12]

    // Calculate RPM as a positive value
    rpm2 = fabs((float)pulse_difference2 / (float)PPR) * 60.0; // Always positive
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f12:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f1e:	ee17 0a90 	vmov	r0, s15
 8001f22:	f7fe fb11 	bl	8000548 <__aeabi_f2d>
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <calculateVel2+0x224>)
 8001f2c:	f7fe fb64 	bl	80005f8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4935      	ldr	r1, [pc, #212]	@ (800200c <calculateVel2+0x1f4>)
 8001f36:	e9c1 2300 	strd	r2, r3, [r1]
    pulse_count2 = current_pulse_count2;
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <calculateVel2+0x220>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b3a      	ldr	r3, [pc, #232]	@ (800202c <calculateVel2+0x214>)
 8001f42:	601a      	str	r2, [r3, #0]
    // Limit RPM to the range [0, 250]
          rpm2 = fmax(0.0, fmin(250.0, rpm2));
 8001f44:	4b31      	ldr	r3, [pc, #196]	@ (800200c <calculateVel2+0x1f4>)
 8001f46:	ed93 7b00 	vldr	d7, [r3]
 8001f4a:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001fe8 <calculateVel2+0x1d0>
 8001f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f52:	eef0 0a67 	vmov.f32	s1, s15
 8001f56:	f009 fd6b 	bl	800ba30 <fmin>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	eef0 7a60 	vmov.f32	s15, s1
 8001f62:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001ff0 <calculateVel2+0x1d8>
 8001f66:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6a:	eef0 0a67 	vmov.f32	s1, s15
 8001f6e:	f009 fd35 	bl	800b9dc <fmax>
 8001f72:	eeb0 7a40 	vmov.f32	s14, s0
 8001f76:	eef0 7a60 	vmov.f32	s15, s1
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <calculateVel2+0x1f4>)
 8001f7c:	ed83 7b00 	vstr	d7, [r3]
    // Calculate linear velocity (m/s)
    float new_vel2;
    if (pulse_difference2 < 0) {
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da62      	bge.n	800204c <calculateVel2+0x234>
        new_vel2 = -((rpm2 / 60.0) * dia2 * M_PI); // Negative velocity for reverse direction
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <calculateVel2+0x1f4>)
 8001f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <calculateVel2+0x224>)
 8001f92:	f7fe fc5b 	bl	800084c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <calculateVel2+0x228>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_f2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe fb22 	bl	80005f8 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ff8 <calculateVel2+0x1e0>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fb19 	bl	80005f8 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fe0b 	bl	8000be8 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef1 7a67 	vneg.f32	s15, s15
 8001fdc:	edc7 7a05 	vstr	s15, [r7, #20]
 8001fe0:	e05c      	b.n	800209c <calculateVel2+0x284>
 8001fe2:	bf00      	nop
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	406f4000 	.word	0x406f4000
	...
 8001ff8:	54442d18 	.word	0x54442d18
 8001ffc:	400921fb 	.word	0x400921fb
 8002000:	200004b4 	.word	0x200004b4
 8002004:	20000308 	.word	0x20000308
 8002008:	2000046c 	.word	0x2000046c
 800200c:	20000300 	.word	0x20000300
 8002010:	2000030c 	.word	0x2000030c
 8002014:	20000330 	.word	0x20000330
 8002018:	20000334 	.word	0x20000334
 800201c:	20000310 	.word	0x20000310
 8002020:	20000314 	.word	0x20000314
 8002024:	20000318 	.word	0x20000318
 8002028:	200003c8 	.word	0x200003c8
 800202c:	200002fc 	.word	0x200002fc
 8002030:	2000031c 	.word	0x2000031c
 8002034:	20000324 	.word	0x20000324
 8002038:	20000338 	.word	0x20000338
 800203c:	404e0000 	.word	0x404e0000
 8002040:	20000020 	.word	0x20000020
 8002044:	47ae147b 	.word	0x47ae147b
 8002048:	3f847ae1 	.word	0x3f847ae1
    } else {
        new_vel2 = (rpm2 / 60.0) * dia2 * M_PI; // Positive velocity for forward direction
 800204c:	4bac      	ldr	r3, [pc, #688]	@ (8002300 <calculateVel2+0x4e8>)
 800204e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4bab      	ldr	r3, [pc, #684]	@ (8002304 <calculateVel2+0x4ec>)
 8002058:	f7fe fbf8 	bl	800084c <__aeabi_ddiv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	461d      	mov	r5, r3
 8002064:	4ba8      	ldr	r3, [pc, #672]	@ (8002308 <calculateVel2+0x4f0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa6d 	bl	8000548 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe fabf 	bl	80005f8 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	a397      	add	r3, pc, #604	@ (adr r3, 80022e0 <calculateVel2+0x4c8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fab6 	bl	80005f8 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fda8 	bl	8000be8 <__aeabi_d2f>
 8002098:	4603      	mov	r3, r0
 800209a:	617b      	str	r3, [r7, #20]
    }

    // Apply moving average filter for velocity
    //vel2 = moving_average_filter2(new_vel2);
    // Constrain the velocity to the range [-1, 1]
       vel2 = fmax(-1.0, fmin(1.0, moving_average_filter2(new_vel2)));
 800209c:	ed97 0a05 	vldr	s0, [r7, #20]
 80020a0:	f7ff fdce 	bl	8001c40 <moving_average_filter2>
 80020a4:	ee10 3a10 	vmov	r3, s0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa4d 	bl	8000548 <__aeabi_f2d>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 80022e8 <calculateVel2+0x4d0>
 80020b6:	ec43 2b10 	vmov	d0, r2, r3
 80020ba:	f009 fcb9 	bl	800ba30 <fmin>
 80020be:	eeb0 7a40 	vmov.f32	s14, s0
 80020c2:	eef0 7a60 	vmov.f32	s15, s1
 80020c6:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 80022f0 <calculateVel2+0x4d8>
 80020ca:	eeb0 0a47 	vmov.f32	s0, s14
 80020ce:	eef0 0a67 	vmov.f32	s1, s15
 80020d2:	f009 fc83 	bl	800b9dc <fmax>
 80020d6:	ec53 2b10 	vmov	r2, r3, d0
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd83 	bl	8000be8 <__aeabi_d2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a89      	ldr	r2, [pc, #548]	@ (800230c <calculateVel2+0x4f4>)
 80020e6:	6013      	str	r3, [r2, #0]
    // Update position based on velocity and elapsed time
    distance_traveled2 += vel2 * (delta_time2 / 1000.0); // Linear distance traveled in meters
 80020e8:	4b89      	ldr	r3, [pc, #548]	@ (8002310 <calculateVel2+0x4f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa2b 	bl	8000548 <__aeabi_f2d>
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
 80020f6:	4b85      	ldr	r3, [pc, #532]	@ (800230c <calculateVel2+0x4f4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4680      	mov	r8, r0
 8002102:	4689      	mov	r9, r1
 8002104:	6938      	ldr	r0, [r7, #16]
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b81      	ldr	r3, [pc, #516]	@ (8002314 <calculateVel2+0x4fc>)
 8002110:	f7fe fb9c 	bl	800084c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4640      	mov	r0, r8
 800211a:	4649      	mov	r1, r9
 800211c:	f7fe fa6c 	bl	80005f8 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4620      	mov	r0, r4
 8002126:	4629      	mov	r1, r5
 8002128:	f7fe f8b0 	bl	800028c <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fd58 	bl	8000be8 <__aeabi_d2f>
 8002138:	4603      	mov	r3, r0
 800213a:	4a75      	ldr	r2, [pc, #468]	@ (8002310 <calculateVel2+0x4f8>)
 800213c:	6013      	str	r3, [r2, #0]
    angular_position_rad2 += distance_traveled2 / (dia2 / 2.0); // Update angular position in radians
 800213e:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <calculateVel2+0x500>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4604      	mov	r4, r0
 800214a:	460d      	mov	r5, r1
 800214c:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <calculateVel2+0x4f8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9f9 	bl	8000548 <__aeabi_f2d>
 8002156:	4680      	mov	r8, r0
 8002158:	4689      	mov	r9, r1
 800215a:	4b6b      	ldr	r3, [pc, #428]	@ (8002308 <calculateVel2+0x4f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9f2 	bl	8000548 <__aeabi_f2d>
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800216c:	f7fe fb6e 	bl	800084c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4640      	mov	r0, r8
 8002176:	4649      	mov	r1, r9
 8002178:	f7fe fb68 	bl	800084c <__aeabi_ddiv>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe f882 	bl	800028c <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd2a 	bl	8000be8 <__aeabi_d2f>
 8002194:	4603      	mov	r3, r0
 8002196:	4a60      	ldr	r2, [pc, #384]	@ (8002318 <calculateVel2+0x500>)
 8002198:	6013      	str	r3, [r2, #0]
    angular_position_deg2 = angular_position_rad2 * (180.0 / M_PI); // Convert to degrees
 800219a:	4b5f      	ldr	r3, [pc, #380]	@ (8002318 <calculateVel2+0x500>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9d2 	bl	8000548 <__aeabi_f2d>
 80021a4:	a354      	add	r3, pc, #336	@ (adr r3, 80022f8 <calculateVel2+0x4e0>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa25 	bl	80005f8 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fd17 	bl	8000be8 <__aeabi_d2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a57      	ldr	r2, [pc, #348]	@ (800231c <calculateVel2+0x504>)
 80021be:	6013      	str	r3, [r2, #0]

    // Kalman filter update
    estimate2 = estimate2; // Predicted state (previous estimate)
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <calculateVel2+0x508>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a56      	ldr	r2, [pc, #344]	@ (8002320 <calculateVel2+0x508>)
 80021c6:	6013      	str	r3, [r2, #0]
    error_covariance2 += process_noise2; // Update error covariance
 80021c8:	4b56      	ldr	r3, [pc, #344]	@ (8002324 <calculateVel2+0x50c>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	4b56      	ldr	r3, [pc, #344]	@ (8002328 <calculateVel2+0x510>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d8:	4b52      	ldr	r3, [pc, #328]	@ (8002324 <calculateVel2+0x50c>)
 80021da:	edc3 7a00 	vstr	s15, [r3]

    // Measurement update
    kalman_gain2 = error_covariance2 / (error_covariance2 + measurement_noise2); // Calculate Kalman gain
 80021de:	4b51      	ldr	r3, [pc, #324]	@ (8002324 <calculateVel2+0x50c>)
 80021e0:	edd3 6a00 	vldr	s13, [r3]
 80021e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002324 <calculateVel2+0x50c>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	4b50      	ldr	r3, [pc, #320]	@ (800232c <calculateVel2+0x514>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002330 <calculateVel2+0x518>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]
    estimate2 += kalman_gain2 * (vel2 - estimate2); // Update estimate with measurement
 80021fe:	4b43      	ldr	r3, [pc, #268]	@ (800230c <calculateVel2+0x4f4>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b46      	ldr	r3, [pc, #280]	@ (8002320 <calculateVel2+0x508>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220e:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <calculateVel2+0x518>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002218:	4b41      	ldr	r3, [pc, #260]	@ (8002320 <calculateVel2+0x508>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	4b3f      	ldr	r3, [pc, #252]	@ (8002320 <calculateVel2+0x508>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
    error_covariance2 = (1 - kalman_gain2) * error_covariance2; // Update error covariance
 8002228:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <calculateVel2+0x518>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002236:	4b3b      	ldr	r3, [pc, #236]	@ (8002324 <calculateVel2+0x50c>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <calculateVel2+0x50c>)
 8002242:	edc3 7a00 	vstr	s15, [r3]

    // Calculate control output using PID controller
    control_output2 = PID_Controller2(Kp2, Ki2, Kd2, &integral1_2, last_error2, velTag2, vel2);
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <calculateVel2+0x51c>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <calculateVel2+0x520>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b3a      	ldr	r3, [pc, #232]	@ (800233c <calculateVel2+0x524>)
 8002254:	edd3 6a00 	vldr	s13, [r3]
 8002258:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <calculateVel2+0x528>)
 800225a:	ed93 6a00 	vldr	s12, [r3]
 800225e:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <calculateVel2+0x4f4>)
 8002260:	edd3 5a00 	vldr	s11, [r3]
 8002264:	eef0 2a65 	vmov.f32	s5, s11
 8002268:	ed97 2a01 	vldr	s4, [r7, #4]
 800226c:	eef0 1a46 	vmov.f32	s3, s12
 8002270:	4834      	ldr	r0, [pc, #208]	@ (8002344 <calculateVel2+0x52c>)
 8002272:	eeb0 1a66 	vmov.f32	s2, s13
 8002276:	eef0 0a47 	vmov.f32	s1, s14
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	f7ff fd59 	bl	8001d34 <PID_Controller2>
 8002282:	eef0 7a40 	vmov.f32	s15, s0
 8002286:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <calculateVel2+0x530>)
 8002288:	edc3 7a00 	vstr	s15, [r3]

    // Implement ramping to control output
    if (fabs(control_output2 - last_control_output2) > RAMP_RATE) {
 800228c:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <calculateVel2+0x530>)
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <calculateVel2+0x534>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229c:	eef0 7ae7 	vabs.f32	s15, s15
 80022a0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80022a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd60      	ble.n	8002370 <calculateVel2+0x558>
        control_output2 = last_control_output2 + (control_output2 > last_control_output2 ? RAMP_RATE : -RAMP_RATE);
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <calculateVel2+0x534>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f948 	bl	8000548 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4922      	ldr	r1, [pc, #136]	@ (8002348 <calculateVel2+0x530>)
 80022be:	ed91 7a00 	vldr	s14, [r1]
 80022c2:	4922      	ldr	r1, [pc, #136]	@ (800234c <calculateVel2+0x534>)
 80022c4:	edd1 7a00 	vldr	s15, [r1]
 80022c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	dd40      	ble.n	8002354 <calculateVel2+0x53c>
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	491e      	ldr	r1, [pc, #120]	@ (8002350 <calculateVel2+0x538>)
 80022d8:	e03f      	b.n	800235a <calculateVel2+0x542>
 80022da:	bf00      	nop
 80022dc:	f3af 8000 	nop.w
 80022e0:	54442d18 	.word	0x54442d18
 80022e4:	400921fb 	.word	0x400921fb
 80022e8:	00000000 	.word	0x00000000
 80022ec:	3ff00000 	.word	0x3ff00000
 80022f0:	00000000 	.word	0x00000000
 80022f4:	bff00000 	.word	0xbff00000
 80022f8:	1a63c1f8 	.word	0x1a63c1f8
 80022fc:	404ca5dc 	.word	0x404ca5dc
 8002300:	20000300 	.word	0x20000300
 8002304:	404e0000 	.word	0x404e0000
 8002308:	20000020 	.word	0x20000020
 800230c:	20000308 	.word	0x20000308
 8002310:	200003c8 	.word	0x200003c8
 8002314:	408f4000 	.word	0x408f4000
 8002318:	20000328 	.word	0x20000328
 800231c:	2000032c 	.word	0x2000032c
 8002320:	20000320 	.word	0x20000320
 8002324:	20000034 	.word	0x20000034
 8002328:	20000038 	.word	0x20000038
 800232c:	2000003c 	.word	0x2000003c
 8002330:	20000030 	.word	0x20000030
 8002334:	20000024 	.word	0x20000024
 8002338:	20000028 	.word	0x20000028
 800233c:	2000002c 	.word	0x2000002c
 8002340:	20000314 	.word	0x20000314
 8002344:	20000310 	.word	0x20000310
 8002348:	2000030c 	.word	0x2000030c
 800234c:	20000318 	.word	0x20000318
 8002350:	40140000 	.word	0x40140000
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	4965      	ldr	r1, [pc, #404]	@ (80024f0 <calculateVel2+0x6d8>)
 800235a:	f7fd ff97 	bl	800028c <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fc3f 	bl	8000be8 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
 800236c:	4a61      	ldr	r2, [pc, #388]	@ (80024f4 <calculateVel2+0x6dc>)
 800236e:	6013      	str	r3, [r2, #0]
    }

    // Implement hysteresis to prevent rapid switching
    if ((last_control_output2 > 0 && control_output2 < -HYSTERESIS) || (last_control_output2 < 0 && control_output2 > HYSTERESIS)) {
 8002370:	4b61      	ldr	r3, [pc, #388]	@ (80024f8 <calculateVel2+0x6e0>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	dd0c      	ble.n	800239a <calculateVel2+0x582>
 8002380:	4b5c      	ldr	r3, [pc, #368]	@ (80024f4 <calculateVel2+0x6dc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8df 	bl	8000548 <__aeabi_f2d>
 800238a:	a351      	add	r3, pc, #324	@ (adr r3, 80024d0 <calculateVel2+0x6b8>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fba4 	bl	8000adc <__aeabi_dcmplt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d114      	bne.n	80023c4 <calculateVel2+0x5ac>
 800239a:	4b57      	ldr	r3, [pc, #348]	@ (80024f8 <calculateVel2+0x6e0>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d510      	bpl.n	80023cc <calculateVel2+0x5b4>
 80023aa:	4b52      	ldr	r3, [pc, #328]	@ (80024f4 <calculateVel2+0x6dc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8ca 	bl	8000548 <__aeabi_f2d>
 80023b4:	a348      	add	r3, pc, #288	@ (adr r3, 80024d8 <calculateVel2+0x6c0>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fe fbad 	bl	8000b18 <__aeabi_dcmpgt>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <calculateVel2+0x5b4>
        control_output2 = last_control_output2; // Maintain last control output if within hysteresis
 80023c4:	4b4c      	ldr	r3, [pc, #304]	@ (80024f8 <calculateVel2+0x6e0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <calculateVel2+0x6dc>)
 80023ca:	6013      	str	r3, [r2, #0]
    }

    realVel2 = vel2 / 2.0; // Scale factor
 80023cc:	4b4b      	ldr	r3, [pc, #300]	@ (80024fc <calculateVel2+0x6e4>)
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023da:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <calculateVel2+0x6e8>)
 80023dc:	edc3 7a00 	vstr	s15, [r3]
    realRPM2 = rpm2 / 2.0;
 80023e0:	4b48      	ldr	r3, [pc, #288]	@ (8002504 <calculateVel2+0x6ec>)
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023ee:	f7fe fa2d 	bl	800084c <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fbf5 	bl	8000be8 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a41      	ldr	r2, [pc, #260]	@ (8002508 <calculateVel2+0x6f0>)
 8002402:	6013      	str	r3, [r2, #0]
    // Limit control_output4 to the range [-0.27, 0.27]
       control_output2 = fmax(-0.27, fmin(0.27, control_output2));
 8002404:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <calculateVel2+0x6dc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f89d 	bl	8000548 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80024e0 <calculateVel2+0x6c8>
 8002416:	ec43 2b10 	vmov	d0, r2, r3
 800241a:	f009 fb09 	bl	800ba30 <fmin>
 800241e:	eeb0 7a40 	vmov.f32	s14, s0
 8002422:	eef0 7a60 	vmov.f32	s15, s1
 8002426:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 80024e8 <calculateVel2+0x6d0>
 800242a:	eeb0 0a47 	vmov.f32	s0, s14
 800242e:	eef0 0a67 	vmov.f32	s1, s15
 8002432:	f009 fad3 	bl	800b9dc <fmax>
 8002436:	ec53 2b10 	vmov	r2, r3, d0
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fbd3 	bl	8000be8 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	4a2b      	ldr	r2, [pc, #172]	@ (80024f4 <calculateVel2+0x6dc>)
 8002446:	6013      	str	r3, [r2, #0]
    // Set the PWM duty cycle based on the sign of desired_velocity
    if (velTag2 > 0) {
 8002448:	edd7 7a01 	vldr	s15, [r7, #4]
 800244c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dd14      	ble.n	8002480 <calculateVel2+0x668>
        // Positive velocity
    	   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, calculate_pwm2(control_output2));
 8002456:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <calculateVel2+0x6dc>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	f7ff fc2e 	bl	8001cc0 <calculate_pwm2>
 8002464:	eef0 7a40 	vmov.f32	s15, s0
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <calculateVel2+0x6f4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002470:	ee17 2a90 	vmov	r2, s15
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c
    	        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8002476:	4b25      	ldr	r3, [pc, #148]	@ (800250c <calculateVel2+0x6f4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40
 800247e:	e01a      	b.n	80024b6 <calculateVel2+0x69e>
    } else if (velTag2 < 0) {
 8002480:	edd7 7a01 	vldr	s15, [r7, #4]
 8002484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	d513      	bpl.n	80024b6 <calculateVel2+0x69e>
        // Negative velocity
    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800248e:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <calculateVel2+0x6f4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	63da      	str	r2, [r3, #60]	@ 0x3c
    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, calculate_pwm2(control_output2));
 8002496:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <calculateVel2+0x6dc>)
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eeb0 0a67 	vmov.f32	s0, s15
 80024a0:	f7ff fc0e 	bl	8001cc0 <calculate_pwm2>
 80024a4:	eef0 7a40 	vmov.f32	s15, s0
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <calculateVel2+0x6f4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	ee17 2a90 	vmov	r2, s15
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40

    }

    // Update last time and last control output
    last_time2 = current_time2;
 80024b6:	4a16      	ldr	r2, [pc, #88]	@ (8002510 <calculateVel2+0x6f8>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6013      	str	r3, [r2, #0]
    last_control_output2 = control_output2;
 80024bc:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <calculateVel2+0x6dc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <calculateVel2+0x6e0>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024cc:	f3af 8000 	nop.w
 80024d0:	9999999a 	.word	0x9999999a
 80024d4:	bfa99999 	.word	0xbfa99999
 80024d8:	9999999a 	.word	0x9999999a
 80024dc:	3fa99999 	.word	0x3fa99999
 80024e0:	147ae148 	.word	0x147ae148
 80024e4:	3fd147ae 	.word	0x3fd147ae
 80024e8:	147ae148 	.word	0x147ae148
 80024ec:	bfd147ae 	.word	0xbfd147ae
 80024f0:	c0140000 	.word	0xc0140000
 80024f4:	2000030c 	.word	0x2000030c
 80024f8:	20000318 	.word	0x20000318
 80024fc:	20000308 	.word	0x20000308
 8002500:	20000330 	.word	0x20000330
 8002504:	20000300 	.word	0x20000300
 8002508:	20000334 	.word	0x20000334
 800250c:	200004b4 	.word	0x200004b4
 8002510:	20000324 	.word	0x20000324
 8002514:	00000000 	.word	0x00000000

08002518 <moving_average_filter3>:
float angular_position_deg3 = 0.0; // Angular position in degrees
float realVel3;
float realRPM3;

// Function to calculate exponential moving average
float moving_average_filter3(float new_velocity) {
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	ed87 0a01 	vstr	s0, [r7, #4]
    static float ema3 = 0.0; // Initialize EMA variable
    ema3 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema3);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f810 	bl	8000548 <__aeabi_f2d>
 8002528:	a318      	add	r3, pc, #96	@ (adr r3, 800258c <moving_average_filter3+0x74>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fe f863 	bl	80005f8 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4614      	mov	r4, r2
 8002538:	461d      	mov	r5, r3
 800253a:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <moving_average_filter3+0x70>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f802 	bl	8000548 <__aeabi_f2d>
 8002544:	a30e      	add	r3, pc, #56	@ (adr r3, 8002580 <moving_average_filter3+0x68>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fe f855 	bl	80005f8 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4620      	mov	r0, r4
 8002554:	4629      	mov	r1, r5
 8002556:	f7fd fe99 	bl	800028c <__adddf3>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb41 	bl	8000be8 <__aeabi_d2f>
 8002566:	4603      	mov	r3, r0
 8002568:	4a07      	ldr	r2, [pc, #28]	@ (8002588 <moving_average_filter3+0x70>)
 800256a:	6013      	str	r3, [r2, #0]
    return ema3;
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <moving_average_filter3+0x70>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	ee07 3a90 	vmov	s15, r3
}
 8002574:	eeb0 0a67 	vmov.f32	s0, s15
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	bf00      	nop
 8002580:	9999999a 	.word	0x9999999a
 8002584:	3fe99999 	.word	0x3fe99999
 8002588:	200003cc 	.word	0x200003cc
 800258c:	9999999a 	.word	0x9999999a
 8002590:	3fc99999 	.word	0x3fc99999
 8002594:	00000000 	.word	0x00000000

08002598 <calculate_pwm3>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm3(float desired_velocity) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (desired_velocity < 0) {
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d505      	bpl.n	80025bc <calculate_pwm3+0x24>
        desired_velocity = -desired_velocity;
 80025b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b4:	eef1 7a67 	vneg.f32	s15, s15
 80025b8:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fd ffc3 	bl	8000548 <__aeabi_f2d>
 80025c2:	a310      	add	r3, pc, #64	@ (adr r3, 8002604 <calculate_pwm3+0x6c>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f940 	bl	800084c <__aeabi_ddiv>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <calculate_pwm3+0x68>)
 80025da:	f7fe f80d 	bl	80005f8 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe faff 	bl	8000be8 <__aeabi_d2f>
 80025ea:	4603      	mov	r3, r0
 80025ec:	ee07 3a90 	vmov	s15, r3
}
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	f3af 8000 	nop.w
 8002600:	408f4000 	.word	0x408f4000
 8002604:	147ae148 	.word	0x147ae148
 8002608:	3fd147ae 	.word	0x3fd147ae

0800260c <PID_Controller3>:

// PID Controller Function with Anti-Windup
float PID_Controller3(float Kp, float Ki, float Kd, float *integral, float last_error, float setpoint, float measured_value) {
 800260c:	b480      	push	{r7}
 800260e:	b08d      	sub	sp, #52	@ 0x34
 8002610:	af00      	add	r7, sp, #0
 8002612:	ed87 0a07 	vstr	s0, [r7, #28]
 8002616:	edc7 0a06 	vstr	s1, [r7, #24]
 800261a:	ed87 1a05 	vstr	s2, [r7, #20]
 800261e:	6138      	str	r0, [r7, #16]
 8002620:	edc7 1a03 	vstr	s3, [r7, #12]
 8002624:	ed87 2a02 	vstr	s4, [r7, #8]
 8002628:	edc7 2a01 	vstr	s5, [r7, #4]
    // Calculate the error
    float error3 = setpoint - measured_value;
 800262c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002630:	edd7 7a01 	vldr	s15, [r7, #4]
 8002634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002638:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Update the integral term with clamping to prevent windup
    *integral += error3;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	edc3 7a00 	vstr	s15, [r3]
    if (*integral > MAX_INTEGRAL) {
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80026e0 <PID_Controller3+0xd4>
 800265a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	dd03      	ble.n	800266c <PID_Controller3+0x60>
        *integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <PID_Controller3+0xd8>)
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00c      	b.n	8002686 <PID_Controller3+0x7a>
    } else if (*integral < -MAX_INTEGRAL) {
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	edd3 7a00 	vldr	s15, [r3]
 8002672:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80026e8 <PID_Controller3+0xdc>
 8002676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	d502      	bpl.n	8002686 <PID_Controller3+0x7a>
        *integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4a1a      	ldr	r2, [pc, #104]	@ (80026ec <PID_Controller3+0xe0>)
 8002684:	601a      	str	r2, [r3, #0]
    }

    // Calculate the derivative term
    float derivative3 = error3 - last_error;
 8002686:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800268a:	edd7 7a03 	vldr	s15, [r7, #12]
 800268e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002692:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Calculate the output
    float output3 = (Kp * error3) + (Ki * (*integral)) + (Kd * derivative3);
 8002696:	ed97 7a07 	vldr	s14, [r7, #28]
 800269a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800269e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	edd3 6a00 	vldr	s13, [r3]
 80026a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b4:	edd7 6a05 	vldr	s13, [r7, #20]
 80026b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Save the last error for next iteration
    last_error = error3;
 80026c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ca:	60fb      	str	r3, [r7, #12]

    return output3; // Return the control output
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	ee07 3a90 	vmov	s15, r3
}
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	3734      	adds	r7, #52	@ 0x34
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	42c80000 	.word	0x42c80000
 80026e4:	42c80000 	.word	0x42c80000
 80026e8:	c2c80000 	.word	0xc2c80000
 80026ec:	c2c80000 	.word	0xc2c80000

080026f0 <calculateVel3>:

int32_t current_pulse_count3 = 0;


// Function to calculate RPM and control the motor
void calculateVel3(float velTag3, float current_time3) {
 80026f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80026fc:	edc7 0a00 	vstr	s1, [r7]
    static float distance_traveled3 = 0.0;

    // Check if velTag3 is within the deadband
    if (fabs(velTag3) < DEAD_BAND) {
 8002700:	edd7 7a01 	vldr	s15, [r7, #4]
 8002704:	eef0 7ae7 	vabs.f32	s15, s15
 8002708:	ee17 0a90 	vmov	r0, s15
 800270c:	f7fd ff1c 	bl	8000548 <__aeabi_f2d>
 8002710:	a382      	add	r3, pc, #520	@ (adr r3, 800291c <calculateVel3+0x22c>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fe f9e1 	bl	8000adc <__aeabi_dcmplt>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <calculateVel3+0x36>
        velTag3 = 0; // Set velTag3 to zero if within deadband
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
    }

    // Immediate stop if velTag3 is 0
    if (velTag3 == 0) {
 8002726:	edd7 7a01 	vldr	s15, [r7, #4]
 800272a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	d13c      	bne.n	80027ae <calculateVel3+0xbe>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8002734:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <calculateVel3+0x1e8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2200      	movs	r2, #0
 800273a:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 800273c:	4b66      	ldr	r3, [pc, #408]	@ (80028d8 <calculateVel3+0x1e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40
        vel3 = 0.0;
 8002744:	4b65      	ldr	r3, [pc, #404]	@ (80028dc <calculateVel3+0x1ec>)
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim5, 0);
 800274c:	4b64      	ldr	r3, [pc, #400]	@ (80028e0 <calculateVel3+0x1f0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24
        rpm3 = 0.0;
 8002754:	4963      	ldr	r1, [pc, #396]	@ (80028e4 <calculateVel3+0x1f4>)
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9c1 2300 	strd	r2, r3, [r1]
        control_output3 = 0.0;
 8002762:	4b61      	ldr	r3, [pc, #388]	@ (80028e8 <calculateVel3+0x1f8>)
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
        // Reset variables except angular_position_rad3
        realVel3 = 0.0;
 800276a:	4b60      	ldr	r3, [pc, #384]	@ (80028ec <calculateVel3+0x1fc>)
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
        realRPM3 = 0.0;
 8002772:	4b5f      	ldr	r3, [pc, #380]	@ (80028f0 <calculateVel3+0x200>)
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
        integral1_3 = 0.0;
 800277a:	4b5e      	ldr	r3, [pc, #376]	@ (80028f4 <calculateVel3+0x204>)
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
        last_error3 = 0.0;
 8002782:	4b5d      	ldr	r3, [pc, #372]	@ (80028f8 <calculateVel3+0x208>)
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
        last_control_output3 = 0.0;
 800278a:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <calculateVel3+0x20c>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
        distance_traveled3 = 0.0;
 8002792:	4b5b      	ldr	r3, [pc, #364]	@ (8002900 <calculateVel3+0x210>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
        pulse_count3 = 0; // Reset pulse count
 800279a:	4b5a      	ldr	r3, [pc, #360]	@ (8002904 <calculateVel3+0x214>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
        last_velTag3 = velTag3; // Update last velTag3
 80027a0:	4a59      	ldr	r2, [pc, #356]	@ (8002908 <calculateVel3+0x218>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
        HAL_Delay(STOP_DURATION); // Wait for 100 ms
 80027a6:	2064      	movs	r0, #100	@ 0x64
 80027a8:	f002 f920 	bl	80049ec <HAL_Delay>
        return; // Exit the function
 80027ac:	e2f6      	b.n	8002d9c <calculateVel3+0x6ac>
    }

    // Calculate the time elapsed since the last update
    float delta_time3 = current_time3 - last_time3;
 80027ae:	4b57      	ldr	r3, [pc, #348]	@ (800290c <calculateVel3+0x21c>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ed97 7a00 	vldr	s14, [r7]
 80027b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027bc:	edc7 7a04 	vstr	s15, [r7, #16]

    // Read the current pulse count
    current_pulse_count3 = __HAL_TIM_GET_COUNTER(&htim5);
 80027c0:	4b47      	ldr	r3, [pc, #284]	@ (80028e0 <calculateVel3+0x1f0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b51      	ldr	r3, [pc, #324]	@ (8002910 <calculateVel3+0x220>)
 80027ca:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 80027cc:	200a      	movs	r0, #10
 80027ce:	f002 f90d 	bl	80049ec <HAL_Delay>

    // Calculate the difference in pulse count
    int32_t pulse_difference3 = current_pulse_count3 - pulse_count3;
 80027d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <calculateVel3+0x220>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <calculateVel3+0x214>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	60fb      	str	r3, [r7, #12]

    // Calculate RPM as a positive value
    rpm3 = fabs((float)pulse_difference3 / (float)PPR) * 60.0; // Always positive
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ea:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80027ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f2:	eef0 7ae7 	vabs.f32	s15, s15
 80027f6:	ee17 0a90 	vmov	r0, s15
 80027fa:	f7fd fea5 	bl	8000548 <__aeabi_f2d>
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	4b44      	ldr	r3, [pc, #272]	@ (8002914 <calculateVel3+0x224>)
 8002804:	f7fd fef8 	bl	80005f8 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4935      	ldr	r1, [pc, #212]	@ (80028e4 <calculateVel3+0x1f4>)
 800280e:	e9c1 2300 	strd	r2, r3, [r1]
    pulse_count3 = current_pulse_count3;
 8002812:	4b3f      	ldr	r3, [pc, #252]	@ (8002910 <calculateVel3+0x220>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4b3a      	ldr	r3, [pc, #232]	@ (8002904 <calculateVel3+0x214>)
 800281a:	601a      	str	r2, [r3, #0]
    // Limit RPM to the range [0, 250]
          rpm3 = fmax(0.0, fmin(250.0, rpm3));
 800281c:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <calculateVel3+0x1f4>)
 800281e:	ed93 7b00 	vldr	d7, [r3]
 8002822:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 80028c0 <calculateVel3+0x1d0>
 8002826:	eeb0 0a47 	vmov.f32	s0, s14
 800282a:	eef0 0a67 	vmov.f32	s1, s15
 800282e:	f009 f8ff 	bl	800ba30 <fmin>
 8002832:	eeb0 7a40 	vmov.f32	s14, s0
 8002836:	eef0 7a60 	vmov.f32	s15, s1
 800283a:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 80028c8 <calculateVel3+0x1d8>
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	f009 f8c9 	bl	800b9dc <fmax>
 800284a:	eeb0 7a40 	vmov.f32	s14, s0
 800284e:	eef0 7a60 	vmov.f32	s15, s1
 8002852:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <calculateVel3+0x1f4>)
 8002854:	ed83 7b00 	vstr	d7, [r3]
    // Calculate linear velocity (m/s)
    float new_vel3;
    if (pulse_difference3 < 0) {
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	da62      	bge.n	8002924 <calculateVel3+0x234>
        new_vel3 = -((rpm3 / 60.0) * dia3 * M_PI); // Negative velocity for reverse direction
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <calculateVel3+0x1f4>)
 8002860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	4b2a      	ldr	r3, [pc, #168]	@ (8002914 <calculateVel3+0x224>)
 800286a:	f7fd ffef 	bl	800084c <__aeabi_ddiv>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4614      	mov	r4, r2
 8002874:	461d      	mov	r5, r3
 8002876:	4b28      	ldr	r3, [pc, #160]	@ (8002918 <calculateVel3+0x228>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe64 	bl	8000548 <__aeabi_f2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd feb6 	bl	80005f8 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	a30e      	add	r3, pc, #56	@ (adr r3, 80028d0 <calculateVel3+0x1e0>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fead 	bl	80005f8 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe f99f 	bl	8000be8 <__aeabi_d2f>
 80028aa:	4603      	mov	r3, r0
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef1 7a67 	vneg.f32	s15, s15
 80028b4:	edc7 7a05 	vstr	s15, [r7, #20]
 80028b8:	e05c      	b.n	8002974 <calculateVel3+0x284>
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	406f4000 	.word	0x406f4000
	...
 80028d0:	54442d18 	.word	0x54442d18
 80028d4:	400921fb 	.word	0x400921fb
 80028d8:	20000424 	.word	0x20000424
 80028dc:	20000348 	.word	0x20000348
 80028e0:	200004fc 	.word	0x200004fc
 80028e4:	20000340 	.word	0x20000340
 80028e8:	2000034c 	.word	0x2000034c
 80028ec:	20000370 	.word	0x20000370
 80028f0:	20000374 	.word	0x20000374
 80028f4:	20000350 	.word	0x20000350
 80028f8:	20000354 	.word	0x20000354
 80028fc:	20000358 	.word	0x20000358
 8002900:	200003d0 	.word	0x200003d0
 8002904:	2000033c 	.word	0x2000033c
 8002908:	2000035c 	.word	0x2000035c
 800290c:	20000364 	.word	0x20000364
 8002910:	20000378 	.word	0x20000378
 8002914:	404e0000 	.word	0x404e0000
 8002918:	20000040 	.word	0x20000040
 800291c:	47ae147b 	.word	0x47ae147b
 8002920:	3f847ae1 	.word	0x3f847ae1
    } else {
        new_vel3 = (rpm3 / 60.0) * dia3 * M_PI; // Positive velocity for forward direction
 8002924:	4bac      	ldr	r3, [pc, #688]	@ (8002bd8 <calculateVel3+0x4e8>)
 8002926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	4bab      	ldr	r3, [pc, #684]	@ (8002bdc <calculateVel3+0x4ec>)
 8002930:	f7fd ff8c 	bl	800084c <__aeabi_ddiv>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	461d      	mov	r5, r3
 800293c:	4ba8      	ldr	r3, [pc, #672]	@ (8002be0 <calculateVel3+0x4f0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe01 	bl	8000548 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f7fd fe53 	bl	80005f8 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	a397      	add	r3, pc, #604	@ (adr r3, 8002bb8 <calculateVel3+0x4c8>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	f7fd fe4a 	bl	80005f8 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f7fe f93c 	bl	8000be8 <__aeabi_d2f>
 8002970:	4603      	mov	r3, r0
 8002972:	617b      	str	r3, [r7, #20]
    }
    // Constrain the velocity to the range [-1, 1]
       vel3 = fmax(-1.0, fmin(1.0, moving_average_filter3(new_vel3)));
 8002974:	ed97 0a05 	vldr	s0, [r7, #20]
 8002978:	f7ff fdce 	bl	8002518 <moving_average_filter3>
 800297c:	ee10 3a10 	vmov	r3, s0
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fde1 	bl	8000548 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002bc0 <calculateVel3+0x4d0>
 800298e:	ec43 2b10 	vmov	d0, r2, r3
 8002992:	f009 f84d 	bl	800ba30 <fmin>
 8002996:	eeb0 7a40 	vmov.f32	s14, s0
 800299a:	eef0 7a60 	vmov.f32	s15, s1
 800299e:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8002bc8 <calculateVel3+0x4d8>
 80029a2:	eeb0 0a47 	vmov.f32	s0, s14
 80029a6:	eef0 0a67 	vmov.f32	s1, s15
 80029aa:	f009 f817 	bl	800b9dc <fmax>
 80029ae:	ec53 2b10 	vmov	r2, r3, d0
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f917 	bl	8000be8 <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a89      	ldr	r2, [pc, #548]	@ (8002be4 <calculateVel3+0x4f4>)
 80029be:	6013      	str	r3, [r2, #0]
    // Apply moving average filter for velocity
   // vel3 = moving_average_filter3(new_vel3);

    // Update position based on velocity and elapsed time
    distance_traveled3 += vel3 * (delta_time3 / 1000.0); // Linear distance traveled in meters
 80029c0:	4b89      	ldr	r3, [pc, #548]	@ (8002be8 <calculateVel3+0x4f8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fdbf 	bl	8000548 <__aeabi_f2d>
 80029ca:	4604      	mov	r4, r0
 80029cc:	460d      	mov	r5, r1
 80029ce:	4b85      	ldr	r3, [pc, #532]	@ (8002be4 <calculateVel3+0x4f4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fdb8 	bl	8000548 <__aeabi_f2d>
 80029d8:	4680      	mov	r8, r0
 80029da:	4689      	mov	r9, r1
 80029dc:	6938      	ldr	r0, [r7, #16]
 80029de:	f7fd fdb3 	bl	8000548 <__aeabi_f2d>
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	4b81      	ldr	r3, [pc, #516]	@ (8002bec <calculateVel3+0x4fc>)
 80029e8:	f7fd ff30 	bl	800084c <__aeabi_ddiv>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4640      	mov	r0, r8
 80029f2:	4649      	mov	r1, r9
 80029f4:	f7fd fe00 	bl	80005f8 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4620      	mov	r0, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7fd fc44 	bl	800028c <__adddf3>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7fe f8ec 	bl	8000be8 <__aeabi_d2f>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a75      	ldr	r2, [pc, #468]	@ (8002be8 <calculateVel3+0x4f8>)
 8002a14:	6013      	str	r3, [r2, #0]
    angular_position_rad3 += distance_traveled3 / (dia3 / 2.0); // Update angular position in radians
 8002a16:	4b76      	ldr	r3, [pc, #472]	@ (8002bf0 <calculateVel3+0x500>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd94 	bl	8000548 <__aeabi_f2d>
 8002a20:	4604      	mov	r4, r0
 8002a22:	460d      	mov	r5, r1
 8002a24:	4b70      	ldr	r3, [pc, #448]	@ (8002be8 <calculateVel3+0x4f8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd8d 	bl	8000548 <__aeabi_f2d>
 8002a2e:	4680      	mov	r8, r0
 8002a30:	4689      	mov	r9, r1
 8002a32:	4b6b      	ldr	r3, [pc, #428]	@ (8002be0 <calculateVel3+0x4f0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fd86 	bl	8000548 <__aeabi_f2d>
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a44:	f7fd ff02 	bl	800084c <__aeabi_ddiv>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4640      	mov	r0, r8
 8002a4e:	4649      	mov	r1, r9
 8002a50:	f7fd fefc 	bl	800084c <__aeabi_ddiv>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fc16 	bl	800028c <__adddf3>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fe f8be 	bl	8000be8 <__aeabi_d2f>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4a60      	ldr	r2, [pc, #384]	@ (8002bf0 <calculateVel3+0x500>)
 8002a70:	6013      	str	r3, [r2, #0]
    angular_position_deg3 = angular_position_rad3 * (180.0 / M_PI); // Convert to degrees
 8002a72:	4b5f      	ldr	r3, [pc, #380]	@ (8002bf0 <calculateVel3+0x500>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd66 	bl	8000548 <__aeabi_f2d>
 8002a7c:	a354      	add	r3, pc, #336	@ (adr r3, 8002bd0 <calculateVel3+0x4e0>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fdb9 	bl	80005f8 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f7fe f8ab 	bl	8000be8 <__aeabi_d2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <calculateVel3+0x504>)
 8002a96:	6013      	str	r3, [r2, #0]

    // Kalman filter update
    estimate3 = estimate3; // Predicted state (previous estimate)
 8002a98:	4b57      	ldr	r3, [pc, #348]	@ (8002bf8 <calculateVel3+0x508>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a56      	ldr	r2, [pc, #344]	@ (8002bf8 <calculateVel3+0x508>)
 8002a9e:	6013      	str	r3, [r2, #0]
    error_covariance3 += process_noise3; // Update error covariance
 8002aa0:	4b56      	ldr	r3, [pc, #344]	@ (8002bfc <calculateVel3+0x50c>)
 8002aa2:	ed93 7a00 	vldr	s14, [r3]
 8002aa6:	4b56      	ldr	r3, [pc, #344]	@ (8002c00 <calculateVel3+0x510>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab0:	4b52      	ldr	r3, [pc, #328]	@ (8002bfc <calculateVel3+0x50c>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]

    // Measurement update
    kalman_gain3 = error_covariance3 / (error_covariance3 + measurement_noise3); // Calculate Kalman gain
 8002ab6:	4b51      	ldr	r3, [pc, #324]	@ (8002bfc <calculateVel3+0x50c>)
 8002ab8:	edd3 6a00 	vldr	s13, [r3]
 8002abc:	4b4f      	ldr	r3, [pc, #316]	@ (8002bfc <calculateVel3+0x50c>)
 8002abe:	ed93 7a00 	vldr	s14, [r3]
 8002ac2:	4b50      	ldr	r3, [pc, #320]	@ (8002c04 <calculateVel3+0x514>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8002c08 <calculateVel3+0x518>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
    estimate3 += kalman_gain3 * (vel3 - estimate3); // Update estimate with measurement
 8002ad6:	4b43      	ldr	r3, [pc, #268]	@ (8002be4 <calculateVel3+0x4f4>)
 8002ad8:	ed93 7a00 	vldr	s14, [r3]
 8002adc:	4b46      	ldr	r3, [pc, #280]	@ (8002bf8 <calculateVel3+0x508>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae6:	4b48      	ldr	r3, [pc, #288]	@ (8002c08 <calculateVel3+0x518>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af0:	4b41      	ldr	r3, [pc, #260]	@ (8002bf8 <calculateVel3+0x508>)
 8002af2:	edd3 7a00 	vldr	s15, [r3]
 8002af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <calculateVel3+0x508>)
 8002afc:	edc3 7a00 	vstr	s15, [r3]
    error_covariance3 = (1 - kalman_gain3) * error_covariance3; // Update error covariance
 8002b00:	4b41      	ldr	r3, [pc, #260]	@ (8002c08 <calculateVel3+0x518>)
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <calculateVel3+0x50c>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	4b38      	ldr	r3, [pc, #224]	@ (8002bfc <calculateVel3+0x50c>)
 8002b1a:	edc3 7a00 	vstr	s15, [r3]

    // Calculate control output using PID controller
    control_output3 = PID_Controller3(Kp3, Ki3, Kd3, &integral1_3, last_error3, velTag3, vel3);
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <calculateVel3+0x51c>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	4b3a      	ldr	r3, [pc, #232]	@ (8002c10 <calculateVel3+0x520>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c14 <calculateVel3+0x524>)
 8002b2c:	edd3 6a00 	vldr	s13, [r3]
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <calculateVel3+0x528>)
 8002b32:	ed93 6a00 	vldr	s12, [r3]
 8002b36:	4b2b      	ldr	r3, [pc, #172]	@ (8002be4 <calculateVel3+0x4f4>)
 8002b38:	edd3 5a00 	vldr	s11, [r3]
 8002b3c:	eef0 2a65 	vmov.f32	s5, s11
 8002b40:	ed97 2a01 	vldr	s4, [r7, #4]
 8002b44:	eef0 1a46 	vmov.f32	s3, s12
 8002b48:	4834      	ldr	r0, [pc, #208]	@ (8002c1c <calculateVel3+0x52c>)
 8002b4a:	eeb0 1a66 	vmov.f32	s2, s13
 8002b4e:	eef0 0a47 	vmov.f32	s1, s14
 8002b52:	eeb0 0a67 	vmov.f32	s0, s15
 8002b56:	f7ff fd59 	bl	800260c <PID_Controller3>
 8002b5a:	eef0 7a40 	vmov.f32	s15, s0
 8002b5e:	4b30      	ldr	r3, [pc, #192]	@ (8002c20 <calculateVel3+0x530>)
 8002b60:	edc3 7a00 	vstr	s15, [r3]

    // Implement ramping to control output
    if (fabs(control_output3 - last_control_output3) > RAMP_RATE) {
 8002b64:	4b2e      	ldr	r3, [pc, #184]	@ (8002c20 <calculateVel3+0x530>)
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <calculateVel3+0x534>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	eef0 7ae7 	vabs.f32	s15, s15
 8002b78:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b84:	dd60      	ble.n	8002c48 <calculateVel3+0x558>
        control_output3 = last_control_output3 + (control_output3 > last_control_output3 ? RAMP_RATE : -RAMP_RATE);
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <calculateVel3+0x534>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fcdc 	bl	8000548 <__aeabi_f2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4922      	ldr	r1, [pc, #136]	@ (8002c20 <calculateVel3+0x530>)
 8002b96:	ed91 7a00 	vldr	s14, [r1]
 8002b9a:	4922      	ldr	r1, [pc, #136]	@ (8002c24 <calculateVel3+0x534>)
 8002b9c:	edd1 7a00 	vldr	s15, [r1]
 8002ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba8:	dd40      	ble.n	8002c2c <calculateVel3+0x53c>
 8002baa:	f04f 0000 	mov.w	r0, #0
 8002bae:	491e      	ldr	r1, [pc, #120]	@ (8002c28 <calculateVel3+0x538>)
 8002bb0:	e03f      	b.n	8002c32 <calculateVel3+0x542>
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	54442d18 	.word	0x54442d18
 8002bbc:	400921fb 	.word	0x400921fb
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	3ff00000 	.word	0x3ff00000
 8002bc8:	00000000 	.word	0x00000000
 8002bcc:	bff00000 	.word	0xbff00000
 8002bd0:	1a63c1f8 	.word	0x1a63c1f8
 8002bd4:	404ca5dc 	.word	0x404ca5dc
 8002bd8:	20000340 	.word	0x20000340
 8002bdc:	404e0000 	.word	0x404e0000
 8002be0:	20000040 	.word	0x20000040
 8002be4:	20000348 	.word	0x20000348
 8002be8:	200003d0 	.word	0x200003d0
 8002bec:	408f4000 	.word	0x408f4000
 8002bf0:	20000368 	.word	0x20000368
 8002bf4:	2000036c 	.word	0x2000036c
 8002bf8:	20000360 	.word	0x20000360
 8002bfc:	20000054 	.word	0x20000054
 8002c00:	20000058 	.word	0x20000058
 8002c04:	2000005c 	.word	0x2000005c
 8002c08:	20000050 	.word	0x20000050
 8002c0c:	20000044 	.word	0x20000044
 8002c10:	20000048 	.word	0x20000048
 8002c14:	2000004c 	.word	0x2000004c
 8002c18:	20000354 	.word	0x20000354
 8002c1c:	20000350 	.word	0x20000350
 8002c20:	2000034c 	.word	0x2000034c
 8002c24:	20000358 	.word	0x20000358
 8002c28:	40140000 	.word	0x40140000
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	4965      	ldr	r1, [pc, #404]	@ (8002dc8 <calculateVel3+0x6d8>)
 8002c32:	f7fd fb2b 	bl	800028c <__adddf3>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fd ffd3 	bl	8000be8 <__aeabi_d2f>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a61      	ldr	r2, [pc, #388]	@ (8002dcc <calculateVel3+0x6dc>)
 8002c46:	6013      	str	r3, [r2, #0]
    }

    // Implement hysteresis to prevent rapid switching
    if ((last_control_output3 > 0 && control_output3 < -HYSTERESIS) || (last_control_output3 < 0 && control_output3 > HYSTERESIS)) {
 8002c48:	4b61      	ldr	r3, [pc, #388]	@ (8002dd0 <calculateVel3+0x6e0>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	dd0c      	ble.n	8002c72 <calculateVel3+0x582>
 8002c58:	4b5c      	ldr	r3, [pc, #368]	@ (8002dcc <calculateVel3+0x6dc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc73 	bl	8000548 <__aeabi_f2d>
 8002c62:	a351      	add	r3, pc, #324	@ (adr r3, 8002da8 <calculateVel3+0x6b8>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f7fd ff38 	bl	8000adc <__aeabi_dcmplt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d114      	bne.n	8002c9c <calculateVel3+0x5ac>
 8002c72:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <calculateVel3+0x6e0>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d510      	bpl.n	8002ca4 <calculateVel3+0x5b4>
 8002c82:	4b52      	ldr	r3, [pc, #328]	@ (8002dcc <calculateVel3+0x6dc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc5e 	bl	8000548 <__aeabi_f2d>
 8002c8c:	a348      	add	r3, pc, #288	@ (adr r3, 8002db0 <calculateVel3+0x6c0>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd ff41 	bl	8000b18 <__aeabi_dcmpgt>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <calculateVel3+0x5b4>
        control_output3 = last_control_output3; // Maintain last control output if within hysteresis
 8002c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd0 <calculateVel3+0x6e0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a4a      	ldr	r2, [pc, #296]	@ (8002dcc <calculateVel3+0x6dc>)
 8002ca2:	6013      	str	r3, [r2, #0]
    }

    realVel3 = vel3 / 2.0; // Scale factor
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd4 <calculateVel3+0x6e4>)
 8002ca6:	ed93 7a00 	vldr	s14, [r3]
 8002caa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb2:	4b49      	ldr	r3, [pc, #292]	@ (8002dd8 <calculateVel3+0x6e8>)
 8002cb4:	edc3 7a00 	vstr	s15, [r3]
    realRPM3 = rpm3 / 2.0;
 8002cb8:	4b48      	ldr	r3, [pc, #288]	@ (8002ddc <calculateVel3+0x6ec>)
 8002cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cc6:	f7fd fdc1 	bl	800084c <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff89 	bl	8000be8 <__aeabi_d2f>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a41      	ldr	r2, [pc, #260]	@ (8002de0 <calculateVel3+0x6f0>)
 8002cda:	6013      	str	r3, [r2, #0]
    // Limit control_output4 to the range [-0.27, 0.27]
       control_output3 = fmax(-0.27, fmin(0.27, control_output3));
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <calculateVel3+0x6dc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc31 	bl	8000548 <__aeabi_f2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8002db8 <calculateVel3+0x6c8>
 8002cee:	ec43 2b10 	vmov	d0, r2, r3
 8002cf2:	f008 fe9d 	bl	800ba30 <fmin>
 8002cf6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cfa:	eef0 7a60 	vmov.f32	s15, s1
 8002cfe:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8002dc0 <calculateVel3+0x6d0>
 8002d02:	eeb0 0a47 	vmov.f32	s0, s14
 8002d06:	eef0 0a67 	vmov.f32	s1, s15
 8002d0a:	f008 fe67 	bl	800b9dc <fmax>
 8002d0e:	ec53 2b10 	vmov	r2, r3, d0
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff67 	bl	8000be8 <__aeabi_d2f>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dcc <calculateVel3+0x6dc>)
 8002d1e:	6013      	str	r3, [r2, #0]
    // Set the PWM duty cycle based on the sign of desired_velocity
    if (velTag3 > 0) {
 8002d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	dd14      	ble.n	8002d58 <calculateVel3+0x668>
        // Positive velocity
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <calculateVel3+0x6f4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, calculate_pwm3(control_output3));
 8002d36:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <calculateVel3+0x6dc>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d40:	f7ff fc2a 	bl	8002598 <calculate_pwm3>
 8002d44:	eef0 7a40 	vmov.f32	s15, s0
 8002d48:	4b26      	ldr	r3, [pc, #152]	@ (8002de4 <calculateVel3+0x6f4>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d50:	ee17 2a90 	vmov	r2, s15
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d56:	e01a      	b.n	8002d8e <calculateVel3+0x69e>
    } else if (velTag3 < 0) {
 8002d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d64:	d513      	bpl.n	8002d8e <calculateVel3+0x69e>
        // Negative velocity
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calculate_pwm3(control_output3));
 8002d66:	4b19      	ldr	r3, [pc, #100]	@ (8002dcc <calculateVel3+0x6dc>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d70:	f7ff fc12 	bl	8002598 <calculate_pwm3>
 8002d74:	eef0 7a40 	vmov.f32	s15, s0
 8002d78:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <calculateVel3+0x6f4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d80:	ee17 2a90 	vmov	r2, s15
 8002d84:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002d86:	4b17      	ldr	r3, [pc, #92]	@ (8002de4 <calculateVel3+0x6f4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    // Update last time and last control output
    last_time3 = current_time3;
 8002d8e:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <calculateVel3+0x6f8>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6013      	str	r3, [r2, #0]
    last_control_output3 = control_output3;
 8002d94:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <calculateVel3+0x6dc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <calculateVel3+0x6e0>)
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002da4:	f3af 8000 	nop.w
 8002da8:	9999999a 	.word	0x9999999a
 8002dac:	bfa99999 	.word	0xbfa99999
 8002db0:	9999999a 	.word	0x9999999a
 8002db4:	3fa99999 	.word	0x3fa99999
 8002db8:	147ae148 	.word	0x147ae148
 8002dbc:	3fd147ae 	.word	0x3fd147ae
 8002dc0:	147ae148 	.word	0x147ae148
 8002dc4:	bfd147ae 	.word	0xbfd147ae
 8002dc8:	c0140000 	.word	0xc0140000
 8002dcc:	2000034c 	.word	0x2000034c
 8002dd0:	20000358 	.word	0x20000358
 8002dd4:	20000348 	.word	0x20000348
 8002dd8:	20000370 	.word	0x20000370
 8002ddc:	20000340 	.word	0x20000340
 8002de0:	20000374 	.word	0x20000374
 8002de4:	20000424 	.word	0x20000424
 8002de8:	20000364 	.word	0x20000364
 8002dec:	00000000 	.word	0x00000000

08002df0 <moving_average_filter4>:
float angular_position_deg4 = 0.0; // Angular position in degrees
float realVel4;
float realRPM4;

// Function to calculate exponential moving average
float moving_average_filter4(float new_velocity) {
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	ed87 0a01 	vstr	s0, [r7, #4]
    static float ema4 = 0.0; // Initialize EMA variable
    ema4 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema4);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fba4 	bl	8000548 <__aeabi_f2d>
 8002e00:	a318      	add	r3, pc, #96	@ (adr r3, 8002e64 <moving_average_filter4+0x74>)
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4614      	mov	r4, r2
 8002e10:	461d      	mov	r5, r3
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <moving_average_filter4+0x70>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fb96 	bl	8000548 <__aeabi_f2d>
 8002e1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002e58 <moving_average_filter4+0x68>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fbe9 	bl	80005f8 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd fa2d 	bl	800028c <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f7fd fed5 	bl	8000be8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4a07      	ldr	r2, [pc, #28]	@ (8002e60 <moving_average_filter4+0x70>)
 8002e42:	6013      	str	r3, [r2, #0]
    return ema4;
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <moving_average_filter4+0x70>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	ee07 3a90 	vmov	s15, r3
}
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bdb0      	pop	{r4, r5, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	9999999a 	.word	0x9999999a
 8002e5c:	3fe99999 	.word	0x3fe99999
 8002e60:	200003d4 	.word	0x200003d4
 8002e64:	9999999a 	.word	0x9999999a
 8002e68:	3fc99999 	.word	0x3fc99999
 8002e6c:	00000000 	.word	0x00000000

08002e70 <calculate_pwm4>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm4(float desired_velocity) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	ed87 0a01 	vstr	s0, [r7, #4]
    if (desired_velocity < 0) {
 8002e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e86:	d505      	bpl.n	8002e94 <calculate_pwm4+0x24>
        desired_velocity = -desired_velocity;
 8002e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8c:	eef1 7a67 	vneg.f32	s15, s15
 8002e90:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fd fb57 	bl	8000548 <__aeabi_f2d>
 8002e9a:	a310      	add	r3, pc, #64	@ (adr r3, 8002edc <calculate_pwm4+0x6c>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fcd4 	bl	800084c <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <calculate_pwm4+0x68>)
 8002eb2:	f7fd fba1 	bl	80005f8 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f7fd fe93 	bl	8000be8 <__aeabi_d2f>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	ee07 3a90 	vmov	s15, r3
}
 8002ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	408f4000 	.word	0x408f4000
 8002edc:	147ae148 	.word	0x147ae148
 8002ee0:	3fd147ae 	.word	0x3fd147ae

08002ee4 <PID_Controller4>:

// PID Controller Function with Anti-Windup
float PID_Controller4(float Kp, float Ki, float Kd, float *integral, float last_error, float setpoint, float measured_value) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	b08d      	sub	sp, #52	@ 0x34
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	ed87 0a07 	vstr	s0, [r7, #28]
 8002eee:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ef2:	ed87 1a05 	vstr	s2, [r7, #20]
 8002ef6:	6138      	str	r0, [r7, #16]
 8002ef8:	edc7 1a03 	vstr	s3, [r7, #12]
 8002efc:	ed87 2a02 	vstr	s4, [r7, #8]
 8002f00:	edc7 2a01 	vstr	s5, [r7, #4]
    // Calculate the error
    float error4 = setpoint - measured_value;
 8002f04:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f10:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Update the integral term with clamping to prevent windup
    *integral += error4;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	edc3 7a00 	vstr	s15, [r3]
    if (*integral > MAX_INTEGRAL) {
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002fb8 <PID_Controller4+0xd4>
 8002f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	dd03      	ble.n	8002f44 <PID_Controller4+0x60>
        *integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fbc <PID_Controller4+0xd8>)
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00c      	b.n	8002f5e <PID_Controller4+0x7a>
    } else if (*integral < -MAX_INTEGRAL) {
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002fc0 <PID_Controller4+0xdc>
 8002f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f56:	d502      	bpl.n	8002f5e <PID_Controller4+0x7a>
        *integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc4 <PID_Controller4+0xe0>)
 8002f5c:	601a      	str	r2, [r3, #0]
    }

    // Calculate the derivative term
    float derivative4 = error4 - last_error;
 8002f5e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Calculate the output
    float output4 = (Kp * error4) + (Ki * (*integral)) + (Kd * derivative4);
 8002f6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	edd3 6a00 	vldr	s13, [r3]
 8002f80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f8c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f90:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Save the last error for next iteration
    last_error = error4;
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	60fb      	str	r3, [r7, #12]

    return output4; // Return the control output
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	ee07 3a90 	vmov	s15, r3
}
 8002faa:	eeb0 0a67 	vmov.f32	s0, s15
 8002fae:	3734      	adds	r7, #52	@ 0x34
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	42c80000 	.word	0x42c80000
 8002fbc:	42c80000 	.word	0x42c80000
 8002fc0:	c2c80000 	.word	0xc2c80000
 8002fc4:	c2c80000 	.word	0xc2c80000

08002fc8 <calculateVel4>:

int32_t current_pulse_count4 = 0;


// Function to calculate RPM and control the motor
void calculateVel4(float velTag4, float current_time4) {
 8002fc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fd4:	edc7 0a00 	vstr	s1, [r7]
    static float distance_traveled4 = 0.0;

    // Check if velTag4 is within the deadband
    if (fabs(velTag4) < DEAD_BAND) {
 8002fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fdc:	eef0 7ae7 	vabs.f32	s15, s15
 8002fe0:	ee17 0a90 	vmov	r0, s15
 8002fe4:	f7fd fab0 	bl	8000548 <__aeabi_f2d>
 8002fe8:	a382      	add	r3, pc, #520	@ (adr r3, 80031f4 <calculateVel4+0x22c>)
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f7fd fd75 	bl	8000adc <__aeabi_dcmplt>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <calculateVel4+0x36>
        velTag4 = 0; // Set velTag4 to zero if within deadband
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
    }

    // Immediate stop if velTag4 is 0
    if (velTag4 == 0) {
 8002ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003002:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d13c      	bne.n	8003086 <calculateVel4+0xbe>
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800300c:	4b68      	ldr	r3, [pc, #416]	@ (80031b0 <calculateVel4+0x1e8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8003014:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <calculateVel4+0x1e8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2200      	movs	r2, #0
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
        vel4 = 0.0;
 800301c:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <calculateVel4+0x1ec>)
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim8, 0);
 8003024:	4b64      	ldr	r3, [pc, #400]	@ (80031b8 <calculateVel4+0x1f0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	@ 0x24
        rpm4 = 0.0;
 800302c:	4963      	ldr	r1, [pc, #396]	@ (80031bc <calculateVel4+0x1f4>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9c1 2300 	strd	r2, r3, [r1]
        control_output4 = 0.0;
 800303a:	4b61      	ldr	r3, [pc, #388]	@ (80031c0 <calculateVel4+0x1f8>)
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
        // Reset variables except angular_position_rad4
        realVel4 = 0.0;
 8003042:	4b60      	ldr	r3, [pc, #384]	@ (80031c4 <calculateVel4+0x1fc>)
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
        realRPM4 = 0.0;
 800304a:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <calculateVel4+0x200>)
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
        integral1_4 = 0.0;
 8003052:	4b5e      	ldr	r3, [pc, #376]	@ (80031cc <calculateVel4+0x204>)
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
        last_error4 = 0.0;
 800305a:	4b5d      	ldr	r3, [pc, #372]	@ (80031d0 <calculateVel4+0x208>)
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
        last_control_output4 = 0.0;
 8003062:	4b5c      	ldr	r3, [pc, #368]	@ (80031d4 <calculateVel4+0x20c>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
        distance_traveled4 = 0.0;
 800306a:	4b5b      	ldr	r3, [pc, #364]	@ (80031d8 <calculateVel4+0x210>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
        pulse_count4 = 0; // Reset pulse count
 8003072:	4b5a      	ldr	r3, [pc, #360]	@ (80031dc <calculateVel4+0x214>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
        last_velTag4 = velTag4; // Update last velTag4
 8003078:	4a59      	ldr	r2, [pc, #356]	@ (80031e0 <calculateVel4+0x218>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
        HAL_Delay(STOP_DURATION); // Wait for 100 ms
 800307e:	2064      	movs	r0, #100	@ 0x64
 8003080:	f001 fcb4 	bl	80049ec <HAL_Delay>
        return; // Exit the function
 8003084:	e2f6      	b.n	8003674 <calculateVel4+0x6ac>
    }

    // Calculate the time elapsed since the last update
    float delta_time4 = current_time4 - last_time4;
 8003086:	4b57      	ldr	r3, [pc, #348]	@ (80031e4 <calculateVel4+0x21c>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ed97 7a00 	vldr	s14, [r7]
 8003090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003094:	edc7 7a04 	vstr	s15, [r7, #16]

    // Read the current pulse count
    current_pulse_count4 = __HAL_TIM_GET_COUNTER(&htim8);
 8003098:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <calculateVel4+0x1f0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	461a      	mov	r2, r3
 80030a0:	4b51      	ldr	r3, [pc, #324]	@ (80031e8 <calculateVel4+0x220>)
 80030a2:	601a      	str	r2, [r3, #0]
    HAL_Delay(10);
 80030a4:	200a      	movs	r0, #10
 80030a6:	f001 fca1 	bl	80049ec <HAL_Delay>

    // Calculate the difference in pulse count
    int32_t pulse_difference4 = current_pulse_count4 - pulse_count4;
 80030aa:	4b4f      	ldr	r3, [pc, #316]	@ (80031e8 <calculateVel4+0x220>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b4a      	ldr	r3, [pc, #296]	@ (80031dc <calculateVel4+0x214>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	60fb      	str	r3, [r7, #12]

    // Calculate RPM as a positive value
    rpm4 = fabs((float)pulse_difference4 / (float)PPR) * 60.0; // Always positive
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c2:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80030c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030ca:	eef0 7ae7 	vabs.f32	s15, s15
 80030ce:	ee17 0a90 	vmov	r0, s15
 80030d2:	f7fd fa39 	bl	8000548 <__aeabi_f2d>
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	4b44      	ldr	r3, [pc, #272]	@ (80031ec <calculateVel4+0x224>)
 80030dc:	f7fd fa8c 	bl	80005f8 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4935      	ldr	r1, [pc, #212]	@ (80031bc <calculateVel4+0x1f4>)
 80030e6:	e9c1 2300 	strd	r2, r3, [r1]
    pulse_count4 = current_pulse_count4;
 80030ea:	4b3f      	ldr	r3, [pc, #252]	@ (80031e8 <calculateVel4+0x220>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b3a      	ldr	r3, [pc, #232]	@ (80031dc <calculateVel4+0x214>)
 80030f2:	601a      	str	r2, [r3, #0]
    // Limit RPM to the range [0, 250]
          rpm4 = fmax(0.0, fmin(250.0, rpm4));
 80030f4:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <calculateVel4+0x1f4>)
 80030f6:	ed93 7b00 	vldr	d7, [r3]
 80030fa:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003198 <calculateVel4+0x1d0>
 80030fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003102:	eef0 0a67 	vmov.f32	s1, s15
 8003106:	f008 fc93 	bl	800ba30 <fmin>
 800310a:	eeb0 7a40 	vmov.f32	s14, s0
 800310e:	eef0 7a60 	vmov.f32	s15, s1
 8003112:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 80031a0 <calculateVel4+0x1d8>
 8003116:	eeb0 0a47 	vmov.f32	s0, s14
 800311a:	eef0 0a67 	vmov.f32	s1, s15
 800311e:	f008 fc5d 	bl	800b9dc <fmax>
 8003122:	eeb0 7a40 	vmov.f32	s14, s0
 8003126:	eef0 7a60 	vmov.f32	s15, s1
 800312a:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <calculateVel4+0x1f4>)
 800312c:	ed83 7b00 	vstr	d7, [r3]
    // Calculate linear velocity (m/s)
    float new_vel4;
    if (pulse_difference4 < 0) {
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	da62      	bge.n	80031fc <calculateVel4+0x234>
        new_vel4 = -((rpm4 / 60.0) * dia4 * M_PI); // Negative velocity for reverse direction
 8003136:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <calculateVel4+0x1f4>)
 8003138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	4b2a      	ldr	r3, [pc, #168]	@ (80031ec <calculateVel4+0x224>)
 8003142:	f7fd fb83 	bl	800084c <__aeabi_ddiv>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4614      	mov	r4, r2
 800314c:	461d      	mov	r5, r3
 800314e:	4b28      	ldr	r3, [pc, #160]	@ (80031f0 <calculateVel4+0x228>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9f8 	bl	8000548 <__aeabi_f2d>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4620      	mov	r0, r4
 800315e:	4629      	mov	r1, r5
 8003160:	f7fd fa4a 	bl	80005f8 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	a30e      	add	r3, pc, #56	@ (adr r3, 80031a8 <calculateVel4+0x1e0>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f7fd fa41 	bl	80005f8 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f7fd fd33 	bl	8000be8 <__aeabi_d2f>
 8003182:	4603      	mov	r3, r0
 8003184:	ee07 3a90 	vmov	s15, r3
 8003188:	eef1 7a67 	vneg.f32	s15, s15
 800318c:	edc7 7a05 	vstr	s15, [r7, #20]
 8003190:	e05c      	b.n	800324c <calculateVel4+0x284>
 8003192:	bf00      	nop
 8003194:	f3af 8000 	nop.w
 8003198:	00000000 	.word	0x00000000
 800319c:	406f4000 	.word	0x406f4000
	...
 80031a8:	54442d18 	.word	0x54442d18
 80031ac:	400921fb 	.word	0x400921fb
 80031b0:	2000058c 	.word	0x2000058c
 80031b4:	20000388 	.word	0x20000388
 80031b8:	20000544 	.word	0x20000544
 80031bc:	20000380 	.word	0x20000380
 80031c0:	2000038c 	.word	0x2000038c
 80031c4:	200003b0 	.word	0x200003b0
 80031c8:	200003b4 	.word	0x200003b4
 80031cc:	20000390 	.word	0x20000390
 80031d0:	20000394 	.word	0x20000394
 80031d4:	20000398 	.word	0x20000398
 80031d8:	200003d8 	.word	0x200003d8
 80031dc:	2000037c 	.word	0x2000037c
 80031e0:	2000039c 	.word	0x2000039c
 80031e4:	200003a4 	.word	0x200003a4
 80031e8:	200003b8 	.word	0x200003b8
 80031ec:	404e0000 	.word	0x404e0000
 80031f0:	20000060 	.word	0x20000060
 80031f4:	47ae147b 	.word	0x47ae147b
 80031f8:	3f847ae1 	.word	0x3f847ae1
    } else {
        new_vel4 = (rpm4 / 60.0) * dia4 * M_PI; // Positive velocity for forward direction
 80031fc:	4bac      	ldr	r3, [pc, #688]	@ (80034b0 <calculateVel4+0x4e8>)
 80031fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	4bab      	ldr	r3, [pc, #684]	@ (80034b4 <calculateVel4+0x4ec>)
 8003208:	f7fd fb20 	bl	800084c <__aeabi_ddiv>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4ba8      	ldr	r3, [pc, #672]	@ (80034b8 <calculateVel4+0x4f0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f995 	bl	8000548 <__aeabi_f2d>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f7fd f9e7 	bl	80005f8 <__aeabi_dmul>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	a397      	add	r3, pc, #604	@ (adr r3, 8003490 <calculateVel4+0x4c8>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd f9de 	bl	80005f8 <__aeabi_dmul>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fcd0 	bl	8000be8 <__aeabi_d2f>
 8003248:	4603      	mov	r3, r0
 800324a:	617b      	str	r3, [r7, #20]
    }

    // Constrain the velocity to the range [-1, 1]
       vel4 = fmax(-1.0, fmin(1.0, moving_average_filter4(new_vel4)));
 800324c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003250:	f7ff fdce 	bl	8002df0 <moving_average_filter4>
 8003254:	ee10 3a10 	vmov	r3, s0
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f975 	bl	8000548 <__aeabi_f2d>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8003498 <calculateVel4+0x4d0>
 8003266:	ec43 2b10 	vmov	d0, r2, r3
 800326a:	f008 fbe1 	bl	800ba30 <fmin>
 800326e:	eeb0 7a40 	vmov.f32	s14, s0
 8003272:	eef0 7a60 	vmov.f32	s15, s1
 8003276:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 80034a0 <calculateVel4+0x4d8>
 800327a:	eeb0 0a47 	vmov.f32	s0, s14
 800327e:	eef0 0a67 	vmov.f32	s1, s15
 8003282:	f008 fbab 	bl	800b9dc <fmax>
 8003286:	ec53 2b10 	vmov	r2, r3, d0
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	f7fd fcab 	bl	8000be8 <__aeabi_d2f>
 8003292:	4603      	mov	r3, r0
 8003294:	4a89      	ldr	r2, [pc, #548]	@ (80034bc <calculateVel4+0x4f4>)
 8003296:	6013      	str	r3, [r2, #0]
    // Apply moving average filter for velocity
 //  vel4 = moving_average_filter4(new_vel4);

    // Update position based on velocity and elapsed time
    distance_traveled4 += vel4 * (delta_time4 / 1000.0); // Linear distance traveled in meters
 8003298:	4b89      	ldr	r3, [pc, #548]	@ (80034c0 <calculateVel4+0x4f8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f953 	bl	8000548 <__aeabi_f2d>
 80032a2:	4604      	mov	r4, r0
 80032a4:	460d      	mov	r5, r1
 80032a6:	4b85      	ldr	r3, [pc, #532]	@ (80034bc <calculateVel4+0x4f4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f94c 	bl	8000548 <__aeabi_f2d>
 80032b0:	4680      	mov	r8, r0
 80032b2:	4689      	mov	r9, r1
 80032b4:	6938      	ldr	r0, [r7, #16]
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	4b81      	ldr	r3, [pc, #516]	@ (80034c4 <calculateVel4+0x4fc>)
 80032c0:	f7fd fac4 	bl	800084c <__aeabi_ddiv>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4640      	mov	r0, r8
 80032ca:	4649      	mov	r1, r9
 80032cc:	f7fd f994 	bl	80005f8 <__aeabi_dmul>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4620      	mov	r0, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	f7fc ffd8 	bl	800028c <__adddf3>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	f7fd fc80 	bl	8000be8 <__aeabi_d2f>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a75      	ldr	r2, [pc, #468]	@ (80034c0 <calculateVel4+0x4f8>)
 80032ec:	6013      	str	r3, [r2, #0]
    angular_position_rad4 += distance_traveled4 / (dia4 / 2.0); // Update angular position in radians
 80032ee:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <calculateVel4+0x500>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd f928 	bl	8000548 <__aeabi_f2d>
 80032f8:	4604      	mov	r4, r0
 80032fa:	460d      	mov	r5, r1
 80032fc:	4b70      	ldr	r3, [pc, #448]	@ (80034c0 <calculateVel4+0x4f8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fd f921 	bl	8000548 <__aeabi_f2d>
 8003306:	4680      	mov	r8, r0
 8003308:	4689      	mov	r9, r1
 800330a:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <calculateVel4+0x4f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f91a 	bl	8000548 <__aeabi_f2d>
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800331c:	f7fd fa96 	bl	800084c <__aeabi_ddiv>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4640      	mov	r0, r8
 8003326:	4649      	mov	r1, r9
 8003328:	f7fd fa90 	bl	800084c <__aeabi_ddiv>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	f7fc ffaa 	bl	800028c <__adddf3>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f7fd fc52 	bl	8000be8 <__aeabi_d2f>
 8003344:	4603      	mov	r3, r0
 8003346:	4a60      	ldr	r2, [pc, #384]	@ (80034c8 <calculateVel4+0x500>)
 8003348:	6013      	str	r3, [r2, #0]
    angular_position_deg4 = angular_position_rad4 * (180.0 / M_PI); // Convert to degrees
 800334a:	4b5f      	ldr	r3, [pc, #380]	@ (80034c8 <calculateVel4+0x500>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8fa 	bl	8000548 <__aeabi_f2d>
 8003354:	a354      	add	r3, pc, #336	@ (adr r3, 80034a8 <calculateVel4+0x4e0>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd f94d 	bl	80005f8 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	f7fd fc3f 	bl	8000be8 <__aeabi_d2f>
 800336a:	4603      	mov	r3, r0
 800336c:	4a57      	ldr	r2, [pc, #348]	@ (80034cc <calculateVel4+0x504>)
 800336e:	6013      	str	r3, [r2, #0]

    // Kalman filter update
    estimate4 = estimate4; // Predicted state (previous estimate)
 8003370:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <calculateVel4+0x508>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <calculateVel4+0x508>)
 8003376:	6013      	str	r3, [r2, #0]
    error_covariance4 += process_noise4; // Update error covariance
 8003378:	4b56      	ldr	r3, [pc, #344]	@ (80034d4 <calculateVel4+0x50c>)
 800337a:	ed93 7a00 	vldr	s14, [r3]
 800337e:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <calculateVel4+0x510>)
 8003380:	edd3 7a00 	vldr	s15, [r3]
 8003384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003388:	4b52      	ldr	r3, [pc, #328]	@ (80034d4 <calculateVel4+0x50c>)
 800338a:	edc3 7a00 	vstr	s15, [r3]

    // Measurement update
    kalman_gain4 = error_covariance4 / (error_covariance4 + measurement_noise4); // Calculate Kalman gain
 800338e:	4b51      	ldr	r3, [pc, #324]	@ (80034d4 <calculateVel4+0x50c>)
 8003390:	edd3 6a00 	vldr	s13, [r3]
 8003394:	4b4f      	ldr	r3, [pc, #316]	@ (80034d4 <calculateVel4+0x50c>)
 8003396:	ed93 7a00 	vldr	s14, [r3]
 800339a:	4b50      	ldr	r3, [pc, #320]	@ (80034dc <calculateVel4+0x514>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a8:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <calculateVel4+0x518>)
 80033aa:	edc3 7a00 	vstr	s15, [r3]
    estimate4 += kalman_gain4 * (vel4 - estimate4); // Update estimate with measurement
 80033ae:	4b43      	ldr	r3, [pc, #268]	@ (80034bc <calculateVel4+0x4f4>)
 80033b0:	ed93 7a00 	vldr	s14, [r3]
 80033b4:	4b46      	ldr	r3, [pc, #280]	@ (80034d0 <calculateVel4+0x508>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033be:	4b48      	ldr	r3, [pc, #288]	@ (80034e0 <calculateVel4+0x518>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c8:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <calculateVel4+0x508>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d2:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <calculateVel4+0x508>)
 80033d4:	edc3 7a00 	vstr	s15, [r3]
    error_covariance4 = (1 - kalman_gain4) * error_covariance4; // Update error covariance
 80033d8:	4b41      	ldr	r3, [pc, #260]	@ (80034e0 <calculateVel4+0x518>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e6:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <calculateVel4+0x50c>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f0:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <calculateVel4+0x50c>)
 80033f2:	edc3 7a00 	vstr	s15, [r3]
    // Calculate control output using PID controller
    control_output4 = PID_Controller4(Kp4, Ki4, Kd4, &integral1_4, last_error4, velTag4, vel4);
 80033f6:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <calculateVel4+0x51c>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	4b3a      	ldr	r3, [pc, #232]	@ (80034e8 <calculateVel4+0x520>)
 80033fe:	ed93 7a00 	vldr	s14, [r3]
 8003402:	4b3a      	ldr	r3, [pc, #232]	@ (80034ec <calculateVel4+0x524>)
 8003404:	edd3 6a00 	vldr	s13, [r3]
 8003408:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <calculateVel4+0x528>)
 800340a:	ed93 6a00 	vldr	s12, [r3]
 800340e:	4b2b      	ldr	r3, [pc, #172]	@ (80034bc <calculateVel4+0x4f4>)
 8003410:	edd3 5a00 	vldr	s11, [r3]
 8003414:	eef0 2a65 	vmov.f32	s5, s11
 8003418:	ed97 2a01 	vldr	s4, [r7, #4]
 800341c:	eef0 1a46 	vmov.f32	s3, s12
 8003420:	4834      	ldr	r0, [pc, #208]	@ (80034f4 <calculateVel4+0x52c>)
 8003422:	eeb0 1a66 	vmov.f32	s2, s13
 8003426:	eef0 0a47 	vmov.f32	s1, s14
 800342a:	eeb0 0a67 	vmov.f32	s0, s15
 800342e:	f7ff fd59 	bl	8002ee4 <PID_Controller4>
 8003432:	eef0 7a40 	vmov.f32	s15, s0
 8003436:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <calculateVel4+0x530>)
 8003438:	edc3 7a00 	vstr	s15, [r3]

    // Implement ramping to control output
    if (fabs(control_output4 - last_control_output4) > RAMP_RATE) {
 800343c:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <calculateVel4+0x530>)
 800343e:	ed93 7a00 	vldr	s14, [r3]
 8003442:	4b2e      	ldr	r3, [pc, #184]	@ (80034fc <calculateVel4+0x534>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800344c:	eef0 7ae7 	vabs.f32	s15, s15
 8003450:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	dd60      	ble.n	8003520 <calculateVel4+0x558>
        control_output4 = last_control_output4 + (control_output4 > last_control_output4 ? RAMP_RATE : -RAMP_RATE);
 800345e:	4b27      	ldr	r3, [pc, #156]	@ (80034fc <calculateVel4+0x534>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f870 	bl	8000548 <__aeabi_f2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4922      	ldr	r1, [pc, #136]	@ (80034f8 <calculateVel4+0x530>)
 800346e:	ed91 7a00 	vldr	s14, [r1]
 8003472:	4922      	ldr	r1, [pc, #136]	@ (80034fc <calculateVel4+0x534>)
 8003474:	edd1 7a00 	vldr	s15, [r1]
 8003478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	dd40      	ble.n	8003504 <calculateVel4+0x53c>
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	491e      	ldr	r1, [pc, #120]	@ (8003500 <calculateVel4+0x538>)
 8003488:	e03f      	b.n	800350a <calculateVel4+0x542>
 800348a:	bf00      	nop
 800348c:	f3af 8000 	nop.w
 8003490:	54442d18 	.word	0x54442d18
 8003494:	400921fb 	.word	0x400921fb
 8003498:	00000000 	.word	0x00000000
 800349c:	3ff00000 	.word	0x3ff00000
 80034a0:	00000000 	.word	0x00000000
 80034a4:	bff00000 	.word	0xbff00000
 80034a8:	1a63c1f8 	.word	0x1a63c1f8
 80034ac:	404ca5dc 	.word	0x404ca5dc
 80034b0:	20000380 	.word	0x20000380
 80034b4:	404e0000 	.word	0x404e0000
 80034b8:	20000060 	.word	0x20000060
 80034bc:	20000388 	.word	0x20000388
 80034c0:	200003d8 	.word	0x200003d8
 80034c4:	408f4000 	.word	0x408f4000
 80034c8:	200003a8 	.word	0x200003a8
 80034cc:	200003ac 	.word	0x200003ac
 80034d0:	200003a0 	.word	0x200003a0
 80034d4:	20000074 	.word	0x20000074
 80034d8:	20000078 	.word	0x20000078
 80034dc:	2000007c 	.word	0x2000007c
 80034e0:	20000070 	.word	0x20000070
 80034e4:	20000064 	.word	0x20000064
 80034e8:	20000068 	.word	0x20000068
 80034ec:	2000006c 	.word	0x2000006c
 80034f0:	20000394 	.word	0x20000394
 80034f4:	20000390 	.word	0x20000390
 80034f8:	2000038c 	.word	0x2000038c
 80034fc:	20000398 	.word	0x20000398
 8003500:	40140000 	.word	0x40140000
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	4965      	ldr	r1, [pc, #404]	@ (80036a0 <calculateVel4+0x6d8>)
 800350a:	f7fc febf 	bl	800028c <__adddf3>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f7fd fb67 	bl	8000be8 <__aeabi_d2f>
 800351a:	4603      	mov	r3, r0
 800351c:	4a61      	ldr	r2, [pc, #388]	@ (80036a4 <calculateVel4+0x6dc>)
 800351e:	6013      	str	r3, [r2, #0]
    }

    // Implement hysteresis to prevent rapid switching
    if ((last_control_output4 > 0 && control_output4 < -HYSTERESIS) || (last_control_output4 < 0 && control_output4 > HYSTERESIS)) {
 8003520:	4b61      	ldr	r3, [pc, #388]	@ (80036a8 <calculateVel4+0x6e0>)
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	dd0c      	ble.n	800354a <calculateVel4+0x582>
 8003530:	4b5c      	ldr	r3, [pc, #368]	@ (80036a4 <calculateVel4+0x6dc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f807 	bl	8000548 <__aeabi_f2d>
 800353a:	a351      	add	r3, pc, #324	@ (adr r3, 8003680 <calculateVel4+0x6b8>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fd facc 	bl	8000adc <__aeabi_dcmplt>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d114      	bne.n	8003574 <calculateVel4+0x5ac>
 800354a:	4b57      	ldr	r3, [pc, #348]	@ (80036a8 <calculateVel4+0x6e0>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	d510      	bpl.n	800357c <calculateVel4+0x5b4>
 800355a:	4b52      	ldr	r3, [pc, #328]	@ (80036a4 <calculateVel4+0x6dc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fc fff2 	bl	8000548 <__aeabi_f2d>
 8003564:	a348      	add	r3, pc, #288	@ (adr r3, 8003688 <calculateVel4+0x6c0>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fd fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <calculateVel4+0x5b4>
        control_output4 = last_control_output4; // Maintain last control output if within hysteresis
 8003574:	4b4c      	ldr	r3, [pc, #304]	@ (80036a8 <calculateVel4+0x6e0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a4a      	ldr	r2, [pc, #296]	@ (80036a4 <calculateVel4+0x6dc>)
 800357a:	6013      	str	r3, [r2, #0]
    }

    realVel4 = vel4 / 2.0; // Scale factor
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <calculateVel4+0x6e4>)
 800357e:	ed93 7a00 	vldr	s14, [r3]
 8003582:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358a:	4b49      	ldr	r3, [pc, #292]	@ (80036b0 <calculateVel4+0x6e8>)
 800358c:	edc3 7a00 	vstr	s15, [r3]
    realRPM4 = rpm4 / 2.0;
 8003590:	4b48      	ldr	r3, [pc, #288]	@ (80036b4 <calculateVel4+0x6ec>)
 8003592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800359e:	f7fd f955 	bl	800084c <__aeabi_ddiv>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fb1d 	bl	8000be8 <__aeabi_d2f>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a41      	ldr	r2, [pc, #260]	@ (80036b8 <calculateVel4+0x6f0>)
 80035b2:	6013      	str	r3, [r2, #0]
    // Limit control_output4 to the range [-0.27, 0.27]
       control_output4 = fmax(-0.27, fmin(0.27, control_output4));
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <calculateVel4+0x6dc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fc ffc5 	bl	8000548 <__aeabi_f2d>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8003690 <calculateVel4+0x6c8>
 80035c6:	ec43 2b10 	vmov	d0, r2, r3
 80035ca:	f008 fa31 	bl	800ba30 <fmin>
 80035ce:	eeb0 7a40 	vmov.f32	s14, s0
 80035d2:	eef0 7a60 	vmov.f32	s15, s1
 80035d6:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8003698 <calculateVel4+0x6d0>
 80035da:	eeb0 0a47 	vmov.f32	s0, s14
 80035de:	eef0 0a67 	vmov.f32	s1, s15
 80035e2:	f008 f9fb 	bl	800b9dc <fmax>
 80035e6:	ec53 2b10 	vmov	r2, r3, d0
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fafb 	bl	8000be8 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a2b      	ldr	r2, [pc, #172]	@ (80036a4 <calculateVel4+0x6dc>)
 80035f6:	6013      	str	r3, [r2, #0]

    // Set the PWM duty cycle based on the sign of desired_velocity
    if (velTag4 > 0) {
 80035f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003604:	dd14      	ble.n	8003630 <calculateVel4+0x668>
        // Positive velocity
    	 __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, calculate_pwm4(control_output4));
 8003606:	4b27      	ldr	r3, [pc, #156]	@ (80036a4 <calculateVel4+0x6dc>)
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	eeb0 0a67 	vmov.f32	s0, s15
 8003610:	f7ff fc2e 	bl	8002e70 <calculate_pwm4>
 8003614:	eef0 7a40 	vmov.f32	s15, s0
 8003618:	4b28      	ldr	r3, [pc, #160]	@ (80036bc <calculateVel4+0x6f4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003620:	ee17 2a90 	vmov	r2, s15
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34
    	        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8003626:	4b25      	ldr	r3, [pc, #148]	@ (80036bc <calculateVel4+0x6f4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38
 800362e:	e01a      	b.n	8003666 <calculateVel4+0x69e>

    } else if (velTag4 < 0) {
 8003630:	edd7 7a01 	vldr	s15, [r7, #4]
 8003634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363c:	d513      	bpl.n	8003666 <calculateVel4+0x69e>
        // Negative velocity
    	  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 800363e:	4b1f      	ldr	r3, [pc, #124]	@ (80036bc <calculateVel4+0x6f4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	635a      	str	r2, [r3, #52]	@ 0x34
    	        __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, calculate_pwm4(control_output4));
 8003646:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <calculateVel4+0x6dc>)
 8003648:	edd3 7a00 	vldr	s15, [r3]
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	f7ff fc0e 	bl	8002e70 <calculate_pwm4>
 8003654:	eef0 7a40 	vmov.f32	s15, s0
 8003658:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <calculateVel4+0x6f4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003660:	ee17 2a90 	vmov	r2, s15
 8003664:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Update last time and last control output
    last_time4 = current_time4;
 8003666:	4a16      	ldr	r2, [pc, #88]	@ (80036c0 <calculateVel4+0x6f8>)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6013      	str	r3, [r2, #0]
    last_control_output4 = control_output4;
 800366c:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <calculateVel4+0x6dc>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0d      	ldr	r2, [pc, #52]	@ (80036a8 <calculateVel4+0x6e0>)
 8003672:	6013      	str	r3, [r2, #0]
}
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800367c:	f3af 8000 	nop.w
 8003680:	9999999a 	.word	0x9999999a
 8003684:	bfa99999 	.word	0xbfa99999
 8003688:	9999999a 	.word	0x9999999a
 800368c:	3fa99999 	.word	0x3fa99999
 8003690:	147ae148 	.word	0x147ae148
 8003694:	3fd147ae 	.word	0x3fd147ae
 8003698:	147ae148 	.word	0x147ae148
 800369c:	bfd147ae 	.word	0xbfd147ae
 80036a0:	c0140000 	.word	0xc0140000
 80036a4:	2000038c 	.word	0x2000038c
 80036a8:	20000398 	.word	0x20000398
 80036ac:	20000388 	.word	0x20000388
 80036b0:	200003b0 	.word	0x200003b0
 80036b4:	20000380 	.word	0x20000380
 80036b8:	200003b4 	.word	0x200003b4
 80036bc:	2000058c 	.word	0x2000058c
 80036c0:	200003a4 	.word	0x200003a4

080036c4 <motor>:
void motor(void){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
		ReadFourFloats(&value1, &value2, &value3, &value4);
 80036c8:	4b3c      	ldr	r3, [pc, #240]	@ (80037bc <motor+0xf8>)
 80036ca:	4a3d      	ldr	r2, [pc, #244]	@ (80037c0 <motor+0xfc>)
 80036cc:	493d      	ldr	r1, [pc, #244]	@ (80037c4 <motor+0x100>)
 80036ce:	483e      	ldr	r0, [pc, #248]	@ (80037c8 <motor+0x104>)
 80036d0:	f7fd fd68 	bl	80011a4 <ReadFourFloats>


	  HAL_Delay(1);
 80036d4:	2001      	movs	r0, #1
 80036d6:	f001 f989 	bl	80049ec <HAL_Delay>

	  time = HAL_GetTick();
 80036da:	f001 f97b 	bl	80049d4 <HAL_GetTick>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a3a      	ldr	r2, [pc, #232]	@ (80037cc <motor+0x108>)
 80036e2:	6013      	str	r3, [r2, #0]
	  calculateVel1(value1, time);
 80036e4:	4b38      	ldr	r3, [pc, #224]	@ (80037c8 <motor+0x104>)
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	4b38      	ldr	r3, [pc, #224]	@ (80037cc <motor+0x108>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	ee07 3a10 	vmov	s14, r3
 80036f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80036f6:	eef0 0a47 	vmov.f32	s1, s14
 80036fa:	eeb0 0a67 	vmov.f32	s0, s15
 80036fe:	f7fd ff1f 	bl	8001540 <calculateVel1>
	  calculateVel2(value2, time);
 8003702:	4b30      	ldr	r3, [pc, #192]	@ (80037c4 <motor+0x100>)
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	4b30      	ldr	r3, [pc, #192]	@ (80037cc <motor+0x108>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	ee07 3a10 	vmov	s14, r3
 8003710:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003714:	eef0 0a47 	vmov.f32	s1, s14
 8003718:	eeb0 0a67 	vmov.f32	s0, s15
 800371c:	f7fe fb7c 	bl	8001e18 <calculateVel2>
	  calculateVel3(value3, time);
 8003720:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <motor+0xfc>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <motor+0x108>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	ee07 3a10 	vmov	s14, r3
 800372e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003732:	eef0 0a47 	vmov.f32	s1, s14
 8003736:	eeb0 0a67 	vmov.f32	s0, s15
 800373a:	f7fe ffd9 	bl	80026f0 <calculateVel3>
	  calculateVel4(value4, time);
 800373e:	4b1f      	ldr	r3, [pc, #124]	@ (80037bc <motor+0xf8>)
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <motor+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	ee07 3a10 	vmov	s14, r3
 800374c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003750:	eef0 0a47 	vmov.f32	s1, s14
 8003754:	eeb0 0a67 	vmov.f32	s0, s15
 8003758:	f7ff fc36 	bl	8002fc8 <calculateVel4>
	 	  calculateVel2(0.54, time);
	 	  calculateVel3(0.54, time);
	 	  calculateVel4(0.54, time);*/

	    // Print the final values
	  HAL_Delay(100);
 800375c:	2064      	movs	r0, #100	@ 0x64
 800375e:	f001 f945 	bl	80049ec <HAL_Delay>
  sendJointState(angular_position_rad1, angular_position_rad2, angular_position_rad3, angular_position_rad4,
 8003762:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <motor+0x10c>)
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <motor+0x110>)
 800376a:	ed93 7a00 	vldr	s14, [r3]
 800376e:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <motor+0x114>)
 8003770:	edd3 6a00 	vldr	s13, [r3]
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <motor+0x118>)
 8003776:	ed93 6a00 	vldr	s12, [r3]
 800377a:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <motor+0x11c>)
 800377c:	edd3 5a00 	vldr	s11, [r3]
 8003780:	4b18      	ldr	r3, [pc, #96]	@ (80037e4 <motor+0x120>)
 8003782:	ed93 5a00 	vldr	s10, [r3]
 8003786:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <motor+0x124>)
 8003788:	edd3 4a00 	vldr	s9, [r3]
 800378c:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <motor+0x128>)
 800378e:	ed93 4a00 	vldr	s8, [r3]
 8003792:	eef0 3a44 	vmov.f32	s7, s8
 8003796:	eeb0 3a64 	vmov.f32	s6, s9
 800379a:	eef0 2a45 	vmov.f32	s5, s10
 800379e:	eeb0 2a65 	vmov.f32	s4, s11
 80037a2:	eef0 1a46 	vmov.f32	s3, s12
 80037a6:	eeb0 1a66 	vmov.f32	s2, s13
 80037aa:	eef0 0a47 	vmov.f32	s1, s14
 80037ae:	eeb0 0a67 	vmov.f32	s0, s15
 80037b2:	f7fd fc17 	bl	8000fe4 <sendJointState>
			 realVel1,  realVel2,  realVel3, realVel4);

}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200002a0 	.word	0x200002a0
 80037c0:	2000029c 	.word	0x2000029c
 80037c4:	20000298 	.word	0x20000298
 80037c8:	20000294 	.word	0x20000294
 80037cc:	200002b4 	.word	0x200002b4
 80037d0:	200002e8 	.word	0x200002e8
 80037d4:	20000328 	.word	0x20000328
 80037d8:	20000368 	.word	0x20000368
 80037dc:	200003a8 	.word	0x200003a8
 80037e0:	200002f0 	.word	0x200002f0
 80037e4:	20000330 	.word	0x20000330
 80037e8:	20000370 	.word	0x20000370
 80037ec:	200003b0 	.word	0x200003b0

080037f0 <Motor_Init>:

#define MAX_PWM 1000 // Maximum PWM value

#define k 0.1 // Motor characteristic constant (RPS per PWM)
// MOTOR
void Motor_Init(void) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // Init PWM1 -> RPWM
 80037f4:	2108      	movs	r1, #8
 80037f6:	4810      	ldr	r0, [pc, #64]	@ (8003838 <Motor_Init+0x48>)
 80037f8:	f002 f89e 	bl	8005938 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // Init PWM2 -> LPWM
 80037fc:	210c      	movs	r1, #12
 80037fe:	480e      	ldr	r0, [pc, #56]	@ (8003838 <Motor_Init+0x48>)
 8003800:	f002 f89a 	bl	8005938 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Init PWM3 -> RPWM
 8003804:	2108      	movs	r1, #8
 8003806:	480d      	ldr	r0, [pc, #52]	@ (800383c <Motor_Init+0x4c>)
 8003808:	f002 f896 	bl	8005938 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Init PWM4 -> LPWM
 800380c:	210c      	movs	r1, #12
 800380e:	480b      	ldr	r0, [pc, #44]	@ (800383c <Motor_Init+0x4c>)
 8003810:	f002 f892 	bl	8005938 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 8003814:	2100      	movs	r1, #0
 8003816:	480a      	ldr	r0, [pc, #40]	@ (8003840 <Motor_Init+0x50>)
 8003818:	f002 f88e 	bl	8005938 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 800381c:	2104      	movs	r1, #4
 800381e:	4808      	ldr	r0, [pc, #32]	@ (8003840 <Motor_Init+0x50>)
 8003820:	f002 f88a 	bl	8005938 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 8003824:	2100      	movs	r1, #0
 8003826:	4807      	ldr	r0, [pc, #28]	@ (8003844 <Motor_Init+0x54>)
 8003828:	f002 f886 	bl	8005938 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 800382c:	2104      	movs	r1, #4
 800382e:	4805      	ldr	r0, [pc, #20]	@ (8003844 <Motor_Init+0x54>)
 8003830:	f002 f882 	bl	8005938 <HAL_TIM_PWM_Start>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200004b4 	.word	0x200004b4
 800383c:	20000424 	.word	0x20000424
 8003840:	2000058c 	.word	0x2000058c
 8003844:	200005d4 	.word	0x200005d4

08003848 <Encoder_Init>:

}

// ENCODER

void Encoder_Init(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Init Timer 1 -> mode Encoder
 800384c:	213c      	movs	r1, #60	@ 0x3c
 800384e:	4808      	ldr	r0, [pc, #32]	@ (8003870 <Encoder_Init+0x28>)
 8003850:	f002 f9e0 	bl	8005c14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Init Timer 3 -> mode Encoder
 8003854:	213c      	movs	r1, #60	@ 0x3c
 8003856:	4807      	ldr	r0, [pc, #28]	@ (8003874 <Encoder_Init+0x2c>)
 8003858:	f002 f9dc 	bl	8005c14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Init Timer 5 -> mode Encoder
 800385c:	213c      	movs	r1, #60	@ 0x3c
 800385e:	4806      	ldr	r0, [pc, #24]	@ (8003878 <Encoder_Init+0x30>)
 8003860:	f002 f9d8 	bl	8005c14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL); // Init Timer 8 -> mode Encoder
 8003864:	213c      	movs	r1, #60	@ 0x3c
 8003866:	4805      	ldr	r0, [pc, #20]	@ (800387c <Encoder_Init+0x34>)
 8003868:	f002 f9d4 	bl	8005c14 <HAL_TIM_Encoder_Start>
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}
 8003870:	200003dc 	.word	0x200003dc
 8003874:	2000046c 	.word	0x2000046c
 8003878:	200004fc 	.word	0x200004fc
 800387c:	20000544 	.word	0x20000544

08003880 <Reset_Encoder1>:
int16_t Read_Encoder1(void) {
	return __HAL_TIM_GET_COUNTER(&htim1);
}
void Reset_Encoder1(void) {
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <Reset_Encoder1+0x18>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2200      	movs	r2, #0
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	200003dc 	.word	0x200003dc

0800389c <Reset_Encoder2>:
int16_t Read_Encoder2(void) {
	return __HAL_TIM_GET_COUNTER(&htim3);
}
void Reset_Encoder2(void) {
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80038a0:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <Reset_Encoder2+0x18>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2200      	movs	r2, #0
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000046c 	.word	0x2000046c

080038b8 <Reset_Encoder3>:
int16_t Read_Encoder3(void) {
	return __HAL_TIM_GET_COUNTER(&htim5);
}
void Reset_Encoder3(void) {
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <Reset_Encoder3+0x18>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	200004fc 	.word	0x200004fc

080038d4 <Reset_Encoder4>:
int16_t Read_Encoder4(void) {
	return __HAL_TIM_GET_COUNTER(&htim8);
}
void Reset_Encoder4(void) {
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <Reset_Encoder4+0x18>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000544 	.word	0x20000544

080038f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80038f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80038fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d013      	beq.n	8003930 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003908:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800390c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003910:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003918:	e000      	b.n	800391c <ITM_SendChar+0x2c>
    {
      __NOP();
 800391a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800391c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f9      	beq.n	800391a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003926:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003930:	687b      	ldr	r3, [r7, #4]
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003942:	f000 ffe1 	bl	8004908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003946:	f000 f823 	bl	8003990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800394a:	f000 fbe9 	bl	8004120 <MX_GPIO_Init>
  MX_TIM1_Init();
 800394e:	f000 f887 	bl	8003a60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003952:	f000 f8dd 	bl	8003b10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003956:	f000 f95b 	bl	8003c10 <MX_TIM3_Init>
  MX_TIM5_Init();
 800395a:	f000 fa2f 	bl	8003dbc <MX_TIM5_Init>
  MX_TIM8_Init();
 800395e:	f000 fa81 	bl	8003e64 <MX_TIM8_Init>
  MX_TIM9_Init();
 8003962:	f000 fad7 	bl	8003f14 <MX_TIM9_Init>
  MX_TIM12_Init();
 8003966:	f000 fb43 	bl	8003ff0 <MX_TIM12_Init>
  MX_TIM4_Init();
 800396a:	f000 f9a5 	bl	8003cb8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800396e:	f000 fbad 	bl	80040cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init();  // Khởi động encoder
 8003972:	f7ff ff69 	bl	8003848 <Encoder_Init>
	Motor_Init();    // Khởi động Motor
 8003976:	f7ff ff3b 	bl	80037f0 <Motor_Init>
	Reset_Encoder1();
 800397a:	f7ff ff81 	bl	8003880 <Reset_Encoder1>
	Reset_Encoder2();
 800397e:	f7ff ff8d 	bl	800389c <Reset_Encoder2>
	Reset_Encoder3();
 8003982:	f7ff ff99 	bl	80038b8 <Reset_Encoder3>
	Reset_Encoder4();
 8003986:	f7ff ffa5 	bl	80038d4 <Reset_Encoder4>

	while (1) {
    /* USER CODE END WHILE */
	//	readEncoder();

	motor();
 800398a:	f7ff fe9b 	bl	80036c4 <motor>
 800398e:	e7fc      	b.n	800398a <main+0x4c>

08003990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b094      	sub	sp, #80	@ 0x50
 8003994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003996:	f107 0320 	add.w	r3, r7, #32
 800399a:	2230      	movs	r2, #48	@ 0x30
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f005 fa6e 	bl	8008e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	4b27      	ldr	r3, [pc, #156]	@ (8003a58 <SystemClock_Config+0xc8>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	4a26      	ldr	r2, [pc, #152]	@ (8003a58 <SystemClock_Config+0xc8>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c4:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <SystemClock_Config+0xc8>)
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d0:	2300      	movs	r3, #0
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	4b21      	ldr	r3, [pc, #132]	@ (8003a5c <SystemClock_Config+0xcc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a20      	ldr	r2, [pc, #128]	@ (8003a5c <SystemClock_Config+0xcc>)
 80039da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <SystemClock_Config+0xcc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ec:	2302      	movs	r3, #2
 80039ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039f0:	2301      	movs	r3, #1
 80039f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039f4:	2310      	movs	r3, #16
 80039f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039f8:	2302      	movs	r3, #2
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039fc:	2300      	movs	r3, #0
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a00:	2308      	movs	r3, #8
 8003a02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003a04:	2350      	movs	r3, #80	@ 0x50
 8003a06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a10:	f107 0320 	add.w	r3, r7, #32
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fa8f 	bl	8004f38 <HAL_RCC_OscConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a20:	f000 fbec 	bl	80041fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a24:	230f      	movs	r3, #15
 8003a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fcf1 	bl	8005428 <HAL_RCC_ClockConfig>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003a4c:	f000 fbd6 	bl	80041fc <Error_Handler>
  }
}
 8003a50:	bf00      	nop
 8003a52:	3750      	adds	r7, #80	@ 0x50
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000

08003a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	@ 0x30
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	2224      	movs	r2, #36	@ 0x24
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f005 fa06 	bl	8008e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a7c:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003a7e:	4a23      	ldr	r2, [pc, #140]	@ (8003b0c <MX_TIM1_Init+0xac>)
 8003a80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003a82:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003a84:	2263      	movs	r2, #99	@ 0x63
 8003a86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a88:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a96:	4b1c      	ldr	r3, [pc, #112]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa2:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	480d      	ldr	r0, [pc, #52]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003ad4:	f001 fff8 	bl	8005ac8 <HAL_TIM_Encoder_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003ade:	f000 fb8d 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4806      	ldr	r0, [pc, #24]	@ (8003b08 <MX_TIM1_Init+0xa8>)
 8003af0:	f002 fdc4 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003afa:	f000 fb7f 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003afe:	bf00      	nop
 8003b00:	3730      	adds	r7, #48	@ 0x30
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200003dc 	.word	0x200003dc
 8003b0c:	40010000 	.word	0x40010000

08003b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	@ 0x38
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	60da      	str	r2, [r3, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
 8003b3c:	615a      	str	r2, [r3, #20]
 8003b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b40:	4b32      	ldr	r3, [pc, #200]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8003b48:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b4a:	224f      	movs	r2, #79	@ 0x4f
 8003b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003b54:	4b2d      	ldr	r3, [pc, #180]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b62:	4b2a      	ldr	r3, [pc, #168]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b68:	4828      	ldr	r0, [pc, #160]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b6a:	f001 fe3d 	bl	80057e8 <HAL_TIM_Base_Init>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003b74:	f000 fb42 	bl	80041fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b82:	4619      	mov	r1, r3
 8003b84:	4821      	ldr	r0, [pc, #132]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b86:	f002 f995 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003b90:	f000 fb34 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b94:	481d      	ldr	r0, [pc, #116]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003b96:	f001 fe76 	bl	8005886 <HAL_TIM_PWM_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003ba0:	f000 fb2c 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bac:	f107 0320 	add.w	r3, r7, #32
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4816      	ldr	r0, [pc, #88]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003bb4:	f002 fd62 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003bbe:	f000 fb1d 	bl	80041fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc2:	2360      	movs	r3, #96	@ 0x60
 8003bc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	480c      	ldr	r0, [pc, #48]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003bda:	f002 f8a9 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003be4:	f000 fb0a 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	220c      	movs	r2, #12
 8003bec:	4619      	mov	r1, r3
 8003bee:	4807      	ldr	r0, [pc, #28]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003bf0:	f002 f89e 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003bfa:	f000 faff 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003bfe:	4803      	ldr	r0, [pc, #12]	@ (8003c0c <MX_TIM2_Init+0xfc>)
 8003c00:	f000 fc74 	bl	80044ec <HAL_TIM_MspPostInit>

}
 8003c04:	bf00      	nop
 8003c06:	3738      	adds	r7, #56	@ 0x38
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000424 	.word	0x20000424

08003c10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	@ 0x30
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c16:	f107 030c 	add.w	r3, r7, #12
 8003c1a:	2224      	movs	r2, #36	@ 0x24
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f005 f92e 	bl	8008e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c2c:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c2e:	4a21      	ldr	r2, [pc, #132]	@ (8003cb4 <MX_TIM3_Init+0xa4>)
 8003c30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8003c32:	4b1f      	ldr	r3, [pc, #124]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c34:	224f      	movs	r2, #79	@ 0x4f
 8003c36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c38:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c46:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c52:	2303      	movs	r3, #3
 8003c54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c66:	2300      	movs	r3, #0
 8003c68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	480c      	ldr	r0, [pc, #48]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c7e:	f001 ff23 	bl	8005ac8 <HAL_TIM_Encoder_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003c88:	f000 fab8 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	4619      	mov	r1, r3
 8003c98:	4805      	ldr	r0, [pc, #20]	@ (8003cb0 <MX_TIM3_Init+0xa0>)
 8003c9a:	f002 fcef 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003ca4:	f000 faaa 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ca8:	bf00      	nop
 8003caa:	3730      	adds	r7, #48	@ 0x30
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	2000046c 	.word	0x2000046c
 8003cb4:	40000400 	.word	0x40000400

08003cb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08e      	sub	sp, #56	@ 0x38
 8003cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cbe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	605a      	str	r2, [r3, #4]
 8003cc8:	609a      	str	r2, [r3, #8]
 8003cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ccc:	f107 0320 	add.w	r3, r7, #32
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
 8003ce4:	615a      	str	r2, [r3, #20]
 8003ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ce8:	4b32      	ldr	r3, [pc, #200]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003cea:	4a33      	ldr	r2, [pc, #204]	@ (8003db8 <MX_TIM4_Init+0x100>)
 8003cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8003cee:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003cf0:	224f      	movs	r2, #79	@ 0x4f
 8003cf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003cfc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d02:	4b2c      	ldr	r3, [pc, #176]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d08:	4b2a      	ldr	r3, [pc, #168]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d0e:	4829      	ldr	r0, [pc, #164]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d10:	f001 fd6a 	bl	80057e8 <HAL_TIM_Base_Init>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003d1a:	f000 fa6f 	bl	80041fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4822      	ldr	r0, [pc, #136]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d2c:	f002 f8c2 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003d36:	f000 fa61 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d3a:	481e      	ldr	r0, [pc, #120]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d3c:	f001 fda3 	bl	8005886 <HAL_TIM_PWM_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003d46:	f000 fa59 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d52:	f107 0320 	add.w	r3, r7, #32
 8003d56:	4619      	mov	r1, r3
 8003d58:	4816      	ldr	r0, [pc, #88]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d5a:	f002 fc8f 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003d64:	f000 fa4a 	bl	80041fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d68:	2360      	movs	r3, #96	@ 0x60
 8003d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	480d      	ldr	r0, [pc, #52]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d80:	f001 ffd6 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003d8a:	f000 fa37 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	220c      	movs	r2, #12
 8003d92:	4619      	mov	r1, r3
 8003d94:	4807      	ldr	r0, [pc, #28]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003d96:	f001 ffcb 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003da0:	f000 fa2c 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003da4:	4803      	ldr	r0, [pc, #12]	@ (8003db4 <MX_TIM4_Init+0xfc>)
 8003da6:	f000 fba1 	bl	80044ec <HAL_TIM_MspPostInit>

}
 8003daa:	bf00      	nop
 8003dac:	3738      	adds	r7, #56	@ 0x38
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200004b4 	.word	0x200004b4
 8003db8:	40000800 	.word	0x40000800

08003dbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08c      	sub	sp, #48	@ 0x30
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	2224      	movs	r2, #36	@ 0x24
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f005 f858 	bl	8008e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003dd8:	4b20      	ldr	r3, [pc, #128]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003dda:	4a21      	ldr	r2, [pc, #132]	@ (8003e60 <MX_TIM5_Init+0xa4>)
 8003ddc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8003dde:	4b1f      	ldr	r3, [pc, #124]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003de0:	224f      	movs	r2, #79	@ 0x4f
 8003de2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003dea:	4b1c      	ldr	r3, [pc, #112]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003df0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df8:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e06:	2301      	movs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e12:	2300      	movs	r3, #0
 8003e14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e16:	2301      	movs	r3, #1
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003e22:	f107 030c 	add.w	r3, r7, #12
 8003e26:	4619      	mov	r1, r3
 8003e28:	480c      	ldr	r0, [pc, #48]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003e2a:	f001 fe4d 	bl	8005ac8 <HAL_TIM_Encoder_Init>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003e34:	f000 f9e2 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4805      	ldr	r0, [pc, #20]	@ (8003e5c <MX_TIM5_Init+0xa0>)
 8003e46:	f002 fc19 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003e50:	f000 f9d4 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e54:	bf00      	nop
 8003e56:	3730      	adds	r7, #48	@ 0x30
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200004fc 	.word	0x200004fc
 8003e60:	40000c00 	.word	0x40000c00

08003e64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	@ 0x30
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	2224      	movs	r2, #36	@ 0x24
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f005 f804 	bl	8008e80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e80:	4b22      	ldr	r3, [pc, #136]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003e82:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <MX_TIM8_Init+0xac>)
 8003e84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8003e86:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003e88:	224f      	movs	r2, #79	@ 0x4f
 8003e8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003e92:	4b1e      	ldr	r3, [pc, #120]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ea6:	4b19      	ldr	r3, [pc, #100]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003eac:	2303      	movs	r3, #3
 8003eae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	480d      	ldr	r0, [pc, #52]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003ed8:	f001 fdf6 	bl	8005ac8 <HAL_TIM_Encoder_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003ee2:	f000 f98b 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4806      	ldr	r0, [pc, #24]	@ (8003f0c <MX_TIM8_Init+0xa8>)
 8003ef4:	f002 fbc2 	bl	800667c <HAL_TIMEx_MasterConfigSynchronization>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003efe:	f000 f97d 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f02:	bf00      	nop
 8003f04:	3730      	adds	r7, #48	@ 0x30
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000544 	.word	0x20000544
 8003f10:	40010400 	.word	0x40010400

08003f14 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08c      	sub	sp, #48	@ 0x30
 8003f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1a:	f107 0320 	add.w	r3, r7, #32
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	611a      	str	r2, [r3, #16]
 8003f36:	615a      	str	r2, [r3, #20]
 8003f38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <MX_TIM9_Init+0xd8>)
 8003f3e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 80-1;
 8003f40:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f42:	224f      	movs	r2, #79	@ 0x4f
 8003f44:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f46:	4b28      	ldr	r3, [pc, #160]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003f4c:	4b26      	ldr	r3, [pc, #152]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f52:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f54:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	4b23      	ldr	r3, [pc, #140]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003f60:	4821      	ldr	r0, [pc, #132]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f62:	f001 fc41 	bl	80057e8 <HAL_TIM_Base_Init>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003f6c:	f000 f946 	bl	80041fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003f76:	f107 0320 	add.w	r3, r7, #32
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	481a      	ldr	r0, [pc, #104]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f7e:	f001 ff99 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003f88:	f000 f938 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003f8c:	4816      	ldr	r0, [pc, #88]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003f8e:	f001 fc7a 	bl	8005886 <HAL_TIM_PWM_Init>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003f98:	f000 f930 	bl	80041fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f9c:	2360      	movs	r3, #96	@ 0x60
 8003f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fac:	1d3b      	adds	r3, r7, #4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	480d      	ldr	r0, [pc, #52]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003fb4:	f001 febc 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003fbe:	f000 f91d 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4807      	ldr	r0, [pc, #28]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003fca:	f001 feb1 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003fd4:	f000 f912 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003fd8:	4803      	ldr	r0, [pc, #12]	@ (8003fe8 <MX_TIM9_Init+0xd4>)
 8003fda:	f000 fa87 	bl	80044ec <HAL_TIM_MspPostInit>

}
 8003fde:	bf00      	nop
 8003fe0:	3730      	adds	r7, #48	@ 0x30
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	2000058c 	.word	0x2000058c
 8003fec:	40014000 	.word	0x40014000

08003ff0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004004:	1d3b      	adds	r3, r7, #4
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	615a      	str	r2, [r3, #20]
 8004014:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004016:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 8004018:	4a2b      	ldr	r2, [pc, #172]	@ (80040c8 <MX_TIM12_Init+0xd8>)
 800401a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 800401c:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 800401e:	224f      	movs	r2, #79	@ 0x4f
 8004020:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004022:	4b28      	ldr	r3, [pc, #160]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8004028:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 800402a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800402e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004030:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004036:	4b23      	ldr	r3, [pc, #140]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 8004038:	2200      	movs	r2, #0
 800403a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800403c:	4821      	ldr	r0, [pc, #132]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 800403e:	f001 fbd3 	bl	80057e8 <HAL_TIM_Base_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8004048:	f000 f8d8 	bl	80041fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800404c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004050:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004052:	f107 0320 	add.w	r3, r7, #32
 8004056:	4619      	mov	r1, r3
 8004058:	481a      	ldr	r0, [pc, #104]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 800405a:	f001 ff2b 	bl	8005eb4 <HAL_TIM_ConfigClockSource>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004064:	f000 f8ca 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004068:	4816      	ldr	r0, [pc, #88]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 800406a:	f001 fc0c 	bl	8005886 <HAL_TIM_PWM_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8004074:	f000 f8c2 	bl	80041fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004078:	2360      	movs	r3, #96	@ 0x60
 800407a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	2200      	movs	r2, #0
 800408c:	4619      	mov	r1, r3
 800408e:	480d      	ldr	r0, [pc, #52]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 8004090:	f001 fe4e 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800409a:	f000 f8af 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	2204      	movs	r2, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4807      	ldr	r0, [pc, #28]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 80040a6:	f001 fe43 	bl	8005d30 <HAL_TIM_PWM_ConfigChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80040b0:	f000 f8a4 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80040b4:	4803      	ldr	r0, [pc, #12]	@ (80040c4 <MX_TIM12_Init+0xd4>)
 80040b6:	f000 fa19 	bl	80044ec <HAL_TIM_MspPostInit>

}
 80040ba:	bf00      	nop
 80040bc:	3730      	adds	r7, #48	@ 0x30
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200005d4 	.word	0x200005d4
 80040c8:	40001800 	.word	0x40001800

080040cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040d0:	4b11      	ldr	r3, [pc, #68]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040d2:	4a12      	ldr	r2, [pc, #72]	@ (800411c <MX_USART2_UART_Init+0x50>)
 80040d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040d6:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040f0:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040f2:	220c      	movs	r2, #12
 80040f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040f6:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004102:	4805      	ldr	r0, [pc, #20]	@ (8004118 <MX_USART2_UART_Init+0x4c>)
 8004104:	f002 fb36 	bl	8006774 <HAL_UART_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800410e:	f000 f875 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000061c 	.word	0x2000061c
 800411c:	40004400 	.word	0x40004400

08004120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	4a24      	ldr	r2, [pc, #144]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004130:	f043 0310 	orr.w	r3, r3, #16
 8004134:	6313      	str	r3, [r2, #48]	@ 0x30
 8004136:	4b22      	ldr	r3, [pc, #136]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	4a1d      	ldr	r2, [pc, #116]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6313      	str	r3, [r2, #48]	@ 0x30
 8004152:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	4a16      	ldr	r2, [pc, #88]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	6313      	str	r3, [r2, #48]	@ 0x30
 800416e:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	4a0f      	ldr	r2, [pc, #60]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 8004184:	f043 0308 	orr.w	r3, r3, #8
 8004188:	6313      	str	r3, [r2, #48]	@ 0x30
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
 800419a:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	4a08      	ldr	r2, [pc, #32]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <MX_GPIO_Init+0xa0>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800

080041c4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e009      	b.n	80041ea <_write+0x26>
		ITM_SendChar(*ptr++);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	60ba      	str	r2, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fb86 	bl	80038f0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	dbf1      	blt.n	80041d6 <_write+0x12>
	}
	return len;
 80041f2:	687b      	ldr	r3, [r7, #4]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004200:	b672      	cpsid	i
}
 8004202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <Error_Handler+0x8>

08004208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <HAL_MspInit+0x4c>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	4a0f      	ldr	r2, [pc, #60]	@ (8004254 <HAL_MspInit+0x4c>)
 8004218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800421c:	6453      	str	r3, [r2, #68]	@ 0x44
 800421e:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <HAL_MspInit+0x4c>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <HAL_MspInit+0x4c>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a08      	ldr	r2, [pc, #32]	@ (8004254 <HAL_MspInit+0x4c>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	@ 0x40
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <HAL_MspInit+0x4c>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800

08004258 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b090      	sub	sp, #64	@ 0x40
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a64      	ldr	r2, [pc, #400]	@ (8004408 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d12d      	bne.n	80042d6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427e:	4b63      	ldr	r3, [pc, #396]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004282:	4a62      	ldr	r2, [pc, #392]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6453      	str	r3, [r2, #68]	@ 0x44
 800428a:	4b60      	ldr	r3, [pc, #384]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
 800429a:	4b5c      	ldr	r3, [pc, #368]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	4a5b      	ldr	r2, [pc, #364]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042a0:	f043 0310 	orr.w	r3, r3, #16
 80042a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a6:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80042b2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b8:	2302      	movs	r3, #2
 80042ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042bc:	2301      	movs	r3, #1
 80042be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c0:	2300      	movs	r3, #0
 80042c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042c4:	2301      	movs	r3, #1
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042cc:	4619      	mov	r1, r3
 80042ce:	4850      	ldr	r0, [pc, #320]	@ (8004410 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80042d0:	f000 fc96 	bl	8004c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042d4:	e094      	b.n	8004400 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4e      	ldr	r2, [pc, #312]	@ (8004414 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d12c      	bne.n	800433a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
 80042e4:	4b49      	ldr	r3, [pc, #292]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	4a48      	ldr	r2, [pc, #288]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042ea:	f043 0302 	orr.w	r3, r3, #2
 80042ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f0:	4b46      	ldr	r3, [pc, #280]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	623b      	str	r3, [r7, #32]
 80042fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	4b42      	ldr	r3, [pc, #264]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004304:	4a41      	ldr	r2, [pc, #260]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	6313      	str	r3, [r2, #48]	@ 0x30
 800430c:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004318:	23c0      	movs	r3, #192	@ 0xc0
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431c:	2302      	movs	r3, #2
 800431e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004324:	2300      	movs	r3, #0
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004328:	2302      	movs	r3, #2
 800432a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004330:	4619      	mov	r1, r3
 8004332:	4839      	ldr	r0, [pc, #228]	@ (8004418 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004334:	f000 fc64 	bl	8004c00 <HAL_GPIO_Init>
}
 8004338:	e062      	b.n	8004400 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a37      	ldr	r2, [pc, #220]	@ (800441c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d12c      	bne.n	800439e <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	4b30      	ldr	r3, [pc, #192]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	4a2f      	ldr	r2, [pc, #188]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800434e:	f043 0308 	orr.w	r3, r3, #8
 8004352:	6413      	str	r3, [r2, #64]	@ 0x40
 8004354:	4b2d      	ldr	r3, [pc, #180]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	4b29      	ldr	r3, [pc, #164]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	4a28      	ldr	r2, [pc, #160]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004370:	4b26      	ldr	r3, [pc, #152]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800437c:	2303      	movs	r3, #3
 800437e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004388:	2300      	movs	r3, #0
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800438c:	2302      	movs	r3, #2
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004390:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004394:	4619      	mov	r1, r3
 8004396:	4820      	ldr	r0, [pc, #128]	@ (8004418 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004398:	f000 fc32 	bl	8004c00 <HAL_GPIO_Init>
}
 800439c:	e030      	b.n	8004400 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004420 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d12b      	bne.n	8004400 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	4b17      	ldr	r3, [pc, #92]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b0:	4a16      	ldr	r2, [pc, #88]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	4b10      	ldr	r3, [pc, #64]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	4a0f      	ldr	r2, [pc, #60]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d4:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043e0:	23c0      	movs	r3, #192	@ 0xc0
 80043e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	2302      	movs	r3, #2
 80043e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ec:	2300      	movs	r3, #0
 80043ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80043f0:	2303      	movs	r3, #3
 80043f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043f8:	4619      	mov	r1, r3
 80043fa:	480a      	ldr	r0, [pc, #40]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80043fc:	f000 fc00 	bl	8004c00 <HAL_GPIO_Init>
}
 8004400:	bf00      	nop
 8004402:	3740      	adds	r7, #64	@ 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40010000 	.word	0x40010000
 800440c:	40023800 	.word	0x40023800
 8004410:	40021000 	.word	0x40021000
 8004414:	40000400 	.word	0x40000400
 8004418:	40020000 	.word	0x40020000
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40010400 	.word	0x40010400
 8004424:	40020800 	.word	0x40020800

08004428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	4b27      	ldr	r3, [pc, #156]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	4a26      	ldr	r2, [pc, #152]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6413      	str	r3, [r2, #64]	@ 0x40
 800444a:	4b24      	ldr	r3, [pc, #144]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004456:	e03a      	b.n	80044ce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <HAL_TIM_Base_MspInit+0xb8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	4a1c      	ldr	r2, [pc, #112]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6413      	str	r3, [r2, #64]	@ 0x40
 8004472:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
}
 800447e:	e026      	b.n	80044ce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <HAL_TIM_Base_MspInit+0xbc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b13      	ldr	r3, [pc, #76]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	4a12      	ldr	r2, [pc, #72]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004498:	6453      	str	r3, [r2, #68]	@ 0x44
 800449a:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
}
 80044a6:	e012      	b.n	80044ce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0e      	ldr	r2, [pc, #56]	@ (80044e8 <HAL_TIM_Base_MspInit+0xc0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10d      	bne.n	80044ce <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 80044bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <HAL_TIM_Base_MspInit+0xb4>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40014000 	.word	0x40014000
 80044e8:	40001800 	.word	0x40001800

080044ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08c      	sub	sp, #48	@ 0x30
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f4:	f107 031c 	add.w	r3, r7, #28
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450c:	d11f      	bne.n	800454e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	4a46      	ldr	r2, [pc, #280]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	6313      	str	r3, [r2, #48]	@ 0x30
 800451e:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800452a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800452e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2302      	movs	r3, #2
 8004532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004538:	2300      	movs	r3, #0
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800453c:	2301      	movs	r3, #1
 800453e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004540:	f107 031c 	add.w	r3, r7, #28
 8004544:	4619      	mov	r1, r3
 8004546:	483b      	ldr	r0, [pc, #236]	@ (8004634 <HAL_TIM_MspPostInit+0x148>)
 8004548:	f000 fb5a 	bl	8004c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800454c:	e06c      	b.n	8004628 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a39      	ldr	r2, [pc, #228]	@ (8004638 <HAL_TIM_MspPostInit+0x14c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d11f      	bne.n	8004598 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	4b34      	ldr	r3, [pc, #208]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	4a33      	ldr	r2, [pc, #204]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 8004562:	f043 0308 	orr.w	r3, r3, #8
 8004566:	6313      	str	r3, [r2, #48]	@ 0x30
 8004568:	4b31      	ldr	r3, [pc, #196]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004574:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457a:	2302      	movs	r3, #2
 800457c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	2300      	movs	r3, #0
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004582:	2300      	movs	r3, #0
 8004584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004586:	2302      	movs	r3, #2
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800458a:	f107 031c 	add.w	r3, r7, #28
 800458e:	4619      	mov	r1, r3
 8004590:	482a      	ldr	r0, [pc, #168]	@ (800463c <HAL_TIM_MspPostInit+0x150>)
 8004592:	f000 fb35 	bl	8004c00 <HAL_GPIO_Init>
}
 8004596:	e047      	b.n	8004628 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a28      	ldr	r2, [pc, #160]	@ (8004640 <HAL_TIM_MspPostInit+0x154>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d11e      	bne.n	80045e0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	4b22      	ldr	r3, [pc, #136]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	4a21      	ldr	r2, [pc, #132]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 80045ac:	f043 0310 	orr.w	r3, r3, #16
 80045b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80045be:	2360      	movs	r3, #96	@ 0x60
 80045c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	2302      	movs	r3, #2
 80045c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80045ce:	2303      	movs	r3, #3
 80045d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045d2:	f107 031c 	add.w	r3, r7, #28
 80045d6:	4619      	mov	r1, r3
 80045d8:	481a      	ldr	r0, [pc, #104]	@ (8004644 <HAL_TIM_MspPostInit+0x158>)
 80045da:	f000 fb11 	bl	8004c00 <HAL_GPIO_Init>
}
 80045de:	e023      	b.n	8004628 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <HAL_TIM_MspPostInit+0x15c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d11e      	bne.n	8004628 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b10      	ldr	r3, [pc, #64]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <HAL_TIM_MspPostInit+0x144>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004606:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800460a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004610:	2301      	movs	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004614:	2300      	movs	r3, #0
 8004616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004618:	2309      	movs	r3, #9
 800461a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800461c:	f107 031c 	add.w	r3, r7, #28
 8004620:	4619      	mov	r1, r3
 8004622:	4804      	ldr	r0, [pc, #16]	@ (8004634 <HAL_TIM_MspPostInit+0x148>)
 8004624:	f000 faec 	bl	8004c00 <HAL_GPIO_Init>
}
 8004628:	bf00      	nop
 800462a:	3730      	adds	r7, #48	@ 0x30
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	40020400 	.word	0x40020400
 8004638:	40000800 	.word	0x40000800
 800463c:	40020c00 	.word	0x40020c00
 8004640:	40014000 	.word	0x40014000
 8004644:	40021000 	.word	0x40021000
 8004648:	40001800 	.word	0x40001800

0800464c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	@ 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a19      	ldr	r2, [pc, #100]	@ (80046d0 <HAL_UART_MspInit+0x84>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12b      	bne.n	80046c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <HAL_UART_MspInit+0x88>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	4a17      	ldr	r2, [pc, #92]	@ (80046d4 <HAL_UART_MspInit+0x88>)
 8004678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467c:	6413      	str	r3, [r2, #64]	@ 0x40
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_UART_MspInit+0x88>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <HAL_UART_MspInit+0x88>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	4a10      	ldr	r2, [pc, #64]	@ (80046d4 <HAL_UART_MspInit+0x88>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6313      	str	r3, [r2, #48]	@ 0x30
 800469a:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <HAL_UART_MspInit+0x88>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046a6:	230c      	movs	r3, #12
 80046a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b2:	2303      	movs	r3, #3
 80046b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046b6:	2307      	movs	r3, #7
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	@ (80046d8 <HAL_UART_MspInit+0x8c>)
 80046c2:	f000 fa9d 	bl	8004c00 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80046c6:	bf00      	nop
 80046c8:	3728      	adds	r7, #40	@ 0x28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40004400 	.word	0x40004400
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40020000 	.word	0x40020000

080046dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <NMI_Handler+0x4>

080046e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <HardFault_Handler+0x4>

080046ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046f0:	bf00      	nop
 80046f2:	e7fd      	b.n	80046f0 <MemManage_Handler+0x4>

080046f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <BusFault_Handler+0x4>

080046fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004700:	bf00      	nop
 8004702:	e7fd      	b.n	8004700 <UsageFault_Handler+0x4>

08004704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004712:	b480      	push	{r7}
 8004714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004716:	bf00      	nop
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004732:	f000 f93b 	bl	80049ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}

0800473a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  return 1;
 800473e:	2301      	movs	r3, #1
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_kill>:

int _kill(int pid, int sig)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004754:	f004 fc6a 	bl	800902c <__errno>
 8004758:	4603      	mov	r3, r0
 800475a:	2216      	movs	r2, #22
 800475c:	601a      	str	r2, [r3, #0]
  return -1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <_exit>:

void _exit (int status)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004772:	f04f 31ff 	mov.w	r1, #4294967295
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ffe7 	bl	800474a <_kill>
  while (1) {}    /* Make sure we hang here */
 800477c:	bf00      	nop
 800477e:	e7fd      	b.n	800477c <_exit+0x12>

08004780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e00a      	b.n	80047a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004792:	f3af 8000 	nop.w
 8004796:	4601      	mov	r1, r0
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	60ba      	str	r2, [r7, #8]
 800479e:	b2ca      	uxtb	r2, r1
 80047a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	3301      	adds	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	dbf0      	blt.n	8004792 <_read+0x12>
  }

  return len;
 80047b0:	687b      	ldr	r3, [r7, #4]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047e2:	605a      	str	r2, [r3, #4]
  return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_isatty>:

int _isatty(int file)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800482c:	4a14      	ldr	r2, [pc, #80]	@ (8004880 <_sbrk+0x5c>)
 800482e:	4b15      	ldr	r3, [pc, #84]	@ (8004884 <_sbrk+0x60>)
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004838:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <_sbrk+0x64>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <_sbrk+0x64>)
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <_sbrk+0x68>)
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <_sbrk+0x64>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d207      	bcs.n	8004864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004854:	f004 fbea 	bl	800902c <__errno>
 8004858:	4603      	mov	r3, r0
 800485a:	220c      	movs	r2, #12
 800485c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295
 8004862:	e009      	b.n	8004878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004864:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <_sbrk+0x64>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800486a:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <_sbrk+0x64>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	4a05      	ldr	r2, [pc, #20]	@ (8004888 <_sbrk+0x64>)
 8004874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004876:	68fb      	ldr	r3, [r7, #12]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20020000 	.word	0x20020000
 8004884:	00000400 	.word	0x00000400
 8004888:	20000664 	.word	0x20000664
 800488c:	200007b8 	.word	0x200007b8

08004890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <SystemInit+0x20>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	4a05      	ldr	r2, [pc, #20]	@ (80048b0 <SystemInit+0x20>)
 800489c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80048ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80048b8:	f7ff ffea 	bl	8004890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048bc:	480c      	ldr	r0, [pc, #48]	@ (80048f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048be:	490d      	ldr	r1, [pc, #52]	@ (80048f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048c0:	4a0d      	ldr	r2, [pc, #52]	@ (80048f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048c4:	e002      	b.n	80048cc <LoopCopyDataInit>

080048c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048ca:	3304      	adds	r3, #4

080048cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d0:	d3f9      	bcc.n	80048c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048d2:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048d4:	4c0a      	ldr	r4, [pc, #40]	@ (8004900 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048d8:	e001      	b.n	80048de <LoopFillZerobss>

080048da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048dc:	3204      	adds	r2, #4

080048de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e0:	d3fb      	bcc.n	80048da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048e2:	f004 fba9 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048e6:	f7ff f82a 	bl	800393e <main>
  bx  lr    
 80048ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80048ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048f4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80048f8:	0800c05c 	.word	0x0800c05c
  ldr r2, =_sbss
 80048fc:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004900:	200007b8 	.word	0x200007b8

08004904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004904:	e7fe      	b.n	8004904 <ADC_IRQHandler>
	...

08004908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_Init+0x40>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0d      	ldr	r2, [pc, #52]	@ (8004948 <HAL_Init+0x40>)
 8004912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_Init+0x40>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0a      	ldr	r2, [pc, #40]	@ (8004948 <HAL_Init+0x40>)
 800491e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004924:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <HAL_Init+0x40>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a07      	ldr	r2, [pc, #28]	@ (8004948 <HAL_Init+0x40>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004930:	2003      	movs	r0, #3
 8004932:	f000 f931 	bl	8004b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004936:	200f      	movs	r0, #15
 8004938:	f000 f808 	bl	800494c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800493c:	f7ff fc64 	bl	8004208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40023c00 	.word	0x40023c00

0800494c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004954:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <HAL_InitTick+0x54>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b12      	ldr	r3, [pc, #72]	@ (80049a4 <HAL_InitTick+0x58>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	4619      	mov	r1, r3
 800495e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004962:	fbb3 f3f1 	udiv	r3, r3, r1
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f93b 	bl	8004be6 <HAL_SYSTICK_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e00e      	b.n	8004998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d80a      	bhi.n	8004996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004980:	2200      	movs	r2, #0
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	f000 f911 	bl	8004bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800498c:	4a06      	ldr	r2, [pc, #24]	@ (80049a8 <HAL_InitTick+0x5c>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000080 	.word	0x20000080
 80049a4:	20000088 	.word	0x20000088
 80049a8:	20000084 	.word	0x20000084

080049ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <HAL_IncTick+0x20>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_IncTick+0x24>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4413      	add	r3, r2
 80049bc:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <HAL_IncTick+0x24>)
 80049be:	6013      	str	r3, [r2, #0]
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000088 	.word	0x20000088
 80049d0:	20000668 	.word	0x20000668

080049d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return uwTick;
 80049d8:	4b03      	ldr	r3, [pc, #12]	@ (80049e8 <HAL_GetTick+0x14>)
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000668 	.word	0x20000668

080049ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff ffee 	bl	80049d4 <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d005      	beq.n	8004a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a06:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <HAL_Delay+0x44>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a12:	bf00      	nop
 8004a14:	f7ff ffde 	bl	80049d4 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d8f7      	bhi.n	8004a14 <HAL_Delay+0x28>
  {
  }
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000088 	.word	0x20000088

08004a34 <__NVIC_SetPriorityGrouping>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a44:	4b0c      	ldr	r3, [pc, #48]	@ (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a50:	4013      	ands	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a66:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	60d3      	str	r3, [r2, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	e000ed00 	.word	0xe000ed00

08004a7c <__NVIC_GetPriorityGrouping>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <__NVIC_GetPriorityGrouping+0x18>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 0307 	and.w	r3, r3, #7
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_SetPriority>:
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	6039      	str	r1, [r7, #0]
 8004aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	db0a      	blt.n	8004ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	490c      	ldr	r1, [pc, #48]	@ (8004ae4 <__NVIC_SetPriority+0x4c>)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	0112      	lsls	r2, r2, #4
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	440b      	add	r3, r1
 8004abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ac0:	e00a      	b.n	8004ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4908      	ldr	r1, [pc, #32]	@ (8004ae8 <__NVIC_SetPriority+0x50>)
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	0112      	lsls	r2, r2, #4
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	761a      	strb	r2, [r3, #24]
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000e100 	.word	0xe000e100
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <NVIC_EncodePriority>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	@ 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f1c3 0307 	rsb	r3, r3, #7
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	bf28      	it	cs
 8004b0a:	2304      	movcs	r3, #4
 8004b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d902      	bls.n	8004b1c <NVIC_EncodePriority+0x30>
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	3b03      	subs	r3, #3
 8004b1a:	e000      	b.n	8004b1e <NVIC_EncodePriority+0x32>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b20:	f04f 32ff 	mov.w	r2, #4294967295
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	401a      	ands	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b34:	f04f 31ff 	mov.w	r1, #4294967295
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	43d9      	mvns	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	4313      	orrs	r3, r2
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3724      	adds	r7, #36	@ 0x24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <SysTick_Config>:
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b64:	d301      	bcc.n	8004b6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00f      	b.n	8004b8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <SysTick_Config+0x40>)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b72:	210f      	movs	r1, #15
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	f7ff ff8e 	bl	8004a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <SysTick_Config+0x40>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b82:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <SysTick_Config+0x40>)
 8004b84:	2207      	movs	r2, #7
 8004b86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	e000e010 	.word	0xe000e010

08004b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff47 	bl	8004a34 <__NVIC_SetPriorityGrouping>
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bc0:	f7ff ff5c 	bl	8004a7c <__NVIC_GetPriorityGrouping>
 8004bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	6978      	ldr	r0, [r7, #20]
 8004bcc:	f7ff ff8e 	bl	8004aec <NVIC_EncodePriority>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff5d 	bl	8004a98 <__NVIC_SetPriority>
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7ff ffb0 	bl	8004b54 <SysTick_Config>
 8004bf4:	4603      	mov	r3, r0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	@ 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	e16b      	b.n	8004ef4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	f040 815a 	bne.w	8004eee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d005      	beq.n	8004c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d130      	bne.n	8004cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c88:	2201      	movs	r2, #1
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4013      	ands	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 0201 	and.w	r2, r3, #1
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d017      	beq.n	8004cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2203      	movs	r2, #3
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d123      	bne.n	8004d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3208      	adds	r2, #8
 8004d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	220f      	movs	r2, #15
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	08da      	lsrs	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3208      	adds	r2, #8
 8004d3e:	69b9      	ldr	r1, [r7, #24]
 8004d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	2203      	movs	r2, #3
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0203 	and.w	r2, r3, #3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80b4 	beq.w	8004eee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	4b60      	ldr	r3, [pc, #384]	@ (8004f0c <HAL_GPIO_Init+0x30c>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8e:	4a5f      	ldr	r2, [pc, #380]	@ (8004f0c <HAL_GPIO_Init+0x30c>)
 8004d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d96:	4b5d      	ldr	r3, [pc, #372]	@ (8004f0c <HAL_GPIO_Init+0x30c>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004da2:	4a5b      	ldr	r2, [pc, #364]	@ (8004f10 <HAL_GPIO_Init+0x310>)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	3302      	adds	r3, #2
 8004daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	220f      	movs	r2, #15
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a52      	ldr	r2, [pc, #328]	@ (8004f14 <HAL_GPIO_Init+0x314>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d02b      	beq.n	8004e26 <HAL_GPIO_Init+0x226>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a51      	ldr	r2, [pc, #324]	@ (8004f18 <HAL_GPIO_Init+0x318>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d025      	beq.n	8004e22 <HAL_GPIO_Init+0x222>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a50      	ldr	r2, [pc, #320]	@ (8004f1c <HAL_GPIO_Init+0x31c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01f      	beq.n	8004e1e <HAL_GPIO_Init+0x21e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4f      	ldr	r2, [pc, #316]	@ (8004f20 <HAL_GPIO_Init+0x320>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d019      	beq.n	8004e1a <HAL_GPIO_Init+0x21a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a4e      	ldr	r2, [pc, #312]	@ (8004f24 <HAL_GPIO_Init+0x324>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_GPIO_Init+0x216>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a4d      	ldr	r2, [pc, #308]	@ (8004f28 <HAL_GPIO_Init+0x328>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00d      	beq.n	8004e12 <HAL_GPIO_Init+0x212>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a4c      	ldr	r2, [pc, #304]	@ (8004f2c <HAL_GPIO_Init+0x32c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <HAL_GPIO_Init+0x20e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a4b      	ldr	r2, [pc, #300]	@ (8004f30 <HAL_GPIO_Init+0x330>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_GPIO_Init+0x20a>
 8004e06:	2307      	movs	r3, #7
 8004e08:	e00e      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	e00c      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e0e:	2306      	movs	r3, #6
 8004e10:	e00a      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e12:	2305      	movs	r3, #5
 8004e14:	e008      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e16:	2304      	movs	r3, #4
 8004e18:	e006      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e004      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e002      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <HAL_GPIO_Init+0x228>
 8004e26:	2300      	movs	r3, #0
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	f002 0203 	and.w	r2, r2, #3
 8004e2e:	0092      	lsls	r2, r2, #2
 8004e30:	4093      	lsls	r3, r2
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e38:	4935      	ldr	r1, [pc, #212]	@ (8004f10 <HAL_GPIO_Init+0x310>)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	3302      	adds	r3, #2
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e46:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e6a:	4a32      	ldr	r2, [pc, #200]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e70:	4b30      	ldr	r3, [pc, #192]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e94:	4a27      	ldr	r2, [pc, #156]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e9a:	4b26      	ldr	r3, [pc, #152]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ee8:	4a12      	ldr	r2, [pc, #72]	@ (8004f34 <HAL_GPIO_Init+0x334>)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b0f      	cmp	r3, #15
 8004ef8:	f67f ae90 	bls.w	8004c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3724      	adds	r7, #36	@ 0x24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40013800 	.word	0x40013800
 8004f14:	40020000 	.word	0x40020000
 8004f18:	40020400 	.word	0x40020400
 8004f1c:	40020800 	.word	0x40020800
 8004f20:	40020c00 	.word	0x40020c00
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40021400 	.word	0x40021400
 8004f2c:	40021800 	.word	0x40021800
 8004f30:	40021c00 	.word	0x40021c00
 8004f34:	40013c00 	.word	0x40013c00

08004f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e267      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d075      	beq.n	8005042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f56:	4b88      	ldr	r3, [pc, #544]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d00c      	beq.n	8004f7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f62:	4b85      	ldr	r3, [pc, #532]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d112      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6e:	4b82      	ldr	r3, [pc, #520]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05b      	beq.n	8005040 <HAL_RCC_OscConfig+0x108>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d157      	bne.n	8005040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e242      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	d106      	bne.n	8004fac <HAL_RCC_OscConfig+0x74>
 8004f9e:	4b76      	ldr	r3, [pc, #472]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a75      	ldr	r2, [pc, #468]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e01d      	b.n	8004fe8 <HAL_RCC_OscConfig+0xb0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x98>
 8004fb6:	4b70      	ldr	r3, [pc, #448]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6f      	ldr	r2, [pc, #444]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e00b      	b.n	8004fe8 <HAL_RCC_OscConfig+0xb0>
 8004fd0:	4b69      	ldr	r3, [pc, #420]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a68      	ldr	r2, [pc, #416]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b66      	ldr	r3, [pc, #408]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a65      	ldr	r2, [pc, #404]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8004fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d013      	beq.n	8005018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7ff fcf0 	bl	80049d4 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7ff fcec 	bl	80049d4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e207      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	4b5b      	ldr	r3, [pc, #364]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0xc0>
 8005016:	e014      	b.n	8005042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7ff fcdc 	bl	80049d4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005020:	f7ff fcd8 	bl	80049d4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e1f3      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005032:	4b51      	ldr	r3, [pc, #324]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0xe8>
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d063      	beq.n	8005116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800504e:	4b4a      	ldr	r3, [pc, #296]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505a:	4b47      	ldr	r3, [pc, #284]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005062:	2b08      	cmp	r3, #8
 8005064:	d11c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005066:	4b44      	ldr	r3, [pc, #272]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d116      	bne.n	80050a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005072:	4b41      	ldr	r3, [pc, #260]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_RCC_OscConfig+0x152>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e1c7      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508a:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4937      	ldr	r1, [pc, #220]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800509a:	4313      	orrs	r3, r2
 800509c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509e:	e03a      	b.n	8005116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d020      	beq.n	80050ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a8:	4b34      	ldr	r3, [pc, #208]	@ (800517c <HAL_RCC_OscConfig+0x244>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7ff fc91 	bl	80049d4 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b6:	f7ff fc8d 	bl	80049d4 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e1a8      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d4:	4b28      	ldr	r3, [pc, #160]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4925      	ldr	r1, [pc, #148]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]
 80050e8:	e015      	b.n	8005116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ea:	4b24      	ldr	r3, [pc, #144]	@ (800517c <HAL_RCC_OscConfig+0x244>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7ff fc70 	bl	80049d4 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f8:	f7ff fc6c 	bl	80049d4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e187      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800510a:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d036      	beq.n	8005190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d016      	beq.n	8005158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <HAL_RCC_OscConfig+0x248>)
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005130:	f7ff fc50 	bl	80049d4 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005138:	f7ff fc4c 	bl	80049d4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e167      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <HAL_RCC_OscConfig+0x240>)
 800514c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0x200>
 8005156:	e01b      	b.n	8005190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_RCC_OscConfig+0x248>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515e:	f7ff fc39 	bl	80049d4 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005164:	e00e      	b.n	8005184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005166:	f7ff fc35 	bl	80049d4 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d907      	bls.n	8005184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e150      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
 8005178:	40023800 	.word	0x40023800
 800517c:	42470000 	.word	0x42470000
 8005180:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005184:	4b88      	ldr	r3, [pc, #544]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ea      	bne.n	8005166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8097 	beq.w	80052cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a2:	4b81      	ldr	r3, [pc, #516]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	4b7d      	ldr	r3, [pc, #500]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	4a7c      	ldr	r2, [pc, #496]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051be:	4b7a      	ldr	r3, [pc, #488]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ce:	4b77      	ldr	r3, [pc, #476]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d118      	bne.n	800520c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051da:	4b74      	ldr	r3, [pc, #464]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a73      	ldr	r2, [pc, #460]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e6:	f7ff fbf5 	bl	80049d4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ee:	f7ff fbf1 	bl	80049d4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e10c      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005200:	4b6a      	ldr	r3, [pc, #424]	@ (80053ac <HAL_RCC_OscConfig+0x474>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d106      	bne.n	8005222 <HAL_RCC_OscConfig+0x2ea>
 8005214:	4b64      	ldr	r3, [pc, #400]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005218:	4a63      	ldr	r2, [pc, #396]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005220:	e01c      	b.n	800525c <HAL_RCC_OscConfig+0x324>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b05      	cmp	r3, #5
 8005228:	d10c      	bne.n	8005244 <HAL_RCC_OscConfig+0x30c>
 800522a:	4b5f      	ldr	r3, [pc, #380]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522e:	4a5e      	ldr	r2, [pc, #376]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005230:	f043 0304 	orr.w	r3, r3, #4
 8005234:	6713      	str	r3, [r2, #112]	@ 0x70
 8005236:	4b5c      	ldr	r3, [pc, #368]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523a:	4a5b      	ldr	r2, [pc, #364]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6713      	str	r3, [r2, #112]	@ 0x70
 8005242:	e00b      	b.n	800525c <HAL_RCC_OscConfig+0x324>
 8005244:	4b58      	ldr	r3, [pc, #352]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a57      	ldr	r2, [pc, #348]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	4b55      	ldr	r3, [pc, #340]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005254:	4a54      	ldr	r2, [pc, #336]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005256:	f023 0304 	bic.w	r3, r3, #4
 800525a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7ff fbb6 	bl	80049d4 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7ff fbb2 	bl	80049d4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e0cb      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005282:	4b49      	ldr	r3, [pc, #292]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ee      	beq.n	800526c <HAL_RCC_OscConfig+0x334>
 800528e:	e014      	b.n	80052ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005290:	f7ff fba0 	bl	80049d4 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005296:	e00a      	b.n	80052ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7ff fb9c 	bl	80049d4 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e0b5      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ae:	4b3e      	ldr	r3, [pc, #248]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1ee      	bne.n	8005298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d105      	bne.n	80052cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c0:	4b39      	ldr	r3, [pc, #228]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	4a38      	ldr	r2, [pc, #224]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80a1 	beq.w	8005418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d6:	4b34      	ldr	r3, [pc, #208]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d05c      	beq.n	800539c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d141      	bne.n	800536e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	4b31      	ldr	r3, [pc, #196]	@ (80053b0 <HAL_RCC_OscConfig+0x478>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7ff fb70 	bl	80049d4 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f8:	f7ff fb6c 	bl	80049d4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e087      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530a:	4b27      	ldr	r3, [pc, #156]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	491b      	ldr	r1, [pc, #108]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005340:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x478>)
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005346:	f7ff fb45 	bl	80049d4 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534e:	f7ff fb41 	bl	80049d4 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e05c      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005360:	4b11      	ldr	r3, [pc, #68]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x416>
 800536c:	e054      	b.n	8005418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <HAL_RCC_OscConfig+0x478>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7ff fb2e 	bl	80049d4 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537c:	f7ff fb2a 	bl	80049d4 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e045      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <HAL_RCC_OscConfig+0x470>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x444>
 800539a:	e03d      	b.n	8005418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e038      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40007000 	.word	0x40007000
 80053b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x4ec>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d028      	beq.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d121      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d11a      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d111      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800

08005428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0cc      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800543c:	4b68      	ldr	r3, [pc, #416]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d90c      	bls.n	8005464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b65      	ldr	r3, [pc, #404]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b63      	ldr	r3, [pc, #396]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0b8      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d020      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800547c:	4b59      	ldr	r3, [pc, #356]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a58      	ldr	r2, [pc, #352]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005494:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a52      	ldr	r2, [pc, #328]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800549e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a0:	4b50      	ldr	r3, [pc, #320]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	494d      	ldr	r1, [pc, #308]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d044      	beq.n	8005548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	4b47      	ldr	r3, [pc, #284]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d119      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e07f      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d003      	beq.n	80054e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b3f      	ldr	r3, [pc, #252]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e06f      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	4b3b      	ldr	r3, [pc, #236]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e067      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005506:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4934      	ldr	r1, [pc, #208]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	4313      	orrs	r3, r2
 8005516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005518:	f7ff fa5c 	bl	80049d4 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7ff fa58 	bl	80049d4 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e04f      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	4b2b      	ldr	r3, [pc, #172]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 020c 	and.w	r2, r3, #12
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d1eb      	bne.n	8005520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d20c      	bcs.n	8005570 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b22      	ldr	r3, [pc, #136]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	4b20      	ldr	r3, [pc, #128]	@ (80055e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e032      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d008      	beq.n	800558e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800557c:	4b19      	ldr	r3, [pc, #100]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4916      	ldr	r1, [pc, #88]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559a:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	490e      	ldr	r1, [pc, #56]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ae:	f000 f821 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 80055b2:	4602      	mov	r2, r0
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	490a      	ldr	r1, [pc, #40]	@ (80055e8 <HAL_RCC_ClockConfig+0x1c0>)
 80055c0:	5ccb      	ldrb	r3, [r1, r3]
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	4a09      	ldr	r2, [pc, #36]	@ (80055ec <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80055ca:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <HAL_RCC_ClockConfig+0x1c8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f9bc 	bl	800494c <HAL_InitTick>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40023c00 	.word	0x40023c00
 80055e4:	40023800 	.word	0x40023800
 80055e8:	0800bba8 	.word	0x0800bba8
 80055ec:	20000080 	.word	0x20000080
 80055f0:	20000084 	.word	0x20000084

080055f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f8:	b090      	sub	sp, #64	@ 0x40
 80055fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560c:	4b59      	ldr	r3, [pc, #356]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x180>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b08      	cmp	r3, #8
 8005616:	d00d      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x40>
 8005618:	2b08      	cmp	r3, #8
 800561a:	f200 80a1 	bhi.w	8005760 <HAL_RCC_GetSysClockFreq+0x16c>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x34>
 8005622:	2b04      	cmp	r3, #4
 8005624:	d003      	beq.n	800562e <HAL_RCC_GetSysClockFreq+0x3a>
 8005626:	e09b      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005628:	4b53      	ldr	r3, [pc, #332]	@ (8005778 <HAL_RCC_GetSysClockFreq+0x184>)
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800562c:	e09b      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800562e:	4b53      	ldr	r3, [pc, #332]	@ (800577c <HAL_RCC_GetSysClockFreq+0x188>)
 8005630:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005632:	e098      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005634:	4b4f      	ldr	r3, [pc, #316]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x180>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800563e:	4b4d      	ldr	r3, [pc, #308]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x180>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d028      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800564a:	4b4a      	ldr	r3, [pc, #296]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x180>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	099b      	lsrs	r3, r3, #6
 8005650:	2200      	movs	r2, #0
 8005652:	623b      	str	r3, [r7, #32]
 8005654:	627a      	str	r2, [r7, #36]	@ 0x24
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800565c:	2100      	movs	r1, #0
 800565e:	4b47      	ldr	r3, [pc, #284]	@ (800577c <HAL_RCC_GetSysClockFreq+0x188>)
 8005660:	fb03 f201 	mul.w	r2, r3, r1
 8005664:	2300      	movs	r3, #0
 8005666:	fb00 f303 	mul.w	r3, r0, r3
 800566a:	4413      	add	r3, r2
 800566c:	4a43      	ldr	r2, [pc, #268]	@ (800577c <HAL_RCC_GetSysClockFreq+0x188>)
 800566e:	fba0 1202 	umull	r1, r2, r0, r2
 8005672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005674:	460a      	mov	r2, r1
 8005676:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567a:	4413      	add	r3, r2
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005680:	2200      	movs	r2, #0
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	61fa      	str	r2, [r7, #28]
 8005686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800568a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800568e:	f7fb fafb 	bl	8000c88 <__aeabi_uldivmod>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4613      	mov	r3, r2
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800569a:	e053      	b.n	8005744 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569c:	4b35      	ldr	r3, [pc, #212]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x180>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	099b      	lsrs	r3, r3, #6
 80056a2:	2200      	movs	r2, #0
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	617a      	str	r2, [r7, #20]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056ae:	f04f 0b00 	mov.w	fp, #0
 80056b2:	4652      	mov	r2, sl
 80056b4:	465b      	mov	r3, fp
 80056b6:	f04f 0000 	mov.w	r0, #0
 80056ba:	f04f 0100 	mov.w	r1, #0
 80056be:	0159      	lsls	r1, r3, #5
 80056c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c4:	0150      	lsls	r0, r2, #5
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	ebb2 080a 	subs.w	r8, r2, sl
 80056ce:	eb63 090b 	sbc.w	r9, r3, fp
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056e6:	ebb2 0408 	subs.w	r4, r2, r8
 80056ea:	eb63 0509 	sbc.w	r5, r3, r9
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	00eb      	lsls	r3, r5, #3
 80056f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056fc:	00e2      	lsls	r2, r4, #3
 80056fe:	4614      	mov	r4, r2
 8005700:	461d      	mov	r5, r3
 8005702:	eb14 030a 	adds.w	r3, r4, sl
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	eb45 030b 	adc.w	r3, r5, fp
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800571a:	4629      	mov	r1, r5
 800571c:	028b      	lsls	r3, r1, #10
 800571e:	4621      	mov	r1, r4
 8005720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005724:	4621      	mov	r1, r4
 8005726:	028a      	lsls	r2, r1, #10
 8005728:	4610      	mov	r0, r2
 800572a:	4619      	mov	r1, r3
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	2200      	movs	r2, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	60fa      	str	r2, [r7, #12]
 8005734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005738:	f7fb faa6 	bl	8000c88 <__aeabi_uldivmod>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4613      	mov	r3, r2
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005744:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x180>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	3301      	adds	r3, #1
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005754:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	fbb2 f3f3 	udiv	r3, r2, r3
 800575c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800575e:	e002      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <HAL_RCC_GetSysClockFreq+0x184>)
 8005762:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005768:	4618      	mov	r0, r3
 800576a:	3740      	adds	r7, #64	@ 0x40
 800576c:	46bd      	mov	sp, r7
 800576e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	00f42400 	.word	0x00f42400
 800577c:	017d7840 	.word	0x017d7840

08005780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005784:	4b03      	ldr	r3, [pc, #12]	@ (8005794 <HAL_RCC_GetHCLKFreq+0x14>)
 8005786:	681b      	ldr	r3, [r3, #0]
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000080 	.word	0x20000080

08005798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800579c:	f7ff fff0 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0a9b      	lsrs	r3, r3, #10
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4903      	ldr	r1, [pc, #12]	@ (80057bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	0800bbb8 	.word	0x0800bbb8

080057c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057c4:	f7ff ffdc 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0b5b      	lsrs	r3, r3, #13
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4903      	ldr	r1, [pc, #12]	@ (80057e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d6:	5ccb      	ldrb	r3, [r1, r3]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0800bbb8 	.word	0x0800bbb8

080057e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e041      	b.n	800587e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fe fe0a 	bl	8004428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f000 fc0c 	bl	8006044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b082      	sub	sp, #8
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e041      	b.n	800591c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d106      	bne.n	80058b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f839 	bl	8005924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f000 fbbd 	bl	8006044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_TIM_PWM_Start+0x24>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e022      	b.n	80059a2 <HAL_TIM_PWM_Start+0x6a>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b04      	cmp	r3, #4
 8005960:	d109      	bne.n	8005976 <HAL_TIM_PWM_Start+0x3e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	e015      	b.n	80059a2 <HAL_TIM_PWM_Start+0x6a>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d109      	bne.n	8005990 <HAL_TIM_PWM_Start+0x58>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	bf14      	ite	ne
 8005988:	2301      	movne	r3, #1
 800598a:	2300      	moveq	r3, #0
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e008      	b.n	80059a2 <HAL_TIM_PWM_Start+0x6a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e07c      	b.n	8005aa4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0x82>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059b8:	e013      	b.n	80059e2 <HAL_TIM_PWM_Start+0xaa>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0x92>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059c8:	e00b      	b.n	80059e2 <HAL_TIM_PWM_Start+0xaa>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Start+0xa2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059d8:	e003      	b.n	80059e2 <HAL_TIM_PWM_Start+0xaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2202      	movs	r2, #2
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2201      	movs	r2, #1
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fe20 	bl	8006630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a2d      	ldr	r2, [pc, #180]	@ (8005aac <HAL_TIM_PWM_Start+0x174>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_TIM_PWM_Start+0xcc>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab0 <HAL_TIM_PWM_Start+0x178>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d101      	bne.n	8005a08 <HAL_TIM_PWM_Start+0xd0>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_TIM_PWM_Start+0xd2>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a22      	ldr	r2, [pc, #136]	@ (8005aac <HAL_TIM_PWM_Start+0x174>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a30:	d01d      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab4 <HAL_TIM_PWM_Start+0x17c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab8 <HAL_TIM_PWM_Start+0x180>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005abc <HAL_TIM_PWM_Start+0x184>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <HAL_TIM_PWM_Start+0x178>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	@ (8005ac0 <HAL_TIM_PWM_Start+0x188>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x136>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <HAL_TIM_PWM_Start+0x18c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d111      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d010      	beq.n	8005aa2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	e007      	b.n	8005aa2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40001800 	.word	0x40001800

08005ac8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e097      	b.n	8005c0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fe fbb1 	bl	8004258 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6812      	ldr	r2, [r2, #0]
 8005b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0c:	f023 0307 	bic.w	r3, r3, #7
 8005b10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f000 fa91 	bl	8006044 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005b68:	f023 030c 	bic.w	r3, r3, #12
 8005b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	4313      	orrs	r3, r2
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	011a      	lsls	r2, r3, #4
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	031b      	lsls	r3, r3, #12
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ba6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3718      	adds	r7, #24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d110      	bne.n	8005c66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d102      	bne.n	8005c50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c4a:	7b7b      	ldrb	r3, [r7, #13]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d001      	beq.n	8005c54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e069      	b.n	8005d28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c64:	e031      	b.n	8005cca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d110      	bne.n	8005c8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d102      	bne.n	8005c78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c72:	7b3b      	ldrb	r3, [r7, #12]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e055      	b.n	8005d28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c8c:	e01d      	b.n	8005cca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d108      	bne.n	8005ca6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d105      	bne.n	8005ca6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c9a:	7b7b      	ldrb	r3, [r7, #13]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d102      	bne.n	8005ca6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca0:	7b3b      	ldrb	r3, [r7, #12]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d001      	beq.n	8005caa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e03e      	b.n	8005d28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_TIM_Encoder_Start+0xc4>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d008      	beq.n	8005ce8 <HAL_TIM_Encoder_Start+0xd4>
 8005cd6:	e00f      	b.n	8005cf8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fca5 	bl	8006630 <TIM_CCxChannelCmd>
      break;
 8005ce6:	e016      	b.n	8005d16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2201      	movs	r2, #1
 8005cee:	2104      	movs	r1, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fc9d 	bl	8006630 <TIM_CCxChannelCmd>
      break;
 8005cf6:	e00e      	b.n	8005d16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fc95 	bl	8006630 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fc8e 	bl	8006630 <TIM_CCxChannelCmd>
      break;
 8005d14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0201 	orr.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e0ae      	b.n	8005eac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b0c      	cmp	r3, #12
 8005d5a:	f200 809f 	bhi.w	8005e9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d99 	.word	0x08005d99
 8005d68:	08005e9d 	.word	0x08005e9d
 8005d6c:	08005e9d 	.word	0x08005e9d
 8005d70:	08005e9d 	.word	0x08005e9d
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005e9d 	.word	0x08005e9d
 8005d7c:	08005e9d 	.word	0x08005e9d
 8005d80:	08005e9d 	.word	0x08005e9d
 8005d84:	08005e1b 	.word	0x08005e1b
 8005d88:	08005e9d 	.word	0x08005e9d
 8005d8c:	08005e9d 	.word	0x08005e9d
 8005d90:	08005e9d 	.word	0x08005e9d
 8005d94:	08005e5b 	.word	0x08005e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f9fc 	bl	800619c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0204 	bic.w	r2, r2, #4
 8005dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6999      	ldr	r1, [r3, #24]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	619a      	str	r2, [r3, #24]
      break;
 8005dd6:	e064      	b.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fa4c 	bl	800627c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	619a      	str	r2, [r3, #24]
      break;
 8005e18:	e043      	b.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 faa1 	bl	8006368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0208 	orr.w	r2, r2, #8
 8005e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0204 	bic.w	r2, r2, #4
 8005e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69d9      	ldr	r1, [r3, #28]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	61da      	str	r2, [r3, #28]
      break;
 8005e58:	e023      	b.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 faf5 	bl	8006450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	021a      	lsls	r2, r3, #8
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	61da      	str	r2, [r3, #28]
      break;
 8005e9a:	e002      	b.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ea0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e0b4      	b.n	800603a <HAL_TIM_ConfigClockSource+0x186>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f08:	d03e      	beq.n	8005f88 <HAL_TIM_ConfigClockSource+0xd4>
 8005f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0e:	f200 8087 	bhi.w	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	f000 8086 	beq.w	8006026 <HAL_TIM_ConfigClockSource+0x172>
 8005f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1e:	d87f      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b70      	cmp	r3, #112	@ 0x70
 8005f22:	d01a      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0xa6>
 8005f24:	2b70      	cmp	r3, #112	@ 0x70
 8005f26:	d87b      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b60      	cmp	r3, #96	@ 0x60
 8005f2a:	d050      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x11a>
 8005f2c:	2b60      	cmp	r3, #96	@ 0x60
 8005f2e:	d877      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b50      	cmp	r3, #80	@ 0x50
 8005f32:	d03c      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0xfa>
 8005f34:	2b50      	cmp	r3, #80	@ 0x50
 8005f36:	d873      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d058      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x13a>
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d86f      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f40:	2b30      	cmp	r3, #48	@ 0x30
 8005f42:	d064      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f44:	2b30      	cmp	r3, #48	@ 0x30
 8005f46:	d86b      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d060      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d867      	bhi.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d05c      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	d05a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x15a>
 8005f58:	e062      	b.n	8006020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f6a:	f000 fb41 	bl	80065f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	609a      	str	r2, [r3, #8]
      break;
 8005f86:	e04f      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f98:	f000 fb2a 	bl	80065f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005faa:	609a      	str	r2, [r3, #8]
      break;
 8005fac:	e03c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f000 fa9e 	bl	80064fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2150      	movs	r1, #80	@ 0x50
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 faf7 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e02c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 fabd 	bl	800655a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2160      	movs	r1, #96	@ 0x60
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fae7 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 8005fec:	e01c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 fa7e 	bl	80064fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2140      	movs	r1, #64	@ 0x40
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fad7 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 800600c:	e00c      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f000 face 	bl	80065ba <TIM_ITRx_SetConfig>
      break;
 800601e:	e003      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
      break;
 8006024:	e000      	b.n	8006028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a46      	ldr	r2, [pc, #280]	@ (8006170 <TIM_Base_SetConfig+0x12c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006062:	d00f      	beq.n	8006084 <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a43      	ldr	r2, [pc, #268]	@ (8006174 <TIM_Base_SetConfig+0x130>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00b      	beq.n	8006084 <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a42      	ldr	r2, [pc, #264]	@ (8006178 <TIM_Base_SetConfig+0x134>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a41      	ldr	r2, [pc, #260]	@ (800617c <TIM_Base_SetConfig+0x138>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0x40>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a40      	ldr	r2, [pc, #256]	@ (8006180 <TIM_Base_SetConfig+0x13c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d108      	bne.n	8006096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a35      	ldr	r2, [pc, #212]	@ (8006170 <TIM_Base_SetConfig+0x12c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d02b      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a4:	d027      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a32      	ldr	r2, [pc, #200]	@ (8006174 <TIM_Base_SetConfig+0x130>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d023      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a31      	ldr	r2, [pc, #196]	@ (8006178 <TIM_Base_SetConfig+0x134>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01f      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a30      	ldr	r2, [pc, #192]	@ (800617c <TIM_Base_SetConfig+0x138>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01b      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006180 <TIM_Base_SetConfig+0x13c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d017      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006184 <TIM_Base_SetConfig+0x140>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d013      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006188 <TIM_Base_SetConfig+0x144>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00f      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2c      	ldr	r2, [pc, #176]	@ (800618c <TIM_Base_SetConfig+0x148>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00b      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006190 <TIM_Base_SetConfig+0x14c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2a      	ldr	r2, [pc, #168]	@ (8006194 <TIM_Base_SetConfig+0x150>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a29      	ldr	r2, [pc, #164]	@ (8006198 <TIM_Base_SetConfig+0x154>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d108      	bne.n	8006108 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4313      	orrs	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a10      	ldr	r2, [pc, #64]	@ (8006170 <TIM_Base_SetConfig+0x12c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_Base_SetConfig+0xf8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <TIM_Base_SetConfig+0x13c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d103      	bne.n	8006144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b01      	cmp	r3, #1
 8006154:	d105      	bne.n	8006162 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]
  }
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40010000 	.word	0x40010000
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40010400 	.word	0x40010400
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800
 8006190:	40001800 	.word	0x40001800
 8006194:	40001c00 	.word	0x40001c00
 8006198:	40002000 	.word	0x40002000

0800619c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f023 0201 	bic.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 0302 	bic.w	r3, r3, #2
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <TIM_OC1_SetConfig+0xd8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_OC1_SetConfig+0x64>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <TIM_OC1_SetConfig+0xdc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10c      	bne.n	800621a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0308 	bic.w	r3, r3, #8
 8006206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 0304 	bic.w	r3, r3, #4
 8006218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a15      	ldr	r2, [pc, #84]	@ (8006274 <TIM_OC1_SetConfig+0xd8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_OC1_SetConfig+0x8e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a14      	ldr	r2, [pc, #80]	@ (8006278 <TIM_OC1_SetConfig+0xdc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d111      	bne.n	800624e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	621a      	str	r2, [r3, #32]
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40010000 	.word	0x40010000
 8006278:	40010400 	.word	0x40010400

0800627c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f023 0210 	bic.w	r2, r3, #16
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	021b      	lsls	r3, r3, #8
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0320 	bic.w	r3, r3, #32
 80062c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a22      	ldr	r2, [pc, #136]	@ (8006360 <TIM_OC2_SetConfig+0xe4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC2_SetConfig+0x68>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a21      	ldr	r2, [pc, #132]	@ (8006364 <TIM_OC2_SetConfig+0xe8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10d      	bne.n	8006300 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <TIM_OC2_SetConfig+0xe4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_OC2_SetConfig+0x94>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a16      	ldr	r2, [pc, #88]	@ (8006364 <TIM_OC2_SetConfig+0xe8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d113      	bne.n	8006338 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40010400 	.word	0x40010400

08006368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a21      	ldr	r2, [pc, #132]	@ (8006448 <TIM_OC3_SetConfig+0xe0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC3_SetConfig+0x66>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a20      	ldr	r2, [pc, #128]	@ (800644c <TIM_OC3_SetConfig+0xe4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d10d      	bne.n	80063ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <TIM_OC3_SetConfig+0xe0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_OC3_SetConfig+0x92>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a15      	ldr	r2, [pc, #84]	@ (800644c <TIM_OC3_SetConfig+0xe4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d113      	bne.n	8006422 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400

08006450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800649a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	031b      	lsls	r3, r3, #12
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a12      	ldr	r2, [pc, #72]	@ (80064f4 <TIM_OC4_SetConfig+0xa4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC4_SetConfig+0x68>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a11      	ldr	r2, [pc, #68]	@ (80064f8 <TIM_OC4_SetConfig+0xa8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d109      	bne.n	80064cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	019b      	lsls	r3, r3, #6
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400

080064fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0201 	bic.w	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f023 030a 	bic.w	r3, r3, #10
 8006538:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f023 0210 	bic.w	r2, r3, #16
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	031b      	lsls	r3, r3, #12
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006596:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f043 0307 	orr.w	r3, r3, #7
 80065dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	609a      	str	r2, [r3, #8]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800660a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	021a      	lsls	r2, r3, #8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	431a      	orrs	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4313      	orrs	r3, r2
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 031f 	and.w	r3, r3, #31
 8006642:	2201      	movs	r2, #1
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1a      	ldr	r2, [r3, #32]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1a      	ldr	r2, [r3, #32]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	431a      	orrs	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800668c:	2b01      	cmp	r3, #1
 800668e:	d101      	bne.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006690:	2302      	movs	r3, #2
 8006692:	e05a      	b.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a21      	ldr	r2, [pc, #132]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d022      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e0:	d01d      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	@ (800675c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00e      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a18      	ldr	r2, [pc, #96]	@ (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a17      	ldr	r2, [pc, #92]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d10c      	bne.n	8006738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4313      	orrs	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40010000 	.word	0x40010000
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40010400 	.word	0x40010400
 800676c:	40014000 	.word	0x40014000
 8006770:	40001800 	.word	0x40001800

08006774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e042      	b.n	800680c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fd ff56 	bl	800464c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	@ 0x24
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa09 	bl	8006bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	@ 0x28
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b20      	cmp	r3, #32
 8006832:	d175      	bne.n	8006920 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <HAL_UART_Transmit+0x2c>
 800683a:	88fb      	ldrh	r3, [r7, #6]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e06e      	b.n	8006922 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2221      	movs	r2, #33	@ 0x21
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006852:	f7fe f8bf 	bl	80049d4 <HAL_GetTick>
 8006856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	88fa      	ldrh	r2, [r7, #6]
 8006862:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800686c:	d108      	bne.n	8006880 <HAL_UART_Transmit+0x6c>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	e003      	b.n	8006888 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006888:	e02e      	b.n	80068e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2200      	movs	r2, #0
 8006892:	2180      	movs	r1, #128	@ 0x80
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f8df 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e03a      	b.n	8006922 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	3302      	adds	r3, #2
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	e007      	b.n	80068da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	3301      	adds	r3, #1
 80068d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1cb      	bne.n	800688a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2140      	movs	r1, #64	@ 0x40
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f8ab 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e006      	b.n	8006922 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b08a      	sub	sp, #40	@ 0x28
 800692e:	af02      	add	r7, sp, #8
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b20      	cmp	r3, #32
 8006948:	f040 8081 	bne.w	8006a4e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_UART_Receive+0x2e>
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e079      	b.n	8006a50 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2222      	movs	r2, #34	@ 0x22
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006970:	f7fe f830 	bl	80049d4 <HAL_GetTick>
 8006974:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	88fa      	ldrh	r2, [r7, #6]
 800697a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800698a:	d108      	bne.n	800699e <HAL_UART_Receive+0x74>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d104      	bne.n	800699e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	e003      	b.n	80069a6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80069a6:	e047      	b.n	8006a38 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2200      	movs	r2, #0
 80069b0:	2120      	movs	r1, #32
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f850 	bl	8006a58 <UART_WaitOnFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e042      	b.n	8006a50 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10c      	bne.n	80069ea <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069dc:	b29a      	uxth	r2, r3
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	3302      	adds	r3, #2
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e01f      	b.n	8006a2a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f2:	d007      	beq.n	8006a04 <HAL_UART_Receive+0xda>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <HAL_UART_Receive+0xe8>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e008      	b.n	8006a24 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1b2      	bne.n	80069a8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e000      	b.n	8006a50 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
  }
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4613      	mov	r3, r2
 8006a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	e03b      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d037      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fd ffaf 	bl	80049d4 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e03a      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d023      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b80      	cmp	r3, #128	@ 0x80
 8006a9e:	d020      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b40      	cmp	r3, #64	@ 0x40
 8006aa4:	d01d      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d116      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	617b      	str	r3, [r7, #20]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f81d 	bl	8006b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e00f      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d0b4      	beq.n	8006a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b095      	sub	sp, #84	@ 0x54
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b32:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3314      	adds	r3, #20
 8006b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f023 0301 	bic.w	r3, r3, #1
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d119      	bne.n	8006bb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f023 0310 	bic.w	r3, r3, #16
 8006b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ba2:	61ba      	str	r2, [r7, #24]
 8006ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6979      	ldr	r1, [r7, #20]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e5      	bne.n	8006b82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bc4:	bf00      	nop
 8006bc6:	3754      	adds	r7, #84	@ 0x54
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bd4:	b0c0      	sub	sp, #256	@ 0x100
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	68d9      	ldr	r1, [r3, #12]
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	ea40 0301 	orr.w	r3, r0, r1
 8006bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c28:	f021 010c 	bic.w	r1, r1, #12
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c36:	430b      	orrs	r3, r1
 8006c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4a:	6999      	ldr	r1, [r3, #24]
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	ea40 0301 	orr.w	r3, r0, r1
 8006c56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4b8f      	ldr	r3, [pc, #572]	@ (8006e9c <UART_SetConfig+0x2cc>)
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d005      	beq.n	8006c70 <UART_SetConfig+0xa0>
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8006ea0 <UART_SetConfig+0x2d0>)
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d104      	bne.n	8006c7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fe fda6 	bl	80057c0 <HAL_RCC_GetPCLK2Freq>
 8006c74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c78:	e003      	b.n	8006c82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c7a:	f7fe fd8d 	bl	8005798 <HAL_RCC_GetPCLK1Freq>
 8006c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c8c:	f040 810c 	bne.w	8006ea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ca2:	4622      	mov	r2, r4
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	1891      	adds	r1, r2, r2
 8006ca8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006caa:	415b      	adcs	r3, r3
 8006cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	eb12 0801 	adds.w	r8, r2, r1
 8006cb8:	4629      	mov	r1, r5
 8006cba:	eb43 0901 	adc.w	r9, r3, r1
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd2:	4690      	mov	r8, r2
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	eb18 0303 	adds.w	r3, r8, r3
 8006cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	eb49 0303 	adc.w	r3, r9, r3
 8006ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006cfe:	460b      	mov	r3, r1
 8006d00:	18db      	adds	r3, r3, r3
 8006d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d04:	4613      	mov	r3, r2
 8006d06:	eb42 0303 	adc.w	r3, r2, r3
 8006d0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d14:	f7f9 ffb8 	bl	8000c88 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4b61      	ldr	r3, [pc, #388]	@ (8006ea4 <UART_SetConfig+0x2d4>)
 8006d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	011c      	lsls	r4, r3, #4
 8006d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	1891      	adds	r1, r2, r2
 8006d3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d40:	415b      	adcs	r3, r3
 8006d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d48:	4641      	mov	r1, r8
 8006d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d4e:	4649      	mov	r1, r9
 8006d50:	eb43 0b01 	adc.w	fp, r3, r1
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d68:	4692      	mov	sl, r2
 8006d6a:	469b      	mov	fp, r3
 8006d6c:	4643      	mov	r3, r8
 8006d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d76:	464b      	mov	r3, r9
 8006d78:	eb4b 0303 	adc.w	r3, fp, r3
 8006d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d94:	460b      	mov	r3, r1
 8006d96:	18db      	adds	r3, r3, r3
 8006d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006daa:	f7f9 ff6d 	bl	8000c88 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea4 <UART_SetConfig+0x2d4>)
 8006db6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2264      	movs	r2, #100	@ 0x64
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
 8006dc2:	1acb      	subs	r3, r1, r3
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dca:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <UART_SetConfig+0x2d4>)
 8006dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd0:	095b      	lsrs	r3, r3, #5
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dd8:	441c      	add	r4, r3
 8006dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006de4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dec:	4642      	mov	r2, r8
 8006dee:	464b      	mov	r3, r9
 8006df0:	1891      	adds	r1, r2, r2
 8006df2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006df4:	415b      	adcs	r3, r3
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006dfc:	4641      	mov	r1, r8
 8006dfe:	1851      	adds	r1, r2, r1
 8006e00:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e02:	4649      	mov	r1, r9
 8006e04:	414b      	adcs	r3, r1
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e14:	4659      	mov	r1, fp
 8006e16:	00cb      	lsls	r3, r1, #3
 8006e18:	4651      	mov	r1, sl
 8006e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e1e:	4651      	mov	r1, sl
 8006e20:	00ca      	lsls	r2, r1, #3
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	4642      	mov	r2, r8
 8006e2a:	189b      	adds	r3, r3, r2
 8006e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e30:	464b      	mov	r3, r9
 8006e32:	460a      	mov	r2, r1
 8006e34:	eb42 0303 	adc.w	r3, r2, r3
 8006e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e50:	460b      	mov	r3, r1
 8006e52:	18db      	adds	r3, r3, r3
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e56:	4613      	mov	r3, r2
 8006e58:	eb42 0303 	adc.w	r3, r2, r3
 8006e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e66:	f7f9 ff0f 	bl	8000c88 <__aeabi_uldivmod>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <UART_SetConfig+0x2d4>)
 8006e70:	fba3 1302 	umull	r1, r3, r3, r2
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	2164      	movs	r1, #100	@ 0x64
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	3332      	adds	r3, #50	@ 0x32
 8006e82:	4a08      	ldr	r2, [pc, #32]	@ (8006ea4 <UART_SetConfig+0x2d4>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	f003 0207 	and.w	r2, r3, #7
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4422      	add	r2, r4
 8006e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e98:	e106      	b.n	80070a8 <UART_SetConfig+0x4d8>
 8006e9a:	bf00      	nop
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	40011400 	.word	0x40011400
 8006ea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	1891      	adds	r1, r2, r2
 8006ec0:	6239      	str	r1, [r7, #32]
 8006ec2:	415b      	adcs	r3, r3
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eca:	4641      	mov	r1, r8
 8006ecc:	1854      	adds	r4, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb43 0501 	adc.w	r5, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	00eb      	lsls	r3, r5, #3
 8006ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ee2:	00e2      	lsls	r2, r4, #3
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	4643      	mov	r3, r8
 8006eea:	18e3      	adds	r3, r4, r3
 8006eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	eb45 0303 	adc.w	r3, r5, r3
 8006ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f0a:	f04f 0200 	mov.w	r2, #0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f16:	4629      	mov	r1, r5
 8006f18:	008b      	lsls	r3, r1, #2
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f20:	4621      	mov	r1, r4
 8006f22:	008a      	lsls	r2, r1, #2
 8006f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f28:	f7f9 feae 	bl	8000c88 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4b60      	ldr	r3, [pc, #384]	@ (80070b4 <UART_SetConfig+0x4e4>)
 8006f32:	fba3 2302 	umull	r2, r3, r3, r2
 8006f36:	095b      	lsrs	r3, r3, #5
 8006f38:	011c      	lsls	r4, r3, #4
 8006f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	1891      	adds	r1, r2, r2
 8006f52:	61b9      	str	r1, [r7, #24]
 8006f54:	415b      	adcs	r3, r3
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	1851      	adds	r1, r2, r1
 8006f60:	6139      	str	r1, [r7, #16]
 8006f62:	4649      	mov	r1, r9
 8006f64:	414b      	adcs	r3, r1
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f74:	4659      	mov	r1, fp
 8006f76:	00cb      	lsls	r3, r1, #3
 8006f78:	4651      	mov	r1, sl
 8006f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f7e:	4651      	mov	r1, sl
 8006f80:	00ca      	lsls	r2, r1, #3
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	4642      	mov	r2, r8
 8006f8a:	189b      	adds	r3, r3, r2
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f90:	464b      	mov	r3, r9
 8006f92:	460a      	mov	r2, r1
 8006f94:	eb42 0303 	adc.w	r3, r2, r3
 8006f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	008b      	lsls	r3, r1, #2
 8006fb8:	4641      	mov	r1, r8
 8006fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	008a      	lsls	r2, r1, #2
 8006fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fc6:	f7f9 fe5f 	bl	8000c88 <__aeabi_uldivmod>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4b38      	ldr	r3, [pc, #224]	@ (80070b4 <UART_SetConfig+0x4e4>)
 8006fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	2264      	movs	r2, #100	@ 0x64
 8006fda:	fb02 f303 	mul.w	r3, r2, r3
 8006fde:	1acb      	subs	r3, r1, r3
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	3332      	adds	r3, #50	@ 0x32
 8006fe4:	4a33      	ldr	r2, [pc, #204]	@ (80070b4 <UART_SetConfig+0x4e4>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ff0:	441c      	add	r4, r3
 8006ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ffa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ffc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007000:	4642      	mov	r2, r8
 8007002:	464b      	mov	r3, r9
 8007004:	1891      	adds	r1, r2, r2
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	415b      	adcs	r3, r3
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007010:	4641      	mov	r1, r8
 8007012:	1851      	adds	r1, r2, r1
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	4649      	mov	r1, r9
 8007018:	414b      	adcs	r3, r1
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007028:	4659      	mov	r1, fp
 800702a:	00cb      	lsls	r3, r1, #3
 800702c:	4651      	mov	r1, sl
 800702e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007032:	4651      	mov	r1, sl
 8007034:	00ca      	lsls	r2, r1, #3
 8007036:	4610      	mov	r0, r2
 8007038:	4619      	mov	r1, r3
 800703a:	4603      	mov	r3, r0
 800703c:	4642      	mov	r2, r8
 800703e:	189b      	adds	r3, r3, r2
 8007040:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007042:	464b      	mov	r3, r9
 8007044:	460a      	mov	r2, r1
 8007046:	eb42 0303 	adc.w	r3, r2, r3
 800704a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800704c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	663b      	str	r3, [r7, #96]	@ 0x60
 8007056:	667a      	str	r2, [r7, #100]	@ 0x64
 8007058:	f04f 0200 	mov.w	r2, #0
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007064:	4649      	mov	r1, r9
 8007066:	008b      	lsls	r3, r1, #2
 8007068:	4641      	mov	r1, r8
 800706a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800706e:	4641      	mov	r1, r8
 8007070:	008a      	lsls	r2, r1, #2
 8007072:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007076:	f7f9 fe07 	bl	8000c88 <__aeabi_uldivmod>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4b0d      	ldr	r3, [pc, #52]	@ (80070b4 <UART_SetConfig+0x4e4>)
 8007080:	fba3 1302 	umull	r1, r3, r3, r2
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	2164      	movs	r1, #100	@ 0x64
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	3332      	adds	r3, #50	@ 0x32
 8007092:	4a08      	ldr	r2, [pc, #32]	@ (80070b4 <UART_SetConfig+0x4e4>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	f003 020f 	and.w	r2, r3, #15
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4422      	add	r2, r4
 80070a6:	609a      	str	r2, [r3, #8]
}
 80070a8:	bf00      	nop
 80070aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070ae:	46bd      	mov	sp, r7
 80070b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b4:	51eb851f 	.word	0x51eb851f

080070b8 <atof>:
 80070b8:	2100      	movs	r1, #0
 80070ba:	f000 be0b 	b.w	8007cd4 <strtod>

080070be <sulp>:
 80070be:	b570      	push	{r4, r5, r6, lr}
 80070c0:	4604      	mov	r4, r0
 80070c2:	460d      	mov	r5, r1
 80070c4:	ec45 4b10 	vmov	d0, r4, r5
 80070c8:	4616      	mov	r6, r2
 80070ca:	f003 fe25 	bl	800ad18 <__ulp>
 80070ce:	ec51 0b10 	vmov	r0, r1, d0
 80070d2:	b17e      	cbz	r6, 80070f4 <sulp+0x36>
 80070d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dd09      	ble.n	80070f4 <sulp+0x36>
 80070e0:	051b      	lsls	r3, r3, #20
 80070e2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80070e6:	2400      	movs	r4, #0
 80070e8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80070ec:	4622      	mov	r2, r4
 80070ee:	462b      	mov	r3, r5
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	ec41 0b10 	vmov	d0, r0, r1
 80070f8:	bd70      	pop	{r4, r5, r6, pc}
 80070fa:	0000      	movs	r0, r0
 80070fc:	0000      	movs	r0, r0
	...

08007100 <_strtod_l>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	b09f      	sub	sp, #124	@ 0x7c
 8007106:	460c      	mov	r4, r1
 8007108:	9217      	str	r2, [sp, #92]	@ 0x5c
 800710a:	2200      	movs	r2, #0
 800710c:	921a      	str	r2, [sp, #104]	@ 0x68
 800710e:	9005      	str	r0, [sp, #20]
 8007110:	f04f 0a00 	mov.w	sl, #0
 8007114:	f04f 0b00 	mov.w	fp, #0
 8007118:	460a      	mov	r2, r1
 800711a:	9219      	str	r2, [sp, #100]	@ 0x64
 800711c:	7811      	ldrb	r1, [r2, #0]
 800711e:	292b      	cmp	r1, #43	@ 0x2b
 8007120:	d04a      	beq.n	80071b8 <_strtod_l+0xb8>
 8007122:	d838      	bhi.n	8007196 <_strtod_l+0x96>
 8007124:	290d      	cmp	r1, #13
 8007126:	d832      	bhi.n	800718e <_strtod_l+0x8e>
 8007128:	2908      	cmp	r1, #8
 800712a:	d832      	bhi.n	8007192 <_strtod_l+0x92>
 800712c:	2900      	cmp	r1, #0
 800712e:	d03b      	beq.n	80071a8 <_strtod_l+0xa8>
 8007130:	2200      	movs	r2, #0
 8007132:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007134:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007136:	782a      	ldrb	r2, [r5, #0]
 8007138:	2a30      	cmp	r2, #48	@ 0x30
 800713a:	f040 80b3 	bne.w	80072a4 <_strtod_l+0x1a4>
 800713e:	786a      	ldrb	r2, [r5, #1]
 8007140:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007144:	2a58      	cmp	r2, #88	@ 0x58
 8007146:	d16e      	bne.n	8007226 <_strtod_l+0x126>
 8007148:	9302      	str	r3, [sp, #8]
 800714a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	4a8e      	ldr	r2, [pc, #568]	@ (800738c <_strtod_l+0x28c>)
 8007154:	9805      	ldr	r0, [sp, #20]
 8007156:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007158:	a919      	add	r1, sp, #100	@ 0x64
 800715a:	f002 fecf 	bl	8009efc <__gethex>
 800715e:	f010 060f 	ands.w	r6, r0, #15
 8007162:	4604      	mov	r4, r0
 8007164:	d005      	beq.n	8007172 <_strtod_l+0x72>
 8007166:	2e06      	cmp	r6, #6
 8007168:	d128      	bne.n	80071bc <_strtod_l+0xbc>
 800716a:	3501      	adds	r5, #1
 800716c:	2300      	movs	r3, #0
 800716e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 858e 	bne.w	8007c96 <_strtod_l+0xb96>
 800717a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800717c:	b1cb      	cbz	r3, 80071b2 <_strtod_l+0xb2>
 800717e:	4652      	mov	r2, sl
 8007180:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007184:	ec43 2b10 	vmov	d0, r2, r3
 8007188:	b01f      	add	sp, #124	@ 0x7c
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	2920      	cmp	r1, #32
 8007190:	d1ce      	bne.n	8007130 <_strtod_l+0x30>
 8007192:	3201      	adds	r2, #1
 8007194:	e7c1      	b.n	800711a <_strtod_l+0x1a>
 8007196:	292d      	cmp	r1, #45	@ 0x2d
 8007198:	d1ca      	bne.n	8007130 <_strtod_l+0x30>
 800719a:	2101      	movs	r1, #1
 800719c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800719e:	1c51      	adds	r1, r2, #1
 80071a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80071a2:	7852      	ldrb	r2, [r2, #1]
 80071a4:	2a00      	cmp	r2, #0
 80071a6:	d1c5      	bne.n	8007134 <_strtod_l+0x34>
 80071a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8570 	bne.w	8007c92 <_strtod_l+0xb92>
 80071b2:	4652      	mov	r2, sl
 80071b4:	465b      	mov	r3, fp
 80071b6:	e7e5      	b.n	8007184 <_strtod_l+0x84>
 80071b8:	2100      	movs	r1, #0
 80071ba:	e7ef      	b.n	800719c <_strtod_l+0x9c>
 80071bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071be:	b13a      	cbz	r2, 80071d0 <_strtod_l+0xd0>
 80071c0:	2135      	movs	r1, #53	@ 0x35
 80071c2:	a81c      	add	r0, sp, #112	@ 0x70
 80071c4:	f003 fea2 	bl	800af0c <__copybits>
 80071c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ca:	9805      	ldr	r0, [sp, #20]
 80071cc:	f003 fa70 	bl	800a6b0 <_Bfree>
 80071d0:	3e01      	subs	r6, #1
 80071d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80071d4:	2e04      	cmp	r6, #4
 80071d6:	d806      	bhi.n	80071e6 <_strtod_l+0xe6>
 80071d8:	e8df f006 	tbb	[pc, r6]
 80071dc:	201d0314 	.word	0x201d0314
 80071e0:	14          	.byte	0x14
 80071e1:	00          	.byte	0x00
 80071e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80071e6:	05e1      	lsls	r1, r4, #23
 80071e8:	bf48      	it	mi
 80071ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80071ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071f2:	0d1b      	lsrs	r3, r3, #20
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1bb      	bne.n	8007172 <_strtod_l+0x72>
 80071fa:	f001 ff17 	bl	800902c <__errno>
 80071fe:	2322      	movs	r3, #34	@ 0x22
 8007200:	6003      	str	r3, [r0, #0]
 8007202:	e7b6      	b.n	8007172 <_strtod_l+0x72>
 8007204:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007208:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800720c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007210:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007214:	e7e7      	b.n	80071e6 <_strtod_l+0xe6>
 8007216:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007394 <_strtod_l+0x294>
 800721a:	e7e4      	b.n	80071e6 <_strtod_l+0xe6>
 800721c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007220:	f04f 3aff 	mov.w	sl, #4294967295
 8007224:	e7df      	b.n	80071e6 <_strtod_l+0xe6>
 8007226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	9219      	str	r2, [sp, #100]	@ 0x64
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	2b30      	cmp	r3, #48	@ 0x30
 8007230:	d0f9      	beq.n	8007226 <_strtod_l+0x126>
 8007232:	2b00      	cmp	r3, #0
 8007234:	d09d      	beq.n	8007172 <_strtod_l+0x72>
 8007236:	2301      	movs	r3, #1
 8007238:	9309      	str	r3, [sp, #36]	@ 0x24
 800723a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800723c:	930c      	str	r3, [sp, #48]	@ 0x30
 800723e:	2300      	movs	r3, #0
 8007240:	9308      	str	r3, [sp, #32]
 8007242:	930a      	str	r3, [sp, #40]	@ 0x28
 8007244:	461f      	mov	r7, r3
 8007246:	220a      	movs	r2, #10
 8007248:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800724a:	7805      	ldrb	r5, [r0, #0]
 800724c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007250:	b2d9      	uxtb	r1, r3
 8007252:	2909      	cmp	r1, #9
 8007254:	d928      	bls.n	80072a8 <_strtod_l+0x1a8>
 8007256:	494e      	ldr	r1, [pc, #312]	@ (8007390 <_strtod_l+0x290>)
 8007258:	2201      	movs	r2, #1
 800725a:	f001 fe19 	bl	8008e90 <strncmp>
 800725e:	2800      	cmp	r0, #0
 8007260:	d032      	beq.n	80072c8 <_strtod_l+0x1c8>
 8007262:	2000      	movs	r0, #0
 8007264:	462a      	mov	r2, r5
 8007266:	4681      	mov	r9, r0
 8007268:	463d      	mov	r5, r7
 800726a:	4603      	mov	r3, r0
 800726c:	2a65      	cmp	r2, #101	@ 0x65
 800726e:	d001      	beq.n	8007274 <_strtod_l+0x174>
 8007270:	2a45      	cmp	r2, #69	@ 0x45
 8007272:	d114      	bne.n	800729e <_strtod_l+0x19e>
 8007274:	b91d      	cbnz	r5, 800727e <_strtod_l+0x17e>
 8007276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007278:	4302      	orrs	r2, r0
 800727a:	d095      	beq.n	80071a8 <_strtod_l+0xa8>
 800727c:	2500      	movs	r5, #0
 800727e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007280:	1c62      	adds	r2, r4, #1
 8007282:	9219      	str	r2, [sp, #100]	@ 0x64
 8007284:	7862      	ldrb	r2, [r4, #1]
 8007286:	2a2b      	cmp	r2, #43	@ 0x2b
 8007288:	d077      	beq.n	800737a <_strtod_l+0x27a>
 800728a:	2a2d      	cmp	r2, #45	@ 0x2d
 800728c:	d07b      	beq.n	8007386 <_strtod_l+0x286>
 800728e:	f04f 0c00 	mov.w	ip, #0
 8007292:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007296:	2909      	cmp	r1, #9
 8007298:	f240 8082 	bls.w	80073a0 <_strtod_l+0x2a0>
 800729c:	9419      	str	r4, [sp, #100]	@ 0x64
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	e0a2      	b.n	80073ea <_strtod_l+0x2ea>
 80072a4:	2300      	movs	r3, #0
 80072a6:	e7c7      	b.n	8007238 <_strtod_l+0x138>
 80072a8:	2f08      	cmp	r7, #8
 80072aa:	bfd5      	itete	le
 80072ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80072ae:	9908      	ldrgt	r1, [sp, #32]
 80072b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80072b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072b8:	f100 0001 	add.w	r0, r0, #1
 80072bc:	bfd4      	ite	le
 80072be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80072c0:	9308      	strgt	r3, [sp, #32]
 80072c2:	3701      	adds	r7, #1
 80072c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80072c6:	e7bf      	b.n	8007248 <_strtod_l+0x148>
 80072c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80072ce:	785a      	ldrb	r2, [r3, #1]
 80072d0:	b37f      	cbz	r7, 8007332 <_strtod_l+0x232>
 80072d2:	4681      	mov	r9, r0
 80072d4:	463d      	mov	r5, r7
 80072d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80072da:	2b09      	cmp	r3, #9
 80072dc:	d912      	bls.n	8007304 <_strtod_l+0x204>
 80072de:	2301      	movs	r3, #1
 80072e0:	e7c4      	b.n	800726c <_strtod_l+0x16c>
 80072e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80072e8:	785a      	ldrb	r2, [r3, #1]
 80072ea:	3001      	adds	r0, #1
 80072ec:	2a30      	cmp	r2, #48	@ 0x30
 80072ee:	d0f8      	beq.n	80072e2 <_strtod_l+0x1e2>
 80072f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	f200 84d3 	bhi.w	8007ca0 <_strtod_l+0xba0>
 80072fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80072fe:	4681      	mov	r9, r0
 8007300:	2000      	movs	r0, #0
 8007302:	4605      	mov	r5, r0
 8007304:	3a30      	subs	r2, #48	@ 0x30
 8007306:	f100 0301 	add.w	r3, r0, #1
 800730a:	d02a      	beq.n	8007362 <_strtod_l+0x262>
 800730c:	4499      	add	r9, r3
 800730e:	eb00 0c05 	add.w	ip, r0, r5
 8007312:	462b      	mov	r3, r5
 8007314:	210a      	movs	r1, #10
 8007316:	4563      	cmp	r3, ip
 8007318:	d10d      	bne.n	8007336 <_strtod_l+0x236>
 800731a:	1c69      	adds	r1, r5, #1
 800731c:	4401      	add	r1, r0
 800731e:	4428      	add	r0, r5
 8007320:	2808      	cmp	r0, #8
 8007322:	dc16      	bgt.n	8007352 <_strtod_l+0x252>
 8007324:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007326:	230a      	movs	r3, #10
 8007328:	fb03 2300 	mla	r3, r3, r0, r2
 800732c:	930a      	str	r3, [sp, #40]	@ 0x28
 800732e:	2300      	movs	r3, #0
 8007330:	e018      	b.n	8007364 <_strtod_l+0x264>
 8007332:	4638      	mov	r0, r7
 8007334:	e7da      	b.n	80072ec <_strtod_l+0x1ec>
 8007336:	2b08      	cmp	r3, #8
 8007338:	f103 0301 	add.w	r3, r3, #1
 800733c:	dc03      	bgt.n	8007346 <_strtod_l+0x246>
 800733e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007340:	434e      	muls	r6, r1
 8007342:	960a      	str	r6, [sp, #40]	@ 0x28
 8007344:	e7e7      	b.n	8007316 <_strtod_l+0x216>
 8007346:	2b10      	cmp	r3, #16
 8007348:	bfde      	ittt	le
 800734a:	9e08      	ldrle	r6, [sp, #32]
 800734c:	434e      	mulle	r6, r1
 800734e:	9608      	strle	r6, [sp, #32]
 8007350:	e7e1      	b.n	8007316 <_strtod_l+0x216>
 8007352:	280f      	cmp	r0, #15
 8007354:	dceb      	bgt.n	800732e <_strtod_l+0x22e>
 8007356:	9808      	ldr	r0, [sp, #32]
 8007358:	230a      	movs	r3, #10
 800735a:	fb03 2300 	mla	r3, r3, r0, r2
 800735e:	9308      	str	r3, [sp, #32]
 8007360:	e7e5      	b.n	800732e <_strtod_l+0x22e>
 8007362:	4629      	mov	r1, r5
 8007364:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007366:	1c50      	adds	r0, r2, #1
 8007368:	9019      	str	r0, [sp, #100]	@ 0x64
 800736a:	7852      	ldrb	r2, [r2, #1]
 800736c:	4618      	mov	r0, r3
 800736e:	460d      	mov	r5, r1
 8007370:	e7b1      	b.n	80072d6 <_strtod_l+0x1d6>
 8007372:	f04f 0900 	mov.w	r9, #0
 8007376:	2301      	movs	r3, #1
 8007378:	e77d      	b.n	8007276 <_strtod_l+0x176>
 800737a:	f04f 0c00 	mov.w	ip, #0
 800737e:	1ca2      	adds	r2, r4, #2
 8007380:	9219      	str	r2, [sp, #100]	@ 0x64
 8007382:	78a2      	ldrb	r2, [r4, #2]
 8007384:	e785      	b.n	8007292 <_strtod_l+0x192>
 8007386:	f04f 0c01 	mov.w	ip, #1
 800738a:	e7f8      	b.n	800737e <_strtod_l+0x27e>
 800738c:	0800bbd8 	.word	0x0800bbd8
 8007390:	0800bbc0 	.word	0x0800bbc0
 8007394:	7ff00000 	.word	0x7ff00000
 8007398:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800739a:	1c51      	adds	r1, r2, #1
 800739c:	9119      	str	r1, [sp, #100]	@ 0x64
 800739e:	7852      	ldrb	r2, [r2, #1]
 80073a0:	2a30      	cmp	r2, #48	@ 0x30
 80073a2:	d0f9      	beq.n	8007398 <_strtod_l+0x298>
 80073a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80073a8:	2908      	cmp	r1, #8
 80073aa:	f63f af78 	bhi.w	800729e <_strtod_l+0x19e>
 80073ae:	3a30      	subs	r2, #48	@ 0x30
 80073b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80073b6:	f04f 080a 	mov.w	r8, #10
 80073ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073bc:	1c56      	adds	r6, r2, #1
 80073be:	9619      	str	r6, [sp, #100]	@ 0x64
 80073c0:	7852      	ldrb	r2, [r2, #1]
 80073c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80073c6:	f1be 0f09 	cmp.w	lr, #9
 80073ca:	d939      	bls.n	8007440 <_strtod_l+0x340>
 80073cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80073ce:	1a76      	subs	r6, r6, r1
 80073d0:	2e08      	cmp	r6, #8
 80073d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80073d6:	dc03      	bgt.n	80073e0 <_strtod_l+0x2e0>
 80073d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073da:	4588      	cmp	r8, r1
 80073dc:	bfa8      	it	ge
 80073de:	4688      	movge	r8, r1
 80073e0:	f1bc 0f00 	cmp.w	ip, #0
 80073e4:	d001      	beq.n	80073ea <_strtod_l+0x2ea>
 80073e6:	f1c8 0800 	rsb	r8, r8, #0
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	d14e      	bne.n	800748c <_strtod_l+0x38c>
 80073ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073f0:	4308      	orrs	r0, r1
 80073f2:	f47f aebe 	bne.w	8007172 <_strtod_l+0x72>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f47f aed6 	bne.w	80071a8 <_strtod_l+0xa8>
 80073fc:	2a69      	cmp	r2, #105	@ 0x69
 80073fe:	d028      	beq.n	8007452 <_strtod_l+0x352>
 8007400:	dc25      	bgt.n	800744e <_strtod_l+0x34e>
 8007402:	2a49      	cmp	r2, #73	@ 0x49
 8007404:	d025      	beq.n	8007452 <_strtod_l+0x352>
 8007406:	2a4e      	cmp	r2, #78	@ 0x4e
 8007408:	f47f aece 	bne.w	80071a8 <_strtod_l+0xa8>
 800740c:	499b      	ldr	r1, [pc, #620]	@ (800767c <_strtod_l+0x57c>)
 800740e:	a819      	add	r0, sp, #100	@ 0x64
 8007410:	f002 ff96 	bl	800a340 <__match>
 8007414:	2800      	cmp	r0, #0
 8007416:	f43f aec7 	beq.w	80071a8 <_strtod_l+0xa8>
 800741a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b28      	cmp	r3, #40	@ 0x28
 8007420:	d12e      	bne.n	8007480 <_strtod_l+0x380>
 8007422:	4997      	ldr	r1, [pc, #604]	@ (8007680 <_strtod_l+0x580>)
 8007424:	aa1c      	add	r2, sp, #112	@ 0x70
 8007426:	a819      	add	r0, sp, #100	@ 0x64
 8007428:	f002 ff9e 	bl	800a368 <__hexnan>
 800742c:	2805      	cmp	r0, #5
 800742e:	d127      	bne.n	8007480 <_strtod_l+0x380>
 8007430:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007432:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007436:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800743a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800743e:	e698      	b.n	8007172 <_strtod_l+0x72>
 8007440:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007442:	fb08 2101 	mla	r1, r8, r1, r2
 8007446:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800744a:	920e      	str	r2, [sp, #56]	@ 0x38
 800744c:	e7b5      	b.n	80073ba <_strtod_l+0x2ba>
 800744e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007450:	e7da      	b.n	8007408 <_strtod_l+0x308>
 8007452:	498c      	ldr	r1, [pc, #560]	@ (8007684 <_strtod_l+0x584>)
 8007454:	a819      	add	r0, sp, #100	@ 0x64
 8007456:	f002 ff73 	bl	800a340 <__match>
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f aea4 	beq.w	80071a8 <_strtod_l+0xa8>
 8007460:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007462:	4989      	ldr	r1, [pc, #548]	@ (8007688 <_strtod_l+0x588>)
 8007464:	3b01      	subs	r3, #1
 8007466:	a819      	add	r0, sp, #100	@ 0x64
 8007468:	9319      	str	r3, [sp, #100]	@ 0x64
 800746a:	f002 ff69 	bl	800a340 <__match>
 800746e:	b910      	cbnz	r0, 8007476 <_strtod_l+0x376>
 8007470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007472:	3301      	adds	r3, #1
 8007474:	9319      	str	r3, [sp, #100]	@ 0x64
 8007476:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007698 <_strtod_l+0x598>
 800747a:	f04f 0a00 	mov.w	sl, #0
 800747e:	e678      	b.n	8007172 <_strtod_l+0x72>
 8007480:	4882      	ldr	r0, [pc, #520]	@ (800768c <_strtod_l+0x58c>)
 8007482:	f001 fe11 	bl	80090a8 <nan>
 8007486:	ec5b ab10 	vmov	sl, fp, d0
 800748a:	e672      	b.n	8007172 <_strtod_l+0x72>
 800748c:	eba8 0309 	sub.w	r3, r8, r9
 8007490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007492:	9309      	str	r3, [sp, #36]	@ 0x24
 8007494:	2f00      	cmp	r7, #0
 8007496:	bf08      	it	eq
 8007498:	462f      	moveq	r7, r5
 800749a:	2d10      	cmp	r5, #16
 800749c:	462c      	mov	r4, r5
 800749e:	bfa8      	it	ge
 80074a0:	2410      	movge	r4, #16
 80074a2:	f7f9 f82f 	bl	8000504 <__aeabi_ui2d>
 80074a6:	2d09      	cmp	r5, #9
 80074a8:	4682      	mov	sl, r0
 80074aa:	468b      	mov	fp, r1
 80074ac:	dc13      	bgt.n	80074d6 <_strtod_l+0x3d6>
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f43f ae5e 	beq.w	8007172 <_strtod_l+0x72>
 80074b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b8:	dd78      	ble.n	80075ac <_strtod_l+0x4ac>
 80074ba:	2b16      	cmp	r3, #22
 80074bc:	dc5f      	bgt.n	800757e <_strtod_l+0x47e>
 80074be:	4974      	ldr	r1, [pc, #464]	@ (8007690 <_strtod_l+0x590>)
 80074c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c8:	4652      	mov	r2, sl
 80074ca:	465b      	mov	r3, fp
 80074cc:	f7f9 f894 	bl	80005f8 <__aeabi_dmul>
 80074d0:	4682      	mov	sl, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	e64d      	b.n	8007172 <_strtod_l+0x72>
 80074d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007690 <_strtod_l+0x590>)
 80074d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80074e0:	f7f9 f88a 	bl	80005f8 <__aeabi_dmul>
 80074e4:	4682      	mov	sl, r0
 80074e6:	9808      	ldr	r0, [sp, #32]
 80074e8:	468b      	mov	fp, r1
 80074ea:	f7f9 f80b 	bl	8000504 <__aeabi_ui2d>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4650      	mov	r0, sl
 80074f4:	4659      	mov	r1, fp
 80074f6:	f7f8 fec9 	bl	800028c <__adddf3>
 80074fa:	2d0f      	cmp	r5, #15
 80074fc:	4682      	mov	sl, r0
 80074fe:	468b      	mov	fp, r1
 8007500:	ddd5      	ble.n	80074ae <_strtod_l+0x3ae>
 8007502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007504:	1b2c      	subs	r4, r5, r4
 8007506:	441c      	add	r4, r3
 8007508:	2c00      	cmp	r4, #0
 800750a:	f340 8096 	ble.w	800763a <_strtod_l+0x53a>
 800750e:	f014 030f 	ands.w	r3, r4, #15
 8007512:	d00a      	beq.n	800752a <_strtod_l+0x42a>
 8007514:	495e      	ldr	r1, [pc, #376]	@ (8007690 <_strtod_l+0x590>)
 8007516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800751a:	4652      	mov	r2, sl
 800751c:	465b      	mov	r3, fp
 800751e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007522:	f7f9 f869 	bl	80005f8 <__aeabi_dmul>
 8007526:	4682      	mov	sl, r0
 8007528:	468b      	mov	fp, r1
 800752a:	f034 040f 	bics.w	r4, r4, #15
 800752e:	d073      	beq.n	8007618 <_strtod_l+0x518>
 8007530:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007534:	dd48      	ble.n	80075c8 <_strtod_l+0x4c8>
 8007536:	2400      	movs	r4, #0
 8007538:	46a0      	mov	r8, r4
 800753a:	940a      	str	r4, [sp, #40]	@ 0x28
 800753c:	46a1      	mov	r9, r4
 800753e:	9a05      	ldr	r2, [sp, #20]
 8007540:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007698 <_strtod_l+0x598>
 8007544:	2322      	movs	r3, #34	@ 0x22
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	f04f 0a00 	mov.w	sl, #0
 800754c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800754e:	2b00      	cmp	r3, #0
 8007550:	f43f ae0f 	beq.w	8007172 <_strtod_l+0x72>
 8007554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007556:	9805      	ldr	r0, [sp, #20]
 8007558:	f003 f8aa 	bl	800a6b0 <_Bfree>
 800755c:	9805      	ldr	r0, [sp, #20]
 800755e:	4649      	mov	r1, r9
 8007560:	f003 f8a6 	bl	800a6b0 <_Bfree>
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	4641      	mov	r1, r8
 8007568:	f003 f8a2 	bl	800a6b0 <_Bfree>
 800756c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800756e:	9805      	ldr	r0, [sp, #20]
 8007570:	f003 f89e 	bl	800a6b0 <_Bfree>
 8007574:	9805      	ldr	r0, [sp, #20]
 8007576:	4621      	mov	r1, r4
 8007578:	f003 f89a 	bl	800a6b0 <_Bfree>
 800757c:	e5f9      	b.n	8007172 <_strtod_l+0x72>
 800757e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007580:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007584:	4293      	cmp	r3, r2
 8007586:	dbbc      	blt.n	8007502 <_strtod_l+0x402>
 8007588:	4c41      	ldr	r4, [pc, #260]	@ (8007690 <_strtod_l+0x590>)
 800758a:	f1c5 050f 	rsb	r5, r5, #15
 800758e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007592:	4652      	mov	r2, sl
 8007594:	465b      	mov	r3, fp
 8007596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759a:	f7f9 f82d 	bl	80005f8 <__aeabi_dmul>
 800759e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a0:	1b5d      	subs	r5, r3, r5
 80075a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075aa:	e78f      	b.n	80074cc <_strtod_l+0x3cc>
 80075ac:	3316      	adds	r3, #22
 80075ae:	dba8      	blt.n	8007502 <_strtod_l+0x402>
 80075b0:	4b37      	ldr	r3, [pc, #220]	@ (8007690 <_strtod_l+0x590>)
 80075b2:	eba9 0808 	sub.w	r8, r9, r8
 80075b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80075ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80075be:	4650      	mov	r0, sl
 80075c0:	4659      	mov	r1, fp
 80075c2:	f7f9 f943 	bl	800084c <__aeabi_ddiv>
 80075c6:	e783      	b.n	80074d0 <_strtod_l+0x3d0>
 80075c8:	4b32      	ldr	r3, [pc, #200]	@ (8007694 <_strtod_l+0x594>)
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	2300      	movs	r3, #0
 80075ce:	1124      	asrs	r4, r4, #4
 80075d0:	4650      	mov	r0, sl
 80075d2:	4659      	mov	r1, fp
 80075d4:	461e      	mov	r6, r3
 80075d6:	2c01      	cmp	r4, #1
 80075d8:	dc21      	bgt.n	800761e <_strtod_l+0x51e>
 80075da:	b10b      	cbz	r3, 80075e0 <_strtod_l+0x4e0>
 80075dc:	4682      	mov	sl, r0
 80075de:	468b      	mov	fp, r1
 80075e0:	492c      	ldr	r1, [pc, #176]	@ (8007694 <_strtod_l+0x594>)
 80075e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80075e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80075ea:	4652      	mov	r2, sl
 80075ec:	465b      	mov	r3, fp
 80075ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f2:	f7f9 f801 	bl	80005f8 <__aeabi_dmul>
 80075f6:	4b28      	ldr	r3, [pc, #160]	@ (8007698 <_strtod_l+0x598>)
 80075f8:	460a      	mov	r2, r1
 80075fa:	400b      	ands	r3, r1
 80075fc:	4927      	ldr	r1, [pc, #156]	@ (800769c <_strtod_l+0x59c>)
 80075fe:	428b      	cmp	r3, r1
 8007600:	4682      	mov	sl, r0
 8007602:	d898      	bhi.n	8007536 <_strtod_l+0x436>
 8007604:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007608:	428b      	cmp	r3, r1
 800760a:	bf86      	itte	hi
 800760c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80076a0 <_strtod_l+0x5a0>
 8007610:	f04f 3aff 	movhi.w	sl, #4294967295
 8007614:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007618:	2300      	movs	r3, #0
 800761a:	9308      	str	r3, [sp, #32]
 800761c:	e07a      	b.n	8007714 <_strtod_l+0x614>
 800761e:	07e2      	lsls	r2, r4, #31
 8007620:	d505      	bpl.n	800762e <_strtod_l+0x52e>
 8007622:	9b08      	ldr	r3, [sp, #32]
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 ffe6 	bl	80005f8 <__aeabi_dmul>
 800762c:	2301      	movs	r3, #1
 800762e:	9a08      	ldr	r2, [sp, #32]
 8007630:	3208      	adds	r2, #8
 8007632:	3601      	adds	r6, #1
 8007634:	1064      	asrs	r4, r4, #1
 8007636:	9208      	str	r2, [sp, #32]
 8007638:	e7cd      	b.n	80075d6 <_strtod_l+0x4d6>
 800763a:	d0ed      	beq.n	8007618 <_strtod_l+0x518>
 800763c:	4264      	negs	r4, r4
 800763e:	f014 020f 	ands.w	r2, r4, #15
 8007642:	d00a      	beq.n	800765a <_strtod_l+0x55a>
 8007644:	4b12      	ldr	r3, [pc, #72]	@ (8007690 <_strtod_l+0x590>)
 8007646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800764a:	4650      	mov	r0, sl
 800764c:	4659      	mov	r1, fp
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	f7f9 f8fb 	bl	800084c <__aeabi_ddiv>
 8007656:	4682      	mov	sl, r0
 8007658:	468b      	mov	fp, r1
 800765a:	1124      	asrs	r4, r4, #4
 800765c:	d0dc      	beq.n	8007618 <_strtod_l+0x518>
 800765e:	2c1f      	cmp	r4, #31
 8007660:	dd20      	ble.n	80076a4 <_strtod_l+0x5a4>
 8007662:	2400      	movs	r4, #0
 8007664:	46a0      	mov	r8, r4
 8007666:	940a      	str	r4, [sp, #40]	@ 0x28
 8007668:	46a1      	mov	r9, r4
 800766a:	9a05      	ldr	r2, [sp, #20]
 800766c:	2322      	movs	r3, #34	@ 0x22
 800766e:	f04f 0a00 	mov.w	sl, #0
 8007672:	f04f 0b00 	mov.w	fp, #0
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	e768      	b.n	800754c <_strtod_l+0x44c>
 800767a:	bf00      	nop
 800767c:	0800bc25 	.word	0x0800bc25
 8007680:	0800bbc4 	.word	0x0800bbc4
 8007684:	0800bc1d 	.word	0x0800bc1d
 8007688:	0800bd09 	.word	0x0800bd09
 800768c:	0800bd05 	.word	0x0800bd05
 8007690:	0800be70 	.word	0x0800be70
 8007694:	0800be48 	.word	0x0800be48
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	7ca00000 	.word	0x7ca00000
 80076a0:	7fefffff 	.word	0x7fefffff
 80076a4:	f014 0310 	ands.w	r3, r4, #16
 80076a8:	bf18      	it	ne
 80076aa:	236a      	movne	r3, #106	@ 0x6a
 80076ac:	4ea9      	ldr	r6, [pc, #676]	@ (8007954 <_strtod_l+0x854>)
 80076ae:	9308      	str	r3, [sp, #32]
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	2300      	movs	r3, #0
 80076b6:	07e2      	lsls	r2, r4, #31
 80076b8:	d504      	bpl.n	80076c4 <_strtod_l+0x5c4>
 80076ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076be:	f7f8 ff9b 	bl	80005f8 <__aeabi_dmul>
 80076c2:	2301      	movs	r3, #1
 80076c4:	1064      	asrs	r4, r4, #1
 80076c6:	f106 0608 	add.w	r6, r6, #8
 80076ca:	d1f4      	bne.n	80076b6 <_strtod_l+0x5b6>
 80076cc:	b10b      	cbz	r3, 80076d2 <_strtod_l+0x5d2>
 80076ce:	4682      	mov	sl, r0
 80076d0:	468b      	mov	fp, r1
 80076d2:	9b08      	ldr	r3, [sp, #32]
 80076d4:	b1b3      	cbz	r3, 8007704 <_strtod_l+0x604>
 80076d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80076de:	2b00      	cmp	r3, #0
 80076e0:	4659      	mov	r1, fp
 80076e2:	dd0f      	ble.n	8007704 <_strtod_l+0x604>
 80076e4:	2b1f      	cmp	r3, #31
 80076e6:	dd55      	ble.n	8007794 <_strtod_l+0x694>
 80076e8:	2b34      	cmp	r3, #52	@ 0x34
 80076ea:	bfde      	ittt	le
 80076ec:	f04f 33ff 	movle.w	r3, #4294967295
 80076f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80076f4:	4093      	lslle	r3, r2
 80076f6:	f04f 0a00 	mov.w	sl, #0
 80076fa:	bfcc      	ite	gt
 80076fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007700:	ea03 0b01 	andle.w	fp, r3, r1
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	4650      	mov	r0, sl
 800770a:	4659      	mov	r1, fp
 800770c:	f7f9 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007710:	2800      	cmp	r0, #0
 8007712:	d1a6      	bne.n	8007662 <_strtod_l+0x562>
 8007714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800771a:	9805      	ldr	r0, [sp, #20]
 800771c:	462b      	mov	r3, r5
 800771e:	463a      	mov	r2, r7
 8007720:	f003 f82e 	bl	800a780 <__s2b>
 8007724:	900a      	str	r0, [sp, #40]	@ 0x28
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f af05 	beq.w	8007536 <_strtod_l+0x436>
 800772c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800772e:	2a00      	cmp	r2, #0
 8007730:	eba9 0308 	sub.w	r3, r9, r8
 8007734:	bfa8      	it	ge
 8007736:	2300      	movge	r3, #0
 8007738:	9312      	str	r3, [sp, #72]	@ 0x48
 800773a:	2400      	movs	r4, #0
 800773c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007740:	9316      	str	r3, [sp, #88]	@ 0x58
 8007742:	46a0      	mov	r8, r4
 8007744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	6859      	ldr	r1, [r3, #4]
 800774a:	f002 ff71 	bl	800a630 <_Balloc>
 800774e:	4681      	mov	r9, r0
 8007750:	2800      	cmp	r0, #0
 8007752:	f43f aef4 	beq.w	800753e <_strtod_l+0x43e>
 8007756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	3202      	adds	r2, #2
 800775c:	f103 010c 	add.w	r1, r3, #12
 8007760:	0092      	lsls	r2, r2, #2
 8007762:	300c      	adds	r0, #12
 8007764:	f001 fc8f 	bl	8009086 <memcpy>
 8007768:	ec4b ab10 	vmov	d0, sl, fp
 800776c:	9805      	ldr	r0, [sp, #20]
 800776e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007770:	a91b      	add	r1, sp, #108	@ 0x6c
 8007772:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007776:	f003 fb3f 	bl	800adf8 <__d2b>
 800777a:	901a      	str	r0, [sp, #104]	@ 0x68
 800777c:	2800      	cmp	r0, #0
 800777e:	f43f aede 	beq.w	800753e <_strtod_l+0x43e>
 8007782:	9805      	ldr	r0, [sp, #20]
 8007784:	2101      	movs	r1, #1
 8007786:	f003 f891 	bl	800a8ac <__i2b>
 800778a:	4680      	mov	r8, r0
 800778c:	b948      	cbnz	r0, 80077a2 <_strtod_l+0x6a2>
 800778e:	f04f 0800 	mov.w	r8, #0
 8007792:	e6d4      	b.n	800753e <_strtod_l+0x43e>
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	ea03 0a0a 	and.w	sl, r3, sl
 80077a0:	e7b0      	b.n	8007704 <_strtod_l+0x604>
 80077a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80077a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	bfab      	itete	ge
 80077aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80077ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80077ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80077b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80077b2:	bfac      	ite	ge
 80077b4:	18ef      	addge	r7, r5, r3
 80077b6:	1b5e      	sublt	r6, r3, r5
 80077b8:	9b08      	ldr	r3, [sp, #32]
 80077ba:	1aed      	subs	r5, r5, r3
 80077bc:	4415      	add	r5, r2
 80077be:	4b66      	ldr	r3, [pc, #408]	@ (8007958 <_strtod_l+0x858>)
 80077c0:	3d01      	subs	r5, #1
 80077c2:	429d      	cmp	r5, r3
 80077c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80077c8:	da50      	bge.n	800786c <_strtod_l+0x76c>
 80077ca:	1b5b      	subs	r3, r3, r5
 80077cc:	2b1f      	cmp	r3, #31
 80077ce:	eba2 0203 	sub.w	r2, r2, r3
 80077d2:	f04f 0101 	mov.w	r1, #1
 80077d6:	dc3d      	bgt.n	8007854 <_strtod_l+0x754>
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077de:	2300      	movs	r3, #0
 80077e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80077e2:	18bd      	adds	r5, r7, r2
 80077e4:	9b08      	ldr	r3, [sp, #32]
 80077e6:	42af      	cmp	r7, r5
 80077e8:	4416      	add	r6, r2
 80077ea:	441e      	add	r6, r3
 80077ec:	463b      	mov	r3, r7
 80077ee:	bfa8      	it	ge
 80077f0:	462b      	movge	r3, r5
 80077f2:	42b3      	cmp	r3, r6
 80077f4:	bfa8      	it	ge
 80077f6:	4633      	movge	r3, r6
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfc2      	ittt	gt
 80077fc:	1aed      	subgt	r5, r5, r3
 80077fe:	1af6      	subgt	r6, r6, r3
 8007800:	1aff      	subgt	r7, r7, r3
 8007802:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd16      	ble.n	8007836 <_strtod_l+0x736>
 8007808:	4641      	mov	r1, r8
 800780a:	9805      	ldr	r0, [sp, #20]
 800780c:	461a      	mov	r2, r3
 800780e:	f003 f90d 	bl	800aa2c <__pow5mult>
 8007812:	4680      	mov	r8, r0
 8007814:	2800      	cmp	r0, #0
 8007816:	d0ba      	beq.n	800778e <_strtod_l+0x68e>
 8007818:	4601      	mov	r1, r0
 800781a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800781c:	9805      	ldr	r0, [sp, #20]
 800781e:	f003 f85b 	bl	800a8d8 <__multiply>
 8007822:	900e      	str	r0, [sp, #56]	@ 0x38
 8007824:	2800      	cmp	r0, #0
 8007826:	f43f ae8a 	beq.w	800753e <_strtod_l+0x43e>
 800782a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800782c:	9805      	ldr	r0, [sp, #20]
 800782e:	f002 ff3f 	bl	800a6b0 <_Bfree>
 8007832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007834:	931a      	str	r3, [sp, #104]	@ 0x68
 8007836:	2d00      	cmp	r5, #0
 8007838:	dc1d      	bgt.n	8007876 <_strtod_l+0x776>
 800783a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd23      	ble.n	8007888 <_strtod_l+0x788>
 8007840:	4649      	mov	r1, r9
 8007842:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007844:	9805      	ldr	r0, [sp, #20]
 8007846:	f003 f8f1 	bl	800aa2c <__pow5mult>
 800784a:	4681      	mov	r9, r0
 800784c:	b9e0      	cbnz	r0, 8007888 <_strtod_l+0x788>
 800784e:	f04f 0900 	mov.w	r9, #0
 8007852:	e674      	b.n	800753e <_strtod_l+0x43e>
 8007854:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007858:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800785c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007860:	35e2      	adds	r5, #226	@ 0xe2
 8007862:	fa01 f305 	lsl.w	r3, r1, r5
 8007866:	9310      	str	r3, [sp, #64]	@ 0x40
 8007868:	9113      	str	r1, [sp, #76]	@ 0x4c
 800786a:	e7ba      	b.n	80077e2 <_strtod_l+0x6e2>
 800786c:	2300      	movs	r3, #0
 800786e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007870:	2301      	movs	r3, #1
 8007872:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007874:	e7b5      	b.n	80077e2 <_strtod_l+0x6e2>
 8007876:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007878:	9805      	ldr	r0, [sp, #20]
 800787a:	462a      	mov	r2, r5
 800787c:	f003 f930 	bl	800aae0 <__lshift>
 8007880:	901a      	str	r0, [sp, #104]	@ 0x68
 8007882:	2800      	cmp	r0, #0
 8007884:	d1d9      	bne.n	800783a <_strtod_l+0x73a>
 8007886:	e65a      	b.n	800753e <_strtod_l+0x43e>
 8007888:	2e00      	cmp	r6, #0
 800788a:	dd07      	ble.n	800789c <_strtod_l+0x79c>
 800788c:	4649      	mov	r1, r9
 800788e:	9805      	ldr	r0, [sp, #20]
 8007890:	4632      	mov	r2, r6
 8007892:	f003 f925 	bl	800aae0 <__lshift>
 8007896:	4681      	mov	r9, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	d0d8      	beq.n	800784e <_strtod_l+0x74e>
 800789c:	2f00      	cmp	r7, #0
 800789e:	dd08      	ble.n	80078b2 <_strtod_l+0x7b2>
 80078a0:	4641      	mov	r1, r8
 80078a2:	9805      	ldr	r0, [sp, #20]
 80078a4:	463a      	mov	r2, r7
 80078a6:	f003 f91b 	bl	800aae0 <__lshift>
 80078aa:	4680      	mov	r8, r0
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f43f ae46 	beq.w	800753e <_strtod_l+0x43e>
 80078b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078b4:	9805      	ldr	r0, [sp, #20]
 80078b6:	464a      	mov	r2, r9
 80078b8:	f003 f99a 	bl	800abf0 <__mdiff>
 80078bc:	4604      	mov	r4, r0
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f ae3d 	beq.w	800753e <_strtod_l+0x43e>
 80078c4:	68c3      	ldr	r3, [r0, #12]
 80078c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078c8:	2300      	movs	r3, #0
 80078ca:	60c3      	str	r3, [r0, #12]
 80078cc:	4641      	mov	r1, r8
 80078ce:	f003 f973 	bl	800abb8 <__mcmp>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	da46      	bge.n	8007964 <_strtod_l+0x864>
 80078d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d8:	ea53 030a 	orrs.w	r3, r3, sl
 80078dc:	d16c      	bne.n	80079b8 <_strtod_l+0x8b8>
 80078de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d168      	bne.n	80079b8 <_strtod_l+0x8b8>
 80078e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078ea:	0d1b      	lsrs	r3, r3, #20
 80078ec:	051b      	lsls	r3, r3, #20
 80078ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078f2:	d961      	bls.n	80079b8 <_strtod_l+0x8b8>
 80078f4:	6963      	ldr	r3, [r4, #20]
 80078f6:	b913      	cbnz	r3, 80078fe <_strtod_l+0x7fe>
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	dd5c      	ble.n	80079b8 <_strtod_l+0x8b8>
 80078fe:	4621      	mov	r1, r4
 8007900:	2201      	movs	r2, #1
 8007902:	9805      	ldr	r0, [sp, #20]
 8007904:	f003 f8ec 	bl	800aae0 <__lshift>
 8007908:	4641      	mov	r1, r8
 800790a:	4604      	mov	r4, r0
 800790c:	f003 f954 	bl	800abb8 <__mcmp>
 8007910:	2800      	cmp	r0, #0
 8007912:	dd51      	ble.n	80079b8 <_strtod_l+0x8b8>
 8007914:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007918:	9a08      	ldr	r2, [sp, #32]
 800791a:	0d1b      	lsrs	r3, r3, #20
 800791c:	051b      	lsls	r3, r3, #20
 800791e:	2a00      	cmp	r2, #0
 8007920:	d06b      	beq.n	80079fa <_strtod_l+0x8fa>
 8007922:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007926:	d868      	bhi.n	80079fa <_strtod_l+0x8fa>
 8007928:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800792c:	f67f ae9d 	bls.w	800766a <_strtod_l+0x56a>
 8007930:	4b0a      	ldr	r3, [pc, #40]	@ (800795c <_strtod_l+0x85c>)
 8007932:	4650      	mov	r0, sl
 8007934:	4659      	mov	r1, fp
 8007936:	2200      	movs	r2, #0
 8007938:	f7f8 fe5e 	bl	80005f8 <__aeabi_dmul>
 800793c:	4b08      	ldr	r3, [pc, #32]	@ (8007960 <_strtod_l+0x860>)
 800793e:	400b      	ands	r3, r1
 8007940:	4682      	mov	sl, r0
 8007942:	468b      	mov	fp, r1
 8007944:	2b00      	cmp	r3, #0
 8007946:	f47f ae05 	bne.w	8007554 <_strtod_l+0x454>
 800794a:	9a05      	ldr	r2, [sp, #20]
 800794c:	2322      	movs	r3, #34	@ 0x22
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	e600      	b.n	8007554 <_strtod_l+0x454>
 8007952:	bf00      	nop
 8007954:	0800bbf0 	.word	0x0800bbf0
 8007958:	fffffc02 	.word	0xfffffc02
 800795c:	39500000 	.word	0x39500000
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007968:	d165      	bne.n	8007a36 <_strtod_l+0x936>
 800796a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800796c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007970:	b35a      	cbz	r2, 80079ca <_strtod_l+0x8ca>
 8007972:	4a9f      	ldr	r2, [pc, #636]	@ (8007bf0 <_strtod_l+0xaf0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d12b      	bne.n	80079d0 <_strtod_l+0x8d0>
 8007978:	9b08      	ldr	r3, [sp, #32]
 800797a:	4651      	mov	r1, sl
 800797c:	b303      	cbz	r3, 80079c0 <_strtod_l+0x8c0>
 800797e:	4b9d      	ldr	r3, [pc, #628]	@ (8007bf4 <_strtod_l+0xaf4>)
 8007980:	465a      	mov	r2, fp
 8007982:	4013      	ands	r3, r2
 8007984:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007988:	f04f 32ff 	mov.w	r2, #4294967295
 800798c:	d81b      	bhi.n	80079c6 <_strtod_l+0x8c6>
 800798e:	0d1b      	lsrs	r3, r3, #20
 8007990:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	4299      	cmp	r1, r3
 800799a:	d119      	bne.n	80079d0 <_strtod_l+0x8d0>
 800799c:	4b96      	ldr	r3, [pc, #600]	@ (8007bf8 <_strtod_l+0xaf8>)
 800799e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d102      	bne.n	80079aa <_strtod_l+0x8aa>
 80079a4:	3101      	adds	r1, #1
 80079a6:	f43f adca 	beq.w	800753e <_strtod_l+0x43e>
 80079aa:	4b92      	ldr	r3, [pc, #584]	@ (8007bf4 <_strtod_l+0xaf4>)
 80079ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ae:	401a      	ands	r2, r3
 80079b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80079b4:	f04f 0a00 	mov.w	sl, #0
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1b8      	bne.n	8007930 <_strtod_l+0x830>
 80079be:	e5c9      	b.n	8007554 <_strtod_l+0x454>
 80079c0:	f04f 33ff 	mov.w	r3, #4294967295
 80079c4:	e7e8      	b.n	8007998 <_strtod_l+0x898>
 80079c6:	4613      	mov	r3, r2
 80079c8:	e7e6      	b.n	8007998 <_strtod_l+0x898>
 80079ca:	ea53 030a 	orrs.w	r3, r3, sl
 80079ce:	d0a1      	beq.n	8007914 <_strtod_l+0x814>
 80079d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079d2:	b1db      	cbz	r3, 8007a0c <_strtod_l+0x90c>
 80079d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079d6:	4213      	tst	r3, r2
 80079d8:	d0ee      	beq.n	80079b8 <_strtod_l+0x8b8>
 80079da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079dc:	9a08      	ldr	r2, [sp, #32]
 80079de:	4650      	mov	r0, sl
 80079e0:	4659      	mov	r1, fp
 80079e2:	b1bb      	cbz	r3, 8007a14 <_strtod_l+0x914>
 80079e4:	f7ff fb6b 	bl	80070be <sulp>
 80079e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ec:	ec53 2b10 	vmov	r2, r3, d0
 80079f0:	f7f8 fc4c 	bl	800028c <__adddf3>
 80079f4:	4682      	mov	sl, r0
 80079f6:	468b      	mov	fp, r1
 80079f8:	e7de      	b.n	80079b8 <_strtod_l+0x8b8>
 80079fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80079fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a06:	f04f 3aff 	mov.w	sl, #4294967295
 8007a0a:	e7d5      	b.n	80079b8 <_strtod_l+0x8b8>
 8007a0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a0e:	ea13 0f0a 	tst.w	r3, sl
 8007a12:	e7e1      	b.n	80079d8 <_strtod_l+0x8d8>
 8007a14:	f7ff fb53 	bl	80070be <sulp>
 8007a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a1c:	ec53 2b10 	vmov	r2, r3, d0
 8007a20:	f7f8 fc32 	bl	8000288 <__aeabi_dsub>
 8007a24:	2200      	movs	r2, #0
 8007a26:	2300      	movs	r3, #0
 8007a28:	4682      	mov	sl, r0
 8007a2a:	468b      	mov	fp, r1
 8007a2c:	f7f9 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d0c1      	beq.n	80079b8 <_strtod_l+0x8b8>
 8007a34:	e619      	b.n	800766a <_strtod_l+0x56a>
 8007a36:	4641      	mov	r1, r8
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f003 fa35 	bl	800aea8 <__ratio>
 8007a3e:	ec57 6b10 	vmov	r6, r7, d0
 8007a42:	2200      	movs	r2, #0
 8007a44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f9 f850 	bl	8000af0 <__aeabi_dcmple>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d06f      	beq.n	8007b34 <_strtod_l+0xa34>
 8007a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d17a      	bne.n	8007b50 <_strtod_l+0xa50>
 8007a5a:	f1ba 0f00 	cmp.w	sl, #0
 8007a5e:	d158      	bne.n	8007b12 <_strtod_l+0xa12>
 8007a60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d15a      	bne.n	8007b20 <_strtod_l+0xa20>
 8007a6a:	4b64      	ldr	r3, [pc, #400]	@ (8007bfc <_strtod_l+0xafc>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4630      	mov	r0, r6
 8007a70:	4639      	mov	r1, r7
 8007a72:	f7f9 f833 	bl	8000adc <__aeabi_dcmplt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d159      	bne.n	8007b2e <_strtod_l+0xa2e>
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	4b60      	ldr	r3, [pc, #384]	@ (8007c00 <_strtod_l+0xb00>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7f8 fdb9 	bl	80005f8 <__aeabi_dmul>
 8007a86:	4606      	mov	r6, r0
 8007a88:	460f      	mov	r7, r1
 8007a8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a8e:	9606      	str	r6, [sp, #24]
 8007a90:	9307      	str	r3, [sp, #28]
 8007a92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a96:	4d57      	ldr	r5, [pc, #348]	@ (8007bf4 <_strtod_l+0xaf4>)
 8007a98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a9e:	401d      	ands	r5, r3
 8007aa0:	4b58      	ldr	r3, [pc, #352]	@ (8007c04 <_strtod_l+0xb04>)
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	f040 80b2 	bne.w	8007c0c <_strtod_l+0xb0c>
 8007aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007aae:	ec4b ab10 	vmov	d0, sl, fp
 8007ab2:	f003 f931 	bl	800ad18 <__ulp>
 8007ab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aba:	ec51 0b10 	vmov	r0, r1, d0
 8007abe:	f7f8 fd9b 	bl	80005f8 <__aeabi_dmul>
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	465b      	mov	r3, fp
 8007ac6:	f7f8 fbe1 	bl	800028c <__adddf3>
 8007aca:	460b      	mov	r3, r1
 8007acc:	4949      	ldr	r1, [pc, #292]	@ (8007bf4 <_strtod_l+0xaf4>)
 8007ace:	4a4e      	ldr	r2, [pc, #312]	@ (8007c08 <_strtod_l+0xb08>)
 8007ad0:	4019      	ands	r1, r3
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	d942      	bls.n	8007b5e <_strtod_l+0xa5e>
 8007ad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ada:	4b47      	ldr	r3, [pc, #284]	@ (8007bf8 <_strtod_l+0xaf8>)
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d103      	bne.n	8007ae8 <_strtod_l+0x9e8>
 8007ae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	f43f ad2b 	beq.w	800753e <_strtod_l+0x43e>
 8007ae8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007bf8 <_strtod_l+0xaf8>
 8007aec:	f04f 3aff 	mov.w	sl, #4294967295
 8007af0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007af2:	9805      	ldr	r0, [sp, #20]
 8007af4:	f002 fddc 	bl	800a6b0 <_Bfree>
 8007af8:	9805      	ldr	r0, [sp, #20]
 8007afa:	4649      	mov	r1, r9
 8007afc:	f002 fdd8 	bl	800a6b0 <_Bfree>
 8007b00:	9805      	ldr	r0, [sp, #20]
 8007b02:	4641      	mov	r1, r8
 8007b04:	f002 fdd4 	bl	800a6b0 <_Bfree>
 8007b08:	9805      	ldr	r0, [sp, #20]
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	f002 fdd0 	bl	800a6b0 <_Bfree>
 8007b10:	e618      	b.n	8007744 <_strtod_l+0x644>
 8007b12:	f1ba 0f01 	cmp.w	sl, #1
 8007b16:	d103      	bne.n	8007b20 <_strtod_l+0xa20>
 8007b18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f43f ada5 	beq.w	800766a <_strtod_l+0x56a>
 8007b20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007bd0 <_strtod_l+0xad0>
 8007b24:	4f35      	ldr	r7, [pc, #212]	@ (8007bfc <_strtod_l+0xafc>)
 8007b26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	e7b1      	b.n	8007a92 <_strtod_l+0x992>
 8007b2e:	4f34      	ldr	r7, [pc, #208]	@ (8007c00 <_strtod_l+0xb00>)
 8007b30:	2600      	movs	r6, #0
 8007b32:	e7aa      	b.n	8007a8a <_strtod_l+0x98a>
 8007b34:	4b32      	ldr	r3, [pc, #200]	@ (8007c00 <_strtod_l+0xb00>)
 8007b36:	4630      	mov	r0, r6
 8007b38:	4639      	mov	r1, r7
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f7f8 fd5c 	bl	80005f8 <__aeabi_dmul>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b42:	4606      	mov	r6, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d09f      	beq.n	8007a8a <_strtod_l+0x98a>
 8007b4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b4e:	e7a0      	b.n	8007a92 <_strtod_l+0x992>
 8007b50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007bd8 <_strtod_l+0xad8>
 8007b54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b58:	ec57 6b17 	vmov	r6, r7, d7
 8007b5c:	e799      	b.n	8007a92 <_strtod_l+0x992>
 8007b5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007b62:	9b08      	ldr	r3, [sp, #32]
 8007b64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1c1      	bne.n	8007af0 <_strtod_l+0x9f0>
 8007b6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b70:	0d1b      	lsrs	r3, r3, #20
 8007b72:	051b      	lsls	r3, r3, #20
 8007b74:	429d      	cmp	r5, r3
 8007b76:	d1bb      	bne.n	8007af0 <_strtod_l+0x9f0>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f7f9 f89c 	bl	8000cb8 <__aeabi_d2lz>
 8007b80:	f7f8 fd0c 	bl	800059c <__aeabi_l2d>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 fb7c 	bl	8000288 <__aeabi_dsub>
 8007b90:	460b      	mov	r3, r1
 8007b92:	4602      	mov	r2, r0
 8007b94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b9e:	ea46 060a 	orr.w	r6, r6, sl
 8007ba2:	431e      	orrs	r6, r3
 8007ba4:	d06f      	beq.n	8007c86 <_strtod_l+0xb86>
 8007ba6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007be0 <_strtod_l+0xae0>)
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 ff96 	bl	8000adc <__aeabi_dcmplt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f47f accf 	bne.w	8007554 <_strtod_l+0x454>
 8007bb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007be8 <_strtod_l+0xae8>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bc0:	f7f8 ffaa 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d093      	beq.n	8007af0 <_strtod_l+0x9f0>
 8007bc8:	e4c4      	b.n	8007554 <_strtod_l+0x454>
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	00000000 	.word	0x00000000
 8007bd4:	bff00000 	.word	0xbff00000
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	3ff00000 	.word	0x3ff00000
 8007be0:	94a03595 	.word	0x94a03595
 8007be4:	3fdfffff 	.word	0x3fdfffff
 8007be8:	35afe535 	.word	0x35afe535
 8007bec:	3fe00000 	.word	0x3fe00000
 8007bf0:	000fffff 	.word	0x000fffff
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	3fe00000 	.word	0x3fe00000
 8007c04:	7fe00000 	.word	0x7fe00000
 8007c08:	7c9fffff 	.word	0x7c9fffff
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	b323      	cbz	r3, 8007c5a <_strtod_l+0xb5a>
 8007c10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c14:	d821      	bhi.n	8007c5a <_strtod_l+0xb5a>
 8007c16:	a328      	add	r3, pc, #160	@ (adr r3, 8007cb8 <_strtod_l+0xbb8>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff66 	bl	8000af0 <__aeabi_dcmple>
 8007c24:	b1a0      	cbz	r0, 8007c50 <_strtod_l+0xb50>
 8007c26:	4639      	mov	r1, r7
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7f8 ffbd 	bl	8000ba8 <__aeabi_d2uiz>
 8007c2e:	2801      	cmp	r0, #1
 8007c30:	bf38      	it	cc
 8007c32:	2001      	movcc	r0, #1
 8007c34:	f7f8 fc66 	bl	8000504 <__aeabi_ui2d>
 8007c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	b9fb      	cbnz	r3, 8007c80 <_strtod_l+0xb80>
 8007c40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c44:	9014      	str	r0, [sp, #80]	@ 0x50
 8007c46:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007c4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c56:	1b5b      	subs	r3, r3, r5
 8007c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007c62:	f003 f859 	bl	800ad18 <__ulp>
 8007c66:	4650      	mov	r0, sl
 8007c68:	ec53 2b10 	vmov	r2, r3, d0
 8007c6c:	4659      	mov	r1, fp
 8007c6e:	f7f8 fcc3 	bl	80005f8 <__aeabi_dmul>
 8007c72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c76:	f7f8 fb09 	bl	800028c <__adddf3>
 8007c7a:	4682      	mov	sl, r0
 8007c7c:	468b      	mov	fp, r1
 8007c7e:	e770      	b.n	8007b62 <_strtod_l+0xa62>
 8007c80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c84:	e7e0      	b.n	8007c48 <_strtod_l+0xb48>
 8007c86:	a30e      	add	r3, pc, #56	@ (adr r3, 8007cc0 <_strtod_l+0xbc0>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f7f8 ff26 	bl	8000adc <__aeabi_dcmplt>
 8007c90:	e798      	b.n	8007bc4 <_strtod_l+0xac4>
 8007c92:	2300      	movs	r3, #0
 8007c94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007c98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	f7ff ba6d 	b.w	800717a <_strtod_l+0x7a>
 8007ca0:	2a65      	cmp	r2, #101	@ 0x65
 8007ca2:	f43f ab66 	beq.w	8007372 <_strtod_l+0x272>
 8007ca6:	2a45      	cmp	r2, #69	@ 0x45
 8007ca8:	f43f ab63 	beq.w	8007372 <_strtod_l+0x272>
 8007cac:	2301      	movs	r3, #1
 8007cae:	f7ff bb9e 	b.w	80073ee <_strtod_l+0x2ee>
 8007cb2:	bf00      	nop
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	ffc00000 	.word	0xffc00000
 8007cbc:	41dfffff 	.word	0x41dfffff
 8007cc0:	94a03595 	.word	0x94a03595
 8007cc4:	3fcfffff 	.word	0x3fcfffff

08007cc8 <_strtod_r>:
 8007cc8:	4b01      	ldr	r3, [pc, #4]	@ (8007cd0 <_strtod_r+0x8>)
 8007cca:	f7ff ba19 	b.w	8007100 <_strtod_l>
 8007cce:	bf00      	nop
 8007cd0:	20000098 	.word	0x20000098

08007cd4 <strtod>:
 8007cd4:	460a      	mov	r2, r1
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4802      	ldr	r0, [pc, #8]	@ (8007ce4 <strtod+0x10>)
 8007cda:	4b03      	ldr	r3, [pc, #12]	@ (8007ce8 <strtod+0x14>)
 8007cdc:	6800      	ldr	r0, [r0, #0]
 8007cde:	f7ff ba0f 	b.w	8007100 <_strtod_l>
 8007ce2:	bf00      	nop
 8007ce4:	20000204 	.word	0x20000204
 8007ce8:	20000098 	.word	0x20000098

08007cec <__cvt>:
 8007cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	ec57 6b10 	vmov	r6, r7, d0
 8007cf4:	2f00      	cmp	r7, #0
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	463b      	mov	r3, r7
 8007cfc:	bfbb      	ittet	lt
 8007cfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d02:	461f      	movlt	r7, r3
 8007d04:	2300      	movge	r3, #0
 8007d06:	232d      	movlt	r3, #45	@ 0x2d
 8007d08:	700b      	strb	r3, [r1, #0]
 8007d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d10:	4691      	mov	r9, r2
 8007d12:	f023 0820 	bic.w	r8, r3, #32
 8007d16:	bfbc      	itt	lt
 8007d18:	4632      	movlt	r2, r6
 8007d1a:	4616      	movlt	r6, r2
 8007d1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d20:	d005      	beq.n	8007d2e <__cvt+0x42>
 8007d22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d26:	d100      	bne.n	8007d2a <__cvt+0x3e>
 8007d28:	3401      	adds	r4, #1
 8007d2a:	2102      	movs	r1, #2
 8007d2c:	e000      	b.n	8007d30 <__cvt+0x44>
 8007d2e:	2103      	movs	r1, #3
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	ab02      	add	r3, sp, #8
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	ec47 6b10 	vmov	d0, r6, r7
 8007d3c:	4653      	mov	r3, sl
 8007d3e:	4622      	mov	r2, r4
 8007d40:	f001 fa66 	bl	8009210 <_dtoa_r>
 8007d44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d48:	4605      	mov	r5, r0
 8007d4a:	d119      	bne.n	8007d80 <__cvt+0x94>
 8007d4c:	f019 0f01 	tst.w	r9, #1
 8007d50:	d00e      	beq.n	8007d70 <__cvt+0x84>
 8007d52:	eb00 0904 	add.w	r9, r0, r4
 8007d56:	2200      	movs	r2, #0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	f7f8 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d62:	b108      	cbz	r0, 8007d68 <__cvt+0x7c>
 8007d64:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d68:	2230      	movs	r2, #48	@ 0x30
 8007d6a:	9b03      	ldr	r3, [sp, #12]
 8007d6c:	454b      	cmp	r3, r9
 8007d6e:	d31e      	bcc.n	8007dae <__cvt+0xc2>
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d74:	1b5b      	subs	r3, r3, r5
 8007d76:	4628      	mov	r0, r5
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	b004      	add	sp, #16
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d84:	eb00 0904 	add.w	r9, r0, r4
 8007d88:	d1e5      	bne.n	8007d56 <__cvt+0x6a>
 8007d8a:	7803      	ldrb	r3, [r0, #0]
 8007d8c:	2b30      	cmp	r3, #48	@ 0x30
 8007d8e:	d10a      	bne.n	8007da6 <__cvt+0xba>
 8007d90:	2200      	movs	r2, #0
 8007d92:	2300      	movs	r3, #0
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	f7f8 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d9c:	b918      	cbnz	r0, 8007da6 <__cvt+0xba>
 8007d9e:	f1c4 0401 	rsb	r4, r4, #1
 8007da2:	f8ca 4000 	str.w	r4, [sl]
 8007da6:	f8da 3000 	ldr.w	r3, [sl]
 8007daa:	4499      	add	r9, r3
 8007dac:	e7d3      	b.n	8007d56 <__cvt+0x6a>
 8007dae:	1c59      	adds	r1, r3, #1
 8007db0:	9103      	str	r1, [sp, #12]
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e7d9      	b.n	8007d6a <__cvt+0x7e>

08007db6 <__exponent>:
 8007db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db8:	2900      	cmp	r1, #0
 8007dba:	bfba      	itte	lt
 8007dbc:	4249      	neglt	r1, r1
 8007dbe:	232d      	movlt	r3, #45	@ 0x2d
 8007dc0:	232b      	movge	r3, #43	@ 0x2b
 8007dc2:	2909      	cmp	r1, #9
 8007dc4:	7002      	strb	r2, [r0, #0]
 8007dc6:	7043      	strb	r3, [r0, #1]
 8007dc8:	dd29      	ble.n	8007e1e <__exponent+0x68>
 8007dca:	f10d 0307 	add.w	r3, sp, #7
 8007dce:	461d      	mov	r5, r3
 8007dd0:	270a      	movs	r7, #10
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8007dd8:	fb07 1416 	mls	r4, r7, r6, r1
 8007ddc:	3430      	adds	r4, #48	@ 0x30
 8007dde:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007de2:	460c      	mov	r4, r1
 8007de4:	2c63      	cmp	r4, #99	@ 0x63
 8007de6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dea:	4631      	mov	r1, r6
 8007dec:	dcf1      	bgt.n	8007dd2 <__exponent+0x1c>
 8007dee:	3130      	adds	r1, #48	@ 0x30
 8007df0:	1e94      	subs	r4, r2, #2
 8007df2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007df6:	1c41      	adds	r1, r0, #1
 8007df8:	4623      	mov	r3, r4
 8007dfa:	42ab      	cmp	r3, r5
 8007dfc:	d30a      	bcc.n	8007e14 <__exponent+0x5e>
 8007dfe:	f10d 0309 	add.w	r3, sp, #9
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	42ac      	cmp	r4, r5
 8007e06:	bf88      	it	hi
 8007e08:	2300      	movhi	r3, #0
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	4403      	add	r3, r0
 8007e0e:	1a18      	subs	r0, r3, r0
 8007e10:	b003      	add	sp, #12
 8007e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e1c:	e7ed      	b.n	8007dfa <__exponent+0x44>
 8007e1e:	2330      	movs	r3, #48	@ 0x30
 8007e20:	3130      	adds	r1, #48	@ 0x30
 8007e22:	7083      	strb	r3, [r0, #2]
 8007e24:	70c1      	strb	r1, [r0, #3]
 8007e26:	1d03      	adds	r3, r0, #4
 8007e28:	e7f1      	b.n	8007e0e <__exponent+0x58>
	...

08007e2c <_printf_float>:
 8007e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e30:	b08d      	sub	sp, #52	@ 0x34
 8007e32:	460c      	mov	r4, r1
 8007e34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e38:	4616      	mov	r6, r2
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	f001 f8ab 	bl	8008f98 <_localeconv_r>
 8007e42:	6803      	ldr	r3, [r0, #0]
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7f8 fa12 	bl	8000270 <strlen>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e50:	f8d8 3000 	ldr.w	r3, [r8]
 8007e54:	9005      	str	r0, [sp, #20]
 8007e56:	3307      	adds	r3, #7
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	f103 0208 	add.w	r2, r3, #8
 8007e60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e64:	f8d4 b000 	ldr.w	fp, [r4]
 8007e68:	f8c8 2000 	str.w	r2, [r8]
 8007e6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007e74:	9307      	str	r3, [sp, #28]
 8007e76:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e82:	4b9c      	ldr	r3, [pc, #624]	@ (80080f4 <_printf_float+0x2c8>)
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	f7f8 fe50 	bl	8000b2c <__aeabi_dcmpun>
 8007e8c:	bb70      	cbnz	r0, 8007eec <_printf_float+0xc0>
 8007e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e92:	4b98      	ldr	r3, [pc, #608]	@ (80080f4 <_printf_float+0x2c8>)
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295
 8007e98:	f7f8 fe2a 	bl	8000af0 <__aeabi_dcmple>
 8007e9c:	bb30      	cbnz	r0, 8007eec <_printf_float+0xc0>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	f7f8 fe19 	bl	8000adc <__aeabi_dcmplt>
 8007eaa:	b110      	cbz	r0, 8007eb2 <_printf_float+0x86>
 8007eac:	232d      	movs	r3, #45	@ 0x2d
 8007eae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eb2:	4a91      	ldr	r2, [pc, #580]	@ (80080f8 <_printf_float+0x2cc>)
 8007eb4:	4b91      	ldr	r3, [pc, #580]	@ (80080fc <_printf_float+0x2d0>)
 8007eb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007eba:	bf94      	ite	ls
 8007ebc:	4690      	movls	r8, r2
 8007ebe:	4698      	movhi	r8, r3
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	f02b 0304 	bic.w	r3, fp, #4
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	f04f 0900 	mov.w	r9, #0
 8007ece:	9700      	str	r7, [sp, #0]
 8007ed0:	4633      	mov	r3, r6
 8007ed2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 f9d2 	bl	8008280 <_printf_common>
 8007edc:	3001      	adds	r0, #1
 8007ede:	f040 808d 	bne.w	8007ffc <_printf_float+0x1d0>
 8007ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee6:	b00d      	add	sp, #52	@ 0x34
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	f7f8 fe1a 	bl	8000b2c <__aeabi_dcmpun>
 8007ef8:	b140      	cbz	r0, 8007f0c <_printf_float+0xe0>
 8007efa:	464b      	mov	r3, r9
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfbc      	itt	lt
 8007f00:	232d      	movlt	r3, #45	@ 0x2d
 8007f02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f06:	4a7e      	ldr	r2, [pc, #504]	@ (8008100 <_printf_float+0x2d4>)
 8007f08:	4b7e      	ldr	r3, [pc, #504]	@ (8008104 <_printf_float+0x2d8>)
 8007f0a:	e7d4      	b.n	8007eb6 <_printf_float+0x8a>
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f12:	9206      	str	r2, [sp, #24]
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	d13b      	bne.n	8007f90 <_printf_float+0x164>
 8007f18:	2306      	movs	r3, #6
 8007f1a:	6063      	str	r3, [r4, #4]
 8007f1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f20:	2300      	movs	r3, #0
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	9303      	str	r3, [sp, #12]
 8007f26:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f2c:	ab09      	add	r3, sp, #36	@ 0x24
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	6861      	ldr	r1, [r4, #4]
 8007f32:	ec49 8b10 	vmov	d0, r8, r9
 8007f36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f7ff fed6 	bl	8007cec <__cvt>
 8007f40:	9b06      	ldr	r3, [sp, #24]
 8007f42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f44:	2b47      	cmp	r3, #71	@ 0x47
 8007f46:	4680      	mov	r8, r0
 8007f48:	d129      	bne.n	8007f9e <_printf_float+0x172>
 8007f4a:	1cc8      	adds	r0, r1, #3
 8007f4c:	db02      	blt.n	8007f54 <_printf_float+0x128>
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	4299      	cmp	r1, r3
 8007f52:	dd41      	ble.n	8007fd8 <_printf_float+0x1ac>
 8007f54:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f58:	fa5f fa8a 	uxtb.w	sl, sl
 8007f5c:	3901      	subs	r1, #1
 8007f5e:	4652      	mov	r2, sl
 8007f60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f64:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f66:	f7ff ff26 	bl	8007db6 <__exponent>
 8007f6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f6c:	1813      	adds	r3, r2, r0
 8007f6e:	2a01      	cmp	r2, #1
 8007f70:	4681      	mov	r9, r0
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	dc02      	bgt.n	8007f7c <_printf_float+0x150>
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	07d2      	lsls	r2, r2, #31
 8007f7a:	d501      	bpl.n	8007f80 <_printf_float+0x154>
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0a2      	beq.n	8007ece <_printf_float+0xa2>
 8007f88:	232d      	movs	r3, #45	@ 0x2d
 8007f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f8e:	e79e      	b.n	8007ece <_printf_float+0xa2>
 8007f90:	9a06      	ldr	r2, [sp, #24]
 8007f92:	2a47      	cmp	r2, #71	@ 0x47
 8007f94:	d1c2      	bne.n	8007f1c <_printf_float+0xf0>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1c0      	bne.n	8007f1c <_printf_float+0xf0>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e7bd      	b.n	8007f1a <_printf_float+0xee>
 8007f9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fa2:	d9db      	bls.n	8007f5c <_printf_float+0x130>
 8007fa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007fa8:	d118      	bne.n	8007fdc <_printf_float+0x1b0>
 8007faa:	2900      	cmp	r1, #0
 8007fac:	6863      	ldr	r3, [r4, #4]
 8007fae:	dd0b      	ble.n	8007fc8 <_printf_float+0x19c>
 8007fb0:	6121      	str	r1, [r4, #16]
 8007fb2:	b913      	cbnz	r3, 8007fba <_printf_float+0x18e>
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	07d0      	lsls	r0, r2, #31
 8007fb8:	d502      	bpl.n	8007fc0 <_printf_float+0x194>
 8007fba:	3301      	adds	r3, #1
 8007fbc:	440b      	add	r3, r1
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	e7db      	b.n	8007f80 <_printf_float+0x154>
 8007fc8:	b913      	cbnz	r3, 8007fd0 <_printf_float+0x1a4>
 8007fca:	6822      	ldr	r2, [r4, #0]
 8007fcc:	07d2      	lsls	r2, r2, #31
 8007fce:	d501      	bpl.n	8007fd4 <_printf_float+0x1a8>
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	e7f4      	b.n	8007fbe <_printf_float+0x192>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e7f2      	b.n	8007fbe <_printf_float+0x192>
 8007fd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	db05      	blt.n	8007fee <_printf_float+0x1c2>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6121      	str	r1, [r4, #16]
 8007fe6:	07d8      	lsls	r0, r3, #31
 8007fe8:	d5ea      	bpl.n	8007fc0 <_printf_float+0x194>
 8007fea:	1c4b      	adds	r3, r1, #1
 8007fec:	e7e7      	b.n	8007fbe <_printf_float+0x192>
 8007fee:	2900      	cmp	r1, #0
 8007ff0:	bfd4      	ite	le
 8007ff2:	f1c1 0202 	rsble	r2, r1, #2
 8007ff6:	2201      	movgt	r2, #1
 8007ff8:	4413      	add	r3, r2
 8007ffa:	e7e0      	b.n	8007fbe <_printf_float+0x192>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	055a      	lsls	r2, r3, #21
 8008000:	d407      	bmi.n	8008012 <_printf_float+0x1e6>
 8008002:	6923      	ldr	r3, [r4, #16]
 8008004:	4642      	mov	r2, r8
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d12b      	bne.n	8008068 <_printf_float+0x23c>
 8008010:	e767      	b.n	8007ee2 <_printf_float+0xb6>
 8008012:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008016:	f240 80dd 	bls.w	80081d4 <_printf_float+0x3a8>
 800801a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800801e:	2200      	movs	r2, #0
 8008020:	2300      	movs	r3, #0
 8008022:	f7f8 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008026:	2800      	cmp	r0, #0
 8008028:	d033      	beq.n	8008092 <_printf_float+0x266>
 800802a:	4a37      	ldr	r2, [pc, #220]	@ (8008108 <_printf_float+0x2dc>)
 800802c:	2301      	movs	r3, #1
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	f43f af54 	beq.w	8007ee2 <_printf_float+0xb6>
 800803a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800803e:	4543      	cmp	r3, r8
 8008040:	db02      	blt.n	8008048 <_printf_float+0x21c>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	07d8      	lsls	r0, r3, #31
 8008046:	d50f      	bpl.n	8008068 <_printf_float+0x23c>
 8008048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800804c:	4631      	mov	r1, r6
 800804e:	4628      	mov	r0, r5
 8008050:	47b8      	blx	r7
 8008052:	3001      	adds	r0, #1
 8008054:	f43f af45 	beq.w	8007ee2 <_printf_float+0xb6>
 8008058:	f04f 0900 	mov.w	r9, #0
 800805c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008060:	f104 0a1a 	add.w	sl, r4, #26
 8008064:	45c8      	cmp	r8, r9
 8008066:	dc09      	bgt.n	800807c <_printf_float+0x250>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	079b      	lsls	r3, r3, #30
 800806c:	f100 8103 	bmi.w	8008276 <_printf_float+0x44a>
 8008070:	68e0      	ldr	r0, [r4, #12]
 8008072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008074:	4298      	cmp	r0, r3
 8008076:	bfb8      	it	lt
 8008078:	4618      	movlt	r0, r3
 800807a:	e734      	b.n	8007ee6 <_printf_float+0xba>
 800807c:	2301      	movs	r3, #1
 800807e:	4652      	mov	r2, sl
 8008080:	4631      	mov	r1, r6
 8008082:	4628      	mov	r0, r5
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	f43f af2b 	beq.w	8007ee2 <_printf_float+0xb6>
 800808c:	f109 0901 	add.w	r9, r9, #1
 8008090:	e7e8      	b.n	8008064 <_printf_float+0x238>
 8008092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	dc39      	bgt.n	800810c <_printf_float+0x2e0>
 8008098:	4a1b      	ldr	r2, [pc, #108]	@ (8008108 <_printf_float+0x2dc>)
 800809a:	2301      	movs	r3, #1
 800809c:	4631      	mov	r1, r6
 800809e:	4628      	mov	r0, r5
 80080a0:	47b8      	blx	r7
 80080a2:	3001      	adds	r0, #1
 80080a4:	f43f af1d 	beq.w	8007ee2 <_printf_float+0xb6>
 80080a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080ac:	ea59 0303 	orrs.w	r3, r9, r3
 80080b0:	d102      	bne.n	80080b8 <_printf_float+0x28c>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	07d9      	lsls	r1, r3, #31
 80080b6:	d5d7      	bpl.n	8008068 <_printf_float+0x23c>
 80080b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f af0d 	beq.w	8007ee2 <_printf_float+0xb6>
 80080c8:	f04f 0a00 	mov.w	sl, #0
 80080cc:	f104 0b1a 	add.w	fp, r4, #26
 80080d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d2:	425b      	negs	r3, r3
 80080d4:	4553      	cmp	r3, sl
 80080d6:	dc01      	bgt.n	80080dc <_printf_float+0x2b0>
 80080d8:	464b      	mov	r3, r9
 80080da:	e793      	b.n	8008004 <_printf_float+0x1d8>
 80080dc:	2301      	movs	r3, #1
 80080de:	465a      	mov	r2, fp
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f aefb 	beq.w	8007ee2 <_printf_float+0xb6>
 80080ec:	f10a 0a01 	add.w	sl, sl, #1
 80080f0:	e7ee      	b.n	80080d0 <_printf_float+0x2a4>
 80080f2:	bf00      	nop
 80080f4:	7fefffff 	.word	0x7fefffff
 80080f8:	0800bc18 	.word	0x0800bc18
 80080fc:	0800bc1c 	.word	0x0800bc1c
 8008100:	0800bc20 	.word	0x0800bc20
 8008104:	0800bc24 	.word	0x0800bc24
 8008108:	0800bc28 	.word	0x0800bc28
 800810c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800810e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008112:	4553      	cmp	r3, sl
 8008114:	bfa8      	it	ge
 8008116:	4653      	movge	r3, sl
 8008118:	2b00      	cmp	r3, #0
 800811a:	4699      	mov	r9, r3
 800811c:	dc36      	bgt.n	800818c <_printf_float+0x360>
 800811e:	f04f 0b00 	mov.w	fp, #0
 8008122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008126:	f104 021a 	add.w	r2, r4, #26
 800812a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800812c:	9306      	str	r3, [sp, #24]
 800812e:	eba3 0309 	sub.w	r3, r3, r9
 8008132:	455b      	cmp	r3, fp
 8008134:	dc31      	bgt.n	800819a <_printf_float+0x36e>
 8008136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008138:	459a      	cmp	sl, r3
 800813a:	dc3a      	bgt.n	80081b2 <_printf_float+0x386>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	07da      	lsls	r2, r3, #31
 8008140:	d437      	bmi.n	80081b2 <_printf_float+0x386>
 8008142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008144:	ebaa 0903 	sub.w	r9, sl, r3
 8008148:	9b06      	ldr	r3, [sp, #24]
 800814a:	ebaa 0303 	sub.w	r3, sl, r3
 800814e:	4599      	cmp	r9, r3
 8008150:	bfa8      	it	ge
 8008152:	4699      	movge	r9, r3
 8008154:	f1b9 0f00 	cmp.w	r9, #0
 8008158:	dc33      	bgt.n	80081c2 <_printf_float+0x396>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008162:	f104 0b1a 	add.w	fp, r4, #26
 8008166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008168:	ebaa 0303 	sub.w	r3, sl, r3
 800816c:	eba3 0309 	sub.w	r3, r3, r9
 8008170:	4543      	cmp	r3, r8
 8008172:	f77f af79 	ble.w	8008068 <_printf_float+0x23c>
 8008176:	2301      	movs	r3, #1
 8008178:	465a      	mov	r2, fp
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f aeae 	beq.w	8007ee2 <_printf_float+0xb6>
 8008186:	f108 0801 	add.w	r8, r8, #1
 800818a:	e7ec      	b.n	8008166 <_printf_float+0x33a>
 800818c:	4642      	mov	r2, r8
 800818e:	4631      	mov	r1, r6
 8008190:	4628      	mov	r0, r5
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	d1c2      	bne.n	800811e <_printf_float+0x2f2>
 8008198:	e6a3      	b.n	8007ee2 <_printf_float+0xb6>
 800819a:	2301      	movs	r3, #1
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	9206      	str	r2, [sp, #24]
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f ae9c 	beq.w	8007ee2 <_printf_float+0xb6>
 80081aa:	9a06      	ldr	r2, [sp, #24]
 80081ac:	f10b 0b01 	add.w	fp, fp, #1
 80081b0:	e7bb      	b.n	800812a <_printf_float+0x2fe>
 80081b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	d1c0      	bne.n	8008142 <_printf_float+0x316>
 80081c0:	e68f      	b.n	8007ee2 <_printf_float+0xb6>
 80081c2:	9a06      	ldr	r2, [sp, #24]
 80081c4:	464b      	mov	r3, r9
 80081c6:	4442      	add	r2, r8
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	d1c3      	bne.n	800815a <_printf_float+0x32e>
 80081d2:	e686      	b.n	8007ee2 <_printf_float+0xb6>
 80081d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081d8:	f1ba 0f01 	cmp.w	sl, #1
 80081dc:	dc01      	bgt.n	80081e2 <_printf_float+0x3b6>
 80081de:	07db      	lsls	r3, r3, #31
 80081e0:	d536      	bpl.n	8008250 <_printf_float+0x424>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4642      	mov	r2, r8
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	f43f ae78 	beq.w	8007ee2 <_printf_float+0xb6>
 80081f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	f43f ae70 	beq.w	8007ee2 <_printf_float+0xb6>
 8008202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008206:	2200      	movs	r2, #0
 8008208:	2300      	movs	r3, #0
 800820a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800820e:	f7f8 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008212:	b9c0      	cbnz	r0, 8008246 <_printf_float+0x41a>
 8008214:	4653      	mov	r3, sl
 8008216:	f108 0201 	add.w	r2, r8, #1
 800821a:	4631      	mov	r1, r6
 800821c:	4628      	mov	r0, r5
 800821e:	47b8      	blx	r7
 8008220:	3001      	adds	r0, #1
 8008222:	d10c      	bne.n	800823e <_printf_float+0x412>
 8008224:	e65d      	b.n	8007ee2 <_printf_float+0xb6>
 8008226:	2301      	movs	r3, #1
 8008228:	465a      	mov	r2, fp
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	f43f ae56 	beq.w	8007ee2 <_printf_float+0xb6>
 8008236:	f108 0801 	add.w	r8, r8, #1
 800823a:	45d0      	cmp	r8, sl
 800823c:	dbf3      	blt.n	8008226 <_printf_float+0x3fa>
 800823e:	464b      	mov	r3, r9
 8008240:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008244:	e6df      	b.n	8008006 <_printf_float+0x1da>
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	f104 0b1a 	add.w	fp, r4, #26
 800824e:	e7f4      	b.n	800823a <_printf_float+0x40e>
 8008250:	2301      	movs	r3, #1
 8008252:	4642      	mov	r2, r8
 8008254:	e7e1      	b.n	800821a <_printf_float+0x3ee>
 8008256:	2301      	movs	r3, #1
 8008258:	464a      	mov	r2, r9
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f ae3e 	beq.w	8007ee2 <_printf_float+0xb6>
 8008266:	f108 0801 	add.w	r8, r8, #1
 800826a:	68e3      	ldr	r3, [r4, #12]
 800826c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	4543      	cmp	r3, r8
 8008272:	dcf0      	bgt.n	8008256 <_printf_float+0x42a>
 8008274:	e6fc      	b.n	8008070 <_printf_float+0x244>
 8008276:	f04f 0800 	mov.w	r8, #0
 800827a:	f104 0919 	add.w	r9, r4, #25
 800827e:	e7f4      	b.n	800826a <_printf_float+0x43e>

08008280 <_printf_common>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	4616      	mov	r6, r2
 8008286:	4698      	mov	r8, r3
 8008288:	688a      	ldr	r2, [r1, #8]
 800828a:	690b      	ldr	r3, [r1, #16]
 800828c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008290:	4293      	cmp	r3, r2
 8008292:	bfb8      	it	lt
 8008294:	4613      	movlt	r3, r2
 8008296:	6033      	str	r3, [r6, #0]
 8008298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800829c:	4607      	mov	r7, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	b10a      	cbz	r2, 80082a6 <_printf_common+0x26>
 80082a2:	3301      	adds	r3, #1
 80082a4:	6033      	str	r3, [r6, #0]
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	0699      	lsls	r1, r3, #26
 80082aa:	bf42      	ittt	mi
 80082ac:	6833      	ldrmi	r3, [r6, #0]
 80082ae:	3302      	addmi	r3, #2
 80082b0:	6033      	strmi	r3, [r6, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	f015 0506 	ands.w	r5, r5, #6
 80082b8:	d106      	bne.n	80082c8 <_printf_common+0x48>
 80082ba:	f104 0a19 	add.w	sl, r4, #25
 80082be:	68e3      	ldr	r3, [r4, #12]
 80082c0:	6832      	ldr	r2, [r6, #0]
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	42ab      	cmp	r3, r5
 80082c6:	dc26      	bgt.n	8008316 <_printf_common+0x96>
 80082c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082cc:	6822      	ldr	r2, [r4, #0]
 80082ce:	3b00      	subs	r3, #0
 80082d0:	bf18      	it	ne
 80082d2:	2301      	movne	r3, #1
 80082d4:	0692      	lsls	r2, r2, #26
 80082d6:	d42b      	bmi.n	8008330 <_printf_common+0xb0>
 80082d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80082dc:	4641      	mov	r1, r8
 80082de:	4638      	mov	r0, r7
 80082e0:	47c8      	blx	r9
 80082e2:	3001      	adds	r0, #1
 80082e4:	d01e      	beq.n	8008324 <_printf_common+0xa4>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	6922      	ldr	r2, [r4, #16]
 80082ea:	f003 0306 	and.w	r3, r3, #6
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	bf02      	ittt	eq
 80082f2:	68e5      	ldreq	r5, [r4, #12]
 80082f4:	6833      	ldreq	r3, [r6, #0]
 80082f6:	1aed      	subeq	r5, r5, r3
 80082f8:	68a3      	ldr	r3, [r4, #8]
 80082fa:	bf0c      	ite	eq
 80082fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008300:	2500      	movne	r5, #0
 8008302:	4293      	cmp	r3, r2
 8008304:	bfc4      	itt	gt
 8008306:	1a9b      	subgt	r3, r3, r2
 8008308:	18ed      	addgt	r5, r5, r3
 800830a:	2600      	movs	r6, #0
 800830c:	341a      	adds	r4, #26
 800830e:	42b5      	cmp	r5, r6
 8008310:	d11a      	bne.n	8008348 <_printf_common+0xc8>
 8008312:	2000      	movs	r0, #0
 8008314:	e008      	b.n	8008328 <_printf_common+0xa8>
 8008316:	2301      	movs	r3, #1
 8008318:	4652      	mov	r2, sl
 800831a:	4641      	mov	r1, r8
 800831c:	4638      	mov	r0, r7
 800831e:	47c8      	blx	r9
 8008320:	3001      	adds	r0, #1
 8008322:	d103      	bne.n	800832c <_printf_common+0xac>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832c:	3501      	adds	r5, #1
 800832e:	e7c6      	b.n	80082be <_printf_common+0x3e>
 8008330:	18e1      	adds	r1, r4, r3
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	2030      	movs	r0, #48	@ 0x30
 8008336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800833a:	4422      	add	r2, r4
 800833c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008344:	3302      	adds	r3, #2
 8008346:	e7c7      	b.n	80082d8 <_printf_common+0x58>
 8008348:	2301      	movs	r3, #1
 800834a:	4622      	mov	r2, r4
 800834c:	4641      	mov	r1, r8
 800834e:	4638      	mov	r0, r7
 8008350:	47c8      	blx	r9
 8008352:	3001      	adds	r0, #1
 8008354:	d0e6      	beq.n	8008324 <_printf_common+0xa4>
 8008356:	3601      	adds	r6, #1
 8008358:	e7d9      	b.n	800830e <_printf_common+0x8e>
	...

0800835c <_printf_i>:
 800835c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	7e0f      	ldrb	r7, [r1, #24]
 8008362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008364:	2f78      	cmp	r7, #120	@ 0x78
 8008366:	4691      	mov	r9, r2
 8008368:	4680      	mov	r8, r0
 800836a:	460c      	mov	r4, r1
 800836c:	469a      	mov	sl, r3
 800836e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008372:	d807      	bhi.n	8008384 <_printf_i+0x28>
 8008374:	2f62      	cmp	r7, #98	@ 0x62
 8008376:	d80a      	bhi.n	800838e <_printf_i+0x32>
 8008378:	2f00      	cmp	r7, #0
 800837a:	f000 80d2 	beq.w	8008522 <_printf_i+0x1c6>
 800837e:	2f58      	cmp	r7, #88	@ 0x58
 8008380:	f000 80b9 	beq.w	80084f6 <_printf_i+0x19a>
 8008384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800838c:	e03a      	b.n	8008404 <_printf_i+0xa8>
 800838e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008392:	2b15      	cmp	r3, #21
 8008394:	d8f6      	bhi.n	8008384 <_printf_i+0x28>
 8008396:	a101      	add	r1, pc, #4	@ (adr r1, 800839c <_printf_i+0x40>)
 8008398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800839c:	080083f5 	.word	0x080083f5
 80083a0:	08008409 	.word	0x08008409
 80083a4:	08008385 	.word	0x08008385
 80083a8:	08008385 	.word	0x08008385
 80083ac:	08008385 	.word	0x08008385
 80083b0:	08008385 	.word	0x08008385
 80083b4:	08008409 	.word	0x08008409
 80083b8:	08008385 	.word	0x08008385
 80083bc:	08008385 	.word	0x08008385
 80083c0:	08008385 	.word	0x08008385
 80083c4:	08008385 	.word	0x08008385
 80083c8:	08008509 	.word	0x08008509
 80083cc:	08008433 	.word	0x08008433
 80083d0:	080084c3 	.word	0x080084c3
 80083d4:	08008385 	.word	0x08008385
 80083d8:	08008385 	.word	0x08008385
 80083dc:	0800852b 	.word	0x0800852b
 80083e0:	08008385 	.word	0x08008385
 80083e4:	08008433 	.word	0x08008433
 80083e8:	08008385 	.word	0x08008385
 80083ec:	08008385 	.word	0x08008385
 80083f0:	080084cb 	.word	0x080084cb
 80083f4:	6833      	ldr	r3, [r6, #0]
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6032      	str	r2, [r6, #0]
 80083fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008404:	2301      	movs	r3, #1
 8008406:	e09d      	b.n	8008544 <_printf_i+0x1e8>
 8008408:	6833      	ldr	r3, [r6, #0]
 800840a:	6820      	ldr	r0, [r4, #0]
 800840c:	1d19      	adds	r1, r3, #4
 800840e:	6031      	str	r1, [r6, #0]
 8008410:	0606      	lsls	r6, r0, #24
 8008412:	d501      	bpl.n	8008418 <_printf_i+0xbc>
 8008414:	681d      	ldr	r5, [r3, #0]
 8008416:	e003      	b.n	8008420 <_printf_i+0xc4>
 8008418:	0645      	lsls	r5, r0, #25
 800841a:	d5fb      	bpl.n	8008414 <_printf_i+0xb8>
 800841c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008420:	2d00      	cmp	r5, #0
 8008422:	da03      	bge.n	800842c <_printf_i+0xd0>
 8008424:	232d      	movs	r3, #45	@ 0x2d
 8008426:	426d      	negs	r5, r5
 8008428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800842c:	4859      	ldr	r0, [pc, #356]	@ (8008594 <_printf_i+0x238>)
 800842e:	230a      	movs	r3, #10
 8008430:	e011      	b.n	8008456 <_printf_i+0xfa>
 8008432:	6821      	ldr	r1, [r4, #0]
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	0608      	lsls	r0, r1, #24
 8008438:	f853 5b04 	ldr.w	r5, [r3], #4
 800843c:	d402      	bmi.n	8008444 <_printf_i+0xe8>
 800843e:	0649      	lsls	r1, r1, #25
 8008440:	bf48      	it	mi
 8008442:	b2ad      	uxthmi	r5, r5
 8008444:	2f6f      	cmp	r7, #111	@ 0x6f
 8008446:	4853      	ldr	r0, [pc, #332]	@ (8008594 <_printf_i+0x238>)
 8008448:	6033      	str	r3, [r6, #0]
 800844a:	bf14      	ite	ne
 800844c:	230a      	movne	r3, #10
 800844e:	2308      	moveq	r3, #8
 8008450:	2100      	movs	r1, #0
 8008452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008456:	6866      	ldr	r6, [r4, #4]
 8008458:	60a6      	str	r6, [r4, #8]
 800845a:	2e00      	cmp	r6, #0
 800845c:	bfa2      	ittt	ge
 800845e:	6821      	ldrge	r1, [r4, #0]
 8008460:	f021 0104 	bicge.w	r1, r1, #4
 8008464:	6021      	strge	r1, [r4, #0]
 8008466:	b90d      	cbnz	r5, 800846c <_printf_i+0x110>
 8008468:	2e00      	cmp	r6, #0
 800846a:	d04b      	beq.n	8008504 <_printf_i+0x1a8>
 800846c:	4616      	mov	r6, r2
 800846e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008472:	fb03 5711 	mls	r7, r3, r1, r5
 8008476:	5dc7      	ldrb	r7, [r0, r7]
 8008478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800847c:	462f      	mov	r7, r5
 800847e:	42bb      	cmp	r3, r7
 8008480:	460d      	mov	r5, r1
 8008482:	d9f4      	bls.n	800846e <_printf_i+0x112>
 8008484:	2b08      	cmp	r3, #8
 8008486:	d10b      	bne.n	80084a0 <_printf_i+0x144>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	07df      	lsls	r7, r3, #31
 800848c:	d508      	bpl.n	80084a0 <_printf_i+0x144>
 800848e:	6923      	ldr	r3, [r4, #16]
 8008490:	6861      	ldr	r1, [r4, #4]
 8008492:	4299      	cmp	r1, r3
 8008494:	bfde      	ittt	le
 8008496:	2330      	movle	r3, #48	@ 0x30
 8008498:	f806 3c01 	strble.w	r3, [r6, #-1]
 800849c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084a0:	1b92      	subs	r2, r2, r6
 80084a2:	6122      	str	r2, [r4, #16]
 80084a4:	f8cd a000 	str.w	sl, [sp]
 80084a8:	464b      	mov	r3, r9
 80084aa:	aa03      	add	r2, sp, #12
 80084ac:	4621      	mov	r1, r4
 80084ae:	4640      	mov	r0, r8
 80084b0:	f7ff fee6 	bl	8008280 <_printf_common>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d14a      	bne.n	800854e <_printf_i+0x1f2>
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	b004      	add	sp, #16
 80084be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	f043 0320 	orr.w	r3, r3, #32
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	4833      	ldr	r0, [pc, #204]	@ (8008598 <_printf_i+0x23c>)
 80084cc:	2778      	movs	r7, #120	@ 0x78
 80084ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	6831      	ldr	r1, [r6, #0]
 80084d6:	061f      	lsls	r7, r3, #24
 80084d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80084dc:	d402      	bmi.n	80084e4 <_printf_i+0x188>
 80084de:	065f      	lsls	r7, r3, #25
 80084e0:	bf48      	it	mi
 80084e2:	b2ad      	uxthmi	r5, r5
 80084e4:	6031      	str	r1, [r6, #0]
 80084e6:	07d9      	lsls	r1, r3, #31
 80084e8:	bf44      	itt	mi
 80084ea:	f043 0320 	orrmi.w	r3, r3, #32
 80084ee:	6023      	strmi	r3, [r4, #0]
 80084f0:	b11d      	cbz	r5, 80084fa <_printf_i+0x19e>
 80084f2:	2310      	movs	r3, #16
 80084f4:	e7ac      	b.n	8008450 <_printf_i+0xf4>
 80084f6:	4827      	ldr	r0, [pc, #156]	@ (8008594 <_printf_i+0x238>)
 80084f8:	e7e9      	b.n	80084ce <_printf_i+0x172>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f023 0320 	bic.w	r3, r3, #32
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	e7f6      	b.n	80084f2 <_printf_i+0x196>
 8008504:	4616      	mov	r6, r2
 8008506:	e7bd      	b.n	8008484 <_printf_i+0x128>
 8008508:	6833      	ldr	r3, [r6, #0]
 800850a:	6825      	ldr	r5, [r4, #0]
 800850c:	6961      	ldr	r1, [r4, #20]
 800850e:	1d18      	adds	r0, r3, #4
 8008510:	6030      	str	r0, [r6, #0]
 8008512:	062e      	lsls	r6, r5, #24
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	d501      	bpl.n	800851c <_printf_i+0x1c0>
 8008518:	6019      	str	r1, [r3, #0]
 800851a:	e002      	b.n	8008522 <_printf_i+0x1c6>
 800851c:	0668      	lsls	r0, r5, #25
 800851e:	d5fb      	bpl.n	8008518 <_printf_i+0x1bc>
 8008520:	8019      	strh	r1, [r3, #0]
 8008522:	2300      	movs	r3, #0
 8008524:	6123      	str	r3, [r4, #16]
 8008526:	4616      	mov	r6, r2
 8008528:	e7bc      	b.n	80084a4 <_printf_i+0x148>
 800852a:	6833      	ldr	r3, [r6, #0]
 800852c:	1d1a      	adds	r2, r3, #4
 800852e:	6032      	str	r2, [r6, #0]
 8008530:	681e      	ldr	r6, [r3, #0]
 8008532:	6862      	ldr	r2, [r4, #4]
 8008534:	2100      	movs	r1, #0
 8008536:	4630      	mov	r0, r6
 8008538:	f7f7 fe4a 	bl	80001d0 <memchr>
 800853c:	b108      	cbz	r0, 8008542 <_printf_i+0x1e6>
 800853e:	1b80      	subs	r0, r0, r6
 8008540:	6060      	str	r0, [r4, #4]
 8008542:	6863      	ldr	r3, [r4, #4]
 8008544:	6123      	str	r3, [r4, #16]
 8008546:	2300      	movs	r3, #0
 8008548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800854c:	e7aa      	b.n	80084a4 <_printf_i+0x148>
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	4632      	mov	r2, r6
 8008552:	4649      	mov	r1, r9
 8008554:	4640      	mov	r0, r8
 8008556:	47d0      	blx	sl
 8008558:	3001      	adds	r0, #1
 800855a:	d0ad      	beq.n	80084b8 <_printf_i+0x15c>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	079b      	lsls	r3, r3, #30
 8008560:	d413      	bmi.n	800858a <_printf_i+0x22e>
 8008562:	68e0      	ldr	r0, [r4, #12]
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	4298      	cmp	r0, r3
 8008568:	bfb8      	it	lt
 800856a:	4618      	movlt	r0, r3
 800856c:	e7a6      	b.n	80084bc <_printf_i+0x160>
 800856e:	2301      	movs	r3, #1
 8008570:	4632      	mov	r2, r6
 8008572:	4649      	mov	r1, r9
 8008574:	4640      	mov	r0, r8
 8008576:	47d0      	blx	sl
 8008578:	3001      	adds	r0, #1
 800857a:	d09d      	beq.n	80084b8 <_printf_i+0x15c>
 800857c:	3501      	adds	r5, #1
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	9903      	ldr	r1, [sp, #12]
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	42ab      	cmp	r3, r5
 8008586:	dcf2      	bgt.n	800856e <_printf_i+0x212>
 8008588:	e7eb      	b.n	8008562 <_printf_i+0x206>
 800858a:	2500      	movs	r5, #0
 800858c:	f104 0619 	add.w	r6, r4, #25
 8008590:	e7f5      	b.n	800857e <_printf_i+0x222>
 8008592:	bf00      	nop
 8008594:	0800bc2a 	.word	0x0800bc2a
 8008598:	0800bc3b 	.word	0x0800bc3b

0800859c <_scanf_float>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	b087      	sub	sp, #28
 80085a2:	4617      	mov	r7, r2
 80085a4:	9303      	str	r3, [sp, #12]
 80085a6:	688b      	ldr	r3, [r1, #8]
 80085a8:	1e5a      	subs	r2, r3, #1
 80085aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80085ae:	bf81      	itttt	hi
 80085b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80085b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80085b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80085bc:	608b      	strhi	r3, [r1, #8]
 80085be:	680b      	ldr	r3, [r1, #0]
 80085c0:	460a      	mov	r2, r1
 80085c2:	f04f 0500 	mov.w	r5, #0
 80085c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80085ca:	f842 3b1c 	str.w	r3, [r2], #28
 80085ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80085d2:	4680      	mov	r8, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	bf98      	it	ls
 80085d8:	f04f 0b00 	movls.w	fp, #0
 80085dc:	9201      	str	r2, [sp, #4]
 80085de:	4616      	mov	r6, r2
 80085e0:	46aa      	mov	sl, r5
 80085e2:	46a9      	mov	r9, r5
 80085e4:	9502      	str	r5, [sp, #8]
 80085e6:	68a2      	ldr	r2, [r4, #8]
 80085e8:	b152      	cbz	r2, 8008600 <_scanf_float+0x64>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80085f0:	d864      	bhi.n	80086bc <_scanf_float+0x120>
 80085f2:	2b40      	cmp	r3, #64	@ 0x40
 80085f4:	d83c      	bhi.n	8008670 <_scanf_float+0xd4>
 80085f6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80085fa:	b2c8      	uxtb	r0, r1
 80085fc:	280e      	cmp	r0, #14
 80085fe:	d93a      	bls.n	8008676 <_scanf_float+0xda>
 8008600:	f1b9 0f00 	cmp.w	r9, #0
 8008604:	d003      	beq.n	800860e <_scanf_float+0x72>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008612:	f1ba 0f01 	cmp.w	sl, #1
 8008616:	f200 8117 	bhi.w	8008848 <_scanf_float+0x2ac>
 800861a:	9b01      	ldr	r3, [sp, #4]
 800861c:	429e      	cmp	r6, r3
 800861e:	f200 8108 	bhi.w	8008832 <_scanf_float+0x296>
 8008622:	2001      	movs	r0, #1
 8008624:	b007      	add	sp, #28
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800862e:	2a0d      	cmp	r2, #13
 8008630:	d8e6      	bhi.n	8008600 <_scanf_float+0x64>
 8008632:	a101      	add	r1, pc, #4	@ (adr r1, 8008638 <_scanf_float+0x9c>)
 8008634:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008638:	0800877f 	.word	0x0800877f
 800863c:	08008601 	.word	0x08008601
 8008640:	08008601 	.word	0x08008601
 8008644:	08008601 	.word	0x08008601
 8008648:	080087df 	.word	0x080087df
 800864c:	080087b7 	.word	0x080087b7
 8008650:	08008601 	.word	0x08008601
 8008654:	08008601 	.word	0x08008601
 8008658:	0800878d 	.word	0x0800878d
 800865c:	08008601 	.word	0x08008601
 8008660:	08008601 	.word	0x08008601
 8008664:	08008601 	.word	0x08008601
 8008668:	08008601 	.word	0x08008601
 800866c:	08008745 	.word	0x08008745
 8008670:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008674:	e7db      	b.n	800862e <_scanf_float+0x92>
 8008676:	290e      	cmp	r1, #14
 8008678:	d8c2      	bhi.n	8008600 <_scanf_float+0x64>
 800867a:	a001      	add	r0, pc, #4	@ (adr r0, 8008680 <_scanf_float+0xe4>)
 800867c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008680:	08008735 	.word	0x08008735
 8008684:	08008601 	.word	0x08008601
 8008688:	08008735 	.word	0x08008735
 800868c:	080087cb 	.word	0x080087cb
 8008690:	08008601 	.word	0x08008601
 8008694:	080086dd 	.word	0x080086dd
 8008698:	0800871b 	.word	0x0800871b
 800869c:	0800871b 	.word	0x0800871b
 80086a0:	0800871b 	.word	0x0800871b
 80086a4:	0800871b 	.word	0x0800871b
 80086a8:	0800871b 	.word	0x0800871b
 80086ac:	0800871b 	.word	0x0800871b
 80086b0:	0800871b 	.word	0x0800871b
 80086b4:	0800871b 	.word	0x0800871b
 80086b8:	0800871b 	.word	0x0800871b
 80086bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80086be:	d809      	bhi.n	80086d4 <_scanf_float+0x138>
 80086c0:	2b60      	cmp	r3, #96	@ 0x60
 80086c2:	d8b2      	bhi.n	800862a <_scanf_float+0x8e>
 80086c4:	2b54      	cmp	r3, #84	@ 0x54
 80086c6:	d07b      	beq.n	80087c0 <_scanf_float+0x224>
 80086c8:	2b59      	cmp	r3, #89	@ 0x59
 80086ca:	d199      	bne.n	8008600 <_scanf_float+0x64>
 80086cc:	2d07      	cmp	r5, #7
 80086ce:	d197      	bne.n	8008600 <_scanf_float+0x64>
 80086d0:	2508      	movs	r5, #8
 80086d2:	e02c      	b.n	800872e <_scanf_float+0x192>
 80086d4:	2b74      	cmp	r3, #116	@ 0x74
 80086d6:	d073      	beq.n	80087c0 <_scanf_float+0x224>
 80086d8:	2b79      	cmp	r3, #121	@ 0x79
 80086da:	e7f6      	b.n	80086ca <_scanf_float+0x12e>
 80086dc:	6821      	ldr	r1, [r4, #0]
 80086de:	05c8      	lsls	r0, r1, #23
 80086e0:	d51b      	bpl.n	800871a <_scanf_float+0x17e>
 80086e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80086e6:	6021      	str	r1, [r4, #0]
 80086e8:	f109 0901 	add.w	r9, r9, #1
 80086ec:	f1bb 0f00 	cmp.w	fp, #0
 80086f0:	d003      	beq.n	80086fa <_scanf_float+0x15e>
 80086f2:	3201      	adds	r2, #1
 80086f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086f8:	60a2      	str	r2, [r4, #8]
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	60a3      	str	r3, [r4, #8]
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	3301      	adds	r3, #1
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3b01      	subs	r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
 800870e:	f340 8087 	ble.w	8008820 <_scanf_float+0x284>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	e765      	b.n	80085e6 <_scanf_float+0x4a>
 800871a:	eb1a 0105 	adds.w	r1, sl, r5
 800871e:	f47f af6f 	bne.w	8008600 <_scanf_float+0x64>
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008728:	6022      	str	r2, [r4, #0]
 800872a:	460d      	mov	r5, r1
 800872c:	468a      	mov	sl, r1
 800872e:	f806 3b01 	strb.w	r3, [r6], #1
 8008732:	e7e2      	b.n	80086fa <_scanf_float+0x15e>
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	0610      	lsls	r0, r2, #24
 8008738:	f57f af62 	bpl.w	8008600 <_scanf_float+0x64>
 800873c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008740:	6022      	str	r2, [r4, #0]
 8008742:	e7f4      	b.n	800872e <_scanf_float+0x192>
 8008744:	f1ba 0f00 	cmp.w	sl, #0
 8008748:	d10e      	bne.n	8008768 <_scanf_float+0x1cc>
 800874a:	f1b9 0f00 	cmp.w	r9, #0
 800874e:	d10e      	bne.n	800876e <_scanf_float+0x1d2>
 8008750:	6822      	ldr	r2, [r4, #0]
 8008752:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008756:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800875a:	d108      	bne.n	800876e <_scanf_float+0x1d2>
 800875c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	f04f 0a01 	mov.w	sl, #1
 8008766:	e7e2      	b.n	800872e <_scanf_float+0x192>
 8008768:	f1ba 0f02 	cmp.w	sl, #2
 800876c:	d055      	beq.n	800881a <_scanf_float+0x27e>
 800876e:	2d01      	cmp	r5, #1
 8008770:	d002      	beq.n	8008778 <_scanf_float+0x1dc>
 8008772:	2d04      	cmp	r5, #4
 8008774:	f47f af44 	bne.w	8008600 <_scanf_float+0x64>
 8008778:	3501      	adds	r5, #1
 800877a:	b2ed      	uxtb	r5, r5
 800877c:	e7d7      	b.n	800872e <_scanf_float+0x192>
 800877e:	f1ba 0f01 	cmp.w	sl, #1
 8008782:	f47f af3d 	bne.w	8008600 <_scanf_float+0x64>
 8008786:	f04f 0a02 	mov.w	sl, #2
 800878a:	e7d0      	b.n	800872e <_scanf_float+0x192>
 800878c:	b97d      	cbnz	r5, 80087ae <_scanf_float+0x212>
 800878e:	f1b9 0f00 	cmp.w	r9, #0
 8008792:	f47f af38 	bne.w	8008606 <_scanf_float+0x6a>
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800879c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087a0:	f040 8108 	bne.w	80089b4 <_scanf_float+0x418>
 80087a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087a8:	6022      	str	r2, [r4, #0]
 80087aa:	2501      	movs	r5, #1
 80087ac:	e7bf      	b.n	800872e <_scanf_float+0x192>
 80087ae:	2d03      	cmp	r5, #3
 80087b0:	d0e2      	beq.n	8008778 <_scanf_float+0x1dc>
 80087b2:	2d05      	cmp	r5, #5
 80087b4:	e7de      	b.n	8008774 <_scanf_float+0x1d8>
 80087b6:	2d02      	cmp	r5, #2
 80087b8:	f47f af22 	bne.w	8008600 <_scanf_float+0x64>
 80087bc:	2503      	movs	r5, #3
 80087be:	e7b6      	b.n	800872e <_scanf_float+0x192>
 80087c0:	2d06      	cmp	r5, #6
 80087c2:	f47f af1d 	bne.w	8008600 <_scanf_float+0x64>
 80087c6:	2507      	movs	r5, #7
 80087c8:	e7b1      	b.n	800872e <_scanf_float+0x192>
 80087ca:	6822      	ldr	r2, [r4, #0]
 80087cc:	0591      	lsls	r1, r2, #22
 80087ce:	f57f af17 	bpl.w	8008600 <_scanf_float+0x64>
 80087d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80087d6:	6022      	str	r2, [r4, #0]
 80087d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80087dc:	e7a7      	b.n	800872e <_scanf_float+0x192>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80087e4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80087e8:	d006      	beq.n	80087f8 <_scanf_float+0x25c>
 80087ea:	0550      	lsls	r0, r2, #21
 80087ec:	f57f af08 	bpl.w	8008600 <_scanf_float+0x64>
 80087f0:	f1b9 0f00 	cmp.w	r9, #0
 80087f4:	f000 80de 	beq.w	80089b4 <_scanf_float+0x418>
 80087f8:	0591      	lsls	r1, r2, #22
 80087fa:	bf58      	it	pl
 80087fc:	9902      	ldrpl	r1, [sp, #8]
 80087fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008802:	bf58      	it	pl
 8008804:	eba9 0101 	subpl.w	r1, r9, r1
 8008808:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800880c:	bf58      	it	pl
 800880e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008812:	6022      	str	r2, [r4, #0]
 8008814:	f04f 0900 	mov.w	r9, #0
 8008818:	e789      	b.n	800872e <_scanf_float+0x192>
 800881a:	f04f 0a03 	mov.w	sl, #3
 800881e:	e786      	b.n	800872e <_scanf_float+0x192>
 8008820:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008824:	4639      	mov	r1, r7
 8008826:	4640      	mov	r0, r8
 8008828:	4798      	blx	r3
 800882a:	2800      	cmp	r0, #0
 800882c:	f43f aedb 	beq.w	80085e6 <_scanf_float+0x4a>
 8008830:	e6e6      	b.n	8008600 <_scanf_float+0x64>
 8008832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800883a:	463a      	mov	r2, r7
 800883c:	4640      	mov	r0, r8
 800883e:	4798      	blx	r3
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	3b01      	subs	r3, #1
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	e6e8      	b.n	800861a <_scanf_float+0x7e>
 8008848:	1e6b      	subs	r3, r5, #1
 800884a:	2b06      	cmp	r3, #6
 800884c:	d824      	bhi.n	8008898 <_scanf_float+0x2fc>
 800884e:	2d02      	cmp	r5, #2
 8008850:	d836      	bhi.n	80088c0 <_scanf_float+0x324>
 8008852:	9b01      	ldr	r3, [sp, #4]
 8008854:	429e      	cmp	r6, r3
 8008856:	f67f aee4 	bls.w	8008622 <_scanf_float+0x86>
 800885a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800885e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008862:	463a      	mov	r2, r7
 8008864:	4640      	mov	r0, r8
 8008866:	4798      	blx	r3
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	3b01      	subs	r3, #1
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	e7f0      	b.n	8008852 <_scanf_float+0x2b6>
 8008870:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008874:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008878:	463a      	mov	r2, r7
 800887a:	4640      	mov	r0, r8
 800887c:	4798      	blx	r3
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	3b01      	subs	r3, #1
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008888:	fa5f fa8a 	uxtb.w	sl, sl
 800888c:	f1ba 0f02 	cmp.w	sl, #2
 8008890:	d1ee      	bne.n	8008870 <_scanf_float+0x2d4>
 8008892:	3d03      	subs	r5, #3
 8008894:	b2ed      	uxtb	r5, r5
 8008896:	1b76      	subs	r6, r6, r5
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	05da      	lsls	r2, r3, #23
 800889c:	d530      	bpl.n	8008900 <_scanf_float+0x364>
 800889e:	055b      	lsls	r3, r3, #21
 80088a0:	d511      	bpl.n	80088c6 <_scanf_float+0x32a>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	429e      	cmp	r6, r3
 80088a6:	f67f aebc 	bls.w	8008622 <_scanf_float+0x86>
 80088aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088b2:	463a      	mov	r2, r7
 80088b4:	4640      	mov	r0, r8
 80088b6:	4798      	blx	r3
 80088b8:	6923      	ldr	r3, [r4, #16]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	e7f0      	b.n	80088a2 <_scanf_float+0x306>
 80088c0:	46aa      	mov	sl, r5
 80088c2:	46b3      	mov	fp, r6
 80088c4:	e7de      	b.n	8008884 <_scanf_float+0x2e8>
 80088c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	2965      	cmp	r1, #101	@ 0x65
 80088ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80088d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	d00c      	beq.n	80088f4 <_scanf_float+0x358>
 80088da:	2945      	cmp	r1, #69	@ 0x45
 80088dc:	d00a      	beq.n	80088f4 <_scanf_float+0x358>
 80088de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088e2:	463a      	mov	r2, r7
 80088e4:	4640      	mov	r0, r8
 80088e6:	4798      	blx	r3
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	1eb5      	subs	r5, r6, #2
 80088f2:	6123      	str	r3, [r4, #16]
 80088f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088f8:	463a      	mov	r2, r7
 80088fa:	4640      	mov	r0, r8
 80088fc:	4798      	blx	r3
 80088fe:	462e      	mov	r6, r5
 8008900:	6822      	ldr	r2, [r4, #0]
 8008902:	f012 0210 	ands.w	r2, r2, #16
 8008906:	d001      	beq.n	800890c <_scanf_float+0x370>
 8008908:	2000      	movs	r0, #0
 800890a:	e68b      	b.n	8008624 <_scanf_float+0x88>
 800890c:	7032      	strb	r2, [r6, #0]
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008918:	d11c      	bne.n	8008954 <_scanf_float+0x3b8>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	454b      	cmp	r3, r9
 800891e:	eba3 0209 	sub.w	r2, r3, r9
 8008922:	d123      	bne.n	800896c <_scanf_float+0x3d0>
 8008924:	9901      	ldr	r1, [sp, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	4640      	mov	r0, r8
 800892a:	f7ff f9cd 	bl	8007cc8 <_strtod_r>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	6821      	ldr	r1, [r4, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f011 0f02 	tst.w	r1, #2
 8008938:	ec57 6b10 	vmov	r6, r7, d0
 800893c:	f103 0204 	add.w	r2, r3, #4
 8008940:	d01f      	beq.n	8008982 <_scanf_float+0x3e6>
 8008942:	9903      	ldr	r1, [sp, #12]
 8008944:	600a      	str	r2, [r1, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	e9c3 6700 	strd	r6, r7, [r3]
 800894c:	68e3      	ldr	r3, [r4, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60e3      	str	r3, [r4, #12]
 8008952:	e7d9      	b.n	8008908 <_scanf_float+0x36c>
 8008954:	9b04      	ldr	r3, [sp, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0e4      	beq.n	8008924 <_scanf_float+0x388>
 800895a:	9905      	ldr	r1, [sp, #20]
 800895c:	230a      	movs	r3, #10
 800895e:	3101      	adds	r1, #1
 8008960:	4640      	mov	r0, r8
 8008962:	f002 fb91 	bl	800b088 <_strtol_r>
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	9e05      	ldr	r6, [sp, #20]
 800896a:	1ac2      	subs	r2, r0, r3
 800896c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008970:	429e      	cmp	r6, r3
 8008972:	bf28      	it	cs
 8008974:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008978:	4910      	ldr	r1, [pc, #64]	@ (80089bc <_scanf_float+0x420>)
 800897a:	4630      	mov	r0, r6
 800897c:	f000 f988 	bl	8008c90 <siprintf>
 8008980:	e7d0      	b.n	8008924 <_scanf_float+0x388>
 8008982:	f011 0f04 	tst.w	r1, #4
 8008986:	9903      	ldr	r1, [sp, #12]
 8008988:	600a      	str	r2, [r1, #0]
 800898a:	d1dc      	bne.n	8008946 <_scanf_float+0x3aa>
 800898c:	681d      	ldr	r5, [r3, #0]
 800898e:	4632      	mov	r2, r6
 8008990:	463b      	mov	r3, r7
 8008992:	4630      	mov	r0, r6
 8008994:	4639      	mov	r1, r7
 8008996:	f7f8 f8c9 	bl	8000b2c <__aeabi_dcmpun>
 800899a:	b128      	cbz	r0, 80089a8 <_scanf_float+0x40c>
 800899c:	4808      	ldr	r0, [pc, #32]	@ (80089c0 <_scanf_float+0x424>)
 800899e:	f000 fb8b 	bl	80090b8 <nanf>
 80089a2:	ed85 0a00 	vstr	s0, [r5]
 80089a6:	e7d1      	b.n	800894c <_scanf_float+0x3b0>
 80089a8:	4630      	mov	r0, r6
 80089aa:	4639      	mov	r1, r7
 80089ac:	f7f8 f91c 	bl	8000be8 <__aeabi_d2f>
 80089b0:	6028      	str	r0, [r5, #0]
 80089b2:	e7cb      	b.n	800894c <_scanf_float+0x3b0>
 80089b4:	f04f 0900 	mov.w	r9, #0
 80089b8:	e629      	b.n	800860e <_scanf_float+0x72>
 80089ba:	bf00      	nop
 80089bc:	0800bc4c 	.word	0x0800bc4c
 80089c0:	0800bd05 	.word	0x0800bd05

080089c4 <std>:
 80089c4:	2300      	movs	r3, #0
 80089c6:	b510      	push	{r4, lr}
 80089c8:	4604      	mov	r4, r0
 80089ca:	e9c0 3300 	strd	r3, r3, [r0]
 80089ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089d2:	6083      	str	r3, [r0, #8]
 80089d4:	8181      	strh	r1, [r0, #12]
 80089d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80089d8:	81c2      	strh	r2, [r0, #14]
 80089da:	6183      	str	r3, [r0, #24]
 80089dc:	4619      	mov	r1, r3
 80089de:	2208      	movs	r2, #8
 80089e0:	305c      	adds	r0, #92	@ 0x5c
 80089e2:	f000 fa4d 	bl	8008e80 <memset>
 80089e6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a1c <std+0x58>)
 80089e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80089ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008a20 <std+0x5c>)
 80089ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008a24 <std+0x60>)
 80089f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a28 <std+0x64>)
 80089f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80089f6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a2c <std+0x68>)
 80089f8:	6224      	str	r4, [r4, #32]
 80089fa:	429c      	cmp	r4, r3
 80089fc:	d006      	beq.n	8008a0c <std+0x48>
 80089fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a02:	4294      	cmp	r4, r2
 8008a04:	d002      	beq.n	8008a0c <std+0x48>
 8008a06:	33d0      	adds	r3, #208	@ 0xd0
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	d105      	bne.n	8008a18 <std+0x54>
 8008a0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a14:	f000 bb34 	b.w	8009080 <__retarget_lock_init_recursive>
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08008cd1 	.word	0x08008cd1
 8008a20:	08008cf3 	.word	0x08008cf3
 8008a24:	08008d2b 	.word	0x08008d2b
 8008a28:	08008d4f 	.word	0x08008d4f
 8008a2c:	2000066c 	.word	0x2000066c

08008a30 <stdio_exit_handler>:
 8008a30:	4a02      	ldr	r2, [pc, #8]	@ (8008a3c <stdio_exit_handler+0xc>)
 8008a32:	4903      	ldr	r1, [pc, #12]	@ (8008a40 <stdio_exit_handler+0x10>)
 8008a34:	4803      	ldr	r0, [pc, #12]	@ (8008a44 <stdio_exit_handler+0x14>)
 8008a36:	f000 b869 	b.w	8008b0c <_fwalk_sglue>
 8008a3a:	bf00      	nop
 8008a3c:	2000008c 	.word	0x2000008c
 8008a40:	0800b6e1 	.word	0x0800b6e1
 8008a44:	20000208 	.word	0x20000208

08008a48 <cleanup_stdio>:
 8008a48:	6841      	ldr	r1, [r0, #4]
 8008a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a7c <cleanup_stdio+0x34>)
 8008a4c:	4299      	cmp	r1, r3
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	4604      	mov	r4, r0
 8008a52:	d001      	beq.n	8008a58 <cleanup_stdio+0x10>
 8008a54:	f002 fe44 	bl	800b6e0 <_fflush_r>
 8008a58:	68a1      	ldr	r1, [r4, #8]
 8008a5a:	4b09      	ldr	r3, [pc, #36]	@ (8008a80 <cleanup_stdio+0x38>)
 8008a5c:	4299      	cmp	r1, r3
 8008a5e:	d002      	beq.n	8008a66 <cleanup_stdio+0x1e>
 8008a60:	4620      	mov	r0, r4
 8008a62:	f002 fe3d 	bl	800b6e0 <_fflush_r>
 8008a66:	68e1      	ldr	r1, [r4, #12]
 8008a68:	4b06      	ldr	r3, [pc, #24]	@ (8008a84 <cleanup_stdio+0x3c>)
 8008a6a:	4299      	cmp	r1, r3
 8008a6c:	d004      	beq.n	8008a78 <cleanup_stdio+0x30>
 8008a6e:	4620      	mov	r0, r4
 8008a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a74:	f002 be34 	b.w	800b6e0 <_fflush_r>
 8008a78:	bd10      	pop	{r4, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2000066c 	.word	0x2000066c
 8008a80:	200006d4 	.word	0x200006d4
 8008a84:	2000073c 	.word	0x2000073c

08008a88 <global_stdio_init.part.0>:
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab8 <global_stdio_init.part.0+0x30>)
 8008a8c:	4c0b      	ldr	r4, [pc, #44]	@ (8008abc <global_stdio_init.part.0+0x34>)
 8008a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ac0 <global_stdio_init.part.0+0x38>)
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	4620      	mov	r0, r4
 8008a94:	2200      	movs	r2, #0
 8008a96:	2104      	movs	r1, #4
 8008a98:	f7ff ff94 	bl	80089c4 <std>
 8008a9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	2109      	movs	r1, #9
 8008aa4:	f7ff ff8e 	bl	80089c4 <std>
 8008aa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008aac:	2202      	movs	r2, #2
 8008aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab2:	2112      	movs	r1, #18
 8008ab4:	f7ff bf86 	b.w	80089c4 <std>
 8008ab8:	200007a4 	.word	0x200007a4
 8008abc:	2000066c 	.word	0x2000066c
 8008ac0:	08008a31 	.word	0x08008a31

08008ac4 <__sfp_lock_acquire>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	@ (8008acc <__sfp_lock_acquire+0x8>)
 8008ac6:	f000 badc 	b.w	8009082 <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	200007ad 	.word	0x200007ad

08008ad0 <__sfp_lock_release>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	@ (8008ad8 <__sfp_lock_release+0x8>)
 8008ad2:	f000 bad7 	b.w	8009084 <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	200007ad 	.word	0x200007ad

08008adc <__sinit>:
 8008adc:	b510      	push	{r4, lr}
 8008ade:	4604      	mov	r4, r0
 8008ae0:	f7ff fff0 	bl	8008ac4 <__sfp_lock_acquire>
 8008ae4:	6a23      	ldr	r3, [r4, #32]
 8008ae6:	b11b      	cbz	r3, 8008af0 <__sinit+0x14>
 8008ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aec:	f7ff bff0 	b.w	8008ad0 <__sfp_lock_release>
 8008af0:	4b04      	ldr	r3, [pc, #16]	@ (8008b04 <__sinit+0x28>)
 8008af2:	6223      	str	r3, [r4, #32]
 8008af4:	4b04      	ldr	r3, [pc, #16]	@ (8008b08 <__sinit+0x2c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f5      	bne.n	8008ae8 <__sinit+0xc>
 8008afc:	f7ff ffc4 	bl	8008a88 <global_stdio_init.part.0>
 8008b00:	e7f2      	b.n	8008ae8 <__sinit+0xc>
 8008b02:	bf00      	nop
 8008b04:	08008a49 	.word	0x08008a49
 8008b08:	200007a4 	.word	0x200007a4

08008b0c <_fwalk_sglue>:
 8008b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b10:	4607      	mov	r7, r0
 8008b12:	4688      	mov	r8, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	2600      	movs	r6, #0
 8008b18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b1c:	f1b9 0901 	subs.w	r9, r9, #1
 8008b20:	d505      	bpl.n	8008b2e <_fwalk_sglue+0x22>
 8008b22:	6824      	ldr	r4, [r4, #0]
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	d1f7      	bne.n	8008b18 <_fwalk_sglue+0xc>
 8008b28:	4630      	mov	r0, r6
 8008b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d907      	bls.n	8008b44 <_fwalk_sglue+0x38>
 8008b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	d003      	beq.n	8008b44 <_fwalk_sglue+0x38>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4638      	mov	r0, r7
 8008b40:	47c0      	blx	r8
 8008b42:	4306      	orrs	r6, r0
 8008b44:	3568      	adds	r5, #104	@ 0x68
 8008b46:	e7e9      	b.n	8008b1c <_fwalk_sglue+0x10>

08008b48 <iprintf>:
 8008b48:	b40f      	push	{r0, r1, r2, r3}
 8008b4a:	b507      	push	{r0, r1, r2, lr}
 8008b4c:	4906      	ldr	r1, [pc, #24]	@ (8008b68 <iprintf+0x20>)
 8008b4e:	ab04      	add	r3, sp, #16
 8008b50:	6808      	ldr	r0, [r1, #0]
 8008b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b56:	6881      	ldr	r1, [r0, #8]
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	f002 fc25 	bl	800b3a8 <_vfiprintf_r>
 8008b5e:	b003      	add	sp, #12
 8008b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b64:	b004      	add	sp, #16
 8008b66:	4770      	bx	lr
 8008b68:	20000204 	.word	0x20000204

08008b6c <_puts_r>:
 8008b6c:	6a03      	ldr	r3, [r0, #32]
 8008b6e:	b570      	push	{r4, r5, r6, lr}
 8008b70:	6884      	ldr	r4, [r0, #8]
 8008b72:	4605      	mov	r5, r0
 8008b74:	460e      	mov	r6, r1
 8008b76:	b90b      	cbnz	r3, 8008b7c <_puts_r+0x10>
 8008b78:	f7ff ffb0 	bl	8008adc <__sinit>
 8008b7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b7e:	07db      	lsls	r3, r3, #31
 8008b80:	d405      	bmi.n	8008b8e <_puts_r+0x22>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	0598      	lsls	r0, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_puts_r+0x22>
 8008b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b8a:	f000 fa7a 	bl	8009082 <__retarget_lock_acquire_recursive>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	0719      	lsls	r1, r3, #28
 8008b92:	d502      	bpl.n	8008b9a <_puts_r+0x2e>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d135      	bne.n	8008c06 <_puts_r+0x9a>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 f919 	bl	8008dd4 <__swsetup_r>
 8008ba2:	b380      	cbz	r0, 8008c06 <_puts_r+0x9a>
 8008ba4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008baa:	07da      	lsls	r2, r3, #31
 8008bac:	d405      	bmi.n	8008bba <_puts_r+0x4e>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	059b      	lsls	r3, r3, #22
 8008bb2:	d402      	bmi.n	8008bba <_puts_r+0x4e>
 8008bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bb6:	f000 fa65 	bl	8009084 <__retarget_lock_release_recursive>
 8008bba:	4628      	mov	r0, r5
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	da04      	bge.n	8008bcc <_puts_r+0x60>
 8008bc2:	69a2      	ldr	r2, [r4, #24]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	dc17      	bgt.n	8008bf8 <_puts_r+0x8c>
 8008bc8:	290a      	cmp	r1, #10
 8008bca:	d015      	beq.n	8008bf8 <_puts_r+0x8c>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	6022      	str	r2, [r4, #0]
 8008bd2:	7019      	strb	r1, [r3, #0]
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	2900      	cmp	r1, #0
 8008be0:	d1ed      	bne.n	8008bbe <_puts_r+0x52>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da11      	bge.n	8008c0a <_puts_r+0x9e>
 8008be6:	4622      	mov	r2, r4
 8008be8:	210a      	movs	r1, #10
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 f8b3 	bl	8008d56 <__swbuf_r>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d0d7      	beq.n	8008ba4 <_puts_r+0x38>
 8008bf4:	250a      	movs	r5, #10
 8008bf6:	e7d7      	b.n	8008ba8 <_puts_r+0x3c>
 8008bf8:	4622      	mov	r2, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 f8ab 	bl	8008d56 <__swbuf_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d1e7      	bne.n	8008bd4 <_puts_r+0x68>
 8008c04:	e7ce      	b.n	8008ba4 <_puts_r+0x38>
 8008c06:	3e01      	subs	r6, #1
 8008c08:	e7e4      	b.n	8008bd4 <_puts_r+0x68>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	220a      	movs	r2, #10
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	e7ee      	b.n	8008bf4 <_puts_r+0x88>
	...

08008c18 <puts>:
 8008c18:	4b02      	ldr	r3, [pc, #8]	@ (8008c24 <puts+0xc>)
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f7ff bfa5 	b.w	8008b6c <_puts_r>
 8008c22:	bf00      	nop
 8008c24:	20000204 	.word	0x20000204

08008c28 <sniprintf>:
 8008c28:	b40c      	push	{r2, r3}
 8008c2a:	b530      	push	{r4, r5, lr}
 8008c2c:	4b17      	ldr	r3, [pc, #92]	@ (8008c8c <sniprintf+0x64>)
 8008c2e:	1e0c      	subs	r4, r1, #0
 8008c30:	681d      	ldr	r5, [r3, #0]
 8008c32:	b09d      	sub	sp, #116	@ 0x74
 8008c34:	da08      	bge.n	8008c48 <sniprintf+0x20>
 8008c36:	238b      	movs	r3, #139	@ 0x8b
 8008c38:	602b      	str	r3, [r5, #0]
 8008c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3e:	b01d      	add	sp, #116	@ 0x74
 8008c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c44:	b002      	add	sp, #8
 8008c46:	4770      	bx	lr
 8008c48:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c50:	bf14      	ite	ne
 8008c52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c56:	4623      	moveq	r3, r4
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c60:	9002      	str	r0, [sp, #8]
 8008c62:	9006      	str	r0, [sp, #24]
 8008c64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c6a:	ab21      	add	r3, sp, #132	@ 0x84
 8008c6c:	a902      	add	r1, sp, #8
 8008c6e:	4628      	mov	r0, r5
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	f002 fa73 	bl	800b15c <_svfiprintf_r>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	bfbc      	itt	lt
 8008c7a:	238b      	movlt	r3, #139	@ 0x8b
 8008c7c:	602b      	strlt	r3, [r5, #0]
 8008c7e:	2c00      	cmp	r4, #0
 8008c80:	d0dd      	beq.n	8008c3e <sniprintf+0x16>
 8008c82:	9b02      	ldr	r3, [sp, #8]
 8008c84:	2200      	movs	r2, #0
 8008c86:	701a      	strb	r2, [r3, #0]
 8008c88:	e7d9      	b.n	8008c3e <sniprintf+0x16>
 8008c8a:	bf00      	nop
 8008c8c:	20000204 	.word	0x20000204

08008c90 <siprintf>:
 8008c90:	b40e      	push	{r1, r2, r3}
 8008c92:	b500      	push	{lr}
 8008c94:	b09c      	sub	sp, #112	@ 0x70
 8008c96:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c98:	9002      	str	r0, [sp, #8]
 8008c9a:	9006      	str	r0, [sp, #24]
 8008c9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ca0:	4809      	ldr	r0, [pc, #36]	@ (8008cc8 <siprintf+0x38>)
 8008ca2:	9107      	str	r1, [sp, #28]
 8008ca4:	9104      	str	r1, [sp, #16]
 8008ca6:	4909      	ldr	r1, [pc, #36]	@ (8008ccc <siprintf+0x3c>)
 8008ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cac:	9105      	str	r1, [sp, #20]
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	a902      	add	r1, sp, #8
 8008cb4:	f002 fa52 	bl	800b15c <_svfiprintf_r>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	b01c      	add	sp, #112	@ 0x70
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	20000204 	.word	0x20000204
 8008ccc:	ffff0208 	.word	0xffff0208

08008cd0 <__sread>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f000 f984 	bl	8008fe4 <_read_r>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bfab      	itete	ge
 8008ce0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce4:	181b      	addge	r3, r3, r0
 8008ce6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008cea:	bfac      	ite	ge
 8008cec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cee:	81a3      	strhlt	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__swrite>:
 8008cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	898b      	ldrh	r3, [r1, #12]
 8008cfa:	05db      	lsls	r3, r3, #23
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	4616      	mov	r6, r2
 8008d02:	d505      	bpl.n	8008d10 <__swrite+0x1e>
 8008d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d08:	2302      	movs	r3, #2
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f000 f958 	bl	8008fc0 <_lseek_r>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	f000 b96f 	b.w	8009008 <_write_r>

08008d2a <__sseek>:
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d32:	f000 f945 	bl	8008fc0 <_lseek_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	bf15      	itete	ne
 8008d3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d46:	81a3      	strheq	r3, [r4, #12]
 8008d48:	bf18      	it	ne
 8008d4a:	81a3      	strhne	r3, [r4, #12]
 8008d4c:	bd10      	pop	{r4, pc}

08008d4e <__sclose>:
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 b925 	b.w	8008fa0 <_close_r>

08008d56 <__swbuf_r>:
 8008d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d58:	460e      	mov	r6, r1
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	b118      	cbz	r0, 8008d68 <__swbuf_r+0x12>
 8008d60:	6a03      	ldr	r3, [r0, #32]
 8008d62:	b90b      	cbnz	r3, 8008d68 <__swbuf_r+0x12>
 8008d64:	f7ff feba 	bl	8008adc <__sinit>
 8008d68:	69a3      	ldr	r3, [r4, #24]
 8008d6a:	60a3      	str	r3, [r4, #8]
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	071a      	lsls	r2, r3, #28
 8008d70:	d501      	bpl.n	8008d76 <__swbuf_r+0x20>
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	b943      	cbnz	r3, 8008d88 <__swbuf_r+0x32>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f000 f82b 	bl	8008dd4 <__swsetup_r>
 8008d7e:	b118      	cbz	r0, 8008d88 <__swbuf_r+0x32>
 8008d80:	f04f 37ff 	mov.w	r7, #4294967295
 8008d84:	4638      	mov	r0, r7
 8008d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	6922      	ldr	r2, [r4, #16]
 8008d8c:	1a98      	subs	r0, r3, r2
 8008d8e:	6963      	ldr	r3, [r4, #20]
 8008d90:	b2f6      	uxtb	r6, r6
 8008d92:	4283      	cmp	r3, r0
 8008d94:	4637      	mov	r7, r6
 8008d96:	dc05      	bgt.n	8008da4 <__swbuf_r+0x4e>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	f002 fca0 	bl	800b6e0 <_fflush_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d1ed      	bne.n	8008d80 <__swbuf_r+0x2a>
 8008da4:	68a3      	ldr	r3, [r4, #8]
 8008da6:	3b01      	subs	r3, #1
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	6022      	str	r2, [r4, #0]
 8008db0:	701e      	strb	r6, [r3, #0]
 8008db2:	6962      	ldr	r2, [r4, #20]
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d004      	beq.n	8008dc4 <__swbuf_r+0x6e>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	07db      	lsls	r3, r3, #31
 8008dbe:	d5e1      	bpl.n	8008d84 <__swbuf_r+0x2e>
 8008dc0:	2e0a      	cmp	r6, #10
 8008dc2:	d1df      	bne.n	8008d84 <__swbuf_r+0x2e>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f002 fc8a 	bl	800b6e0 <_fflush_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d0d9      	beq.n	8008d84 <__swbuf_r+0x2e>
 8008dd0:	e7d6      	b.n	8008d80 <__swbuf_r+0x2a>
	...

08008dd4 <__swsetup_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4b29      	ldr	r3, [pc, #164]	@ (8008e7c <__swsetup_r+0xa8>)
 8008dd8:	4605      	mov	r5, r0
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	460c      	mov	r4, r1
 8008dde:	b118      	cbz	r0, 8008de8 <__swsetup_r+0x14>
 8008de0:	6a03      	ldr	r3, [r0, #32]
 8008de2:	b90b      	cbnz	r3, 8008de8 <__swsetup_r+0x14>
 8008de4:	f7ff fe7a 	bl	8008adc <__sinit>
 8008de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dec:	0719      	lsls	r1, r3, #28
 8008dee:	d422      	bmi.n	8008e36 <__swsetup_r+0x62>
 8008df0:	06da      	lsls	r2, r3, #27
 8008df2:	d407      	bmi.n	8008e04 <__swsetup_r+0x30>
 8008df4:	2209      	movs	r2, #9
 8008df6:	602a      	str	r2, [r5, #0]
 8008df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dfc:	81a3      	strh	r3, [r4, #12]
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	e033      	b.n	8008e6c <__swsetup_r+0x98>
 8008e04:	0758      	lsls	r0, r3, #29
 8008e06:	d512      	bpl.n	8008e2e <__swsetup_r+0x5a>
 8008e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e0a:	b141      	cbz	r1, 8008e1e <__swsetup_r+0x4a>
 8008e0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e10:	4299      	cmp	r1, r3
 8008e12:	d002      	beq.n	8008e1a <__swsetup_r+0x46>
 8008e14:	4628      	mov	r0, r5
 8008e16:	f000 ffbf 	bl	8009d98 <_free_r>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	2300      	movs	r3, #0
 8008e28:	6063      	str	r3, [r4, #4]
 8008e2a:	6923      	ldr	r3, [r4, #16]
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f043 0308 	orr.w	r3, r3, #8
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	b94b      	cbnz	r3, 8008e4e <__swsetup_r+0x7a>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e44:	d003      	beq.n	8008e4e <__swsetup_r+0x7a>
 8008e46:	4621      	mov	r1, r4
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f002 fca9 	bl	800b7a0 <__smakebuf_r>
 8008e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e52:	f013 0201 	ands.w	r2, r3, #1
 8008e56:	d00a      	beq.n	8008e6e <__swsetup_r+0x9a>
 8008e58:	2200      	movs	r2, #0
 8008e5a:	60a2      	str	r2, [r4, #8]
 8008e5c:	6962      	ldr	r2, [r4, #20]
 8008e5e:	4252      	negs	r2, r2
 8008e60:	61a2      	str	r2, [r4, #24]
 8008e62:	6922      	ldr	r2, [r4, #16]
 8008e64:	b942      	cbnz	r2, 8008e78 <__swsetup_r+0xa4>
 8008e66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e6a:	d1c5      	bne.n	8008df8 <__swsetup_r+0x24>
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
 8008e6e:	0799      	lsls	r1, r3, #30
 8008e70:	bf58      	it	pl
 8008e72:	6962      	ldrpl	r2, [r4, #20]
 8008e74:	60a2      	str	r2, [r4, #8]
 8008e76:	e7f4      	b.n	8008e62 <__swsetup_r+0x8e>
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e7f7      	b.n	8008e6c <__swsetup_r+0x98>
 8008e7c:	20000204 	.word	0x20000204

08008e80 <memset>:
 8008e80:	4402      	add	r2, r0
 8008e82:	4603      	mov	r3, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d100      	bne.n	8008e8a <memset+0xa>
 8008e88:	4770      	bx	lr
 8008e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e8e:	e7f9      	b.n	8008e84 <memset+0x4>

08008e90 <strncmp>:
 8008e90:	b510      	push	{r4, lr}
 8008e92:	b16a      	cbz	r2, 8008eb0 <strncmp+0x20>
 8008e94:	3901      	subs	r1, #1
 8008e96:	1884      	adds	r4, r0, r2
 8008e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d103      	bne.n	8008eac <strncmp+0x1c>
 8008ea4:	42a0      	cmp	r0, r4
 8008ea6:	d001      	beq.n	8008eac <strncmp+0x1c>
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	d1f5      	bne.n	8008e98 <strncmp+0x8>
 8008eac:	1ad0      	subs	r0, r2, r3
 8008eae:	bd10      	pop	{r4, pc}
 8008eb0:	4610      	mov	r0, r2
 8008eb2:	e7fc      	b.n	8008eae <strncmp+0x1e>

08008eb4 <strtok>:
 8008eb4:	4b16      	ldr	r3, [pc, #88]	@ (8008f10 <strtok+0x5c>)
 8008eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	681f      	ldr	r7, [r3, #0]
 8008ebc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	460e      	mov	r6, r1
 8008ec2:	b9ec      	cbnz	r4, 8008f00 <strtok+0x4c>
 8008ec4:	2050      	movs	r0, #80	@ 0x50
 8008ec6:	f001 faeb 	bl	800a4a0 <malloc>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ece:	b920      	cbnz	r0, 8008eda <strtok+0x26>
 8008ed0:	4b10      	ldr	r3, [pc, #64]	@ (8008f14 <strtok+0x60>)
 8008ed2:	4811      	ldr	r0, [pc, #68]	@ (8008f18 <strtok+0x64>)
 8008ed4:	215b      	movs	r1, #91	@ 0x5b
 8008ed6:	f000 f8f5 	bl	80090c4 <__assert_func>
 8008eda:	e9c0 4400 	strd	r4, r4, [r0]
 8008ede:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ee2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ee6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008eea:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008eee:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008ef2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008ef6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008efa:	6184      	str	r4, [r0, #24]
 8008efc:	7704      	strb	r4, [r0, #28]
 8008efe:	6244      	str	r4, [r0, #36]	@ 0x24
 8008f00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	2301      	movs	r3, #1
 8008f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0c:	f000 b806 	b.w	8008f1c <__strtok_r>
 8008f10:	20000204 	.word	0x20000204
 8008f14:	0800bc51 	.word	0x0800bc51
 8008f18:	0800bc68 	.word	0x0800bc68

08008f1c <__strtok_r>:
 8008f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	b908      	cbnz	r0, 8008f26 <__strtok_r+0xa>
 8008f22:	6814      	ldr	r4, [r2, #0]
 8008f24:	b144      	cbz	r4, 8008f38 <__strtok_r+0x1c>
 8008f26:	4620      	mov	r0, r4
 8008f28:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f2c:	460f      	mov	r7, r1
 8008f2e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f32:	b91e      	cbnz	r6, 8008f3c <__strtok_r+0x20>
 8008f34:	b965      	cbnz	r5, 8008f50 <__strtok_r+0x34>
 8008f36:	6015      	str	r5, [r2, #0]
 8008f38:	2000      	movs	r0, #0
 8008f3a:	e005      	b.n	8008f48 <__strtok_r+0x2c>
 8008f3c:	42b5      	cmp	r5, r6
 8008f3e:	d1f6      	bne.n	8008f2e <__strtok_r+0x12>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f0      	bne.n	8008f26 <__strtok_r+0xa>
 8008f44:	6014      	str	r4, [r2, #0]
 8008f46:	7003      	strb	r3, [r0, #0]
 8008f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f4a:	461c      	mov	r4, r3
 8008f4c:	e00c      	b.n	8008f68 <__strtok_r+0x4c>
 8008f4e:	b915      	cbnz	r5, 8008f56 <__strtok_r+0x3a>
 8008f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f54:	460e      	mov	r6, r1
 8008f56:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f5a:	42ab      	cmp	r3, r5
 8008f5c:	d1f7      	bne.n	8008f4e <__strtok_r+0x32>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d0f3      	beq.n	8008f4a <__strtok_r+0x2e>
 8008f62:	2300      	movs	r3, #0
 8008f64:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	e7ed      	b.n	8008f48 <__strtok_r+0x2c>

08008f6c <strstr>:
 8008f6c:	780a      	ldrb	r2, [r1, #0]
 8008f6e:	b570      	push	{r4, r5, r6, lr}
 8008f70:	b96a      	cbnz	r2, 8008f8e <strstr+0x22>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d109      	bne.n	8008f8c <strstr+0x20>
 8008f78:	460c      	mov	r4, r1
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0f6      	beq.n	8008f72 <strstr+0x6>
 8008f84:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008f88:	429e      	cmp	r6, r3
 8008f8a:	d0f7      	beq.n	8008f7c <strstr+0x10>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	7803      	ldrb	r3, [r0, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1ef      	bne.n	8008f74 <strstr+0x8>
 8008f94:	4618      	mov	r0, r3
 8008f96:	e7ec      	b.n	8008f72 <strstr+0x6>

08008f98 <_localeconv_r>:
 8008f98:	4800      	ldr	r0, [pc, #0]	@ (8008f9c <_localeconv_r+0x4>)
 8008f9a:	4770      	bx	lr
 8008f9c:	20000188 	.word	0x20000188

08008fa0 <_close_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d06      	ldr	r5, [pc, #24]	@ (8008fbc <_close_r+0x1c>)
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4608      	mov	r0, r1
 8008faa:	602b      	str	r3, [r5, #0]
 8008fac:	f7fb fc05 	bl	80047ba <_close>
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	d102      	bne.n	8008fba <_close_r+0x1a>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	b103      	cbz	r3, 8008fba <_close_r+0x1a>
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	bd38      	pop	{r3, r4, r5, pc}
 8008fbc:	200007a8 	.word	0x200007a8

08008fc0 <_lseek_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4d07      	ldr	r5, [pc, #28]	@ (8008fe0 <_lseek_r+0x20>)
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	602a      	str	r2, [r5, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7fb fc1a 	bl	8004808 <_lseek>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_lseek_r+0x1e>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_lseek_r+0x1e>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	200007a8 	.word	0x200007a8

08008fe4 <_read_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4d07      	ldr	r5, [pc, #28]	@ (8009004 <_read_r+0x20>)
 8008fe8:	4604      	mov	r4, r0
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	602a      	str	r2, [r5, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f7fb fbc4 	bl	8004780 <_read>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_read_r+0x1e>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_read_r+0x1e>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	200007a8 	.word	0x200007a8

08009008 <_write_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d07      	ldr	r5, [pc, #28]	@ (8009028 <_write_r+0x20>)
 800900c:	4604      	mov	r4, r0
 800900e:	4608      	mov	r0, r1
 8009010:	4611      	mov	r1, r2
 8009012:	2200      	movs	r2, #0
 8009014:	602a      	str	r2, [r5, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f7fb f8d4 	bl	80041c4 <_write>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	d102      	bne.n	8009026 <_write_r+0x1e>
 8009020:	682b      	ldr	r3, [r5, #0]
 8009022:	b103      	cbz	r3, 8009026 <_write_r+0x1e>
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	bd38      	pop	{r3, r4, r5, pc}
 8009028:	200007a8 	.word	0x200007a8

0800902c <__errno>:
 800902c:	4b01      	ldr	r3, [pc, #4]	@ (8009034 <__errno+0x8>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20000204 	.word	0x20000204

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	4d0d      	ldr	r5, [pc, #52]	@ (8009070 <__libc_init_array+0x38>)
 800903c:	4c0d      	ldr	r4, [pc, #52]	@ (8009074 <__libc_init_array+0x3c>)
 800903e:	1b64      	subs	r4, r4, r5
 8009040:	10a4      	asrs	r4, r4, #2
 8009042:	2600      	movs	r6, #0
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	4d0b      	ldr	r5, [pc, #44]	@ (8009078 <__libc_init_array+0x40>)
 800904a:	4c0c      	ldr	r4, [pc, #48]	@ (800907c <__libc_init_array+0x44>)
 800904c:	f002 fd44 	bl	800bad8 <_init>
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	2600      	movs	r6, #0
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	0800c054 	.word	0x0800c054
 8009074:	0800c054 	.word	0x0800c054
 8009078:	0800c054 	.word	0x0800c054
 800907c:	0800c058 	.word	0x0800c058

08009080 <__retarget_lock_init_recursive>:
 8009080:	4770      	bx	lr

08009082 <__retarget_lock_acquire_recursive>:
 8009082:	4770      	bx	lr

08009084 <__retarget_lock_release_recursive>:
 8009084:	4770      	bx	lr

08009086 <memcpy>:
 8009086:	440a      	add	r2, r1
 8009088:	4291      	cmp	r1, r2
 800908a:	f100 33ff 	add.w	r3, r0, #4294967295
 800908e:	d100      	bne.n	8009092 <memcpy+0xc>
 8009090:	4770      	bx	lr
 8009092:	b510      	push	{r4, lr}
 8009094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909c:	4291      	cmp	r1, r2
 800909e:	d1f9      	bne.n	8009094 <memcpy+0xe>
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	0000      	movs	r0, r0
 80090a4:	0000      	movs	r0, r0
	...

080090a8 <nan>:
 80090a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80090b0 <nan+0x8>
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	00000000 	.word	0x00000000
 80090b4:	7ff80000 	.word	0x7ff80000

080090b8 <nanf>:
 80090b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80090c0 <nanf+0x8>
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	7fc00000 	.word	0x7fc00000

080090c4 <__assert_func>:
 80090c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c6:	4614      	mov	r4, r2
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <__assert_func+0x2c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4605      	mov	r5, r0
 80090d0:	68d8      	ldr	r0, [r3, #12]
 80090d2:	b954      	cbnz	r4, 80090ea <__assert_func+0x26>
 80090d4:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <__assert_func+0x30>)
 80090d6:	461c      	mov	r4, r3
 80090d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090dc:	9100      	str	r1, [sp, #0]
 80090de:	462b      	mov	r3, r5
 80090e0:	4905      	ldr	r1, [pc, #20]	@ (80090f8 <__assert_func+0x34>)
 80090e2:	f002 fb25 	bl	800b730 <fiprintf>
 80090e6:	f002 fbe3 	bl	800b8b0 <abort>
 80090ea:	4b04      	ldr	r3, [pc, #16]	@ (80090fc <__assert_func+0x38>)
 80090ec:	e7f4      	b.n	80090d8 <__assert_func+0x14>
 80090ee:	bf00      	nop
 80090f0:	20000204 	.word	0x20000204
 80090f4:	0800bd05 	.word	0x0800bd05
 80090f8:	0800bcd7 	.word	0x0800bcd7
 80090fc:	0800bcca 	.word	0x0800bcca

08009100 <quorem>:
 8009100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	6903      	ldr	r3, [r0, #16]
 8009106:	690c      	ldr	r4, [r1, #16]
 8009108:	42a3      	cmp	r3, r4
 800910a:	4607      	mov	r7, r0
 800910c:	db7e      	blt.n	800920c <quorem+0x10c>
 800910e:	3c01      	subs	r4, #1
 8009110:	f101 0814 	add.w	r8, r1, #20
 8009114:	00a3      	lsls	r3, r4, #2
 8009116:	f100 0514 	add.w	r5, r0, #20
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800912a:	3301      	adds	r3, #1
 800912c:	429a      	cmp	r2, r3
 800912e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009132:	fbb2 f6f3 	udiv	r6, r2, r3
 8009136:	d32e      	bcc.n	8009196 <quorem+0x96>
 8009138:	f04f 0a00 	mov.w	sl, #0
 800913c:	46c4      	mov	ip, r8
 800913e:	46ae      	mov	lr, r5
 8009140:	46d3      	mov	fp, sl
 8009142:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009146:	b298      	uxth	r0, r3
 8009148:	fb06 a000 	mla	r0, r6, r0, sl
 800914c:	0c02      	lsrs	r2, r0, #16
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	fb06 2303 	mla	r3, r6, r3, r2
 8009154:	f8de 2000 	ldr.w	r2, [lr]
 8009158:	b280      	uxth	r0, r0
 800915a:	b292      	uxth	r2, r2
 800915c:	1a12      	subs	r2, r2, r0
 800915e:	445a      	add	r2, fp
 8009160:	f8de 0000 	ldr.w	r0, [lr]
 8009164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009168:	b29b      	uxth	r3, r3
 800916a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800916e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009172:	b292      	uxth	r2, r2
 8009174:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009178:	45e1      	cmp	r9, ip
 800917a:	f84e 2b04 	str.w	r2, [lr], #4
 800917e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009182:	d2de      	bcs.n	8009142 <quorem+0x42>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	58eb      	ldr	r3, [r5, r3]
 8009188:	b92b      	cbnz	r3, 8009196 <quorem+0x96>
 800918a:	9b01      	ldr	r3, [sp, #4]
 800918c:	3b04      	subs	r3, #4
 800918e:	429d      	cmp	r5, r3
 8009190:	461a      	mov	r2, r3
 8009192:	d32f      	bcc.n	80091f4 <quorem+0xf4>
 8009194:	613c      	str	r4, [r7, #16]
 8009196:	4638      	mov	r0, r7
 8009198:	f001 fd0e 	bl	800abb8 <__mcmp>
 800919c:	2800      	cmp	r0, #0
 800919e:	db25      	blt.n	80091ec <quorem+0xec>
 80091a0:	4629      	mov	r1, r5
 80091a2:	2000      	movs	r0, #0
 80091a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091a8:	f8d1 c000 	ldr.w	ip, [r1]
 80091ac:	fa1f fe82 	uxth.w	lr, r2
 80091b0:	fa1f f38c 	uxth.w	r3, ip
 80091b4:	eba3 030e 	sub.w	r3, r3, lr
 80091b8:	4403      	add	r3, r0
 80091ba:	0c12      	lsrs	r2, r2, #16
 80091bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80091c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ca:	45c1      	cmp	r9, r8
 80091cc:	f841 3b04 	str.w	r3, [r1], #4
 80091d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091d4:	d2e6      	bcs.n	80091a4 <quorem+0xa4>
 80091d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091de:	b922      	cbnz	r2, 80091ea <quorem+0xea>
 80091e0:	3b04      	subs	r3, #4
 80091e2:	429d      	cmp	r5, r3
 80091e4:	461a      	mov	r2, r3
 80091e6:	d30b      	bcc.n	8009200 <quorem+0x100>
 80091e8:	613c      	str	r4, [r7, #16]
 80091ea:	3601      	adds	r6, #1
 80091ec:	4630      	mov	r0, r6
 80091ee:	b003      	add	sp, #12
 80091f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	3b04      	subs	r3, #4
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	d1cb      	bne.n	8009194 <quorem+0x94>
 80091fc:	3c01      	subs	r4, #1
 80091fe:	e7c6      	b.n	800918e <quorem+0x8e>
 8009200:	6812      	ldr	r2, [r2, #0]
 8009202:	3b04      	subs	r3, #4
 8009204:	2a00      	cmp	r2, #0
 8009206:	d1ef      	bne.n	80091e8 <quorem+0xe8>
 8009208:	3c01      	subs	r4, #1
 800920a:	e7ea      	b.n	80091e2 <quorem+0xe2>
 800920c:	2000      	movs	r0, #0
 800920e:	e7ee      	b.n	80091ee <quorem+0xee>

08009210 <_dtoa_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	69c7      	ldr	r7, [r0, #28]
 8009216:	b099      	sub	sp, #100	@ 0x64
 8009218:	ed8d 0b02 	vstr	d0, [sp, #8]
 800921c:	ec55 4b10 	vmov	r4, r5, d0
 8009220:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009222:	9109      	str	r1, [sp, #36]	@ 0x24
 8009224:	4683      	mov	fp, r0
 8009226:	920e      	str	r2, [sp, #56]	@ 0x38
 8009228:	9313      	str	r3, [sp, #76]	@ 0x4c
 800922a:	b97f      	cbnz	r7, 800924c <_dtoa_r+0x3c>
 800922c:	2010      	movs	r0, #16
 800922e:	f001 f937 	bl	800a4a0 <malloc>
 8009232:	4602      	mov	r2, r0
 8009234:	f8cb 001c 	str.w	r0, [fp, #28]
 8009238:	b920      	cbnz	r0, 8009244 <_dtoa_r+0x34>
 800923a:	4ba7      	ldr	r3, [pc, #668]	@ (80094d8 <_dtoa_r+0x2c8>)
 800923c:	21ef      	movs	r1, #239	@ 0xef
 800923e:	48a7      	ldr	r0, [pc, #668]	@ (80094dc <_dtoa_r+0x2cc>)
 8009240:	f7ff ff40 	bl	80090c4 <__assert_func>
 8009244:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009248:	6007      	str	r7, [r0, #0]
 800924a:	60c7      	str	r7, [r0, #12]
 800924c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	b159      	cbz	r1, 800926c <_dtoa_r+0x5c>
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	604a      	str	r2, [r1, #4]
 8009258:	2301      	movs	r3, #1
 800925a:	4093      	lsls	r3, r2
 800925c:	608b      	str	r3, [r1, #8]
 800925e:	4658      	mov	r0, fp
 8009260:	f001 fa26 	bl	800a6b0 <_Bfree>
 8009264:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009268:	2200      	movs	r2, #0
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	1e2b      	subs	r3, r5, #0
 800926e:	bfb9      	ittee	lt
 8009270:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009274:	9303      	strlt	r3, [sp, #12]
 8009276:	2300      	movge	r3, #0
 8009278:	6033      	strge	r3, [r6, #0]
 800927a:	9f03      	ldr	r7, [sp, #12]
 800927c:	4b98      	ldr	r3, [pc, #608]	@ (80094e0 <_dtoa_r+0x2d0>)
 800927e:	bfbc      	itt	lt
 8009280:	2201      	movlt	r2, #1
 8009282:	6032      	strlt	r2, [r6, #0]
 8009284:	43bb      	bics	r3, r7
 8009286:	d112      	bne.n	80092ae <_dtoa_r+0x9e>
 8009288:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800928a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009294:	4323      	orrs	r3, r4
 8009296:	f000 854d 	beq.w	8009d34 <_dtoa_r+0xb24>
 800929a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800929c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80094f4 <_dtoa_r+0x2e4>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 854f 	beq.w	8009d44 <_dtoa_r+0xb34>
 80092a6:	f10a 0303 	add.w	r3, sl, #3
 80092aa:	f000 bd49 	b.w	8009d40 <_dtoa_r+0xb30>
 80092ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092b2:	2200      	movs	r2, #0
 80092b4:	ec51 0b17 	vmov	r0, r1, d7
 80092b8:	2300      	movs	r3, #0
 80092ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092be:	f7f7 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80092c2:	4680      	mov	r8, r0
 80092c4:	b158      	cbz	r0, 80092de <_dtoa_r+0xce>
 80092c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092c8:	2301      	movs	r3, #1
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092ce:	b113      	cbz	r3, 80092d6 <_dtoa_r+0xc6>
 80092d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092d2:	4b84      	ldr	r3, [pc, #528]	@ (80094e4 <_dtoa_r+0x2d4>)
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80094f8 <_dtoa_r+0x2e8>
 80092da:	f000 bd33 	b.w	8009d44 <_dtoa_r+0xb34>
 80092de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80092e2:	aa16      	add	r2, sp, #88	@ 0x58
 80092e4:	a917      	add	r1, sp, #92	@ 0x5c
 80092e6:	4658      	mov	r0, fp
 80092e8:	f001 fd86 	bl	800adf8 <__d2b>
 80092ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80092f0:	4681      	mov	r9, r0
 80092f2:	2e00      	cmp	r6, #0
 80092f4:	d077      	beq.n	80093e6 <_dtoa_r+0x1d6>
 80092f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80092fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009304:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009308:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800930c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009310:	4619      	mov	r1, r3
 8009312:	2200      	movs	r2, #0
 8009314:	4b74      	ldr	r3, [pc, #464]	@ (80094e8 <_dtoa_r+0x2d8>)
 8009316:	f7f6 ffb7 	bl	8000288 <__aeabi_dsub>
 800931a:	a369      	add	r3, pc, #420	@ (adr r3, 80094c0 <_dtoa_r+0x2b0>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	f7f7 f96a 	bl	80005f8 <__aeabi_dmul>
 8009324:	a368      	add	r3, pc, #416	@ (adr r3, 80094c8 <_dtoa_r+0x2b8>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffaf 	bl	800028c <__adddf3>
 800932e:	4604      	mov	r4, r0
 8009330:	4630      	mov	r0, r6
 8009332:	460d      	mov	r5, r1
 8009334:	f7f7 f8f6 	bl	8000524 <__aeabi_i2d>
 8009338:	a365      	add	r3, pc, #404	@ (adr r3, 80094d0 <_dtoa_r+0x2c0>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f7 f95b 	bl	80005f8 <__aeabi_dmul>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4620      	mov	r0, r4
 8009348:	4629      	mov	r1, r5
 800934a:	f7f6 ff9f 	bl	800028c <__adddf3>
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	f7f7 fc01 	bl	8000b58 <__aeabi_d2iz>
 8009356:	2200      	movs	r2, #0
 8009358:	4607      	mov	r7, r0
 800935a:	2300      	movs	r3, #0
 800935c:	4620      	mov	r0, r4
 800935e:	4629      	mov	r1, r5
 8009360:	f7f7 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8009364:	b140      	cbz	r0, 8009378 <_dtoa_r+0x168>
 8009366:	4638      	mov	r0, r7
 8009368:	f7f7 f8dc 	bl	8000524 <__aeabi_i2d>
 800936c:	4622      	mov	r2, r4
 800936e:	462b      	mov	r3, r5
 8009370:	f7f7 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009374:	b900      	cbnz	r0, 8009378 <_dtoa_r+0x168>
 8009376:	3f01      	subs	r7, #1
 8009378:	2f16      	cmp	r7, #22
 800937a:	d851      	bhi.n	8009420 <_dtoa_r+0x210>
 800937c:	4b5b      	ldr	r3, [pc, #364]	@ (80094ec <_dtoa_r+0x2dc>)
 800937e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800938a:	f7f7 fba7 	bl	8000adc <__aeabi_dcmplt>
 800938e:	2800      	cmp	r0, #0
 8009390:	d048      	beq.n	8009424 <_dtoa_r+0x214>
 8009392:	3f01      	subs	r7, #1
 8009394:	2300      	movs	r3, #0
 8009396:	9312      	str	r3, [sp, #72]	@ 0x48
 8009398:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800939a:	1b9b      	subs	r3, r3, r6
 800939c:	1e5a      	subs	r2, r3, #1
 800939e:	bf44      	itt	mi
 80093a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80093a4:	2300      	movmi	r3, #0
 80093a6:	9208      	str	r2, [sp, #32]
 80093a8:	bf54      	ite	pl
 80093aa:	f04f 0800 	movpl.w	r8, #0
 80093ae:	9308      	strmi	r3, [sp, #32]
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	db39      	blt.n	8009428 <_dtoa_r+0x218>
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093b8:	443b      	add	r3, r7
 80093ba:	9308      	str	r3, [sp, #32]
 80093bc:	2300      	movs	r3, #0
 80093be:	930a      	str	r3, [sp, #40]	@ 0x28
 80093c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c2:	2b09      	cmp	r3, #9
 80093c4:	d864      	bhi.n	8009490 <_dtoa_r+0x280>
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	bfc4      	itt	gt
 80093ca:	3b04      	subgt	r3, #4
 80093cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80093ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d0:	f1a3 0302 	sub.w	r3, r3, #2
 80093d4:	bfcc      	ite	gt
 80093d6:	2400      	movgt	r4, #0
 80093d8:	2401      	movle	r4, #1
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d863      	bhi.n	80094a6 <_dtoa_r+0x296>
 80093de:	e8df f003 	tbb	[pc, r3]
 80093e2:	372a      	.short	0x372a
 80093e4:	5535      	.short	0x5535
 80093e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80093ea:	441e      	add	r6, r3
 80093ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	bfc1      	itttt	gt
 80093f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80093f8:	409f      	lslgt	r7, r3
 80093fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80093fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009402:	bfd6      	itet	le
 8009404:	f1c3 0320 	rsble	r3, r3, #32
 8009408:	ea47 0003 	orrgt.w	r0, r7, r3
 800940c:	fa04 f003 	lslle.w	r0, r4, r3
 8009410:	f7f7 f878 	bl	8000504 <__aeabi_ui2d>
 8009414:	2201      	movs	r2, #1
 8009416:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800941a:	3e01      	subs	r6, #1
 800941c:	9214      	str	r2, [sp, #80]	@ 0x50
 800941e:	e777      	b.n	8009310 <_dtoa_r+0x100>
 8009420:	2301      	movs	r3, #1
 8009422:	e7b8      	b.n	8009396 <_dtoa_r+0x186>
 8009424:	9012      	str	r0, [sp, #72]	@ 0x48
 8009426:	e7b7      	b.n	8009398 <_dtoa_r+0x188>
 8009428:	427b      	negs	r3, r7
 800942a:	930a      	str	r3, [sp, #40]	@ 0x28
 800942c:	2300      	movs	r3, #0
 800942e:	eba8 0807 	sub.w	r8, r8, r7
 8009432:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009434:	e7c4      	b.n	80093c0 <_dtoa_r+0x1b0>
 8009436:	2300      	movs	r3, #0
 8009438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800943a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800943c:	2b00      	cmp	r3, #0
 800943e:	dc35      	bgt.n	80094ac <_dtoa_r+0x29c>
 8009440:	2301      	movs	r3, #1
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	9307      	str	r3, [sp, #28]
 8009446:	461a      	mov	r2, r3
 8009448:	920e      	str	r2, [sp, #56]	@ 0x38
 800944a:	e00b      	b.n	8009464 <_dtoa_r+0x254>
 800944c:	2301      	movs	r3, #1
 800944e:	e7f3      	b.n	8009438 <_dtoa_r+0x228>
 8009450:	2300      	movs	r3, #0
 8009452:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009456:	18fb      	adds	r3, r7, r3
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	2b01      	cmp	r3, #1
 800945e:	9307      	str	r3, [sp, #28]
 8009460:	bfb8      	it	lt
 8009462:	2301      	movlt	r3, #1
 8009464:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009468:	2100      	movs	r1, #0
 800946a:	2204      	movs	r2, #4
 800946c:	f102 0514 	add.w	r5, r2, #20
 8009470:	429d      	cmp	r5, r3
 8009472:	d91f      	bls.n	80094b4 <_dtoa_r+0x2a4>
 8009474:	6041      	str	r1, [r0, #4]
 8009476:	4658      	mov	r0, fp
 8009478:	f001 f8da 	bl	800a630 <_Balloc>
 800947c:	4682      	mov	sl, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	d13c      	bne.n	80094fc <_dtoa_r+0x2ec>
 8009482:	4b1b      	ldr	r3, [pc, #108]	@ (80094f0 <_dtoa_r+0x2e0>)
 8009484:	4602      	mov	r2, r0
 8009486:	f240 11af 	movw	r1, #431	@ 0x1af
 800948a:	e6d8      	b.n	800923e <_dtoa_r+0x2e>
 800948c:	2301      	movs	r3, #1
 800948e:	e7e0      	b.n	8009452 <_dtoa_r+0x242>
 8009490:	2401      	movs	r4, #1
 8009492:	2300      	movs	r3, #0
 8009494:	9309      	str	r3, [sp, #36]	@ 0x24
 8009496:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009498:	f04f 33ff 	mov.w	r3, #4294967295
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	9307      	str	r3, [sp, #28]
 80094a0:	2200      	movs	r2, #0
 80094a2:	2312      	movs	r3, #18
 80094a4:	e7d0      	b.n	8009448 <_dtoa_r+0x238>
 80094a6:	2301      	movs	r3, #1
 80094a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094aa:	e7f5      	b.n	8009498 <_dtoa_r+0x288>
 80094ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	9307      	str	r3, [sp, #28]
 80094b2:	e7d7      	b.n	8009464 <_dtoa_r+0x254>
 80094b4:	3101      	adds	r1, #1
 80094b6:	0052      	lsls	r2, r2, #1
 80094b8:	e7d8      	b.n	800946c <_dtoa_r+0x25c>
 80094ba:	bf00      	nop
 80094bc:	f3af 8000 	nop.w
 80094c0:	636f4361 	.word	0x636f4361
 80094c4:	3fd287a7 	.word	0x3fd287a7
 80094c8:	8b60c8b3 	.word	0x8b60c8b3
 80094cc:	3fc68a28 	.word	0x3fc68a28
 80094d0:	509f79fb 	.word	0x509f79fb
 80094d4:	3fd34413 	.word	0x3fd34413
 80094d8:	0800bc51 	.word	0x0800bc51
 80094dc:	0800bd13 	.word	0x0800bd13
 80094e0:	7ff00000 	.word	0x7ff00000
 80094e4:	0800bc29 	.word	0x0800bc29
 80094e8:	3ff80000 	.word	0x3ff80000
 80094ec:	0800be70 	.word	0x0800be70
 80094f0:	0800bd6b 	.word	0x0800bd6b
 80094f4:	0800bd0f 	.word	0x0800bd0f
 80094f8:	0800bc28 	.word	0x0800bc28
 80094fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009500:	6018      	str	r0, [r3, #0]
 8009502:	9b07      	ldr	r3, [sp, #28]
 8009504:	2b0e      	cmp	r3, #14
 8009506:	f200 80a4 	bhi.w	8009652 <_dtoa_r+0x442>
 800950a:	2c00      	cmp	r4, #0
 800950c:	f000 80a1 	beq.w	8009652 <_dtoa_r+0x442>
 8009510:	2f00      	cmp	r7, #0
 8009512:	dd33      	ble.n	800957c <_dtoa_r+0x36c>
 8009514:	4bad      	ldr	r3, [pc, #692]	@ (80097cc <_dtoa_r+0x5bc>)
 8009516:	f007 020f 	and.w	r2, r7, #15
 800951a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800951e:	ed93 7b00 	vldr	d7, [r3]
 8009522:	05f8      	lsls	r0, r7, #23
 8009524:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009528:	ea4f 1427 	mov.w	r4, r7, asr #4
 800952c:	d516      	bpl.n	800955c <_dtoa_r+0x34c>
 800952e:	4ba8      	ldr	r3, [pc, #672]	@ (80097d0 <_dtoa_r+0x5c0>)
 8009530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009538:	f7f7 f988 	bl	800084c <__aeabi_ddiv>
 800953c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009540:	f004 040f 	and.w	r4, r4, #15
 8009544:	2603      	movs	r6, #3
 8009546:	4da2      	ldr	r5, [pc, #648]	@ (80097d0 <_dtoa_r+0x5c0>)
 8009548:	b954      	cbnz	r4, 8009560 <_dtoa_r+0x350>
 800954a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800954e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009552:	f7f7 f97b 	bl	800084c <__aeabi_ddiv>
 8009556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800955a:	e028      	b.n	80095ae <_dtoa_r+0x39e>
 800955c:	2602      	movs	r6, #2
 800955e:	e7f2      	b.n	8009546 <_dtoa_r+0x336>
 8009560:	07e1      	lsls	r1, r4, #31
 8009562:	d508      	bpl.n	8009576 <_dtoa_r+0x366>
 8009564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009568:	e9d5 2300 	ldrd	r2, r3, [r5]
 800956c:	f7f7 f844 	bl	80005f8 <__aeabi_dmul>
 8009570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009574:	3601      	adds	r6, #1
 8009576:	1064      	asrs	r4, r4, #1
 8009578:	3508      	adds	r5, #8
 800957a:	e7e5      	b.n	8009548 <_dtoa_r+0x338>
 800957c:	f000 80d2 	beq.w	8009724 <_dtoa_r+0x514>
 8009580:	427c      	negs	r4, r7
 8009582:	4b92      	ldr	r3, [pc, #584]	@ (80097cc <_dtoa_r+0x5bc>)
 8009584:	4d92      	ldr	r5, [pc, #584]	@ (80097d0 <_dtoa_r+0x5c0>)
 8009586:	f004 020f 	and.w	r2, r4, #15
 800958a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009596:	f7f7 f82f 	bl	80005f8 <__aeabi_dmul>
 800959a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800959e:	1124      	asrs	r4, r4, #4
 80095a0:	2300      	movs	r3, #0
 80095a2:	2602      	movs	r6, #2
 80095a4:	2c00      	cmp	r4, #0
 80095a6:	f040 80b2 	bne.w	800970e <_dtoa_r+0x4fe>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1d3      	bne.n	8009556 <_dtoa_r+0x346>
 80095ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 80b7 	beq.w	8009728 <_dtoa_r+0x518>
 80095ba:	4b86      	ldr	r3, [pc, #536]	@ (80097d4 <_dtoa_r+0x5c4>)
 80095bc:	2200      	movs	r2, #0
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f7 fa8b 	bl	8000adc <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f000 80ae 	beq.w	8009728 <_dtoa_r+0x518>
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 80aa 	beq.w	8009728 <_dtoa_r+0x518>
 80095d4:	9b00      	ldr	r3, [sp, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	dd37      	ble.n	800964a <_dtoa_r+0x43a>
 80095da:	1e7b      	subs	r3, r7, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	4620      	mov	r0, r4
 80095e0:	4b7d      	ldr	r3, [pc, #500]	@ (80097d8 <_dtoa_r+0x5c8>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	4629      	mov	r1, r5
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ee:	9c00      	ldr	r4, [sp, #0]
 80095f0:	3601      	adds	r6, #1
 80095f2:	4630      	mov	r0, r6
 80095f4:	f7f6 ff96 	bl	8000524 <__aeabi_i2d>
 80095f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095fc:	f7f6 fffc 	bl	80005f8 <__aeabi_dmul>
 8009600:	4b76      	ldr	r3, [pc, #472]	@ (80097dc <_dtoa_r+0x5cc>)
 8009602:	2200      	movs	r2, #0
 8009604:	f7f6 fe42 	bl	800028c <__adddf3>
 8009608:	4605      	mov	r5, r0
 800960a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800960e:	2c00      	cmp	r4, #0
 8009610:	f040 808d 	bne.w	800972e <_dtoa_r+0x51e>
 8009614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009618:	4b71      	ldr	r3, [pc, #452]	@ (80097e0 <_dtoa_r+0x5d0>)
 800961a:	2200      	movs	r2, #0
 800961c:	f7f6 fe34 	bl	8000288 <__aeabi_dsub>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009628:	462a      	mov	r2, r5
 800962a:	4633      	mov	r3, r6
 800962c:	f7f7 fa74 	bl	8000b18 <__aeabi_dcmpgt>
 8009630:	2800      	cmp	r0, #0
 8009632:	f040 828b 	bne.w	8009b4c <_dtoa_r+0x93c>
 8009636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800963a:	462a      	mov	r2, r5
 800963c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009640:	f7f7 fa4c 	bl	8000adc <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	f040 8128 	bne.w	800989a <_dtoa_r+0x68a>
 800964a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800964e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009652:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009654:	2b00      	cmp	r3, #0
 8009656:	f2c0 815a 	blt.w	800990e <_dtoa_r+0x6fe>
 800965a:	2f0e      	cmp	r7, #14
 800965c:	f300 8157 	bgt.w	800990e <_dtoa_r+0x6fe>
 8009660:	4b5a      	ldr	r3, [pc, #360]	@ (80097cc <_dtoa_r+0x5bc>)
 8009662:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009666:	ed93 7b00 	vldr	d7, [r3]
 800966a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800966c:	2b00      	cmp	r3, #0
 800966e:	ed8d 7b00 	vstr	d7, [sp]
 8009672:	da03      	bge.n	800967c <_dtoa_r+0x46c>
 8009674:	9b07      	ldr	r3, [sp, #28]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f340 8101 	ble.w	800987e <_dtoa_r+0x66e>
 800967c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009680:	4656      	mov	r6, sl
 8009682:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009686:	4620      	mov	r0, r4
 8009688:	4629      	mov	r1, r5
 800968a:	f7f7 f8df 	bl	800084c <__aeabi_ddiv>
 800968e:	f7f7 fa63 	bl	8000b58 <__aeabi_d2iz>
 8009692:	4680      	mov	r8, r0
 8009694:	f7f6 ff46 	bl	8000524 <__aeabi_i2d>
 8009698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800969c:	f7f6 ffac 	bl	80005f8 <__aeabi_dmul>
 80096a0:	4602      	mov	r2, r0
 80096a2:	460b      	mov	r3, r1
 80096a4:	4620      	mov	r0, r4
 80096a6:	4629      	mov	r1, r5
 80096a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096ac:	f7f6 fdec 	bl	8000288 <__aeabi_dsub>
 80096b0:	f806 4b01 	strb.w	r4, [r6], #1
 80096b4:	9d07      	ldr	r5, [sp, #28]
 80096b6:	eba6 040a 	sub.w	r4, r6, sl
 80096ba:	42a5      	cmp	r5, r4
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	f040 8117 	bne.w	80098f2 <_dtoa_r+0x6e2>
 80096c4:	f7f6 fde2 	bl	800028c <__adddf3>
 80096c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096cc:	4604      	mov	r4, r0
 80096ce:	460d      	mov	r5, r1
 80096d0:	f7f7 fa22 	bl	8000b18 <__aeabi_dcmpgt>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	f040 80f9 	bne.w	80098cc <_dtoa_r+0x6bc>
 80096da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f7 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80096e6:	b118      	cbz	r0, 80096f0 <_dtoa_r+0x4e0>
 80096e8:	f018 0f01 	tst.w	r8, #1
 80096ec:	f040 80ee 	bne.w	80098cc <_dtoa_r+0x6bc>
 80096f0:	4649      	mov	r1, r9
 80096f2:	4658      	mov	r0, fp
 80096f4:	f000 ffdc 	bl	800a6b0 <_Bfree>
 80096f8:	2300      	movs	r3, #0
 80096fa:	7033      	strb	r3, [r6, #0]
 80096fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096fe:	3701      	adds	r7, #1
 8009700:	601f      	str	r7, [r3, #0]
 8009702:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 831d 	beq.w	8009d44 <_dtoa_r+0xb34>
 800970a:	601e      	str	r6, [r3, #0]
 800970c:	e31a      	b.n	8009d44 <_dtoa_r+0xb34>
 800970e:	07e2      	lsls	r2, r4, #31
 8009710:	d505      	bpl.n	800971e <_dtoa_r+0x50e>
 8009712:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	3601      	adds	r6, #1
 800971c:	2301      	movs	r3, #1
 800971e:	1064      	asrs	r4, r4, #1
 8009720:	3508      	adds	r5, #8
 8009722:	e73f      	b.n	80095a4 <_dtoa_r+0x394>
 8009724:	2602      	movs	r6, #2
 8009726:	e742      	b.n	80095ae <_dtoa_r+0x39e>
 8009728:	9c07      	ldr	r4, [sp, #28]
 800972a:	9704      	str	r7, [sp, #16]
 800972c:	e761      	b.n	80095f2 <_dtoa_r+0x3e2>
 800972e:	4b27      	ldr	r3, [pc, #156]	@ (80097cc <_dtoa_r+0x5bc>)
 8009730:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009732:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009736:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800973a:	4454      	add	r4, sl
 800973c:	2900      	cmp	r1, #0
 800973e:	d053      	beq.n	80097e8 <_dtoa_r+0x5d8>
 8009740:	4928      	ldr	r1, [pc, #160]	@ (80097e4 <_dtoa_r+0x5d4>)
 8009742:	2000      	movs	r0, #0
 8009744:	f7f7 f882 	bl	800084c <__aeabi_ddiv>
 8009748:	4633      	mov	r3, r6
 800974a:	462a      	mov	r2, r5
 800974c:	f7f6 fd9c 	bl	8000288 <__aeabi_dsub>
 8009750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009754:	4656      	mov	r6, sl
 8009756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975a:	f7f7 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800975e:	4605      	mov	r5, r0
 8009760:	f7f6 fee0 	bl	8000524 <__aeabi_i2d>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976c:	f7f6 fd8c 	bl	8000288 <__aeabi_dsub>
 8009770:	3530      	adds	r5, #48	@ 0x30
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800977a:	f806 5b01 	strb.w	r5, [r6], #1
 800977e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009782:	f7f7 f9ab 	bl	8000adc <__aeabi_dcmplt>
 8009786:	2800      	cmp	r0, #0
 8009788:	d171      	bne.n	800986e <_dtoa_r+0x65e>
 800978a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800978e:	4911      	ldr	r1, [pc, #68]	@ (80097d4 <_dtoa_r+0x5c4>)
 8009790:	2000      	movs	r0, #0
 8009792:	f7f6 fd79 	bl	8000288 <__aeabi_dsub>
 8009796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800979a:	f7f7 f99f 	bl	8000adc <__aeabi_dcmplt>
 800979e:	2800      	cmp	r0, #0
 80097a0:	f040 8095 	bne.w	80098ce <_dtoa_r+0x6be>
 80097a4:	42a6      	cmp	r6, r4
 80097a6:	f43f af50 	beq.w	800964a <_dtoa_r+0x43a>
 80097aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097ae:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <_dtoa_r+0x5c8>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	f7f6 ff21 	bl	80005f8 <__aeabi_dmul>
 80097b6:	4b08      	ldr	r3, [pc, #32]	@ (80097d8 <_dtoa_r+0x5c8>)
 80097b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097bc:	2200      	movs	r2, #0
 80097be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c2:	f7f6 ff19 	bl	80005f8 <__aeabi_dmul>
 80097c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ca:	e7c4      	b.n	8009756 <_dtoa_r+0x546>
 80097cc:	0800be70 	.word	0x0800be70
 80097d0:	0800be48 	.word	0x0800be48
 80097d4:	3ff00000 	.word	0x3ff00000
 80097d8:	40240000 	.word	0x40240000
 80097dc:	401c0000 	.word	0x401c0000
 80097e0:	40140000 	.word	0x40140000
 80097e4:	3fe00000 	.word	0x3fe00000
 80097e8:	4631      	mov	r1, r6
 80097ea:	4628      	mov	r0, r5
 80097ec:	f7f6 ff04 	bl	80005f8 <__aeabi_dmul>
 80097f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80097f6:	4656      	mov	r6, sl
 80097f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097fc:	f7f7 f9ac 	bl	8000b58 <__aeabi_d2iz>
 8009800:	4605      	mov	r5, r0
 8009802:	f7f6 fe8f 	bl	8000524 <__aeabi_i2d>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800980e:	f7f6 fd3b 	bl	8000288 <__aeabi_dsub>
 8009812:	3530      	adds	r5, #48	@ 0x30
 8009814:	f806 5b01 	strb.w	r5, [r6], #1
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	42a6      	cmp	r6, r4
 800981e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	d124      	bne.n	8009872 <_dtoa_r+0x662>
 8009828:	4bac      	ldr	r3, [pc, #688]	@ (8009adc <_dtoa_r+0x8cc>)
 800982a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800982e:	f7f6 fd2d 	bl	800028c <__adddf3>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800983a:	f7f7 f96d 	bl	8000b18 <__aeabi_dcmpgt>
 800983e:	2800      	cmp	r0, #0
 8009840:	d145      	bne.n	80098ce <_dtoa_r+0x6be>
 8009842:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009846:	49a5      	ldr	r1, [pc, #660]	@ (8009adc <_dtoa_r+0x8cc>)
 8009848:	2000      	movs	r0, #0
 800984a:	f7f6 fd1d 	bl	8000288 <__aeabi_dsub>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009856:	f7f7 f941 	bl	8000adc <__aeabi_dcmplt>
 800985a:	2800      	cmp	r0, #0
 800985c:	f43f aef5 	beq.w	800964a <_dtoa_r+0x43a>
 8009860:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009862:	1e73      	subs	r3, r6, #1
 8009864:	9315      	str	r3, [sp, #84]	@ 0x54
 8009866:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800986a:	2b30      	cmp	r3, #48	@ 0x30
 800986c:	d0f8      	beq.n	8009860 <_dtoa_r+0x650>
 800986e:	9f04      	ldr	r7, [sp, #16]
 8009870:	e73e      	b.n	80096f0 <_dtoa_r+0x4e0>
 8009872:	4b9b      	ldr	r3, [pc, #620]	@ (8009ae0 <_dtoa_r+0x8d0>)
 8009874:	f7f6 fec0 	bl	80005f8 <__aeabi_dmul>
 8009878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800987c:	e7bc      	b.n	80097f8 <_dtoa_r+0x5e8>
 800987e:	d10c      	bne.n	800989a <_dtoa_r+0x68a>
 8009880:	4b98      	ldr	r3, [pc, #608]	@ (8009ae4 <_dtoa_r+0x8d4>)
 8009882:	2200      	movs	r2, #0
 8009884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009888:	f7f6 feb6 	bl	80005f8 <__aeabi_dmul>
 800988c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009890:	f7f7 f938 	bl	8000b04 <__aeabi_dcmpge>
 8009894:	2800      	cmp	r0, #0
 8009896:	f000 8157 	beq.w	8009b48 <_dtoa_r+0x938>
 800989a:	2400      	movs	r4, #0
 800989c:	4625      	mov	r5, r4
 800989e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a0:	43db      	mvns	r3, r3
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	4656      	mov	r6, sl
 80098a6:	2700      	movs	r7, #0
 80098a8:	4621      	mov	r1, r4
 80098aa:	4658      	mov	r0, fp
 80098ac:	f000 ff00 	bl	800a6b0 <_Bfree>
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	d0dc      	beq.n	800986e <_dtoa_r+0x65e>
 80098b4:	b12f      	cbz	r7, 80098c2 <_dtoa_r+0x6b2>
 80098b6:	42af      	cmp	r7, r5
 80098b8:	d003      	beq.n	80098c2 <_dtoa_r+0x6b2>
 80098ba:	4639      	mov	r1, r7
 80098bc:	4658      	mov	r0, fp
 80098be:	f000 fef7 	bl	800a6b0 <_Bfree>
 80098c2:	4629      	mov	r1, r5
 80098c4:	4658      	mov	r0, fp
 80098c6:	f000 fef3 	bl	800a6b0 <_Bfree>
 80098ca:	e7d0      	b.n	800986e <_dtoa_r+0x65e>
 80098cc:	9704      	str	r7, [sp, #16]
 80098ce:	4633      	mov	r3, r6
 80098d0:	461e      	mov	r6, r3
 80098d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098d6:	2a39      	cmp	r2, #57	@ 0x39
 80098d8:	d107      	bne.n	80098ea <_dtoa_r+0x6da>
 80098da:	459a      	cmp	sl, r3
 80098dc:	d1f8      	bne.n	80098d0 <_dtoa_r+0x6c0>
 80098de:	9a04      	ldr	r2, [sp, #16]
 80098e0:	3201      	adds	r2, #1
 80098e2:	9204      	str	r2, [sp, #16]
 80098e4:	2230      	movs	r2, #48	@ 0x30
 80098e6:	f88a 2000 	strb.w	r2, [sl]
 80098ea:	781a      	ldrb	r2, [r3, #0]
 80098ec:	3201      	adds	r2, #1
 80098ee:	701a      	strb	r2, [r3, #0]
 80098f0:	e7bd      	b.n	800986e <_dtoa_r+0x65e>
 80098f2:	4b7b      	ldr	r3, [pc, #492]	@ (8009ae0 <_dtoa_r+0x8d0>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	2200      	movs	r2, #0
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	460d      	mov	r5, r1
 8009902:	f7f7 f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009906:	2800      	cmp	r0, #0
 8009908:	f43f aebb 	beq.w	8009682 <_dtoa_r+0x472>
 800990c:	e6f0      	b.n	80096f0 <_dtoa_r+0x4e0>
 800990e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009910:	2a00      	cmp	r2, #0
 8009912:	f000 80db 	beq.w	8009acc <_dtoa_r+0x8bc>
 8009916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009918:	2a01      	cmp	r2, #1
 800991a:	f300 80bf 	bgt.w	8009a9c <_dtoa_r+0x88c>
 800991e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009920:	2a00      	cmp	r2, #0
 8009922:	f000 80b7 	beq.w	8009a94 <_dtoa_r+0x884>
 8009926:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800992a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800992c:	4646      	mov	r6, r8
 800992e:	9a08      	ldr	r2, [sp, #32]
 8009930:	2101      	movs	r1, #1
 8009932:	441a      	add	r2, r3
 8009934:	4658      	mov	r0, fp
 8009936:	4498      	add	r8, r3
 8009938:	9208      	str	r2, [sp, #32]
 800993a:	f000 ffb7 	bl	800a8ac <__i2b>
 800993e:	4605      	mov	r5, r0
 8009940:	b15e      	cbz	r6, 800995a <_dtoa_r+0x74a>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	2b00      	cmp	r3, #0
 8009946:	dd08      	ble.n	800995a <_dtoa_r+0x74a>
 8009948:	42b3      	cmp	r3, r6
 800994a:	9a08      	ldr	r2, [sp, #32]
 800994c:	bfa8      	it	ge
 800994e:	4633      	movge	r3, r6
 8009950:	eba8 0803 	sub.w	r8, r8, r3
 8009954:	1af6      	subs	r6, r6, r3
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	9308      	str	r3, [sp, #32]
 800995a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800995c:	b1f3      	cbz	r3, 800999c <_dtoa_r+0x78c>
 800995e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80b7 	beq.w	8009ad4 <_dtoa_r+0x8c4>
 8009966:	b18c      	cbz	r4, 800998c <_dtoa_r+0x77c>
 8009968:	4629      	mov	r1, r5
 800996a:	4622      	mov	r2, r4
 800996c:	4658      	mov	r0, fp
 800996e:	f001 f85d 	bl	800aa2c <__pow5mult>
 8009972:	464a      	mov	r2, r9
 8009974:	4601      	mov	r1, r0
 8009976:	4605      	mov	r5, r0
 8009978:	4658      	mov	r0, fp
 800997a:	f000 ffad 	bl	800a8d8 <__multiply>
 800997e:	4649      	mov	r1, r9
 8009980:	9004      	str	r0, [sp, #16]
 8009982:	4658      	mov	r0, fp
 8009984:	f000 fe94 	bl	800a6b0 <_Bfree>
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	4699      	mov	r9, r3
 800998c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800998e:	1b1a      	subs	r2, r3, r4
 8009990:	d004      	beq.n	800999c <_dtoa_r+0x78c>
 8009992:	4649      	mov	r1, r9
 8009994:	4658      	mov	r0, fp
 8009996:	f001 f849 	bl	800aa2c <__pow5mult>
 800999a:	4681      	mov	r9, r0
 800999c:	2101      	movs	r1, #1
 800999e:	4658      	mov	r0, fp
 80099a0:	f000 ff84 	bl	800a8ac <__i2b>
 80099a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a6:	4604      	mov	r4, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 81cf 	beq.w	8009d4c <_dtoa_r+0xb3c>
 80099ae:	461a      	mov	r2, r3
 80099b0:	4601      	mov	r1, r0
 80099b2:	4658      	mov	r0, fp
 80099b4:	f001 f83a 	bl	800aa2c <__pow5mult>
 80099b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	4604      	mov	r4, r0
 80099be:	f300 8095 	bgt.w	8009aec <_dtoa_r+0x8dc>
 80099c2:	9b02      	ldr	r3, [sp, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f040 8087 	bne.w	8009ad8 <_dtoa_r+0x8c8>
 80099ca:	9b03      	ldr	r3, [sp, #12]
 80099cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f040 8089 	bne.w	8009ae8 <_dtoa_r+0x8d8>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099dc:	0d1b      	lsrs	r3, r3, #20
 80099de:	051b      	lsls	r3, r3, #20
 80099e0:	b12b      	cbz	r3, 80099ee <_dtoa_r+0x7de>
 80099e2:	9b08      	ldr	r3, [sp, #32]
 80099e4:	3301      	adds	r3, #1
 80099e6:	9308      	str	r3, [sp, #32]
 80099e8:	f108 0801 	add.w	r8, r8, #1
 80099ec:	2301      	movs	r3, #1
 80099ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80099f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 81b0 	beq.w	8009d58 <_dtoa_r+0xb48>
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099fe:	6918      	ldr	r0, [r3, #16]
 8009a00:	f000 ff08 	bl	800a814 <__hi0bits>
 8009a04:	f1c0 0020 	rsb	r0, r0, #32
 8009a08:	9b08      	ldr	r3, [sp, #32]
 8009a0a:	4418      	add	r0, r3
 8009a0c:	f010 001f 	ands.w	r0, r0, #31
 8009a10:	d077      	beq.n	8009b02 <_dtoa_r+0x8f2>
 8009a12:	f1c0 0320 	rsb	r3, r0, #32
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	dd6b      	ble.n	8009af2 <_dtoa_r+0x8e2>
 8009a1a:	9b08      	ldr	r3, [sp, #32]
 8009a1c:	f1c0 001c 	rsb	r0, r0, #28
 8009a20:	4403      	add	r3, r0
 8009a22:	4480      	add	r8, r0
 8009a24:	4406      	add	r6, r0
 8009a26:	9308      	str	r3, [sp, #32]
 8009a28:	f1b8 0f00 	cmp.w	r8, #0
 8009a2c:	dd05      	ble.n	8009a3a <_dtoa_r+0x82a>
 8009a2e:	4649      	mov	r1, r9
 8009a30:	4642      	mov	r2, r8
 8009a32:	4658      	mov	r0, fp
 8009a34:	f001 f854 	bl	800aae0 <__lshift>
 8009a38:	4681      	mov	r9, r0
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	dd05      	ble.n	8009a4c <_dtoa_r+0x83c>
 8009a40:	4621      	mov	r1, r4
 8009a42:	461a      	mov	r2, r3
 8009a44:	4658      	mov	r0, fp
 8009a46:	f001 f84b 	bl	800aae0 <__lshift>
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d059      	beq.n	8009b06 <_dtoa_r+0x8f6>
 8009a52:	4621      	mov	r1, r4
 8009a54:	4648      	mov	r0, r9
 8009a56:	f001 f8af 	bl	800abb8 <__mcmp>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	da53      	bge.n	8009b06 <_dtoa_r+0x8f6>
 8009a5e:	1e7b      	subs	r3, r7, #1
 8009a60:	9304      	str	r3, [sp, #16]
 8009a62:	4649      	mov	r1, r9
 8009a64:	2300      	movs	r3, #0
 8009a66:	220a      	movs	r2, #10
 8009a68:	4658      	mov	r0, fp
 8009a6a:	f000 fe43 	bl	800a6f4 <__multadd>
 8009a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a70:	4681      	mov	r9, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 8172 	beq.w	8009d5c <_dtoa_r+0xb4c>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	220a      	movs	r2, #10
 8009a7e:	4658      	mov	r0, fp
 8009a80:	f000 fe38 	bl	800a6f4 <__multadd>
 8009a84:	9b00      	ldr	r3, [sp, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	4605      	mov	r5, r0
 8009a8a:	dc67      	bgt.n	8009b5c <_dtoa_r+0x94c>
 8009a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	dc41      	bgt.n	8009b16 <_dtoa_r+0x906>
 8009a92:	e063      	b.n	8009b5c <_dtoa_r+0x94c>
 8009a94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009a9a:	e746      	b.n	800992a <_dtoa_r+0x71a>
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	1e5c      	subs	r4, r3, #1
 8009aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	bfbf      	itttt	lt
 8009aa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009aa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009aaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009aac:	1ae3      	sublt	r3, r4, r3
 8009aae:	bfb4      	ite	lt
 8009ab0:	18d2      	addlt	r2, r2, r3
 8009ab2:	1b1c      	subge	r4, r3, r4
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	bfbc      	itt	lt
 8009ab8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009aba:	2400      	movlt	r4, #0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bfb5      	itete	lt
 8009ac0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ac4:	9b07      	ldrge	r3, [sp, #28]
 8009ac6:	2300      	movlt	r3, #0
 8009ac8:	4646      	movge	r6, r8
 8009aca:	e730      	b.n	800992e <_dtoa_r+0x71e>
 8009acc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ace:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ad0:	4646      	mov	r6, r8
 8009ad2:	e735      	b.n	8009940 <_dtoa_r+0x730>
 8009ad4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ad6:	e75c      	b.n	8009992 <_dtoa_r+0x782>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e788      	b.n	80099ee <_dtoa_r+0x7de>
 8009adc:	3fe00000 	.word	0x3fe00000
 8009ae0:	40240000 	.word	0x40240000
 8009ae4:	40140000 	.word	0x40140000
 8009ae8:	9b02      	ldr	r3, [sp, #8]
 8009aea:	e780      	b.n	80099ee <_dtoa_r+0x7de>
 8009aec:	2300      	movs	r3, #0
 8009aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009af0:	e782      	b.n	80099f8 <_dtoa_r+0x7e8>
 8009af2:	d099      	beq.n	8009a28 <_dtoa_r+0x818>
 8009af4:	9a08      	ldr	r2, [sp, #32]
 8009af6:	331c      	adds	r3, #28
 8009af8:	441a      	add	r2, r3
 8009afa:	4498      	add	r8, r3
 8009afc:	441e      	add	r6, r3
 8009afe:	9208      	str	r2, [sp, #32]
 8009b00:	e792      	b.n	8009a28 <_dtoa_r+0x818>
 8009b02:	4603      	mov	r3, r0
 8009b04:	e7f6      	b.n	8009af4 <_dtoa_r+0x8e4>
 8009b06:	9b07      	ldr	r3, [sp, #28]
 8009b08:	9704      	str	r7, [sp, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dc20      	bgt.n	8009b50 <_dtoa_r+0x940>
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	dd1e      	ble.n	8009b54 <_dtoa_r+0x944>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f47f aec0 	bne.w	800989e <_dtoa_r+0x68e>
 8009b1e:	4621      	mov	r1, r4
 8009b20:	2205      	movs	r2, #5
 8009b22:	4658      	mov	r0, fp
 8009b24:	f000 fde6 	bl	800a6f4 <__multadd>
 8009b28:	4601      	mov	r1, r0
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4648      	mov	r0, r9
 8009b2e:	f001 f843 	bl	800abb8 <__mcmp>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f77f aeb3 	ble.w	800989e <_dtoa_r+0x68e>
 8009b38:	4656      	mov	r6, sl
 8009b3a:	2331      	movs	r3, #49	@ 0x31
 8009b3c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b40:	9b04      	ldr	r3, [sp, #16]
 8009b42:	3301      	adds	r3, #1
 8009b44:	9304      	str	r3, [sp, #16]
 8009b46:	e6ae      	b.n	80098a6 <_dtoa_r+0x696>
 8009b48:	9c07      	ldr	r4, [sp, #28]
 8009b4a:	9704      	str	r7, [sp, #16]
 8009b4c:	4625      	mov	r5, r4
 8009b4e:	e7f3      	b.n	8009b38 <_dtoa_r+0x928>
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 8104 	beq.w	8009d64 <_dtoa_r+0xb54>
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	dd05      	ble.n	8009b6c <_dtoa_r+0x95c>
 8009b60:	4629      	mov	r1, r5
 8009b62:	4632      	mov	r2, r6
 8009b64:	4658      	mov	r0, fp
 8009b66:	f000 ffbb 	bl	800aae0 <__lshift>
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d05a      	beq.n	8009c28 <_dtoa_r+0xa18>
 8009b72:	6869      	ldr	r1, [r5, #4]
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 fd5b 	bl	800a630 <_Balloc>
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	b928      	cbnz	r0, 8009b8a <_dtoa_r+0x97a>
 8009b7e:	4b84      	ldr	r3, [pc, #528]	@ (8009d90 <_dtoa_r+0xb80>)
 8009b80:	4602      	mov	r2, r0
 8009b82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b86:	f7ff bb5a 	b.w	800923e <_dtoa_r+0x2e>
 8009b8a:	692a      	ldr	r2, [r5, #16]
 8009b8c:	3202      	adds	r2, #2
 8009b8e:	0092      	lsls	r2, r2, #2
 8009b90:	f105 010c 	add.w	r1, r5, #12
 8009b94:	300c      	adds	r0, #12
 8009b96:	f7ff fa76 	bl	8009086 <memcpy>
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	f000 ff9e 	bl	800aae0 <__lshift>
 8009ba4:	f10a 0301 	add.w	r3, sl, #1
 8009ba8:	9307      	str	r3, [sp, #28]
 8009baa:	9b00      	ldr	r3, [sp, #0]
 8009bac:	4453      	add	r3, sl
 8009bae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	f003 0301 	and.w	r3, r3, #1
 8009bb6:	462f      	mov	r7, r5
 8009bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bba:	4605      	mov	r5, r0
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	4648      	mov	r0, r9
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	f7ff fa9b 	bl	8009100 <quorem>
 8009bca:	4639      	mov	r1, r7
 8009bcc:	9002      	str	r0, [sp, #8]
 8009bce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	f000 fff0 	bl	800abb8 <__mcmp>
 8009bd8:	462a      	mov	r2, r5
 8009bda:	9008      	str	r0, [sp, #32]
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4658      	mov	r0, fp
 8009be0:	f001 f806 	bl	800abf0 <__mdiff>
 8009be4:	68c2      	ldr	r2, [r0, #12]
 8009be6:	4606      	mov	r6, r0
 8009be8:	bb02      	cbnz	r2, 8009c2c <_dtoa_r+0xa1c>
 8009bea:	4601      	mov	r1, r0
 8009bec:	4648      	mov	r0, r9
 8009bee:	f000 ffe3 	bl	800abb8 <__mcmp>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4658      	mov	r0, fp
 8009bf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bfa:	f000 fd59 	bl	800a6b0 <_Bfree>
 8009bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c02:	9e07      	ldr	r6, [sp, #28]
 8009c04:	ea43 0102 	orr.w	r1, r3, r2
 8009c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c0a:	4319      	orrs	r1, r3
 8009c0c:	d110      	bne.n	8009c30 <_dtoa_r+0xa20>
 8009c0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c12:	d029      	beq.n	8009c68 <_dtoa_r+0xa58>
 8009c14:	9b08      	ldr	r3, [sp, #32]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dd02      	ble.n	8009c20 <_dtoa_r+0xa10>
 8009c1a:	9b02      	ldr	r3, [sp, #8]
 8009c1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c20:	9b00      	ldr	r3, [sp, #0]
 8009c22:	f883 8000 	strb.w	r8, [r3]
 8009c26:	e63f      	b.n	80098a8 <_dtoa_r+0x698>
 8009c28:	4628      	mov	r0, r5
 8009c2a:	e7bb      	b.n	8009ba4 <_dtoa_r+0x994>
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	e7e1      	b.n	8009bf4 <_dtoa_r+0x9e4>
 8009c30:	9b08      	ldr	r3, [sp, #32]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	db04      	blt.n	8009c40 <_dtoa_r+0xa30>
 8009c36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	d120      	bne.n	8009c82 <_dtoa_r+0xa72>
 8009c40:	2a00      	cmp	r2, #0
 8009c42:	dded      	ble.n	8009c20 <_dtoa_r+0xa10>
 8009c44:	4649      	mov	r1, r9
 8009c46:	2201      	movs	r2, #1
 8009c48:	4658      	mov	r0, fp
 8009c4a:	f000 ff49 	bl	800aae0 <__lshift>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4681      	mov	r9, r0
 8009c52:	f000 ffb1 	bl	800abb8 <__mcmp>
 8009c56:	2800      	cmp	r0, #0
 8009c58:	dc03      	bgt.n	8009c62 <_dtoa_r+0xa52>
 8009c5a:	d1e1      	bne.n	8009c20 <_dtoa_r+0xa10>
 8009c5c:	f018 0f01 	tst.w	r8, #1
 8009c60:	d0de      	beq.n	8009c20 <_dtoa_r+0xa10>
 8009c62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c66:	d1d8      	bne.n	8009c1a <_dtoa_r+0xa0a>
 8009c68:	9a00      	ldr	r2, [sp, #0]
 8009c6a:	2339      	movs	r3, #57	@ 0x39
 8009c6c:	7013      	strb	r3, [r2, #0]
 8009c6e:	4633      	mov	r3, r6
 8009c70:	461e      	mov	r6, r3
 8009c72:	3b01      	subs	r3, #1
 8009c74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c78:	2a39      	cmp	r2, #57	@ 0x39
 8009c7a:	d052      	beq.n	8009d22 <_dtoa_r+0xb12>
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
 8009c80:	e612      	b.n	80098a8 <_dtoa_r+0x698>
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	dd07      	ble.n	8009c96 <_dtoa_r+0xa86>
 8009c86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c8a:	d0ed      	beq.n	8009c68 <_dtoa_r+0xa58>
 8009c8c:	9a00      	ldr	r2, [sp, #0]
 8009c8e:	f108 0301 	add.w	r3, r8, #1
 8009c92:	7013      	strb	r3, [r2, #0]
 8009c94:	e608      	b.n	80098a8 <_dtoa_r+0x698>
 8009c96:	9b07      	ldr	r3, [sp, #28]
 8009c98:	9a07      	ldr	r2, [sp, #28]
 8009c9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d028      	beq.n	8009cf6 <_dtoa_r+0xae6>
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	220a      	movs	r2, #10
 8009caa:	4658      	mov	r0, fp
 8009cac:	f000 fd22 	bl	800a6f4 <__multadd>
 8009cb0:	42af      	cmp	r7, r5
 8009cb2:	4681      	mov	r9, r0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	f04f 020a 	mov.w	r2, #10
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	4658      	mov	r0, fp
 8009cc0:	d107      	bne.n	8009cd2 <_dtoa_r+0xac2>
 8009cc2:	f000 fd17 	bl	800a6f4 <__multadd>
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	4605      	mov	r5, r0
 8009cca:	9b07      	ldr	r3, [sp, #28]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	e774      	b.n	8009bbc <_dtoa_r+0x9ac>
 8009cd2:	f000 fd0f 	bl	800a6f4 <__multadd>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4607      	mov	r7, r0
 8009cda:	2300      	movs	r3, #0
 8009cdc:	220a      	movs	r2, #10
 8009cde:	4658      	mov	r0, fp
 8009ce0:	f000 fd08 	bl	800a6f4 <__multadd>
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	e7f0      	b.n	8009cca <_dtoa_r+0xaba>
 8009ce8:	9b00      	ldr	r3, [sp, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfcc      	ite	gt
 8009cee:	461e      	movgt	r6, r3
 8009cf0:	2601      	movle	r6, #1
 8009cf2:	4456      	add	r6, sl
 8009cf4:	2700      	movs	r7, #0
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	4658      	mov	r0, fp
 8009cfc:	f000 fef0 	bl	800aae0 <__lshift>
 8009d00:	4621      	mov	r1, r4
 8009d02:	4681      	mov	r9, r0
 8009d04:	f000 ff58 	bl	800abb8 <__mcmp>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	dcb0      	bgt.n	8009c6e <_dtoa_r+0xa5e>
 8009d0c:	d102      	bne.n	8009d14 <_dtoa_r+0xb04>
 8009d0e:	f018 0f01 	tst.w	r8, #1
 8009d12:	d1ac      	bne.n	8009c6e <_dtoa_r+0xa5e>
 8009d14:	4633      	mov	r3, r6
 8009d16:	461e      	mov	r6, r3
 8009d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d1c:	2a30      	cmp	r2, #48	@ 0x30
 8009d1e:	d0fa      	beq.n	8009d16 <_dtoa_r+0xb06>
 8009d20:	e5c2      	b.n	80098a8 <_dtoa_r+0x698>
 8009d22:	459a      	cmp	sl, r3
 8009d24:	d1a4      	bne.n	8009c70 <_dtoa_r+0xa60>
 8009d26:	9b04      	ldr	r3, [sp, #16]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	2331      	movs	r3, #49	@ 0x31
 8009d2e:	f88a 3000 	strb.w	r3, [sl]
 8009d32:	e5b9      	b.n	80098a8 <_dtoa_r+0x698>
 8009d34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009d94 <_dtoa_r+0xb84>
 8009d3a:	b11b      	cbz	r3, 8009d44 <_dtoa_r+0xb34>
 8009d3c:	f10a 0308 	add.w	r3, sl, #8
 8009d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	4650      	mov	r0, sl
 8009d46:	b019      	add	sp, #100	@ 0x64
 8009d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	f77f ae37 	ble.w	80099c2 <_dtoa_r+0x7b2>
 8009d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d58:	2001      	movs	r0, #1
 8009d5a:	e655      	b.n	8009a08 <_dtoa_r+0x7f8>
 8009d5c:	9b00      	ldr	r3, [sp, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f77f aed6 	ble.w	8009b10 <_dtoa_r+0x900>
 8009d64:	4656      	mov	r6, sl
 8009d66:	4621      	mov	r1, r4
 8009d68:	4648      	mov	r0, r9
 8009d6a:	f7ff f9c9 	bl	8009100 <quorem>
 8009d6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d72:	f806 8b01 	strb.w	r8, [r6], #1
 8009d76:	9b00      	ldr	r3, [sp, #0]
 8009d78:	eba6 020a 	sub.w	r2, r6, sl
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	ddb3      	ble.n	8009ce8 <_dtoa_r+0xad8>
 8009d80:	4649      	mov	r1, r9
 8009d82:	2300      	movs	r3, #0
 8009d84:	220a      	movs	r2, #10
 8009d86:	4658      	mov	r0, fp
 8009d88:	f000 fcb4 	bl	800a6f4 <__multadd>
 8009d8c:	4681      	mov	r9, r0
 8009d8e:	e7ea      	b.n	8009d66 <_dtoa_r+0xb56>
 8009d90:	0800bd6b 	.word	0x0800bd6b
 8009d94:	0800bd06 	.word	0x0800bd06

08009d98 <_free_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d041      	beq.n	8009e24 <_free_r+0x8c>
 8009da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da4:	1f0c      	subs	r4, r1, #4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bfb8      	it	lt
 8009daa:	18e4      	addlt	r4, r4, r3
 8009dac:	f000 fc34 	bl	800a618 <__malloc_lock>
 8009db0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e28 <_free_r+0x90>)
 8009db2:	6813      	ldr	r3, [r2, #0]
 8009db4:	b933      	cbnz	r3, 8009dc4 <_free_r+0x2c>
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	6014      	str	r4, [r2, #0]
 8009dba:	4628      	mov	r0, r5
 8009dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dc0:	f000 bc30 	b.w	800a624 <__malloc_unlock>
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	d908      	bls.n	8009dda <_free_r+0x42>
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	1821      	adds	r1, r4, r0
 8009dcc:	428b      	cmp	r3, r1
 8009dce:	bf01      	itttt	eq
 8009dd0:	6819      	ldreq	r1, [r3, #0]
 8009dd2:	685b      	ldreq	r3, [r3, #4]
 8009dd4:	1809      	addeq	r1, r1, r0
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	e7ed      	b.n	8009db6 <_free_r+0x1e>
 8009dda:	461a      	mov	r2, r3
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	b10b      	cbz	r3, 8009de4 <_free_r+0x4c>
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	d9fa      	bls.n	8009dda <_free_r+0x42>
 8009de4:	6811      	ldr	r1, [r2, #0]
 8009de6:	1850      	adds	r0, r2, r1
 8009de8:	42a0      	cmp	r0, r4
 8009dea:	d10b      	bne.n	8009e04 <_free_r+0x6c>
 8009dec:	6820      	ldr	r0, [r4, #0]
 8009dee:	4401      	add	r1, r0
 8009df0:	1850      	adds	r0, r2, r1
 8009df2:	4283      	cmp	r3, r0
 8009df4:	6011      	str	r1, [r2, #0]
 8009df6:	d1e0      	bne.n	8009dba <_free_r+0x22>
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	6053      	str	r3, [r2, #4]
 8009dfe:	4408      	add	r0, r1
 8009e00:	6010      	str	r0, [r2, #0]
 8009e02:	e7da      	b.n	8009dba <_free_r+0x22>
 8009e04:	d902      	bls.n	8009e0c <_free_r+0x74>
 8009e06:	230c      	movs	r3, #12
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	e7d6      	b.n	8009dba <_free_r+0x22>
 8009e0c:	6820      	ldr	r0, [r4, #0]
 8009e0e:	1821      	adds	r1, r4, r0
 8009e10:	428b      	cmp	r3, r1
 8009e12:	bf04      	itt	eq
 8009e14:	6819      	ldreq	r1, [r3, #0]
 8009e16:	685b      	ldreq	r3, [r3, #4]
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	bf04      	itt	eq
 8009e1c:	1809      	addeq	r1, r1, r0
 8009e1e:	6021      	streq	r1, [r4, #0]
 8009e20:	6054      	str	r4, [r2, #4]
 8009e22:	e7ca      	b.n	8009dba <_free_r+0x22>
 8009e24:	bd38      	pop	{r3, r4, r5, pc}
 8009e26:	bf00      	nop
 8009e28:	200007b4 	.word	0x200007b4

08009e2c <rshift>:
 8009e2c:	6903      	ldr	r3, [r0, #16]
 8009e2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e3a:	f100 0414 	add.w	r4, r0, #20
 8009e3e:	dd45      	ble.n	8009ecc <rshift+0xa0>
 8009e40:	f011 011f 	ands.w	r1, r1, #31
 8009e44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e4c:	d10c      	bne.n	8009e68 <rshift+0x3c>
 8009e4e:	f100 0710 	add.w	r7, r0, #16
 8009e52:	4629      	mov	r1, r5
 8009e54:	42b1      	cmp	r1, r6
 8009e56:	d334      	bcc.n	8009ec2 <rshift+0x96>
 8009e58:	1a9b      	subs	r3, r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	1eea      	subs	r2, r5, #3
 8009e5e:	4296      	cmp	r6, r2
 8009e60:	bf38      	it	cc
 8009e62:	2300      	movcc	r3, #0
 8009e64:	4423      	add	r3, r4
 8009e66:	e015      	b.n	8009e94 <rshift+0x68>
 8009e68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e6c:	f1c1 0820 	rsb	r8, r1, #32
 8009e70:	40cf      	lsrs	r7, r1
 8009e72:	f105 0e04 	add.w	lr, r5, #4
 8009e76:	46a1      	mov	r9, r4
 8009e78:	4576      	cmp	r6, lr
 8009e7a:	46f4      	mov	ip, lr
 8009e7c:	d815      	bhi.n	8009eaa <rshift+0x7e>
 8009e7e:	1a9a      	subs	r2, r3, r2
 8009e80:	0092      	lsls	r2, r2, #2
 8009e82:	3a04      	subs	r2, #4
 8009e84:	3501      	adds	r5, #1
 8009e86:	42ae      	cmp	r6, r5
 8009e88:	bf38      	it	cc
 8009e8a:	2200      	movcc	r2, #0
 8009e8c:	18a3      	adds	r3, r4, r2
 8009e8e:	50a7      	str	r7, [r4, r2]
 8009e90:	b107      	cbz	r7, 8009e94 <rshift+0x68>
 8009e92:	3304      	adds	r3, #4
 8009e94:	1b1a      	subs	r2, r3, r4
 8009e96:	42a3      	cmp	r3, r4
 8009e98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e9c:	bf08      	it	eq
 8009e9e:	2300      	moveq	r3, #0
 8009ea0:	6102      	str	r2, [r0, #16]
 8009ea2:	bf08      	it	eq
 8009ea4:	6143      	streq	r3, [r0, #20]
 8009ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eaa:	f8dc c000 	ldr.w	ip, [ip]
 8009eae:	fa0c fc08 	lsl.w	ip, ip, r8
 8009eb2:	ea4c 0707 	orr.w	r7, ip, r7
 8009eb6:	f849 7b04 	str.w	r7, [r9], #4
 8009eba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ebe:	40cf      	lsrs	r7, r1
 8009ec0:	e7da      	b.n	8009e78 <rshift+0x4c>
 8009ec2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ec6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eca:	e7c3      	b.n	8009e54 <rshift+0x28>
 8009ecc:	4623      	mov	r3, r4
 8009ece:	e7e1      	b.n	8009e94 <rshift+0x68>

08009ed0 <__hexdig_fun>:
 8009ed0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ed4:	2b09      	cmp	r3, #9
 8009ed6:	d802      	bhi.n	8009ede <__hexdig_fun+0xe>
 8009ed8:	3820      	subs	r0, #32
 8009eda:	b2c0      	uxtb	r0, r0
 8009edc:	4770      	bx	lr
 8009ede:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ee2:	2b05      	cmp	r3, #5
 8009ee4:	d801      	bhi.n	8009eea <__hexdig_fun+0x1a>
 8009ee6:	3847      	subs	r0, #71	@ 0x47
 8009ee8:	e7f7      	b.n	8009eda <__hexdig_fun+0xa>
 8009eea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	d801      	bhi.n	8009ef6 <__hexdig_fun+0x26>
 8009ef2:	3827      	subs	r0, #39	@ 0x27
 8009ef4:	e7f1      	b.n	8009eda <__hexdig_fun+0xa>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	4770      	bx	lr
	...

08009efc <__gethex>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	b085      	sub	sp, #20
 8009f02:	468a      	mov	sl, r1
 8009f04:	9302      	str	r3, [sp, #8]
 8009f06:	680b      	ldr	r3, [r1, #0]
 8009f08:	9001      	str	r0, [sp, #4]
 8009f0a:	4690      	mov	r8, r2
 8009f0c:	1c9c      	adds	r4, r3, #2
 8009f0e:	46a1      	mov	r9, r4
 8009f10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f14:	2830      	cmp	r0, #48	@ 0x30
 8009f16:	d0fa      	beq.n	8009f0e <__gethex+0x12>
 8009f18:	eba9 0303 	sub.w	r3, r9, r3
 8009f1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f20:	f7ff ffd6 	bl	8009ed0 <__hexdig_fun>
 8009f24:	4605      	mov	r5, r0
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d168      	bne.n	8009ffc <__gethex+0x100>
 8009f2a:	49a0      	ldr	r1, [pc, #640]	@ (800a1ac <__gethex+0x2b0>)
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f7fe ffae 	bl	8008e90 <strncmp>
 8009f34:	4607      	mov	r7, r0
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d167      	bne.n	800a00a <__gethex+0x10e>
 8009f3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f3e:	4626      	mov	r6, r4
 8009f40:	f7ff ffc6 	bl	8009ed0 <__hexdig_fun>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d062      	beq.n	800a00e <__gethex+0x112>
 8009f48:	4623      	mov	r3, r4
 8009f4a:	7818      	ldrb	r0, [r3, #0]
 8009f4c:	2830      	cmp	r0, #48	@ 0x30
 8009f4e:	4699      	mov	r9, r3
 8009f50:	f103 0301 	add.w	r3, r3, #1
 8009f54:	d0f9      	beq.n	8009f4a <__gethex+0x4e>
 8009f56:	f7ff ffbb 	bl	8009ed0 <__hexdig_fun>
 8009f5a:	fab0 f580 	clz	r5, r0
 8009f5e:	096d      	lsrs	r5, r5, #5
 8009f60:	f04f 0b01 	mov.w	fp, #1
 8009f64:	464a      	mov	r2, r9
 8009f66:	4616      	mov	r6, r2
 8009f68:	3201      	adds	r2, #1
 8009f6a:	7830      	ldrb	r0, [r6, #0]
 8009f6c:	f7ff ffb0 	bl	8009ed0 <__hexdig_fun>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d1f8      	bne.n	8009f66 <__gethex+0x6a>
 8009f74:	498d      	ldr	r1, [pc, #564]	@ (800a1ac <__gethex+0x2b0>)
 8009f76:	2201      	movs	r2, #1
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7fe ff89 	bl	8008e90 <strncmp>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d13f      	bne.n	800a002 <__gethex+0x106>
 8009f82:	b944      	cbnz	r4, 8009f96 <__gethex+0x9a>
 8009f84:	1c74      	adds	r4, r6, #1
 8009f86:	4622      	mov	r2, r4
 8009f88:	4616      	mov	r6, r2
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	7830      	ldrb	r0, [r6, #0]
 8009f8e:	f7ff ff9f 	bl	8009ed0 <__hexdig_fun>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d1f8      	bne.n	8009f88 <__gethex+0x8c>
 8009f96:	1ba4      	subs	r4, r4, r6
 8009f98:	00a7      	lsls	r7, r4, #2
 8009f9a:	7833      	ldrb	r3, [r6, #0]
 8009f9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009fa0:	2b50      	cmp	r3, #80	@ 0x50
 8009fa2:	d13e      	bne.n	800a022 <__gethex+0x126>
 8009fa4:	7873      	ldrb	r3, [r6, #1]
 8009fa6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fa8:	d033      	beq.n	800a012 <__gethex+0x116>
 8009faa:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fac:	d034      	beq.n	800a018 <__gethex+0x11c>
 8009fae:	1c71      	adds	r1, r6, #1
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	7808      	ldrb	r0, [r1, #0]
 8009fb4:	f7ff ff8c 	bl	8009ed0 <__hexdig_fun>
 8009fb8:	1e43      	subs	r3, r0, #1
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b18      	cmp	r3, #24
 8009fbe:	d830      	bhi.n	800a022 <__gethex+0x126>
 8009fc0:	f1a0 0210 	sub.w	r2, r0, #16
 8009fc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fc8:	f7ff ff82 	bl	8009ed0 <__hexdig_fun>
 8009fcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009fd0:	fa5f fc8c 	uxtb.w	ip, ip
 8009fd4:	f1bc 0f18 	cmp.w	ip, #24
 8009fd8:	f04f 030a 	mov.w	r3, #10
 8009fdc:	d91e      	bls.n	800a01c <__gethex+0x120>
 8009fde:	b104      	cbz	r4, 8009fe2 <__gethex+0xe6>
 8009fe0:	4252      	negs	r2, r2
 8009fe2:	4417      	add	r7, r2
 8009fe4:	f8ca 1000 	str.w	r1, [sl]
 8009fe8:	b1ed      	cbz	r5, 800a026 <__gethex+0x12a>
 8009fea:	f1bb 0f00 	cmp.w	fp, #0
 8009fee:	bf0c      	ite	eq
 8009ff0:	2506      	moveq	r5, #6
 8009ff2:	2500      	movne	r5, #0
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	b005      	add	sp, #20
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	2500      	movs	r5, #0
 8009ffe:	462c      	mov	r4, r5
 800a000:	e7b0      	b.n	8009f64 <__gethex+0x68>
 800a002:	2c00      	cmp	r4, #0
 800a004:	d1c7      	bne.n	8009f96 <__gethex+0x9a>
 800a006:	4627      	mov	r7, r4
 800a008:	e7c7      	b.n	8009f9a <__gethex+0x9e>
 800a00a:	464e      	mov	r6, r9
 800a00c:	462f      	mov	r7, r5
 800a00e:	2501      	movs	r5, #1
 800a010:	e7c3      	b.n	8009f9a <__gethex+0x9e>
 800a012:	2400      	movs	r4, #0
 800a014:	1cb1      	adds	r1, r6, #2
 800a016:	e7cc      	b.n	8009fb2 <__gethex+0xb6>
 800a018:	2401      	movs	r4, #1
 800a01a:	e7fb      	b.n	800a014 <__gethex+0x118>
 800a01c:	fb03 0002 	mla	r0, r3, r2, r0
 800a020:	e7ce      	b.n	8009fc0 <__gethex+0xc4>
 800a022:	4631      	mov	r1, r6
 800a024:	e7de      	b.n	8009fe4 <__gethex+0xe8>
 800a026:	eba6 0309 	sub.w	r3, r6, r9
 800a02a:	3b01      	subs	r3, #1
 800a02c:	4629      	mov	r1, r5
 800a02e:	2b07      	cmp	r3, #7
 800a030:	dc0a      	bgt.n	800a048 <__gethex+0x14c>
 800a032:	9801      	ldr	r0, [sp, #4]
 800a034:	f000 fafc 	bl	800a630 <_Balloc>
 800a038:	4604      	mov	r4, r0
 800a03a:	b940      	cbnz	r0, 800a04e <__gethex+0x152>
 800a03c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1b0 <__gethex+0x2b4>)
 800a03e:	4602      	mov	r2, r0
 800a040:	21e4      	movs	r1, #228	@ 0xe4
 800a042:	485c      	ldr	r0, [pc, #368]	@ (800a1b4 <__gethex+0x2b8>)
 800a044:	f7ff f83e 	bl	80090c4 <__assert_func>
 800a048:	3101      	adds	r1, #1
 800a04a:	105b      	asrs	r3, r3, #1
 800a04c:	e7ef      	b.n	800a02e <__gethex+0x132>
 800a04e:	f100 0a14 	add.w	sl, r0, #20
 800a052:	2300      	movs	r3, #0
 800a054:	4655      	mov	r5, sl
 800a056:	469b      	mov	fp, r3
 800a058:	45b1      	cmp	r9, r6
 800a05a:	d337      	bcc.n	800a0cc <__gethex+0x1d0>
 800a05c:	f845 bb04 	str.w	fp, [r5], #4
 800a060:	eba5 050a 	sub.w	r5, r5, sl
 800a064:	10ad      	asrs	r5, r5, #2
 800a066:	6125      	str	r5, [r4, #16]
 800a068:	4658      	mov	r0, fp
 800a06a:	f000 fbd3 	bl	800a814 <__hi0bits>
 800a06e:	016d      	lsls	r5, r5, #5
 800a070:	f8d8 6000 	ldr.w	r6, [r8]
 800a074:	1a2d      	subs	r5, r5, r0
 800a076:	42b5      	cmp	r5, r6
 800a078:	dd54      	ble.n	800a124 <__gethex+0x228>
 800a07a:	1bad      	subs	r5, r5, r6
 800a07c:	4629      	mov	r1, r5
 800a07e:	4620      	mov	r0, r4
 800a080:	f000 ff67 	bl	800af52 <__any_on>
 800a084:	4681      	mov	r9, r0
 800a086:	b178      	cbz	r0, 800a0a8 <__gethex+0x1ac>
 800a088:	1e6b      	subs	r3, r5, #1
 800a08a:	1159      	asrs	r1, r3, #5
 800a08c:	f003 021f 	and.w	r2, r3, #31
 800a090:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a094:	f04f 0901 	mov.w	r9, #1
 800a098:	fa09 f202 	lsl.w	r2, r9, r2
 800a09c:	420a      	tst	r2, r1
 800a09e:	d003      	beq.n	800a0a8 <__gethex+0x1ac>
 800a0a0:	454b      	cmp	r3, r9
 800a0a2:	dc36      	bgt.n	800a112 <__gethex+0x216>
 800a0a4:	f04f 0902 	mov.w	r9, #2
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f7ff febe 	bl	8009e2c <rshift>
 800a0b0:	442f      	add	r7, r5
 800a0b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0b6:	42bb      	cmp	r3, r7
 800a0b8:	da42      	bge.n	800a140 <__gethex+0x244>
 800a0ba:	9801      	ldr	r0, [sp, #4]
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f000 faf7 	bl	800a6b0 <_Bfree>
 800a0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	25a3      	movs	r5, #163	@ 0xa3
 800a0ca:	e793      	b.n	8009ff4 <__gethex+0xf8>
 800a0cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0d2:	d012      	beq.n	800a0fa <__gethex+0x1fe>
 800a0d4:	2b20      	cmp	r3, #32
 800a0d6:	d104      	bne.n	800a0e2 <__gethex+0x1e6>
 800a0d8:	f845 bb04 	str.w	fp, [r5], #4
 800a0dc:	f04f 0b00 	mov.w	fp, #0
 800a0e0:	465b      	mov	r3, fp
 800a0e2:	7830      	ldrb	r0, [r6, #0]
 800a0e4:	9303      	str	r3, [sp, #12]
 800a0e6:	f7ff fef3 	bl	8009ed0 <__hexdig_fun>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	f000 000f 	and.w	r0, r0, #15
 800a0f0:	4098      	lsls	r0, r3
 800a0f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	e7ae      	b.n	800a058 <__gethex+0x15c>
 800a0fa:	45b1      	cmp	r9, r6
 800a0fc:	d8ea      	bhi.n	800a0d4 <__gethex+0x1d8>
 800a0fe:	492b      	ldr	r1, [pc, #172]	@ (800a1ac <__gethex+0x2b0>)
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	4630      	mov	r0, r6
 800a106:	f7fe fec3 	bl	8008e90 <strncmp>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d1e1      	bne.n	800a0d4 <__gethex+0x1d8>
 800a110:	e7a2      	b.n	800a058 <__gethex+0x15c>
 800a112:	1ea9      	subs	r1, r5, #2
 800a114:	4620      	mov	r0, r4
 800a116:	f000 ff1c 	bl	800af52 <__any_on>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d0c2      	beq.n	800a0a4 <__gethex+0x1a8>
 800a11e:	f04f 0903 	mov.w	r9, #3
 800a122:	e7c1      	b.n	800a0a8 <__gethex+0x1ac>
 800a124:	da09      	bge.n	800a13a <__gethex+0x23e>
 800a126:	1b75      	subs	r5, r6, r5
 800a128:	4621      	mov	r1, r4
 800a12a:	9801      	ldr	r0, [sp, #4]
 800a12c:	462a      	mov	r2, r5
 800a12e:	f000 fcd7 	bl	800aae0 <__lshift>
 800a132:	1b7f      	subs	r7, r7, r5
 800a134:	4604      	mov	r4, r0
 800a136:	f100 0a14 	add.w	sl, r0, #20
 800a13a:	f04f 0900 	mov.w	r9, #0
 800a13e:	e7b8      	b.n	800a0b2 <__gethex+0x1b6>
 800a140:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a144:	42bd      	cmp	r5, r7
 800a146:	dd6f      	ble.n	800a228 <__gethex+0x32c>
 800a148:	1bed      	subs	r5, r5, r7
 800a14a:	42ae      	cmp	r6, r5
 800a14c:	dc34      	bgt.n	800a1b8 <__gethex+0x2bc>
 800a14e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a152:	2b02      	cmp	r3, #2
 800a154:	d022      	beq.n	800a19c <__gethex+0x2a0>
 800a156:	2b03      	cmp	r3, #3
 800a158:	d024      	beq.n	800a1a4 <__gethex+0x2a8>
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d115      	bne.n	800a18a <__gethex+0x28e>
 800a15e:	42ae      	cmp	r6, r5
 800a160:	d113      	bne.n	800a18a <__gethex+0x28e>
 800a162:	2e01      	cmp	r6, #1
 800a164:	d10b      	bne.n	800a17e <__gethex+0x282>
 800a166:	9a02      	ldr	r2, [sp, #8]
 800a168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	2301      	movs	r3, #1
 800a170:	6123      	str	r3, [r4, #16]
 800a172:	f8ca 3000 	str.w	r3, [sl]
 800a176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a178:	2562      	movs	r5, #98	@ 0x62
 800a17a:	601c      	str	r4, [r3, #0]
 800a17c:	e73a      	b.n	8009ff4 <__gethex+0xf8>
 800a17e:	1e71      	subs	r1, r6, #1
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fee6 	bl	800af52 <__any_on>
 800a186:	2800      	cmp	r0, #0
 800a188:	d1ed      	bne.n	800a166 <__gethex+0x26a>
 800a18a:	9801      	ldr	r0, [sp, #4]
 800a18c:	4621      	mov	r1, r4
 800a18e:	f000 fa8f 	bl	800a6b0 <_Bfree>
 800a192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a194:	2300      	movs	r3, #0
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	2550      	movs	r5, #80	@ 0x50
 800a19a:	e72b      	b.n	8009ff4 <__gethex+0xf8>
 800a19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f3      	bne.n	800a18a <__gethex+0x28e>
 800a1a2:	e7e0      	b.n	800a166 <__gethex+0x26a>
 800a1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1dd      	bne.n	800a166 <__gethex+0x26a>
 800a1aa:	e7ee      	b.n	800a18a <__gethex+0x28e>
 800a1ac:	0800bbc0 	.word	0x0800bbc0
 800a1b0:	0800bd6b 	.word	0x0800bd6b
 800a1b4:	0800bd7c 	.word	0x0800bd7c
 800a1b8:	1e6f      	subs	r7, r5, #1
 800a1ba:	f1b9 0f00 	cmp.w	r9, #0
 800a1be:	d130      	bne.n	800a222 <__gethex+0x326>
 800a1c0:	b127      	cbz	r7, 800a1cc <__gethex+0x2d0>
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fec4 	bl	800af52 <__any_on>
 800a1ca:	4681      	mov	r9, r0
 800a1cc:	117a      	asrs	r2, r7, #5
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1d4:	f007 071f 	and.w	r7, r7, #31
 800a1d8:	40bb      	lsls	r3, r7
 800a1da:	4213      	tst	r3, r2
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4620      	mov	r0, r4
 800a1e0:	bf18      	it	ne
 800a1e2:	f049 0902 	orrne.w	r9, r9, #2
 800a1e6:	f7ff fe21 	bl	8009e2c <rshift>
 800a1ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a1ee:	1b76      	subs	r6, r6, r5
 800a1f0:	2502      	movs	r5, #2
 800a1f2:	f1b9 0f00 	cmp.w	r9, #0
 800a1f6:	d047      	beq.n	800a288 <__gethex+0x38c>
 800a1f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d015      	beq.n	800a22c <__gethex+0x330>
 800a200:	2b03      	cmp	r3, #3
 800a202:	d017      	beq.n	800a234 <__gethex+0x338>
 800a204:	2b01      	cmp	r3, #1
 800a206:	d109      	bne.n	800a21c <__gethex+0x320>
 800a208:	f019 0f02 	tst.w	r9, #2
 800a20c:	d006      	beq.n	800a21c <__gethex+0x320>
 800a20e:	f8da 3000 	ldr.w	r3, [sl]
 800a212:	ea49 0903 	orr.w	r9, r9, r3
 800a216:	f019 0f01 	tst.w	r9, #1
 800a21a:	d10e      	bne.n	800a23a <__gethex+0x33e>
 800a21c:	f045 0510 	orr.w	r5, r5, #16
 800a220:	e032      	b.n	800a288 <__gethex+0x38c>
 800a222:	f04f 0901 	mov.w	r9, #1
 800a226:	e7d1      	b.n	800a1cc <__gethex+0x2d0>
 800a228:	2501      	movs	r5, #1
 800a22a:	e7e2      	b.n	800a1f2 <__gethex+0x2f6>
 800a22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a22e:	f1c3 0301 	rsb	r3, r3, #1
 800a232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0f0      	beq.n	800a21c <__gethex+0x320>
 800a23a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a23e:	f104 0314 	add.w	r3, r4, #20
 800a242:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a246:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a24a:	f04f 0c00 	mov.w	ip, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f853 2b04 	ldr.w	r2, [r3], #4
 800a254:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a258:	d01b      	beq.n	800a292 <__gethex+0x396>
 800a25a:	3201      	adds	r2, #1
 800a25c:	6002      	str	r2, [r0, #0]
 800a25e:	2d02      	cmp	r5, #2
 800a260:	f104 0314 	add.w	r3, r4, #20
 800a264:	d13c      	bne.n	800a2e0 <__gethex+0x3e4>
 800a266:	f8d8 2000 	ldr.w	r2, [r8]
 800a26a:	3a01      	subs	r2, #1
 800a26c:	42b2      	cmp	r2, r6
 800a26e:	d109      	bne.n	800a284 <__gethex+0x388>
 800a270:	1171      	asrs	r1, r6, #5
 800a272:	2201      	movs	r2, #1
 800a274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a278:	f006 061f 	and.w	r6, r6, #31
 800a27c:	fa02 f606 	lsl.w	r6, r2, r6
 800a280:	421e      	tst	r6, r3
 800a282:	d13a      	bne.n	800a2fa <__gethex+0x3fe>
 800a284:	f045 0520 	orr.w	r5, r5, #32
 800a288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28a:	601c      	str	r4, [r3, #0]
 800a28c:	9b02      	ldr	r3, [sp, #8]
 800a28e:	601f      	str	r7, [r3, #0]
 800a290:	e6b0      	b.n	8009ff4 <__gethex+0xf8>
 800a292:	4299      	cmp	r1, r3
 800a294:	f843 cc04 	str.w	ip, [r3, #-4]
 800a298:	d8d9      	bhi.n	800a24e <__gethex+0x352>
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	459b      	cmp	fp, r3
 800a29e:	db17      	blt.n	800a2d0 <__gethex+0x3d4>
 800a2a0:	6861      	ldr	r1, [r4, #4]
 800a2a2:	9801      	ldr	r0, [sp, #4]
 800a2a4:	3101      	adds	r1, #1
 800a2a6:	f000 f9c3 	bl	800a630 <_Balloc>
 800a2aa:	4681      	mov	r9, r0
 800a2ac:	b918      	cbnz	r0, 800a2b6 <__gethex+0x3ba>
 800a2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a318 <__gethex+0x41c>)
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	2184      	movs	r1, #132	@ 0x84
 800a2b4:	e6c5      	b.n	800a042 <__gethex+0x146>
 800a2b6:	6922      	ldr	r2, [r4, #16]
 800a2b8:	3202      	adds	r2, #2
 800a2ba:	f104 010c 	add.w	r1, r4, #12
 800a2be:	0092      	lsls	r2, r2, #2
 800a2c0:	300c      	adds	r0, #12
 800a2c2:	f7fe fee0 	bl	8009086 <memcpy>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	9801      	ldr	r0, [sp, #4]
 800a2ca:	f000 f9f1 	bl	800a6b0 <_Bfree>
 800a2ce:	464c      	mov	r4, r9
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2d8:	6122      	str	r2, [r4, #16]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	615a      	str	r2, [r3, #20]
 800a2de:	e7be      	b.n	800a25e <__gethex+0x362>
 800a2e0:	6922      	ldr	r2, [r4, #16]
 800a2e2:	455a      	cmp	r2, fp
 800a2e4:	dd0b      	ble.n	800a2fe <__gethex+0x402>
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f7ff fd9f 	bl	8009e2c <rshift>
 800a2ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2f2:	3701      	adds	r7, #1
 800a2f4:	42bb      	cmp	r3, r7
 800a2f6:	f6ff aee0 	blt.w	800a0ba <__gethex+0x1be>
 800a2fa:	2501      	movs	r5, #1
 800a2fc:	e7c2      	b.n	800a284 <__gethex+0x388>
 800a2fe:	f016 061f 	ands.w	r6, r6, #31
 800a302:	d0fa      	beq.n	800a2fa <__gethex+0x3fe>
 800a304:	4453      	add	r3, sl
 800a306:	f1c6 0620 	rsb	r6, r6, #32
 800a30a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a30e:	f000 fa81 	bl	800a814 <__hi0bits>
 800a312:	42b0      	cmp	r0, r6
 800a314:	dbe7      	blt.n	800a2e6 <__gethex+0x3ea>
 800a316:	e7f0      	b.n	800a2fa <__gethex+0x3fe>
 800a318:	0800bd6b 	.word	0x0800bd6b

0800a31c <L_shift>:
 800a31c:	f1c2 0208 	rsb	r2, r2, #8
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	b570      	push	{r4, r5, r6, lr}
 800a324:	f1c2 0620 	rsb	r6, r2, #32
 800a328:	6843      	ldr	r3, [r0, #4]
 800a32a:	6804      	ldr	r4, [r0, #0]
 800a32c:	fa03 f506 	lsl.w	r5, r3, r6
 800a330:	432c      	orrs	r4, r5
 800a332:	40d3      	lsrs	r3, r2
 800a334:	6004      	str	r4, [r0, #0]
 800a336:	f840 3f04 	str.w	r3, [r0, #4]!
 800a33a:	4288      	cmp	r0, r1
 800a33c:	d3f4      	bcc.n	800a328 <L_shift+0xc>
 800a33e:	bd70      	pop	{r4, r5, r6, pc}

0800a340 <__match>:
 800a340:	b530      	push	{r4, r5, lr}
 800a342:	6803      	ldr	r3, [r0, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a34a:	b914      	cbnz	r4, 800a352 <__match+0x12>
 800a34c:	6003      	str	r3, [r0, #0]
 800a34e:	2001      	movs	r0, #1
 800a350:	bd30      	pop	{r4, r5, pc}
 800a352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a356:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a35a:	2d19      	cmp	r5, #25
 800a35c:	bf98      	it	ls
 800a35e:	3220      	addls	r2, #32
 800a360:	42a2      	cmp	r2, r4
 800a362:	d0f0      	beq.n	800a346 <__match+0x6>
 800a364:	2000      	movs	r0, #0
 800a366:	e7f3      	b.n	800a350 <__match+0x10>

0800a368 <__hexnan>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	680b      	ldr	r3, [r1, #0]
 800a36e:	6801      	ldr	r1, [r0, #0]
 800a370:	115e      	asrs	r6, r3, #5
 800a372:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a376:	f013 031f 	ands.w	r3, r3, #31
 800a37a:	b087      	sub	sp, #28
 800a37c:	bf18      	it	ne
 800a37e:	3604      	addne	r6, #4
 800a380:	2500      	movs	r5, #0
 800a382:	1f37      	subs	r7, r6, #4
 800a384:	4682      	mov	sl, r0
 800a386:	4690      	mov	r8, r2
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a38e:	46b9      	mov	r9, r7
 800a390:	463c      	mov	r4, r7
 800a392:	9502      	str	r5, [sp, #8]
 800a394:	46ab      	mov	fp, r5
 800a396:	784a      	ldrb	r2, [r1, #1]
 800a398:	1c4b      	adds	r3, r1, #1
 800a39a:	9303      	str	r3, [sp, #12]
 800a39c:	b342      	cbz	r2, 800a3f0 <__hexnan+0x88>
 800a39e:	4610      	mov	r0, r2
 800a3a0:	9105      	str	r1, [sp, #20]
 800a3a2:	9204      	str	r2, [sp, #16]
 800a3a4:	f7ff fd94 	bl	8009ed0 <__hexdig_fun>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d151      	bne.n	800a450 <__hexnan+0xe8>
 800a3ac:	9a04      	ldr	r2, [sp, #16]
 800a3ae:	9905      	ldr	r1, [sp, #20]
 800a3b0:	2a20      	cmp	r2, #32
 800a3b2:	d818      	bhi.n	800a3e6 <__hexnan+0x7e>
 800a3b4:	9b02      	ldr	r3, [sp, #8]
 800a3b6:	459b      	cmp	fp, r3
 800a3b8:	dd13      	ble.n	800a3e2 <__hexnan+0x7a>
 800a3ba:	454c      	cmp	r4, r9
 800a3bc:	d206      	bcs.n	800a3cc <__hexnan+0x64>
 800a3be:	2d07      	cmp	r5, #7
 800a3c0:	dc04      	bgt.n	800a3cc <__hexnan+0x64>
 800a3c2:	462a      	mov	r2, r5
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff ffa8 	bl	800a31c <L_shift>
 800a3cc:	4544      	cmp	r4, r8
 800a3ce:	d952      	bls.n	800a476 <__hexnan+0x10e>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a3d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3da:	f8cd b008 	str.w	fp, [sp, #8]
 800a3de:	464c      	mov	r4, r9
 800a3e0:	461d      	mov	r5, r3
 800a3e2:	9903      	ldr	r1, [sp, #12]
 800a3e4:	e7d7      	b.n	800a396 <__hexnan+0x2e>
 800a3e6:	2a29      	cmp	r2, #41	@ 0x29
 800a3e8:	d157      	bne.n	800a49a <__hexnan+0x132>
 800a3ea:	3102      	adds	r1, #2
 800a3ec:	f8ca 1000 	str.w	r1, [sl]
 800a3f0:	f1bb 0f00 	cmp.w	fp, #0
 800a3f4:	d051      	beq.n	800a49a <__hexnan+0x132>
 800a3f6:	454c      	cmp	r4, r9
 800a3f8:	d206      	bcs.n	800a408 <__hexnan+0xa0>
 800a3fa:	2d07      	cmp	r5, #7
 800a3fc:	dc04      	bgt.n	800a408 <__hexnan+0xa0>
 800a3fe:	462a      	mov	r2, r5
 800a400:	4649      	mov	r1, r9
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff ff8a 	bl	800a31c <L_shift>
 800a408:	4544      	cmp	r4, r8
 800a40a:	d936      	bls.n	800a47a <__hexnan+0x112>
 800a40c:	f1a8 0204 	sub.w	r2, r8, #4
 800a410:	4623      	mov	r3, r4
 800a412:	f853 1b04 	ldr.w	r1, [r3], #4
 800a416:	f842 1f04 	str.w	r1, [r2, #4]!
 800a41a:	429f      	cmp	r7, r3
 800a41c:	d2f9      	bcs.n	800a412 <__hexnan+0xaa>
 800a41e:	1b3b      	subs	r3, r7, r4
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	3304      	adds	r3, #4
 800a426:	3401      	adds	r4, #1
 800a428:	3e03      	subs	r6, #3
 800a42a:	42b4      	cmp	r4, r6
 800a42c:	bf88      	it	hi
 800a42e:	2304      	movhi	r3, #4
 800a430:	4443      	add	r3, r8
 800a432:	2200      	movs	r2, #0
 800a434:	f843 2b04 	str.w	r2, [r3], #4
 800a438:	429f      	cmp	r7, r3
 800a43a:	d2fb      	bcs.n	800a434 <__hexnan+0xcc>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	b91b      	cbnz	r3, 800a448 <__hexnan+0xe0>
 800a440:	4547      	cmp	r7, r8
 800a442:	d128      	bne.n	800a496 <__hexnan+0x12e>
 800a444:	2301      	movs	r3, #1
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	2005      	movs	r0, #5
 800a44a:	b007      	add	sp, #28
 800a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a450:	3501      	adds	r5, #1
 800a452:	2d08      	cmp	r5, #8
 800a454:	f10b 0b01 	add.w	fp, fp, #1
 800a458:	dd06      	ble.n	800a468 <__hexnan+0x100>
 800a45a:	4544      	cmp	r4, r8
 800a45c:	d9c1      	bls.n	800a3e2 <__hexnan+0x7a>
 800a45e:	2300      	movs	r3, #0
 800a460:	f844 3c04 	str.w	r3, [r4, #-4]
 800a464:	2501      	movs	r5, #1
 800a466:	3c04      	subs	r4, #4
 800a468:	6822      	ldr	r2, [r4, #0]
 800a46a:	f000 000f 	and.w	r0, r0, #15
 800a46e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a472:	6020      	str	r0, [r4, #0]
 800a474:	e7b5      	b.n	800a3e2 <__hexnan+0x7a>
 800a476:	2508      	movs	r5, #8
 800a478:	e7b3      	b.n	800a3e2 <__hexnan+0x7a>
 800a47a:	9b01      	ldr	r3, [sp, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0dd      	beq.n	800a43c <__hexnan+0xd4>
 800a480:	f1c3 0320 	rsb	r3, r3, #32
 800a484:	f04f 32ff 	mov.w	r2, #4294967295
 800a488:	40da      	lsrs	r2, r3
 800a48a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a48e:	4013      	ands	r3, r2
 800a490:	f846 3c04 	str.w	r3, [r6, #-4]
 800a494:	e7d2      	b.n	800a43c <__hexnan+0xd4>
 800a496:	3f04      	subs	r7, #4
 800a498:	e7d0      	b.n	800a43c <__hexnan+0xd4>
 800a49a:	2004      	movs	r0, #4
 800a49c:	e7d5      	b.n	800a44a <__hexnan+0xe2>
	...

0800a4a0 <malloc>:
 800a4a0:	4b02      	ldr	r3, [pc, #8]	@ (800a4ac <malloc+0xc>)
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	f000 b825 	b.w	800a4f4 <_malloc_r>
 800a4aa:	bf00      	nop
 800a4ac:	20000204 	.word	0x20000204

0800a4b0 <sbrk_aligned>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a4f0 <sbrk_aligned+0x40>)
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	6831      	ldr	r1, [r6, #0]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	b911      	cbnz	r1, 800a4c2 <sbrk_aligned+0x12>
 800a4bc:	f001 f9e8 	bl	800b890 <_sbrk_r>
 800a4c0:	6030      	str	r0, [r6, #0]
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f001 f9e3 	bl	800b890 <_sbrk_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d103      	bne.n	800a4d6 <sbrk_aligned+0x26>
 800a4ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
 800a4d6:	1cc4      	adds	r4, r0, #3
 800a4d8:	f024 0403 	bic.w	r4, r4, #3
 800a4dc:	42a0      	cmp	r0, r4
 800a4de:	d0f8      	beq.n	800a4d2 <sbrk_aligned+0x22>
 800a4e0:	1a21      	subs	r1, r4, r0
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f001 f9d4 	bl	800b890 <_sbrk_r>
 800a4e8:	3001      	adds	r0, #1
 800a4ea:	d1f2      	bne.n	800a4d2 <sbrk_aligned+0x22>
 800a4ec:	e7ef      	b.n	800a4ce <sbrk_aligned+0x1e>
 800a4ee:	bf00      	nop
 800a4f0:	200007b0 	.word	0x200007b0

0800a4f4 <_malloc_r>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	1ccd      	adds	r5, r1, #3
 800a4fa:	f025 0503 	bic.w	r5, r5, #3
 800a4fe:	3508      	adds	r5, #8
 800a500:	2d0c      	cmp	r5, #12
 800a502:	bf38      	it	cc
 800a504:	250c      	movcc	r5, #12
 800a506:	2d00      	cmp	r5, #0
 800a508:	4606      	mov	r6, r0
 800a50a:	db01      	blt.n	800a510 <_malloc_r+0x1c>
 800a50c:	42a9      	cmp	r1, r5
 800a50e:	d904      	bls.n	800a51a <_malloc_r+0x26>
 800a510:	230c      	movs	r3, #12
 800a512:	6033      	str	r3, [r6, #0]
 800a514:	2000      	movs	r0, #0
 800a516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5f0 <_malloc_r+0xfc>
 800a51e:	f000 f87b 	bl	800a618 <__malloc_lock>
 800a522:	f8d8 3000 	ldr.w	r3, [r8]
 800a526:	461c      	mov	r4, r3
 800a528:	bb44      	cbnz	r4, 800a57c <_malloc_r+0x88>
 800a52a:	4629      	mov	r1, r5
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7ff ffbf 	bl	800a4b0 <sbrk_aligned>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	4604      	mov	r4, r0
 800a536:	d158      	bne.n	800a5ea <_malloc_r+0xf6>
 800a538:	f8d8 4000 	ldr.w	r4, [r8]
 800a53c:	4627      	mov	r7, r4
 800a53e:	2f00      	cmp	r7, #0
 800a540:	d143      	bne.n	800a5ca <_malloc_r+0xd6>
 800a542:	2c00      	cmp	r4, #0
 800a544:	d04b      	beq.n	800a5de <_malloc_r+0xea>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	4639      	mov	r1, r7
 800a54a:	4630      	mov	r0, r6
 800a54c:	eb04 0903 	add.w	r9, r4, r3
 800a550:	f001 f99e 	bl	800b890 <_sbrk_r>
 800a554:	4581      	cmp	r9, r0
 800a556:	d142      	bne.n	800a5de <_malloc_r+0xea>
 800a558:	6821      	ldr	r1, [r4, #0]
 800a55a:	1a6d      	subs	r5, r5, r1
 800a55c:	4629      	mov	r1, r5
 800a55e:	4630      	mov	r0, r6
 800a560:	f7ff ffa6 	bl	800a4b0 <sbrk_aligned>
 800a564:	3001      	adds	r0, #1
 800a566:	d03a      	beq.n	800a5de <_malloc_r+0xea>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	442b      	add	r3, r5
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	f8d8 3000 	ldr.w	r3, [r8]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	bb62      	cbnz	r2, 800a5d0 <_malloc_r+0xdc>
 800a576:	f8c8 7000 	str.w	r7, [r8]
 800a57a:	e00f      	b.n	800a59c <_malloc_r+0xa8>
 800a57c:	6822      	ldr	r2, [r4, #0]
 800a57e:	1b52      	subs	r2, r2, r5
 800a580:	d420      	bmi.n	800a5c4 <_malloc_r+0xd0>
 800a582:	2a0b      	cmp	r2, #11
 800a584:	d917      	bls.n	800a5b6 <_malloc_r+0xc2>
 800a586:	1961      	adds	r1, r4, r5
 800a588:	42a3      	cmp	r3, r4
 800a58a:	6025      	str	r5, [r4, #0]
 800a58c:	bf18      	it	ne
 800a58e:	6059      	strne	r1, [r3, #4]
 800a590:	6863      	ldr	r3, [r4, #4]
 800a592:	bf08      	it	eq
 800a594:	f8c8 1000 	streq.w	r1, [r8]
 800a598:	5162      	str	r2, [r4, r5]
 800a59a:	604b      	str	r3, [r1, #4]
 800a59c:	4630      	mov	r0, r6
 800a59e:	f000 f841 	bl	800a624 <__malloc_unlock>
 800a5a2:	f104 000b 	add.w	r0, r4, #11
 800a5a6:	1d23      	adds	r3, r4, #4
 800a5a8:	f020 0007 	bic.w	r0, r0, #7
 800a5ac:	1ac2      	subs	r2, r0, r3
 800a5ae:	bf1c      	itt	ne
 800a5b0:	1a1b      	subne	r3, r3, r0
 800a5b2:	50a3      	strne	r3, [r4, r2]
 800a5b4:	e7af      	b.n	800a516 <_malloc_r+0x22>
 800a5b6:	6862      	ldr	r2, [r4, #4]
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	bf0c      	ite	eq
 800a5bc:	f8c8 2000 	streq.w	r2, [r8]
 800a5c0:	605a      	strne	r2, [r3, #4]
 800a5c2:	e7eb      	b.n	800a59c <_malloc_r+0xa8>
 800a5c4:	4623      	mov	r3, r4
 800a5c6:	6864      	ldr	r4, [r4, #4]
 800a5c8:	e7ae      	b.n	800a528 <_malloc_r+0x34>
 800a5ca:	463c      	mov	r4, r7
 800a5cc:	687f      	ldr	r7, [r7, #4]
 800a5ce:	e7b6      	b.n	800a53e <_malloc_r+0x4a>
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d1fb      	bne.n	800a5d0 <_malloc_r+0xdc>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	6053      	str	r3, [r2, #4]
 800a5dc:	e7de      	b.n	800a59c <_malloc_r+0xa8>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	6033      	str	r3, [r6, #0]
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f000 f81e 	bl	800a624 <__malloc_unlock>
 800a5e8:	e794      	b.n	800a514 <_malloc_r+0x20>
 800a5ea:	6005      	str	r5, [r0, #0]
 800a5ec:	e7d6      	b.n	800a59c <_malloc_r+0xa8>
 800a5ee:	bf00      	nop
 800a5f0:	200007b4 	.word	0x200007b4

0800a5f4 <__ascii_mbtowc>:
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	b901      	cbnz	r1, 800a5fa <__ascii_mbtowc+0x6>
 800a5f8:	a901      	add	r1, sp, #4
 800a5fa:	b142      	cbz	r2, 800a60e <__ascii_mbtowc+0x1a>
 800a5fc:	b14b      	cbz	r3, 800a612 <__ascii_mbtowc+0x1e>
 800a5fe:	7813      	ldrb	r3, [r2, #0]
 800a600:	600b      	str	r3, [r1, #0]
 800a602:	7812      	ldrb	r2, [r2, #0]
 800a604:	1e10      	subs	r0, r2, #0
 800a606:	bf18      	it	ne
 800a608:	2001      	movne	r0, #1
 800a60a:	b002      	add	sp, #8
 800a60c:	4770      	bx	lr
 800a60e:	4610      	mov	r0, r2
 800a610:	e7fb      	b.n	800a60a <__ascii_mbtowc+0x16>
 800a612:	f06f 0001 	mvn.w	r0, #1
 800a616:	e7f8      	b.n	800a60a <__ascii_mbtowc+0x16>

0800a618 <__malloc_lock>:
 800a618:	4801      	ldr	r0, [pc, #4]	@ (800a620 <__malloc_lock+0x8>)
 800a61a:	f7fe bd32 	b.w	8009082 <__retarget_lock_acquire_recursive>
 800a61e:	bf00      	nop
 800a620:	200007ac 	.word	0x200007ac

0800a624 <__malloc_unlock>:
 800a624:	4801      	ldr	r0, [pc, #4]	@ (800a62c <__malloc_unlock+0x8>)
 800a626:	f7fe bd2d 	b.w	8009084 <__retarget_lock_release_recursive>
 800a62a:	bf00      	nop
 800a62c:	200007ac 	.word	0x200007ac

0800a630 <_Balloc>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	69c6      	ldr	r6, [r0, #28]
 800a634:	4604      	mov	r4, r0
 800a636:	460d      	mov	r5, r1
 800a638:	b976      	cbnz	r6, 800a658 <_Balloc+0x28>
 800a63a:	2010      	movs	r0, #16
 800a63c:	f7ff ff30 	bl	800a4a0 <malloc>
 800a640:	4602      	mov	r2, r0
 800a642:	61e0      	str	r0, [r4, #28]
 800a644:	b920      	cbnz	r0, 800a650 <_Balloc+0x20>
 800a646:	4b18      	ldr	r3, [pc, #96]	@ (800a6a8 <_Balloc+0x78>)
 800a648:	4818      	ldr	r0, [pc, #96]	@ (800a6ac <_Balloc+0x7c>)
 800a64a:	216b      	movs	r1, #107	@ 0x6b
 800a64c:	f7fe fd3a 	bl	80090c4 <__assert_func>
 800a650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a654:	6006      	str	r6, [r0, #0]
 800a656:	60c6      	str	r6, [r0, #12]
 800a658:	69e6      	ldr	r6, [r4, #28]
 800a65a:	68f3      	ldr	r3, [r6, #12]
 800a65c:	b183      	cbz	r3, 800a680 <_Balloc+0x50>
 800a65e:	69e3      	ldr	r3, [r4, #28]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a666:	b9b8      	cbnz	r0, 800a698 <_Balloc+0x68>
 800a668:	2101      	movs	r1, #1
 800a66a:	fa01 f605 	lsl.w	r6, r1, r5
 800a66e:	1d72      	adds	r2, r6, #5
 800a670:	0092      	lsls	r2, r2, #2
 800a672:	4620      	mov	r0, r4
 800a674:	f001 f923 	bl	800b8be <_calloc_r>
 800a678:	b160      	cbz	r0, 800a694 <_Balloc+0x64>
 800a67a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a67e:	e00e      	b.n	800a69e <_Balloc+0x6e>
 800a680:	2221      	movs	r2, #33	@ 0x21
 800a682:	2104      	movs	r1, #4
 800a684:	4620      	mov	r0, r4
 800a686:	f001 f91a 	bl	800b8be <_calloc_r>
 800a68a:	69e3      	ldr	r3, [r4, #28]
 800a68c:	60f0      	str	r0, [r6, #12]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1e4      	bne.n	800a65e <_Balloc+0x2e>
 800a694:	2000      	movs	r0, #0
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	6802      	ldr	r2, [r0, #0]
 800a69a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6a4:	e7f7      	b.n	800a696 <_Balloc+0x66>
 800a6a6:	bf00      	nop
 800a6a8:	0800bc51 	.word	0x0800bc51
 800a6ac:	0800bddc 	.word	0x0800bddc

0800a6b0 <_Bfree>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	69c6      	ldr	r6, [r0, #28]
 800a6b4:	4605      	mov	r5, r0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	b976      	cbnz	r6, 800a6d8 <_Bfree+0x28>
 800a6ba:	2010      	movs	r0, #16
 800a6bc:	f7ff fef0 	bl	800a4a0 <malloc>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	61e8      	str	r0, [r5, #28]
 800a6c4:	b920      	cbnz	r0, 800a6d0 <_Bfree+0x20>
 800a6c6:	4b09      	ldr	r3, [pc, #36]	@ (800a6ec <_Bfree+0x3c>)
 800a6c8:	4809      	ldr	r0, [pc, #36]	@ (800a6f0 <_Bfree+0x40>)
 800a6ca:	218f      	movs	r1, #143	@ 0x8f
 800a6cc:	f7fe fcfa 	bl	80090c4 <__assert_func>
 800a6d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6d4:	6006      	str	r6, [r0, #0]
 800a6d6:	60c6      	str	r6, [r0, #12]
 800a6d8:	b13c      	cbz	r4, 800a6ea <_Bfree+0x3a>
 800a6da:	69eb      	ldr	r3, [r5, #28]
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6e4:	6021      	str	r1, [r4, #0]
 800a6e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	0800bc51 	.word	0x0800bc51
 800a6f0:	0800bddc 	.word	0x0800bddc

0800a6f4 <__multadd>:
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	690d      	ldr	r5, [r1, #16]
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	461e      	mov	r6, r3
 800a700:	f101 0c14 	add.w	ip, r1, #20
 800a704:	2000      	movs	r0, #0
 800a706:	f8dc 3000 	ldr.w	r3, [ip]
 800a70a:	b299      	uxth	r1, r3
 800a70c:	fb02 6101 	mla	r1, r2, r1, r6
 800a710:	0c1e      	lsrs	r6, r3, #16
 800a712:	0c0b      	lsrs	r3, r1, #16
 800a714:	fb02 3306 	mla	r3, r2, r6, r3
 800a718:	b289      	uxth	r1, r1
 800a71a:	3001      	adds	r0, #1
 800a71c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a720:	4285      	cmp	r5, r0
 800a722:	f84c 1b04 	str.w	r1, [ip], #4
 800a726:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a72a:	dcec      	bgt.n	800a706 <__multadd+0x12>
 800a72c:	b30e      	cbz	r6, 800a772 <__multadd+0x7e>
 800a72e:	68a3      	ldr	r3, [r4, #8]
 800a730:	42ab      	cmp	r3, r5
 800a732:	dc19      	bgt.n	800a768 <__multadd+0x74>
 800a734:	6861      	ldr	r1, [r4, #4]
 800a736:	4638      	mov	r0, r7
 800a738:	3101      	adds	r1, #1
 800a73a:	f7ff ff79 	bl	800a630 <_Balloc>
 800a73e:	4680      	mov	r8, r0
 800a740:	b928      	cbnz	r0, 800a74e <__multadd+0x5a>
 800a742:	4602      	mov	r2, r0
 800a744:	4b0c      	ldr	r3, [pc, #48]	@ (800a778 <__multadd+0x84>)
 800a746:	480d      	ldr	r0, [pc, #52]	@ (800a77c <__multadd+0x88>)
 800a748:	21ba      	movs	r1, #186	@ 0xba
 800a74a:	f7fe fcbb 	bl	80090c4 <__assert_func>
 800a74e:	6922      	ldr	r2, [r4, #16]
 800a750:	3202      	adds	r2, #2
 800a752:	f104 010c 	add.w	r1, r4, #12
 800a756:	0092      	lsls	r2, r2, #2
 800a758:	300c      	adds	r0, #12
 800a75a:	f7fe fc94 	bl	8009086 <memcpy>
 800a75e:	4621      	mov	r1, r4
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff ffa5 	bl	800a6b0 <_Bfree>
 800a766:	4644      	mov	r4, r8
 800a768:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a76c:	3501      	adds	r5, #1
 800a76e:	615e      	str	r6, [r3, #20]
 800a770:	6125      	str	r5, [r4, #16]
 800a772:	4620      	mov	r0, r4
 800a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a778:	0800bd6b 	.word	0x0800bd6b
 800a77c:	0800bddc 	.word	0x0800bddc

0800a780 <__s2b>:
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a784:	460c      	mov	r4, r1
 800a786:	4615      	mov	r5, r2
 800a788:	461f      	mov	r7, r3
 800a78a:	2209      	movs	r2, #9
 800a78c:	3308      	adds	r3, #8
 800a78e:	4606      	mov	r6, r0
 800a790:	fb93 f3f2 	sdiv	r3, r3, r2
 800a794:	2100      	movs	r1, #0
 800a796:	2201      	movs	r2, #1
 800a798:	429a      	cmp	r2, r3
 800a79a:	db09      	blt.n	800a7b0 <__s2b+0x30>
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7ff ff47 	bl	800a630 <_Balloc>
 800a7a2:	b940      	cbnz	r0, 800a7b6 <__s2b+0x36>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4b19      	ldr	r3, [pc, #100]	@ (800a80c <__s2b+0x8c>)
 800a7a8:	4819      	ldr	r0, [pc, #100]	@ (800a810 <__s2b+0x90>)
 800a7aa:	21d3      	movs	r1, #211	@ 0xd3
 800a7ac:	f7fe fc8a 	bl	80090c4 <__assert_func>
 800a7b0:	0052      	lsls	r2, r2, #1
 800a7b2:	3101      	adds	r1, #1
 800a7b4:	e7f0      	b.n	800a798 <__s2b+0x18>
 800a7b6:	9b08      	ldr	r3, [sp, #32]
 800a7b8:	6143      	str	r3, [r0, #20]
 800a7ba:	2d09      	cmp	r5, #9
 800a7bc:	f04f 0301 	mov.w	r3, #1
 800a7c0:	6103      	str	r3, [r0, #16]
 800a7c2:	dd16      	ble.n	800a7f2 <__s2b+0x72>
 800a7c4:	f104 0909 	add.w	r9, r4, #9
 800a7c8:	46c8      	mov	r8, r9
 800a7ca:	442c      	add	r4, r5
 800a7cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	3b30      	subs	r3, #48	@ 0x30
 800a7d4:	220a      	movs	r2, #10
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f7ff ff8c 	bl	800a6f4 <__multadd>
 800a7dc:	45a0      	cmp	r8, r4
 800a7de:	d1f5      	bne.n	800a7cc <__s2b+0x4c>
 800a7e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a7e4:	444c      	add	r4, r9
 800a7e6:	1b2d      	subs	r5, r5, r4
 800a7e8:	1963      	adds	r3, r4, r5
 800a7ea:	42bb      	cmp	r3, r7
 800a7ec:	db04      	blt.n	800a7f8 <__s2b+0x78>
 800a7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f2:	340a      	adds	r4, #10
 800a7f4:	2509      	movs	r5, #9
 800a7f6:	e7f6      	b.n	800a7e6 <__s2b+0x66>
 800a7f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	3b30      	subs	r3, #48	@ 0x30
 800a800:	220a      	movs	r2, #10
 800a802:	4630      	mov	r0, r6
 800a804:	f7ff ff76 	bl	800a6f4 <__multadd>
 800a808:	e7ee      	b.n	800a7e8 <__s2b+0x68>
 800a80a:	bf00      	nop
 800a80c:	0800bd6b 	.word	0x0800bd6b
 800a810:	0800bddc 	.word	0x0800bddc

0800a814 <__hi0bits>:
 800a814:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a818:	4603      	mov	r3, r0
 800a81a:	bf36      	itet	cc
 800a81c:	0403      	lslcc	r3, r0, #16
 800a81e:	2000      	movcs	r0, #0
 800a820:	2010      	movcc	r0, #16
 800a822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a826:	bf3c      	itt	cc
 800a828:	021b      	lslcc	r3, r3, #8
 800a82a:	3008      	addcc	r0, #8
 800a82c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a830:	bf3c      	itt	cc
 800a832:	011b      	lslcc	r3, r3, #4
 800a834:	3004      	addcc	r0, #4
 800a836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a83a:	bf3c      	itt	cc
 800a83c:	009b      	lslcc	r3, r3, #2
 800a83e:	3002      	addcc	r0, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	db05      	blt.n	800a850 <__hi0bits+0x3c>
 800a844:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a848:	f100 0001 	add.w	r0, r0, #1
 800a84c:	bf08      	it	eq
 800a84e:	2020      	moveq	r0, #32
 800a850:	4770      	bx	lr

0800a852 <__lo0bits>:
 800a852:	6803      	ldr	r3, [r0, #0]
 800a854:	4602      	mov	r2, r0
 800a856:	f013 0007 	ands.w	r0, r3, #7
 800a85a:	d00b      	beq.n	800a874 <__lo0bits+0x22>
 800a85c:	07d9      	lsls	r1, r3, #31
 800a85e:	d421      	bmi.n	800a8a4 <__lo0bits+0x52>
 800a860:	0798      	lsls	r0, r3, #30
 800a862:	bf49      	itett	mi
 800a864:	085b      	lsrmi	r3, r3, #1
 800a866:	089b      	lsrpl	r3, r3, #2
 800a868:	2001      	movmi	r0, #1
 800a86a:	6013      	strmi	r3, [r2, #0]
 800a86c:	bf5c      	itt	pl
 800a86e:	6013      	strpl	r3, [r2, #0]
 800a870:	2002      	movpl	r0, #2
 800a872:	4770      	bx	lr
 800a874:	b299      	uxth	r1, r3
 800a876:	b909      	cbnz	r1, 800a87c <__lo0bits+0x2a>
 800a878:	0c1b      	lsrs	r3, r3, #16
 800a87a:	2010      	movs	r0, #16
 800a87c:	b2d9      	uxtb	r1, r3
 800a87e:	b909      	cbnz	r1, 800a884 <__lo0bits+0x32>
 800a880:	3008      	adds	r0, #8
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	0719      	lsls	r1, r3, #28
 800a886:	bf04      	itt	eq
 800a888:	091b      	lsreq	r3, r3, #4
 800a88a:	3004      	addeq	r0, #4
 800a88c:	0799      	lsls	r1, r3, #30
 800a88e:	bf04      	itt	eq
 800a890:	089b      	lsreq	r3, r3, #2
 800a892:	3002      	addeq	r0, #2
 800a894:	07d9      	lsls	r1, r3, #31
 800a896:	d403      	bmi.n	800a8a0 <__lo0bits+0x4e>
 800a898:	085b      	lsrs	r3, r3, #1
 800a89a:	f100 0001 	add.w	r0, r0, #1
 800a89e:	d003      	beq.n	800a8a8 <__lo0bits+0x56>
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	4770      	bx	lr
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	4770      	bx	lr
 800a8a8:	2020      	movs	r0, #32
 800a8aa:	4770      	bx	lr

0800a8ac <__i2b>:
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	460c      	mov	r4, r1
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	f7ff febd 	bl	800a630 <_Balloc>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	b928      	cbnz	r0, 800a8c6 <__i2b+0x1a>
 800a8ba:	4b05      	ldr	r3, [pc, #20]	@ (800a8d0 <__i2b+0x24>)
 800a8bc:	4805      	ldr	r0, [pc, #20]	@ (800a8d4 <__i2b+0x28>)
 800a8be:	f240 1145 	movw	r1, #325	@ 0x145
 800a8c2:	f7fe fbff 	bl	80090c4 <__assert_func>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	6144      	str	r4, [r0, #20]
 800a8ca:	6103      	str	r3, [r0, #16]
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	bf00      	nop
 800a8d0:	0800bd6b 	.word	0x0800bd6b
 800a8d4:	0800bddc 	.word	0x0800bddc

0800a8d8 <__multiply>:
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	4614      	mov	r4, r2
 800a8de:	690a      	ldr	r2, [r1, #16]
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	bfa8      	it	ge
 800a8e6:	4623      	movge	r3, r4
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	bfa4      	itt	ge
 800a8ec:	460c      	movge	r4, r1
 800a8ee:	461f      	movge	r7, r3
 800a8f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a8f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	6861      	ldr	r1, [r4, #4]
 800a8fc:	eb0a 0609 	add.w	r6, sl, r9
 800a900:	42b3      	cmp	r3, r6
 800a902:	b085      	sub	sp, #20
 800a904:	bfb8      	it	lt
 800a906:	3101      	addlt	r1, #1
 800a908:	f7ff fe92 	bl	800a630 <_Balloc>
 800a90c:	b930      	cbnz	r0, 800a91c <__multiply+0x44>
 800a90e:	4602      	mov	r2, r0
 800a910:	4b44      	ldr	r3, [pc, #272]	@ (800aa24 <__multiply+0x14c>)
 800a912:	4845      	ldr	r0, [pc, #276]	@ (800aa28 <__multiply+0x150>)
 800a914:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a918:	f7fe fbd4 	bl	80090c4 <__assert_func>
 800a91c:	f100 0514 	add.w	r5, r0, #20
 800a920:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a924:	462b      	mov	r3, r5
 800a926:	2200      	movs	r2, #0
 800a928:	4543      	cmp	r3, r8
 800a92a:	d321      	bcc.n	800a970 <__multiply+0x98>
 800a92c:	f107 0114 	add.w	r1, r7, #20
 800a930:	f104 0214 	add.w	r2, r4, #20
 800a934:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a938:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a93c:	9302      	str	r3, [sp, #8]
 800a93e:	1b13      	subs	r3, r2, r4
 800a940:	3b15      	subs	r3, #21
 800a942:	f023 0303 	bic.w	r3, r3, #3
 800a946:	3304      	adds	r3, #4
 800a948:	f104 0715 	add.w	r7, r4, #21
 800a94c:	42ba      	cmp	r2, r7
 800a94e:	bf38      	it	cc
 800a950:	2304      	movcc	r3, #4
 800a952:	9301      	str	r3, [sp, #4]
 800a954:	9b02      	ldr	r3, [sp, #8]
 800a956:	9103      	str	r1, [sp, #12]
 800a958:	428b      	cmp	r3, r1
 800a95a:	d80c      	bhi.n	800a976 <__multiply+0x9e>
 800a95c:	2e00      	cmp	r6, #0
 800a95e:	dd03      	ble.n	800a968 <__multiply+0x90>
 800a960:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a964:	2b00      	cmp	r3, #0
 800a966:	d05b      	beq.n	800aa20 <__multiply+0x148>
 800a968:	6106      	str	r6, [r0, #16]
 800a96a:	b005      	add	sp, #20
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	f843 2b04 	str.w	r2, [r3], #4
 800a974:	e7d8      	b.n	800a928 <__multiply+0x50>
 800a976:	f8b1 a000 	ldrh.w	sl, [r1]
 800a97a:	f1ba 0f00 	cmp.w	sl, #0
 800a97e:	d024      	beq.n	800a9ca <__multiply+0xf2>
 800a980:	f104 0e14 	add.w	lr, r4, #20
 800a984:	46a9      	mov	r9, r5
 800a986:	f04f 0c00 	mov.w	ip, #0
 800a98a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a98e:	f8d9 3000 	ldr.w	r3, [r9]
 800a992:	fa1f fb87 	uxth.w	fp, r7
 800a996:	b29b      	uxth	r3, r3
 800a998:	fb0a 330b 	mla	r3, sl, fp, r3
 800a99c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a9a0:	f8d9 7000 	ldr.w	r7, [r9]
 800a9a4:	4463      	add	r3, ip
 800a9a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800a9ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9b8:	4572      	cmp	r2, lr
 800a9ba:	f849 3b04 	str.w	r3, [r9], #4
 800a9be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9c2:	d8e2      	bhi.n	800a98a <__multiply+0xb2>
 800a9c4:	9b01      	ldr	r3, [sp, #4]
 800a9c6:	f845 c003 	str.w	ip, [r5, r3]
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9d0:	3104      	adds	r1, #4
 800a9d2:	f1b9 0f00 	cmp.w	r9, #0
 800a9d6:	d021      	beq.n	800aa1c <__multiply+0x144>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	f104 0c14 	add.w	ip, r4, #20
 800a9de:	46ae      	mov	lr, r5
 800a9e0:	f04f 0a00 	mov.w	sl, #0
 800a9e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a9e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a9ec:	fb09 770b 	mla	r7, r9, fp, r7
 800a9f0:	4457      	add	r7, sl
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9f8:	f84e 3b04 	str.w	r3, [lr], #4
 800a9fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa04:	f8be 3000 	ldrh.w	r3, [lr]
 800aa08:	fb09 330a 	mla	r3, r9, sl, r3
 800aa0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa10:	4562      	cmp	r2, ip
 800aa12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa16:	d8e5      	bhi.n	800a9e4 <__multiply+0x10c>
 800aa18:	9f01      	ldr	r7, [sp, #4]
 800aa1a:	51eb      	str	r3, [r5, r7]
 800aa1c:	3504      	adds	r5, #4
 800aa1e:	e799      	b.n	800a954 <__multiply+0x7c>
 800aa20:	3e01      	subs	r6, #1
 800aa22:	e79b      	b.n	800a95c <__multiply+0x84>
 800aa24:	0800bd6b 	.word	0x0800bd6b
 800aa28:	0800bddc 	.word	0x0800bddc

0800aa2c <__pow5mult>:
 800aa2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa30:	4615      	mov	r5, r2
 800aa32:	f012 0203 	ands.w	r2, r2, #3
 800aa36:	4607      	mov	r7, r0
 800aa38:	460e      	mov	r6, r1
 800aa3a:	d007      	beq.n	800aa4c <__pow5mult+0x20>
 800aa3c:	4c25      	ldr	r4, [pc, #148]	@ (800aad4 <__pow5mult+0xa8>)
 800aa3e:	3a01      	subs	r2, #1
 800aa40:	2300      	movs	r3, #0
 800aa42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa46:	f7ff fe55 	bl	800a6f4 <__multadd>
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	10ad      	asrs	r5, r5, #2
 800aa4e:	d03d      	beq.n	800aacc <__pow5mult+0xa0>
 800aa50:	69fc      	ldr	r4, [r7, #28]
 800aa52:	b97c      	cbnz	r4, 800aa74 <__pow5mult+0x48>
 800aa54:	2010      	movs	r0, #16
 800aa56:	f7ff fd23 	bl	800a4a0 <malloc>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	61f8      	str	r0, [r7, #28]
 800aa5e:	b928      	cbnz	r0, 800aa6c <__pow5mult+0x40>
 800aa60:	4b1d      	ldr	r3, [pc, #116]	@ (800aad8 <__pow5mult+0xac>)
 800aa62:	481e      	ldr	r0, [pc, #120]	@ (800aadc <__pow5mult+0xb0>)
 800aa64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa68:	f7fe fb2c 	bl	80090c4 <__assert_func>
 800aa6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa70:	6004      	str	r4, [r0, #0]
 800aa72:	60c4      	str	r4, [r0, #12]
 800aa74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa7c:	b94c      	cbnz	r4, 800aa92 <__pow5mult+0x66>
 800aa7e:	f240 2171 	movw	r1, #625	@ 0x271
 800aa82:	4638      	mov	r0, r7
 800aa84:	f7ff ff12 	bl	800a8ac <__i2b>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa8e:	4604      	mov	r4, r0
 800aa90:	6003      	str	r3, [r0, #0]
 800aa92:	f04f 0900 	mov.w	r9, #0
 800aa96:	07eb      	lsls	r3, r5, #31
 800aa98:	d50a      	bpl.n	800aab0 <__pow5mult+0x84>
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff ff1a 	bl	800a8d8 <__multiply>
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4680      	mov	r8, r0
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f7ff fe01 	bl	800a6b0 <_Bfree>
 800aaae:	4646      	mov	r6, r8
 800aab0:	106d      	asrs	r5, r5, #1
 800aab2:	d00b      	beq.n	800aacc <__pow5mult+0xa0>
 800aab4:	6820      	ldr	r0, [r4, #0]
 800aab6:	b938      	cbnz	r0, 800aac8 <__pow5mult+0x9c>
 800aab8:	4622      	mov	r2, r4
 800aaba:	4621      	mov	r1, r4
 800aabc:	4638      	mov	r0, r7
 800aabe:	f7ff ff0b 	bl	800a8d8 <__multiply>
 800aac2:	6020      	str	r0, [r4, #0]
 800aac4:	f8c0 9000 	str.w	r9, [r0]
 800aac8:	4604      	mov	r4, r0
 800aaca:	e7e4      	b.n	800aa96 <__pow5mult+0x6a>
 800aacc:	4630      	mov	r0, r6
 800aace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aad2:	bf00      	nop
 800aad4:	0800be38 	.word	0x0800be38
 800aad8:	0800bc51 	.word	0x0800bc51
 800aadc:	0800bddc 	.word	0x0800bddc

0800aae0 <__lshift>:
 800aae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	460c      	mov	r4, r1
 800aae6:	6849      	ldr	r1, [r1, #4]
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4691      	mov	r9, r2
 800aaf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aaf8:	f108 0601 	add.w	r6, r8, #1
 800aafc:	42b3      	cmp	r3, r6
 800aafe:	db0b      	blt.n	800ab18 <__lshift+0x38>
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff fd95 	bl	800a630 <_Balloc>
 800ab06:	4605      	mov	r5, r0
 800ab08:	b948      	cbnz	r0, 800ab1e <__lshift+0x3e>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	4b28      	ldr	r3, [pc, #160]	@ (800abb0 <__lshift+0xd0>)
 800ab0e:	4829      	ldr	r0, [pc, #164]	@ (800abb4 <__lshift+0xd4>)
 800ab10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab14:	f7fe fad6 	bl	80090c4 <__assert_func>
 800ab18:	3101      	adds	r1, #1
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	e7ee      	b.n	800aafc <__lshift+0x1c>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f100 0114 	add.w	r1, r0, #20
 800ab24:	f100 0210 	add.w	r2, r0, #16
 800ab28:	4618      	mov	r0, r3
 800ab2a:	4553      	cmp	r3, sl
 800ab2c:	db33      	blt.n	800ab96 <__lshift+0xb6>
 800ab2e:	6920      	ldr	r0, [r4, #16]
 800ab30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab34:	f104 0314 	add.w	r3, r4, #20
 800ab38:	f019 091f 	ands.w	r9, r9, #31
 800ab3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab44:	d02b      	beq.n	800ab9e <__lshift+0xbe>
 800ab46:	f1c9 0e20 	rsb	lr, r9, #32
 800ab4a:	468a      	mov	sl, r1
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	6818      	ldr	r0, [r3, #0]
 800ab50:	fa00 f009 	lsl.w	r0, r0, r9
 800ab54:	4310      	orrs	r0, r2
 800ab56:	f84a 0b04 	str.w	r0, [sl], #4
 800ab5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab5e:	459c      	cmp	ip, r3
 800ab60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab64:	d8f3      	bhi.n	800ab4e <__lshift+0x6e>
 800ab66:	ebac 0304 	sub.w	r3, ip, r4
 800ab6a:	3b15      	subs	r3, #21
 800ab6c:	f023 0303 	bic.w	r3, r3, #3
 800ab70:	3304      	adds	r3, #4
 800ab72:	f104 0015 	add.w	r0, r4, #21
 800ab76:	4584      	cmp	ip, r0
 800ab78:	bf38      	it	cc
 800ab7a:	2304      	movcc	r3, #4
 800ab7c:	50ca      	str	r2, [r1, r3]
 800ab7e:	b10a      	cbz	r2, 800ab84 <__lshift+0xa4>
 800ab80:	f108 0602 	add.w	r6, r8, #2
 800ab84:	3e01      	subs	r6, #1
 800ab86:	4638      	mov	r0, r7
 800ab88:	612e      	str	r6, [r5, #16]
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	f7ff fd90 	bl	800a6b0 <_Bfree>
 800ab90:	4628      	mov	r0, r5
 800ab92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	e7c5      	b.n	800ab2a <__lshift+0x4a>
 800ab9e:	3904      	subs	r1, #4
 800aba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aba4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aba8:	459c      	cmp	ip, r3
 800abaa:	d8f9      	bhi.n	800aba0 <__lshift+0xc0>
 800abac:	e7ea      	b.n	800ab84 <__lshift+0xa4>
 800abae:	bf00      	nop
 800abb0:	0800bd6b 	.word	0x0800bd6b
 800abb4:	0800bddc 	.word	0x0800bddc

0800abb8 <__mcmp>:
 800abb8:	690a      	ldr	r2, [r1, #16]
 800abba:	4603      	mov	r3, r0
 800abbc:	6900      	ldr	r0, [r0, #16]
 800abbe:	1a80      	subs	r0, r0, r2
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	d10e      	bne.n	800abe2 <__mcmp+0x2a>
 800abc4:	3314      	adds	r3, #20
 800abc6:	3114      	adds	r1, #20
 800abc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800abcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abd8:	4295      	cmp	r5, r2
 800abda:	d003      	beq.n	800abe4 <__mcmp+0x2c>
 800abdc:	d205      	bcs.n	800abea <__mcmp+0x32>
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	bd30      	pop	{r4, r5, pc}
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	d3f3      	bcc.n	800abd0 <__mcmp+0x18>
 800abe8:	e7fb      	b.n	800abe2 <__mcmp+0x2a>
 800abea:	2001      	movs	r0, #1
 800abec:	e7f9      	b.n	800abe2 <__mcmp+0x2a>
	...

0800abf0 <__mdiff>:
 800abf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4689      	mov	r9, r1
 800abf6:	4606      	mov	r6, r0
 800abf8:	4611      	mov	r1, r2
 800abfa:	4648      	mov	r0, r9
 800abfc:	4614      	mov	r4, r2
 800abfe:	f7ff ffdb 	bl	800abb8 <__mcmp>
 800ac02:	1e05      	subs	r5, r0, #0
 800ac04:	d112      	bne.n	800ac2c <__mdiff+0x3c>
 800ac06:	4629      	mov	r1, r5
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff fd11 	bl	800a630 <_Balloc>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	b928      	cbnz	r0, 800ac1e <__mdiff+0x2e>
 800ac12:	4b3f      	ldr	r3, [pc, #252]	@ (800ad10 <__mdiff+0x120>)
 800ac14:	f240 2137 	movw	r1, #567	@ 0x237
 800ac18:	483e      	ldr	r0, [pc, #248]	@ (800ad14 <__mdiff+0x124>)
 800ac1a:	f7fe fa53 	bl	80090c4 <__assert_func>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac24:	4610      	mov	r0, r2
 800ac26:	b003      	add	sp, #12
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2c:	bfbc      	itt	lt
 800ac2e:	464b      	movlt	r3, r9
 800ac30:	46a1      	movlt	r9, r4
 800ac32:	4630      	mov	r0, r6
 800ac34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac38:	bfba      	itte	lt
 800ac3a:	461c      	movlt	r4, r3
 800ac3c:	2501      	movlt	r5, #1
 800ac3e:	2500      	movge	r5, #0
 800ac40:	f7ff fcf6 	bl	800a630 <_Balloc>
 800ac44:	4602      	mov	r2, r0
 800ac46:	b918      	cbnz	r0, 800ac50 <__mdiff+0x60>
 800ac48:	4b31      	ldr	r3, [pc, #196]	@ (800ad10 <__mdiff+0x120>)
 800ac4a:	f240 2145 	movw	r1, #581	@ 0x245
 800ac4e:	e7e3      	b.n	800ac18 <__mdiff+0x28>
 800ac50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac54:	6926      	ldr	r6, [r4, #16]
 800ac56:	60c5      	str	r5, [r0, #12]
 800ac58:	f109 0310 	add.w	r3, r9, #16
 800ac5c:	f109 0514 	add.w	r5, r9, #20
 800ac60:	f104 0e14 	add.w	lr, r4, #20
 800ac64:	f100 0b14 	add.w	fp, r0, #20
 800ac68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	46d9      	mov	r9, fp
 800ac74:	f04f 0c00 	mov.w	ip, #0
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	fa1f f38a 	uxth.w	r3, sl
 800ac88:	4619      	mov	r1, r3
 800ac8a:	b283      	uxth	r3, r0
 800ac8c:	1acb      	subs	r3, r1, r3
 800ac8e:	0c00      	lsrs	r0, r0, #16
 800ac90:	4463      	add	r3, ip
 800ac92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aca0:	4576      	cmp	r6, lr
 800aca2:	f849 3b04 	str.w	r3, [r9], #4
 800aca6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acaa:	d8e5      	bhi.n	800ac78 <__mdiff+0x88>
 800acac:	1b33      	subs	r3, r6, r4
 800acae:	3b15      	subs	r3, #21
 800acb0:	f023 0303 	bic.w	r3, r3, #3
 800acb4:	3415      	adds	r4, #21
 800acb6:	3304      	adds	r3, #4
 800acb8:	42a6      	cmp	r6, r4
 800acba:	bf38      	it	cc
 800acbc:	2304      	movcc	r3, #4
 800acbe:	441d      	add	r5, r3
 800acc0:	445b      	add	r3, fp
 800acc2:	461e      	mov	r6, r3
 800acc4:	462c      	mov	r4, r5
 800acc6:	4544      	cmp	r4, r8
 800acc8:	d30e      	bcc.n	800ace8 <__mdiff+0xf8>
 800acca:	f108 0103 	add.w	r1, r8, #3
 800acce:	1b49      	subs	r1, r1, r5
 800acd0:	f021 0103 	bic.w	r1, r1, #3
 800acd4:	3d03      	subs	r5, #3
 800acd6:	45a8      	cmp	r8, r5
 800acd8:	bf38      	it	cc
 800acda:	2100      	movcc	r1, #0
 800acdc:	440b      	add	r3, r1
 800acde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ace2:	b191      	cbz	r1, 800ad0a <__mdiff+0x11a>
 800ace4:	6117      	str	r7, [r2, #16]
 800ace6:	e79d      	b.n	800ac24 <__mdiff+0x34>
 800ace8:	f854 1b04 	ldr.w	r1, [r4], #4
 800acec:	46e6      	mov	lr, ip
 800acee:	0c08      	lsrs	r0, r1, #16
 800acf0:	fa1c fc81 	uxtah	ip, ip, r1
 800acf4:	4471      	add	r1, lr
 800acf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acfa:	b289      	uxth	r1, r1
 800acfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad00:	f846 1b04 	str.w	r1, [r6], #4
 800ad04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad08:	e7dd      	b.n	800acc6 <__mdiff+0xd6>
 800ad0a:	3f01      	subs	r7, #1
 800ad0c:	e7e7      	b.n	800acde <__mdiff+0xee>
 800ad0e:	bf00      	nop
 800ad10:	0800bd6b 	.word	0x0800bd6b
 800ad14:	0800bddc 	.word	0x0800bddc

0800ad18 <__ulp>:
 800ad18:	b082      	sub	sp, #8
 800ad1a:	ed8d 0b00 	vstr	d0, [sp]
 800ad1e:	9a01      	ldr	r2, [sp, #4]
 800ad20:	4b0f      	ldr	r3, [pc, #60]	@ (800ad60 <__ulp+0x48>)
 800ad22:	4013      	ands	r3, r2
 800ad24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	dc08      	bgt.n	800ad3e <__ulp+0x26>
 800ad2c:	425b      	negs	r3, r3
 800ad2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ad32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad36:	da04      	bge.n	800ad42 <__ulp+0x2a>
 800ad38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ad3c:	4113      	asrs	r3, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	e008      	b.n	800ad54 <__ulp+0x3c>
 800ad42:	f1a2 0314 	sub.w	r3, r2, #20
 800ad46:	2b1e      	cmp	r3, #30
 800ad48:	bfda      	itte	le
 800ad4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ad4e:	40da      	lsrle	r2, r3
 800ad50:	2201      	movgt	r2, #1
 800ad52:	2300      	movs	r3, #0
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	ec41 0b10 	vmov	d0, r0, r1
 800ad5c:	b002      	add	sp, #8
 800ad5e:	4770      	bx	lr
 800ad60:	7ff00000 	.word	0x7ff00000

0800ad64 <__b2d>:
 800ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad68:	6906      	ldr	r6, [r0, #16]
 800ad6a:	f100 0814 	add.w	r8, r0, #20
 800ad6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ad72:	1f37      	subs	r7, r6, #4
 800ad74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad78:	4610      	mov	r0, r2
 800ad7a:	f7ff fd4b 	bl	800a814 <__hi0bits>
 800ad7e:	f1c0 0320 	rsb	r3, r0, #32
 800ad82:	280a      	cmp	r0, #10
 800ad84:	600b      	str	r3, [r1, #0]
 800ad86:	491b      	ldr	r1, [pc, #108]	@ (800adf4 <__b2d+0x90>)
 800ad88:	dc15      	bgt.n	800adb6 <__b2d+0x52>
 800ad8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ad8e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ad92:	45b8      	cmp	r8, r7
 800ad94:	ea43 0501 	orr.w	r5, r3, r1
 800ad98:	bf34      	ite	cc
 800ad9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ad9e:	2300      	movcs	r3, #0
 800ada0:	3015      	adds	r0, #21
 800ada2:	fa02 f000 	lsl.w	r0, r2, r0
 800ada6:	fa23 f30c 	lsr.w	r3, r3, ip
 800adaa:	4303      	orrs	r3, r0
 800adac:	461c      	mov	r4, r3
 800adae:	ec45 4b10 	vmov	d0, r4, r5
 800adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb6:	45b8      	cmp	r8, r7
 800adb8:	bf3a      	itte	cc
 800adba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800adbe:	f1a6 0708 	subcc.w	r7, r6, #8
 800adc2:	2300      	movcs	r3, #0
 800adc4:	380b      	subs	r0, #11
 800adc6:	d012      	beq.n	800adee <__b2d+0x8a>
 800adc8:	f1c0 0120 	rsb	r1, r0, #32
 800adcc:	fa23 f401 	lsr.w	r4, r3, r1
 800add0:	4082      	lsls	r2, r0
 800add2:	4322      	orrs	r2, r4
 800add4:	4547      	cmp	r7, r8
 800add6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800adda:	bf8c      	ite	hi
 800addc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ade0:	2200      	movls	r2, #0
 800ade2:	4083      	lsls	r3, r0
 800ade4:	40ca      	lsrs	r2, r1
 800ade6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800adea:	4313      	orrs	r3, r2
 800adec:	e7de      	b.n	800adac <__b2d+0x48>
 800adee:	ea42 0501 	orr.w	r5, r2, r1
 800adf2:	e7db      	b.n	800adac <__b2d+0x48>
 800adf4:	3ff00000 	.word	0x3ff00000

0800adf8 <__d2b>:
 800adf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adfc:	460f      	mov	r7, r1
 800adfe:	2101      	movs	r1, #1
 800ae00:	ec59 8b10 	vmov	r8, r9, d0
 800ae04:	4616      	mov	r6, r2
 800ae06:	f7ff fc13 	bl	800a630 <_Balloc>
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	b930      	cbnz	r0, 800ae1c <__d2b+0x24>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	4b23      	ldr	r3, [pc, #140]	@ (800aea0 <__d2b+0xa8>)
 800ae12:	4824      	ldr	r0, [pc, #144]	@ (800aea4 <__d2b+0xac>)
 800ae14:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae18:	f7fe f954 	bl	80090c4 <__assert_func>
 800ae1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae24:	b10d      	cbz	r5, 800ae2a <__d2b+0x32>
 800ae26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	f1b8 0300 	subs.w	r3, r8, #0
 800ae30:	d023      	beq.n	800ae7a <__d2b+0x82>
 800ae32:	4668      	mov	r0, sp
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	f7ff fd0c 	bl	800a852 <__lo0bits>
 800ae3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae3e:	b1d0      	cbz	r0, 800ae76 <__d2b+0x7e>
 800ae40:	f1c0 0320 	rsb	r3, r0, #32
 800ae44:	fa02 f303 	lsl.w	r3, r2, r3
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	40c2      	lsrs	r2, r0
 800ae4c:	6163      	str	r3, [r4, #20]
 800ae4e:	9201      	str	r2, [sp, #4]
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	61a3      	str	r3, [r4, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bf0c      	ite	eq
 800ae58:	2201      	moveq	r2, #1
 800ae5a:	2202      	movne	r2, #2
 800ae5c:	6122      	str	r2, [r4, #16]
 800ae5e:	b1a5      	cbz	r5, 800ae8a <__d2b+0x92>
 800ae60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae64:	4405      	add	r5, r0
 800ae66:	603d      	str	r5, [r7, #0]
 800ae68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae6c:	6030      	str	r0, [r6, #0]
 800ae6e:	4620      	mov	r0, r4
 800ae70:	b003      	add	sp, #12
 800ae72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae76:	6161      	str	r1, [r4, #20]
 800ae78:	e7ea      	b.n	800ae50 <__d2b+0x58>
 800ae7a:	a801      	add	r0, sp, #4
 800ae7c:	f7ff fce9 	bl	800a852 <__lo0bits>
 800ae80:	9b01      	ldr	r3, [sp, #4]
 800ae82:	6163      	str	r3, [r4, #20]
 800ae84:	3020      	adds	r0, #32
 800ae86:	2201      	movs	r2, #1
 800ae88:	e7e8      	b.n	800ae5c <__d2b+0x64>
 800ae8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae92:	6038      	str	r0, [r7, #0]
 800ae94:	6918      	ldr	r0, [r3, #16]
 800ae96:	f7ff fcbd 	bl	800a814 <__hi0bits>
 800ae9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae9e:	e7e5      	b.n	800ae6c <__d2b+0x74>
 800aea0:	0800bd6b 	.word	0x0800bd6b
 800aea4:	0800bddc 	.word	0x0800bddc

0800aea8 <__ratio>:
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	b085      	sub	sp, #20
 800aeae:	e9cd 1000 	strd	r1, r0, [sp]
 800aeb2:	a902      	add	r1, sp, #8
 800aeb4:	f7ff ff56 	bl	800ad64 <__b2d>
 800aeb8:	9800      	ldr	r0, [sp, #0]
 800aeba:	a903      	add	r1, sp, #12
 800aebc:	ec55 4b10 	vmov	r4, r5, d0
 800aec0:	f7ff ff50 	bl	800ad64 <__b2d>
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	6919      	ldr	r1, [r3, #16]
 800aec8:	9b00      	ldr	r3, [sp, #0]
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	1ac9      	subs	r1, r1, r3
 800aece:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aed2:	1a9b      	subs	r3, r3, r2
 800aed4:	ec5b ab10 	vmov	sl, fp, d0
 800aed8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bfce      	itee	gt
 800aee0:	462a      	movgt	r2, r5
 800aee2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aee6:	465a      	movle	r2, fp
 800aee8:	462f      	mov	r7, r5
 800aeea:	46d9      	mov	r9, fp
 800aeec:	bfcc      	ite	gt
 800aeee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aef2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aef6:	464b      	mov	r3, r9
 800aef8:	4652      	mov	r2, sl
 800aefa:	4620      	mov	r0, r4
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 fca5 	bl	800084c <__aeabi_ddiv>
 800af02:	ec41 0b10 	vmov	d0, r0, r1
 800af06:	b005      	add	sp, #20
 800af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af0c <__copybits>:
 800af0c:	3901      	subs	r1, #1
 800af0e:	b570      	push	{r4, r5, r6, lr}
 800af10:	1149      	asrs	r1, r1, #5
 800af12:	6914      	ldr	r4, [r2, #16]
 800af14:	3101      	adds	r1, #1
 800af16:	f102 0314 	add.w	r3, r2, #20
 800af1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af22:	1f05      	subs	r5, r0, #4
 800af24:	42a3      	cmp	r3, r4
 800af26:	d30c      	bcc.n	800af42 <__copybits+0x36>
 800af28:	1aa3      	subs	r3, r4, r2
 800af2a:	3b11      	subs	r3, #17
 800af2c:	f023 0303 	bic.w	r3, r3, #3
 800af30:	3211      	adds	r2, #17
 800af32:	42a2      	cmp	r2, r4
 800af34:	bf88      	it	hi
 800af36:	2300      	movhi	r3, #0
 800af38:	4418      	add	r0, r3
 800af3a:	2300      	movs	r3, #0
 800af3c:	4288      	cmp	r0, r1
 800af3e:	d305      	bcc.n	800af4c <__copybits+0x40>
 800af40:	bd70      	pop	{r4, r5, r6, pc}
 800af42:	f853 6b04 	ldr.w	r6, [r3], #4
 800af46:	f845 6f04 	str.w	r6, [r5, #4]!
 800af4a:	e7eb      	b.n	800af24 <__copybits+0x18>
 800af4c:	f840 3b04 	str.w	r3, [r0], #4
 800af50:	e7f4      	b.n	800af3c <__copybits+0x30>

0800af52 <__any_on>:
 800af52:	f100 0214 	add.w	r2, r0, #20
 800af56:	6900      	ldr	r0, [r0, #16]
 800af58:	114b      	asrs	r3, r1, #5
 800af5a:	4298      	cmp	r0, r3
 800af5c:	b510      	push	{r4, lr}
 800af5e:	db11      	blt.n	800af84 <__any_on+0x32>
 800af60:	dd0a      	ble.n	800af78 <__any_on+0x26>
 800af62:	f011 011f 	ands.w	r1, r1, #31
 800af66:	d007      	beq.n	800af78 <__any_on+0x26>
 800af68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af6c:	fa24 f001 	lsr.w	r0, r4, r1
 800af70:	fa00 f101 	lsl.w	r1, r0, r1
 800af74:	428c      	cmp	r4, r1
 800af76:	d10b      	bne.n	800af90 <__any_on+0x3e>
 800af78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d803      	bhi.n	800af88 <__any_on+0x36>
 800af80:	2000      	movs	r0, #0
 800af82:	bd10      	pop	{r4, pc}
 800af84:	4603      	mov	r3, r0
 800af86:	e7f7      	b.n	800af78 <__any_on+0x26>
 800af88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af8c:	2900      	cmp	r1, #0
 800af8e:	d0f5      	beq.n	800af7c <__any_on+0x2a>
 800af90:	2001      	movs	r0, #1
 800af92:	e7f6      	b.n	800af82 <__any_on+0x30>

0800af94 <_strtol_l.constprop.0>:
 800af94:	2b24      	cmp	r3, #36	@ 0x24
 800af96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9a:	4686      	mov	lr, r0
 800af9c:	4690      	mov	r8, r2
 800af9e:	d801      	bhi.n	800afa4 <_strtol_l.constprop.0+0x10>
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d106      	bne.n	800afb2 <_strtol_l.constprop.0+0x1e>
 800afa4:	f7fe f842 	bl	800902c <__errno>
 800afa8:	2316      	movs	r3, #22
 800afaa:	6003      	str	r3, [r0, #0]
 800afac:	2000      	movs	r0, #0
 800afae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb2:	4834      	ldr	r0, [pc, #208]	@ (800b084 <_strtol_l.constprop.0+0xf0>)
 800afb4:	460d      	mov	r5, r1
 800afb6:	462a      	mov	r2, r5
 800afb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afbc:	5d06      	ldrb	r6, [r0, r4]
 800afbe:	f016 0608 	ands.w	r6, r6, #8
 800afc2:	d1f8      	bne.n	800afb6 <_strtol_l.constprop.0+0x22>
 800afc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800afc6:	d12d      	bne.n	800b024 <_strtol_l.constprop.0+0x90>
 800afc8:	782c      	ldrb	r4, [r5, #0]
 800afca:	2601      	movs	r6, #1
 800afcc:	1c95      	adds	r5, r2, #2
 800afce:	f033 0210 	bics.w	r2, r3, #16
 800afd2:	d109      	bne.n	800afe8 <_strtol_l.constprop.0+0x54>
 800afd4:	2c30      	cmp	r4, #48	@ 0x30
 800afd6:	d12a      	bne.n	800b02e <_strtol_l.constprop.0+0x9a>
 800afd8:	782a      	ldrb	r2, [r5, #0]
 800afda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800afde:	2a58      	cmp	r2, #88	@ 0x58
 800afe0:	d125      	bne.n	800b02e <_strtol_l.constprop.0+0x9a>
 800afe2:	786c      	ldrb	r4, [r5, #1]
 800afe4:	2310      	movs	r3, #16
 800afe6:	3502      	adds	r5, #2
 800afe8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800afec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aff0:	2200      	movs	r2, #0
 800aff2:	fbbc f9f3 	udiv	r9, ip, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	fb03 ca19 	mls	sl, r3, r9, ip
 800affc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b000:	2f09      	cmp	r7, #9
 800b002:	d81b      	bhi.n	800b03c <_strtol_l.constprop.0+0xa8>
 800b004:	463c      	mov	r4, r7
 800b006:	42a3      	cmp	r3, r4
 800b008:	dd27      	ble.n	800b05a <_strtol_l.constprop.0+0xc6>
 800b00a:	1c57      	adds	r7, r2, #1
 800b00c:	d007      	beq.n	800b01e <_strtol_l.constprop.0+0x8a>
 800b00e:	4581      	cmp	r9, r0
 800b010:	d320      	bcc.n	800b054 <_strtol_l.constprop.0+0xc0>
 800b012:	d101      	bne.n	800b018 <_strtol_l.constprop.0+0x84>
 800b014:	45a2      	cmp	sl, r4
 800b016:	db1d      	blt.n	800b054 <_strtol_l.constprop.0+0xc0>
 800b018:	fb00 4003 	mla	r0, r0, r3, r4
 800b01c:	2201      	movs	r2, #1
 800b01e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b022:	e7eb      	b.n	800affc <_strtol_l.constprop.0+0x68>
 800b024:	2c2b      	cmp	r4, #43	@ 0x2b
 800b026:	bf04      	itt	eq
 800b028:	782c      	ldrbeq	r4, [r5, #0]
 800b02a:	1c95      	addeq	r5, r2, #2
 800b02c:	e7cf      	b.n	800afce <_strtol_l.constprop.0+0x3a>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1da      	bne.n	800afe8 <_strtol_l.constprop.0+0x54>
 800b032:	2c30      	cmp	r4, #48	@ 0x30
 800b034:	bf0c      	ite	eq
 800b036:	2308      	moveq	r3, #8
 800b038:	230a      	movne	r3, #10
 800b03a:	e7d5      	b.n	800afe8 <_strtol_l.constprop.0+0x54>
 800b03c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b040:	2f19      	cmp	r7, #25
 800b042:	d801      	bhi.n	800b048 <_strtol_l.constprop.0+0xb4>
 800b044:	3c37      	subs	r4, #55	@ 0x37
 800b046:	e7de      	b.n	800b006 <_strtol_l.constprop.0+0x72>
 800b048:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b04c:	2f19      	cmp	r7, #25
 800b04e:	d804      	bhi.n	800b05a <_strtol_l.constprop.0+0xc6>
 800b050:	3c57      	subs	r4, #87	@ 0x57
 800b052:	e7d8      	b.n	800b006 <_strtol_l.constprop.0+0x72>
 800b054:	f04f 32ff 	mov.w	r2, #4294967295
 800b058:	e7e1      	b.n	800b01e <_strtol_l.constprop.0+0x8a>
 800b05a:	1c53      	adds	r3, r2, #1
 800b05c:	d108      	bne.n	800b070 <_strtol_l.constprop.0+0xdc>
 800b05e:	2322      	movs	r3, #34	@ 0x22
 800b060:	f8ce 3000 	str.w	r3, [lr]
 800b064:	4660      	mov	r0, ip
 800b066:	f1b8 0f00 	cmp.w	r8, #0
 800b06a:	d0a0      	beq.n	800afae <_strtol_l.constprop.0+0x1a>
 800b06c:	1e69      	subs	r1, r5, #1
 800b06e:	e006      	b.n	800b07e <_strtol_l.constprop.0+0xea>
 800b070:	b106      	cbz	r6, 800b074 <_strtol_l.constprop.0+0xe0>
 800b072:	4240      	negs	r0, r0
 800b074:	f1b8 0f00 	cmp.w	r8, #0
 800b078:	d099      	beq.n	800afae <_strtol_l.constprop.0+0x1a>
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	d1f6      	bne.n	800b06c <_strtol_l.constprop.0+0xd8>
 800b07e:	f8c8 1000 	str.w	r1, [r8]
 800b082:	e794      	b.n	800afae <_strtol_l.constprop.0+0x1a>
 800b084:	0800bf39 	.word	0x0800bf39

0800b088 <_strtol_r>:
 800b088:	f7ff bf84 	b.w	800af94 <_strtol_l.constprop.0>

0800b08c <__ascii_wctomb>:
 800b08c:	4603      	mov	r3, r0
 800b08e:	4608      	mov	r0, r1
 800b090:	b141      	cbz	r1, 800b0a4 <__ascii_wctomb+0x18>
 800b092:	2aff      	cmp	r2, #255	@ 0xff
 800b094:	d904      	bls.n	800b0a0 <__ascii_wctomb+0x14>
 800b096:	228a      	movs	r2, #138	@ 0x8a
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	f04f 30ff 	mov.w	r0, #4294967295
 800b09e:	4770      	bx	lr
 800b0a0:	700a      	strb	r2, [r1, #0]
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	4770      	bx	lr

0800b0a6 <__ssputs_r>:
 800b0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0aa:	688e      	ldr	r6, [r1, #8]
 800b0ac:	461f      	mov	r7, r3
 800b0ae:	42be      	cmp	r6, r7
 800b0b0:	680b      	ldr	r3, [r1, #0]
 800b0b2:	4682      	mov	sl, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	4690      	mov	r8, r2
 800b0b8:	d82d      	bhi.n	800b116 <__ssputs_r+0x70>
 800b0ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0c2:	d026      	beq.n	800b112 <__ssputs_r+0x6c>
 800b0c4:	6965      	ldr	r5, [r4, #20]
 800b0c6:	6909      	ldr	r1, [r1, #16]
 800b0c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0cc:	eba3 0901 	sub.w	r9, r3, r1
 800b0d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0d4:	1c7b      	adds	r3, r7, #1
 800b0d6:	444b      	add	r3, r9
 800b0d8:	106d      	asrs	r5, r5, #1
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	bf38      	it	cc
 800b0de:	461d      	movcc	r5, r3
 800b0e0:	0553      	lsls	r3, r2, #21
 800b0e2:	d527      	bpl.n	800b134 <__ssputs_r+0x8e>
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	f7ff fa05 	bl	800a4f4 <_malloc_r>
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	b360      	cbz	r0, 800b148 <__ssputs_r+0xa2>
 800b0ee:	6921      	ldr	r1, [r4, #16]
 800b0f0:	464a      	mov	r2, r9
 800b0f2:	f7fd ffc8 	bl	8009086 <memcpy>
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	6126      	str	r6, [r4, #16]
 800b104:	6165      	str	r5, [r4, #20]
 800b106:	444e      	add	r6, r9
 800b108:	eba5 0509 	sub.w	r5, r5, r9
 800b10c:	6026      	str	r6, [r4, #0]
 800b10e:	60a5      	str	r5, [r4, #8]
 800b110:	463e      	mov	r6, r7
 800b112:	42be      	cmp	r6, r7
 800b114:	d900      	bls.n	800b118 <__ssputs_r+0x72>
 800b116:	463e      	mov	r6, r7
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	4632      	mov	r2, r6
 800b11c:	4641      	mov	r1, r8
 800b11e:	f000 fb7b 	bl	800b818 <memmove>
 800b122:	68a3      	ldr	r3, [r4, #8]
 800b124:	1b9b      	subs	r3, r3, r6
 800b126:	60a3      	str	r3, [r4, #8]
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	4433      	add	r3, r6
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	2000      	movs	r0, #0
 800b130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b134:	462a      	mov	r2, r5
 800b136:	f000 fbd6 	bl	800b8e6 <_realloc_r>
 800b13a:	4606      	mov	r6, r0
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d1e0      	bne.n	800b102 <__ssputs_r+0x5c>
 800b140:	6921      	ldr	r1, [r4, #16]
 800b142:	4650      	mov	r0, sl
 800b144:	f7fe fe28 	bl	8009d98 <_free_r>
 800b148:	230c      	movs	r3, #12
 800b14a:	f8ca 3000 	str.w	r3, [sl]
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b154:	81a3      	strh	r3, [r4, #12]
 800b156:	f04f 30ff 	mov.w	r0, #4294967295
 800b15a:	e7e9      	b.n	800b130 <__ssputs_r+0x8a>

0800b15c <_svfiprintf_r>:
 800b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b160:	4698      	mov	r8, r3
 800b162:	898b      	ldrh	r3, [r1, #12]
 800b164:	061b      	lsls	r3, r3, #24
 800b166:	b09d      	sub	sp, #116	@ 0x74
 800b168:	4607      	mov	r7, r0
 800b16a:	460d      	mov	r5, r1
 800b16c:	4614      	mov	r4, r2
 800b16e:	d510      	bpl.n	800b192 <_svfiprintf_r+0x36>
 800b170:	690b      	ldr	r3, [r1, #16]
 800b172:	b973      	cbnz	r3, 800b192 <_svfiprintf_r+0x36>
 800b174:	2140      	movs	r1, #64	@ 0x40
 800b176:	f7ff f9bd 	bl	800a4f4 <_malloc_r>
 800b17a:	6028      	str	r0, [r5, #0]
 800b17c:	6128      	str	r0, [r5, #16]
 800b17e:	b930      	cbnz	r0, 800b18e <_svfiprintf_r+0x32>
 800b180:	230c      	movs	r3, #12
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	b01d      	add	sp, #116	@ 0x74
 800b18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18e:	2340      	movs	r3, #64	@ 0x40
 800b190:	616b      	str	r3, [r5, #20]
 800b192:	2300      	movs	r3, #0
 800b194:	9309      	str	r3, [sp, #36]	@ 0x24
 800b196:	2320      	movs	r3, #32
 800b198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1a0:	2330      	movs	r3, #48	@ 0x30
 800b1a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b340 <_svfiprintf_r+0x1e4>
 800b1a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1aa:	f04f 0901 	mov.w	r9, #1
 800b1ae:	4623      	mov	r3, r4
 800b1b0:	469a      	mov	sl, r3
 800b1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1b6:	b10a      	cbz	r2, 800b1bc <_svfiprintf_r+0x60>
 800b1b8:	2a25      	cmp	r2, #37	@ 0x25
 800b1ba:	d1f9      	bne.n	800b1b0 <_svfiprintf_r+0x54>
 800b1bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b1c0:	d00b      	beq.n	800b1da <_svfiprintf_r+0x7e>
 800b1c2:	465b      	mov	r3, fp
 800b1c4:	4622      	mov	r2, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7ff ff6c 	bl	800b0a6 <__ssputs_r>
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	f000 80a7 	beq.w	800b322 <_svfiprintf_r+0x1c6>
 800b1d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1d6:	445a      	add	r2, fp
 800b1d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1da:	f89a 3000 	ldrb.w	r3, [sl]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 809f 	beq.w	800b322 <_svfiprintf_r+0x1c6>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1ee:	f10a 0a01 	add.w	sl, sl, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	9307      	str	r3, [sp, #28]
 800b1f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1fc:	4654      	mov	r4, sl
 800b1fe:	2205      	movs	r2, #5
 800b200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b204:	484e      	ldr	r0, [pc, #312]	@ (800b340 <_svfiprintf_r+0x1e4>)
 800b206:	f7f4 ffe3 	bl	80001d0 <memchr>
 800b20a:	9a04      	ldr	r2, [sp, #16]
 800b20c:	b9d8      	cbnz	r0, 800b246 <_svfiprintf_r+0xea>
 800b20e:	06d0      	lsls	r0, r2, #27
 800b210:	bf44      	itt	mi
 800b212:	2320      	movmi	r3, #32
 800b214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b218:	0711      	lsls	r1, r2, #28
 800b21a:	bf44      	itt	mi
 800b21c:	232b      	movmi	r3, #43	@ 0x2b
 800b21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b222:	f89a 3000 	ldrb.w	r3, [sl]
 800b226:	2b2a      	cmp	r3, #42	@ 0x2a
 800b228:	d015      	beq.n	800b256 <_svfiprintf_r+0xfa>
 800b22a:	9a07      	ldr	r2, [sp, #28]
 800b22c:	4654      	mov	r4, sl
 800b22e:	2000      	movs	r0, #0
 800b230:	f04f 0c0a 	mov.w	ip, #10
 800b234:	4621      	mov	r1, r4
 800b236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b23a:	3b30      	subs	r3, #48	@ 0x30
 800b23c:	2b09      	cmp	r3, #9
 800b23e:	d94b      	bls.n	800b2d8 <_svfiprintf_r+0x17c>
 800b240:	b1b0      	cbz	r0, 800b270 <_svfiprintf_r+0x114>
 800b242:	9207      	str	r2, [sp, #28]
 800b244:	e014      	b.n	800b270 <_svfiprintf_r+0x114>
 800b246:	eba0 0308 	sub.w	r3, r0, r8
 800b24a:	fa09 f303 	lsl.w	r3, r9, r3
 800b24e:	4313      	orrs	r3, r2
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	46a2      	mov	sl, r4
 800b254:	e7d2      	b.n	800b1fc <_svfiprintf_r+0xa0>
 800b256:	9b03      	ldr	r3, [sp, #12]
 800b258:	1d19      	adds	r1, r3, #4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	9103      	str	r1, [sp, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfbb      	ittet	lt
 800b262:	425b      	neglt	r3, r3
 800b264:	f042 0202 	orrlt.w	r2, r2, #2
 800b268:	9307      	strge	r3, [sp, #28]
 800b26a:	9307      	strlt	r3, [sp, #28]
 800b26c:	bfb8      	it	lt
 800b26e:	9204      	strlt	r2, [sp, #16]
 800b270:	7823      	ldrb	r3, [r4, #0]
 800b272:	2b2e      	cmp	r3, #46	@ 0x2e
 800b274:	d10a      	bne.n	800b28c <_svfiprintf_r+0x130>
 800b276:	7863      	ldrb	r3, [r4, #1]
 800b278:	2b2a      	cmp	r3, #42	@ 0x2a
 800b27a:	d132      	bne.n	800b2e2 <_svfiprintf_r+0x186>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	1d1a      	adds	r2, r3, #4
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	9203      	str	r2, [sp, #12]
 800b284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b288:	3402      	adds	r4, #2
 800b28a:	9305      	str	r3, [sp, #20]
 800b28c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b350 <_svfiprintf_r+0x1f4>
 800b290:	7821      	ldrb	r1, [r4, #0]
 800b292:	2203      	movs	r2, #3
 800b294:	4650      	mov	r0, sl
 800b296:	f7f4 ff9b 	bl	80001d0 <memchr>
 800b29a:	b138      	cbz	r0, 800b2ac <_svfiprintf_r+0x150>
 800b29c:	9b04      	ldr	r3, [sp, #16]
 800b29e:	eba0 000a 	sub.w	r0, r0, sl
 800b2a2:	2240      	movs	r2, #64	@ 0x40
 800b2a4:	4082      	lsls	r2, r0
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	3401      	adds	r4, #1
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b0:	4824      	ldr	r0, [pc, #144]	@ (800b344 <_svfiprintf_r+0x1e8>)
 800b2b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2b6:	2206      	movs	r2, #6
 800b2b8:	f7f4 ff8a 	bl	80001d0 <memchr>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d036      	beq.n	800b32e <_svfiprintf_r+0x1d2>
 800b2c0:	4b21      	ldr	r3, [pc, #132]	@ (800b348 <_svfiprintf_r+0x1ec>)
 800b2c2:	bb1b      	cbnz	r3, 800b30c <_svfiprintf_r+0x1b0>
 800b2c4:	9b03      	ldr	r3, [sp, #12]
 800b2c6:	3307      	adds	r3, #7
 800b2c8:	f023 0307 	bic.w	r3, r3, #7
 800b2cc:	3308      	adds	r3, #8
 800b2ce:	9303      	str	r3, [sp, #12]
 800b2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2d2:	4433      	add	r3, r6
 800b2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2d6:	e76a      	b.n	800b1ae <_svfiprintf_r+0x52>
 800b2d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2dc:	460c      	mov	r4, r1
 800b2de:	2001      	movs	r0, #1
 800b2e0:	e7a8      	b.n	800b234 <_svfiprintf_r+0xd8>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	3401      	adds	r4, #1
 800b2e6:	9305      	str	r3, [sp, #20]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	f04f 0c0a 	mov.w	ip, #10
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2f4:	3a30      	subs	r2, #48	@ 0x30
 800b2f6:	2a09      	cmp	r2, #9
 800b2f8:	d903      	bls.n	800b302 <_svfiprintf_r+0x1a6>
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0c6      	beq.n	800b28c <_svfiprintf_r+0x130>
 800b2fe:	9105      	str	r1, [sp, #20]
 800b300:	e7c4      	b.n	800b28c <_svfiprintf_r+0x130>
 800b302:	fb0c 2101 	mla	r1, ip, r1, r2
 800b306:	4604      	mov	r4, r0
 800b308:	2301      	movs	r3, #1
 800b30a:	e7f0      	b.n	800b2ee <_svfiprintf_r+0x192>
 800b30c:	ab03      	add	r3, sp, #12
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	462a      	mov	r2, r5
 800b312:	4b0e      	ldr	r3, [pc, #56]	@ (800b34c <_svfiprintf_r+0x1f0>)
 800b314:	a904      	add	r1, sp, #16
 800b316:	4638      	mov	r0, r7
 800b318:	f7fc fd88 	bl	8007e2c <_printf_float>
 800b31c:	1c42      	adds	r2, r0, #1
 800b31e:	4606      	mov	r6, r0
 800b320:	d1d6      	bne.n	800b2d0 <_svfiprintf_r+0x174>
 800b322:	89ab      	ldrh	r3, [r5, #12]
 800b324:	065b      	lsls	r3, r3, #25
 800b326:	f53f af2d 	bmi.w	800b184 <_svfiprintf_r+0x28>
 800b32a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b32c:	e72c      	b.n	800b188 <_svfiprintf_r+0x2c>
 800b32e:	ab03      	add	r3, sp, #12
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	462a      	mov	r2, r5
 800b334:	4b05      	ldr	r3, [pc, #20]	@ (800b34c <_svfiprintf_r+0x1f0>)
 800b336:	a904      	add	r1, sp, #16
 800b338:	4638      	mov	r0, r7
 800b33a:	f7fd f80f 	bl	800835c <_printf_i>
 800b33e:	e7ed      	b.n	800b31c <_svfiprintf_r+0x1c0>
 800b340:	0800c039 	.word	0x0800c039
 800b344:	0800c043 	.word	0x0800c043
 800b348:	08007e2d 	.word	0x08007e2d
 800b34c:	0800b0a7 	.word	0x0800b0a7
 800b350:	0800c03f 	.word	0x0800c03f

0800b354 <__sfputc_r>:
 800b354:	6893      	ldr	r3, [r2, #8]
 800b356:	3b01      	subs	r3, #1
 800b358:	2b00      	cmp	r3, #0
 800b35a:	b410      	push	{r4}
 800b35c:	6093      	str	r3, [r2, #8]
 800b35e:	da08      	bge.n	800b372 <__sfputc_r+0x1e>
 800b360:	6994      	ldr	r4, [r2, #24]
 800b362:	42a3      	cmp	r3, r4
 800b364:	db01      	blt.n	800b36a <__sfputc_r+0x16>
 800b366:	290a      	cmp	r1, #10
 800b368:	d103      	bne.n	800b372 <__sfputc_r+0x1e>
 800b36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b36e:	f7fd bcf2 	b.w	8008d56 <__swbuf_r>
 800b372:	6813      	ldr	r3, [r2, #0]
 800b374:	1c58      	adds	r0, r3, #1
 800b376:	6010      	str	r0, [r2, #0]
 800b378:	7019      	strb	r1, [r3, #0]
 800b37a:	4608      	mov	r0, r1
 800b37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <__sfputs_r>:
 800b382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b384:	4606      	mov	r6, r0
 800b386:	460f      	mov	r7, r1
 800b388:	4614      	mov	r4, r2
 800b38a:	18d5      	adds	r5, r2, r3
 800b38c:	42ac      	cmp	r4, r5
 800b38e:	d101      	bne.n	800b394 <__sfputs_r+0x12>
 800b390:	2000      	movs	r0, #0
 800b392:	e007      	b.n	800b3a4 <__sfputs_r+0x22>
 800b394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b398:	463a      	mov	r2, r7
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ffda 	bl	800b354 <__sfputc_r>
 800b3a0:	1c43      	adds	r3, r0, #1
 800b3a2:	d1f3      	bne.n	800b38c <__sfputs_r+0xa>
 800b3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3a8 <_vfiprintf_r>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	b09d      	sub	sp, #116	@ 0x74
 800b3b0:	4614      	mov	r4, r2
 800b3b2:	4698      	mov	r8, r3
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	b118      	cbz	r0, 800b3c0 <_vfiprintf_r+0x18>
 800b3b8:	6a03      	ldr	r3, [r0, #32]
 800b3ba:	b90b      	cbnz	r3, 800b3c0 <_vfiprintf_r+0x18>
 800b3bc:	f7fd fb8e 	bl	8008adc <__sinit>
 800b3c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3c2:	07d9      	lsls	r1, r3, #31
 800b3c4:	d405      	bmi.n	800b3d2 <_vfiprintf_r+0x2a>
 800b3c6:	89ab      	ldrh	r3, [r5, #12]
 800b3c8:	059a      	lsls	r2, r3, #22
 800b3ca:	d402      	bmi.n	800b3d2 <_vfiprintf_r+0x2a>
 800b3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ce:	f7fd fe58 	bl	8009082 <__retarget_lock_acquire_recursive>
 800b3d2:	89ab      	ldrh	r3, [r5, #12]
 800b3d4:	071b      	lsls	r3, r3, #28
 800b3d6:	d501      	bpl.n	800b3dc <_vfiprintf_r+0x34>
 800b3d8:	692b      	ldr	r3, [r5, #16]
 800b3da:	b99b      	cbnz	r3, 800b404 <_vfiprintf_r+0x5c>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7fd fcf8 	bl	8008dd4 <__swsetup_r>
 800b3e4:	b170      	cbz	r0, 800b404 <_vfiprintf_r+0x5c>
 800b3e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3e8:	07dc      	lsls	r4, r3, #31
 800b3ea:	d504      	bpl.n	800b3f6 <_vfiprintf_r+0x4e>
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	b01d      	add	sp, #116	@ 0x74
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	0598      	lsls	r0, r3, #22
 800b3fa:	d4f7      	bmi.n	800b3ec <_vfiprintf_r+0x44>
 800b3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3fe:	f7fd fe41 	bl	8009084 <__retarget_lock_release_recursive>
 800b402:	e7f3      	b.n	800b3ec <_vfiprintf_r+0x44>
 800b404:	2300      	movs	r3, #0
 800b406:	9309      	str	r3, [sp, #36]	@ 0x24
 800b408:	2320      	movs	r3, #32
 800b40a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b40e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b412:	2330      	movs	r3, #48	@ 0x30
 800b414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5c4 <_vfiprintf_r+0x21c>
 800b418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b41c:	f04f 0901 	mov.w	r9, #1
 800b420:	4623      	mov	r3, r4
 800b422:	469a      	mov	sl, r3
 800b424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b428:	b10a      	cbz	r2, 800b42e <_vfiprintf_r+0x86>
 800b42a:	2a25      	cmp	r2, #37	@ 0x25
 800b42c:	d1f9      	bne.n	800b422 <_vfiprintf_r+0x7a>
 800b42e:	ebba 0b04 	subs.w	fp, sl, r4
 800b432:	d00b      	beq.n	800b44c <_vfiprintf_r+0xa4>
 800b434:	465b      	mov	r3, fp
 800b436:	4622      	mov	r2, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7ff ffa1 	bl	800b382 <__sfputs_r>
 800b440:	3001      	adds	r0, #1
 800b442:	f000 80a7 	beq.w	800b594 <_vfiprintf_r+0x1ec>
 800b446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b448:	445a      	add	r2, fp
 800b44a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b44c:	f89a 3000 	ldrb.w	r3, [sl]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 809f 	beq.w	800b594 <_vfiprintf_r+0x1ec>
 800b456:	2300      	movs	r3, #0
 800b458:	f04f 32ff 	mov.w	r2, #4294967295
 800b45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b460:	f10a 0a01 	add.w	sl, sl, #1
 800b464:	9304      	str	r3, [sp, #16]
 800b466:	9307      	str	r3, [sp, #28]
 800b468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b46c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b46e:	4654      	mov	r4, sl
 800b470:	2205      	movs	r2, #5
 800b472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b476:	4853      	ldr	r0, [pc, #332]	@ (800b5c4 <_vfiprintf_r+0x21c>)
 800b478:	f7f4 feaa 	bl	80001d0 <memchr>
 800b47c:	9a04      	ldr	r2, [sp, #16]
 800b47e:	b9d8      	cbnz	r0, 800b4b8 <_vfiprintf_r+0x110>
 800b480:	06d1      	lsls	r1, r2, #27
 800b482:	bf44      	itt	mi
 800b484:	2320      	movmi	r3, #32
 800b486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b48a:	0713      	lsls	r3, r2, #28
 800b48c:	bf44      	itt	mi
 800b48e:	232b      	movmi	r3, #43	@ 0x2b
 800b490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b494:	f89a 3000 	ldrb.w	r3, [sl]
 800b498:	2b2a      	cmp	r3, #42	@ 0x2a
 800b49a:	d015      	beq.n	800b4c8 <_vfiprintf_r+0x120>
 800b49c:	9a07      	ldr	r2, [sp, #28]
 800b49e:	4654      	mov	r4, sl
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	f04f 0c0a 	mov.w	ip, #10
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ac:	3b30      	subs	r3, #48	@ 0x30
 800b4ae:	2b09      	cmp	r3, #9
 800b4b0:	d94b      	bls.n	800b54a <_vfiprintf_r+0x1a2>
 800b4b2:	b1b0      	cbz	r0, 800b4e2 <_vfiprintf_r+0x13a>
 800b4b4:	9207      	str	r2, [sp, #28]
 800b4b6:	e014      	b.n	800b4e2 <_vfiprintf_r+0x13a>
 800b4b8:	eba0 0308 	sub.w	r3, r0, r8
 800b4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	9304      	str	r3, [sp, #16]
 800b4c4:	46a2      	mov	sl, r4
 800b4c6:	e7d2      	b.n	800b46e <_vfiprintf_r+0xc6>
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	1d19      	adds	r1, r3, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	9103      	str	r1, [sp, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	bfbb      	ittet	lt
 800b4d4:	425b      	neglt	r3, r3
 800b4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b4da:	9307      	strge	r3, [sp, #28]
 800b4dc:	9307      	strlt	r3, [sp, #28]
 800b4de:	bfb8      	it	lt
 800b4e0:	9204      	strlt	r2, [sp, #16]
 800b4e2:	7823      	ldrb	r3, [r4, #0]
 800b4e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4e6:	d10a      	bne.n	800b4fe <_vfiprintf_r+0x156>
 800b4e8:	7863      	ldrb	r3, [r4, #1]
 800b4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ec:	d132      	bne.n	800b554 <_vfiprintf_r+0x1ac>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	1d1a      	adds	r2, r3, #4
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	9203      	str	r2, [sp, #12]
 800b4f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4fa:	3402      	adds	r4, #2
 800b4fc:	9305      	str	r3, [sp, #20]
 800b4fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5d4 <_vfiprintf_r+0x22c>
 800b502:	7821      	ldrb	r1, [r4, #0]
 800b504:	2203      	movs	r2, #3
 800b506:	4650      	mov	r0, sl
 800b508:	f7f4 fe62 	bl	80001d0 <memchr>
 800b50c:	b138      	cbz	r0, 800b51e <_vfiprintf_r+0x176>
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	eba0 000a 	sub.w	r0, r0, sl
 800b514:	2240      	movs	r2, #64	@ 0x40
 800b516:	4082      	lsls	r2, r0
 800b518:	4313      	orrs	r3, r2
 800b51a:	3401      	adds	r4, #1
 800b51c:	9304      	str	r3, [sp, #16]
 800b51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b522:	4829      	ldr	r0, [pc, #164]	@ (800b5c8 <_vfiprintf_r+0x220>)
 800b524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b528:	2206      	movs	r2, #6
 800b52a:	f7f4 fe51 	bl	80001d0 <memchr>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d03f      	beq.n	800b5b2 <_vfiprintf_r+0x20a>
 800b532:	4b26      	ldr	r3, [pc, #152]	@ (800b5cc <_vfiprintf_r+0x224>)
 800b534:	bb1b      	cbnz	r3, 800b57e <_vfiprintf_r+0x1d6>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	3307      	adds	r3, #7
 800b53a:	f023 0307 	bic.w	r3, r3, #7
 800b53e:	3308      	adds	r3, #8
 800b540:	9303      	str	r3, [sp, #12]
 800b542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b544:	443b      	add	r3, r7
 800b546:	9309      	str	r3, [sp, #36]	@ 0x24
 800b548:	e76a      	b.n	800b420 <_vfiprintf_r+0x78>
 800b54a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b54e:	460c      	mov	r4, r1
 800b550:	2001      	movs	r0, #1
 800b552:	e7a8      	b.n	800b4a6 <_vfiprintf_r+0xfe>
 800b554:	2300      	movs	r3, #0
 800b556:	3401      	adds	r4, #1
 800b558:	9305      	str	r3, [sp, #20]
 800b55a:	4619      	mov	r1, r3
 800b55c:	f04f 0c0a 	mov.w	ip, #10
 800b560:	4620      	mov	r0, r4
 800b562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b566:	3a30      	subs	r2, #48	@ 0x30
 800b568:	2a09      	cmp	r2, #9
 800b56a:	d903      	bls.n	800b574 <_vfiprintf_r+0x1cc>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0c6      	beq.n	800b4fe <_vfiprintf_r+0x156>
 800b570:	9105      	str	r1, [sp, #20]
 800b572:	e7c4      	b.n	800b4fe <_vfiprintf_r+0x156>
 800b574:	fb0c 2101 	mla	r1, ip, r1, r2
 800b578:	4604      	mov	r4, r0
 800b57a:	2301      	movs	r3, #1
 800b57c:	e7f0      	b.n	800b560 <_vfiprintf_r+0x1b8>
 800b57e:	ab03      	add	r3, sp, #12
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	462a      	mov	r2, r5
 800b584:	4b12      	ldr	r3, [pc, #72]	@ (800b5d0 <_vfiprintf_r+0x228>)
 800b586:	a904      	add	r1, sp, #16
 800b588:	4630      	mov	r0, r6
 800b58a:	f7fc fc4f 	bl	8007e2c <_printf_float>
 800b58e:	4607      	mov	r7, r0
 800b590:	1c78      	adds	r0, r7, #1
 800b592:	d1d6      	bne.n	800b542 <_vfiprintf_r+0x19a>
 800b594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b596:	07d9      	lsls	r1, r3, #31
 800b598:	d405      	bmi.n	800b5a6 <_vfiprintf_r+0x1fe>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	059a      	lsls	r2, r3, #22
 800b59e:	d402      	bmi.n	800b5a6 <_vfiprintf_r+0x1fe>
 800b5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5a2:	f7fd fd6f 	bl	8009084 <__retarget_lock_release_recursive>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	065b      	lsls	r3, r3, #25
 800b5aa:	f53f af1f 	bmi.w	800b3ec <_vfiprintf_r+0x44>
 800b5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5b0:	e71e      	b.n	800b3f0 <_vfiprintf_r+0x48>
 800b5b2:	ab03      	add	r3, sp, #12
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	462a      	mov	r2, r5
 800b5b8:	4b05      	ldr	r3, [pc, #20]	@ (800b5d0 <_vfiprintf_r+0x228>)
 800b5ba:	a904      	add	r1, sp, #16
 800b5bc:	4630      	mov	r0, r6
 800b5be:	f7fc fecd 	bl	800835c <_printf_i>
 800b5c2:	e7e4      	b.n	800b58e <_vfiprintf_r+0x1e6>
 800b5c4:	0800c039 	.word	0x0800c039
 800b5c8:	0800c043 	.word	0x0800c043
 800b5cc:	08007e2d 	.word	0x08007e2d
 800b5d0:	0800b383 	.word	0x0800b383
 800b5d4:	0800c03f 	.word	0x0800c03f

0800b5d8 <__sflush_r>:
 800b5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e0:	0716      	lsls	r6, r2, #28
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	d454      	bmi.n	800b692 <__sflush_r+0xba>
 800b5e8:	684b      	ldr	r3, [r1, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	dc02      	bgt.n	800b5f4 <__sflush_r+0x1c>
 800b5ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dd48      	ble.n	800b686 <__sflush_r+0xae>
 800b5f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5f6:	2e00      	cmp	r6, #0
 800b5f8:	d045      	beq.n	800b686 <__sflush_r+0xae>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b600:	682f      	ldr	r7, [r5, #0]
 800b602:	6a21      	ldr	r1, [r4, #32]
 800b604:	602b      	str	r3, [r5, #0]
 800b606:	d030      	beq.n	800b66a <__sflush_r+0x92>
 800b608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	0759      	lsls	r1, r3, #29
 800b60e:	d505      	bpl.n	800b61c <__sflush_r+0x44>
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	1ad2      	subs	r2, r2, r3
 800b614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b616:	b10b      	cbz	r3, 800b61c <__sflush_r+0x44>
 800b618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b61a:	1ad2      	subs	r2, r2, r3
 800b61c:	2300      	movs	r3, #0
 800b61e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b620:	6a21      	ldr	r1, [r4, #32]
 800b622:	4628      	mov	r0, r5
 800b624:	47b0      	blx	r6
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	d106      	bne.n	800b63a <__sflush_r+0x62>
 800b62c:	6829      	ldr	r1, [r5, #0]
 800b62e:	291d      	cmp	r1, #29
 800b630:	d82b      	bhi.n	800b68a <__sflush_r+0xb2>
 800b632:	4a2a      	ldr	r2, [pc, #168]	@ (800b6dc <__sflush_r+0x104>)
 800b634:	410a      	asrs	r2, r1
 800b636:	07d6      	lsls	r6, r2, #31
 800b638:	d427      	bmi.n	800b68a <__sflush_r+0xb2>
 800b63a:	2200      	movs	r2, #0
 800b63c:	6062      	str	r2, [r4, #4]
 800b63e:	04d9      	lsls	r1, r3, #19
 800b640:	6922      	ldr	r2, [r4, #16]
 800b642:	6022      	str	r2, [r4, #0]
 800b644:	d504      	bpl.n	800b650 <__sflush_r+0x78>
 800b646:	1c42      	adds	r2, r0, #1
 800b648:	d101      	bne.n	800b64e <__sflush_r+0x76>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b903      	cbnz	r3, 800b650 <__sflush_r+0x78>
 800b64e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b652:	602f      	str	r7, [r5, #0]
 800b654:	b1b9      	cbz	r1, 800b686 <__sflush_r+0xae>
 800b656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b65a:	4299      	cmp	r1, r3
 800b65c:	d002      	beq.n	800b664 <__sflush_r+0x8c>
 800b65e:	4628      	mov	r0, r5
 800b660:	f7fe fb9a 	bl	8009d98 <_free_r>
 800b664:	2300      	movs	r3, #0
 800b666:	6363      	str	r3, [r4, #52]	@ 0x34
 800b668:	e00d      	b.n	800b686 <__sflush_r+0xae>
 800b66a:	2301      	movs	r3, #1
 800b66c:	4628      	mov	r0, r5
 800b66e:	47b0      	blx	r6
 800b670:	4602      	mov	r2, r0
 800b672:	1c50      	adds	r0, r2, #1
 800b674:	d1c9      	bne.n	800b60a <__sflush_r+0x32>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d0c6      	beq.n	800b60a <__sflush_r+0x32>
 800b67c:	2b1d      	cmp	r3, #29
 800b67e:	d001      	beq.n	800b684 <__sflush_r+0xac>
 800b680:	2b16      	cmp	r3, #22
 800b682:	d11e      	bne.n	800b6c2 <__sflush_r+0xea>
 800b684:	602f      	str	r7, [r5, #0]
 800b686:	2000      	movs	r0, #0
 800b688:	e022      	b.n	800b6d0 <__sflush_r+0xf8>
 800b68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b68e:	b21b      	sxth	r3, r3
 800b690:	e01b      	b.n	800b6ca <__sflush_r+0xf2>
 800b692:	690f      	ldr	r7, [r1, #16]
 800b694:	2f00      	cmp	r7, #0
 800b696:	d0f6      	beq.n	800b686 <__sflush_r+0xae>
 800b698:	0793      	lsls	r3, r2, #30
 800b69a:	680e      	ldr	r6, [r1, #0]
 800b69c:	bf08      	it	eq
 800b69e:	694b      	ldreq	r3, [r1, #20]
 800b6a0:	600f      	str	r7, [r1, #0]
 800b6a2:	bf18      	it	ne
 800b6a4:	2300      	movne	r3, #0
 800b6a6:	eba6 0807 	sub.w	r8, r6, r7
 800b6aa:	608b      	str	r3, [r1, #8]
 800b6ac:	f1b8 0f00 	cmp.w	r8, #0
 800b6b0:	dde9      	ble.n	800b686 <__sflush_r+0xae>
 800b6b2:	6a21      	ldr	r1, [r4, #32]
 800b6b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6b6:	4643      	mov	r3, r8
 800b6b8:	463a      	mov	r2, r7
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	47b0      	blx	r6
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	dc08      	bgt.n	800b6d4 <__sflush_r+0xfc>
 800b6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ca:	81a3      	strh	r3, [r4, #12]
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d4:	4407      	add	r7, r0
 800b6d6:	eba8 0800 	sub.w	r8, r8, r0
 800b6da:	e7e7      	b.n	800b6ac <__sflush_r+0xd4>
 800b6dc:	dfbffffe 	.word	0xdfbffffe

0800b6e0 <_fflush_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	690b      	ldr	r3, [r1, #16]
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	b913      	cbnz	r3, 800b6f0 <_fflush_r+0x10>
 800b6ea:	2500      	movs	r5, #0
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	b118      	cbz	r0, 800b6fa <_fflush_r+0x1a>
 800b6f2:	6a03      	ldr	r3, [r0, #32]
 800b6f4:	b90b      	cbnz	r3, 800b6fa <_fflush_r+0x1a>
 800b6f6:	f7fd f9f1 	bl	8008adc <__sinit>
 800b6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0f3      	beq.n	800b6ea <_fflush_r+0xa>
 800b702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b704:	07d0      	lsls	r0, r2, #31
 800b706:	d404      	bmi.n	800b712 <_fflush_r+0x32>
 800b708:	0599      	lsls	r1, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_fflush_r+0x32>
 800b70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b70e:	f7fd fcb8 	bl	8009082 <__retarget_lock_acquire_recursive>
 800b712:	4628      	mov	r0, r5
 800b714:	4621      	mov	r1, r4
 800b716:	f7ff ff5f 	bl	800b5d8 <__sflush_r>
 800b71a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b71c:	07da      	lsls	r2, r3, #31
 800b71e:	4605      	mov	r5, r0
 800b720:	d4e4      	bmi.n	800b6ec <_fflush_r+0xc>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	059b      	lsls	r3, r3, #22
 800b726:	d4e1      	bmi.n	800b6ec <_fflush_r+0xc>
 800b728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b72a:	f7fd fcab 	bl	8009084 <__retarget_lock_release_recursive>
 800b72e:	e7dd      	b.n	800b6ec <_fflush_r+0xc>

0800b730 <fiprintf>:
 800b730:	b40e      	push	{r1, r2, r3}
 800b732:	b503      	push	{r0, r1, lr}
 800b734:	4601      	mov	r1, r0
 800b736:	ab03      	add	r3, sp, #12
 800b738:	4805      	ldr	r0, [pc, #20]	@ (800b750 <fiprintf+0x20>)
 800b73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	9301      	str	r3, [sp, #4]
 800b742:	f7ff fe31 	bl	800b3a8 <_vfiprintf_r>
 800b746:	b002      	add	sp, #8
 800b748:	f85d eb04 	ldr.w	lr, [sp], #4
 800b74c:	b003      	add	sp, #12
 800b74e:	4770      	bx	lr
 800b750:	20000204 	.word	0x20000204

0800b754 <__swhatbuf_r>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	460c      	mov	r4, r1
 800b758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75c:	2900      	cmp	r1, #0
 800b75e:	b096      	sub	sp, #88	@ 0x58
 800b760:	4615      	mov	r5, r2
 800b762:	461e      	mov	r6, r3
 800b764:	da0d      	bge.n	800b782 <__swhatbuf_r+0x2e>
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b76c:	f04f 0100 	mov.w	r1, #0
 800b770:	bf14      	ite	ne
 800b772:	2340      	movne	r3, #64	@ 0x40
 800b774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b778:	2000      	movs	r0, #0
 800b77a:	6031      	str	r1, [r6, #0]
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	b016      	add	sp, #88	@ 0x58
 800b780:	bd70      	pop	{r4, r5, r6, pc}
 800b782:	466a      	mov	r2, sp
 800b784:	f000 f862 	bl	800b84c <_fstat_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	dbec      	blt.n	800b766 <__swhatbuf_r+0x12>
 800b78c:	9901      	ldr	r1, [sp, #4]
 800b78e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b796:	4259      	negs	r1, r3
 800b798:	4159      	adcs	r1, r3
 800b79a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b79e:	e7eb      	b.n	800b778 <__swhatbuf_r+0x24>

0800b7a0 <__smakebuf_r>:
 800b7a0:	898b      	ldrh	r3, [r1, #12]
 800b7a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7a4:	079d      	lsls	r5, r3, #30
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	d507      	bpl.n	800b7bc <__smakebuf_r+0x1c>
 800b7ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	6123      	str	r3, [r4, #16]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	6163      	str	r3, [r4, #20]
 800b7b8:	b003      	add	sp, #12
 800b7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7bc:	ab01      	add	r3, sp, #4
 800b7be:	466a      	mov	r2, sp
 800b7c0:	f7ff ffc8 	bl	800b754 <__swhatbuf_r>
 800b7c4:	9f00      	ldr	r7, [sp, #0]
 800b7c6:	4605      	mov	r5, r0
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7fe fe92 	bl	800a4f4 <_malloc_r>
 800b7d0:	b948      	cbnz	r0, 800b7e6 <__smakebuf_r+0x46>
 800b7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d6:	059a      	lsls	r2, r3, #22
 800b7d8:	d4ee      	bmi.n	800b7b8 <__smakebuf_r+0x18>
 800b7da:	f023 0303 	bic.w	r3, r3, #3
 800b7de:	f043 0302 	orr.w	r3, r3, #2
 800b7e2:	81a3      	strh	r3, [r4, #12]
 800b7e4:	e7e2      	b.n	800b7ac <__smakebuf_r+0xc>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	6020      	str	r0, [r4, #0]
 800b7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ee:	81a3      	strh	r3, [r4, #12]
 800b7f0:	9b01      	ldr	r3, [sp, #4]
 800b7f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7f6:	b15b      	cbz	r3, 800b810 <__smakebuf_r+0x70>
 800b7f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f000 f837 	bl	800b870 <_isatty_r>
 800b802:	b128      	cbz	r0, 800b810 <__smakebuf_r+0x70>
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f023 0303 	bic.w	r3, r3, #3
 800b80a:	f043 0301 	orr.w	r3, r3, #1
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	431d      	orrs	r5, r3
 800b814:	81a5      	strh	r5, [r4, #12]
 800b816:	e7cf      	b.n	800b7b8 <__smakebuf_r+0x18>

0800b818 <memmove>:
 800b818:	4288      	cmp	r0, r1
 800b81a:	b510      	push	{r4, lr}
 800b81c:	eb01 0402 	add.w	r4, r1, r2
 800b820:	d902      	bls.n	800b828 <memmove+0x10>
 800b822:	4284      	cmp	r4, r0
 800b824:	4623      	mov	r3, r4
 800b826:	d807      	bhi.n	800b838 <memmove+0x20>
 800b828:	1e43      	subs	r3, r0, #1
 800b82a:	42a1      	cmp	r1, r4
 800b82c:	d008      	beq.n	800b840 <memmove+0x28>
 800b82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b836:	e7f8      	b.n	800b82a <memmove+0x12>
 800b838:	4402      	add	r2, r0
 800b83a:	4601      	mov	r1, r0
 800b83c:	428a      	cmp	r2, r1
 800b83e:	d100      	bne.n	800b842 <memmove+0x2a>
 800b840:	bd10      	pop	{r4, pc}
 800b842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b84a:	e7f7      	b.n	800b83c <memmove+0x24>

0800b84c <_fstat_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d07      	ldr	r5, [pc, #28]	@ (800b86c <_fstat_r+0x20>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	4611      	mov	r1, r2
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	f7f8 ffba 	bl	80047d2 <_fstat>
 800b85e:	1c43      	adds	r3, r0, #1
 800b860:	d102      	bne.n	800b868 <_fstat_r+0x1c>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	b103      	cbz	r3, 800b868 <_fstat_r+0x1c>
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	bd38      	pop	{r3, r4, r5, pc}
 800b86a:	bf00      	nop
 800b86c:	200007a8 	.word	0x200007a8

0800b870 <_isatty_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d06      	ldr	r5, [pc, #24]	@ (800b88c <_isatty_r+0x1c>)
 800b874:	2300      	movs	r3, #0
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	f7f8 ffb9 	bl	80047f2 <_isatty>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_isatty_r+0x1a>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_isatty_r+0x1a>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	200007a8 	.word	0x200007a8

0800b890 <_sbrk_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d06      	ldr	r5, [pc, #24]	@ (800b8ac <_sbrk_r+0x1c>)
 800b894:	2300      	movs	r3, #0
 800b896:	4604      	mov	r4, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	602b      	str	r3, [r5, #0]
 800b89c:	f7f8 ffc2 	bl	8004824 <_sbrk>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_sbrk_r+0x1a>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_sbrk_r+0x1a>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	200007a8 	.word	0x200007a8

0800b8b0 <abort>:
 800b8b0:	b508      	push	{r3, lr}
 800b8b2:	2006      	movs	r0, #6
 800b8b4:	f000 f86e 	bl	800b994 <raise>
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	f7f8 ff56 	bl	800476a <_exit>

0800b8be <_calloc_r>:
 800b8be:	b570      	push	{r4, r5, r6, lr}
 800b8c0:	fba1 5402 	umull	r5, r4, r1, r2
 800b8c4:	b93c      	cbnz	r4, 800b8d6 <_calloc_r+0x18>
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7fe fe14 	bl	800a4f4 <_malloc_r>
 800b8cc:	4606      	mov	r6, r0
 800b8ce:	b928      	cbnz	r0, 800b8dc <_calloc_r+0x1e>
 800b8d0:	2600      	movs	r6, #0
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	bd70      	pop	{r4, r5, r6, pc}
 800b8d6:	220c      	movs	r2, #12
 800b8d8:	6002      	str	r2, [r0, #0]
 800b8da:	e7f9      	b.n	800b8d0 <_calloc_r+0x12>
 800b8dc:	462a      	mov	r2, r5
 800b8de:	4621      	mov	r1, r4
 800b8e0:	f7fd face 	bl	8008e80 <memset>
 800b8e4:	e7f5      	b.n	800b8d2 <_calloc_r+0x14>

0800b8e6 <_realloc_r>:
 800b8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ea:	4680      	mov	r8, r0
 800b8ec:	4615      	mov	r5, r2
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	b921      	cbnz	r1, 800b8fc <_realloc_r+0x16>
 800b8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	f7fe bdfc 	b.w	800a4f4 <_malloc_r>
 800b8fc:	b92a      	cbnz	r2, 800b90a <_realloc_r+0x24>
 800b8fe:	f7fe fa4b 	bl	8009d98 <_free_r>
 800b902:	2400      	movs	r4, #0
 800b904:	4620      	mov	r0, r4
 800b906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90a:	f000 f85f 	bl	800b9cc <_malloc_usable_size_r>
 800b90e:	4285      	cmp	r5, r0
 800b910:	4606      	mov	r6, r0
 800b912:	d802      	bhi.n	800b91a <_realloc_r+0x34>
 800b914:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b918:	d8f4      	bhi.n	800b904 <_realloc_r+0x1e>
 800b91a:	4629      	mov	r1, r5
 800b91c:	4640      	mov	r0, r8
 800b91e:	f7fe fde9 	bl	800a4f4 <_malloc_r>
 800b922:	4607      	mov	r7, r0
 800b924:	2800      	cmp	r0, #0
 800b926:	d0ec      	beq.n	800b902 <_realloc_r+0x1c>
 800b928:	42b5      	cmp	r5, r6
 800b92a:	462a      	mov	r2, r5
 800b92c:	4621      	mov	r1, r4
 800b92e:	bf28      	it	cs
 800b930:	4632      	movcs	r2, r6
 800b932:	f7fd fba8 	bl	8009086 <memcpy>
 800b936:	4621      	mov	r1, r4
 800b938:	4640      	mov	r0, r8
 800b93a:	f7fe fa2d 	bl	8009d98 <_free_r>
 800b93e:	463c      	mov	r4, r7
 800b940:	e7e0      	b.n	800b904 <_realloc_r+0x1e>

0800b942 <_raise_r>:
 800b942:	291f      	cmp	r1, #31
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4605      	mov	r5, r0
 800b948:	460c      	mov	r4, r1
 800b94a:	d904      	bls.n	800b956 <_raise_r+0x14>
 800b94c:	2316      	movs	r3, #22
 800b94e:	6003      	str	r3, [r0, #0]
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	bd38      	pop	{r3, r4, r5, pc}
 800b956:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b958:	b112      	cbz	r2, 800b960 <_raise_r+0x1e>
 800b95a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b95e:	b94b      	cbnz	r3, 800b974 <_raise_r+0x32>
 800b960:	4628      	mov	r0, r5
 800b962:	f000 f831 	bl	800b9c8 <_getpid_r>
 800b966:	4622      	mov	r2, r4
 800b968:	4601      	mov	r1, r0
 800b96a:	4628      	mov	r0, r5
 800b96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b970:	f000 b818 	b.w	800b9a4 <_kill_r>
 800b974:	2b01      	cmp	r3, #1
 800b976:	d00a      	beq.n	800b98e <_raise_r+0x4c>
 800b978:	1c59      	adds	r1, r3, #1
 800b97a:	d103      	bne.n	800b984 <_raise_r+0x42>
 800b97c:	2316      	movs	r3, #22
 800b97e:	6003      	str	r3, [r0, #0]
 800b980:	2001      	movs	r0, #1
 800b982:	e7e7      	b.n	800b954 <_raise_r+0x12>
 800b984:	2100      	movs	r1, #0
 800b986:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b98a:	4620      	mov	r0, r4
 800b98c:	4798      	blx	r3
 800b98e:	2000      	movs	r0, #0
 800b990:	e7e0      	b.n	800b954 <_raise_r+0x12>
	...

0800b994 <raise>:
 800b994:	4b02      	ldr	r3, [pc, #8]	@ (800b9a0 <raise+0xc>)
 800b996:	4601      	mov	r1, r0
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	f7ff bfd2 	b.w	800b942 <_raise_r>
 800b99e:	bf00      	nop
 800b9a0:	20000204 	.word	0x20000204

0800b9a4 <_kill_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d07      	ldr	r5, [pc, #28]	@ (800b9c4 <_kill_r+0x20>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	602b      	str	r3, [r5, #0]
 800b9b2:	f7f8 feca 	bl	800474a <_kill>
 800b9b6:	1c43      	adds	r3, r0, #1
 800b9b8:	d102      	bne.n	800b9c0 <_kill_r+0x1c>
 800b9ba:	682b      	ldr	r3, [r5, #0]
 800b9bc:	b103      	cbz	r3, 800b9c0 <_kill_r+0x1c>
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	bd38      	pop	{r3, r4, r5, pc}
 800b9c2:	bf00      	nop
 800b9c4:	200007a8 	.word	0x200007a8

0800b9c8 <_getpid_r>:
 800b9c8:	f7f8 beb7 	b.w	800473a <_getpid>

0800b9cc <_malloc_usable_size_r>:
 800b9cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d0:	1f18      	subs	r0, r3, #4
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	bfbc      	itt	lt
 800b9d6:	580b      	ldrlt	r3, [r1, r0]
 800b9d8:	18c0      	addlt	r0, r0, r3
 800b9da:	4770      	bx	lr

0800b9dc <fmax>:
 800b9dc:	b508      	push	{r3, lr}
 800b9de:	ed2d 8b04 	vpush	{d8-d9}
 800b9e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b9e6:	eef0 8a60 	vmov.f32	s17, s1
 800b9ea:	eeb0 9a41 	vmov.f32	s18, s2
 800b9ee:	eef0 9a61 	vmov.f32	s19, s3
 800b9f2:	f000 f847 	bl	800ba84 <__fpclassifyd>
 800b9f6:	b950      	cbnz	r0, 800ba0e <fmax+0x32>
 800b9f8:	eeb0 8a49 	vmov.f32	s16, s18
 800b9fc:	eef0 8a69 	vmov.f32	s17, s19
 800ba00:	eeb0 0a48 	vmov.f32	s0, s16
 800ba04:	eef0 0a68 	vmov.f32	s1, s17
 800ba08:	ecbd 8b04 	vpop	{d8-d9}
 800ba0c:	bd08      	pop	{r3, pc}
 800ba0e:	eeb0 0a49 	vmov.f32	s0, s18
 800ba12:	eef0 0a69 	vmov.f32	s1, s19
 800ba16:	f000 f835 	bl	800ba84 <__fpclassifyd>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d0f0      	beq.n	800ba00 <fmax+0x24>
 800ba1e:	ec53 2b19 	vmov	r2, r3, d9
 800ba22:	ec51 0b18 	vmov	r0, r1, d8
 800ba26:	f7f5 f877 	bl	8000b18 <__aeabi_dcmpgt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d0e4      	beq.n	800b9f8 <fmax+0x1c>
 800ba2e:	e7e7      	b.n	800ba00 <fmax+0x24>

0800ba30 <fmin>:
 800ba30:	b508      	push	{r3, lr}
 800ba32:	ed2d 8b04 	vpush	{d8-d9}
 800ba36:	eeb0 8a40 	vmov.f32	s16, s0
 800ba3a:	eef0 8a60 	vmov.f32	s17, s1
 800ba3e:	eeb0 9a41 	vmov.f32	s18, s2
 800ba42:	eef0 9a61 	vmov.f32	s19, s3
 800ba46:	f000 f81d 	bl	800ba84 <__fpclassifyd>
 800ba4a:	b950      	cbnz	r0, 800ba62 <fmin+0x32>
 800ba4c:	eeb0 8a49 	vmov.f32	s16, s18
 800ba50:	eef0 8a69 	vmov.f32	s17, s19
 800ba54:	eeb0 0a48 	vmov.f32	s0, s16
 800ba58:	eef0 0a68 	vmov.f32	s1, s17
 800ba5c:	ecbd 8b04 	vpop	{d8-d9}
 800ba60:	bd08      	pop	{r3, pc}
 800ba62:	eeb0 0a49 	vmov.f32	s0, s18
 800ba66:	eef0 0a69 	vmov.f32	s1, s19
 800ba6a:	f000 f80b 	bl	800ba84 <__fpclassifyd>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d0f0      	beq.n	800ba54 <fmin+0x24>
 800ba72:	ec53 2b19 	vmov	r2, r3, d9
 800ba76:	ec51 0b18 	vmov	r0, r1, d8
 800ba7a:	f7f5 f82f 	bl	8000adc <__aeabi_dcmplt>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d0e4      	beq.n	800ba4c <fmin+0x1c>
 800ba82:	e7e7      	b.n	800ba54 <fmin+0x24>

0800ba84 <__fpclassifyd>:
 800ba84:	ec51 0b10 	vmov	r0, r1, d0
 800ba88:	b510      	push	{r4, lr}
 800ba8a:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800ba8e:	460b      	mov	r3, r1
 800ba90:	d019      	beq.n	800bac6 <__fpclassifyd+0x42>
 800ba92:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800ba96:	490e      	ldr	r1, [pc, #56]	@ (800bad0 <__fpclassifyd+0x4c>)
 800ba98:	428a      	cmp	r2, r1
 800ba9a:	d90e      	bls.n	800baba <__fpclassifyd+0x36>
 800ba9c:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800baa0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800baa4:	428a      	cmp	r2, r1
 800baa6:	d908      	bls.n	800baba <__fpclassifyd+0x36>
 800baa8:	4a0a      	ldr	r2, [pc, #40]	@ (800bad4 <__fpclassifyd+0x50>)
 800baaa:	4213      	tst	r3, r2
 800baac:	d007      	beq.n	800babe <__fpclassifyd+0x3a>
 800baae:	4294      	cmp	r4, r2
 800bab0:	d107      	bne.n	800bac2 <__fpclassifyd+0x3e>
 800bab2:	fab0 f080 	clz	r0, r0
 800bab6:	0940      	lsrs	r0, r0, #5
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	2004      	movs	r0, #4
 800babc:	e7fc      	b.n	800bab8 <__fpclassifyd+0x34>
 800babe:	2003      	movs	r0, #3
 800bac0:	e7fa      	b.n	800bab8 <__fpclassifyd+0x34>
 800bac2:	2000      	movs	r0, #0
 800bac4:	e7f8      	b.n	800bab8 <__fpclassifyd+0x34>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d1ee      	bne.n	800baa8 <__fpclassifyd+0x24>
 800baca:	2002      	movs	r0, #2
 800bacc:	e7f4      	b.n	800bab8 <__fpclassifyd+0x34>
 800bace:	bf00      	nop
 800bad0:	7fdfffff 	.word	0x7fdfffff
 800bad4:	7ff00000 	.word	0x7ff00000

0800bad8 <_init>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr

0800bae4 <_fini>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr
