
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e888  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800ea18  0800ea18  0000fa18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f158  0800f158  00011268  2**0
                  CONTENTS
  4 .ARM          00000008  0800f158  0800f158  00010158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f160  0800f160  00011268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f160  0800f160  00010160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f164  0800f164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  0800f168  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011268  2**0
                  CONTENTS
 10 .bss          000006fc  20000268  20000268  00011268  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000964  20000964  00011268  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d26  00000000  00000000  00011298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241b  00000000  00000000  00022fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  000253e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d80  00000000  00000000  000264f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000307d  00000000  00000000  00027270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014170  00000000  00000000  0002a2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d087e  00000000  00000000  0003e45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010ecdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006364  00000000  00000000  0010ed20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00115084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea00 	.word	0x0800ea00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0800ea00 	.word	0x0800ea00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <BNO055_Init>:

// Quaternion components
float qx, qy, qz, qw;
float qx_filtered = 0.0, qy_filtered = 0.0, qz_filtered = 0.0, qw_filtered = 0.0;
const float q_alpha = 0.1; // Filter coefficient for quaternions
void BNO055_Init(I2C_HandleTypeDef *hi2c) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	6078      	str	r0, [r7, #4]
    uint8_t chip_id;
    HAL_I2C_Mem_Read(hi2c, BNO055_ADDRESS, BNO055_CHIP_ID, 1, &chip_id, 1, HAL_MAX_DELAY);
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	f107 030f 	add.w	r3, r7, #15
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2200      	movs	r2, #0
 8001000:	2150      	movs	r1, #80	@ 0x50
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f004 ffba 	bl	8005f7c <HAL_I2C_Mem_Read>
    if (chip_id != 0xA0) {
        // Handle error: BNO055 not found
    }

    // Set the operation mode to NDOF
    uint8_t mode = 0x0C; // NDOF mode
 8001008:	230c      	movs	r3, #12
 800100a:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(hi2c, BNO055_ADDRESS, BNO055_OPR_MODE, 1, &mode, 1, HAL_MAX_DELAY);
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030e 	add.w	r3, r7, #14
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	223d      	movs	r2, #61	@ 0x3d
 8001020:	2150      	movs	r1, #80	@ 0x50
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f004 feb0 	bl	8005d88 <HAL_I2C_Mem_Write>
    HAL_Delay(20); // Wait for the mode to change
 8001028:	2014      	movs	r0, #20
 800102a:	f004 fac3 	bl	80055b4 <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <BNO055_Read_Euler_Angles>:

void BNO055_Read_Euler_Angles(I2C_HandleTypeDef *hi2c, float *yaw, float *pitch, float *roll) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af04      	add	r7, sp, #16
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
    uint8_t data[6];
    HAL_I2C_Mem_Read(hi2c, BNO055_ADDRESS, BNO055_EULER_H, 1, data, 6, HAL_MAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	2306      	movs	r3, #6
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	221a      	movs	r2, #26
 800105a:	2150      	movs	r1, #80	@ 0x50
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f004 ff8d 	bl	8005f7c <HAL_I2C_Mem_Read>

    // Convert the data to float values
    *yaw = (float)((data[0] | (data[1] << 8)) / 16.0);
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	461a      	mov	r2, r3
 8001066:	7c7b      	ldrb	r3, [r7, #17]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	4313      	orrs	r3, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa59 	bl	8000524 <__aeabi_i2d>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <BNO055_Read_Euler_Angles+0xb8>)
 8001078:	f7ff fbe8 	bl	800084c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fdb0 	bl	8000be8 <__aeabi_d2f>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	601a      	str	r2, [r3, #0]
    *pitch = (float)((data[2] | (data[3] << 8)) / 16.0);
 800108e:	7cbb      	ldrb	r3, [r7, #18]
 8001090:	461a      	mov	r2, r3
 8001092:	7cfb      	ldrb	r3, [r7, #19]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	4313      	orrs	r3, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa43 	bl	8000524 <__aeabi_i2d>
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <BNO055_Read_Euler_Angles+0xb8>)
 80010a4:	f7ff fbd2 	bl	800084c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd9a 	bl	8000be8 <__aeabi_d2f>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
    *roll = (float)((data[4] | (data[5] << 8)) / 16.0);
 80010ba:	7d3b      	ldrb	r3, [r7, #20]
 80010bc:	461a      	mov	r2, r3
 80010be:	7d7b      	ldrb	r3, [r7, #21]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	4313      	orrs	r3, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <BNO055_Read_Euler_Angles+0xb8>)
 80010d0:	f7ff fbbc 	bl	800084c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd84 	bl	8000be8 <__aeabi_d2f>
 80010e0:	4602      	mov	r2, r0
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40300000 	.word	0x40300000
 80010f4:	00000000 	.word	0x00000000

080010f8 <calculateQuaternion>:

void calculateQuaternion(float yaw, float pitch, float roll) {
 80010f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010fc:	b088      	sub	sp, #32
 80010fe:	af00      	add	r7, sp, #0
 8001100:	ed87 0a03 	vstr	s0, [r7, #12]
 8001104:	edc7 0a02 	vstr	s1, [r7, #8]
 8001108:	ed87 1a01 	vstr	s2, [r7, #4]
    // Convert degrees to radians
    float yaw_rad = yaw * (M_PI / 180.0);
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	f20f 5334 	addw	r3, pc, #1332	@ 0x534
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	f7ff fa6d 	bl	80005f8 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd5f 	bl	8000be8 <__aeabi_d2f>
 800112a:	4603      	mov	r3, r0
 800112c:	61fb      	str	r3, [r7, #28]
    float pitch_rad = pitch * (M_PI / 180.0);
 800112e:	68b8      	ldr	r0, [r7, #8]
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_f2d>
 8001134:	f20f 5310 	addw	r3, pc, #1296	@ 0x510
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa5c 	bl	80005f8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd4e 	bl	8000be8 <__aeabi_d2f>
 800114c:	4603      	mov	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
    float roll_rad = roll * (M_PI / 180.0);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	f20f 43f0 	addw	r3, pc, #1264	@ 0x4f0
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa4b 	bl	80005f8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fd3d 	bl	8000be8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	617b      	str	r3, [r7, #20]

    // Calculate quaternion components
    qw = cos(yaw_rad / 2) * cos(pitch_rad / 2) * cos(roll_rad / 2) + sin(yaw_rad / 2) * sin(pitch_rad / 2) * sin(roll_rad / 2);
 8001172:	edd7 7a07 	vldr	s15, [r7, #28]
 8001176:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800117a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800117e:	ee16 0a90 	vmov	r0, s13
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f00c fa5b 	bl	800d648 <cos>
 8001192:	ec55 4b10 	vmov	r4, r5, d0
 8001196:	edd7 7a06 	vldr	s15, [r7, #24]
 800119a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800119e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a2:	ee16 0a90 	vmov	r0, s13
 80011a6:	f7ff f9cf 	bl	8000548 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	ec43 2b10 	vmov	d0, r2, r3
 80011b2:	f00c fa49 	bl	800d648 <cos>
 80011b6:	ec53 2b10 	vmov	r2, r3, d0
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff fa1b 	bl	80005f8 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4614      	mov	r4, r2
 80011c8:	461d      	mov	r5, r3
 80011ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80011d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011d6:	ee16 0a90 	vmov	r0, s13
 80011da:	f7ff f9b5 	bl	8000548 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	ec43 2b10 	vmov	d0, r2, r3
 80011e6:	f00c fa2f 	bl	800d648 <cos>
 80011ea:	ec53 2b10 	vmov	r2, r3, d0
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fa01 	bl	80005f8 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4614      	mov	r4, r2
 80011fc:	461d      	mov	r5, r3
 80011fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001202:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800120a:	ee16 0a90 	vmov	r0, s13
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b10 	vmov	d0, r2, r3
 800121a:	f00c fa69 	bl	800d6f0 <sin>
 800121e:	ec59 8b10 	vmov	r8, r9, d0
 8001222:	edd7 7a06 	vldr	s15, [r7, #24]
 8001226:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800122a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800122e:	ee16 0a90 	vmov	r0, s13
 8001232:	f7ff f989 	bl	8000548 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f00c fa57 	bl	800d6f0 <sin>
 8001242:	ec53 2b10 	vmov	r2, r3, d0
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9d5 	bl	80005f8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	edd7 7a05 	vldr	s15, [r7, #20]
 800125a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800125e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001262:	ee16 0a90 	vmov	r0, s13
 8001266:	f7ff f96f 	bl	8000548 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	ec43 2b10 	vmov	d0, r2, r3
 8001272:	f00c fa3d 	bl	800d6f0 <sin>
 8001276:	ec53 2b10 	vmov	r2, r3, d0
 800127a:	4640      	mov	r0, r8
 800127c:	4649      	mov	r1, r9
 800127e:	f7ff f9bb 	bl	80005f8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4620      	mov	r0, r4
 8001288:	4629      	mov	r1, r5
 800128a:	f7fe ffff 	bl	800028c <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fca7 	bl	8000be8 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4ae6      	ldr	r2, [pc, #920]	@ (8001638 <calculateQuaternion+0x540>)
 800129e:	6013      	str	r3, [r2, #0]
    qx = sin(yaw_rad / 2) * cos(pitch_rad / 2) * cos(roll_rad / 2) - cos(yaw_rad / 2) * sin(pitch_rad / 2) * sin(roll_rad / 2);
 80012a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ac:	ee16 0a90 	vmov	r0, s13
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b10 	vmov	d0, r2, r3
 80012bc:	f00c fa18 	bl	800d6f0 <sin>
 80012c0:	ec55 4b10 	vmov	r4, r5, d0
 80012c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80012cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012d0:	ee16 0a90 	vmov	r0, s13
 80012d4:	f7ff f938 	bl	8000548 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f00c f9b2 	bl	800d648 <cos>
 80012e4:	ec53 2b10 	vmov	r2, r3, d0
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f984 	bl	80005f8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fc:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001300:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001304:	ee16 0a90 	vmov	r0, s13
 8001308:	f7ff f91e 	bl	8000548 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	ec43 2b10 	vmov	d0, r2, r3
 8001314:	f00c f998 	bl	800d648 <cos>
 8001318:	ec53 2b10 	vmov	r2, r3, d0
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7ff f96a 	bl	80005f8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4614      	mov	r4, r2
 800132a:	461d      	mov	r5, r3
 800132c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001330:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001334:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001338:	ee16 0a90 	vmov	r0, s13
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b10 	vmov	d0, r2, r3
 8001348:	f00c f97e 	bl	800d648 <cos>
 800134c:	ec59 8b10 	vmov	r8, r9, d0
 8001350:	edd7 7a06 	vldr	s15, [r7, #24]
 8001354:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800135c:	ee16 0a90 	vmov	r0, s13
 8001360:	f7ff f8f2 	bl	8000548 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b10 	vmov	d0, r2, r3
 800136c:	f00c f9c0 	bl	800d6f0 <sin>
 8001370:	ec53 2b10 	vmov	r2, r3, d0
 8001374:	4640      	mov	r0, r8
 8001376:	4649      	mov	r1, r9
 8001378:	f7ff f93e 	bl	80005f8 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4690      	mov	r8, r2
 8001382:	4699      	mov	r9, r3
 8001384:	edd7 7a05 	vldr	s15, [r7, #20]
 8001388:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800138c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001390:	ee16 0a90 	vmov	r0, s13
 8001394:	f7ff f8d8 	bl	8000548 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ec43 2b10 	vmov	d0, r2, r3
 80013a0:	f00c f9a6 	bl	800d6f0 <sin>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4640      	mov	r0, r8
 80013aa:	4649      	mov	r1, r9
 80013ac:	f7ff f924 	bl	80005f8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ff66 	bl	8000288 <__aeabi_dsub>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fc10 	bl	8000be8 <__aeabi_d2f>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a9c      	ldr	r2, [pc, #624]	@ (800163c <calculateQuaternion+0x544>)
 80013cc:	6013      	str	r3, [r2, #0]
    qy = cos(yaw_rad / 2) * sin(pitch_rad / 2) * cos(roll_rad / 2) + sin(yaw_rad / 2) * cos(pitch_rad / 2) * sin(roll_rad / 2);
 80013ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80013d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013da:	ee16 0a90 	vmov	r0, s13
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ec43 2b10 	vmov	d0, r2, r3
 80013ea:	f00c f92d 	bl	800d648 <cos>
 80013ee:	ec55 4b10 	vmov	r4, r5, d0
 80013f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013fe:	ee16 0a90 	vmov	r0, s13
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	ec43 2b10 	vmov	d0, r2, r3
 800140e:	f00c f96f 	bl	800d6f0 <sin>
 8001412:	ec53 2b10 	vmov	r2, r3, d0
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	461d      	mov	r5, r3
 8001426:	edd7 7a05 	vldr	s15, [r7, #20]
 800142a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800142e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001432:	ee16 0a90 	vmov	r0, s13
 8001436:	f7ff f887 	bl	8000548 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b10 	vmov	d0, r2, r3
 8001442:	f00c f901 	bl	800d648 <cos>
 8001446:	ec53 2b10 	vmov	r2, r3, d0
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7ff f8d3 	bl	80005f8 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
 800145a:	edd7 7a07 	vldr	s15, [r7, #28]
 800145e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001462:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001466:	ee16 0a90 	vmov	r0, s13
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	ec43 2b10 	vmov	d0, r2, r3
 8001476:	f00c f93b 	bl	800d6f0 <sin>
 800147a:	ec59 8b10 	vmov	r8, r9, d0
 800147e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001482:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001486:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800148a:	ee16 0a90 	vmov	r0, s13
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	ec43 2b10 	vmov	d0, r2, r3
 800149a:	f00c f8d5 	bl	800d648 <cos>
 800149e:	ec53 2b10 	vmov	r2, r3, d0
 80014a2:	4640      	mov	r0, r8
 80014a4:	4649      	mov	r1, r9
 80014a6:	f7ff f8a7 	bl	80005f8 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4690      	mov	r8, r2
 80014b0:	4699      	mov	r9, r3
 80014b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014be:	ee16 0a90 	vmov	r0, s13
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	ec43 2b10 	vmov	d0, r2, r3
 80014ce:	f00c f90f 	bl	800d6f0 <sin>
 80014d2:	ec53 2b10 	vmov	r2, r3, d0
 80014d6:	4640      	mov	r0, r8
 80014d8:	4649      	mov	r1, r9
 80014da:	f7ff f88d 	bl	80005f8 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7fe fed1 	bl	800028c <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb79 	bl	8000be8 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <calculateQuaternion+0x548>)
 80014fa:	6013      	str	r3, [r2, #0]
    qz = cos(yaw_rad / 2) * cos(pitch_rad / 2) * sin(roll_rad / 2) - sin(yaw_rad / 2) * sin(pitch_rad / 2) * cos(roll_rad / 2);
 80014fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001500:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001504:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001508:	ee16 0a90 	vmov	r0, s13
 800150c:	f7ff f81c 	bl	8000548 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	ec43 2b10 	vmov	d0, r2, r3
 8001518:	f00c f896 	bl	800d648 <cos>
 800151c:	ec55 4b10 	vmov	r4, r5, d0
 8001520:	edd7 7a06 	vldr	s15, [r7, #24]
 8001524:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001528:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800152c:	ee16 0a90 	vmov	r0, s13
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b10 	vmov	d0, r2, r3
 800153c:	f00c f884 	bl	800d648 <cos>
 8001540:	ec53 2b10 	vmov	r2, r3, d0
 8001544:	4620      	mov	r0, r4
 8001546:	4629      	mov	r1, r5
 8001548:	f7ff f856 	bl	80005f8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4614      	mov	r4, r2
 8001552:	461d      	mov	r5, r3
 8001554:	edd7 7a05 	vldr	s15, [r7, #20]
 8001558:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800155c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001560:	ee16 0a90 	vmov	r0, s13
 8001564:	f7fe fff0 	bl	8000548 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b10 	vmov	d0, r2, r3
 8001570:	f00c f8be 	bl	800d6f0 <sin>
 8001574:	ec53 2b10 	vmov	r2, r3, d0
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7ff f83c 	bl	80005f8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
 8001588:	edd7 7a07 	vldr	s15, [r7, #28]
 800158c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001590:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001594:	ee16 0a90 	vmov	r0, s13
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	ec43 2b10 	vmov	d0, r2, r3
 80015a4:	f00c f8a4 	bl	800d6f0 <sin>
 80015a8:	ec59 8b10 	vmov	r8, r9, d0
 80015ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015b8:	ee16 0a90 	vmov	r0, s13
 80015bc:	f7fe ffc4 	bl	8000548 <__aeabi_f2d>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	ec43 2b10 	vmov	d0, r2, r3
 80015c8:	f00c f892 	bl	800d6f0 <sin>
 80015cc:	ec53 2b10 	vmov	r2, r3, d0
 80015d0:	4640      	mov	r0, r8
 80015d2:	4649      	mov	r1, r9
 80015d4:	f7ff f810 	bl	80005f8 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4690      	mov	r8, r2
 80015de:	4699      	mov	r9, r3
 80015e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ec:	ee16 0a90 	vmov	r0, s13
 80015f0:	f7fe ffaa 	bl	8000548 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	ec43 2b10 	vmov	d0, r2, r3
 80015fc:	f00c f824 	bl	800d648 <cos>
 8001600:	ec53 2b10 	vmov	r2, r3, d0
 8001604:	4640      	mov	r0, r8
 8001606:	4649      	mov	r1, r9
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe fe38 	bl	8000288 <__aeabi_dsub>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fae2 	bl	8000be8 <__aeabi_d2f>
 8001624:	4603      	mov	r3, r0
 8001626:	4a07      	ldr	r2, [pc, #28]	@ (8001644 <calculateQuaternion+0x54c>)
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	200002a8 	.word	0x200002a8
 800163c:	2000029c 	.word	0x2000029c
 8001640:	200002a0 	.word	0x200002a0
 8001644:	200002a4 	.word	0x200002a4
 8001648:	a2529d39 	.word	0xa2529d39
 800164c:	3f91df46 	.word	0x3f91df46

08001650 <readBNO055>:

void readBNO055(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
    // Read raw Euler angles from the BNO055
    BNO055_Read_Euler_Angles(&hi2c1, &yaw, &pitch, &roll);
 8001656:	4b9f      	ldr	r3, [pc, #636]	@ (80018d4 <readBNO055+0x284>)
 8001658:	4a9f      	ldr	r2, [pc, #636]	@ (80018d8 <readBNO055+0x288>)
 800165a:	49a0      	ldr	r1, [pc, #640]	@ (80018dc <readBNO055+0x28c>)
 800165c:	48a0      	ldr	r0, [pc, #640]	@ (80018e0 <readBNO055+0x290>)
 800165e:	f7ff fceb 	bl	8001038 <BNO055_Read_Euler_Angles>
    // Normalize yaw to be within 0 to 360 degrees
  //  yaw = fmod(yaw, 360.0);


    // Convert yaw from 0-360 to 360-0
       yaw = 360.0 - yaw;
 8001662:	4b9e      	ldr	r3, [pc, #632]	@ (80018dc <readBNO055+0x28c>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 80018e4 <readBNO055+0x294>
 800166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001670:	4b9a      	ldr	r3, [pc, #616]	@ (80018dc <readBNO055+0x28c>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
       if (yaw < 0) {
 8001676:	4b99      	ldr	r3, [pc, #612]	@ (80018dc <readBNO055+0x28c>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d509      	bpl.n	800169a <readBNO055+0x4a>
               yaw += 360.0; // Wrap around if negative
 8001686:	4b95      	ldr	r3, [pc, #596]	@ (80018dc <readBNO055+0x28c>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80018e4 <readBNO055+0x294>
 8001690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001694:	4b91      	ldr	r3, [pc, #580]	@ (80018dc <readBNO055+0x28c>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
           }
    // Apply low-pass filter to yaw, roll, and pitch
    yaw_filtered = alpha * yaw + (1 - alpha) * yaw_filtered;
 800169a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80018e8 <readBNO055+0x298>
 800169e:	4b8f      	ldr	r3, [pc, #572]	@ (80018dc <readBNO055+0x28c>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a8:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 80018e8 <readBNO055+0x298>
 80016ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016b4:	4b8d      	ldr	r3, [pc, #564]	@ (80018ec <readBNO055+0x29c>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	4b8a      	ldr	r3, [pc, #552]	@ (80018ec <readBNO055+0x29c>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
    roll_filtered = alpha * roll + (1 - alpha) * roll_filtered;
 80016c8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80018e8 <readBNO055+0x298>
 80016cc:	4b81      	ldr	r3, [pc, #516]	@ (80018d4 <readBNO055+0x284>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	eddf 7a84 	vldr	s15, [pc, #528]	@ 80018e8 <readBNO055+0x298>
 80016da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016e2:	4b83      	ldr	r3, [pc, #524]	@ (80018f0 <readBNO055+0x2a0>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <readBNO055+0x2a0>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]
    pitch_filtered = alpha * pitch + (1 - alpha) * pitch_filtered;
 80016f6:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80018e8 <readBNO055+0x298>
 80016fa:	4b77      	ldr	r3, [pc, #476]	@ (80018d8 <readBNO055+0x288>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001704:	eddf 7a78 	vldr	s15, [pc, #480]	@ 80018e8 <readBNO055+0x298>
 8001708:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800170c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001710:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <readBNO055+0x2a4>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <readBNO055+0x2a4>)
 8001720:	edc3 7a00 	vstr	s15, [r3]

    // Calculate quaternion from filtered Euler angles
    calculateQuaternion(yaw_filtered, pitch_filtered, roll_filtered);
 8001724:	4b71      	ldr	r3, [pc, #452]	@ (80018ec <readBNO055+0x29c>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	4b72      	ldr	r3, [pc, #456]	@ (80018f4 <readBNO055+0x2a4>)
 800172c:	ed93 7a00 	vldr	s14, [r3]
 8001730:	4b6f      	ldr	r3, [pc, #444]	@ (80018f0 <readBNO055+0x2a0>)
 8001732:	edd3 6a00 	vldr	s13, [r3]
 8001736:	eeb0 1a66 	vmov.f32	s2, s13
 800173a:	eef0 0a47 	vmov.f32	s1, s14
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	f7ff fcd9 	bl	80010f8 <calculateQuaternion>
    float norm = sqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 8001746:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <readBNO055+0x2a8>)
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	4b6a      	ldr	r3, [pc, #424]	@ (80018f8 <readBNO055+0x2a8>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001756:	4b69      	ldr	r3, [pc, #420]	@ (80018fc <readBNO055+0x2ac>)
 8001758:	edd3 6a00 	vldr	s13, [r3]
 800175c:	4b67      	ldr	r3, [pc, #412]	@ (80018fc <readBNO055+0x2ac>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176a:	4b65      	ldr	r3, [pc, #404]	@ (8001900 <readBNO055+0x2b0>)
 800176c:	edd3 6a00 	vldr	s13, [r3]
 8001770:	4b63      	ldr	r3, [pc, #396]	@ (8001900 <readBNO055+0x2b0>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177e:	4b61      	ldr	r3, [pc, #388]	@ (8001904 <readBNO055+0x2b4>)
 8001780:	edd3 6a00 	vldr	s13, [r3]
 8001784:	4b5f      	ldr	r3, [pc, #380]	@ (8001904 <readBNO055+0x2b4>)
 8001786:	edd3 7a00 	vldr	s15, [r3]
 800178a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001792:	ee17 0a90 	vmov	r0, s15
 8001796:	f7fe fed7 	bl	8000548 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b10 	vmov	d0, r2, r3
 80017a2:	f00b ff23 	bl	800d5ec <sqrt>
 80017a6:	ec53 2b10 	vmov	r2, r3, d0
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff fa1b 	bl	8000be8 <__aeabi_d2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	607b      	str	r3, [r7, #4]
     if (norm > 0.0) {
 80017b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd27      	ble.n	8001814 <readBNO055+0x1c4>
         qw /= norm;
 80017c4:	4b4c      	ldr	r3, [pc, #304]	@ (80018f8 <readBNO055+0x2a8>)
 80017c6:	edd3 6a00 	vldr	s13, [r3]
 80017ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d2:	4b49      	ldr	r3, [pc, #292]	@ (80018f8 <readBNO055+0x2a8>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
         qx /= norm;
 80017d8:	4b48      	ldr	r3, [pc, #288]	@ (80018fc <readBNO055+0x2ac>)
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	ed97 7a01 	vldr	s14, [r7, #4]
 80017e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e6:	4b45      	ldr	r3, [pc, #276]	@ (80018fc <readBNO055+0x2ac>)
 80017e8:	edc3 7a00 	vstr	s15, [r3]
         qy /= norm;
 80017ec:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <readBNO055+0x2b0>)
 80017ee:	edd3 6a00 	vldr	s13, [r3]
 80017f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <readBNO055+0x2b0>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
         qz /= norm;
 8001800:	4b40      	ldr	r3, [pc, #256]	@ (8001904 <readBNO055+0x2b4>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	ed97 7a01 	vldr	s14, [r7, #4]
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <readBNO055+0x2b4>)
 8001810:	edc3 7a00 	vstr	s15, [r3]
     }
     // Apply low-pass filter to quaternion components
         qx_filtered = q_alpha * qx + (1 - q_alpha) * qx_filtered;
 8001814:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80018e8 <readBNO055+0x298>
 8001818:	4b38      	ldr	r3, [pc, #224]	@ (80018fc <readBNO055+0x2ac>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001822:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80018e8 <readBNO055+0x298>
 8001826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800182a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800182e:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <readBNO055+0x2b8>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <readBNO055+0x2b8>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
         qy_filtered = q_alpha * qy + (1 - q_alpha) * qy_filtered;
 8001842:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80018e8 <readBNO055+0x298>
 8001846:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <readBNO055+0x2b0>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80018e8 <readBNO055+0x298>
 8001854:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001858:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <readBNO055+0x2bc>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <readBNO055+0x2bc>)
 800186c:	edc3 7a00 	vstr	s15, [r3]
         qz_filtered = q_alpha * qz + (1 - q_alpha) * qz_filtered;
 8001870:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80018e8 <readBNO055+0x298>
 8001874:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <readBNO055+0x2b4>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80018e8 <readBNO055+0x298>
 8001882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001886:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <readBNO055+0x2c0>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <readBNO055+0x2c0>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
         qw_filtered = q_alpha * qw + (1 - q_alpha) * qw_filtered;
 800189e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80018e8 <readBNO055+0x298>
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <readBNO055+0x2a8>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ac:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80018e8 <readBNO055+0x298>
 80018b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <readBNO055+0x2c4>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <readBNO055+0x2c4>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
    // Output the filtered values and quaternion
   /* printf("Filtered Yaw: %.2f\n", yaw_filtered);
    printf("Filtered Roll: %.2f\n", roll_filtered);
    printf("Filtered Pitch: %.2f\n", pitch_filtered);
    printf("Quaternion: qx: %.4f, qy: %.4f, qz: %.4f, qw: %.4f\n", qx, qy, qz, qw);*/
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000028c 	.word	0x2000028c
 80018d8:	20000288 	.word	0x20000288
 80018dc:	20000284 	.word	0x20000284
 80018e0:	20000530 	.word	0x20000530
 80018e4:	43b40000 	.word	0x43b40000
 80018e8:	3dcccccd 	.word	0x3dcccccd
 80018ec:	20000290 	.word	0x20000290
 80018f0:	20000298 	.word	0x20000298
 80018f4:	20000294 	.word	0x20000294
 80018f8:	200002a8 	.word	0x200002a8
 80018fc:	2000029c 	.word	0x2000029c
 8001900:	200002a0 	.word	0x200002a0
 8001904:	200002a4 	.word	0x200002a4
 8001908:	200002ac 	.word	0x200002ac
 800190c:	200002b0 	.word	0x200002b0
 8001910:	200002b4 	.word	0x200002b4
 8001914:	200002b8 	.word	0x200002b8

08001918 <sendJointState>:
float newValue1, newValue2, newValue3, newValue4; // Store new values
/// SEND DATA

char txBuffer[256];
void sendJointState(float pos1, float pos2, float pos3, float pos4, float velO1,
		float velO2, float velO3, float velO4, float yaw) {
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b0a6      	sub	sp, #152	@ 0x98
 800191e:	af12      	add	r7, sp, #72	@ 0x48
 8001920:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
 8001924:	edc7 0a12 	vstr	s1, [r7, #72]	@ 0x48
 8001928:	ed87 1a11 	vstr	s2, [r7, #68]	@ 0x44
 800192c:	edc7 1a10 	vstr	s3, [r7, #64]	@ 0x40
 8001930:	ed87 2a0f 	vstr	s4, [r7, #60]	@ 0x3c
 8001934:	edc7 2a0e 	vstr	s5, [r7, #56]	@ 0x38
 8001938:	ed87 3a0d 	vstr	s6, [r7, #52]	@ 0x34
 800193c:	edc7 3a0c 	vstr	s7, [r7, #48]	@ 0x30
 8001940:	ed87 4a0b 	vstr	s8, [r7, #44]	@ 0x2c

	 HAL_Delay(100);
*/

	// Format the joint state message into the buffer
	snprintf(txBuffer, sizeof(txBuffer),
 8001944:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001946:	f7fe fdff 	bl	8000548 <__aeabi_f2d>
 800194a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800194e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001950:	f7fe fdfa 	bl	8000548 <__aeabi_f2d>
 8001954:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001958:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800195a:	f7fe fdf5 	bl	8000548 <__aeabi_f2d>
 800195e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001962:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001964:	f7fe fdf0 	bl	8000548 <__aeabi_f2d>
 8001968:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800196c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800196e:	f7fe fdeb 	bl	8000548 <__aeabi_f2d>
 8001972:	e9c7 0100 	strd	r0, r1, [r7]
 8001976:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001978:	f7fe fde6 	bl	8000548 <__aeabi_f2d>
 800197c:	4682      	mov	sl, r0
 800197e:	468b      	mov	fp, r1
 8001980:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001982:	f7fe fde1 	bl	8000548 <__aeabi_f2d>
 8001986:	4680      	mov	r8, r0
 8001988:	4689      	mov	r9, r1
 800198a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800198c:	f7fe fddc 	bl	8000548 <__aeabi_f2d>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
 8001994:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001996:	f7fe fdd7 	bl	8000548 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80019a2:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 80019a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80019aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80019ae:	ed97 7b00 	vldr	d7, [r7]
 80019b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80019b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80019ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019be:	ed97 7b04 	vldr	d7, [r7, #16]
 80019c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80019c6:	ed97 7b06 	vldr	d7, [r7, #24]
 80019ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 80019ce:	ed97 7b08 	vldr	d7, [r7, #32]
 80019d2:	ed8d 7b00 	vstr	d7, [sp]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <sendJointState+0xf0>)
 80019d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019dc:	480b      	ldr	r0, [pc, #44]	@ (8001a0c <sendJointState+0xf4>)
 80019de:	f008 ff2b 	bl	800a838 <sniprintf>
			"pos1:%.2f vel1:%.2f pos2:%.2f vel2:%.2f pos3:%.2f vel3:%.2f pos4:%.2f vel4:%.2f yaw:%.2f\n",
			pos1, velO1, pos2, velO2, pos3, velO3, pos4, velO4,yaw);

	// Transmit the complete message over UART
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, strlen(txBuffer),
 80019e2:	480a      	ldr	r0, [pc, #40]	@ (8001a0c <sendJointState+0xf4>)
 80019e4:	f7fe fc44 	bl	8000270 <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	4906      	ldr	r1, [pc, #24]	@ (8001a0c <sendJointState+0xf4>)
 80019f2:	4807      	ldr	r0, [pc, #28]	@ (8001a10 <sendJointState+0xf8>)
 80019f4:	f006 fd16 	bl	8008424 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	// Optional delay to prevent flooding the UART
	HAL_Delay(100);
 80019f8:	2064      	movs	r0, #100	@ 0x64
 80019fa:	f003 fddb 	bl	80055b4 <HAL_Delay>
}
 80019fe:	bf00      	nop
 8001a00:	3750      	adds	r7, #80	@ 0x50
 8001a02:	46bd      	mov	sp, r7
 8001a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a08:	0800ea18 	.word	0x0800ea18
 8001a0c:	200002ec 	.word	0x200002ec
 8001a10:	200007c4 	.word	0x200007c4

08001a14 <UART_ReceiveString>:



/// REVICE DATA ///

void UART_ReceiveString(uint8_t *buffer, size_t length) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
    // Clear the buffer before receiving new data
    memset(buffer, 0, length); // Clear the buffer
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	2100      	movs	r1, #0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f009 f834 	bl	800aa90 <memset>

    // Receive data with a timeout of 256 ms
    if (HAL_UART_Receive(&huart2, buffer, length - 1, 256) == HAL_OK) {
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	480a      	ldr	r0, [pc, #40]	@ (8001a60 <UART_ReceiveString+0x4c>)
 8001a38:	f006 fd7f 	bl	800853a <HAL_UART_Receive>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <UART_ReceiveString+0x3c>
        buffer[length - 1] = '\0'; // Null-terminate the string
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
    } else {
        // Handle reception error
        printf("UART reception error\n");
    }
}
 8001a4e:	e002      	b.n	8001a56 <UART_ReceiveString+0x42>
        printf("UART reception error\n");
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <UART_ReceiveString+0x50>)
 8001a52:	f008 fee9 	bl	800a828 <puts>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200007c4 	.word	0x200007c4
 8001a64:	0800ea74 	.word	0x0800ea74

08001a68 <ReadFourFloats>:

// Function to read four float values from a received string
void ReadFourFloats(float *val1, float *val2, float *val3, float *val4) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	@ 0x30
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
    HAL_Delay(100); // Wait for 100 ms before receiving new data
 8001a76:	2064      	movs	r0, #100	@ 0x64
 8001a78:	f003 fd9c 	bl	80055b4 <HAL_Delay>
    UART_ReceiveString(buffer, sizeof(buffer)); // Receive the string from UART
 8001a7c:	211e      	movs	r1, #30
 8001a7e:	4866      	ldr	r0, [pc, #408]	@ (8001c18 <ReadFourFloats+0x1b0>)
 8001a80:	f7ff ffc8 	bl	8001a14 <UART_ReceiveString>
    // Example input: "c: 0.54,0.54,0.54,0.54"

    // Print the received buffer for debugging
    printf("Received buffer: %s\n", buffer);
 8001a84:	4964      	ldr	r1, [pc, #400]	@ (8001c18 <ReadFourFloats+0x1b0>)
 8001a86:	4865      	ldr	r0, [pc, #404]	@ (8001c1c <ReadFourFloats+0x1b4>)
 8001a88:	f008 fe66 	bl	800a758 <iprintf>


    // Pointer to the start of the buffer
    char *start = (char*) buffer;
 8001a8c:	4b62      	ldr	r3, [pc, #392]	@ (8001c18 <ReadFourFloats+0x1b0>)
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Loop to find and process all valid messages
    while ((start = strstr(start, "c:")) != NULL) {
 8001a90:	e0b3      	b.n	8001bfa <ReadFourFloats+0x192>
        // Move the pointer past "c:"
        char *data = start + 2;
 8001a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a94:	3302      	adds	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]

        // Find the end of the message (next 'c:' or end of buffer)
        char *end = strstr(data, "c:");
 8001a98:	4961      	ldr	r1, [pc, #388]	@ (8001c20 <ReadFourFloats+0x1b8>)
 8001a9a:	69b8      	ldr	r0, [r7, #24]
 8001a9c:	f009 f86e 	bl	800ab7c <strstr>
 8001aa0:	6178      	str	r0, [r7, #20]
        if (end != NULL) {
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <ReadFourFloats+0x46>
            *end = '\0'; // Temporarily terminate the string for parsing
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
        }

        // Print the data after the prefix for debugging
        printf("Data after prefix: %s\n", data);
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	485c      	ldr	r0, [pc, #368]	@ (8001c24 <ReadFourFloats+0x1bc>)
 8001ab2:	f008 fe51 	bl	800a758 <iprintf>

        // Parse the string
        char *token = strtok(data, ",");
 8001ab6:	495c      	ldr	r1, [pc, #368]	@ (8001c28 <ReadFourFloats+0x1c0>)
 8001ab8:	69b8      	ldr	r0, [r7, #24]
 8001aba:	f009 f803 	bl	800aac4 <strtok>
 8001abe:	6138      	str	r0, [r7, #16]

        float newValue1 = 0.0, newValue2 = 0.0, newValue3 = 0.0, newValue4 = 0.0;
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
        static float oldValue1 = 0.0, oldValue2 = 0.0, oldValue3 = 0.0, oldValue4 = 0.0;

        if (token != NULL) {
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00a      	beq.n	8001af4 <ReadFourFloats+0x8c>
            newValue1 = atof(token); // Convert to float
 8001ade:	6938      	ldr	r0, [r7, #16]
 8001ae0:	f007 f8f2 	bl	8008cc8 <atof>
 8001ae4:	ec53 2b10 	vmov	r2, r3, d0
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f87c 	bl	8000be8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
            // printf("Parsed val1: %.2f\n", newValue1);
        }

        token = strtok(NULL, ",");
 8001af4:	494c      	ldr	r1, [pc, #304]	@ (8001c28 <ReadFourFloats+0x1c0>)
 8001af6:	2000      	movs	r0, #0
 8001af8:	f008 ffe4 	bl	800aac4 <strtok>
 8001afc:	6138      	str	r0, [r7, #16]
        if (token != NULL) {
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d012      	beq.n	8001b2a <ReadFourFloats+0xc2>
            newValue2 = atof(token); // Convert to float
 8001b04:	6938      	ldr	r0, [r7, #16]
 8001b06:	f007 f8df 	bl	8008cc8 <atof>
 8001b0a:	ec53 2b10 	vmov	r2, r3, d0
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f869 	bl	8000be8 <__aeabi_d2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
            printf("Parsed val2: %.2f\n", newValue2);
 8001b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b1c:	f7fe fd14 	bl	8000548 <__aeabi_f2d>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4841      	ldr	r0, [pc, #260]	@ (8001c2c <ReadFourFloats+0x1c4>)
 8001b26:	f008 fe17 	bl	800a758 <iprintf>
        }

        token = strtok(NULL, ",");
 8001b2a:	493f      	ldr	r1, [pc, #252]	@ (8001c28 <ReadFourFloats+0x1c0>)
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f008 ffc9 	bl	800aac4 <strtok>
 8001b32:	6138      	str	r0, [r7, #16]
        if (token != NULL) {
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <ReadFourFloats+0xe8>
            newValue3 = atof(token); // Convert to float
 8001b3a:	6938      	ldr	r0, [r7, #16]
 8001b3c:	f007 f8c4 	bl	8008cc8 <atof>
 8001b40:	ec53 2b10 	vmov	r2, r3, d0
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7ff f84e 	bl	8000be8 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	623b      	str	r3, [r7, #32]
            // printf("Parsed val3: %.2f\n", newValue3);
        }

        token = strtok(NULL, ",");
 8001b50:	4935      	ldr	r1, [pc, #212]	@ (8001c28 <ReadFourFloats+0x1c0>)
 8001b52:	2000      	movs	r0, #0
 8001b54:	f008 ffb6 	bl	800aac4 <strtok>
 8001b58:	6138      	str	r0, [r7, #16]
        if (token != NULL) {
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <ReadFourFloats+0x10e>
            newValue4 = atof(token); // Convert to float
 8001b60:	6938      	ldr	r0, [r7, #16]
 8001b62:	f007 f8b1 	bl	8008cc8 <atof>
 8001b66:	ec53 2b10 	vmov	r2, r3, d0
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f83b 	bl	8000be8 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	61fb      	str	r3, [r7, #28]
            // printf("Parsed val4: %.2f\n", newValue4);
        }

        // Check if new values are different from old values
        if (newValue1 != oldValue1 || newValue2 != oldValue2
 8001b76:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <ReadFourFloats+0x1c8>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b80:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	d11d      	bne.n	8001bc6 <ReadFourFloats+0x15e>
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <ReadFourFloats+0x1cc>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b94:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	d113      	bne.n	8001bc6 <ReadFourFloats+0x15e>
                || newValue3 != oldValue3 || newValue4 != oldValue4) {
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <ReadFourFloats+0x1d0>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ba8:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d109      	bne.n	8001bc6 <ReadFourFloats+0x15e>
 8001bb2:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <ReadFourFloats+0x1d4>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bbc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	d017      	beq.n	8001bf6 <ReadFourFloats+0x18e>
            *val1 = newValue1;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bca:	601a      	str	r2, [r3, #0]
            *val2 = newValue2;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd0:	601a      	str	r2, [r3, #0]
            *val3 = newValue3;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	601a      	str	r2, [r3, #0]
            *val4 = newValue4;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	601a      	str	r2, [r3, #0]

            oldValue1 = newValue1;
 8001bde:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <ReadFourFloats+0x1c8>)
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	6013      	str	r3, [r2, #0]
            oldValue2 = newValue2;
 8001be4:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <ReadFourFloats+0x1cc>)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	6013      	str	r3, [r2, #0]
            oldValue3 = newValue3;
 8001bea:	4a13      	ldr	r2, [pc, #76]	@ (8001c38 <ReadFourFloats+0x1d0>)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	6013      	str	r3, [r2, #0]
            oldValue4 = newValue4;
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <ReadFourFloats+0x1d4>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	6013      	str	r3, [r2, #0]
        }

        // Move the start pointer to the end of the current message for the next iteration
        start = end;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while ((start = strstr(start, "c:")) != NULL) {
 8001bfa:	4909      	ldr	r1, [pc, #36]	@ (8001c20 <ReadFourFloats+0x1b8>)
 8001bfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001bfe:	f008 ffbd 	bl	800ab7c <strstr>
 8001c02:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f47f af43 	bne.w	8001a92 <ReadFourFloats+0x2a>
    }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3730      	adds	r7, #48	@ 0x30
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200002bc 	.word	0x200002bc
 8001c1c:	0800ea8c 	.word	0x0800ea8c
 8001c20:	0800eaa4 	.word	0x0800eaa4
 8001c24:	0800eaa8 	.word	0x0800eaa8
 8001c28:	0800eac0 	.word	0x0800eac0
 8001c2c:	0800eac4 	.word	0x0800eac4
 8001c30:	20000510 	.word	0x20000510
 8001c34:	20000514 	.word	0x20000514
 8001c38:	20000518 	.word	0x20000518
 8001c3c:	2000051c 	.word	0x2000051c

08001c40 <moving_average_filter1>:
float angular_position_deg1 = 0.0; // Angular position in degrees
float realVel1;
float realRPM1;

// Function to calculate exponential moving average
float moving_average_filter1(float new_velocity) {
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema1 = 0.0; // Initialize EMA variable
	ema1 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema1);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	a318      	add	r3, pc, #96	@ (adr r3, 8001cb4 <moving_average_filter1+0x74>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fccf 	bl	80005f8 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <moving_average_filter1+0x70>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ca8 <moving_average_filter1+0x68>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fcc1 	bl	80005f8 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	f7fe fb05 	bl	800028c <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ffad 	bl	8000be8 <__aeabi_d2f>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <moving_average_filter1+0x70>)
 8001c92:	6013      	str	r3, [r2, #0]
	return ema1;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <moving_average_filter1+0x70>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	ee07 3a90 	vmov	s15, r3
}
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	9999999a 	.word	0x9999999a
 8001cac:	3fe99999 	.word	0x3fe99999
 8001cb0:	20000520 	.word	0x20000520
 8001cb4:	9999999a 	.word	0x9999999a
 8001cb8:	3fc99999 	.word	0x3fc99999
 8001cbc:	00000000 	.word	0x00000000

08001cc0 <calculate_pwm1>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm1(float desired_velocity) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	d505      	bpl.n	8001ce4 <calculate_pwm1+0x24>
		desired_velocity = -desired_velocity;
 8001cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cdc:	eef1 7a67 	vneg.f32	s15, s15
 8001ce0:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7fe fc2f 	bl	8000548 <__aeabi_f2d>
 8001cea:	a310      	add	r3, pc, #64	@ (adr r3, 8001d2c <calculate_pwm1+0x6c>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fdac 	bl	800084c <__aeabi_ddiv>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <calculate_pwm1+0x68>)
 8001d02:	f7fe fc79 	bl	80005f8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff6b 	bl	8000be8 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	ee07 3a90 	vmov	s15, r3
}
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	f3af 8000 	nop.w
 8001d28:	408f4000 	.word	0x408f4000
 8001d2c:	147ae148 	.word	0x147ae148
 8001d30:	3fd147ae 	.word	0x3fd147ae

08001d34 <PID_Controller1>:

// PID Controller Function with Anti-Windup
float PID_Controller1(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8001d34:	b480      	push	{r7}
 8001d36:	b08d      	sub	sp, #52	@ 0x34
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d3e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d42:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d46:	6138      	str	r0, [r7, #16]
 8001d48:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d4c:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d50:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error1 = setpoint - measured_value;
 8001d54:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d60:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error1;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	ed93 7a00 	vldr	s14, [r3]
 8001d6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e08 <PID_Controller1+0xd4>
 8001d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	dd03      	ble.n	8001d94 <PID_Controller1+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e0c <PID_Controller1+0xd8>)
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00c      	b.n	8001dae <PID_Controller1+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e10 <PID_Controller1+0xdc>
 8001d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d502      	bpl.n	8001dae <PID_Controller1+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4a1a      	ldr	r2, [pc, #104]	@ (8001e14 <PID_Controller1+0xe0>)
 8001dac:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative1 = error1 - last_error;
 8001dae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output1 = (Kp * error1) + (Ki * (*integral)) + (Kd * derivative1);
 8001dbe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	edd3 6a00 	vldr	s13, [r3]
 8001dd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ddc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001de0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error1;
 8001df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df2:	60fb      	str	r3, [r7, #12]

	return output1; // Return the control output
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	ee07 3a90 	vmov	s15, r3
}
 8001dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfe:	3734      	adds	r7, #52	@ 0x34
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	42c80000 	.word	0x42c80000
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	c2c80000 	.word	0xc2c80000
 8001e14:	c2c80000 	.word	0xc2c80000

08001e18 <calculateVel1>:

int32_t current_pulse_count1 = 0;
 float distance_traveled1 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel1(float velTag1, float current_time1) {
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e24:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag1 is within the deadband
	if (fabs(velTag1) < DEAD_BAND) {
 8001e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e2c:	eef0 7ae7 	vabs.f32	s15, s15
 8001e30:	ee17 0a90 	vmov	r0, s15
 8001e34:	f7fe fb88 	bl	8000548 <__aeabi_f2d>
 8001e38:	a382      	add	r3, pc, #520	@ (adr r3, 8002044 <calculateVel1+0x22c>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fe4d 	bl	8000adc <__aeabi_dcmplt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <calculateVel1+0x36>
		velTag1 = 0; // Set velTag1 to zero if within deadband
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag1 is 0
	if (velTag1 == 0) {
 8001e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5a:	d13c      	bne.n	8001ed6 <calculateVel1+0xbe>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001e5c:	4b68      	ldr	r3, [pc, #416]	@ (8002000 <calculateVel1+0x1e8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2200      	movs	r2, #0
 8001e62:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001e64:	4b66      	ldr	r3, [pc, #408]	@ (8002000 <calculateVel1+0x1e8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38
		vel1 = 0.0;
 8001e6c:	4b65      	ldr	r3, [pc, #404]	@ (8002004 <calculateVel1+0x1ec>)
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e74:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <calculateVel1+0x1f0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm1 = 0.0;
 8001e7c:	4963      	ldr	r1, [pc, #396]	@ (800200c <calculateVel1+0x1f4>)
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
		control_output1 = 0.0;
 8001e8a:	4b61      	ldr	r3, [pc, #388]	@ (8002010 <calculateVel1+0x1f8>)
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad1
		realVel1 = 0.0;
 8001e92:	4b60      	ldr	r3, [pc, #384]	@ (8002014 <calculateVel1+0x1fc>)
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
		realRPM1 = 0.0;
 8001e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002018 <calculateVel1+0x200>)
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
		integral1_1 = 0.0;
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800201c <calculateVel1+0x204>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
		last_error1 = 0.0;
 8001eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8002020 <calculateVel1+0x208>)
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
		last_control_output1 = 0.0;
 8001eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8002024 <calculateVel1+0x20c>)
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
		distance_traveled1 = 0.0;
 8001eba:	4b5b      	ldr	r3, [pc, #364]	@ (8002028 <calculateVel1+0x210>)
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
		pulse_count1 = 0; // Reset pulse count
 8001ec2:	4b5a      	ldr	r3, [pc, #360]	@ (800202c <calculateVel1+0x214>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
		last_velTag1 = velTag1; // Update last velTag1
 8001ec8:	4a59      	ldr	r2, [pc, #356]	@ (8002030 <calculateVel1+0x218>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8001ece:	2064      	movs	r0, #100	@ 0x64
 8001ed0:	f003 fb70 	bl	80055b4 <HAL_Delay>
		return; // Exit the function
 8001ed4:	e327      	b.n	8002526 <calculateVel1+0x70e>
	}

	// Calculate the time elapsed since the last update
	float delta_time1 = current_time1 - last_time1;
 8001ed6:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <calculateVel1+0x21c>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ed97 7a00 	vldr	s14, [r7]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001ee8:	4b47      	ldr	r3, [pc, #284]	@ (8002008 <calculateVel1+0x1f0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b51      	ldr	r3, [pc, #324]	@ (8002038 <calculateVel1+0x220>)
 8001ef2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8001ef4:	200a      	movs	r0, #10
 8001ef6:	f003 fb5d 	bl	80055b4 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference1 = current_pulse_count1 - pulse_count1;
 8001efa:	4b4f      	ldr	r3, [pc, #316]	@ (8002038 <calculateVel1+0x220>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b4a      	ldr	r3, [pc, #296]	@ (800202c <calculateVel1+0x214>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm1 = fabs((float) pulse_difference1 / (float) PPR) * 60.0; // Always positive
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f12:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1a:	eef0 7ae7 	vabs.f32	s15, s15
 8001f1e:	ee17 0a90 	vmov	r0, s15
 8001f22:	f7fe fb11 	bl	8000548 <__aeabi_f2d>
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	4b44      	ldr	r3, [pc, #272]	@ (800203c <calculateVel1+0x224>)
 8001f2c:	f7fe fb64 	bl	80005f8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4935      	ldr	r1, [pc, #212]	@ (800200c <calculateVel1+0x1f4>)
 8001f36:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count1 = current_pulse_count1;
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <calculateVel1+0x220>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b3a      	ldr	r3, [pc, #232]	@ (800202c <calculateVel1+0x214>)
 8001f42:	601a      	str	r2, [r3, #0]

	// Limit RPM to the range [0, 250]
	rpm1 = fmax(0.0, fmin(250.0, rpm1));
 8001f44:	4b31      	ldr	r3, [pc, #196]	@ (800200c <calculateVel1+0x1f4>)
 8001f46:	ed93 7b00 	vldr	d7, [r3]
 8001f4a:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001fe8 <calculateVel1+0x1d0>
 8001f4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f52:	eef0 0a67 	vmov.f32	s1, s15
 8001f56:	f00b fc49 	bl	800d7ec <fmin>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	eef0 7a60 	vmov.f32	s15, s1
 8001f62:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001ff0 <calculateVel1+0x1d8>
 8001f66:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6a:	eef0 0a67 	vmov.f32	s1, s15
 8001f6e:	f00b fc13 	bl	800d798 <fmax>
 8001f72:	eeb0 7a40 	vmov.f32	s14, s0
 8001f76:	eef0 7a60 	vmov.f32	s15, s1
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <calculateVel1+0x1f4>)
 8001f7c:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel1;
	if (pulse_difference1 < 0) {
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da62      	bge.n	800204c <calculateVel1+0x234>
		new_vel1 = -((rpm1 / 60.0) * dia1 * M_PI); // Negative velocity for reverse direction
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <calculateVel1+0x1f4>)
 8001f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <calculateVel1+0x224>)
 8001f92:	f7fe fc5b 	bl	800084c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <calculateVel1+0x228>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_f2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4620      	mov	r0, r4
 8001fae:	4629      	mov	r1, r5
 8001fb0:	f7fe fb22 	bl	80005f8 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ff8 <calculateVel1+0x1e0>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fb19 	bl	80005f8 <__aeabi_dmul>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fe0b 	bl	8000be8 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef1 7a67 	vneg.f32	s15, s15
 8001fdc:	edc7 7a05 	vstr	s15, [r7, #20]
 8001fe0:	e05c      	b.n	800209c <calculateVel1+0x284>
 8001fe2:	bf00      	nop
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	406f4000 	.word	0x406f4000
	...
 8001ff8:	54442d18 	.word	0x54442d18
 8001ffc:	400921fb 	.word	0x400921fb
 8002000:	2000077c 	.word	0x2000077c
 8002004:	20000400 	.word	0x20000400
 8002008:	20000584 	.word	0x20000584
 800200c:	200003f8 	.word	0x200003f8
 8002010:	20000404 	.word	0x20000404
 8002014:	20000428 	.word	0x20000428
 8002018:	2000042c 	.word	0x2000042c
 800201c:	20000408 	.word	0x20000408
 8002020:	2000040c 	.word	0x2000040c
 8002024:	20000410 	.word	0x20000410
 8002028:	20000434 	.word	0x20000434
 800202c:	200003f0 	.word	0x200003f0
 8002030:	20000414 	.word	0x20000414
 8002034:	2000041c 	.word	0x2000041c
 8002038:	20000430 	.word	0x20000430
 800203c:	404e0000 	.word	0x404e0000
 8002040:	20000000 	.word	0x20000000
 8002044:	47ae147b 	.word	0x47ae147b
 8002048:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel1 = (rpm1 / 60.0) * dia1 * M_PI; // Positive velocity for forward direction
 800204c:	4bac      	ldr	r3, [pc, #688]	@ (8002300 <calculateVel1+0x4e8>)
 800204e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4bab      	ldr	r3, [pc, #684]	@ (8002304 <calculateVel1+0x4ec>)
 8002058:	f7fe fbf8 	bl	800084c <__aeabi_ddiv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	461d      	mov	r5, r3
 8002064:	4ba8      	ldr	r3, [pc, #672]	@ (8002308 <calculateVel1+0x4f0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa6d 	bl	8000548 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe fabf 	bl	80005f8 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	a397      	add	r3, pc, #604	@ (adr r3, 80022e0 <calculateVel1+0x4c8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fab6 	bl	80005f8 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fda8 	bl	8000be8 <__aeabi_d2f>
 8002098:	4603      	mov	r3, r0
 800209a:	617b      	str	r3, [r7, #20]
	}

	// Apply moving average filter for velocity
	//  vel1 = moving_average_filter1(new_vel1);
	// Constrain the velocity to the range [-1, 1]
	vel1 = fmax(-1.0, fmin(1.0, moving_average_filter1(new_vel1)));
 800209c:	ed97 0a05 	vldr	s0, [r7, #20]
 80020a0:	f7ff fdce 	bl	8001c40 <moving_average_filter1>
 80020a4:	ee10 3a10 	vmov	r3, s0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa4d 	bl	8000548 <__aeabi_f2d>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 80022e8 <calculateVel1+0x4d0>
 80020b6:	ec43 2b10 	vmov	d0, r2, r3
 80020ba:	f00b fb97 	bl	800d7ec <fmin>
 80020be:	eeb0 7a40 	vmov.f32	s14, s0
 80020c2:	eef0 7a60 	vmov.f32	s15, s1
 80020c6:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 80022f0 <calculateVel1+0x4d8>
 80020ca:	eeb0 0a47 	vmov.f32	s0, s14
 80020ce:	eef0 0a67 	vmov.f32	s1, s15
 80020d2:	f00b fb61 	bl	800d798 <fmax>
 80020d6:	ec53 2b10 	vmov	r2, r3, d0
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd83 	bl	8000be8 <__aeabi_d2f>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4a89      	ldr	r2, [pc, #548]	@ (800230c <calculateVel1+0x4f4>)
 80020e6:	6013      	str	r3, [r2, #0]
	// Update position based on velocity and elapsed time
	distance_traveled1 += vel1 * (delta_time1 / 1000.0); // Linear distance traveled in meters
 80020e8:	4b89      	ldr	r3, [pc, #548]	@ (8002310 <calculateVel1+0x4f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa2b 	bl	8000548 <__aeabi_f2d>
 80020f2:	4604      	mov	r4, r0
 80020f4:	460d      	mov	r5, r1
 80020f6:	4b85      	ldr	r3, [pc, #532]	@ (800230c <calculateVel1+0x4f4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa24 	bl	8000548 <__aeabi_f2d>
 8002100:	4680      	mov	r8, r0
 8002102:	4689      	mov	r9, r1
 8002104:	6938      	ldr	r0, [r7, #16]
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b81      	ldr	r3, [pc, #516]	@ (8002314 <calculateVel1+0x4fc>)
 8002110:	f7fe fb9c 	bl	800084c <__aeabi_ddiv>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4640      	mov	r0, r8
 800211a:	4649      	mov	r1, r9
 800211c:	f7fe fa6c 	bl	80005f8 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4620      	mov	r0, r4
 8002126:	4629      	mov	r1, r5
 8002128:	f7fe f8b0 	bl	800028c <__adddf3>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fd58 	bl	8000be8 <__aeabi_d2f>
 8002138:	4603      	mov	r3, r0
 800213a:	4a75      	ldr	r2, [pc, #468]	@ (8002310 <calculateVel1+0x4f8>)
 800213c:	6013      	str	r3, [r2, #0]
	angular_position_rad1 += distance_traveled1 / (dia1 / 2.0); // Update angular position in radians
 800213e:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <calculateVel1+0x500>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4604      	mov	r4, r0
 800214a:	460d      	mov	r5, r1
 800214c:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <calculateVel1+0x4f8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f9f9 	bl	8000548 <__aeabi_f2d>
 8002156:	4680      	mov	r8, r0
 8002158:	4689      	mov	r9, r1
 800215a:	4b6b      	ldr	r3, [pc, #428]	@ (8002308 <calculateVel1+0x4f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9f2 	bl	8000548 <__aeabi_f2d>
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800216c:	f7fe fb6e 	bl	800084c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4640      	mov	r0, r8
 8002176:	4649      	mov	r1, r9
 8002178:	f7fe fb68 	bl	800084c <__aeabi_ddiv>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe f882 	bl	800028c <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fd2a 	bl	8000be8 <__aeabi_d2f>
 8002194:	4603      	mov	r3, r0
 8002196:	4a60      	ldr	r2, [pc, #384]	@ (8002318 <calculateVel1+0x500>)
 8002198:	6013      	str	r3, [r2, #0]
	angular_position_deg1 = angular_position_rad1 * (180.0 / M_PI); // Convert to degrees
 800219a:	4b5f      	ldr	r3, [pc, #380]	@ (8002318 <calculateVel1+0x500>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f9d2 	bl	8000548 <__aeabi_f2d>
 80021a4:	a354      	add	r3, pc, #336	@ (adr r3, 80022f8 <calculateVel1+0x4e0>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa25 	bl	80005f8 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fd17 	bl	8000be8 <__aeabi_d2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a57      	ldr	r2, [pc, #348]	@ (800231c <calculateVel1+0x504>)
 80021be:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate1 = estimate1; // Predicted state (previous estimate)
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <calculateVel1+0x508>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a56      	ldr	r2, [pc, #344]	@ (8002320 <calculateVel1+0x508>)
 80021c6:	6013      	str	r3, [r2, #0]
	error_covariance1 += process_noise1; // Update error covariance
 80021c8:	4b56      	ldr	r3, [pc, #344]	@ (8002324 <calculateVel1+0x50c>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	4b56      	ldr	r3, [pc, #344]	@ (8002328 <calculateVel1+0x510>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d8:	4b52      	ldr	r3, [pc, #328]	@ (8002324 <calculateVel1+0x50c>)
 80021da:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain1 = error_covariance1 / (error_covariance1 + measurement_noise1); // Calculate Kalman gain
 80021de:	4b51      	ldr	r3, [pc, #324]	@ (8002324 <calculateVel1+0x50c>)
 80021e0:	edd3 6a00 	vldr	s13, [r3]
 80021e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002324 <calculateVel1+0x50c>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	4b50      	ldr	r3, [pc, #320]	@ (800232c <calculateVel1+0x514>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002330 <calculateVel1+0x518>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]
	estimate1 += kalman_gain1 * (vel1 - estimate1); // Update estimate with measurement
 80021fe:	4b43      	ldr	r3, [pc, #268]	@ (800230c <calculateVel1+0x4f4>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b46      	ldr	r3, [pc, #280]	@ (8002320 <calculateVel1+0x508>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220e:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <calculateVel1+0x518>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002218:	4b41      	ldr	r3, [pc, #260]	@ (8002320 <calculateVel1+0x508>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	4b3f      	ldr	r3, [pc, #252]	@ (8002320 <calculateVel1+0x508>)
 8002224:	edc3 7a00 	vstr	s15, [r3]
	error_covariance1 = (1 - kalman_gain1) * error_covariance1; // Update error covariance
 8002228:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <calculateVel1+0x518>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002236:	4b3b      	ldr	r3, [pc, #236]	@ (8002324 <calculateVel1+0x50c>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <calculateVel1+0x50c>)
 8002242:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output1 = PID_Controller1(Kp1, Ki1, Kd1, &integral1_1, last_error1,
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <calculateVel1+0x51c>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <calculateVel1+0x520>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	4b3a      	ldr	r3, [pc, #232]	@ (800233c <calculateVel1+0x524>)
 8002254:	edd3 6a00 	vldr	s13, [r3]
 8002258:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <calculateVel1+0x528>)
 800225a:	ed93 6a00 	vldr	s12, [r3]
 800225e:	4b2b      	ldr	r3, [pc, #172]	@ (800230c <calculateVel1+0x4f4>)
 8002260:	edd3 5a00 	vldr	s11, [r3]
 8002264:	eef0 2a65 	vmov.f32	s5, s11
 8002268:	ed97 2a01 	vldr	s4, [r7, #4]
 800226c:	eef0 1a46 	vmov.f32	s3, s12
 8002270:	4834      	ldr	r0, [pc, #208]	@ (8002344 <calculateVel1+0x52c>)
 8002272:	eeb0 1a66 	vmov.f32	s2, s13
 8002276:	eef0 0a47 	vmov.f32	s1, s14
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	f7ff fd59 	bl	8001d34 <PID_Controller1>
 8002282:	eef0 7a40 	vmov.f32	s15, s0
 8002286:	4b30      	ldr	r3, [pc, #192]	@ (8002348 <calculateVel1+0x530>)
 8002288:	edc3 7a00 	vstr	s15, [r3]
			velTag1, vel1);

	// Implement ramping to control output
	if (fabs(control_output1 - last_control_output1) > RAMP_RATE) {
 800228c:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <calculateVel1+0x530>)
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	4b2e      	ldr	r3, [pc, #184]	@ (800234c <calculateVel1+0x534>)
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800229c:	eef0 7ae7 	vabs.f32	s15, s15
 80022a0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80022a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd60      	ble.n	8002370 <calculateVel1+0x558>
		control_output1 = last_control_output1
				+ (control_output1 > last_control_output1 ?
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <calculateVel1+0x534>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f948 	bl	8000548 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4922      	ldr	r1, [pc, #136]	@ (8002348 <calculateVel1+0x530>)
 80022be:	ed91 7a00 	vldr	s14, [r1]
 80022c2:	4922      	ldr	r1, [pc, #136]	@ (800234c <calculateVel1+0x534>)
 80022c4:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 80022c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	dd40      	ble.n	8002354 <calculateVel1+0x53c>
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	491e      	ldr	r1, [pc, #120]	@ (8002350 <calculateVel1+0x538>)
 80022d8:	e03f      	b.n	800235a <calculateVel1+0x542>
 80022da:	bf00      	nop
 80022dc:	f3af 8000 	nop.w
 80022e0:	54442d18 	.word	0x54442d18
 80022e4:	400921fb 	.word	0x400921fb
 80022e8:	00000000 	.word	0x00000000
 80022ec:	3ff00000 	.word	0x3ff00000
 80022f0:	00000000 	.word	0x00000000
 80022f4:	bff00000 	.word	0xbff00000
 80022f8:	1a63c1f8 	.word	0x1a63c1f8
 80022fc:	404ca5dc 	.word	0x404ca5dc
 8002300:	200003f8 	.word	0x200003f8
 8002304:	404e0000 	.word	0x404e0000
 8002308:	20000000 	.word	0x20000000
 800230c:	20000400 	.word	0x20000400
 8002310:	20000434 	.word	0x20000434
 8002314:	408f4000 	.word	0x408f4000
 8002318:	20000420 	.word	0x20000420
 800231c:	20000424 	.word	0x20000424
 8002320:	20000418 	.word	0x20000418
 8002324:	20000014 	.word	0x20000014
 8002328:	20000018 	.word	0x20000018
 800232c:	2000001c 	.word	0x2000001c
 8002330:	20000010 	.word	0x20000010
 8002334:	20000004 	.word	0x20000004
 8002338:	20000008 	.word	0x20000008
 800233c:	2000000c 	.word	0x2000000c
 8002340:	2000040c 	.word	0x2000040c
 8002344:	20000408 	.word	0x20000408
 8002348:	20000404 	.word	0x20000404
 800234c:	20000410 	.word	0x20000410
 8002350:	40140000 	.word	0x40140000
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	4981      	ldr	r1, [pc, #516]	@ (8002560 <calculateVel1+0x748>)
				+ (control_output1 > last_control_output1 ?
 800235a:	f7fd ff97 	bl	800028c <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe fc3f 	bl	8000be8 <__aeabi_d2f>
 800236a:	4603      	mov	r3, r0
		control_output1 = last_control_output1
 800236c:	4a7d      	ldr	r2, [pc, #500]	@ (8002564 <calculateVel1+0x74c>)
 800236e:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output1 > 0 && control_output1 < -HYSTERESIS)
 8002370:	4b7d      	ldr	r3, [pc, #500]	@ (8002568 <calculateVel1+0x750>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	dd0c      	ble.n	800239a <calculateVel1+0x582>
 8002380:	4b78      	ldr	r3, [pc, #480]	@ (8002564 <calculateVel1+0x74c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8df 	bl	8000548 <__aeabi_f2d>
 800238a:	a369      	add	r3, pc, #420	@ (adr r3, 8002530 <calculateVel1+0x718>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fba4 	bl	8000adc <__aeabi_dcmplt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d114      	bne.n	80023c4 <calculateVel1+0x5ac>
			|| (last_control_output1 < 0 && control_output1 > HYSTERESIS)) {
 800239a:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <calculateVel1+0x750>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d510      	bpl.n	80023cc <calculateVel1+0x5b4>
 80023aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002564 <calculateVel1+0x74c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8ca 	bl	8000548 <__aeabi_f2d>
 80023b4:	a360      	add	r3, pc, #384	@ (adr r3, 8002538 <calculateVel1+0x720>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	f7fe fbad 	bl	8000b18 <__aeabi_dcmpgt>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <calculateVel1+0x5b4>
		control_output1 = last_control_output1; // Maintain last control output if within hysteresis
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <calculateVel1+0x750>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a66      	ldr	r2, [pc, #408]	@ (8002564 <calculateVel1+0x74c>)
 80023ca:	6013      	str	r3, [r2, #0]
	}

	realVel1 = vel1 / 2.0; // Scale factor
 80023cc:	4b67      	ldr	r3, [pc, #412]	@ (800256c <calculateVel1+0x754>)
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023da:	4b65      	ldr	r3, [pc, #404]	@ (8002570 <calculateVel1+0x758>)
 80023dc:	edc3 7a00 	vstr	s15, [r3]
	realRPM1 = rpm1 / 2.0;
 80023e0:	4b64      	ldr	r3, [pc, #400]	@ (8002574 <calculateVel1+0x75c>)
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023ee:	f7fe fa2d 	bl	800084c <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fbf5 	bl	8000be8 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a5d      	ldr	r2, [pc, #372]	@ (8002578 <calculateVel1+0x760>)
 8002402:	6013      	str	r3, [r2, #0]
	if(realVel1 <= 0.01 && velTag1 >= 0.0 ){
 8002404:	4b5a      	ldr	r3, [pc, #360]	@ (8002570 <calculateVel1+0x758>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f89d 	bl	8000548 <__aeabi_f2d>
 800240e:	a34c      	add	r3, pc, #304	@ (adr r3, 8002540 <calculateVel1+0x728>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe fb6c 	bl	8000af0 <__aeabi_dcmple>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <calculateVel1+0x61e>
 800241e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	db04      	blt.n	8002436 <calculateVel1+0x61e>
			realVel1 =0.0;
 800242c:	4b50      	ldr	r3, [pc, #320]	@ (8002570 <calculateVel1+0x758>)
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e017      	b.n	8002466 <calculateVel1+0x64e>
		}
		else if ( realVel1 >= -0.01 && velTag1 <= 0.0){
 8002436:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <calculateVel1+0x758>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f884 	bl	8000548 <__aeabi_f2d>
 8002440:	a341      	add	r3, pc, #260	@ (adr r3, 8002548 <calculateVel1+0x730>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe fb5d 	bl	8000b04 <__aeabi_dcmpge>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <calculateVel1+0x64e>
 8002450:	edd7 7a01 	vldr	s15, [r7, #4]
 8002454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	d803      	bhi.n	8002466 <calculateVel1+0x64e>
			realVel1 =0.0;
 800245e:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <calculateVel1+0x758>)
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
		}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output1 = fmax(-0.27, fmin(0.27, control_output1));
 8002466:	4b3f      	ldr	r3, [pc, #252]	@ (8002564 <calculateVel1+0x74c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f86c 	bl	8000548 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8002550 <calculateVel1+0x738>
 8002478:	ec43 2b10 	vmov	d0, r2, r3
 800247c:	f00b f9b6 	bl	800d7ec <fmin>
 8002480:	eeb0 7a40 	vmov.f32	s14, s0
 8002484:	eef0 7a60 	vmov.f32	s15, s1
 8002488:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8002558 <calculateVel1+0x740>
 800248c:	eeb0 0a47 	vmov.f32	s0, s14
 8002490:	eef0 0a67 	vmov.f32	s1, s15
 8002494:	f00b f980 	bl	800d798 <fmax>
 8002498:	ec53 2b10 	vmov	r2, r3, d0
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fba2 	bl	8000be8 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002564 <calculateVel1+0x74c>)
 80024a8:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag1 > 0) {
 80024aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	dd14      	ble.n	80024e2 <calculateVel1+0x6ca>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 80024b8:	4b30      	ldr	r3, [pc, #192]	@ (800257c <calculateVel1+0x764>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2,
 80024c0:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <calculateVel1+0x74c>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	f7ff fbf9 	bl	8001cc0 <calculate_pwm1>
 80024ce:	eef0 7a40 	vmov.f32	s15, s0
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <calculateVel1+0x764>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024da:	ee17 2a90 	vmov	r2, s15
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38
 80024e0:	e01a      	b.n	8002518 <calculateVel1+0x700>
				calculate_pwm1(control_output1));
	} else if (velTag1 < 0) {
 80024e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d513      	bpl.n	8002518 <calculateVel1+0x700>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1,
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <calculateVel1+0x74c>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eeb0 0a67 	vmov.f32	s0, s15
 80024fa:	f7ff fbe1 	bl	8001cc0 <calculate_pwm1>
 80024fe:	eef0 7a40 	vmov.f32	s15, s0
 8002502:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <calculateVel1+0x764>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800250a:	ee17 2a90 	vmov	r2, s15
 800250e:	635a      	str	r2, [r3, #52]	@ 0x34
				calculate_pwm1(control_output1));
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <calculateVel1+0x764>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	// Update last time and last control output
	last_time1 = current_time1;
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <calculateVel1+0x768>)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6013      	str	r3, [r2, #0]
	last_control_output1 = control_output1;
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <calculateVel1+0x74c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <calculateVel1+0x750>)
 8002524:	6013      	str	r3, [r2, #0]
}
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800252e:	bf00      	nop
 8002530:	eb851eb8 	.word	0xeb851eb8
 8002534:	bf9eb851 	.word	0xbf9eb851
 8002538:	eb851eb8 	.word	0xeb851eb8
 800253c:	3f9eb851 	.word	0x3f9eb851
 8002540:	47ae147b 	.word	0x47ae147b
 8002544:	3f847ae1 	.word	0x3f847ae1
 8002548:	47ae147b 	.word	0x47ae147b
 800254c:	bf847ae1 	.word	0xbf847ae1
 8002550:	147ae148 	.word	0x147ae148
 8002554:	3fd147ae 	.word	0x3fd147ae
 8002558:	147ae148 	.word	0x147ae148
 800255c:	bfd147ae 	.word	0xbfd147ae
 8002560:	c0140000 	.word	0xc0140000
 8002564:	20000404 	.word	0x20000404
 8002568:	20000410 	.word	0x20000410
 800256c:	20000400 	.word	0x20000400
 8002570:	20000428 	.word	0x20000428
 8002574:	200003f8 	.word	0x200003f8
 8002578:	2000042c 	.word	0x2000042c
 800257c:	2000077c 	.word	0x2000077c
 8002580:	2000041c 	.word	0x2000041c
 8002584:	00000000 	.word	0x00000000

08002588 <moving_average_filter2>:
float angular_position_deg2 = 0.0; // Angular position in degrees
float realVel2;
float realRPM2;

// Function to calculate exponential moving average
float moving_average_filter2(float new_velocity) {
 8002588:	b5b0      	push	{r4, r5, r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema2 = 0.0; // Initialize EMA variable
	ema2 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema2);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fd ffd8 	bl	8000548 <__aeabi_f2d>
 8002598:	a318      	add	r3, pc, #96	@ (adr r3, 80025fc <moving_average_filter2+0x74>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fe f82b 	bl	80005f8 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4614      	mov	r4, r2
 80025a8:	461d      	mov	r5, r3
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <moving_average_filter2+0x70>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ffca 	bl	8000548 <__aeabi_f2d>
 80025b4:	a30e      	add	r3, pc, #56	@ (adr r3, 80025f0 <moving_average_filter2+0x68>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f7fe f81d 	bl	80005f8 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f7fd fe61 	bl	800028c <__adddf3>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fb09 	bl	8000be8 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a07      	ldr	r2, [pc, #28]	@ (80025f8 <moving_average_filter2+0x70>)
 80025da:	6013      	str	r3, [r2, #0]
	return ema2;
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <moving_average_filter2+0x70>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	ee07 3a90 	vmov	s15, r3
}
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdb0      	pop	{r4, r5, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	9999999a 	.word	0x9999999a
 80025f4:	3fe99999 	.word	0x3fe99999
 80025f8:	20000524 	.word	0x20000524
 80025fc:	9999999a 	.word	0x9999999a
 8002600:	3fc99999 	.word	0x3fc99999
 8002604:	00000000 	.word	0x00000000

08002608 <calculate_pwm2>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm2(float desired_velocity) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8002612:	edd7 7a01 	vldr	s15, [r7, #4]
 8002616:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	d505      	bpl.n	800262c <calculate_pwm2+0x24>
		desired_velocity = -desired_velocity;
 8002620:	edd7 7a01 	vldr	s15, [r7, #4]
 8002624:	eef1 7a67 	vneg.f32	s15, s15
 8002628:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7fd ff8b 	bl	8000548 <__aeabi_f2d>
 8002632:	a310      	add	r3, pc, #64	@ (adr r3, 8002674 <calculate_pwm2+0x6c>)
 8002634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002638:	f7fe f908 	bl	800084c <__aeabi_ddiv>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <calculate_pwm2+0x68>)
 800264a:	f7fd ffd5 	bl	80005f8 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fac7 	bl	8000be8 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	ee07 3a90 	vmov	s15, r3
}
 8002660:	eeb0 0a67 	vmov.f32	s0, s15
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	f3af 8000 	nop.w
 8002670:	408f4000 	.word	0x408f4000
 8002674:	147ae148 	.word	0x147ae148
 8002678:	3fd147ae 	.word	0x3fd147ae

0800267c <PID_Controller2>:

// PID Controller Function with Anti-Windup
float PID_Controller2(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 800267c:	b480      	push	{r7}
 800267e:	b08d      	sub	sp, #52	@ 0x34
 8002680:	af00      	add	r7, sp, #0
 8002682:	ed87 0a07 	vstr	s0, [r7, #28]
 8002686:	edc7 0a06 	vstr	s1, [r7, #24]
 800268a:	ed87 1a05 	vstr	s2, [r7, #20]
 800268e:	6138      	str	r0, [r7, #16]
 8002690:	edc7 1a03 	vstr	s3, [r7, #12]
 8002694:	ed87 2a02 	vstr	s4, [r7, #8]
 8002698:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error2 = setpoint - measured_value;
 800269c:	ed97 7a02 	vldr	s14, [r7, #8]
 80026a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error2;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002750 <PID_Controller2+0xd4>
 80026ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	dd03      	ble.n	80026dc <PID_Controller2+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <PID_Controller2+0xd8>)
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e00c      	b.n	80026f6 <PID_Controller2+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002758 <PID_Controller2+0xdc>
 80026e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	d502      	bpl.n	80026f6 <PID_Controller2+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4a1a      	ldr	r2, [pc, #104]	@ (800275c <PID_Controller2+0xe0>)
 80026f4:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative2 = error2 - last_error;
 80026f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80026fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output2 = (Kp * error2) + (Ki * (*integral)) + (Kd * derivative2);
 8002706:	ed97 7a07 	vldr	s14, [r7, #28]
 800270a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800270e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	edd3 6a00 	vldr	s13, [r3]
 8002718:	edd7 7a06 	vldr	s15, [r7, #24]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002724:	edd7 6a05 	vldr	s13, [r7, #20]
 8002728:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800272c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002734:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error2;
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	60fb      	str	r3, [r7, #12]

	return output2; // Return the control output
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	ee07 3a90 	vmov	s15, r3
}
 8002742:	eeb0 0a67 	vmov.f32	s0, s15
 8002746:	3734      	adds	r7, #52	@ 0x34
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	42c80000 	.word	0x42c80000
 8002754:	42c80000 	.word	0x42c80000
 8002758:	c2c80000 	.word	0xc2c80000
 800275c:	c2c80000 	.word	0xc2c80000

08002760 <calculateVel2>:

int32_t current_pulse_count2 = 0;
float distance_traveled2 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel2(float velTag2, float current_time2) {
 8002760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	ed87 0a01 	vstr	s0, [r7, #4]
 800276c:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag2 is within the deadband
	if (fabs(velTag2) < DEAD_BAND) {
 8002770:	edd7 7a01 	vldr	s15, [r7, #4]
 8002774:	eef0 7ae7 	vabs.f32	s15, s15
 8002778:	ee17 0a90 	vmov	r0, s15
 800277c:	f7fd fee4 	bl	8000548 <__aeabi_f2d>
 8002780:	a382      	add	r3, pc, #520	@ (adr r3, 800298c <calculateVel2+0x22c>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fe f9a9 	bl	8000adc <__aeabi_dcmplt>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <calculateVel2+0x36>
		velTag2 = 0; // Set velTag2 to zero if within deadband
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag2 is 0
	if (velTag2 == 0) {
 8002796:	edd7 7a01 	vldr	s15, [r7, #4]
 800279a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800279e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a2:	d13c      	bne.n	800281e <calculateVel2+0xbe>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80027a4:	4b68      	ldr	r3, [pc, #416]	@ (8002948 <calculateVel2+0x1e8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80027ac:	4b66      	ldr	r3, [pc, #408]	@ (8002948 <calculateVel2+0x1e8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
		vel2 = 0.0;
 80027b4:	4b65      	ldr	r3, [pc, #404]	@ (800294c <calculateVel2+0x1ec>)
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 80027bc:	4b64      	ldr	r3, [pc, #400]	@ (8002950 <calculateVel2+0x1f0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm2 = 0.0;
 80027c4:	4963      	ldr	r1, [pc, #396]	@ (8002954 <calculateVel2+0x1f4>)
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9c1 2300 	strd	r2, r3, [r1]
		control_output2 = 0.0;
 80027d2:	4b61      	ldr	r3, [pc, #388]	@ (8002958 <calculateVel2+0x1f8>)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad2
		realVel2 = 0.0;
 80027da:	4b60      	ldr	r3, [pc, #384]	@ (800295c <calculateVel2+0x1fc>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
		realRPM2 = 0.0;
 80027e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002960 <calculateVel2+0x200>)
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
		integral1_2 = 0.0;
 80027ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002964 <calculateVel2+0x204>)
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
		last_error2 = 0.0;
 80027f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <calculateVel2+0x208>)
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
		last_control_output2 = 0.0;
 80027fa:	4b5c      	ldr	r3, [pc, #368]	@ (800296c <calculateVel2+0x20c>)
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
		distance_traveled2 = 0.0;
 8002802:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <calculateVel2+0x210>)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
		pulse_count2 = 0; // Reset pulse count
 800280a:	4b5a      	ldr	r3, [pc, #360]	@ (8002974 <calculateVel2+0x214>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
		last_velTag2 = velTag2; // Update last velTag2
 8002810:	4a59      	ldr	r2, [pc, #356]	@ (8002978 <calculateVel2+0x218>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8002816:	2064      	movs	r0, #100	@ 0x64
 8002818:	f002 fecc 	bl	80055b4 <HAL_Delay>
		return; // Exit the function
 800281c:	e327      	b.n	8002e6e <calculateVel2+0x70e>
	}

	// Calculate the time elapsed since the last update
	float delta_time2 = current_time2 - last_time2;
 800281e:	4b57      	ldr	r3, [pc, #348]	@ (800297c <calculateVel2+0x21c>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	ed97 7a00 	vldr	s14, [r7]
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count2 = __HAL_TIM_GET_COUNTER(&htim3);
 8002830:	4b47      	ldr	r3, [pc, #284]	@ (8002950 <calculateVel2+0x1f0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	461a      	mov	r2, r3
 8002838:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <calculateVel2+0x220>)
 800283a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800283c:	200a      	movs	r0, #10
 800283e:	f002 feb9 	bl	80055b4 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference2 = current_pulse_count2 - pulse_count2;
 8002842:	4b4f      	ldr	r3, [pc, #316]	@ (8002980 <calculateVel2+0x220>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	4b4a      	ldr	r3, [pc, #296]	@ (8002974 <calculateVel2+0x214>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm2 = fabs((float) pulse_difference2 / (float) PPR) * 60.0; // Always positive
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800285a:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 800285e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002862:	eef0 7ae7 	vabs.f32	s15, s15
 8002866:	ee17 0a90 	vmov	r0, s15
 800286a:	f7fd fe6d 	bl	8000548 <__aeabi_f2d>
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <calculateVel2+0x224>)
 8002874:	f7fd fec0 	bl	80005f8 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4935      	ldr	r1, [pc, #212]	@ (8002954 <calculateVel2+0x1f4>)
 800287e:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count2 = current_pulse_count2;
 8002882:	4b3f      	ldr	r3, [pc, #252]	@ (8002980 <calculateVel2+0x220>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <calculateVel2+0x214>)
 800288a:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm2 = fmax(0.0, fmin(250.0, rpm2));
 800288c:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <calculateVel2+0x1f4>)
 800288e:	ed93 7b00 	vldr	d7, [r3]
 8002892:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8002930 <calculateVel2+0x1d0>
 8002896:	eeb0 0a47 	vmov.f32	s0, s14
 800289a:	eef0 0a67 	vmov.f32	s1, s15
 800289e:	f00a ffa5 	bl	800d7ec <fmin>
 80028a2:	eeb0 7a40 	vmov.f32	s14, s0
 80028a6:	eef0 7a60 	vmov.f32	s15, s1
 80028aa:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8002938 <calculateVel2+0x1d8>
 80028ae:	eeb0 0a47 	vmov.f32	s0, s14
 80028b2:	eef0 0a67 	vmov.f32	s1, s15
 80028b6:	f00a ff6f 	bl	800d798 <fmax>
 80028ba:	eeb0 7a40 	vmov.f32	s14, s0
 80028be:	eef0 7a60 	vmov.f32	s15, s1
 80028c2:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <calculateVel2+0x1f4>)
 80028c4:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel2;
	if (pulse_difference2 < 0) {
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	da62      	bge.n	8002994 <calculateVel2+0x234>
		new_vel2 = -((rpm2 / 60.0) * dia2 * M_PI); // Negative velocity for reverse direction
 80028ce:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <calculateVel2+0x1f4>)
 80028d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <calculateVel2+0x224>)
 80028da:	f7fd ffb7 	bl	800084c <__aeabi_ddiv>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4614      	mov	r4, r2
 80028e4:	461d      	mov	r5, r3
 80028e6:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <calculateVel2+0x228>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fe2c 	bl	8000548 <__aeabi_f2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd fe7e 	bl	80005f8 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	a30e      	add	r3, pc, #56	@ (adr r3, 8002940 <calculateVel2+0x1e0>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd fe75 	bl	80005f8 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f967 	bl	8000be8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eef1 7a67 	vneg.f32	s15, s15
 8002924:	edc7 7a05 	vstr	s15, [r7, #20]
 8002928:	e05c      	b.n	80029e4 <calculateVel2+0x284>
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w
 8002930:	00000000 	.word	0x00000000
 8002934:	406f4000 	.word	0x406f4000
	...
 8002940:	54442d18 	.word	0x54442d18
 8002944:	400921fb 	.word	0x400921fb
 8002948:	2000065c 	.word	0x2000065c
 800294c:	20000448 	.word	0x20000448
 8002950:	20000614 	.word	0x20000614
 8002954:	20000440 	.word	0x20000440
 8002958:	2000044c 	.word	0x2000044c
 800295c:	20000470 	.word	0x20000470
 8002960:	20000474 	.word	0x20000474
 8002964:	20000450 	.word	0x20000450
 8002968:	20000454 	.word	0x20000454
 800296c:	20000458 	.word	0x20000458
 8002970:	2000047c 	.word	0x2000047c
 8002974:	20000438 	.word	0x20000438
 8002978:	2000045c 	.word	0x2000045c
 800297c:	20000464 	.word	0x20000464
 8002980:	20000478 	.word	0x20000478
 8002984:	404e0000 	.word	0x404e0000
 8002988:	20000020 	.word	0x20000020
 800298c:	47ae147b 	.word	0x47ae147b
 8002990:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel2 = (rpm2 / 60.0) * dia2 * M_PI; // Positive velocity for forward direction
 8002994:	4bac      	ldr	r3, [pc, #688]	@ (8002c48 <calculateVel2+0x4e8>)
 8002996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	4bab      	ldr	r3, [pc, #684]	@ (8002c4c <calculateVel2+0x4ec>)
 80029a0:	f7fd ff54 	bl	800084c <__aeabi_ddiv>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002c50 <calculateVel2+0x4f0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fdc9 	bl	8000548 <__aeabi_f2d>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4620      	mov	r0, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	f7fd fe1b 	bl	80005f8 <__aeabi_dmul>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	a397      	add	r3, pc, #604	@ (adr r3, 8002c28 <calculateVel2+0x4c8>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fd fe12 	bl	80005f8 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f7fe f904 	bl	8000be8 <__aeabi_d2f>
 80029e0:	4603      	mov	r3, r0
 80029e2:	617b      	str	r3, [r7, #20]
	}

	// Apply moving average filter for velocity
	//vel2 = moving_average_filter2(new_vel2);
	// Constrain the velocity to the range [-1, 1]
	vel2 = fmax(-1.0, fmin(1.0, moving_average_filter2(new_vel2)));
 80029e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80029e8:	f7ff fdce 	bl	8002588 <moving_average_filter2>
 80029ec:	ee10 3a10 	vmov	r3, s0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fda9 	bl	8000548 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002c30 <calculateVel2+0x4d0>
 80029fe:	ec43 2b10 	vmov	d0, r2, r3
 8002a02:	f00a fef3 	bl	800d7ec <fmin>
 8002a06:	eeb0 7a40 	vmov.f32	s14, s0
 8002a0a:	eef0 7a60 	vmov.f32	s15, s1
 8002a0e:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8002c38 <calculateVel2+0x4d8>
 8002a12:	eeb0 0a47 	vmov.f32	s0, s14
 8002a16:	eef0 0a67 	vmov.f32	s1, s15
 8002a1a:	f00a febd 	bl	800d798 <fmax>
 8002a1e:	ec53 2b10 	vmov	r2, r3, d0
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f7fe f8df 	bl	8000be8 <__aeabi_d2f>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a89      	ldr	r2, [pc, #548]	@ (8002c54 <calculateVel2+0x4f4>)
 8002a2e:	6013      	str	r3, [r2, #0]
	// Update position based on velocity and elapsed time
	distance_traveled2 += vel2 * (delta_time2 / 1000.0); // Linear distance traveled in meters
 8002a30:	4b89      	ldr	r3, [pc, #548]	@ (8002c58 <calculateVel2+0x4f8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd87 	bl	8000548 <__aeabi_f2d>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	460d      	mov	r5, r1
 8002a3e:	4b85      	ldr	r3, [pc, #532]	@ (8002c54 <calculateVel2+0x4f4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd80 	bl	8000548 <__aeabi_f2d>
 8002a48:	4680      	mov	r8, r0
 8002a4a:	4689      	mov	r9, r1
 8002a4c:	6938      	ldr	r0, [r7, #16]
 8002a4e:	f7fd fd7b 	bl	8000548 <__aeabi_f2d>
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b81      	ldr	r3, [pc, #516]	@ (8002c5c <calculateVel2+0x4fc>)
 8002a58:	f7fd fef8 	bl	800084c <__aeabi_ddiv>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4640      	mov	r0, r8
 8002a62:	4649      	mov	r1, r9
 8002a64:	f7fd fdc8 	bl	80005f8 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	4629      	mov	r1, r5
 8002a70:	f7fd fc0c 	bl	800028c <__adddf3>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f8b4 	bl	8000be8 <__aeabi_d2f>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a75      	ldr	r2, [pc, #468]	@ (8002c58 <calculateVel2+0x4f8>)
 8002a84:	6013      	str	r3, [r2, #0]
	angular_position_rad2 += distance_traveled2 / (dia2 / 2.0); // Update angular position in radians
 8002a86:	4b76      	ldr	r3, [pc, #472]	@ (8002c60 <calculateVel2+0x500>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd5c 	bl	8000548 <__aeabi_f2d>
 8002a90:	4604      	mov	r4, r0
 8002a92:	460d      	mov	r5, r1
 8002a94:	4b70      	ldr	r3, [pc, #448]	@ (8002c58 <calculateVel2+0x4f8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fd55 	bl	8000548 <__aeabi_f2d>
 8002a9e:	4680      	mov	r8, r0
 8002aa0:	4689      	mov	r9, r1
 8002aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c50 <calculateVel2+0x4f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fd4e 	bl	8000548 <__aeabi_f2d>
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ab4:	f7fd feca 	bl	800084c <__aeabi_ddiv>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4640      	mov	r0, r8
 8002abe:	4649      	mov	r1, r9
 8002ac0:	f7fd fec4 	bl	800084c <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4620      	mov	r0, r4
 8002aca:	4629      	mov	r1, r5
 8002acc:	f7fd fbde 	bl	800028c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f886 	bl	8000be8 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a60      	ldr	r2, [pc, #384]	@ (8002c60 <calculateVel2+0x500>)
 8002ae0:	6013      	str	r3, [r2, #0]
	angular_position_deg2 = angular_position_rad2 * (180.0 / M_PI); // Convert to degrees
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c60 <calculateVel2+0x500>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd2e 	bl	8000548 <__aeabi_f2d>
 8002aec:	a354      	add	r3, pc, #336	@ (adr r3, 8002c40 <calculateVel2+0x4e0>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fd81 	bl	80005f8 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f873 	bl	8000be8 <__aeabi_d2f>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4a57      	ldr	r2, [pc, #348]	@ (8002c64 <calculateVel2+0x504>)
 8002b06:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate2 = estimate2; // Predicted state (previous estimate)
 8002b08:	4b57      	ldr	r3, [pc, #348]	@ (8002c68 <calculateVel2+0x508>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a56      	ldr	r2, [pc, #344]	@ (8002c68 <calculateVel2+0x508>)
 8002b0e:	6013      	str	r3, [r2, #0]
	error_covariance2 += process_noise2; // Update error covariance
 8002b10:	4b56      	ldr	r3, [pc, #344]	@ (8002c6c <calculateVel2+0x50c>)
 8002b12:	ed93 7a00 	vldr	s14, [r3]
 8002b16:	4b56      	ldr	r3, [pc, #344]	@ (8002c70 <calculateVel2+0x510>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	4b52      	ldr	r3, [pc, #328]	@ (8002c6c <calculateVel2+0x50c>)
 8002b22:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain2 = error_covariance2 / (error_covariance2 + measurement_noise2); // Calculate Kalman gain
 8002b26:	4b51      	ldr	r3, [pc, #324]	@ (8002c6c <calculateVel2+0x50c>)
 8002b28:	edd3 6a00 	vldr	s13, [r3]
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c6c <calculateVel2+0x50c>)
 8002b2e:	ed93 7a00 	vldr	s14, [r3]
 8002b32:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <calculateVel2+0x514>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b40:	4b4d      	ldr	r3, [pc, #308]	@ (8002c78 <calculateVel2+0x518>)
 8002b42:	edc3 7a00 	vstr	s15, [r3]
	estimate2 += kalman_gain2 * (vel2 - estimate2); // Update estimate with measurement
 8002b46:	4b43      	ldr	r3, [pc, #268]	@ (8002c54 <calculateVel2+0x4f4>)
 8002b48:	ed93 7a00 	vldr	s14, [r3]
 8002b4c:	4b46      	ldr	r3, [pc, #280]	@ (8002c68 <calculateVel2+0x508>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b56:	4b48      	ldr	r3, [pc, #288]	@ (8002c78 <calculateVel2+0x518>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <calculateVel2+0x508>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c68 <calculateVel2+0x508>)
 8002b6c:	edc3 7a00 	vstr	s15, [r3]
	error_covariance2 = (1 - kalman_gain2) * error_covariance2; // Update error covariance
 8002b70:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <calculateVel2+0x518>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c6c <calculateVel2+0x50c>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b88:	4b38      	ldr	r3, [pc, #224]	@ (8002c6c <calculateVel2+0x50c>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output2 = PID_Controller2(Kp2, Ki2, Kd2, &integral1_2, last_error2,
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <calculateVel2+0x51c>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	4b3a      	ldr	r3, [pc, #232]	@ (8002c80 <calculateVel2+0x520>)
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c84 <calculateVel2+0x524>)
 8002b9c:	edd3 6a00 	vldr	s13, [r3]
 8002ba0:	4b39      	ldr	r3, [pc, #228]	@ (8002c88 <calculateVel2+0x528>)
 8002ba2:	ed93 6a00 	vldr	s12, [r3]
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <calculateVel2+0x4f4>)
 8002ba8:	edd3 5a00 	vldr	s11, [r3]
 8002bac:	eef0 2a65 	vmov.f32	s5, s11
 8002bb0:	ed97 2a01 	vldr	s4, [r7, #4]
 8002bb4:	eef0 1a46 	vmov.f32	s3, s12
 8002bb8:	4834      	ldr	r0, [pc, #208]	@ (8002c8c <calculateVel2+0x52c>)
 8002bba:	eeb0 1a66 	vmov.f32	s2, s13
 8002bbe:	eef0 0a47 	vmov.f32	s1, s14
 8002bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc6:	f7ff fd59 	bl	800267c <PID_Controller2>
 8002bca:	eef0 7a40 	vmov.f32	s15, s0
 8002bce:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <calculateVel2+0x530>)
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
			velTag2, vel2);

	// Implement ramping to control output
	if (fabs(control_output2 - last_control_output2) > RAMP_RATE) {
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <calculateVel2+0x530>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	4b2e      	ldr	r3, [pc, #184]	@ (8002c94 <calculateVel2+0x534>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	eef0 7ae7 	vabs.f32	s15, s15
 8002be8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	dd60      	ble.n	8002cb8 <calculateVel2+0x558>
		control_output2 = last_control_output2
				+ (control_output2 > last_control_output2 ?
 8002bf6:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <calculateVel2+0x534>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fca4 	bl	8000548 <__aeabi_f2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4922      	ldr	r1, [pc, #136]	@ (8002c90 <calculateVel2+0x530>)
 8002c06:	ed91 7a00 	vldr	s14, [r1]
 8002c0a:	4922      	ldr	r1, [pc, #136]	@ (8002c94 <calculateVel2+0x534>)
 8002c0c:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 8002c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	dd40      	ble.n	8002c9c <calculateVel2+0x53c>
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	491e      	ldr	r1, [pc, #120]	@ (8002c98 <calculateVel2+0x538>)
 8002c20:	e03f      	b.n	8002ca2 <calculateVel2+0x542>
 8002c22:	bf00      	nop
 8002c24:	f3af 8000 	nop.w
 8002c28:	54442d18 	.word	0x54442d18
 8002c2c:	400921fb 	.word	0x400921fb
 8002c30:	00000000 	.word	0x00000000
 8002c34:	3ff00000 	.word	0x3ff00000
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	bff00000 	.word	0xbff00000
 8002c40:	1a63c1f8 	.word	0x1a63c1f8
 8002c44:	404ca5dc 	.word	0x404ca5dc
 8002c48:	20000440 	.word	0x20000440
 8002c4c:	404e0000 	.word	0x404e0000
 8002c50:	20000020 	.word	0x20000020
 8002c54:	20000448 	.word	0x20000448
 8002c58:	2000047c 	.word	0x2000047c
 8002c5c:	408f4000 	.word	0x408f4000
 8002c60:	20000468 	.word	0x20000468
 8002c64:	2000046c 	.word	0x2000046c
 8002c68:	20000460 	.word	0x20000460
 8002c6c:	20000034 	.word	0x20000034
 8002c70:	20000038 	.word	0x20000038
 8002c74:	2000003c 	.word	0x2000003c
 8002c78:	20000030 	.word	0x20000030
 8002c7c:	20000024 	.word	0x20000024
 8002c80:	20000028 	.word	0x20000028
 8002c84:	2000002c 	.word	0x2000002c
 8002c88:	20000454 	.word	0x20000454
 8002c8c:	20000450 	.word	0x20000450
 8002c90:	2000044c 	.word	0x2000044c
 8002c94:	20000458 	.word	0x20000458
 8002c98:	40140000 	.word	0x40140000
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	4981      	ldr	r1, [pc, #516]	@ (8002ea8 <calculateVel2+0x748>)
				+ (control_output2 > last_control_output2 ?
 8002ca2:	f7fd faf3 	bl	800028c <__adddf3>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fd ff9b 	bl	8000be8 <__aeabi_d2f>
 8002cb2:	4603      	mov	r3, r0
		control_output2 = last_control_output2
 8002cb4:	4a7d      	ldr	r2, [pc, #500]	@ (8002eac <calculateVel2+0x74c>)
 8002cb6:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output2 > 0 && control_output2 < -HYSTERESIS)
 8002cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8002eb0 <calculateVel2+0x750>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc6:	dd0c      	ble.n	8002ce2 <calculateVel2+0x582>
 8002cc8:	4b78      	ldr	r3, [pc, #480]	@ (8002eac <calculateVel2+0x74c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc3b 	bl	8000548 <__aeabi_f2d>
 8002cd2:	a369      	add	r3, pc, #420	@ (adr r3, 8002e78 <calculateVel2+0x718>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd ff00 	bl	8000adc <__aeabi_dcmplt>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d114      	bne.n	8002d0c <calculateVel2+0x5ac>
			|| (last_control_output2 < 0 && control_output2 > HYSTERESIS)) {
 8002ce2:	4b73      	ldr	r3, [pc, #460]	@ (8002eb0 <calculateVel2+0x750>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf0:	d510      	bpl.n	8002d14 <calculateVel2+0x5b4>
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8002eac <calculateVel2+0x74c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc26 	bl	8000548 <__aeabi_f2d>
 8002cfc:	a360      	add	r3, pc, #384	@ (adr r3, 8002e80 <calculateVel2+0x720>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd ff09 	bl	8000b18 <__aeabi_dcmpgt>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <calculateVel2+0x5b4>
		control_output2 = last_control_output2; // Maintain last control output if within hysteresis
 8002d0c:	4b68      	ldr	r3, [pc, #416]	@ (8002eb0 <calculateVel2+0x750>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a66      	ldr	r2, [pc, #408]	@ (8002eac <calculateVel2+0x74c>)
 8002d12:	6013      	str	r3, [r2, #0]
	}

	realVel2 = vel2 / 2.0; // Scale factor
 8002d14:	4b67      	ldr	r3, [pc, #412]	@ (8002eb4 <calculateVel2+0x754>)
 8002d16:	ed93 7a00 	vldr	s14, [r3]
 8002d1a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d22:	4b65      	ldr	r3, [pc, #404]	@ (8002eb8 <calculateVel2+0x758>)
 8002d24:	edc3 7a00 	vstr	s15, [r3]
	realRPM2 = rpm2 / 2.0;
 8002d28:	4b64      	ldr	r3, [pc, #400]	@ (8002ebc <calculateVel2+0x75c>)
 8002d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d36:	f7fd fd89 	bl	800084c <__aeabi_ddiv>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff51 	bl	8000be8 <__aeabi_d2f>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec0 <calculateVel2+0x760>)
 8002d4a:	6013      	str	r3, [r2, #0]
	if(realVel2 <= 0.01 && velTag2 >= 0.0 ){
 8002d4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb8 <calculateVel2+0x758>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fbf9 	bl	8000548 <__aeabi_f2d>
 8002d56:	a34c      	add	r3, pc, #304	@ (adr r3, 8002e88 <calculateVel2+0x728>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f7fd fec8 	bl	8000af0 <__aeabi_dcmple>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <calculateVel2+0x61e>
 8002d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	db04      	blt.n	8002d7e <calculateVel2+0x61e>
		realVel2 =0.0;
 8002d74:	4b50      	ldr	r3, [pc, #320]	@ (8002eb8 <calculateVel2+0x758>)
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e017      	b.n	8002dae <calculateVel2+0x64e>
	}
	else if ( realVel2 >= -0.01 && velTag2 <= 0.0){
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb8 <calculateVel2+0x758>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fbe0 	bl	8000548 <__aeabi_f2d>
 8002d88:	a341      	add	r3, pc, #260	@ (adr r3, 8002e90 <calculateVel2+0x730>)
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f7fd feb9 	bl	8000b04 <__aeabi_dcmpge>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <calculateVel2+0x64e>
 8002d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da4:	d803      	bhi.n	8002dae <calculateVel2+0x64e>
		realVel2 =0.0;
 8002da6:	4b44      	ldr	r3, [pc, #272]	@ (8002eb8 <calculateVel2+0x758>)
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
	}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output2 = fmax(-0.27, fmin(0.27, control_output2));
 8002dae:	4b3f      	ldr	r3, [pc, #252]	@ (8002eac <calculateVel2+0x74c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fbc8 	bl	8000548 <__aeabi_f2d>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8002e98 <calculateVel2+0x738>
 8002dc0:	ec43 2b10 	vmov	d0, r2, r3
 8002dc4:	f00a fd12 	bl	800d7ec <fmin>
 8002dc8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dcc:	eef0 7a60 	vmov.f32	s15, s1
 8002dd0:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8002ea0 <calculateVel2+0x740>
 8002dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002dd8:	eef0 0a67 	vmov.f32	s1, s15
 8002ddc:	f00a fcdc 	bl	800d798 <fmax>
 8002de0:	ec53 2b10 	vmov	r2, r3, d0
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7fd fefe 	bl	8000be8 <__aeabi_d2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4a2f      	ldr	r2, [pc, #188]	@ (8002eac <calculateVel2+0x74c>)
 8002df0:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag2 > 0) {
 8002df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfe:	dd14      	ble.n	8002e2a <calculateVel2+0x6ca>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 8002e00:	4b2a      	ldr	r3, [pc, #168]	@ (8002eac <calculateVel2+0x74c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0a:	f7ff fbfd 	bl	8002608 <calculate_pwm2>
 8002e0e:	eef0 7a40 	vmov.f32	s15, s0
 8002e12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <calculateVel2+0x764>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1a:	ee17 2a90 	vmov	r2, s15
 8002e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
				calculate_pwm2(control_output2));
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8002e20:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <calculateVel2+0x764>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e28:	e01a      	b.n	8002e60 <calculateVel2+0x700>
	} else if (velTag2 < 0) {
 8002e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e36:	d513      	bpl.n	8002e60 <calculateVel2+0x700>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002e38:	4b22      	ldr	r3, [pc, #136]	@ (8002ec4 <calculateVel2+0x764>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,
 8002e40:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <calculateVel2+0x74c>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4a:	f7ff fbdd 	bl	8002608 <calculate_pwm2>
 8002e4e:	eef0 7a40 	vmov.f32	s15, s0
 8002e52:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec4 <calculateVel2+0x764>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5a:	ee17 2a90 	vmov	r2, s15
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
				calculate_pwm2(control_output2));

	}

	// Update last time and last control output
	last_time2 = current_time2;
 8002e60:	4a19      	ldr	r2, [pc, #100]	@ (8002ec8 <calculateVel2+0x768>)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6013      	str	r3, [r2, #0]
	last_control_output2 = control_output2;
 8002e66:	4b11      	ldr	r3, [pc, #68]	@ (8002eac <calculateVel2+0x74c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <calculateVel2+0x750>)
 8002e6c:	6013      	str	r3, [r2, #0]
}
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e76:	bf00      	nop
 8002e78:	eb851eb8 	.word	0xeb851eb8
 8002e7c:	bf9eb851 	.word	0xbf9eb851
 8002e80:	eb851eb8 	.word	0xeb851eb8
 8002e84:	3f9eb851 	.word	0x3f9eb851
 8002e88:	47ae147b 	.word	0x47ae147b
 8002e8c:	3f847ae1 	.word	0x3f847ae1
 8002e90:	47ae147b 	.word	0x47ae147b
 8002e94:	bf847ae1 	.word	0xbf847ae1
 8002e98:	147ae148 	.word	0x147ae148
 8002e9c:	3fd147ae 	.word	0x3fd147ae
 8002ea0:	147ae148 	.word	0x147ae148
 8002ea4:	bfd147ae 	.word	0xbfd147ae
 8002ea8:	c0140000 	.word	0xc0140000
 8002eac:	2000044c 	.word	0x2000044c
 8002eb0:	20000458 	.word	0x20000458
 8002eb4:	20000448 	.word	0x20000448
 8002eb8:	20000470 	.word	0x20000470
 8002ebc:	20000440 	.word	0x20000440
 8002ec0:	20000474 	.word	0x20000474
 8002ec4:	2000065c 	.word	0x2000065c
 8002ec8:	20000464 	.word	0x20000464
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <moving_average_filter3>:
float angular_position_deg3 = 0.0; // Angular position in degrees
float realVel3;
float realRPM3;

// Function to calculate exponential moving average
float moving_average_filter3(float new_velocity) {
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema3 = 0.0; // Initialize EMA variable
	ema3 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema3);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fd fb34 	bl	8000548 <__aeabi_f2d>
 8002ee0:	a318      	add	r3, pc, #96	@ (adr r3, 8002f44 <moving_average_filter3+0x74>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f7fd fb87 	bl	80005f8 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4614      	mov	r4, r2
 8002ef0:	461d      	mov	r5, r3
 8002ef2:	4b13      	ldr	r3, [pc, #76]	@ (8002f40 <moving_average_filter3+0x70>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb26 	bl	8000548 <__aeabi_f2d>
 8002efc:	a30e      	add	r3, pc, #56	@ (adr r3, 8002f38 <moving_average_filter3+0x68>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fb79 	bl	80005f8 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f7fd f9bd 	bl	800028c <__adddf3>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7fd fe65 	bl	8000be8 <__aeabi_d2f>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4a07      	ldr	r2, [pc, #28]	@ (8002f40 <moving_average_filter3+0x70>)
 8002f22:	6013      	str	r3, [r2, #0]
	return ema3;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <moving_average_filter3+0x70>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	ee07 3a90 	vmov	s15, r3
}
 8002f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	9999999a 	.word	0x9999999a
 8002f3c:	3fe99999 	.word	0x3fe99999
 8002f40:	20000528 	.word	0x20000528
 8002f44:	9999999a 	.word	0x9999999a
 8002f48:	3fc99999 	.word	0x3fc99999
 8002f4c:	00000000 	.word	0x00000000

08002f50 <calculate_pwm3>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm3(float desired_velocity) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8002f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	d505      	bpl.n	8002f74 <calculate_pwm3+0x24>
		desired_velocity = -desired_velocity;
 8002f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f6c:	eef1 7a67 	vneg.f32	s15, s15
 8002f70:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd fae7 	bl	8000548 <__aeabi_f2d>
 8002f7a:	a310      	add	r3, pc, #64	@ (adr r3, 8002fbc <calculate_pwm3+0x6c>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fc64 	bl	800084c <__aeabi_ddiv>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <calculate_pwm3+0x68>)
 8002f92:	f7fd fb31 	bl	80005f8 <__aeabi_dmul>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f7fd fe23 	bl	8000be8 <__aeabi_d2f>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	ee07 3a90 	vmov	s15, r3
}
 8002fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	f3af 8000 	nop.w
 8002fb8:	408f4000 	.word	0x408f4000
 8002fbc:	147ae148 	.word	0x147ae148
 8002fc0:	3fd147ae 	.word	0x3fd147ae

08002fc4 <PID_Controller3>:

// PID Controller Function with Anti-Windup
float PID_Controller3(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b08d      	sub	sp, #52	@ 0x34
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	ed87 0a07 	vstr	s0, [r7, #28]
 8002fce:	edc7 0a06 	vstr	s1, [r7, #24]
 8002fd2:	ed87 1a05 	vstr	s2, [r7, #20]
 8002fd6:	6138      	str	r0, [r7, #16]
 8002fd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8002fdc:	ed87 2a02 	vstr	s4, [r7, #8]
 8002fe0:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error3 = setpoint - measured_value;
 8002fe4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error3;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	ed93 7a00 	vldr	s14, [r3]
 8002ffa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003098 <PID_Controller3+0xd4>
 8003012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	dd03      	ble.n	8003024 <PID_Controller3+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <PID_Controller3+0xd8>)
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e00c      	b.n	800303e <PID_Controller3+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80030a0 <PID_Controller3+0xdc>
 800302e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	d502      	bpl.n	800303e <PID_Controller3+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <PID_Controller3+0xe0>)
 800303c:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative3 = error3 - last_error;
 800303e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003042:	edd7 7a03 	vldr	s15, [r7, #12]
 8003046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output3 = (Kp * error3) + (Ki * (*integral)) + (Kd * derivative3);
 800304e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003052:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	edd3 6a00 	vldr	s13, [r3]
 8003060:	edd7 7a06 	vldr	s15, [r7, #24]
 8003064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	edd7 6a05 	vldr	s13, [r7, #20]
 8003070:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error3;
 8003080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003082:	60fb      	str	r3, [r7, #12]

	return output3; // Return the control output
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	ee07 3a90 	vmov	s15, r3
}
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	3734      	adds	r7, #52	@ 0x34
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	42c80000 	.word	0x42c80000
 800309c:	42c80000 	.word	0x42c80000
 80030a0:	c2c80000 	.word	0xc2c80000
 80030a4:	c2c80000 	.word	0xc2c80000

080030a8 <calculateVel3>:

int32_t current_pulse_count3 = 0;
float distance_traveled3 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel3(float velTag3, float current_time3) {
 80030a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80030b4:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag3 is within the deadband
	if (fabs(velTag3) < DEAD_BAND) {
 80030b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030bc:	eef0 7ae7 	vabs.f32	s15, s15
 80030c0:	ee17 0a90 	vmov	r0, s15
 80030c4:	f7fd fa40 	bl	8000548 <__aeabi_f2d>
 80030c8:	a382      	add	r3, pc, #520	@ (adr r3, 80032d4 <calculateVel3+0x22c>)
 80030ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ce:	f7fd fd05 	bl	8000adc <__aeabi_dcmplt>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <calculateVel3+0x36>
		velTag3 = 0; // Set velTag3 to zero if within deadband
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag3 is 0
	if (velTag3 == 0) {
 80030de:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	d13c      	bne.n	8003166 <calculateVel3+0xbe>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80030ec:	4b68      	ldr	r3, [pc, #416]	@ (8003290 <calculateVel3+0x1e8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80030f4:	4b66      	ldr	r3, [pc, #408]	@ (8003290 <calculateVel3+0x1e8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2200      	movs	r2, #0
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40
		vel3 = 0.0;
 80030fc:	4b65      	ldr	r3, [pc, #404]	@ (8003294 <calculateVel3+0x1ec>)
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8003104:	4b64      	ldr	r3, [pc, #400]	@ (8003298 <calculateVel3+0x1f0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2200      	movs	r2, #0
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm3 = 0.0;
 800310c:	4963      	ldr	r1, [pc, #396]	@ (800329c <calculateVel3+0x1f4>)
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9c1 2300 	strd	r2, r3, [r1]
		control_output3 = 0.0;
 800311a:	4b61      	ldr	r3, [pc, #388]	@ (80032a0 <calculateVel3+0x1f8>)
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad3
		realVel3 = 0.0;
 8003122:	4b60      	ldr	r3, [pc, #384]	@ (80032a4 <calculateVel3+0x1fc>)
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
		realRPM3 = 0.0;
 800312a:	4b5f      	ldr	r3, [pc, #380]	@ (80032a8 <calculateVel3+0x200>)
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
		integral1_3 = 0.0;
 8003132:	4b5e      	ldr	r3, [pc, #376]	@ (80032ac <calculateVel3+0x204>)
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
		last_error3 = 0.0;
 800313a:	4b5d      	ldr	r3, [pc, #372]	@ (80032b0 <calculateVel3+0x208>)
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
		last_control_output3 = 0.0;
 8003142:	4b5c      	ldr	r3, [pc, #368]	@ (80032b4 <calculateVel3+0x20c>)
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
		distance_traveled3 = 0.0;
 800314a:	4b5b      	ldr	r3, [pc, #364]	@ (80032b8 <calculateVel3+0x210>)
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
		pulse_count3 = 0; // Reset pulse count
 8003152:	4b5a      	ldr	r3, [pc, #360]	@ (80032bc <calculateVel3+0x214>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
		last_velTag3 = velTag3; // Update last velTag3
 8003158:	4a59      	ldr	r2, [pc, #356]	@ (80032c0 <calculateVel3+0x218>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 800315e:	2064      	movs	r0, #100	@ 0x64
 8003160:	f002 fa28 	bl	80055b4 <HAL_Delay>
		return; // Exit the function
 8003164:	e327      	b.n	80037b6 <calculateVel3+0x70e>
	}

	// Calculate the time elapsed since the last update
	float delta_time3 = current_time3 - last_time3;
 8003166:	4b57      	ldr	r3, [pc, #348]	@ (80032c4 <calculateVel3+0x21c>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ed97 7a00 	vldr	s14, [r7]
 8003170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003174:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count3 = __HAL_TIM_GET_COUNTER(&htim5);
 8003178:	4b47      	ldr	r3, [pc, #284]	@ (8003298 <calculateVel3+0x1f0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	461a      	mov	r2, r3
 8003180:	4b51      	ldr	r3, [pc, #324]	@ (80032c8 <calculateVel3+0x220>)
 8003182:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8003184:	200a      	movs	r0, #10
 8003186:	f002 fa15 	bl	80055b4 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference3 = current_pulse_count3 - pulse_count3;
 800318a:	4b4f      	ldr	r3, [pc, #316]	@ (80032c8 <calculateVel3+0x220>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	4b4a      	ldr	r3, [pc, #296]	@ (80032bc <calculateVel3+0x214>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm3 = fabs((float) pulse_difference3 / (float) PPR) * 60.0; // Always positive
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031a2:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80031a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031aa:	eef0 7ae7 	vabs.f32	s15, s15
 80031ae:	ee17 0a90 	vmov	r0, s15
 80031b2:	f7fd f9c9 	bl	8000548 <__aeabi_f2d>
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b44      	ldr	r3, [pc, #272]	@ (80032cc <calculateVel3+0x224>)
 80031bc:	f7fd fa1c 	bl	80005f8 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4935      	ldr	r1, [pc, #212]	@ (800329c <calculateVel3+0x1f4>)
 80031c6:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count3 = current_pulse_count3;
 80031ca:	4b3f      	ldr	r3, [pc, #252]	@ (80032c8 <calculateVel3+0x220>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <calculateVel3+0x214>)
 80031d2:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm3 = fmax(0.0, fmin(250.0, rpm3));
 80031d4:	4b31      	ldr	r3, [pc, #196]	@ (800329c <calculateVel3+0x1f4>)
 80031d6:	ed93 7b00 	vldr	d7, [r3]
 80031da:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003278 <calculateVel3+0x1d0>
 80031de:	eeb0 0a47 	vmov.f32	s0, s14
 80031e2:	eef0 0a67 	vmov.f32	s1, s15
 80031e6:	f00a fb01 	bl	800d7ec <fmin>
 80031ea:	eeb0 7a40 	vmov.f32	s14, s0
 80031ee:	eef0 7a60 	vmov.f32	s15, s1
 80031f2:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8003280 <calculateVel3+0x1d8>
 80031f6:	eeb0 0a47 	vmov.f32	s0, s14
 80031fa:	eef0 0a67 	vmov.f32	s1, s15
 80031fe:	f00a facb 	bl	800d798 <fmax>
 8003202:	eeb0 7a40 	vmov.f32	s14, s0
 8003206:	eef0 7a60 	vmov.f32	s15, s1
 800320a:	4b24      	ldr	r3, [pc, #144]	@ (800329c <calculateVel3+0x1f4>)
 800320c:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel3;
	if (pulse_difference3 < 0) {
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da62      	bge.n	80032dc <calculateVel3+0x234>
		new_vel3 = -((rpm3 / 60.0) * dia3 * M_PI); // Negative velocity for reverse direction
 8003216:	4b21      	ldr	r3, [pc, #132]	@ (800329c <calculateVel3+0x1f4>)
 8003218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	4b2a      	ldr	r3, [pc, #168]	@ (80032cc <calculateVel3+0x224>)
 8003222:	f7fd fb13 	bl	800084c <__aeabi_ddiv>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4614      	mov	r4, r2
 800322c:	461d      	mov	r5, r3
 800322e:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <calculateVel3+0x228>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f988 	bl	8000548 <__aeabi_f2d>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4620      	mov	r0, r4
 800323e:	4629      	mov	r1, r5
 8003240:	f7fd f9da 	bl	80005f8 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003288 <calculateVel3+0x1e0>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	f7fd f9d1 	bl	80005f8 <__aeabi_dmul>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f7fd fcc3 	bl	8000be8 <__aeabi_d2f>
 8003262:	4603      	mov	r3, r0
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef1 7a67 	vneg.f32	s15, s15
 800326c:	edc7 7a05 	vstr	s15, [r7, #20]
 8003270:	e05c      	b.n	800332c <calculateVel3+0x284>
 8003272:	bf00      	nop
 8003274:	f3af 8000 	nop.w
 8003278:	00000000 	.word	0x00000000
 800327c:	406f4000 	.word	0x406f4000
	...
 8003288:	54442d18 	.word	0x54442d18
 800328c:	400921fb 	.word	0x400921fb
 8003290:	200005cc 	.word	0x200005cc
 8003294:	20000490 	.word	0x20000490
 8003298:	200006a4 	.word	0x200006a4
 800329c:	20000488 	.word	0x20000488
 80032a0:	20000494 	.word	0x20000494
 80032a4:	200004b8 	.word	0x200004b8
 80032a8:	200004bc 	.word	0x200004bc
 80032ac:	20000498 	.word	0x20000498
 80032b0:	2000049c 	.word	0x2000049c
 80032b4:	200004a0 	.word	0x200004a0
 80032b8:	200004c4 	.word	0x200004c4
 80032bc:	20000480 	.word	0x20000480
 80032c0:	200004a4 	.word	0x200004a4
 80032c4:	200004ac 	.word	0x200004ac
 80032c8:	200004c0 	.word	0x200004c0
 80032cc:	404e0000 	.word	0x404e0000
 80032d0:	20000040 	.word	0x20000040
 80032d4:	47ae147b 	.word	0x47ae147b
 80032d8:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel3 = (rpm3 / 60.0) * dia3 * M_PI; // Positive velocity for forward direction
 80032dc:	4bac      	ldr	r3, [pc, #688]	@ (8003590 <calculateVel3+0x4e8>)
 80032de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	4bab      	ldr	r3, [pc, #684]	@ (8003594 <calculateVel3+0x4ec>)
 80032e8:	f7fd fab0 	bl	800084c <__aeabi_ddiv>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003598 <calculateVel3+0x4f0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f925 	bl	8000548 <__aeabi_f2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4620      	mov	r0, r4
 8003304:	4629      	mov	r1, r5
 8003306:	f7fd f977 	bl	80005f8 <__aeabi_dmul>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	a397      	add	r3, pc, #604	@ (adr r3, 8003570 <calculateVel3+0x4c8>)
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f7fd f96e 	bl	80005f8 <__aeabi_dmul>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	f7fd fc60 	bl	8000be8 <__aeabi_d2f>
 8003328:	4603      	mov	r3, r0
 800332a:	617b      	str	r3, [r7, #20]
	}
	// Constrain the velocity to the range [-1, 1]
	vel3 = fmax(-1.0, fmin(1.0, moving_average_filter3(new_vel3)));
 800332c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003330:	f7ff fdce 	bl	8002ed0 <moving_average_filter3>
 8003334:	ee10 3a10 	vmov	r3, s0
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f905 	bl	8000548 <__aeabi_f2d>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8003578 <calculateVel3+0x4d0>
 8003346:	ec43 2b10 	vmov	d0, r2, r3
 800334a:	f00a fa4f 	bl	800d7ec <fmin>
 800334e:	eeb0 7a40 	vmov.f32	s14, s0
 8003352:	eef0 7a60 	vmov.f32	s15, s1
 8003356:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8003580 <calculateVel3+0x4d8>
 800335a:	eeb0 0a47 	vmov.f32	s0, s14
 800335e:	eef0 0a67 	vmov.f32	s1, s15
 8003362:	f00a fa19 	bl	800d798 <fmax>
 8003366:	ec53 2b10 	vmov	r2, r3, d0
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	f7fd fc3b 	bl	8000be8 <__aeabi_d2f>
 8003372:	4603      	mov	r3, r0
 8003374:	4a89      	ldr	r2, [pc, #548]	@ (800359c <calculateVel3+0x4f4>)
 8003376:	6013      	str	r3, [r2, #0]
	// Apply moving average filter for velocity
	// vel3 = moving_average_filter3(new_vel3);

	// Update position based on velocity and elapsed time
	distance_traveled3 += vel3 * (delta_time3 / 1000.0); // Linear distance traveled in meters
 8003378:	4b89      	ldr	r3, [pc, #548]	@ (80035a0 <calculateVel3+0x4f8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f8e3 	bl	8000548 <__aeabi_f2d>
 8003382:	4604      	mov	r4, r0
 8003384:	460d      	mov	r5, r1
 8003386:	4b85      	ldr	r3, [pc, #532]	@ (800359c <calculateVel3+0x4f4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd f8dc 	bl	8000548 <__aeabi_f2d>
 8003390:	4680      	mov	r8, r0
 8003392:	4689      	mov	r9, r1
 8003394:	6938      	ldr	r0, [r7, #16]
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	4b81      	ldr	r3, [pc, #516]	@ (80035a4 <calculateVel3+0x4fc>)
 80033a0:	f7fd fa54 	bl	800084c <__aeabi_ddiv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4640      	mov	r0, r8
 80033aa:	4649      	mov	r1, r9
 80033ac:	f7fd f924 	bl	80005f8 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fc ff68 	bl	800028c <__adddf3>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f7fd fc10 	bl	8000be8 <__aeabi_d2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4a75      	ldr	r2, [pc, #468]	@ (80035a0 <calculateVel3+0x4f8>)
 80033cc:	6013      	str	r3, [r2, #0]
	angular_position_rad3 += distance_traveled3 / (dia3 / 2.0); // Update angular position in radians
 80033ce:	4b76      	ldr	r3, [pc, #472]	@ (80035a8 <calculateVel3+0x500>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd f8b8 	bl	8000548 <__aeabi_f2d>
 80033d8:	4604      	mov	r4, r0
 80033da:	460d      	mov	r5, r1
 80033dc:	4b70      	ldr	r3, [pc, #448]	@ (80035a0 <calculateVel3+0x4f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd f8b1 	bl	8000548 <__aeabi_f2d>
 80033e6:	4680      	mov	r8, r0
 80033e8:	4689      	mov	r9, r1
 80033ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003598 <calculateVel3+0x4f0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8aa 	bl	8000548 <__aeabi_f2d>
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80033fc:	f7fd fa26 	bl	800084c <__aeabi_ddiv>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4640      	mov	r0, r8
 8003406:	4649      	mov	r1, r9
 8003408:	f7fd fa20 	bl	800084c <__aeabi_ddiv>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4620      	mov	r0, r4
 8003412:	4629      	mov	r1, r5
 8003414:	f7fc ff3a 	bl	800028c <__adddf3>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f7fd fbe2 	bl	8000be8 <__aeabi_d2f>
 8003424:	4603      	mov	r3, r0
 8003426:	4a60      	ldr	r2, [pc, #384]	@ (80035a8 <calculateVel3+0x500>)
 8003428:	6013      	str	r3, [r2, #0]
	angular_position_deg3 = angular_position_rad3 * (180.0 / M_PI); // Convert to degrees
 800342a:	4b5f      	ldr	r3, [pc, #380]	@ (80035a8 <calculateVel3+0x500>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f88a 	bl	8000548 <__aeabi_f2d>
 8003434:	a354      	add	r3, pc, #336	@ (adr r3, 8003588 <calculateVel3+0x4e0>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd f8dd 	bl	80005f8 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd fbcf 	bl	8000be8 <__aeabi_d2f>
 800344a:	4603      	mov	r3, r0
 800344c:	4a57      	ldr	r2, [pc, #348]	@ (80035ac <calculateVel3+0x504>)
 800344e:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate3 = estimate3; // Predicted state (previous estimate)
 8003450:	4b57      	ldr	r3, [pc, #348]	@ (80035b0 <calculateVel3+0x508>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a56      	ldr	r2, [pc, #344]	@ (80035b0 <calculateVel3+0x508>)
 8003456:	6013      	str	r3, [r2, #0]
	error_covariance3 += process_noise3; // Update error covariance
 8003458:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <calculateVel3+0x50c>)
 800345a:	ed93 7a00 	vldr	s14, [r3]
 800345e:	4b56      	ldr	r3, [pc, #344]	@ (80035b8 <calculateVel3+0x510>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	4b52      	ldr	r3, [pc, #328]	@ (80035b4 <calculateVel3+0x50c>)
 800346a:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain3 = error_covariance3 / (error_covariance3 + measurement_noise3); // Calculate Kalman gain
 800346e:	4b51      	ldr	r3, [pc, #324]	@ (80035b4 <calculateVel3+0x50c>)
 8003470:	edd3 6a00 	vldr	s13, [r3]
 8003474:	4b4f      	ldr	r3, [pc, #316]	@ (80035b4 <calculateVel3+0x50c>)
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	4b50      	ldr	r3, [pc, #320]	@ (80035bc <calculateVel3+0x514>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003488:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <calculateVel3+0x518>)
 800348a:	edc3 7a00 	vstr	s15, [r3]
	estimate3 += kalman_gain3 * (vel3 - estimate3); // Update estimate with measurement
 800348e:	4b43      	ldr	r3, [pc, #268]	@ (800359c <calculateVel3+0x4f4>)
 8003490:	ed93 7a00 	vldr	s14, [r3]
 8003494:	4b46      	ldr	r3, [pc, #280]	@ (80035b0 <calculateVel3+0x508>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800349e:	4b48      	ldr	r3, [pc, #288]	@ (80035c0 <calculateVel3+0x518>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a8:	4b41      	ldr	r3, [pc, #260]	@ (80035b0 <calculateVel3+0x508>)
 80034aa:	edd3 7a00 	vldr	s15, [r3]
 80034ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b2:	4b3f      	ldr	r3, [pc, #252]	@ (80035b0 <calculateVel3+0x508>)
 80034b4:	edc3 7a00 	vstr	s15, [r3]
	error_covariance3 = (1 - kalman_gain3) * error_covariance3; // Update error covariance
 80034b8:	4b41      	ldr	r3, [pc, #260]	@ (80035c0 <calculateVel3+0x518>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c6:	4b3b      	ldr	r3, [pc, #236]	@ (80035b4 <calculateVel3+0x50c>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d0:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <calculateVel3+0x50c>)
 80034d2:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output3 = PID_Controller3(Kp3, Ki3, Kd3, &integral1_3, last_error3,
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <calculateVel3+0x51c>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <calculateVel3+0x520>)
 80034de:	ed93 7a00 	vldr	s14, [r3]
 80034e2:	4b3a      	ldr	r3, [pc, #232]	@ (80035cc <calculateVel3+0x524>)
 80034e4:	edd3 6a00 	vldr	s13, [r3]
 80034e8:	4b39      	ldr	r3, [pc, #228]	@ (80035d0 <calculateVel3+0x528>)
 80034ea:	ed93 6a00 	vldr	s12, [r3]
 80034ee:	4b2b      	ldr	r3, [pc, #172]	@ (800359c <calculateVel3+0x4f4>)
 80034f0:	edd3 5a00 	vldr	s11, [r3]
 80034f4:	eef0 2a65 	vmov.f32	s5, s11
 80034f8:	ed97 2a01 	vldr	s4, [r7, #4]
 80034fc:	eef0 1a46 	vmov.f32	s3, s12
 8003500:	4834      	ldr	r0, [pc, #208]	@ (80035d4 <calculateVel3+0x52c>)
 8003502:	eeb0 1a66 	vmov.f32	s2, s13
 8003506:	eef0 0a47 	vmov.f32	s1, s14
 800350a:	eeb0 0a67 	vmov.f32	s0, s15
 800350e:	f7ff fd59 	bl	8002fc4 <PID_Controller3>
 8003512:	eef0 7a40 	vmov.f32	s15, s0
 8003516:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <calculateVel3+0x530>)
 8003518:	edc3 7a00 	vstr	s15, [r3]
			velTag3, vel3);

	// Implement ramping to control output
	if (fabs(control_output3 - last_control_output3) > RAMP_RATE) {
 800351c:	4b2e      	ldr	r3, [pc, #184]	@ (80035d8 <calculateVel3+0x530>)
 800351e:	ed93 7a00 	vldr	s14, [r3]
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <calculateVel3+0x534>)
 8003524:	edd3 7a00 	vldr	s15, [r3]
 8003528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352c:	eef0 7ae7 	vabs.f32	s15, s15
 8003530:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	dd60      	ble.n	8003600 <calculateVel3+0x558>
		control_output3 = last_control_output3
				+ (control_output3 > last_control_output3 ?
 800353e:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <calculateVel3+0x534>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd f800 	bl	8000548 <__aeabi_f2d>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4922      	ldr	r1, [pc, #136]	@ (80035d8 <calculateVel3+0x530>)
 800354e:	ed91 7a00 	vldr	s14, [r1]
 8003552:	4922      	ldr	r1, [pc, #136]	@ (80035dc <calculateVel3+0x534>)
 8003554:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 8003558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	dd40      	ble.n	80035e4 <calculateVel3+0x53c>
 8003562:	f04f 0000 	mov.w	r0, #0
 8003566:	491e      	ldr	r1, [pc, #120]	@ (80035e0 <calculateVel3+0x538>)
 8003568:	e03f      	b.n	80035ea <calculateVel3+0x542>
 800356a:	bf00      	nop
 800356c:	f3af 8000 	nop.w
 8003570:	54442d18 	.word	0x54442d18
 8003574:	400921fb 	.word	0x400921fb
 8003578:	00000000 	.word	0x00000000
 800357c:	3ff00000 	.word	0x3ff00000
 8003580:	00000000 	.word	0x00000000
 8003584:	bff00000 	.word	0xbff00000
 8003588:	1a63c1f8 	.word	0x1a63c1f8
 800358c:	404ca5dc 	.word	0x404ca5dc
 8003590:	20000488 	.word	0x20000488
 8003594:	404e0000 	.word	0x404e0000
 8003598:	20000040 	.word	0x20000040
 800359c:	20000490 	.word	0x20000490
 80035a0:	200004c4 	.word	0x200004c4
 80035a4:	408f4000 	.word	0x408f4000
 80035a8:	200004b0 	.word	0x200004b0
 80035ac:	200004b4 	.word	0x200004b4
 80035b0:	200004a8 	.word	0x200004a8
 80035b4:	20000054 	.word	0x20000054
 80035b8:	20000058 	.word	0x20000058
 80035bc:	2000005c 	.word	0x2000005c
 80035c0:	20000050 	.word	0x20000050
 80035c4:	20000044 	.word	0x20000044
 80035c8:	20000048 	.word	0x20000048
 80035cc:	2000004c 	.word	0x2000004c
 80035d0:	2000049c 	.word	0x2000049c
 80035d4:	20000498 	.word	0x20000498
 80035d8:	20000494 	.word	0x20000494
 80035dc:	200004a0 	.word	0x200004a0
 80035e0:	40140000 	.word	0x40140000
 80035e4:	f04f 0000 	mov.w	r0, #0
 80035e8:	4981      	ldr	r1, [pc, #516]	@ (80037f0 <calculateVel3+0x748>)
				+ (control_output3 > last_control_output3 ?
 80035ea:	f7fc fe4f 	bl	800028c <__adddf3>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fd faf7 	bl	8000be8 <__aeabi_d2f>
 80035fa:	4603      	mov	r3, r0
		control_output3 = last_control_output3
 80035fc:	4a7d      	ldr	r2, [pc, #500]	@ (80037f4 <calculateVel3+0x74c>)
 80035fe:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output3 > 0 && control_output3 < -HYSTERESIS)
 8003600:	4b7d      	ldr	r3, [pc, #500]	@ (80037f8 <calculateVel3+0x750>)
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360e:	dd0c      	ble.n	800362a <calculateVel3+0x582>
 8003610:	4b78      	ldr	r3, [pc, #480]	@ (80037f4 <calculateVel3+0x74c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ff97 	bl	8000548 <__aeabi_f2d>
 800361a:	a369      	add	r3, pc, #420	@ (adr r3, 80037c0 <calculateVel3+0x718>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fd fa5c 	bl	8000adc <__aeabi_dcmplt>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d114      	bne.n	8003654 <calculateVel3+0x5ac>
			|| (last_control_output3 < 0 && control_output3 > HYSTERESIS)) {
 800362a:	4b73      	ldr	r3, [pc, #460]	@ (80037f8 <calculateVel3+0x750>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003638:	d510      	bpl.n	800365c <calculateVel3+0x5b4>
 800363a:	4b6e      	ldr	r3, [pc, #440]	@ (80037f4 <calculateVel3+0x74c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ff82 	bl	8000548 <__aeabi_f2d>
 8003644:	a360      	add	r3, pc, #384	@ (adr r3, 80037c8 <calculateVel3+0x720>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f7fd fa65 	bl	8000b18 <__aeabi_dcmpgt>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <calculateVel3+0x5b4>
		control_output3 = last_control_output3; // Maintain last control output if within hysteresis
 8003654:	4b68      	ldr	r3, [pc, #416]	@ (80037f8 <calculateVel3+0x750>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a66      	ldr	r2, [pc, #408]	@ (80037f4 <calculateVel3+0x74c>)
 800365a:	6013      	str	r3, [r2, #0]
	}

	realVel3 = vel3 / 2.0; // Scale factor
 800365c:	4b67      	ldr	r3, [pc, #412]	@ (80037fc <calculateVel3+0x754>)
 800365e:	ed93 7a00 	vldr	s14, [r3]
 8003662:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366a:	4b65      	ldr	r3, [pc, #404]	@ (8003800 <calculateVel3+0x758>)
 800366c:	edc3 7a00 	vstr	s15, [r3]
	realRPM3 = rpm3 / 2.0;
 8003670:	4b64      	ldr	r3, [pc, #400]	@ (8003804 <calculateVel3+0x75c>)
 8003672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800367e:	f7fd f8e5 	bl	800084c <__aeabi_ddiv>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd faad 	bl	8000be8 <__aeabi_d2f>
 800368e:	4603      	mov	r3, r0
 8003690:	4a5d      	ldr	r2, [pc, #372]	@ (8003808 <calculateVel3+0x760>)
 8003692:	6013      	str	r3, [r2, #0]
	if(realVel3 <= 0.01 && velTag3 >= 0.0 ){
 8003694:	4b5a      	ldr	r3, [pc, #360]	@ (8003800 <calculateVel3+0x758>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fc ff55 	bl	8000548 <__aeabi_f2d>
 800369e:	a34c      	add	r3, pc, #304	@ (adr r3, 80037d0 <calculateVel3+0x728>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f7fd fa24 	bl	8000af0 <__aeabi_dcmple>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <calculateVel3+0x61e>
 80036ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	db04      	blt.n	80036c6 <calculateVel3+0x61e>
			realVel3 =0.0;
 80036bc:	4b50      	ldr	r3, [pc, #320]	@ (8003800 <calculateVel3+0x758>)
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e017      	b.n	80036f6 <calculateVel3+0x64e>
		}
		else if ( realVel3 >= -0.01 && velTag3 <= 0.0){
 80036c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003800 <calculateVel3+0x758>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc ff3c 	bl	8000548 <__aeabi_f2d>
 80036d0:	a341      	add	r3, pc, #260	@ (adr r3, 80037d8 <calculateVel3+0x730>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fd fa15 	bl	8000b04 <__aeabi_dcmpge>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <calculateVel3+0x64e>
 80036e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ec:	d803      	bhi.n	80036f6 <calculateVel3+0x64e>
			realVel3 =0.0;
 80036ee:	4b44      	ldr	r3, [pc, #272]	@ (8003800 <calculateVel3+0x758>)
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
		}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output3 = fmax(-0.27, fmin(0.27, control_output3));
 80036f6:	4b3f      	ldr	r3, [pc, #252]	@ (80037f4 <calculateVel3+0x74c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fc ff24 	bl	8000548 <__aeabi_f2d>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 80037e0 <calculateVel3+0x738>
 8003708:	ec43 2b10 	vmov	d0, r2, r3
 800370c:	f00a f86e 	bl	800d7ec <fmin>
 8003710:	eeb0 7a40 	vmov.f32	s14, s0
 8003714:	eef0 7a60 	vmov.f32	s15, s1
 8003718:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80037e8 <calculateVel3+0x740>
 800371c:	eeb0 0a47 	vmov.f32	s0, s14
 8003720:	eef0 0a67 	vmov.f32	s1, s15
 8003724:	f00a f838 	bl	800d798 <fmax>
 8003728:	ec53 2b10 	vmov	r2, r3, d0
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd fa5a 	bl	8000be8 <__aeabi_d2f>
 8003734:	4603      	mov	r3, r0
 8003736:	4a2f      	ldr	r2, [pc, #188]	@ (80037f4 <calculateVel3+0x74c>)
 8003738:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag3 > 0) {
 800373a:	edd7 7a01 	vldr	s15, [r7, #4]
 800373e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	dd14      	ble.n	8003772 <calculateVel3+0x6ca>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8003748:	4b30      	ldr	r3, [pc, #192]	@ (800380c <calculateVel3+0x764>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,
 8003750:	4b28      	ldr	r3, [pc, #160]	@ (80037f4 <calculateVel3+0x74c>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	eeb0 0a67 	vmov.f32	s0, s15
 800375a:	f7ff fbf9 	bl	8002f50 <calculate_pwm3>
 800375e:	eef0 7a40 	vmov.f32	s15, s0
 8003762:	4b2a      	ldr	r3, [pc, #168]	@ (800380c <calculateVel3+0x764>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376a:	ee17 2a90 	vmov	r2, s15
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003770:	e01a      	b.n	80037a8 <calculateVel3+0x700>
				calculate_pwm3(control_output3));
	} else if (velTag3 < 0) {
 8003772:	edd7 7a01 	vldr	s15, [r7, #4]
 8003776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	d513      	bpl.n	80037a8 <calculateVel3+0x700>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,
 8003780:	4b1c      	ldr	r3, [pc, #112]	@ (80037f4 <calculateVel3+0x74c>)
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	eeb0 0a67 	vmov.f32	s0, s15
 800378a:	f7ff fbe1 	bl	8002f50 <calculate_pwm3>
 800378e:	eef0 7a40 	vmov.f32	s15, s0
 8003792:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <calculateVel3+0x764>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379a:	ee17 2a90 	vmov	r2, s15
 800379e:	63da      	str	r2, [r3, #60]	@ 0x3c
				calculate_pwm3(control_output3));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80037a0:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <calculateVel3+0x764>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	// Update last time and last control output
	last_time3 = current_time3;
 80037a8:	4a19      	ldr	r2, [pc, #100]	@ (8003810 <calculateVel3+0x768>)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6013      	str	r3, [r2, #0]
	last_control_output3 = control_output3;
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <calculateVel3+0x74c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a11      	ldr	r2, [pc, #68]	@ (80037f8 <calculateVel3+0x750>)
 80037b4:	6013      	str	r3, [r2, #0]
}
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037be:	bf00      	nop
 80037c0:	eb851eb8 	.word	0xeb851eb8
 80037c4:	bf9eb851 	.word	0xbf9eb851
 80037c8:	eb851eb8 	.word	0xeb851eb8
 80037cc:	3f9eb851 	.word	0x3f9eb851
 80037d0:	47ae147b 	.word	0x47ae147b
 80037d4:	3f847ae1 	.word	0x3f847ae1
 80037d8:	47ae147b 	.word	0x47ae147b
 80037dc:	bf847ae1 	.word	0xbf847ae1
 80037e0:	147ae148 	.word	0x147ae148
 80037e4:	3fd147ae 	.word	0x3fd147ae
 80037e8:	147ae148 	.word	0x147ae148
 80037ec:	bfd147ae 	.word	0xbfd147ae
 80037f0:	c0140000 	.word	0xc0140000
 80037f4:	20000494 	.word	0x20000494
 80037f8:	200004a0 	.word	0x200004a0
 80037fc:	20000490 	.word	0x20000490
 8003800:	200004b8 	.word	0x200004b8
 8003804:	20000488 	.word	0x20000488
 8003808:	200004bc 	.word	0x200004bc
 800380c:	200005cc 	.word	0x200005cc
 8003810:	200004ac 	.word	0x200004ac
 8003814:	00000000 	.word	0x00000000

08003818 <moving_average_filter4>:
float angular_position_deg4 = 0.0; // Angular position in degrees
float realVel4;
float realRPM4;

// Function to calculate exponential moving average
float moving_average_filter4(float new_velocity) {
 8003818:	b5b0      	push	{r4, r5, r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema4 = 0.0; // Initialize EMA variable
	ema4 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema4);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fc fe90 	bl	8000548 <__aeabi_f2d>
 8003828:	a318      	add	r3, pc, #96	@ (adr r3, 800388c <moving_average_filter4+0x74>)
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f7fc fee3 	bl	80005f8 <__aeabi_dmul>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4614      	mov	r4, r2
 8003838:	461d      	mov	r5, r3
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <moving_average_filter4+0x70>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fe82 	bl	8000548 <__aeabi_f2d>
 8003844:	a30e      	add	r3, pc, #56	@ (adr r3, 8003880 <moving_average_filter4+0x68>)
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f7fc fed5 	bl	80005f8 <__aeabi_dmul>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4620      	mov	r0, r4
 8003854:	4629      	mov	r1, r5
 8003856:	f7fc fd19 	bl	800028c <__adddf3>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f7fd f9c1 	bl	8000be8 <__aeabi_d2f>
 8003866:	4603      	mov	r3, r0
 8003868:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <moving_average_filter4+0x70>)
 800386a:	6013      	str	r3, [r2, #0]
	return ema4;
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <moving_average_filter4+0x70>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	ee07 3a90 	vmov	s15, r3
}
 8003874:	eeb0 0a67 	vmov.f32	s0, s15
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bdb0      	pop	{r4, r5, r7, pc}
 800387e:	bf00      	nop
 8003880:	9999999a 	.word	0x9999999a
 8003884:	3fe99999 	.word	0x3fe99999
 8003888:	2000052c 	.word	0x2000052c
 800388c:	9999999a 	.word	0x9999999a
 8003890:	3fc99999 	.word	0x3fc99999
 8003894:	00000000 	.word	0x00000000

08003898 <calculate_pwm4>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm4(float desired_velocity) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 80038a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d505      	bpl.n	80038bc <calculate_pwm4+0x24>
		desired_velocity = -desired_velocity;
 80038b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80038b4:	eef1 7a67 	vneg.f32	s15, s15
 80038b8:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fc fe43 	bl	8000548 <__aeabi_f2d>
 80038c2:	a310      	add	r3, pc, #64	@ (adr r3, 8003904 <calculate_pwm4+0x6c>)
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f7fc ffc0 	bl	800084c <__aeabi_ddiv>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <calculate_pwm4+0x68>)
 80038da:	f7fc fe8d 	bl	80005f8 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fd f97f 	bl	8000be8 <__aeabi_d2f>
 80038ea:	4603      	mov	r3, r0
 80038ec:	ee07 3a90 	vmov	s15, r3
}
 80038f0:	eeb0 0a67 	vmov.f32	s0, s15
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	f3af 8000 	nop.w
 8003900:	408f4000 	.word	0x408f4000
 8003904:	147ae148 	.word	0x147ae148
 8003908:	3fd147ae 	.word	0x3fd147ae

0800390c <PID_Controller4>:

// PID Controller Function with Anti-Windup
float PID_Controller4(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 800390c:	b480      	push	{r7}
 800390e:	b08d      	sub	sp, #52	@ 0x34
 8003910:	af00      	add	r7, sp, #0
 8003912:	ed87 0a07 	vstr	s0, [r7, #28]
 8003916:	edc7 0a06 	vstr	s1, [r7, #24]
 800391a:	ed87 1a05 	vstr	s2, [r7, #20]
 800391e:	6138      	str	r0, [r7, #16]
 8003920:	edc7 1a03 	vstr	s3, [r7, #12]
 8003924:	ed87 2a02 	vstr	s4, [r7, #8]
 8003928:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error4 = setpoint - measured_value;
 800392c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003930:	edd7 7a01 	vldr	s15, [r7, #4]
 8003934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003938:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error4;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	ed93 7a00 	vldr	s14, [r3]
 8003942:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80039e0 <PID_Controller4+0xd4>
 800395a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003962:	dd03      	ble.n	800396c <PID_Controller4+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <PID_Controller4+0xd8>)
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00c      	b.n	8003986 <PID_Controller4+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80039e8 <PID_Controller4+0xdc>
 8003976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d502      	bpl.n	8003986 <PID_Controller4+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4a1a      	ldr	r2, [pc, #104]	@ (80039ec <PID_Controller4+0xe0>)
 8003984:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative4 = error4 - last_error;
 8003986:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800398a:	edd7 7a03 	vldr	s15, [r7, #12]
 800398e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003992:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output4 = (Kp * error4) + (Ki * (*integral)) + (Kd * derivative4);
 8003996:	ed97 7a07 	vldr	s14, [r7, #28]
 800399a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	edd3 6a00 	vldr	s13, [r3]
 80039a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80039ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b4:	edd7 6a05 	vldr	s13, [r7, #20]
 80039b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80039bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error4;
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	60fb      	str	r3, [r7, #12]

	return output4; // Return the control output
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	ee07 3a90 	vmov	s15, r3
}
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	3734      	adds	r7, #52	@ 0x34
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	42c80000 	.word	0x42c80000
 80039e4:	42c80000 	.word	0x42c80000
 80039e8:	c2c80000 	.word	0xc2c80000
 80039ec:	c2c80000 	.word	0xc2c80000

080039f0 <calculateVel4>:

int32_t current_pulse_count4 = 0;
float distance_traveled4 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel4(float velTag4, float current_time4) {
 80039f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80039fc:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag4 is within the deadband
	if (fabs(velTag4) < DEAD_BAND) {
 8003a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a04:	eef0 7ae7 	vabs.f32	s15, s15
 8003a08:	ee17 0a90 	vmov	r0, s15
 8003a0c:	f7fc fd9c 	bl	8000548 <__aeabi_f2d>
 8003a10:	a382      	add	r3, pc, #520	@ (adr r3, 8003c1c <calculateVel4+0x22c>)
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f7fd f861 	bl	8000adc <__aeabi_dcmplt>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <calculateVel4+0x36>
		velTag4 = 0; // Set velTag4 to zero if within deadband
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag4 is 0
	if (velTag4 == 0) {
 8003a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a32:	d13c      	bne.n	8003aae <calculateVel4+0xbe>
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8003a34:	4b68      	ldr	r3, [pc, #416]	@ (8003bd8 <calculateVel4+0x1e8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8003a3c:	4b66      	ldr	r3, [pc, #408]	@ (8003bd8 <calculateVel4+0x1e8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	639a      	str	r2, [r3, #56]	@ 0x38
		vel4 = 0.0;
 8003a44:	4b65      	ldr	r3, [pc, #404]	@ (8003bdc <calculateVel4+0x1ec>)
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 8003a4c:	4b64      	ldr	r3, [pc, #400]	@ (8003be0 <calculateVel4+0x1f0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm4 = 0.0;
 8003a54:	4963      	ldr	r1, [pc, #396]	@ (8003be4 <calculateVel4+0x1f4>)
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9c1 2300 	strd	r2, r3, [r1]
		control_output4 = 0.0;
 8003a62:	4b61      	ldr	r3, [pc, #388]	@ (8003be8 <calculateVel4+0x1f8>)
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad4
		realVel4 = 0.0;
 8003a6a:	4b60      	ldr	r3, [pc, #384]	@ (8003bec <calculateVel4+0x1fc>)
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
		realRPM4 = 0.0;
 8003a72:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf0 <calculateVel4+0x200>)
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
		integral1_4 = 0.0;
 8003a7a:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf4 <calculateVel4+0x204>)
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
		last_error4 = 0.0;
 8003a82:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf8 <calculateVel4+0x208>)
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
		last_control_output4 = 0.0;
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bfc <calculateVel4+0x20c>)
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
		distance_traveled4 = 0.0;
 8003a92:	4b5b      	ldr	r3, [pc, #364]	@ (8003c00 <calculateVel4+0x210>)
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
		pulse_count4 = 0; // Reset pulse count
 8003a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003c04 <calculateVel4+0x214>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
		last_velTag4 = velTag4; // Update last velTag4
 8003aa0:	4a59      	ldr	r2, [pc, #356]	@ (8003c08 <calculateVel4+0x218>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8003aa6:	2064      	movs	r0, #100	@ 0x64
 8003aa8:	f001 fd84 	bl	80055b4 <HAL_Delay>
		return; // Exit the function
 8003aac:	e327      	b.n	80040fe <calculateVel4+0x70e>
	}

	// Calculate the time elapsed since the last update
	float delta_time4 = current_time4 - last_time4;
 8003aae:	4b57      	ldr	r3, [pc, #348]	@ (8003c0c <calculateVel4+0x21c>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ed97 7a00 	vldr	s14, [r7]
 8003ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003abc:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count4 = __HAL_TIM_GET_COUNTER(&htim8);
 8003ac0:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <calculateVel4+0x1f0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <calculateVel4+0x220>)
 8003aca:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8003acc:	200a      	movs	r0, #10
 8003ace:	f001 fd71 	bl	80055b4 <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference4 = current_pulse_count4 - pulse_count4;
 8003ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c10 <calculateVel4+0x220>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8003c04 <calculateVel4+0x214>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm4 = fabs((float) pulse_difference4 / (float) PPR) * 60.0; // Always positive
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aea:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8003aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003af2:	eef0 7ae7 	vabs.f32	s15, s15
 8003af6:	ee17 0a90 	vmov	r0, s15
 8003afa:	f7fc fd25 	bl	8000548 <__aeabi_f2d>
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	4b44      	ldr	r3, [pc, #272]	@ (8003c14 <calculateVel4+0x224>)
 8003b04:	f7fc fd78 	bl	80005f8 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4935      	ldr	r1, [pc, #212]	@ (8003be4 <calculateVel4+0x1f4>)
 8003b0e:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count4 = current_pulse_count4;
 8003b12:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <calculateVel4+0x220>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b3a      	ldr	r3, [pc, #232]	@ (8003c04 <calculateVel4+0x214>)
 8003b1a:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm4 = fmax(0.0, fmin(250.0, rpm4));
 8003b1c:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <calculateVel4+0x1f4>)
 8003b1e:	ed93 7b00 	vldr	d7, [r3]
 8003b22:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8003bc0 <calculateVel4+0x1d0>
 8003b26:	eeb0 0a47 	vmov.f32	s0, s14
 8003b2a:	eef0 0a67 	vmov.f32	s1, s15
 8003b2e:	f009 fe5d 	bl	800d7ec <fmin>
 8003b32:	eeb0 7a40 	vmov.f32	s14, s0
 8003b36:	eef0 7a60 	vmov.f32	s15, s1
 8003b3a:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8003bc8 <calculateVel4+0x1d8>
 8003b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b42:	eef0 0a67 	vmov.f32	s1, s15
 8003b46:	f009 fe27 	bl	800d798 <fmax>
 8003b4a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b4e:	eef0 7a60 	vmov.f32	s15, s1
 8003b52:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <calculateVel4+0x1f4>)
 8003b54:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel4;
	if (pulse_difference4 < 0) {
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	da62      	bge.n	8003c24 <calculateVel4+0x234>
		new_vel4 = -((rpm4 / 60.0) * dia4 * M_PI); // Negative velocity for reverse direction
 8003b5e:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <calculateVel4+0x1f4>)
 8003b60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	4b2a      	ldr	r3, [pc, #168]	@ (8003c14 <calculateVel4+0x224>)
 8003b6a:	f7fc fe6f 	bl	800084c <__aeabi_ddiv>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <calculateVel4+0x228>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fce4 	bl	8000548 <__aeabi_f2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fd36 	bl	80005f8 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	a30e      	add	r3, pc, #56	@ (adr r3, 8003bd0 <calculateVel4+0x1e0>)
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f7fc fd2d 	bl	80005f8 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f7fd f81f 	bl	8000be8 <__aeabi_d2f>
 8003baa:	4603      	mov	r3, r0
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef1 7a67 	vneg.f32	s15, s15
 8003bb4:	edc7 7a05 	vstr	s15, [r7, #20]
 8003bb8:	e05c      	b.n	8003c74 <calculateVel4+0x284>
 8003bba:	bf00      	nop
 8003bbc:	f3af 8000 	nop.w
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	406f4000 	.word	0x406f4000
	...
 8003bd0:	54442d18 	.word	0x54442d18
 8003bd4:	400921fb 	.word	0x400921fb
 8003bd8:	20000734 	.word	0x20000734
 8003bdc:	200004d8 	.word	0x200004d8
 8003be0:	200006ec 	.word	0x200006ec
 8003be4:	200004d0 	.word	0x200004d0
 8003be8:	200004dc 	.word	0x200004dc
 8003bec:	20000500 	.word	0x20000500
 8003bf0:	20000504 	.word	0x20000504
 8003bf4:	200004e0 	.word	0x200004e0
 8003bf8:	200004e4 	.word	0x200004e4
 8003bfc:	200004e8 	.word	0x200004e8
 8003c00:	2000050c 	.word	0x2000050c
 8003c04:	200004c8 	.word	0x200004c8
 8003c08:	200004ec 	.word	0x200004ec
 8003c0c:	200004f4 	.word	0x200004f4
 8003c10:	20000508 	.word	0x20000508
 8003c14:	404e0000 	.word	0x404e0000
 8003c18:	20000060 	.word	0x20000060
 8003c1c:	47ae147b 	.word	0x47ae147b
 8003c20:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel4 = (rpm4 / 60.0) * dia4 * M_PI; // Positive velocity for forward direction
 8003c24:	4bac      	ldr	r3, [pc, #688]	@ (8003ed8 <calculateVel4+0x4e8>)
 8003c26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	4bab      	ldr	r3, [pc, #684]	@ (8003edc <calculateVel4+0x4ec>)
 8003c30:	f7fc fe0c 	bl	800084c <__aeabi_ddiv>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4ba8      	ldr	r3, [pc, #672]	@ (8003ee0 <calculateVel4+0x4f0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc81 	bl	8000548 <__aeabi_f2d>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	f7fc fcd3 	bl	80005f8 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	a397      	add	r3, pc, #604	@ (adr r3, 8003eb8 <calculateVel4+0x4c8>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fcca 	bl	80005f8 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f7fc ffbc 	bl	8000be8 <__aeabi_d2f>
 8003c70:	4603      	mov	r3, r0
 8003c72:	617b      	str	r3, [r7, #20]
	}

	// Constrain the velocity to the range [-1, 1]
	vel4 = fmax(-1.0, fmin(1.0, moving_average_filter4(new_vel4)));
 8003c74:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c78:	f7ff fdce 	bl	8003818 <moving_average_filter4>
 8003c7c:	ee10 3a10 	vmov	r3, s0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc61 	bl	8000548 <__aeabi_f2d>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8003ec0 <calculateVel4+0x4d0>
 8003c8e:	ec43 2b10 	vmov	d0, r2, r3
 8003c92:	f009 fdab 	bl	800d7ec <fmin>
 8003c96:	eeb0 7a40 	vmov.f32	s14, s0
 8003c9a:	eef0 7a60 	vmov.f32	s15, s1
 8003c9e:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8003ec8 <calculateVel4+0x4d8>
 8003ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ca6:	eef0 0a67 	vmov.f32	s1, s15
 8003caa:	f009 fd75 	bl	800d798 <fmax>
 8003cae:	ec53 2b10 	vmov	r2, r3, d0
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7fc ff97 	bl	8000be8 <__aeabi_d2f>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a89      	ldr	r2, [pc, #548]	@ (8003ee4 <calculateVel4+0x4f4>)
 8003cbe:	6013      	str	r3, [r2, #0]
	// Apply moving average filter for velocity
	//  vel4 = moving_average_filter4(new_vel4);

	// Update position based on velocity and elapsed time
	distance_traveled4 += vel4 * (delta_time4 / 1000.0); // Linear distance traveled in meters
 8003cc0:	4b89      	ldr	r3, [pc, #548]	@ (8003ee8 <calculateVel4+0x4f8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fc3f 	bl	8000548 <__aeabi_f2d>
 8003cca:	4604      	mov	r4, r0
 8003ccc:	460d      	mov	r5, r1
 8003cce:	4b85      	ldr	r3, [pc, #532]	@ (8003ee4 <calculateVel4+0x4f4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fc fc38 	bl	8000548 <__aeabi_f2d>
 8003cd8:	4680      	mov	r8, r0
 8003cda:	4689      	mov	r9, r1
 8003cdc:	6938      	ldr	r0, [r7, #16]
 8003cde:	f7fc fc33 	bl	8000548 <__aeabi_f2d>
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <calculateVel4+0x4fc>)
 8003ce8:	f7fc fdb0 	bl	800084c <__aeabi_ddiv>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	f7fc fc80 	bl	80005f8 <__aeabi_dmul>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f7fc fac4 	bl	800028c <__adddf3>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc ff6c 	bl	8000be8 <__aeabi_d2f>
 8003d10:	4603      	mov	r3, r0
 8003d12:	4a75      	ldr	r2, [pc, #468]	@ (8003ee8 <calculateVel4+0x4f8>)
 8003d14:	6013      	str	r3, [r2, #0]
	angular_position_rad4 += distance_traveled4 / (dia4 / 2.0); // Update angular position in radians
 8003d16:	4b76      	ldr	r3, [pc, #472]	@ (8003ef0 <calculateVel4+0x500>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fc14 	bl	8000548 <__aeabi_f2d>
 8003d20:	4604      	mov	r4, r0
 8003d22:	460d      	mov	r5, r1
 8003d24:	4b70      	ldr	r3, [pc, #448]	@ (8003ee8 <calculateVel4+0x4f8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fc0d 	bl	8000548 <__aeabi_f2d>
 8003d2e:	4680      	mov	r8, r0
 8003d30:	4689      	mov	r9, r1
 8003d32:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee0 <calculateVel4+0x4f0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc fc06 	bl	8000548 <__aeabi_f2d>
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003d44:	f7fc fd82 	bl	800084c <__aeabi_ddiv>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4640      	mov	r0, r8
 8003d4e:	4649      	mov	r1, r9
 8003d50:	f7fc fd7c 	bl	800084c <__aeabi_ddiv>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4620      	mov	r0, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	f7fc fa96 	bl	800028c <__adddf3>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc ff3e 	bl	8000be8 <__aeabi_d2f>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4a60      	ldr	r2, [pc, #384]	@ (8003ef0 <calculateVel4+0x500>)
 8003d70:	6013      	str	r3, [r2, #0]
	angular_position_deg4 = angular_position_rad4 * (180.0 / M_PI); // Convert to degrees
 8003d72:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef0 <calculateVel4+0x500>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbe6 	bl	8000548 <__aeabi_f2d>
 8003d7c:	a354      	add	r3, pc, #336	@ (adr r3, 8003ed0 <calculateVel4+0x4e0>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	f7fc fc39 	bl	80005f8 <__aeabi_dmul>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fc ff2b 	bl	8000be8 <__aeabi_d2f>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4a57      	ldr	r2, [pc, #348]	@ (8003ef4 <calculateVel4+0x504>)
 8003d96:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate4 = estimate4; // Predicted state (previous estimate)
 8003d98:	4b57      	ldr	r3, [pc, #348]	@ (8003ef8 <calculateVel4+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a56      	ldr	r2, [pc, #344]	@ (8003ef8 <calculateVel4+0x508>)
 8003d9e:	6013      	str	r3, [r2, #0]
	error_covariance4 += process_noise4; // Update error covariance
 8003da0:	4b56      	ldr	r3, [pc, #344]	@ (8003efc <calculateVel4+0x50c>)
 8003da2:	ed93 7a00 	vldr	s14, [r3]
 8003da6:	4b56      	ldr	r3, [pc, #344]	@ (8003f00 <calculateVel4+0x510>)
 8003da8:	edd3 7a00 	vldr	s15, [r3]
 8003dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db0:	4b52      	ldr	r3, [pc, #328]	@ (8003efc <calculateVel4+0x50c>)
 8003db2:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain4 = error_covariance4 / (error_covariance4 + measurement_noise4); // Calculate Kalman gain
 8003db6:	4b51      	ldr	r3, [pc, #324]	@ (8003efc <calculateVel4+0x50c>)
 8003db8:	edd3 6a00 	vldr	s13, [r3]
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003efc <calculateVel4+0x50c>)
 8003dbe:	ed93 7a00 	vldr	s14, [r3]
 8003dc2:	4b50      	ldr	r3, [pc, #320]	@ (8003f04 <calculateVel4+0x514>)
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003f08 <calculateVel4+0x518>)
 8003dd2:	edc3 7a00 	vstr	s15, [r3]
	estimate4 += kalman_gain4 * (vel4 - estimate4); // Update estimate with measurement
 8003dd6:	4b43      	ldr	r3, [pc, #268]	@ (8003ee4 <calculateVel4+0x4f4>)
 8003dd8:	ed93 7a00 	vldr	s14, [r3]
 8003ddc:	4b46      	ldr	r3, [pc, #280]	@ (8003ef8 <calculateVel4+0x508>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003de6:	4b48      	ldr	r3, [pc, #288]	@ (8003f08 <calculateVel4+0x518>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003df0:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <calculateVel4+0x508>)
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef8 <calculateVel4+0x508>)
 8003dfc:	edc3 7a00 	vstr	s15, [r3]
	error_covariance4 = (1 - kalman_gain4) * error_covariance4; // Update error covariance
 8003e00:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <calculateVel4+0x518>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <calculateVel4+0x50c>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e18:	4b38      	ldr	r3, [pc, #224]	@ (8003efc <calculateVel4+0x50c>)
 8003e1a:	edc3 7a00 	vstr	s15, [r3]
	// Calculate control output using PID controller
	control_output4 = PID_Controller4(Kp4, Ki4, Kd4, &integral1_4, last_error4,
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <calculateVel4+0x51c>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	4b3a      	ldr	r3, [pc, #232]	@ (8003f10 <calculateVel4+0x520>)
 8003e26:	ed93 7a00 	vldr	s14, [r3]
 8003e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <calculateVel4+0x524>)
 8003e2c:	edd3 6a00 	vldr	s13, [r3]
 8003e30:	4b39      	ldr	r3, [pc, #228]	@ (8003f18 <calculateVel4+0x528>)
 8003e32:	ed93 6a00 	vldr	s12, [r3]
 8003e36:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee4 <calculateVel4+0x4f4>)
 8003e38:	edd3 5a00 	vldr	s11, [r3]
 8003e3c:	eef0 2a65 	vmov.f32	s5, s11
 8003e40:	ed97 2a01 	vldr	s4, [r7, #4]
 8003e44:	eef0 1a46 	vmov.f32	s3, s12
 8003e48:	4834      	ldr	r0, [pc, #208]	@ (8003f1c <calculateVel4+0x52c>)
 8003e4a:	eeb0 1a66 	vmov.f32	s2, s13
 8003e4e:	eef0 0a47 	vmov.f32	s1, s14
 8003e52:	eeb0 0a67 	vmov.f32	s0, s15
 8003e56:	f7ff fd59 	bl	800390c <PID_Controller4>
 8003e5a:	eef0 7a40 	vmov.f32	s15, s0
 8003e5e:	4b30      	ldr	r3, [pc, #192]	@ (8003f20 <calculateVel4+0x530>)
 8003e60:	edc3 7a00 	vstr	s15, [r3]
			velTag4, vel4);

	// Implement ramping to control output
	if (fabs(control_output4 - last_control_output4) > RAMP_RATE) {
 8003e64:	4b2e      	ldr	r3, [pc, #184]	@ (8003f20 <calculateVel4+0x530>)
 8003e66:	ed93 7a00 	vldr	s14, [r3]
 8003e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f24 <calculateVel4+0x534>)
 8003e6c:	edd3 7a00 	vldr	s15, [r3]
 8003e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e74:	eef0 7ae7 	vabs.f32	s15, s15
 8003e78:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	dd60      	ble.n	8003f48 <calculateVel4+0x558>
		control_output4 = last_control_output4
				+ (control_output4 > last_control_output4 ?
 8003e86:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <calculateVel4+0x534>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fb5c 	bl	8000548 <__aeabi_f2d>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4922      	ldr	r1, [pc, #136]	@ (8003f20 <calculateVel4+0x530>)
 8003e96:	ed91 7a00 	vldr	s14, [r1]
 8003e9a:	4922      	ldr	r1, [pc, #136]	@ (8003f24 <calculateVel4+0x534>)
 8003e9c:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 8003ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea8:	dd40      	ble.n	8003f2c <calculateVel4+0x53c>
 8003eaa:	f04f 0000 	mov.w	r0, #0
 8003eae:	491e      	ldr	r1, [pc, #120]	@ (8003f28 <calculateVel4+0x538>)
 8003eb0:	e03f      	b.n	8003f32 <calculateVel4+0x542>
 8003eb2:	bf00      	nop
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	54442d18 	.word	0x54442d18
 8003ebc:	400921fb 	.word	0x400921fb
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	3ff00000 	.word	0x3ff00000
 8003ec8:	00000000 	.word	0x00000000
 8003ecc:	bff00000 	.word	0xbff00000
 8003ed0:	1a63c1f8 	.word	0x1a63c1f8
 8003ed4:	404ca5dc 	.word	0x404ca5dc
 8003ed8:	200004d0 	.word	0x200004d0
 8003edc:	404e0000 	.word	0x404e0000
 8003ee0:	20000060 	.word	0x20000060
 8003ee4:	200004d8 	.word	0x200004d8
 8003ee8:	2000050c 	.word	0x2000050c
 8003eec:	408f4000 	.word	0x408f4000
 8003ef0:	200004f8 	.word	0x200004f8
 8003ef4:	200004fc 	.word	0x200004fc
 8003ef8:	200004f0 	.word	0x200004f0
 8003efc:	20000074 	.word	0x20000074
 8003f00:	20000078 	.word	0x20000078
 8003f04:	2000007c 	.word	0x2000007c
 8003f08:	20000070 	.word	0x20000070
 8003f0c:	20000064 	.word	0x20000064
 8003f10:	20000068 	.word	0x20000068
 8003f14:	2000006c 	.word	0x2000006c
 8003f18:	200004e4 	.word	0x200004e4
 8003f1c:	200004e0 	.word	0x200004e0
 8003f20:	200004dc 	.word	0x200004dc
 8003f24:	200004e8 	.word	0x200004e8
 8003f28:	40140000 	.word	0x40140000
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	4981      	ldr	r1, [pc, #516]	@ (8004138 <calculateVel4+0x748>)
				+ (control_output4 > last_control_output4 ?
 8003f32:	f7fc f9ab 	bl	800028c <__adddf3>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fc fe53 	bl	8000be8 <__aeabi_d2f>
 8003f42:	4603      	mov	r3, r0
		control_output4 = last_control_output4
 8003f44:	4a7d      	ldr	r2, [pc, #500]	@ (800413c <calculateVel4+0x74c>)
 8003f46:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output4 > 0 && control_output4 < -HYSTERESIS)
 8003f48:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <calculateVel4+0x750>)
 8003f4a:	edd3 7a00 	vldr	s15, [r3]
 8003f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	dd0c      	ble.n	8003f72 <calculateVel4+0x582>
 8003f58:	4b78      	ldr	r3, [pc, #480]	@ (800413c <calculateVel4+0x74c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc faf3 	bl	8000548 <__aeabi_f2d>
 8003f62:	a369      	add	r3, pc, #420	@ (adr r3, 8004108 <calculateVel4+0x718>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc fdb8 	bl	8000adc <__aeabi_dcmplt>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d114      	bne.n	8003f9c <calculateVel4+0x5ac>
			|| (last_control_output4 < 0 && control_output4 > HYSTERESIS)) {
 8003f72:	4b73      	ldr	r3, [pc, #460]	@ (8004140 <calculateVel4+0x750>)
 8003f74:	edd3 7a00 	vldr	s15, [r3]
 8003f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f80:	d510      	bpl.n	8003fa4 <calculateVel4+0x5b4>
 8003f82:	4b6e      	ldr	r3, [pc, #440]	@ (800413c <calculateVel4+0x74c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fade 	bl	8000548 <__aeabi_f2d>
 8003f8c:	a360      	add	r3, pc, #384	@ (adr r3, 8004110 <calculateVel4+0x720>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc fdc1 	bl	8000b18 <__aeabi_dcmpgt>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <calculateVel4+0x5b4>
		control_output4 = last_control_output4; // Maintain last control output if within hysteresis
 8003f9c:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <calculateVel4+0x750>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a66      	ldr	r2, [pc, #408]	@ (800413c <calculateVel4+0x74c>)
 8003fa2:	6013      	str	r3, [r2, #0]
	}

	realVel4 = vel4 / 2.0; // Scale factor
 8003fa4:	4b67      	ldr	r3, [pc, #412]	@ (8004144 <calculateVel4+0x754>)
 8003fa6:	ed93 7a00 	vldr	s14, [r3]
 8003faa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb2:	4b65      	ldr	r3, [pc, #404]	@ (8004148 <calculateVel4+0x758>)
 8003fb4:	edc3 7a00 	vstr	s15, [r3]
	realRPM4 = rpm4 / 2.0;
 8003fb8:	4b64      	ldr	r3, [pc, #400]	@ (800414c <calculateVel4+0x75c>)
 8003fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003fc6:	f7fc fc41 	bl	800084c <__aeabi_ddiv>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fe09 	bl	8000be8 <__aeabi_d2f>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8004150 <calculateVel4+0x760>)
 8003fda:	6013      	str	r3, [r2, #0]
	if(realVel4 <= 0.01 && velTag4 >= 0.0 ){
 8003fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8004148 <calculateVel4+0x758>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fab1 	bl	8000548 <__aeabi_f2d>
 8003fe6:	a34c      	add	r3, pc, #304	@ (adr r3, 8004118 <calculateVel4+0x728>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fd80 	bl	8000af0 <__aeabi_dcmple>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <calculateVel4+0x61e>
 8003ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004002:	db04      	blt.n	800400e <calculateVel4+0x61e>
			realVel4 =0.0;
 8004004:	4b50      	ldr	r3, [pc, #320]	@ (8004148 <calculateVel4+0x758>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e017      	b.n	800403e <calculateVel4+0x64e>
		}
		else if ( realVel4 >= -0.01 && velTag4 <= 0.0){
 800400e:	4b4e      	ldr	r3, [pc, #312]	@ (8004148 <calculateVel4+0x758>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa98 	bl	8000548 <__aeabi_f2d>
 8004018:	a341      	add	r3, pc, #260	@ (adr r3, 8004120 <calculateVel4+0x730>)
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f7fc fd71 	bl	8000b04 <__aeabi_dcmpge>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <calculateVel4+0x64e>
 8004028:	edd7 7a01 	vldr	s15, [r7, #4]
 800402c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	d803      	bhi.n	800403e <calculateVel4+0x64e>
			realVel4 =0.0;
 8004036:	4b44      	ldr	r3, [pc, #272]	@ (8004148 <calculateVel4+0x758>)
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
		}
	// Limit control_output4 to the range [-0.27, 0.27]
	control_output4 = fmax(-0.27, fmin(0.27, control_output4));
 800403e:	4b3f      	ldr	r3, [pc, #252]	@ (800413c <calculateVel4+0x74c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc fa80 	bl	8000548 <__aeabi_f2d>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	ed9f 1b36 	vldr	d1, [pc, #216]	@ 8004128 <calculateVel4+0x738>
 8004050:	ec43 2b10 	vmov	d0, r2, r3
 8004054:	f009 fbca 	bl	800d7ec <fmin>
 8004058:	eeb0 7a40 	vmov.f32	s14, s0
 800405c:	eef0 7a60 	vmov.f32	s15, s1
 8004060:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8004130 <calculateVel4+0x740>
 8004064:	eeb0 0a47 	vmov.f32	s0, s14
 8004068:	eef0 0a67 	vmov.f32	s1, s15
 800406c:	f009 fb94 	bl	800d798 <fmax>
 8004070:	ec53 2b10 	vmov	r2, r3, d0
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f7fc fdb6 	bl	8000be8 <__aeabi_d2f>
 800407c:	4603      	mov	r3, r0
 800407e:	4a2f      	ldr	r2, [pc, #188]	@ (800413c <calculateVel4+0x74c>)
 8004080:	6013      	str	r3, [r2, #0]

	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag4 > 0) {
 8004082:	edd7 7a01 	vldr	s15, [r7, #4]
 8004086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800408a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408e:	dd14      	ble.n	80040ba <calculateVel4+0x6ca>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1,
 8004090:	4b2a      	ldr	r3, [pc, #168]	@ (800413c <calculateVel4+0x74c>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	eeb0 0a67 	vmov.f32	s0, s15
 800409a:	f7ff fbfd 	bl	8003898 <calculate_pwm4>
 800409e:	eef0 7a40 	vmov.f32	s15, s0
 80040a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004154 <calculateVel4+0x764>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040aa:	ee17 2a90 	vmov	r2, s15
 80040ae:	635a      	str	r2, [r3, #52]	@ 0x34
				calculate_pwm4(control_output4));
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 80040b0:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <calculateVel4+0x764>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2200      	movs	r2, #0
 80040b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80040b8:	e01a      	b.n	80040f0 <calculateVel4+0x700>

	} else if (velTag4 < 0) {
 80040ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80040be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	d513      	bpl.n	80040f0 <calculateVel4+0x700>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 80040c8:	4b22      	ldr	r3, [pc, #136]	@ (8004154 <calculateVel4+0x764>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2,
 80040d0:	4b1a      	ldr	r3, [pc, #104]	@ (800413c <calculateVel4+0x74c>)
 80040d2:	edd3 7a00 	vldr	s15, [r3]
 80040d6:	eeb0 0a67 	vmov.f32	s0, s15
 80040da:	f7ff fbdd 	bl	8003898 <calculate_pwm4>
 80040de:	eef0 7a40 	vmov.f32	s15, s0
 80040e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <calculateVel4+0x764>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ea:	ee17 2a90 	vmov	r2, s15
 80040ee:	639a      	str	r2, [r3, #56]	@ 0x38
				calculate_pwm4(control_output4));
	}

	// Update last time and last control output
	last_time4 = current_time4;
 80040f0:	4a19      	ldr	r2, [pc, #100]	@ (8004158 <calculateVel4+0x768>)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6013      	str	r3, [r2, #0]
	last_control_output4 = control_output4;
 80040f6:	4b11      	ldr	r3, [pc, #68]	@ (800413c <calculateVel4+0x74c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <calculateVel4+0x750>)
 80040fc:	6013      	str	r3, [r2, #0]
}
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004106:	bf00      	nop
 8004108:	eb851eb8 	.word	0xeb851eb8
 800410c:	bf9eb851 	.word	0xbf9eb851
 8004110:	eb851eb8 	.word	0xeb851eb8
 8004114:	3f9eb851 	.word	0x3f9eb851
 8004118:	47ae147b 	.word	0x47ae147b
 800411c:	3f847ae1 	.word	0x3f847ae1
 8004120:	47ae147b 	.word	0x47ae147b
 8004124:	bf847ae1 	.word	0xbf847ae1
 8004128:	147ae148 	.word	0x147ae148
 800412c:	3fd147ae 	.word	0x3fd147ae
 8004130:	147ae148 	.word	0x147ae148
 8004134:	bfd147ae 	.word	0xbfd147ae
 8004138:	c0140000 	.word	0xc0140000
 800413c:	200004dc 	.word	0x200004dc
 8004140:	200004e8 	.word	0x200004e8
 8004144:	200004d8 	.word	0x200004d8
 8004148:	20000500 	.word	0x20000500
 800414c:	200004d0 	.word	0x200004d0
 8004150:	20000504 	.word	0x20000504
 8004154:	20000734 	.word	0x20000734
 8004158:	200004f4 	.word	0x200004f4

0800415c <motor>:

void motor(void) {
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
//BNO055_Read_Euler_Quaternion(&hi2c1, &yaw, &pitch, &roll, &qx, &qy, &qz, &qw);
	ReadFourFloats(&value1, &value2, &value3, &value4);
 8004160:	4b3d      	ldr	r3, [pc, #244]	@ (8004258 <motor+0xfc>)
 8004162:	4a3e      	ldr	r2, [pc, #248]	@ (800425c <motor+0x100>)
 8004164:	493e      	ldr	r1, [pc, #248]	@ (8004260 <motor+0x104>)
 8004166:	483f      	ldr	r0, [pc, #252]	@ (8004264 <motor+0x108>)
 8004168:	f7fd fc7e 	bl	8001a68 <ReadFourFloats>
	readBNO055();
 800416c:	f7fd fa70 	bl	8001650 <readBNO055>
	HAL_Delay(1);
 8004170:	2001      	movs	r0, #1
 8004172:	f001 fa1f 	bl	80055b4 <HAL_Delay>

	time = get_custom_tick();
 8004176:	f001 f8b9 	bl	80052ec <get_custom_tick>
 800417a:	4603      	mov	r3, r0
 800417c:	4a3a      	ldr	r2, [pc, #232]	@ (8004268 <motor+0x10c>)
 800417e:	6013      	str	r3, [r2, #0]
	calculateVel1(value1, time);
 8004180:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <motor+0x108>)
 8004182:	edd3 7a00 	vldr	s15, [r3]
 8004186:	4b38      	ldr	r3, [pc, #224]	@ (8004268 <motor+0x10c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	ee07 3a10 	vmov	s14, r3
 800418e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004192:	eef0 0a47 	vmov.f32	s1, s14
 8004196:	eeb0 0a67 	vmov.f32	s0, s15
 800419a:	f7fd fe3d 	bl	8001e18 <calculateVel1>
	calculateVel2(value2, time);
 800419e:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <motor+0x104>)
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	4b30      	ldr	r3, [pc, #192]	@ (8004268 <motor+0x10c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	ee07 3a10 	vmov	s14, r3
 80041ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80041b0:	eef0 0a47 	vmov.f32	s1, s14
 80041b4:	eeb0 0a67 	vmov.f32	s0, s15
 80041b8:	f7fe fad2 	bl	8002760 <calculateVel2>
	calculateVel3(value3, time);
 80041bc:	4b27      	ldr	r3, [pc, #156]	@ (800425c <motor+0x100>)
 80041be:	edd3 7a00 	vldr	s15, [r3]
 80041c2:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <motor+0x10c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	ee07 3a10 	vmov	s14, r3
 80041ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80041ce:	eef0 0a47 	vmov.f32	s1, s14
 80041d2:	eeb0 0a67 	vmov.f32	s0, s15
 80041d6:	f7fe ff67 	bl	80030a8 <calculateVel3>
    calculateVel4(value4, time);
 80041da:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <motor+0xfc>)
 80041dc:	edd3 7a00 	vldr	s15, [r3]
 80041e0:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <motor+0x10c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	ee07 3a10 	vmov	s14, r3
 80041e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80041ec:	eef0 0a47 	vmov.f32	s1, s14
 80041f0:	eeb0 0a67 	vmov.f32	s0, s15
 80041f4:	f7ff fbfc 	bl	80039f0 <calculateVel4>
	calculateVel2(0.54, time);
	calculateVel3(0.54, time);
	calculateVel4(0.54, time);*/

	// Print the final values
	HAL_Delay(100);
 80041f8:	2064      	movs	r0, #100	@ 0x64
 80041fa:	f001 f9db 	bl	80055b4 <HAL_Delay>
	sendJointState(angular_position_rad1, angular_position_rad2,
 80041fe:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <motor+0x110>)
 8004200:	edd3 7a00 	vldr	s15, [r3]
 8004204:	4b1a      	ldr	r3, [pc, #104]	@ (8004270 <motor+0x114>)
 8004206:	ed93 7a00 	vldr	s14, [r3]
 800420a:	4b1a      	ldr	r3, [pc, #104]	@ (8004274 <motor+0x118>)
 800420c:	edd3 6a00 	vldr	s13, [r3]
 8004210:	4b19      	ldr	r3, [pc, #100]	@ (8004278 <motor+0x11c>)
 8004212:	ed93 6a00 	vldr	s12, [r3]
 8004216:	4b19      	ldr	r3, [pc, #100]	@ (800427c <motor+0x120>)
 8004218:	edd3 5a00 	vldr	s11, [r3]
 800421c:	4b18      	ldr	r3, [pc, #96]	@ (8004280 <motor+0x124>)
 800421e:	ed93 5a00 	vldr	s10, [r3]
 8004222:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <motor+0x128>)
 8004224:	edd3 4a00 	vldr	s9, [r3]
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <motor+0x12c>)
 800422a:	edd3 3a00 	vldr	s7, [r3]
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <motor+0x130>)
 8004230:	ed93 4a00 	vldr	s8, [r3]
 8004234:	eeb0 3a64 	vmov.f32	s6, s9
 8004238:	eef0 2a45 	vmov.f32	s5, s10
 800423c:	eeb0 2a65 	vmov.f32	s4, s11
 8004240:	eef0 1a46 	vmov.f32	s3, s12
 8004244:	eeb0 1a66 	vmov.f32	s2, s13
 8004248:	eef0 0a47 	vmov.f32	s1, s14
 800424c:	eeb0 0a67 	vmov.f32	s0, s15
 8004250:	f7fd fb62 	bl	8001918 <sendJointState>
			angular_position_rad3, angular_position_rad4,
			realVel1, realVel2,realVel3, realVel4,yaw);

}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	200002e8 	.word	0x200002e8
 800425c:	200002e4 	.word	0x200002e4
 8004260:	200002e0 	.word	0x200002e0
 8004264:	200002dc 	.word	0x200002dc
 8004268:	200003ec 	.word	0x200003ec
 800426c:	20000420 	.word	0x20000420
 8004270:	20000468 	.word	0x20000468
 8004274:	200004b0 	.word	0x200004b0
 8004278:	200004f8 	.word	0x200004f8
 800427c:	20000428 	.word	0x20000428
 8004280:	20000470 	.word	0x20000470
 8004284:	200004b8 	.word	0x200004b8
 8004288:	20000500 	.word	0x20000500
 800428c:	20000284 	.word	0x20000284

08004290 <Motor_Init>:

#define MAX_PWM 1000 // Maximum PWM value

#define k 0.1 // Motor characteristic constant (RPS per PWM)
// MOTOR
void Motor_Init(void) {
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // Init PWM1 -> RPWM
 8004294:	2108      	movs	r1, #8
 8004296:	4810      	ldr	r0, [pc, #64]	@ (80042d8 <Motor_Init+0x48>)
 8004298:	f003 f956 	bl	8007548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // Init PWM2 -> LPWM
 800429c:	210c      	movs	r1, #12
 800429e:	480e      	ldr	r0, [pc, #56]	@ (80042d8 <Motor_Init+0x48>)
 80042a0:	f003 f952 	bl	8007548 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Init PWM3 -> RPWM
 80042a4:	2108      	movs	r1, #8
 80042a6:	480d      	ldr	r0, [pc, #52]	@ (80042dc <Motor_Init+0x4c>)
 80042a8:	f003 f94e 	bl	8007548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Init PWM4 -> LPWM
 80042ac:	210c      	movs	r1, #12
 80042ae:	480b      	ldr	r0, [pc, #44]	@ (80042dc <Motor_Init+0x4c>)
 80042b0:	f003 f94a 	bl	8007548 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 80042b4:	2100      	movs	r1, #0
 80042b6:	480a      	ldr	r0, [pc, #40]	@ (80042e0 <Motor_Init+0x50>)
 80042b8:	f003 f946 	bl	8007548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 80042bc:	2104      	movs	r1, #4
 80042be:	4808      	ldr	r0, [pc, #32]	@ (80042e0 <Motor_Init+0x50>)
 80042c0:	f003 f942 	bl	8007548 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 80042c4:	2100      	movs	r1, #0
 80042c6:	4807      	ldr	r0, [pc, #28]	@ (80042e4 <Motor_Init+0x54>)
 80042c8:	f003 f93e 	bl	8007548 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 80042cc:	2104      	movs	r1, #4
 80042ce:	4805      	ldr	r0, [pc, #20]	@ (80042e4 <Motor_Init+0x54>)
 80042d0:	f003 f93a 	bl	8007548 <HAL_TIM_PWM_Start>
}
 80042d4:	bf00      	nop
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	2000065c 	.word	0x2000065c
 80042dc:	200005cc 	.word	0x200005cc
 80042e0:	20000734 	.word	0x20000734
 80042e4:	2000077c 	.word	0x2000077c

080042e8 <Encoder_Init>:

}

// ENCODER

void Encoder_Init(void) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Init Timer 1 -> mode Encoder
 80042ec:	213c      	movs	r1, #60	@ 0x3c
 80042ee:	4808      	ldr	r0, [pc, #32]	@ (8004310 <Encoder_Init+0x28>)
 80042f0:	f003 fa98 	bl	8007824 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Init Timer 3 -> mode Encoder
 80042f4:	213c      	movs	r1, #60	@ 0x3c
 80042f6:	4807      	ldr	r0, [pc, #28]	@ (8004314 <Encoder_Init+0x2c>)
 80042f8:	f003 fa94 	bl	8007824 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Init Timer 5 -> mode Encoder
 80042fc:	213c      	movs	r1, #60	@ 0x3c
 80042fe:	4806      	ldr	r0, [pc, #24]	@ (8004318 <Encoder_Init+0x30>)
 8004300:	f003 fa90 	bl	8007824 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL); // Init Timer 8 -> mode Encoder
 8004304:	213c      	movs	r1, #60	@ 0x3c
 8004306:	4805      	ldr	r0, [pc, #20]	@ (800431c <Encoder_Init+0x34>)
 8004308:	f003 fa8c 	bl	8007824 <HAL_TIM_Encoder_Start>
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000584 	.word	0x20000584
 8004314:	20000614 	.word	0x20000614
 8004318:	200006a4 	.word	0x200006a4
 800431c:	200006ec 	.word	0x200006ec

08004320 <Reset_Encoder1>:
int16_t Read_Encoder1(void) {
	return __HAL_TIM_GET_COUNTER(&htim1);
}
void Reset_Encoder1(void) {
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004324:	4b04      	ldr	r3, [pc, #16]	@ (8004338 <Reset_Encoder1+0x18>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000584 	.word	0x20000584

0800433c <Reset_Encoder2>:
int16_t Read_Encoder2(void) {
	return __HAL_TIM_GET_COUNTER(&htim3);
}
void Reset_Encoder2(void) {
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004340:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <Reset_Encoder2+0x18>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000614 	.word	0x20000614

08004358 <Reset_Encoder3>:
int16_t Read_Encoder3(void) {
	return __HAL_TIM_GET_COUNTER(&htim5);
}
void Reset_Encoder3(void) {
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 800435c:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <Reset_Encoder3+0x18>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2200      	movs	r2, #0
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	200006a4 	.word	0x200006a4

08004374 <Reset_Encoder4>:
int16_t Read_Encoder4(void) {
	return __HAL_TIM_GET_COUNTER(&htim8);
}
void Reset_Encoder4(void) {
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 8004378:	4b04      	ldr	r3, [pc, #16]	@ (800438c <Reset_Encoder4+0x18>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	200006ec 	.word	0x200006ec

08004390 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004398:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800439c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80043a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80043ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80043b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00b      	beq.n	80043d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80043b8:	e000      	b.n	80043bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80043ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80043bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f9      	beq.n	80043ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80043c6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80043d0:	687b      	ldr	r3, [r7, #4]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80043e4:	f001 f874 	bl	80054d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043e8:	f000 f82a 	bl	8004440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043ec:	f000 fc1e 	bl	8004c2c <MX_GPIO_Init>
  MX_TIM1_Init();
 80043f0:	f000 f8bc 	bl	800456c <MX_TIM1_Init>
  MX_TIM2_Init();
 80043f4:	f000 f912 	bl	800461c <MX_TIM2_Init>
  MX_TIM3_Init();
 80043f8:	f000 f990 	bl	800471c <MX_TIM3_Init>
  MX_TIM5_Init();
 80043fc:	f000 fa64 	bl	80048c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8004400:	f000 fab6 	bl	8004970 <MX_TIM8_Init>
  MX_TIM9_Init();
 8004404:	f000 fb0c 	bl	8004a20 <MX_TIM9_Init>
  MX_TIM12_Init();
 8004408:	f000 fb78 	bl	8004afc <MX_TIM12_Init>
  MX_TIM4_Init();
 800440c:	f000 f9da 	bl	80047c4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8004410:	f000 fbe2 	bl	8004bd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004414:	f000 f87c 	bl	8004510 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init();  // Khởi động encoder
 8004418:	f7ff ff66 	bl	80042e8 <Encoder_Init>
	Motor_Init();    // Khởi động Motor
 800441c:	f7ff ff38 	bl	8004290 <Motor_Init>
	Reset_Encoder1();
 8004420:	f7ff ff7e 	bl	8004320 <Reset_Encoder1>
	Reset_Encoder2();
 8004424:	f7ff ff8a 	bl	800433c <Reset_Encoder2>
	Reset_Encoder3();
 8004428:	f7ff ff96 	bl	8004358 <Reset_Encoder3>
	Reset_Encoder4();
 800442c:	f7ff ffa2 	bl	8004374 <Reset_Encoder4>
	 // Initialize BNO055

	   BNO055_Init(&hi2c1);
 8004430:	4802      	ldr	r0, [pc, #8]	@ (800443c <main+0x5c>)
 8004432:	f7fc fdd7 	bl	8000fe4 <BNO055_Init>
  /* USER CODE BEGIN WHILE */


	while (1) {
    /* USER CODE END WHILE */
	motor();
 8004436:	f7ff fe91 	bl	800415c <motor>
 800443a:	e7fc      	b.n	8004436 <main+0x56>
 800443c:	20000530 	.word	0x20000530

08004440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b094      	sub	sp, #80	@ 0x50
 8004444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004446:	f107 0320 	add.w	r3, r7, #32
 800444a:	2230      	movs	r2, #48	@ 0x30
 800444c:	2100      	movs	r1, #0
 800444e:	4618      	mov	r0, r3
 8004450:	f006 fb1e 	bl	800aa90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	4b27      	ldr	r3, [pc, #156]	@ (8004508 <SystemClock_Config+0xc8>)
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <SystemClock_Config+0xc8>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004472:	6413      	str	r3, [r2, #64]	@ 0x40
 8004474:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <SystemClock_Config+0xc8>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004480:	2300      	movs	r3, #0
 8004482:	607b      	str	r3, [r7, #4]
 8004484:	4b21      	ldr	r3, [pc, #132]	@ (800450c <SystemClock_Config+0xcc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	@ (800450c <SystemClock_Config+0xcc>)
 800448a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <SystemClock_Config+0xcc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800449c:	2302      	movs	r3, #2
 800449e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044a0:	2301      	movs	r3, #1
 80044a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044a4:	2310      	movs	r3, #16
 80044a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044a8:	2302      	movs	r3, #2
 80044aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044ac:	2300      	movs	r3, #0
 80044ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80044b0:	2308      	movs	r3, #8
 80044b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80044b4:	2350      	movs	r3, #80	@ 0x50
 80044b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044b8:	2302      	movs	r3, #2
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80044bc:	2304      	movs	r3, #4
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044c0:	f107 0320 	add.w	r3, r7, #32
 80044c4:	4618      	mov	r0, r3
 80044c6:	f002 fb3f 	bl	8006b48 <HAL_RCC_OscConfig>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80044d0:	f000 fc1a 	bl	8004d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044d4:	230f      	movs	r3, #15
 80044d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044d8:	2302      	movs	r3, #2
 80044da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	2102      	movs	r1, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f002 fda1 	bl	8007038 <HAL_RCC_ClockConfig>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80044fc:	f000 fc04 	bl	8004d08 <Error_Handler>
  }
}
 8004500:	bf00      	nop
 8004502:	3750      	adds	r7, #80	@ 0x50
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40023800 	.word	0x40023800
 800450c:	40007000 	.word	0x40007000

08004510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004514:	4b12      	ldr	r3, [pc, #72]	@ (8004560 <MX_I2C1_Init+0x50>)
 8004516:	4a13      	ldr	r2, [pc, #76]	@ (8004564 <MX_I2C1_Init+0x54>)
 8004518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800451a:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <MX_I2C1_Init+0x50>)
 800451c:	4a12      	ldr	r2, [pc, #72]	@ (8004568 <MX_I2C1_Init+0x58>)
 800451e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004520:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <MX_I2C1_Init+0x50>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004526:	4b0e      	ldr	r3, [pc, #56]	@ (8004560 <MX_I2C1_Init+0x50>)
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <MX_I2C1_Init+0x50>)
 800452e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004532:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004534:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <MX_I2C1_Init+0x50>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800453a:	4b09      	ldr	r3, [pc, #36]	@ (8004560 <MX_I2C1_Init+0x50>)
 800453c:	2200      	movs	r2, #0
 800453e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004540:	4b07      	ldr	r3, [pc, #28]	@ (8004560 <MX_I2C1_Init+0x50>)
 8004542:	2200      	movs	r2, #0
 8004544:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <MX_I2C1_Init+0x50>)
 8004548:	2200      	movs	r2, #0
 800454a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800454c:	4804      	ldr	r0, [pc, #16]	@ (8004560 <MX_I2C1_Init+0x50>)
 800454e:	f001 fad7 	bl	8005b00 <HAL_I2C_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004558:	f000 fbd6 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800455c:	bf00      	nop
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000530 	.word	0x20000530
 8004564:	40005400 	.word	0x40005400
 8004568:	000186a0 	.word	0x000186a0

0800456c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	@ 0x30
 8004570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	2224      	movs	r2, #36	@ 0x24
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f006 fa88 	bl	800aa90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004588:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <MX_TIM1_Init+0xa8>)
 800458a:	4a23      	ldr	r2, [pc, #140]	@ (8004618 <MX_TIM1_Init+0xac>)
 800458c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800458e:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <MX_TIM1_Init+0xa8>)
 8004590:	2263      	movs	r2, #99	@ 0x63
 8004592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004594:	4b1f      	ldr	r3, [pc, #124]	@ (8004614 <MX_TIM1_Init+0xa8>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <MX_TIM1_Init+0xa8>)
 800459c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <MX_TIM1_Init+0xa8>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <MX_TIM1_Init+0xa8>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ae:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <MX_TIM1_Init+0xa8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80045b4:	2303      	movs	r3, #3
 80045b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045bc:	2301      	movs	r3, #1
 80045be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045cc:	2301      	movs	r3, #1
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80045d8:	f107 030c 	add.w	r3, r7, #12
 80045dc:	4619      	mov	r1, r3
 80045de:	480d      	ldr	r0, [pc, #52]	@ (8004614 <MX_TIM1_Init+0xa8>)
 80045e0:	f003 f87a 	bl	80076d8 <HAL_TIM_Encoder_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80045ea:	f000 fb8d 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80045f6:	1d3b      	adds	r3, r7, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4806      	ldr	r0, [pc, #24]	@ (8004614 <MX_TIM1_Init+0xa8>)
 80045fc:	f003 fe46 	bl	800828c <HAL_TIMEx_MasterConfigSynchronization>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8004606:	f000 fb7f 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	3730      	adds	r7, #48	@ 0x30
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000584 	.word	0x20000584
 8004618:	40010000 	.word	0x40010000

0800461c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08e      	sub	sp, #56	@ 0x38
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004622:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004630:	f107 0320 	add.w	r3, r7, #32
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
 8004648:	615a      	str	r2, [r3, #20]
 800464a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800464c:	4b32      	ldr	r3, [pc, #200]	@ (8004718 <MX_TIM2_Init+0xfc>)
 800464e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8004654:	4b30      	ldr	r3, [pc, #192]	@ (8004718 <MX_TIM2_Init+0xfc>)
 8004656:	224f      	movs	r2, #79	@ 0x4f
 8004658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800465a:	4b2f      	ldr	r3, [pc, #188]	@ (8004718 <MX_TIM2_Init+0xfc>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004660:	4b2d      	ldr	r3, [pc, #180]	@ (8004718 <MX_TIM2_Init+0xfc>)
 8004662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004668:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <MX_TIM2_Init+0xfc>)
 800466a:	2200      	movs	r2, #0
 800466c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800466e:	4b2a      	ldr	r3, [pc, #168]	@ (8004718 <MX_TIM2_Init+0xfc>)
 8004670:	2200      	movs	r2, #0
 8004672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004674:	4828      	ldr	r0, [pc, #160]	@ (8004718 <MX_TIM2_Init+0xfc>)
 8004676:	f002 febf 	bl	80073f8 <HAL_TIM_Base_Init>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004680:	f000 fb42 	bl	8004d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800468a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800468e:	4619      	mov	r1, r3
 8004690:	4821      	ldr	r0, [pc, #132]	@ (8004718 <MX_TIM2_Init+0xfc>)
 8004692:	f003 fa17 	bl	8007ac4 <HAL_TIM_ConfigClockSource>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800469c:	f000 fb34 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80046a0:	481d      	ldr	r0, [pc, #116]	@ (8004718 <MX_TIM2_Init+0xfc>)
 80046a2:	f002 fef8 	bl	8007496 <HAL_TIM_PWM_Init>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80046ac:	f000 fb2c 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b0:	2300      	movs	r3, #0
 80046b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80046b8:	f107 0320 	add.w	r3, r7, #32
 80046bc:	4619      	mov	r1, r3
 80046be:	4816      	ldr	r0, [pc, #88]	@ (8004718 <MX_TIM2_Init+0xfc>)
 80046c0:	f003 fde4 	bl	800828c <HAL_TIMEx_MasterConfigSynchronization>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80046ca:	f000 fb1d 	bl	8004d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ce:	2360      	movs	r3, #96	@ 0x60
 80046d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2208      	movs	r2, #8
 80046e2:	4619      	mov	r1, r3
 80046e4:	480c      	ldr	r0, [pc, #48]	@ (8004718 <MX_TIM2_Init+0xfc>)
 80046e6:	f003 f92b 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80046f0:	f000 fb0a 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	220c      	movs	r2, #12
 80046f8:	4619      	mov	r1, r3
 80046fa:	4807      	ldr	r0, [pc, #28]	@ (8004718 <MX_TIM2_Init+0xfc>)
 80046fc:	f003 f920 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004706:	f000 faff 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800470a:	4803      	ldr	r0, [pc, #12]	@ (8004718 <MX_TIM2_Init+0xfc>)
 800470c:	f000 fcbc 	bl	8005088 <HAL_TIM_MspPostInit>

}
 8004710:	bf00      	nop
 8004712:	3738      	adds	r7, #56	@ 0x38
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	200005cc 	.word	0x200005cc

0800471c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08c      	sub	sp, #48	@ 0x30
 8004720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004722:	f107 030c 	add.w	r3, r7, #12
 8004726:	2224      	movs	r2, #36	@ 0x24
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f006 f9b0 	bl	800aa90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004730:	1d3b      	adds	r3, r7, #4
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004738:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <MX_TIM3_Init+0xa0>)
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <MX_TIM3_Init+0xa4>)
 800473c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 800473e:	4b1f      	ldr	r3, [pc, #124]	@ (80047bc <MX_TIM3_Init+0xa0>)
 8004740:	224f      	movs	r2, #79	@ 0x4f
 8004742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004744:	4b1d      	ldr	r3, [pc, #116]	@ (80047bc <MX_TIM3_Init+0xa0>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800474a:	4b1c      	ldr	r3, [pc, #112]	@ (80047bc <MX_TIM3_Init+0xa0>)
 800474c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004750:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004752:	4b1a      	ldr	r3, [pc, #104]	@ (80047bc <MX_TIM3_Init+0xa0>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004758:	4b18      	ldr	r3, [pc, #96]	@ (80047bc <MX_TIM3_Init+0xa0>)
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800475e:	2303      	movs	r3, #3
 8004760:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004766:	2301      	movs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004776:	2301      	movs	r3, #1
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800477a:	2300      	movs	r3, #0
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	4619      	mov	r1, r3
 8004788:	480c      	ldr	r0, [pc, #48]	@ (80047bc <MX_TIM3_Init+0xa0>)
 800478a:	f002 ffa5 	bl	80076d8 <HAL_TIM_Encoder_Init>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004794:	f000 fab8 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479c:	2300      	movs	r3, #0
 800479e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4805      	ldr	r0, [pc, #20]	@ (80047bc <MX_TIM3_Init+0xa0>)
 80047a6:	f003 fd71 	bl	800828c <HAL_TIMEx_MasterConfigSynchronization>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80047b0:	f000 faaa 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80047b4:	bf00      	nop
 80047b6:	3730      	adds	r7, #48	@ 0x30
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000614 	.word	0x20000614
 80047c0:	40000400 	.word	0x40000400

080047c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	@ 0x38
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	609a      	str	r2, [r3, #8]
 80047d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047d8:	f107 0320 	add.w	r3, r7, #32
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80047f4:	4b32      	ldr	r3, [pc, #200]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 80047f6:	4a33      	ldr	r2, [pc, #204]	@ (80048c4 <MX_TIM4_Init+0x100>)
 80047f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 80047fa:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 80047fc:	224f      	movs	r2, #79	@ 0x4f
 80047fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004800:	4b2f      	ldr	r3, [pc, #188]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004806:	4b2e      	ldr	r3, [pc, #184]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004808:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800480c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800480e:	4b2c      	ldr	r3, [pc, #176]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004810:	2200      	movs	r2, #0
 8004812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004814:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800481a:	4829      	ldr	r0, [pc, #164]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 800481c:	f002 fdec 	bl	80073f8 <HAL_TIM_Base_Init>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004826:	f000 fa6f 	bl	8004d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800482a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004830:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004834:	4619      	mov	r1, r3
 8004836:	4822      	ldr	r0, [pc, #136]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004838:	f003 f944 	bl	8007ac4 <HAL_TIM_ConfigClockSource>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004842:	f000 fa61 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004846:	481e      	ldr	r0, [pc, #120]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004848:	f002 fe25 	bl	8007496 <HAL_TIM_PWM_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004852:	f000 fa59 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800485a:	2300      	movs	r3, #0
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800485e:	f107 0320 	add.w	r3, r7, #32
 8004862:	4619      	mov	r1, r3
 8004864:	4816      	ldr	r0, [pc, #88]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 8004866:	f003 fd11 	bl	800828c <HAL_TIMEx_MasterConfigSynchronization>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004870:	f000 fa4a 	bl	8004d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004874:	2360      	movs	r3, #96	@ 0x60
 8004876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	2208      	movs	r2, #8
 8004888:	4619      	mov	r1, r3
 800488a:	480d      	ldr	r0, [pc, #52]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 800488c:	f003 f858 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8004896:	f000 fa37 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	220c      	movs	r2, #12
 800489e:	4619      	mov	r1, r3
 80048a0:	4807      	ldr	r0, [pc, #28]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 80048a2:	f003 f84d 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80048ac:	f000 fa2c 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <MX_TIM4_Init+0xfc>)
 80048b2:	f000 fbe9 	bl	8005088 <HAL_TIM_MspPostInit>

}
 80048b6:	bf00      	nop
 80048b8:	3738      	adds	r7, #56	@ 0x38
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	2000065c 	.word	0x2000065c
 80048c4:	40000800 	.word	0x40000800

080048c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	@ 0x30
 80048cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048ce:	f107 030c 	add.w	r3, r7, #12
 80048d2:	2224      	movs	r2, #36	@ 0x24
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f006 f8da 	bl	800aa90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <MX_TIM5_Init+0xa0>)
 80048e6:	4a21      	ldr	r2, [pc, #132]	@ (800496c <MX_TIM5_Init+0xa4>)
 80048e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 80048ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <MX_TIM5_Init+0xa0>)
 80048ec:	224f      	movs	r2, #79	@ 0x4f
 80048ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004968 <MX_TIM5_Init+0xa0>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80048f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004968 <MX_TIM5_Init+0xa0>)
 80048f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <MX_TIM5_Init+0xa0>)
 8004900:	2200      	movs	r2, #0
 8004902:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004904:	4b18      	ldr	r3, [pc, #96]	@ (8004968 <MX_TIM5_Init+0xa0>)
 8004906:	2200      	movs	r2, #0
 8004908:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800490a:	2303      	movs	r3, #3
 800490c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004912:	2301      	movs	r3, #1
 8004914:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800491e:	2300      	movs	r3, #0
 8004920:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004922:	2301      	movs	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004926:	2300      	movs	r3, #0
 8004928:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800492e:	f107 030c 	add.w	r3, r7, #12
 8004932:	4619      	mov	r1, r3
 8004934:	480c      	ldr	r0, [pc, #48]	@ (8004968 <MX_TIM5_Init+0xa0>)
 8004936:	f002 fecf 	bl	80076d8 <HAL_TIM_Encoder_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004940:	f000 f9e2 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004944:	2300      	movs	r3, #0
 8004946:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004948:	2300      	movs	r3, #0
 800494a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4805      	ldr	r0, [pc, #20]	@ (8004968 <MX_TIM5_Init+0xa0>)
 8004952:	f003 fc9b 	bl	800828c <HAL_TIMEx_MasterConfigSynchronization>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800495c:	f000 f9d4 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004960:	bf00      	nop
 8004962:	3730      	adds	r7, #48	@ 0x30
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	200006a4 	.word	0x200006a4
 800496c:	40000c00 	.word	0x40000c00

08004970 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	@ 0x30
 8004974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004976:	f107 030c 	add.w	r3, r7, #12
 800497a:	2224      	movs	r2, #36	@ 0x24
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f006 f886 	bl	800aa90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004984:	1d3b      	adds	r3, r7, #4
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800498c:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 800498e:	4a23      	ldr	r2, [pc, #140]	@ (8004a1c <MX_TIM8_Init+0xac>)
 8004990:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8004992:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 8004994:	224f      	movs	r2, #79	@ 0x4f
 8004996:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004998:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 800499a:	2200      	movs	r2, #0
 800499c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800499e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 80049a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049b2:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80049b8:	2303      	movs	r3, #3
 80049ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80049cc:	2300      	movs	r3, #0
 80049ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80049d0:	2301      	movs	r3, #1
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80049d4:	2300      	movs	r3, #0
 80049d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80049dc:	f107 030c 	add.w	r3, r7, #12
 80049e0:	4619      	mov	r1, r3
 80049e2:	480d      	ldr	r0, [pc, #52]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 80049e4:	f002 fe78 	bl	80076d8 <HAL_TIM_Encoder_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80049ee:	f000 f98b 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4806      	ldr	r0, [pc, #24]	@ (8004a18 <MX_TIM8_Init+0xa8>)
 8004a00:	f003 fc44 	bl	800828c <HAL_TIMEx_MasterConfigSynchronization>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004a0a:	f000 f97d 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004a0e:	bf00      	nop
 8004a10:	3730      	adds	r7, #48	@ 0x30
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200006ec 	.word	0x200006ec
 8004a1c:	40010400 	.word	0x40010400

08004a20 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	@ 0x30
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a26:	f107 0320 	add.w	r3, r7, #32
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	611a      	str	r2, [r3, #16]
 8004a42:	615a      	str	r2, [r3, #20]
 8004a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004a46:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a48:	4a2b      	ldr	r2, [pc, #172]	@ (8004af8 <MX_TIM9_Init+0xd8>)
 8004a4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 80-1;
 8004a4c:	4b29      	ldr	r3, [pc, #164]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a4e:	224f      	movs	r2, #79	@ 0x4f
 8004a50:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a52:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8004a58:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004a5e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a60:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a66:	4b23      	ldr	r3, [pc, #140]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004a6c:	4821      	ldr	r0, [pc, #132]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a6e:	f002 fcc3 	bl	80073f8 <HAL_TIM_Base_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8004a78:	f000 f946 	bl	8004d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a80:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004a82:	f107 0320 	add.w	r3, r7, #32
 8004a86:	4619      	mov	r1, r3
 8004a88:	481a      	ldr	r0, [pc, #104]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a8a:	f003 f81b 	bl	8007ac4 <HAL_TIM_ConfigClockSource>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8004a94:	f000 f938 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004a98:	4816      	ldr	r0, [pc, #88]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004a9a:	f002 fcfc 	bl	8007496 <HAL_TIM_PWM_Init>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8004aa4:	f000 f930 	bl	8004d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004aa8:	2360      	movs	r3, #96	@ 0x60
 8004aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ab8:	1d3b      	adds	r3, r7, #4
 8004aba:	2200      	movs	r2, #0
 8004abc:	4619      	mov	r1, r3
 8004abe:	480d      	ldr	r0, [pc, #52]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004ac0:	f002 ff3e 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8004aca:	f000 f91d 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4807      	ldr	r0, [pc, #28]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004ad6:	f002 ff33 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8004ae0:	f000 f912 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8004ae4:	4803      	ldr	r0, [pc, #12]	@ (8004af4 <MX_TIM9_Init+0xd4>)
 8004ae6:	f000 facf 	bl	8005088 <HAL_TIM_MspPostInit>

}
 8004aea:	bf00      	nop
 8004aec:	3730      	adds	r7, #48	@ 0x30
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000734 	.word	0x20000734
 8004af8:	40014000 	.word	0x40014000

08004afc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08c      	sub	sp, #48	@ 0x30
 8004b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b02:	f107 0320 	add.w	r3, r7, #32
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	605a      	str	r2, [r3, #4]
 8004b0c:	609a      	str	r2, [r3, #8]
 8004b0e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	609a      	str	r2, [r3, #8]
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	611a      	str	r2, [r3, #16]
 8004b1e:	615a      	str	r2, [r3, #20]
 8004b20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004b22:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b24:	4a2b      	ldr	r2, [pc, #172]	@ (8004bd4 <MX_TIM12_Init+0xd8>)
 8004b26:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 8004b28:	4b29      	ldr	r3, [pc, #164]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b2a:	224f      	movs	r2, #79	@ 0x4f
 8004b2c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b2e:	4b28      	ldr	r3, [pc, #160]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8004b34:	4b26      	ldr	r3, [pc, #152]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b36:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b3a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3c:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b42:	4b23      	ldr	r3, [pc, #140]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004b48:	4821      	ldr	r0, [pc, #132]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b4a:	f002 fc55 	bl	80073f8 <HAL_TIM_Base_Init>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8004b54:	f000 f8d8 	bl	8004d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004b5e:	f107 0320 	add.w	r3, r7, #32
 8004b62:	4619      	mov	r1, r3
 8004b64:	481a      	ldr	r0, [pc, #104]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b66:	f002 ffad 	bl	8007ac4 <HAL_TIM_ConfigClockSource>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d001      	beq.n	8004b74 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004b70:	f000 f8ca 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004b74:	4816      	ldr	r0, [pc, #88]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b76:	f002 fc8e 	bl	8007496 <HAL_TIM_PWM_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8004b80:	f000 f8c2 	bl	8004d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b84:	2360      	movs	r3, #96	@ 0x60
 8004b86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	2200      	movs	r2, #0
 8004b98:	4619      	mov	r1, r3
 8004b9a:	480d      	ldr	r0, [pc, #52]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004b9c:	f002 fed0 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8004ba6:	f000 f8af 	bl	8004d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004baa:	1d3b      	adds	r3, r7, #4
 8004bac:	2204      	movs	r2, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4807      	ldr	r0, [pc, #28]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004bb2:	f002 fec5 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8004bbc:	f000 f8a4 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004bc0:	4803      	ldr	r0, [pc, #12]	@ (8004bd0 <MX_TIM12_Init+0xd4>)
 8004bc2:	f000 fa61 	bl	8005088 <HAL_TIM_MspPostInit>

}
 8004bc6:	bf00      	nop
 8004bc8:	3730      	adds	r7, #48	@ 0x30
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000077c 	.word	0x2000077c
 8004bd4:	40001800 	.word	0x40001800

08004bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bdc:	4b11      	ldr	r3, [pc, #68]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004bde:	4a12      	ldr	r2, [pc, #72]	@ (8004c28 <MX_USART2_UART_Init+0x50>)
 8004be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004be2:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004be4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004be8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bea:	4b0e      	ldr	r3, [pc, #56]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004bfe:	220c      	movs	r2, #12
 8004c00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c02:	4b08      	ldr	r3, [pc, #32]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c0e:	4805      	ldr	r0, [pc, #20]	@ (8004c24 <MX_USART2_UART_Init+0x4c>)
 8004c10:	f003 fbb8 	bl	8008384 <HAL_UART_Init>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004c1a:	f000 f875 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200007c4 	.word	0x200007c4
 8004c28:	40004400 	.word	0x40004400

08004c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	4b25      	ldr	r3, [pc, #148]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	4a24      	ldr	r2, [pc, #144]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c3c:	f043 0310 	orr.w	r3, r3, #16
 8004c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c42:	4b22      	ldr	r3, [pc, #136]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	f003 0310 	and.w	r3, r3, #16
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	4b1e      	ldr	r3, [pc, #120]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	4b17      	ldr	r3, [pc, #92]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c72:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c7a:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	4b10      	ldr	r3, [pc, #64]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c90:	f043 0308 	orr.w	r3, r3, #8
 8004c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004caa:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <MX_GPIO_Init+0xa0>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	607b      	str	r3, [r7, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800

08004cd0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e009      	b.n	8004cf6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	60ba      	str	r2, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fb50 	bl	8004390 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	dbf1      	blt.n	8004ce2 <_write+0x12>
	}
	return len;
 8004cfe:	687b      	ldr	r3, [r7, #4]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d0c:	b672      	cpsid	i
}
 8004d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004d10:	bf00      	nop
 8004d12:	e7fd      	b.n	8004d10 <Error_Handler+0x8>

08004d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <HAL_MspInit+0x4c>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	4a0f      	ldr	r2, [pc, #60]	@ (8004d60 <HAL_MspInit+0x4c>)
 8004d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d60 <HAL_MspInit+0x4c>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <HAL_MspInit+0x4c>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <HAL_MspInit+0x4c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_MspInit+0x4c>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800

08004d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	@ 0x28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <HAL_I2C_MspInit+0x84>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d12b      	bne.n	8004dde <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	4b18      	ldr	r3, [pc, #96]	@ (8004dec <HAL_I2C_MspInit+0x88>)
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <HAL_I2C_MspInit+0x88>)
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d96:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <HAL_I2C_MspInit+0x88>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004da2:	23c0      	movs	r3, #192	@ 0xc0
 8004da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004da6:	2312      	movs	r3, #18
 8004da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dae:	2303      	movs	r3, #3
 8004db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004db2:	2304      	movs	r3, #4
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	4619      	mov	r1, r3
 8004dbc:	480c      	ldr	r0, [pc, #48]	@ (8004df0 <HAL_I2C_MspInit+0x8c>)
 8004dbe:	f000 fd03 	bl	80057c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <HAL_I2C_MspInit+0x88>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	4a08      	ldr	r2, [pc, #32]	@ (8004dec <HAL_I2C_MspInit+0x88>)
 8004dcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dd2:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_I2C_MspInit+0x88>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004dde:	bf00      	nop
 8004de0:	3728      	adds	r7, #40	@ 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40005400 	.word	0x40005400
 8004dec:	40023800 	.word	0x40023800
 8004df0:	40020400 	.word	0x40020400

08004df4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b090      	sub	sp, #64	@ 0x40
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a64      	ldr	r2, [pc, #400]	@ (8004fa4 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d12d      	bne.n	8004e72 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e1a:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	4a62      	ldr	r2, [pc, #392]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e26:	4b60      	ldr	r3, [pc, #384]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e3c:	f043 0310 	orr.w	r3, r3, #16
 8004e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e42:	4b59      	ldr	r3, [pc, #356]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004e4e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e54:	2302      	movs	r3, #2
 8004e56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e60:	2301      	movs	r3, #1
 8004e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4850      	ldr	r0, [pc, #320]	@ (8004fac <HAL_TIM_Encoder_MspInit+0x1b8>)
 8004e6c:	f000 fcac 	bl	80057c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004e70:	e094      	b.n	8004f9c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb0 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d12c      	bne.n	8004ed6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	4b49      	ldr	r3, [pc, #292]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	4a48      	ldr	r2, [pc, #288]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e86:	f043 0302 	orr.w	r3, r3, #2
 8004e8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e8c:	4b46      	ldr	r3, [pc, #280]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	623b      	str	r3, [r7, #32]
 8004e96:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	4b42      	ldr	r3, [pc, #264]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	4a41      	ldr	r2, [pc, #260]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004eb4:	23c0      	movs	r3, #192	@ 0xc0
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4839      	ldr	r0, [pc, #228]	@ (8004fb4 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004ed0:	f000 fc7a 	bl	80057c8 <HAL_GPIO_Init>
}
 8004ed4:	e062      	b.n	8004f9c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a37      	ldr	r2, [pc, #220]	@ (8004fb8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d12c      	bne.n	8004f3a <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	4b30      	ldr	r3, [pc, #192]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004eea:	f043 0308 	orr.w	r3, r3, #8
 8004eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	4b29      	ldr	r3, [pc, #164]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f04:	4a28      	ldr	r2, [pc, #160]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f0c:	4b26      	ldr	r3, [pc, #152]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f30:	4619      	mov	r1, r3
 8004f32:	4820      	ldr	r0, [pc, #128]	@ (8004fb4 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8004f34:	f000 fc48 	bl	80057c8 <HAL_GPIO_Init>
}
 8004f38:	e030      	b.n	8004f9c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fbc <HAL_TIM_Encoder_MspInit+0x1c8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d12b      	bne.n	8004f9c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	4b17      	ldr	r3, [pc, #92]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4c:	4a16      	ldr	r2, [pc, #88]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f4e:	f043 0302 	orr.w	r3, r3, #2
 8004f52:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f54:	4b14      	ldr	r3, [pc, #80]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	4a0f      	ldr	r2, [pc, #60]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f6a:	f043 0304 	orr.w	r3, r3, #4
 8004f6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f70:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f7c:	23c0      	movs	r3, #192	@ 0xc0
 8004f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f80:	2302      	movs	r3, #2
 8004f82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004f94:	4619      	mov	r1, r3
 8004f96:	480a      	ldr	r0, [pc, #40]	@ (8004fc0 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004f98:	f000 fc16 	bl	80057c8 <HAL_GPIO_Init>
}
 8004f9c:	bf00      	nop
 8004f9e:	3740      	adds	r7, #64	@ 0x40
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40020800 	.word	0x40020800

08004fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd4:	d10e      	bne.n	8004ff4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	4b27      	ldr	r3, [pc, #156]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	4a26      	ldr	r2, [pc, #152]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fe6:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004ff2:	e03a      	b.n	800506a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a20      	ldr	r2, [pc, #128]	@ (800507c <HAL_TIM_Base_MspInit+0xb8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	4b1d      	ldr	r3, [pc, #116]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005008:	f043 0304 	orr.w	r3, r3, #4
 800500c:	6413      	str	r3, [r2, #64]	@ 0x40
 800500e:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]
}
 800501a:	e026      	b.n	800506a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a17      	ldr	r2, [pc, #92]	@ (8005080 <HAL_TIM_Base_MspInit+0xbc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005034:	6453      	str	r3, [r2, #68]	@ 0x44
 8005036:	4b10      	ldr	r3, [pc, #64]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	e012      	b.n	800506a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a0e      	ldr	r2, [pc, #56]	@ (8005084 <HAL_TIM_Base_MspInit+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10d      	bne.n	800506a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800505c:	6413      	str	r3, [r2, #64]	@ 0x40
 800505e:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <HAL_TIM_Base_MspInit+0xb4>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	40000800 	.word	0x40000800
 8005080:	40014000 	.word	0x40014000
 8005084:	40001800 	.word	0x40001800

08005088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08c      	sub	sp, #48	@ 0x30
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005090:	f107 031c 	add.w	r3, r7, #28
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a8:	d11e      	bne.n	80050e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	4a46      	ldr	r2, [pc, #280]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ba:	4b44      	ldr	r3, [pc, #272]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80050c6:	230c      	movs	r3, #12
 80050c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d2:	2300      	movs	r3, #0
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050d6:	2301      	movs	r3, #1
 80050d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050da:	f107 031c 	add.w	r3, r7, #28
 80050de:	4619      	mov	r1, r3
 80050e0:	483b      	ldr	r0, [pc, #236]	@ (80051d0 <HAL_TIM_MspPostInit+0x148>)
 80050e2:	f000 fb71 	bl	80057c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80050e6:	e06c      	b.n	80051c2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a39      	ldr	r2, [pc, #228]	@ (80051d4 <HAL_TIM_MspPostInit+0x14c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d11f      	bne.n	8005132 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	4b35      	ldr	r3, [pc, #212]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fa:	4a34      	ldr	r2, [pc, #208]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 80050fc:	f043 0308 	orr.w	r3, r3, #8
 8005100:	6313      	str	r3, [r2, #48]	@ 0x30
 8005102:	4b32      	ldr	r3, [pc, #200]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800510e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005114:	2302      	movs	r3, #2
 8005116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800511c:	2300      	movs	r3, #0
 800511e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005120:	2302      	movs	r3, #2
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005124:	f107 031c 	add.w	r3, r7, #28
 8005128:	4619      	mov	r1, r3
 800512a:	482b      	ldr	r0, [pc, #172]	@ (80051d8 <HAL_TIM_MspPostInit+0x150>)
 800512c:	f000 fb4c 	bl	80057c8 <HAL_GPIO_Init>
}
 8005130:	e047      	b.n	80051c2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM9)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a29      	ldr	r2, [pc, #164]	@ (80051dc <HAL_TIM_MspPostInit+0x154>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d11e      	bne.n	800517a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	4b22      	ldr	r3, [pc, #136]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	4a21      	ldr	r2, [pc, #132]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 8005146:	f043 0310 	orr.w	r3, r3, #16
 800514a:	6313      	str	r3, [r2, #48]	@ 0x30
 800514c:	4b1f      	ldr	r3, [pc, #124]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005158:	2360      	movs	r3, #96	@ 0x60
 800515a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005164:	2300      	movs	r3, #0
 8005166:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005168:	2303      	movs	r3, #3
 800516a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800516c:	f107 031c 	add.w	r3, r7, #28
 8005170:	4619      	mov	r1, r3
 8005172:	481b      	ldr	r0, [pc, #108]	@ (80051e0 <HAL_TIM_MspPostInit+0x158>)
 8005174:	f000 fb28 	bl	80057c8 <HAL_GPIO_Init>
}
 8005178:	e023      	b.n	80051c2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM12)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a19      	ldr	r2, [pc, #100]	@ (80051e4 <HAL_TIM_MspPostInit+0x15c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d11e      	bne.n	80051c2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	4b10      	ldr	r3, [pc, #64]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	4a0f      	ldr	r2, [pc, #60]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 800518e:	f043 0302 	orr.w	r3, r3, #2
 8005192:	6313      	str	r3, [r2, #48]	@ 0x30
 8005194:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <HAL_TIM_MspPostInit+0x144>)
 8005196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80051a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80051a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a6:	2302      	movs	r3, #2
 80051a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051aa:	2301      	movs	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ae:	2300      	movs	r3, #0
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80051b2:	2309      	movs	r3, #9
 80051b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b6:	f107 031c 	add.w	r3, r7, #28
 80051ba:	4619      	mov	r1, r3
 80051bc:	480a      	ldr	r0, [pc, #40]	@ (80051e8 <HAL_TIM_MspPostInit+0x160>)
 80051be:	f000 fb03 	bl	80057c8 <HAL_GPIO_Init>
}
 80051c2:	bf00      	nop
 80051c4:	3730      	adds	r7, #48	@ 0x30
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40020c00 	.word	0x40020c00
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40021000 	.word	0x40021000
 80051e4:	40001800 	.word	0x40001800
 80051e8:	40020400 	.word	0x40020400

080051ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	@ 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f4:	f107 0314 	add.w	r3, r7, #20
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a19      	ldr	r2, [pc, #100]	@ (8005270 <HAL_UART_MspInit+0x84>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d12b      	bne.n	8005266 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <HAL_UART_MspInit+0x88>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <HAL_UART_MspInit+0x88>)
 8005218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800521c:	6413      	str	r3, [r2, #64]	@ 0x40
 800521e:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <HAL_UART_MspInit+0x88>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	4b11      	ldr	r3, [pc, #68]	@ (8005274 <HAL_UART_MspInit+0x88>)
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	4a10      	ldr	r2, [pc, #64]	@ (8005274 <HAL_UART_MspInit+0x88>)
 8005234:	f043 0308 	orr.w	r3, r3, #8
 8005238:	6313      	str	r3, [r2, #48]	@ 0x30
 800523a:	4b0e      	ldr	r3, [pc, #56]	@ (8005274 <HAL_UART_MspInit+0x88>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005246:	2360      	movs	r3, #96	@ 0x60
 8005248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524a:	2302      	movs	r3, #2
 800524c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005252:	2303      	movs	r3, #3
 8005254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005256:	2307      	movs	r3, #7
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800525a:	f107 0314 	add.w	r3, r7, #20
 800525e:	4619      	mov	r1, r3
 8005260:	4805      	ldr	r0, [pc, #20]	@ (8005278 <HAL_UART_MspInit+0x8c>)
 8005262:	f000 fab1 	bl	80057c8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005266:	bf00      	nop
 8005268:	3728      	adds	r7, #40	@ 0x28
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40004400 	.word	0x40004400
 8005274:	40023800 	.word	0x40023800
 8005278:	40020c00 	.word	0x40020c00

0800527c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <NMI_Handler+0x4>

08005284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <HardFault_Handler+0x4>

0800528c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <MemManage_Handler+0x4>

08005294 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <BusFault_Handler+0x4>

0800529c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <UsageFault_Handler+0x4>

080052a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052d4:	f000 f94e 	bl	8005574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  custom_tick++; // Increment your custom tick counter
 80052d8:	4b03      	ldr	r3, [pc, #12]	@ (80052e8 <SysTick_Handler+0x18>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a02      	ldr	r2, [pc, #8]	@ (80052e8 <SysTick_Handler+0x18>)
 80052e0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80052e2:	bf00      	nop
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	2000080c 	.word	0x2000080c

080052ec <get_custom_tick>:
/* USER CODE BEGIN 1 */
void reset_custom_tick(void) {
    custom_tick = 0; // Reset your custom tick counter
}

uint32_t get_custom_tick(void) {
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
    return custom_tick; // Return the current value of your custom tick counter
 80052f0:	4b03      	ldr	r3, [pc, #12]	@ (8005300 <get_custom_tick+0x14>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	2000080c 	.word	0x2000080c

08005304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return 1;
 8005308:	2301      	movs	r3, #1
}
 800530a:	4618      	mov	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_kill>:

int _kill(int pid, int sig)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800531e:	f005 fc8d 	bl	800ac3c <__errno>
 8005322:	4603      	mov	r3, r0
 8005324:	2216      	movs	r2, #22
 8005326:	601a      	str	r2, [r3, #0]
  return -1;
 8005328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <_exit>:

void _exit (int status)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800533c:	f04f 31ff 	mov.w	r1, #4294967295
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ffe7 	bl	8005314 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <_exit+0x12>

0800534a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	e00a      	b.n	8005372 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800535c:	f3af 8000 	nop.w
 8005360:	4601      	mov	r1, r0
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	60ba      	str	r2, [r7, #8]
 8005368:	b2ca      	uxtb	r2, r1
 800536a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	3301      	adds	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	dbf0      	blt.n	800535c <_read+0x12>
  }

  return len;
 800537a:	687b      	ldr	r3, [r7, #4]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800538c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053ac:	605a      	str	r2, [r3, #4]
  return 0;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <_isatty>:

int _isatty(int file)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053c4:	2301      	movs	r3, #1
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <_sbrk+0x5c>)
 80053f6:	4b15      	ldr	r3, [pc, #84]	@ (800544c <_sbrk+0x60>)
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005400:	4b13      	ldr	r3, [pc, #76]	@ (8005450 <_sbrk+0x64>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <_sbrk+0x64>)
 800540a:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <_sbrk+0x68>)
 800540c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <_sbrk+0x64>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d207      	bcs.n	800542c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800541c:	f005 fc0e 	bl	800ac3c <__errno>
 8005420:	4603      	mov	r3, r0
 8005422:	220c      	movs	r2, #12
 8005424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e009      	b.n	8005440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800542c:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <_sbrk+0x64>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005432:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <_sbrk+0x64>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4413      	add	r3, r2
 800543a:	4a05      	ldr	r2, [pc, #20]	@ (8005450 <_sbrk+0x64>)
 800543c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20020000 	.word	0x20020000
 800544c:	00000400 	.word	0x00000400
 8005450:	20000810 	.word	0x20000810
 8005454:	20000968 	.word	0x20000968

08005458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800545c:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <SystemInit+0x20>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	4a05      	ldr	r2, [pc, #20]	@ (8005478 <SystemInit+0x20>)
 8005464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800547c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80054b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005480:	f7ff ffea 	bl	8005458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005484:	480c      	ldr	r0, [pc, #48]	@ (80054b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005486:	490d      	ldr	r1, [pc, #52]	@ (80054bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005488:	4a0d      	ldr	r2, [pc, #52]	@ (80054c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800548a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800548c:	e002      	b.n	8005494 <LoopCopyDataInit>

0800548e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800548e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005492:	3304      	adds	r3, #4

08005494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005498:	d3f9      	bcc.n	800548e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800549a:	4a0a      	ldr	r2, [pc, #40]	@ (80054c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800549c:	4c0a      	ldr	r4, [pc, #40]	@ (80054c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800549e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054a0:	e001      	b.n	80054a6 <LoopFillZerobss>

080054a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054a4:	3204      	adds	r2, #4

080054a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054a8:	d3fb      	bcc.n	80054a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054aa:	f005 fbcd 	bl	800ac48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054ae:	f7fe ff97 	bl	80043e0 <main>
  bx  lr    
 80054b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80054b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054bc:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80054c0:	0800f168 	.word	0x0800f168
  ldr r2, =_sbss
 80054c4:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80054c8:	20000964 	.word	0x20000964

080054cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054cc:	e7fe      	b.n	80054cc <ADC_IRQHandler>
	...

080054d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005510 <HAL_Init+0x40>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <HAL_Init+0x40>)
 80054da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_Init+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005510 <HAL_Init+0x40>)
 80054e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054ec:	4b08      	ldr	r3, [pc, #32]	@ (8005510 <HAL_Init+0x40>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a07      	ldr	r2, [pc, #28]	@ (8005510 <HAL_Init+0x40>)
 80054f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054f8:	2003      	movs	r0, #3
 80054fa:	f000 f931 	bl	8005760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054fe:	200f      	movs	r0, #15
 8005500:	f000 f808 	bl	8005514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005504:	f7ff fc06 	bl	8004d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023c00 	.word	0x40023c00

08005514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800551c:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <HAL_InitTick+0x54>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	4b12      	ldr	r3, [pc, #72]	@ (800556c <HAL_InitTick+0x58>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800552a:	fbb3 f3f1 	udiv	r3, r3, r1
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f93b 	bl	80057ae <HAL_SYSTICK_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e00e      	b.n	8005560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d80a      	bhi.n	800555e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005548:	2200      	movs	r2, #0
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	f000 f911 	bl	8005776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005554:	4a06      	ldr	r2, [pc, #24]	@ (8005570 <HAL_InitTick+0x5c>)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20000080 	.word	0x20000080
 800556c:	20000088 	.word	0x20000088
 8005570:	20000084 	.word	0x20000084

08005574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005578:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_IncTick+0x20>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_IncTick+0x24>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4413      	add	r3, r2
 8005584:	4a04      	ldr	r2, [pc, #16]	@ (8005598 <HAL_IncTick+0x24>)
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000088 	.word	0x20000088
 8005598:	20000814 	.word	0x20000814

0800559c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  return uwTick;
 80055a0:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <HAL_GetTick+0x14>)
 80055a2:	681b      	ldr	r3, [r3, #0]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20000814 	.word	0x20000814

080055b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055bc:	f7ff ffee 	bl	800559c <HAL_GetTick>
 80055c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d005      	beq.n	80055da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ce:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_Delay+0x44>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055da:	bf00      	nop
 80055dc:	f7ff ffde 	bl	800559c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d8f7      	bhi.n	80055dc <HAL_Delay+0x28>
  {
  }
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000088 	.word	0x20000088

080055fc <__NVIC_SetPriorityGrouping>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800560c:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <__NVIC_SetPriorityGrouping+0x44>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005618:	4013      	ands	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800562c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800562e:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <__NVIC_SetPriorityGrouping+0x44>)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	60d3      	str	r3, [r2, #12]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <__NVIC_GetPriorityGrouping>:
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <__NVIC_GetPriorityGrouping+0x18>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	f003 0307 	and.w	r3, r3, #7
}
 8005652:	4618      	mov	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000ed00 	.word	0xe000ed00

08005660 <__NVIC_SetPriority>:
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	4603      	mov	r3, r0
 8005668:	6039      	str	r1, [r7, #0]
 800566a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800566c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005670:	2b00      	cmp	r3, #0
 8005672:	db0a      	blt.n	800568a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	490c      	ldr	r1, [pc, #48]	@ (80056ac <__NVIC_SetPriority+0x4c>)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	0112      	lsls	r2, r2, #4
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	440b      	add	r3, r1
 8005684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005688:	e00a      	b.n	80056a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4908      	ldr	r1, [pc, #32]	@ (80056b0 <__NVIC_SetPriority+0x50>)
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	3b04      	subs	r3, #4
 8005698:	0112      	lsls	r2, r2, #4
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	440b      	add	r3, r1
 800569e:	761a      	strb	r2, [r3, #24]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	e000e100 	.word	0xe000e100
 80056b0:	e000ed00 	.word	0xe000ed00

080056b4 <NVIC_EncodePriority>:
{
 80056b4:	b480      	push	{r7}
 80056b6:	b089      	sub	sp, #36	@ 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f1c3 0307 	rsb	r3, r3, #7
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	bf28      	it	cs
 80056d2:	2304      	movcs	r3, #4
 80056d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3304      	adds	r3, #4
 80056da:	2b06      	cmp	r3, #6
 80056dc:	d902      	bls.n	80056e4 <NVIC_EncodePriority+0x30>
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3b03      	subs	r3, #3
 80056e2:	e000      	b.n	80056e6 <NVIC_EncodePriority+0x32>
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43da      	mvns	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	401a      	ands	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	fa01 f303 	lsl.w	r3, r1, r3
 8005706:	43d9      	mvns	r1, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800570c:	4313      	orrs	r3, r2
}
 800570e:	4618      	mov	r0, r3
 8005710:	3724      	adds	r7, #36	@ 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <SysTick_Config>:
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3b01      	subs	r3, #1
 8005728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800572c:	d301      	bcc.n	8005732 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800572e:	2301      	movs	r3, #1
 8005730:	e00f      	b.n	8005752 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005732:	4a0a      	ldr	r2, [pc, #40]	@ (800575c <SysTick_Config+0x40>)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3b01      	subs	r3, #1
 8005738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800573a:	210f      	movs	r1, #15
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	f7ff ff8e 	bl	8005660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <SysTick_Config+0x40>)
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800574a:	4b04      	ldr	r3, [pc, #16]	@ (800575c <SysTick_Config+0x40>)
 800574c:	2207      	movs	r2, #7
 800574e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	e000e010 	.word	0xe000e010

08005760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff47 	bl	80055fc <__NVIC_SetPriorityGrouping>
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005776:	b580      	push	{r7, lr}
 8005778:	b086      	sub	sp, #24
 800577a:	af00      	add	r7, sp, #0
 800577c:	4603      	mov	r3, r0
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005788:	f7ff ff5c 	bl	8005644 <__NVIC_GetPriorityGrouping>
 800578c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f7ff ff8e 	bl	80056b4 <NVIC_EncodePriority>
 8005798:	4602      	mov	r2, r0
 800579a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ff5d 	bl	8005660 <__NVIC_SetPriority>
}
 80057a6:	bf00      	nop
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ffb0 	bl	800571c <SysTick_Config>
 80057bc:	4603      	mov	r3, r0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	@ 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e16b      	b.n	8005abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057e4:	2201      	movs	r2, #1
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	f040 815a 	bne.w	8005ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d005      	beq.n	800581a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005816:	2b02      	cmp	r3, #2
 8005818:	d130      	bne.n	800587c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	2203      	movs	r2, #3
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005850:	2201      	movs	r2, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 0201 	and.w	r2, r3, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b03      	cmp	r3, #3
 8005886:	d017      	beq.n	80058b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	2203      	movs	r2, #3
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	4013      	ands	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d123      	bne.n	800590c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	08da      	lsrs	r2, r3, #3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3208      	adds	r2, #8
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	220f      	movs	r2, #15
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	08da      	lsrs	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3208      	adds	r2, #8
 8005906:	69b9      	ldr	r1, [r7, #24]
 8005908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	2203      	movs	r2, #3
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 0203 	and.w	r2, r3, #3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80b4 	beq.w	8005ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	4b60      	ldr	r3, [pc, #384]	@ (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005956:	4a5f      	ldr	r2, [pc, #380]	@ (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800595c:	6453      	str	r3, [r2, #68]	@ 0x44
 800595e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ad4 <HAL_GPIO_Init+0x30c>)
 8005960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ad8 <HAL_GPIO_Init+0x310>)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	089b      	lsrs	r3, r3, #2
 8005970:	3302      	adds	r3, #2
 8005972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	220f      	movs	r2, #15
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4013      	ands	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a52      	ldr	r2, [pc, #328]	@ (8005adc <HAL_GPIO_Init+0x314>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02b      	beq.n	80059ee <HAL_GPIO_Init+0x226>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a51      	ldr	r2, [pc, #324]	@ (8005ae0 <HAL_GPIO_Init+0x318>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d025      	beq.n	80059ea <HAL_GPIO_Init+0x222>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a50      	ldr	r2, [pc, #320]	@ (8005ae4 <HAL_GPIO_Init+0x31c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01f      	beq.n	80059e6 <HAL_GPIO_Init+0x21e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a4f      	ldr	r2, [pc, #316]	@ (8005ae8 <HAL_GPIO_Init+0x320>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d019      	beq.n	80059e2 <HAL_GPIO_Init+0x21a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a4e      	ldr	r2, [pc, #312]	@ (8005aec <HAL_GPIO_Init+0x324>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_GPIO_Init+0x216>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a4d      	ldr	r2, [pc, #308]	@ (8005af0 <HAL_GPIO_Init+0x328>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00d      	beq.n	80059da <HAL_GPIO_Init+0x212>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a4c      	ldr	r2, [pc, #304]	@ (8005af4 <HAL_GPIO_Init+0x32c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <HAL_GPIO_Init+0x20e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a4b      	ldr	r2, [pc, #300]	@ (8005af8 <HAL_GPIO_Init+0x330>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_GPIO_Init+0x20a>
 80059ce:	2307      	movs	r3, #7
 80059d0:	e00e      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059d2:	2308      	movs	r3, #8
 80059d4:	e00c      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059d6:	2306      	movs	r3, #6
 80059d8:	e00a      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059da:	2305      	movs	r3, #5
 80059dc:	e008      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059de:	2304      	movs	r3, #4
 80059e0:	e006      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059e2:	2303      	movs	r3, #3
 80059e4:	e004      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e002      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_GPIO_Init+0x228>
 80059ee:	2300      	movs	r3, #0
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	f002 0203 	and.w	r2, r2, #3
 80059f6:	0092      	lsls	r2, r2, #2
 80059f8:	4093      	lsls	r3, r2
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a00:	4935      	ldr	r1, [pc, #212]	@ (8005ad8 <HAL_GPIO_Init+0x310>)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	089b      	lsrs	r3, r3, #2
 8005a06:	3302      	adds	r3, #2
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a32:	4a32      	ldr	r2, [pc, #200]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a38:	4b30      	ldr	r3, [pc, #192]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a5c:	4a27      	ldr	r2, [pc, #156]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a62:	4b26      	ldr	r3, [pc, #152]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	43db      	mvns	r3, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a86:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ab0:	4a12      	ldr	r2, [pc, #72]	@ (8005afc <HAL_GPIO_Init+0x334>)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b0f      	cmp	r3, #15
 8005ac0:	f67f ae90 	bls.w	80057e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3724      	adds	r7, #36	@ 0x24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40013800 	.word	0x40013800
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	40020c00 	.word	0x40020c00
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40021400 	.word	0x40021400
 8005af4:	40021800 	.word	0x40021800
 8005af8:	40021c00 	.word	0x40021c00
 8005afc:	40013c00 	.word	0x40013c00

08005b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e12b      	b.n	8005d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff f91c 	bl	8004d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	@ 0x24
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b64:	f001 fc20 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 8005b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a81      	ldr	r2, [pc, #516]	@ (8005d74 <HAL_I2C_Init+0x274>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d807      	bhi.n	8005b84 <HAL_I2C_Init+0x84>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a80      	ldr	r2, [pc, #512]	@ (8005d78 <HAL_I2C_Init+0x278>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	bf94      	ite	ls
 8005b7c:	2301      	movls	r3, #1
 8005b7e:	2300      	movhi	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e006      	b.n	8005b92 <HAL_I2C_Init+0x92>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a7d      	ldr	r2, [pc, #500]	@ (8005d7c <HAL_I2C_Init+0x27c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	bf94      	ite	ls
 8005b8c:	2301      	movls	r3, #1
 8005b8e:	2300      	movhi	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0e7      	b.n	8005d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a78      	ldr	r2, [pc, #480]	@ (8005d80 <HAL_I2C_Init+0x280>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0c9b      	lsrs	r3, r3, #18
 8005ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8005d74 <HAL_I2C_Init+0x274>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d802      	bhi.n	8005bd4 <HAL_I2C_Init+0xd4>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	e009      	b.n	8005be8 <HAL_I2C_Init+0xe8>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	4a69      	ldr	r2, [pc, #420]	@ (8005d84 <HAL_I2C_Init+0x284>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	3301      	adds	r3, #1
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	495c      	ldr	r1, [pc, #368]	@ (8005d74 <HAL_I2C_Init+0x274>)
 8005c04:	428b      	cmp	r3, r1
 8005c06:	d819      	bhi.n	8005c3c <HAL_I2C_Init+0x13c>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e59      	subs	r1, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_I2C_Init+0x138>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1e59      	subs	r1, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c30:	3301      	adds	r3, #1
 8005c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c36:	e051      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e04f      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d111      	bne.n	8005c68 <HAL_I2C_Init+0x168>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	440b      	add	r3, r1
 8005c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	e012      	b.n	8005c8e <HAL_I2C_Init+0x18e>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1e58      	subs	r0, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	0099      	lsls	r1, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Init+0x196>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e022      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10e      	bne.n	8005cbc <HAL_I2C_Init+0x1bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1e58      	subs	r0, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	440b      	add	r3, r1
 8005cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cba:	e00f      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1e58      	subs	r0, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6859      	ldr	r1, [r3, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	0099      	lsls	r1, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	6809      	ldr	r1, [r1, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69da      	ldr	r2, [r3, #28]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6911      	ldr	r1, [r2, #16]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68d2      	ldr	r2, [r2, #12]
 8005d16:	4311      	orrs	r1, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	000186a0 	.word	0x000186a0
 8005d78:	001e847f 	.word	0x001e847f
 8005d7c:	003d08ff 	.word	0x003d08ff
 8005d80:	431bde83 	.word	0x431bde83
 8005d84:	10624dd3 	.word	0x10624dd3

08005d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	813b      	strh	r3, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005da2:	f7ff fbfb 	bl	800559c <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	f040 80d9 	bne.w	8005f68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	2319      	movs	r3, #25
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	496d      	ldr	r1, [pc, #436]	@ (8005f74 <HAL_I2C_Mem_Write+0x1ec>)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fc8b 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e0cc      	b.n	8005f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_I2C_Mem_Write+0x56>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e0c5      	b.n	8005f6a <HAL_I2C_Mem_Write+0x1e2>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d007      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2221      	movs	r2, #33	@ 0x21
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2240      	movs	r2, #64	@ 0x40
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a3a      	ldr	r2, [r7, #32]
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a4d      	ldr	r2, [pc, #308]	@ (8005f78 <HAL_I2C_Mem_Write+0x1f0>)
 8005e44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e46:	88f8      	ldrh	r0, [r7, #6]
 8005e48:	893a      	ldrh	r2, [r7, #8]
 8005e4a:	8979      	ldrh	r1, [r7, #10]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4603      	mov	r3, r0
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f000 fac2 	bl	80063e0 <I2C_RequestMemoryWrite>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d052      	beq.n	8005f08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e081      	b.n	8005f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fd50 	bl	8006910 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00d      	beq.n	8005e92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d107      	bne.n	8005e8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e06b      	b.n	8005f6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d11b      	bne.n	8005f08 <HAL_I2C_Mem_Write+0x180>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d017      	beq.n	8005f08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1aa      	bne.n	8005e66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 fd43 	bl	80069a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00d      	beq.n	8005f3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d107      	bne.n	8005f38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e016      	b.n	8005f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	e000      	b.n	8005f6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	00100002 	.word	0x00100002
 8005f78:	ffff0000 	.word	0xffff0000

08005f7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	817b      	strh	r3, [r7, #10]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	813b      	strh	r3, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f96:	f7ff fb01 	bl	800559c <HAL_GetTick>
 8005f9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b20      	cmp	r3, #32
 8005fa6:	f040 8214 	bne.w	80063d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	2319      	movs	r3, #25
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	497b      	ldr	r1, [pc, #492]	@ (80061a0 <HAL_I2C_Mem_Read+0x224>)
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fb91 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e207      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_I2C_Mem_Read+0x56>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e200      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d007      	beq.n	8005ff8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2222      	movs	r2, #34	@ 0x22
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2240      	movs	r2, #64	@ 0x40
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006028:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a5b      	ldr	r2, [pc, #364]	@ (80061a4 <HAL_I2C_Mem_Read+0x228>)
 8006038:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800603a:	88f8      	ldrh	r0, [r7, #6]
 800603c:	893a      	ldrh	r2, [r7, #8]
 800603e:	8979      	ldrh	r1, [r7, #10]
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	4603      	mov	r3, r0
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fa5e 	bl	800650c <I2C_RequestMemoryRead>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e1bc      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d113      	bne.n	800608a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	623b      	str	r3, [r7, #32]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	e190      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800608e:	2b01      	cmp	r3, #1
 8006090:	d11b      	bne.n	80060ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e170      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d11b      	bne.n	800610a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	e150      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006120:	e144      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006126:	2b03      	cmp	r3, #3
 8006128:	f200 80f1 	bhi.w	800630e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006130:	2b01      	cmp	r3, #1
 8006132:	d123      	bne.n	800617c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006136:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 fc79 	bl	8006a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e145      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800617a:	e117      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006180:	2b02      	cmp	r3, #2
 8006182:	d14e      	bne.n	8006222 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	2200      	movs	r2, #0
 800618c:	4906      	ldr	r1, [pc, #24]	@ (80061a8 <HAL_I2C_Mem_Read+0x22c>)
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 faa4 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e11a      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
 800619e:	bf00      	nop
 80061a0:	00100002 	.word	0x00100002
 80061a4:	ffff0000 	.word	0xffff0000
 80061a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006220:	e0c4      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	2200      	movs	r2, #0
 800622a:	496c      	ldr	r1, [pc, #432]	@ (80063dc <HAL_I2C_Mem_Read+0x460>)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fa55 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e0cb      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800624a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	2200      	movs	r2, #0
 8006286:	4955      	ldr	r1, [pc, #340]	@ (80063dc <HAL_I2C_Mem_Read+0x460>)
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fa27 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e09d      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800630c:	e04e      	b.n	80063ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fb8c 	bl	8006a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e058      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b04      	cmp	r3, #4
 8006360:	d124      	bne.n	80063ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006366:	2b03      	cmp	r3, #3
 8006368:	d107      	bne.n	800637a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006378:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f aeb6 	bne.w	8006122 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e000      	b.n	80063d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
  }
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	@ 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	00010004 	.word	0x00010004

080063e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	817b      	strh	r3, [r7, #10]
 80063f2:	460b      	mov	r3, r1
 80063f4:	813b      	strh	r3, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	2200      	movs	r2, #0
 8006412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 f960 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00d      	beq.n	800643e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006430:	d103      	bne.n	800643a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e05f      	b.n	80064fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800643e:	897b      	ldrh	r3, [r7, #10]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800644c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	492d      	ldr	r1, [pc, #180]	@ (8006508 <I2C_RequestMemoryWrite+0x128>)
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 f9bb 	bl	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e04c      	b.n	80064fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800647a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800647c:	6a39      	ldr	r1, [r7, #32]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa46 	bl	8006910 <I2C_WaitOnTXEFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648e:	2b04      	cmp	r3, #4
 8006490:	d107      	bne.n	80064a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e02b      	b.n	80064fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064a6:	88fb      	ldrh	r3, [r7, #6]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064ac:	893b      	ldrh	r3, [r7, #8]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	611a      	str	r2, [r3, #16]
 80064b6:	e021      	b.n	80064fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064b8:	893b      	ldrh	r3, [r7, #8]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c8:	6a39      	ldr	r1, [r7, #32]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fa20 	bl	8006910 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00d      	beq.n	80064f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d107      	bne.n	80064ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e005      	b.n	80064fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064f2:	893b      	ldrh	r3, [r7, #8]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	00010002 	.word	0x00010002

0800650c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006534:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006544:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	2200      	movs	r2, #0
 800654e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f8c2 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00d      	beq.n	800657a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656c:	d103      	bne.n	8006576 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006574:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e0aa      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800657a:	897b      	ldrh	r3, [r7, #10]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006588:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	4952      	ldr	r1, [pc, #328]	@ (80066d8 <I2C_RequestMemoryRead+0x1cc>)
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f91d 	bl	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e097      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b8:	6a39      	ldr	r1, [r7, #32]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f9a8 	bl	8006910 <I2C_WaitOnTXEFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d107      	bne.n	80065de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e076      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d105      	bne.n	80065f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065e8:	893b      	ldrh	r3, [r7, #8]
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	611a      	str	r2, [r3, #16]
 80065f2:	e021      	b.n	8006638 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065f4:	893b      	ldrh	r3, [r7, #8]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006604:	6a39      	ldr	r1, [r7, #32]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f982 	bl	8006910 <I2C_WaitOnTXEFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	2b04      	cmp	r3, #4
 8006618:	d107      	bne.n	800662a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006628:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e050      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800662e:	893b      	ldrh	r3, [r7, #8]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800663a:	6a39      	ldr	r1, [r7, #32]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f967 	bl	8006910 <I2C_WaitOnTXEFlagUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	2b04      	cmp	r3, #4
 800664e:	d107      	bne.n	8006660 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800665e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e035      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006672:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2200      	movs	r2, #0
 800667c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f82b 	bl	80066dc <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800669a:	d103      	bne.n	80066a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e013      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066a8:	897b      	ldrh	r3, [r7, #10]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	6a3a      	ldr	r2, [r7, #32]
 80066bc:	4906      	ldr	r1, [pc, #24]	@ (80066d8 <I2C_RequestMemoryRead+0x1cc>)
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 f886 	bl	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	00010002 	.word	0x00010002

080066dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066ec:	e048      	b.n	8006780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d044      	beq.n	8006780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f6:	f7fe ff51 	bl	800559c <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d302      	bcc.n	800670c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d139      	bne.n	8006780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b01      	cmp	r3, #1
 8006714:	d10d      	bne.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	43da      	mvns	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4013      	ands	r3, r2
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	e00c      	b.n	800674c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	43da      	mvns	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4013      	ands	r3, r2
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	429a      	cmp	r2, r3
 8006750:	d116      	bne.n	8006780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e023      	b.n	80067c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	0c1b      	lsrs	r3, r3, #16
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10d      	bne.n	80067a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	43da      	mvns	r2, r3
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	bf0c      	ite	eq
 800679c:	2301      	moveq	r3, #1
 800679e:	2300      	movne	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	e00c      	b.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	43da      	mvns	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4013      	ands	r3, r2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf0c      	ite	eq
 80067b8:	2301      	moveq	r3, #1
 80067ba:	2300      	movne	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d093      	beq.n	80066ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067de:	e071      	b.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ee:	d123      	bne.n	8006838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006824:	f043 0204 	orr.w	r2, r3, #4
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e067      	b.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683e:	d041      	beq.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006840:	f7fe feac 	bl	800559c <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	d302      	bcc.n	8006856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d136      	bne.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	0c1b      	lsrs	r3, r3, #16
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d10c      	bne.n	800687a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	43da      	mvns	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4013      	ands	r3, r2
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
 8006878:	e00b      	b.n	8006892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	43da      	mvns	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d016      	beq.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e021      	b.n	8006908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d10c      	bne.n	80068e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	43da      	mvns	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4013      	ands	r3, r2
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	e00b      	b.n	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	43da      	mvns	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf14      	ite	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	2300      	moveq	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f af6d 	bne.w	80067e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800691c:	e034      	b.n	8006988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f8e3 	bl	8006aea <I2C_IsAcknowledgeFailed>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e034      	b.n	8006998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d028      	beq.n	8006988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006936:	f7fe fe31 	bl	800559c <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d302      	bcc.n	800694c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11d      	bne.n	8006988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d016      	beq.n	8006988 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e007      	b.n	8006998 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006992:	2b80      	cmp	r3, #128	@ 0x80
 8006994:	d1c3      	bne.n	800691e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069ac:	e034      	b.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f89b 	bl	8006aea <I2C_IsAcknowledgeFailed>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e034      	b.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d028      	beq.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fe fde9 	bl	800559c <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d11d      	bne.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d016      	beq.n	8006a18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e007      	b.n	8006a28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d1c3      	bne.n	80069ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a3c:	e049      	b.n	8006ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d119      	bne.n	8006a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0210 	mvn.w	r2, #16
 8006a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e030      	b.n	8006ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a80:	f7fe fd8c 	bl	800559c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d11d      	bne.n	8006ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b40      	cmp	r3, #64	@ 0x40
 8006aa2:	d016      	beq.n	8006ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e007      	b.n	8006ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d1ae      	bne.n	8006a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b00:	d11b      	bne.n	8006b3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	f043 0204 	orr.w	r2, r3, #4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e267      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d075      	beq.n	8006c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b66:	4b88      	ldr	r3, [pc, #544]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d00c      	beq.n	8006b8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b72:	4b85      	ldr	r3, [pc, #532]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d112      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b7e:	4b82      	ldr	r3, [pc, #520]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b8a:	d10b      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d05b      	beq.n	8006c50 <HAL_RCC_OscConfig+0x108>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d157      	bne.n	8006c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e242      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bac:	d106      	bne.n	8006bbc <HAL_RCC_OscConfig+0x74>
 8006bae:	4b76      	ldr	r3, [pc, #472]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a75      	ldr	r2, [pc, #468]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	e01d      	b.n	8006bf8 <HAL_RCC_OscConfig+0xb0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bc4:	d10c      	bne.n	8006be0 <HAL_RCC_OscConfig+0x98>
 8006bc6:	4b70      	ldr	r3, [pc, #448]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a6f      	ldr	r2, [pc, #444]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a6c      	ldr	r2, [pc, #432]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e00b      	b.n	8006bf8 <HAL_RCC_OscConfig+0xb0>
 8006be0:	4b69      	ldr	r3, [pc, #420]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a68      	ldr	r2, [pc, #416]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	4b66      	ldr	r3, [pc, #408]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a65      	ldr	r2, [pc, #404]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d013      	beq.n	8006c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c00:	f7fe fccc 	bl	800559c <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c06:	e008      	b.n	8006c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c08:	f7fe fcc8 	bl	800559c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b64      	cmp	r3, #100	@ 0x64
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e207      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0f0      	beq.n	8006c08 <HAL_RCC_OscConfig+0xc0>
 8006c26:	e014      	b.n	8006c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c28:	f7fe fcb8 	bl	800559c <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c30:	f7fe fcb4 	bl	800559c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b64      	cmp	r3, #100	@ 0x64
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e1f3      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c42:	4b51      	ldr	r3, [pc, #324]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0xe8>
 8006c4e:	e000      	b.n	8006c52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d063      	beq.n	8006d26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 030c 	and.w	r3, r3, #12
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00b      	beq.n	8006c82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c6a:	4b47      	ldr	r3, [pc, #284]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c72:	2b08      	cmp	r3, #8
 8006c74:	d11c      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c76:	4b44      	ldr	r3, [pc, #272]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d116      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c82:	4b41      	ldr	r3, [pc, #260]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_RCC_OscConfig+0x152>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d001      	beq.n	8006c9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e1c7      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4937      	ldr	r1, [pc, #220]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cae:	e03a      	b.n	8006d26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d020      	beq.n	8006cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cb8:	4b34      	ldr	r3, [pc, #208]	@ (8006d8c <HAL_RCC_OscConfig+0x244>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cbe:	f7fe fc6d 	bl	800559c <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc6:	f7fe fc69 	bl	800559c <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e1a8      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce4:	4b28      	ldr	r3, [pc, #160]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	4925      	ldr	r1, [pc, #148]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]
 8006cf8:	e015      	b.n	8006d26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cfa:	4b24      	ldr	r3, [pc, #144]	@ (8006d8c <HAL_RCC_OscConfig+0x244>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d00:	f7fe fc4c 	bl	800559c <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d08:	f7fe fc48 	bl	800559c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e187      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f0      	bne.n	8006d08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d036      	beq.n	8006da0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d016      	beq.n	8006d68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3a:	4b15      	ldr	r3, [pc, #84]	@ (8006d90 <HAL_RCC_OscConfig+0x248>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fe fc2c 	bl	800559c <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d48:	f7fe fc28 	bl	800559c <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e167      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <HAL_RCC_OscConfig+0x240>)
 8006d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCC_OscConfig+0x200>
 8006d66:	e01b      	b.n	8006da0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d68:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <HAL_RCC_OscConfig+0x248>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d6e:	f7fe fc15 	bl	800559c <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d74:	e00e      	b.n	8006d94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d76:	f7fe fc11 	bl	800559c <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d907      	bls.n	8006d94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e150      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
 8006d88:	40023800 	.word	0x40023800
 8006d8c:	42470000 	.word	0x42470000
 8006d90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d94:	4b88      	ldr	r3, [pc, #544]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1ea      	bne.n	8006d76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8097 	beq.w	8006edc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db2:	4b81      	ldr	r3, [pc, #516]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10f      	bne.n	8006dde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc6:	4a7c      	ldr	r2, [pc, #496]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dce:	4b7a      	ldr	r3, [pc, #488]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dde:	4b77      	ldr	r3, [pc, #476]	@ (8006fbc <HAL_RCC_OscConfig+0x474>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d118      	bne.n	8006e1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dea:	4b74      	ldr	r3, [pc, #464]	@ (8006fbc <HAL_RCC_OscConfig+0x474>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a73      	ldr	r2, [pc, #460]	@ (8006fbc <HAL_RCC_OscConfig+0x474>)
 8006df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df6:	f7fe fbd1 	bl	800559c <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfe:	f7fe fbcd 	bl	800559c <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e10c      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e10:	4b6a      	ldr	r3, [pc, #424]	@ (8006fbc <HAL_RCC_OscConfig+0x474>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_OscConfig+0x2ea>
 8006e24:	4b64      	ldr	r3, [pc, #400]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e28:	4a63      	ldr	r2, [pc, #396]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e30:	e01c      	b.n	8006e6c <HAL_RCC_OscConfig+0x324>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x30c>
 8006e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3e:	4a5e      	ldr	r2, [pc, #376]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e40:	f043 0304 	orr.w	r3, r3, #4
 8006e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e46:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e52:	e00b      	b.n	8006e6c <HAL_RCC_OscConfig+0x324>
 8006e54:	4b58      	ldr	r3, [pc, #352]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e58:	4a57      	ldr	r2, [pc, #348]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e60:	4b55      	ldr	r3, [pc, #340]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e64:	4a54      	ldr	r2, [pc, #336]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e66:	f023 0304 	bic.w	r3, r3, #4
 8006e6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d015      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e74:	f7fe fb92 	bl	800559c <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e7a:	e00a      	b.n	8006e92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e7c:	f7fe fb8e 	bl	800559c <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e0cb      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e92:	4b49      	ldr	r3, [pc, #292]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0ee      	beq.n	8006e7c <HAL_RCC_OscConfig+0x334>
 8006e9e:	e014      	b.n	8006eca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea0:	f7fe fb7c 	bl	800559c <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ea8:	f7fe fb78 	bl	800559c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e0b5      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1ee      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d105      	bne.n	8006edc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ed0:	4b39      	ldr	r3, [pc, #228]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed4:	4a38      	ldr	r2, [pc, #224]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80a1 	beq.w	8007028 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ee6:	4b34      	ldr	r3, [pc, #208]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	2b08      	cmp	r3, #8
 8006ef0:	d05c      	beq.n	8006fac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d141      	bne.n	8006f7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efa:	4b31      	ldr	r3, [pc, #196]	@ (8006fc0 <HAL_RCC_OscConfig+0x478>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f00:	f7fe fb4c 	bl	800559c <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f08:	f7fe fb48 	bl	800559c <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e087      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	4b27      	ldr	r3, [pc, #156]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f0      	bne.n	8006f08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69da      	ldr	r2, [r3, #28]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	019b      	lsls	r3, r3, #6
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f48:	061b      	lsls	r3, r3, #24
 8006f4a:	491b      	ldr	r1, [pc, #108]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f50:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc0 <HAL_RCC_OscConfig+0x478>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f56:	f7fe fb21 	bl	800559c <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f5e:	f7fe fb1d 	bl	800559c <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e05c      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f0      	beq.n	8006f5e <HAL_RCC_OscConfig+0x416>
 8006f7c:	e054      	b.n	8007028 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7e:	4b10      	ldr	r3, [pc, #64]	@ (8006fc0 <HAL_RCC_OscConfig+0x478>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fe fb0a 	bl	800559c <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8c:	f7fe fb06 	bl	800559c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e045      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9e:	4b06      	ldr	r3, [pc, #24]	@ (8006fb8 <HAL_RCC_OscConfig+0x470>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x444>
 8006faa:	e03d      	b.n	8007028 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d107      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e038      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	40007000 	.word	0x40007000
 8006fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8007034 <HAL_RCC_OscConfig+0x4ec>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d028      	beq.n	8007024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d121      	bne.n	8007024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d11a      	bne.n	8007024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d111      	bne.n	8007024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	3b01      	subs	r3, #1
 800700e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007010:	429a      	cmp	r2, r3
 8007012:	d107      	bne.n	8007024 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007020:	429a      	cmp	r2, r3
 8007022:	d001      	beq.n	8007028 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40023800 	.word	0x40023800

08007038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0cc      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800704c:	4b68      	ldr	r3, [pc, #416]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d90c      	bls.n	8007074 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705a:	4b65      	ldr	r3, [pc, #404]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007062:	4b63      	ldr	r3, [pc, #396]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	429a      	cmp	r2, r3
 800706e:	d001      	beq.n	8007074 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e0b8      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800708c:	4b59      	ldr	r3, [pc, #356]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4a58      	ldr	r2, [pc, #352]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007096:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a4:	4b53      	ldr	r3, [pc, #332]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4a52      	ldr	r2, [pc, #328]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80070ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b0:	4b50      	ldr	r3, [pc, #320]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	494d      	ldr	r1, [pc, #308]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d044      	beq.n	8007158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d6:	4b47      	ldr	r3, [pc, #284]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d119      	bne.n	8007116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e07f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d003      	beq.n	80070f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d107      	bne.n	8007106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f6:	4b3f      	ldr	r3, [pc, #252]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d109      	bne.n	8007116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e06f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007106:	4b3b      	ldr	r3, [pc, #236]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e067      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007116:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f023 0203 	bic.w	r2, r3, #3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	4934      	ldr	r1, [pc, #208]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	4313      	orrs	r3, r2
 8007126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007128:	f7fe fa38 	bl	800559c <HAL_GetTick>
 800712c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712e:	e00a      	b.n	8007146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007130:	f7fe fa34 	bl	800559c <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e04f      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007146:	4b2b      	ldr	r3, [pc, #172]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 020c 	and.w	r2, r3, #12
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	429a      	cmp	r2, r3
 8007156:	d1eb      	bne.n	8007130 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007158:	4b25      	ldr	r3, [pc, #148]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	683a      	ldr	r2, [r7, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d20c      	bcs.n	8007180 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007166:	4b22      	ldr	r3, [pc, #136]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	4b20      	ldr	r3, [pc, #128]	@ (80071f0 <HAL_RCC_ClockConfig+0x1b8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e032      	b.n	80071e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800718c:	4b19      	ldr	r3, [pc, #100]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4916      	ldr	r1, [pc, #88]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071aa:	4b12      	ldr	r3, [pc, #72]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	490e      	ldr	r1, [pc, #56]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071be:	f000 f821 	bl	8007204 <HAL_RCC_GetSysClockFreq>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	091b      	lsrs	r3, r3, #4
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	490a      	ldr	r1, [pc, #40]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c0>)
 80071d0:	5ccb      	ldrb	r3, [r1, r3]
 80071d2:	fa22 f303 	lsr.w	r3, r2, r3
 80071d6:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <HAL_RCC_ClockConfig+0x1c4>)
 80071d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071da:	4b09      	ldr	r3, [pc, #36]	@ (8007200 <HAL_RCC_ClockConfig+0x1c8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe f998 	bl	8005514 <HAL_InitTick>

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40023c00 	.word	0x40023c00
 80071f4:	40023800 	.word	0x40023800
 80071f8:	0800ead8 	.word	0x0800ead8
 80071fc:	20000080 	.word	0x20000080
 8007200:	20000084 	.word	0x20000084

08007204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b090      	sub	sp, #64	@ 0x40
 800720a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800721c:	4b59      	ldr	r3, [pc, #356]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x180>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 030c 	and.w	r3, r3, #12
 8007224:	2b08      	cmp	r3, #8
 8007226:	d00d      	beq.n	8007244 <HAL_RCC_GetSysClockFreq+0x40>
 8007228:	2b08      	cmp	r3, #8
 800722a:	f200 80a1 	bhi.w	8007370 <HAL_RCC_GetSysClockFreq+0x16c>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0x34>
 8007232:	2b04      	cmp	r3, #4
 8007234:	d003      	beq.n	800723e <HAL_RCC_GetSysClockFreq+0x3a>
 8007236:	e09b      	b.n	8007370 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007238:	4b53      	ldr	r3, [pc, #332]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x184>)
 800723a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800723c:	e09b      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800723e:	4b53      	ldr	r3, [pc, #332]	@ (800738c <HAL_RCC_GetSysClockFreq+0x188>)
 8007240:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007242:	e098      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007244:	4b4f      	ldr	r3, [pc, #316]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x180>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800724c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800724e:	4b4d      	ldr	r3, [pc, #308]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x180>)
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d028      	beq.n	80072ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725a:	4b4a      	ldr	r3, [pc, #296]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x180>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	099b      	lsrs	r3, r3, #6
 8007260:	2200      	movs	r2, #0
 8007262:	623b      	str	r3, [r7, #32]
 8007264:	627a      	str	r2, [r7, #36]	@ 0x24
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800726c:	2100      	movs	r1, #0
 800726e:	4b47      	ldr	r3, [pc, #284]	@ (800738c <HAL_RCC_GetSysClockFreq+0x188>)
 8007270:	fb03 f201 	mul.w	r2, r3, r1
 8007274:	2300      	movs	r3, #0
 8007276:	fb00 f303 	mul.w	r3, r0, r3
 800727a:	4413      	add	r3, r2
 800727c:	4a43      	ldr	r2, [pc, #268]	@ (800738c <HAL_RCC_GetSysClockFreq+0x188>)
 800727e:	fba0 1202 	umull	r1, r2, r0, r2
 8007282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007284:	460a      	mov	r2, r1
 8007286:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800728a:	4413      	add	r3, r2
 800728c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007290:	2200      	movs	r2, #0
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	61fa      	str	r2, [r7, #28]
 8007296:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800729a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800729e:	f7f9 fcf3 	bl	8000c88 <__aeabi_uldivmod>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4613      	mov	r3, r2
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072aa:	e053      	b.n	8007354 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072ac:	4b35      	ldr	r3, [pc, #212]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x180>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	099b      	lsrs	r3, r3, #6
 80072b2:	2200      	movs	r2, #0
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	617a      	str	r2, [r7, #20]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80072be:	f04f 0b00 	mov.w	fp, #0
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	f04f 0000 	mov.w	r0, #0
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	0159      	lsls	r1, r3, #5
 80072d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072d4:	0150      	lsls	r0, r2, #5
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	ebb2 080a 	subs.w	r8, r2, sl
 80072de:	eb63 090b 	sbc.w	r9, r3, fp
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072f6:	ebb2 0408 	subs.w	r4, r2, r8
 80072fa:	eb63 0509 	sbc.w	r5, r3, r9
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	00eb      	lsls	r3, r5, #3
 8007308:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800730c:	00e2      	lsls	r2, r4, #3
 800730e:	4614      	mov	r4, r2
 8007310:	461d      	mov	r5, r3
 8007312:	eb14 030a 	adds.w	r3, r4, sl
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	eb45 030b 	adc.w	r3, r5, fp
 800731c:	607b      	str	r3, [r7, #4]
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800732a:	4629      	mov	r1, r5
 800732c:	028b      	lsls	r3, r1, #10
 800732e:	4621      	mov	r1, r4
 8007330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007334:	4621      	mov	r1, r4
 8007336:	028a      	lsls	r2, r1, #10
 8007338:	4610      	mov	r0, r2
 800733a:	4619      	mov	r1, r3
 800733c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733e:	2200      	movs	r2, #0
 8007340:	60bb      	str	r3, [r7, #8]
 8007342:	60fa      	str	r2, [r7, #12]
 8007344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007348:	f7f9 fc9e 	bl	8000c88 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4613      	mov	r3, r2
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007354:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x180>)
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	0c1b      	lsrs	r3, r3, #16
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	3301      	adds	r3, #1
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800736e:	e002      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x184>)
 8007372:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007378:	4618      	mov	r0, r3
 800737a:	3740      	adds	r7, #64	@ 0x40
 800737c:	46bd      	mov	sp, r7
 800737e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007382:	bf00      	nop
 8007384:	40023800 	.word	0x40023800
 8007388:	00f42400 	.word	0x00f42400
 800738c:	017d7840 	.word	0x017d7840

08007390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007394:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007396:	681b      	ldr	r3, [r3, #0]
}
 8007398:	4618      	mov	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	20000080 	.word	0x20000080

080073a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073ac:	f7ff fff0 	bl	8007390 <HAL_RCC_GetHCLKFreq>
 80073b0:	4602      	mov	r2, r0
 80073b2:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	0a9b      	lsrs	r3, r3, #10
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	4903      	ldr	r1, [pc, #12]	@ (80073cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80073be:	5ccb      	ldrb	r3, [r1, r3]
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40023800 	.word	0x40023800
 80073cc:	0800eae8 	.word	0x0800eae8

080073d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073d4:	f7ff ffdc 	bl	8007390 <HAL_RCC_GetHCLKFreq>
 80073d8:	4602      	mov	r2, r0
 80073da:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	0b5b      	lsrs	r3, r3, #13
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	4903      	ldr	r1, [pc, #12]	@ (80073f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073e6:	5ccb      	ldrb	r3, [r1, r3]
 80073e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40023800 	.word	0x40023800
 80073f4:	0800eae8 	.word	0x0800eae8

080073f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e041      	b.n	800748e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fd fdd0 	bl	8004fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	4619      	mov	r1, r3
 8007436:	4610      	mov	r0, r2
 8007438:	f000 fc0c 	bl	8007c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e041      	b.n	800752c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f839 	bl	8007534 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f000 fbbd 	bl	8007c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <HAL_TIM_PWM_Start+0x24>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	bf14      	ite	ne
 8007564:	2301      	movne	r3, #1
 8007566:	2300      	moveq	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	e022      	b.n	80075b2 <HAL_TIM_PWM_Start+0x6a>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d109      	bne.n	8007586 <HAL_TIM_PWM_Start+0x3e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	bf14      	ite	ne
 800757e:	2301      	movne	r3, #1
 8007580:	2300      	moveq	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	e015      	b.n	80075b2 <HAL_TIM_PWM_Start+0x6a>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b08      	cmp	r3, #8
 800758a:	d109      	bne.n	80075a0 <HAL_TIM_PWM_Start+0x58>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b01      	cmp	r3, #1
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e008      	b.n	80075b2 <HAL_TIM_PWM_Start+0x6a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	bf14      	ite	ne
 80075ac:	2301      	movne	r3, #1
 80075ae:	2300      	moveq	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e07c      	b.n	80076b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Start+0x82>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075c8:	e013      	b.n	80075f2 <HAL_TIM_PWM_Start+0xaa>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d104      	bne.n	80075da <HAL_TIM_PWM_Start+0x92>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075d8:	e00b      	b.n	80075f2 <HAL_TIM_PWM_Start+0xaa>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d104      	bne.n	80075ea <HAL_TIM_PWM_Start+0xa2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e8:	e003      	b.n	80075f2 <HAL_TIM_PWM_Start+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2201      	movs	r2, #1
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fe20 	bl	8008240 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a2d      	ldr	r2, [pc, #180]	@ (80076bc <HAL_TIM_PWM_Start+0x174>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <HAL_TIM_PWM_Start+0xcc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2c      	ldr	r2, [pc, #176]	@ (80076c0 <HAL_TIM_PWM_Start+0x178>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d101      	bne.n	8007618 <HAL_TIM_PWM_Start+0xd0>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <HAL_TIM_PWM_Start+0xd2>
 8007618:	2300      	movs	r3, #0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d007      	beq.n	800762e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800762c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a22      	ldr	r2, [pc, #136]	@ (80076bc <HAL_TIM_PWM_Start+0x174>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d022      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007640:	d01d      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1f      	ldr	r2, [pc, #124]	@ (80076c4 <HAL_TIM_PWM_Start+0x17c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d018      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1d      	ldr	r2, [pc, #116]	@ (80076c8 <HAL_TIM_PWM_Start+0x180>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1c      	ldr	r2, [pc, #112]	@ (80076cc <HAL_TIM_PWM_Start+0x184>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00e      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a16      	ldr	r2, [pc, #88]	@ (80076c0 <HAL_TIM_PWM_Start+0x178>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d009      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <HAL_TIM_PWM_Start+0x188>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d004      	beq.n	800767e <HAL_TIM_PWM_Start+0x136>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a16      	ldr	r2, [pc, #88]	@ (80076d4 <HAL_TIM_PWM_Start+0x18c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d111      	bne.n	80076a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b06      	cmp	r3, #6
 800768e:	d010      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	e007      	b.n	80076b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0201 	orr.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40010400 	.word	0x40010400
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40001800 	.word	0x40001800

080076d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e097      	b.n	800781c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fd fb77 	bl	8004df4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800771c:	f023 0307 	bic.w	r3, r3, #7
 8007720:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f000 fa91 	bl	8007c54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	021b      	lsls	r3, r3, #8
 800776a:	4313      	orrs	r3, r2
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007778:	f023 030c 	bic.w	r3, r3, #12
 800777c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007784:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	4313      	orrs	r3, r2
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	011a      	lsls	r2, r3, #4
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	031b      	lsls	r3, r3, #12
 80077a8:	4313      	orrs	r3, r2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	4313      	orrs	r3, r2
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007834:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800783c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007844:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800784c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d110      	bne.n	8007876 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d102      	bne.n	8007860 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800785a:	7b7b      	ldrb	r3, [r7, #13]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d001      	beq.n	8007864 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e069      	b.n	8007938 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007874:	e031      	b.n	80078da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d110      	bne.n	800789e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d102      	bne.n	8007888 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007882:	7b3b      	ldrb	r3, [r7, #12]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d001      	beq.n	800788c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e055      	b.n	8007938 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800789c:	e01d      	b.n	80078da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d108      	bne.n	80078b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078a4:	7bbb      	ldrb	r3, [r7, #14]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d105      	bne.n	80078b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078aa:	7b7b      	ldrb	r3, [r7, #13]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d102      	bne.n	80078b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078b0:	7b3b      	ldrb	r3, [r7, #12]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e03e      	b.n	8007938 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_TIM_Encoder_Start+0xc4>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d008      	beq.n	80078f8 <HAL_TIM_Encoder_Start+0xd4>
 80078e6:	e00f      	b.n	8007908 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2201      	movs	r2, #1
 80078ee:	2100      	movs	r1, #0
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fca5 	bl	8008240 <TIM_CCxChannelCmd>
      break;
 80078f6:	e016      	b.n	8007926 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2201      	movs	r2, #1
 80078fe:	2104      	movs	r1, #4
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fc9d 	bl	8008240 <TIM_CCxChannelCmd>
      break;
 8007906:	e00e      	b.n	8007926 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fc95 	bl	8008240 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2201      	movs	r2, #1
 800791c:	2104      	movs	r1, #4
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fc8e 	bl	8008240 <TIM_CCxChannelCmd>
      break;
 8007924:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0201 	orr.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800795a:	2302      	movs	r3, #2
 800795c:	e0ae      	b.n	8007abc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b0c      	cmp	r3, #12
 800796a:	f200 809f 	bhi.w	8007aac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800796e:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	080079a9 	.word	0x080079a9
 8007978:	08007aad 	.word	0x08007aad
 800797c:	08007aad 	.word	0x08007aad
 8007980:	08007aad 	.word	0x08007aad
 8007984:	080079e9 	.word	0x080079e9
 8007988:	08007aad 	.word	0x08007aad
 800798c:	08007aad 	.word	0x08007aad
 8007990:	08007aad 	.word	0x08007aad
 8007994:	08007a2b 	.word	0x08007a2b
 8007998:	08007aad 	.word	0x08007aad
 800799c:	08007aad 	.word	0x08007aad
 80079a0:	08007aad 	.word	0x08007aad
 80079a4:	08007a6b 	.word	0x08007a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68b9      	ldr	r1, [r7, #8]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f9fc 	bl	8007dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0208 	orr.w	r2, r2, #8
 80079c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0204 	bic.w	r2, r2, #4
 80079d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6999      	ldr	r1, [r3, #24]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	619a      	str	r2, [r3, #24]
      break;
 80079e6:	e064      	b.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68b9      	ldr	r1, [r7, #8]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fa4c 	bl	8007e8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6999      	ldr	r1, [r3, #24]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	021a      	lsls	r2, r3, #8
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	619a      	str	r2, [r3, #24]
      break;
 8007a28:	e043      	b.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 faa1 	bl	8007f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0208 	orr.w	r2, r2, #8
 8007a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	69da      	ldr	r2, [r3, #28]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0204 	bic.w	r2, r2, #4
 8007a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69d9      	ldr	r1, [r3, #28]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	61da      	str	r2, [r3, #28]
      break;
 8007a68:	e023      	b.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 faf5 	bl	8008060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69d9      	ldr	r1, [r3, #28]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	021a      	lsls	r2, r3, #8
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	61da      	str	r2, [r3, #28]
      break;
 8007aaa:	e002      	b.n	8007ab2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e0b4      	b.n	8007c4a <HAL_TIM_ConfigClockSource+0x186>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b18:	d03e      	beq.n	8007b98 <HAL_TIM_ConfigClockSource+0xd4>
 8007b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b1e:	f200 8087 	bhi.w	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b26:	f000 8086 	beq.w	8007c36 <HAL_TIM_ConfigClockSource+0x172>
 8007b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b2e:	d87f      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b30:	2b70      	cmp	r3, #112	@ 0x70
 8007b32:	d01a      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0xa6>
 8007b34:	2b70      	cmp	r3, #112	@ 0x70
 8007b36:	d87b      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b38:	2b60      	cmp	r3, #96	@ 0x60
 8007b3a:	d050      	beq.n	8007bde <HAL_TIM_ConfigClockSource+0x11a>
 8007b3c:	2b60      	cmp	r3, #96	@ 0x60
 8007b3e:	d877      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b40:	2b50      	cmp	r3, #80	@ 0x50
 8007b42:	d03c      	beq.n	8007bbe <HAL_TIM_ConfigClockSource+0xfa>
 8007b44:	2b50      	cmp	r3, #80	@ 0x50
 8007b46:	d873      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b48:	2b40      	cmp	r3, #64	@ 0x40
 8007b4a:	d058      	beq.n	8007bfe <HAL_TIM_ConfigClockSource+0x13a>
 8007b4c:	2b40      	cmp	r3, #64	@ 0x40
 8007b4e:	d86f      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b50:	2b30      	cmp	r3, #48	@ 0x30
 8007b52:	d064      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0x15a>
 8007b54:	2b30      	cmp	r3, #48	@ 0x30
 8007b56:	d86b      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d060      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0x15a>
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	d867      	bhi.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d05c      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0x15a>
 8007b64:	2b10      	cmp	r3, #16
 8007b66:	d05a      	beq.n	8007c1e <HAL_TIM_ConfigClockSource+0x15a>
 8007b68:	e062      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b7a:	f000 fb41 	bl	8008200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	609a      	str	r2, [r3, #8]
      break;
 8007b96:	e04f      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ba8:	f000 fb2a 	bl	8008200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bba:	609a      	str	r2, [r3, #8]
      break;
 8007bbc:	e03c      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f000 fa9e 	bl	800810c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2150      	movs	r1, #80	@ 0x50
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 faf7 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007bdc:	e02c      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bea:	461a      	mov	r2, r3
 8007bec:	f000 fabd 	bl	800816a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2160      	movs	r1, #96	@ 0x60
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fae7 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007bfc:	e01c      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f000 fa7e 	bl	800810c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2140      	movs	r1, #64	@ 0x40
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fad7 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007c1c:	e00c      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4619      	mov	r1, r3
 8007c28:	4610      	mov	r0, r2
 8007c2a:	f000 face 	bl	80081ca <TIM_ITRx_SetConfig>
      break;
 8007c2e:	e003      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
      break;
 8007c34:	e000      	b.n	8007c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a46      	ldr	r2, [pc, #280]	@ (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d013      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c72:	d00f      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a43      	ldr	r2, [pc, #268]	@ (8007d84 <TIM_Base_SetConfig+0x130>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a42      	ldr	r2, [pc, #264]	@ (8007d88 <TIM_Base_SetConfig+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a41      	ldr	r2, [pc, #260]	@ (8007d8c <TIM_Base_SetConfig+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_Base_SetConfig+0x40>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a40      	ldr	r2, [pc, #256]	@ (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d108      	bne.n	8007ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a35      	ldr	r2, [pc, #212]	@ (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d02b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb4:	d027      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a32      	ldr	r2, [pc, #200]	@ (8007d84 <TIM_Base_SetConfig+0x130>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d023      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a31      	ldr	r2, [pc, #196]	@ (8007d88 <TIM_Base_SetConfig+0x134>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01f      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a30      	ldr	r2, [pc, #192]	@ (8007d8c <TIM_Base_SetConfig+0x138>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d017      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8007d94 <TIM_Base_SetConfig+0x140>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d013      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d98 <TIM_Base_SetConfig+0x144>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00f      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d9c <TIM_Base_SetConfig+0x148>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00b      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8007da0 <TIM_Base_SetConfig+0x14c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d007      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8007da4 <TIM_Base_SetConfig+0x150>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d003      	beq.n	8007d06 <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a29      	ldr	r2, [pc, #164]	@ (8007da8 <TIM_Base_SetConfig+0x154>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d108      	bne.n	8007d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a10      	ldr	r2, [pc, #64]	@ (8007d80 <TIM_Base_SetConfig+0x12c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_Base_SetConfig+0xf8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a12      	ldr	r2, [pc, #72]	@ (8007d90 <TIM_Base_SetConfig+0x13c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d103      	bne.n	8007d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d105      	bne.n	8007d72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f023 0201 	bic.w	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	611a      	str	r2, [r3, #16]
  }
}
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	40010000 	.word	0x40010000
 8007d84:	40000400 	.word	0x40000400
 8007d88:	40000800 	.word	0x40000800
 8007d8c:	40000c00 	.word	0x40000c00
 8007d90:	40010400 	.word	0x40010400
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40014400 	.word	0x40014400
 8007d9c:	40014800 	.word	0x40014800
 8007da0:	40001800 	.word	0x40001800
 8007da4:	40001c00 	.word	0x40001c00
 8007da8:	40002000 	.word	0x40002000

08007dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f023 0201 	bic.w	r2, r3, #1
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f023 0302 	bic.w	r3, r3, #2
 8007df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a20      	ldr	r2, [pc, #128]	@ (8007e84 <TIM_OC1_SetConfig+0xd8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_OC1_SetConfig+0x64>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8007e88 <TIM_OC1_SetConfig+0xdc>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10c      	bne.n	8007e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f023 0308 	bic.w	r3, r3, #8
 8007e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f023 0304 	bic.w	r3, r3, #4
 8007e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <TIM_OC1_SetConfig+0xd8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d003      	beq.n	8007e3a <TIM_OC1_SetConfig+0x8e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a14      	ldr	r2, [pc, #80]	@ (8007e88 <TIM_OC1_SetConfig+0xdc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d111      	bne.n	8007e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	621a      	str	r2, [r3, #32]
}
 8007e78:	bf00      	nop
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400

08007e8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	f023 0210 	bic.w	r2, r3, #16
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f023 0320 	bic.w	r3, r3, #32
 8007ed6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a22      	ldr	r2, [pc, #136]	@ (8007f70 <TIM_OC2_SetConfig+0xe4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_OC2_SetConfig+0x68>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a21      	ldr	r2, [pc, #132]	@ (8007f74 <TIM_OC2_SetConfig+0xe8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d10d      	bne.n	8007f10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a17      	ldr	r2, [pc, #92]	@ (8007f70 <TIM_OC2_SetConfig+0xe4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC2_SetConfig+0x94>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a16      	ldr	r2, [pc, #88]	@ (8007f74 <TIM_OC2_SetConfig+0xe8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d113      	bne.n	8007f48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40010000 	.word	0x40010000
 8007f74:	40010400 	.word	0x40010400

08007f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a21      	ldr	r2, [pc, #132]	@ (8008058 <TIM_OC3_SetConfig+0xe0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_OC3_SetConfig+0x66>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a20      	ldr	r2, [pc, #128]	@ (800805c <TIM_OC3_SetConfig+0xe4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d10d      	bne.n	8007ffa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a16      	ldr	r2, [pc, #88]	@ (8008058 <TIM_OC3_SetConfig+0xe0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_OC3_SetConfig+0x92>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a15      	ldr	r2, [pc, #84]	@ (800805c <TIM_OC3_SetConfig+0xe4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d113      	bne.n	8008032 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	621a      	str	r2, [r3, #32]
}
 800804c:	bf00      	nop
 800804e:	371c      	adds	r7, #28
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	40010000 	.word	0x40010000
 800805c:	40010400 	.word	0x40010400

08008060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	031b      	lsls	r3, r3, #12
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a12      	ldr	r2, [pc, #72]	@ (8008104 <TIM_OC4_SetConfig+0xa4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d003      	beq.n	80080c8 <TIM_OC4_SetConfig+0x68>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a11      	ldr	r2, [pc, #68]	@ (8008108 <TIM_OC4_SetConfig+0xa8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d109      	bne.n	80080dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	019b      	lsls	r3, r3, #6
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40010000 	.word	0x40010000
 8008108:	40010400 	.word	0x40010400

0800810c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800810c:	b480      	push	{r7}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0201 	bic.w	r2, r3, #1
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f023 030a 	bic.w	r3, r3, #10
 8008148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800816a:	b480      	push	{r7}
 800816c:	b087      	sub	sp, #28
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	f023 0210 	bic.w	r2, r3, #16
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	031b      	lsls	r3, r3, #12
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	621a      	str	r2, [r3, #32]
}
 80081be:	bf00      	nop
 80081c0:	371c      	adds	r7, #28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f043 0307 	orr.w	r3, r3, #7
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	609a      	str	r2, [r3, #8]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800821a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	021a      	lsls	r2, r3, #8
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	431a      	orrs	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	609a      	str	r2, [r3, #8]
}
 8008234:	bf00      	nop
 8008236:	371c      	adds	r7, #28
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	2201      	movs	r2, #1
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6a1a      	ldr	r2, [r3, #32]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	43db      	mvns	r3, r3
 8008262:	401a      	ands	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a1a      	ldr	r2, [r3, #32]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	fa01 f303 	lsl.w	r3, r1, r3
 8008278:	431a      	orrs	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e05a      	b.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a21      	ldr	r2, [pc, #132]	@ (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d022      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f0:	d01d      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1d      	ldr	r2, [pc, #116]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d018      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a1b      	ldr	r2, [pc, #108]	@ (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d013      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1a      	ldr	r2, [pc, #104]	@ (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00e      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a18      	ldr	r2, [pc, #96]	@ (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d009      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a17      	ldr	r2, [pc, #92]	@ (800837c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d004      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a15      	ldr	r2, [pc, #84]	@ (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d10c      	bne.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	4313      	orrs	r3, r2
 800833e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40010400 	.word	0x40010400
 800837c:	40014000 	.word	0x40014000
 8008380:	40001800 	.word	0x40001800

08008384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e042      	b.n	800841c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d106      	bne.n	80083b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fc ff1e 	bl	80051ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2224      	movs	r2, #36	@ 0x24
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fa09 	bl	80087e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	695a      	ldr	r2, [r3, #20]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	@ 0x28
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b20      	cmp	r3, #32
 8008442:	d175      	bne.n	8008530 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_UART_Transmit+0x2c>
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e06e      	b.n	8008532 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2221      	movs	r2, #33	@ 0x21
 800845e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008462:	f7fd f89b 	bl	800559c <HAL_GetTick>
 8008466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	88fa      	ldrh	r2, [r7, #6]
 8008472:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847c:	d108      	bne.n	8008490 <HAL_UART_Transmit+0x6c>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d104      	bne.n	8008490 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	e003      	b.n	8008498 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008498:	e02e      	b.n	80084f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	2180      	movs	r1, #128	@ 0x80
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f8df 	bl	8008668 <UART_WaitOnFlagUntilTimeout>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80084b8:	2303      	movs	r3, #3
 80084ba:	e03a      	b.n	8008532 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	3302      	adds	r3, #2
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e007      	b.n	80084ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	3301      	adds	r3, #1
 80084e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1cb      	bne.n	800849a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2200      	movs	r2, #0
 800850a:	2140      	movs	r1, #64	@ 0x40
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 f8ab 	bl	8008668 <UART_WaitOnFlagUntilTimeout>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e006      	b.n	8008532 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e000      	b.n	8008532 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008530:	2302      	movs	r3, #2
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b08a      	sub	sp, #40	@ 0x28
 800853e:	af02      	add	r7, sp, #8
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b20      	cmp	r3, #32
 8008558:	f040 8081 	bne.w	800865e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_UART_Receive+0x2e>
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e079      	b.n	8008660 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2222      	movs	r2, #34	@ 0x22
 8008576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008580:	f7fd f80c 	bl	800559c <HAL_GetTick>
 8008584:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800859a:	d108      	bne.n	80085ae <HAL_UART_Receive+0x74>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e003      	b.n	80085b6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80085b6:	e047      	b.n	8008648 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	2120      	movs	r1, #32
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 f850 	bl	8008668 <UART_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e042      	b.n	8008660 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10c      	bne.n	80085fa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	3302      	adds	r3, #2
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e01f      	b.n	800863a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008602:	d007      	beq.n	8008614 <HAL_UART_Receive+0xda>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <HAL_UART_Receive+0xe8>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d106      	bne.n	8008622 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b2da      	uxtb	r2, r3
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e008      	b.n	8008634 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800862e:	b2da      	uxtb	r2, r3
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3301      	adds	r3, #1
 8008638:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800863e:	b29b      	uxth	r3, r3
 8008640:	3b01      	subs	r3, #1
 8008642:	b29a      	uxth	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1b2      	bne.n	80085b8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	e000      	b.n	8008660 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800865e:	2302      	movs	r3, #2
  }
}
 8008660:	4618      	mov	r0, r3
 8008662:	3720      	adds	r7, #32
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008678:	e03b      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008680:	d037      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008682:	f7fc ff8b 	bl	800559c <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	6a3a      	ldr	r2, [r7, #32]
 800868e:	429a      	cmp	r2, r3
 8008690:	d302      	bcc.n	8008698 <UART_WaitOnFlagUntilTimeout+0x30>
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e03a      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d023      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b80      	cmp	r3, #128	@ 0x80
 80086ae:	d020      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b40      	cmp	r3, #64	@ 0x40
 80086b4:	d01d      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d116      	bne.n	80086f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 f81d 	bl	800871a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2208      	movs	r2, #8
 80086e4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e00f      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4013      	ands	r3, r2
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	bf0c      	ite	eq
 8008702:	2301      	moveq	r3, #1
 8008704:	2300      	movne	r3, #0
 8008706:	b2db      	uxtb	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	429a      	cmp	r2, r3
 800870e:	d0b4      	beq.n	800867a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800871a:	b480      	push	{r7}
 800871c:	b095      	sub	sp, #84	@ 0x54
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	330c      	adds	r3, #12
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008742:	643a      	str	r2, [r7, #64]	@ 0x40
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e5      	bne.n	8008722 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	61fb      	str	r3, [r7, #28]
   return(result);
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800877c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e5      	bne.n	8008756 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878e:	2b01      	cmp	r3, #1
 8008790:	d119      	bne.n	80087c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	330c      	adds	r3, #12
 8008798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f023 0310 	bic.w	r3, r3, #16
 80087a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	330c      	adds	r3, #12
 80087b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087b2:	61ba      	str	r2, [r7, #24]
 80087b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6979      	ldr	r1, [r7, #20]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	613b      	str	r3, [r7, #16]
   return(result);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e5      	bne.n	8008792 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80087d4:	bf00      	nop
 80087d6:	3754      	adds	r7, #84	@ 0x54
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e4:	b0c0      	sub	sp, #256	@ 0x100
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80087f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087fc:	68d9      	ldr	r1, [r3, #12]
 80087fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	ea40 0301 	orr.w	r3, r0, r1
 8008808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800880a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	431a      	orrs	r2, r3
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	431a      	orrs	r2, r3
 8008820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800882c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008838:	f021 010c 	bic.w	r1, r1, #12
 800883c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008846:	430b      	orrs	r3, r1
 8008848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800884a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800885a:	6999      	ldr	r1, [r3, #24]
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	ea40 0301 	orr.w	r3, r0, r1
 8008866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b8f      	ldr	r3, [pc, #572]	@ (8008aac <UART_SetConfig+0x2cc>)
 8008870:	429a      	cmp	r2, r3
 8008872:	d005      	beq.n	8008880 <UART_SetConfig+0xa0>
 8008874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ab0 <UART_SetConfig+0x2d0>)
 800887c:	429a      	cmp	r2, r3
 800887e:	d104      	bne.n	800888a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008880:	f7fe fda6 	bl	80073d0 <HAL_RCC_GetPCLK2Freq>
 8008884:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008888:	e003      	b.n	8008892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800888a:	f7fe fd8d 	bl	80073a8 <HAL_RCC_GetPCLK1Freq>
 800888e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800889c:	f040 810c 	bne.w	8008ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80088ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80088b2:	4622      	mov	r2, r4
 80088b4:	462b      	mov	r3, r5
 80088b6:	1891      	adds	r1, r2, r2
 80088b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80088ba:	415b      	adcs	r3, r3
 80088bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088c2:	4621      	mov	r1, r4
 80088c4:	eb12 0801 	adds.w	r8, r2, r1
 80088c8:	4629      	mov	r1, r5
 80088ca:	eb43 0901 	adc.w	r9, r3, r1
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088e2:	4690      	mov	r8, r2
 80088e4:	4699      	mov	r9, r3
 80088e6:	4623      	mov	r3, r4
 80088e8:	eb18 0303 	adds.w	r3, r8, r3
 80088ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088f0:	462b      	mov	r3, r5
 80088f2:	eb49 0303 	adc.w	r3, r9, r3
 80088f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008906:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800890a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800890e:	460b      	mov	r3, r1
 8008910:	18db      	adds	r3, r3, r3
 8008912:	653b      	str	r3, [r7, #80]	@ 0x50
 8008914:	4613      	mov	r3, r2
 8008916:	eb42 0303 	adc.w	r3, r2, r3
 800891a:	657b      	str	r3, [r7, #84]	@ 0x54
 800891c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008924:	f7f8 f9b0 	bl	8000c88 <__aeabi_uldivmod>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4b61      	ldr	r3, [pc, #388]	@ (8008ab4 <UART_SetConfig+0x2d4>)
 800892e:	fba3 2302 	umull	r2, r3, r3, r2
 8008932:	095b      	lsrs	r3, r3, #5
 8008934:	011c      	lsls	r4, r3, #4
 8008936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800893a:	2200      	movs	r2, #0
 800893c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008940:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	1891      	adds	r1, r2, r2
 800894e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008950:	415b      	adcs	r3, r3
 8008952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008958:	4641      	mov	r1, r8
 800895a:	eb12 0a01 	adds.w	sl, r2, r1
 800895e:	4649      	mov	r1, r9
 8008960:	eb43 0b01 	adc.w	fp, r3, r1
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008978:	4692      	mov	sl, r2
 800897a:	469b      	mov	fp, r3
 800897c:	4643      	mov	r3, r8
 800897e:	eb1a 0303 	adds.w	r3, sl, r3
 8008982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008986:	464b      	mov	r3, r9
 8008988:	eb4b 0303 	adc.w	r3, fp, r3
 800898c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800899c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80089a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80089a4:	460b      	mov	r3, r1
 80089a6:	18db      	adds	r3, r3, r3
 80089a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80089aa:	4613      	mov	r3, r2
 80089ac:	eb42 0303 	adc.w	r3, r2, r3
 80089b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80089ba:	f7f8 f965 	bl	8000c88 <__aeabi_uldivmod>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4611      	mov	r1, r2
 80089c4:	4b3b      	ldr	r3, [pc, #236]	@ (8008ab4 <UART_SetConfig+0x2d4>)
 80089c6:	fba3 2301 	umull	r2, r3, r3, r1
 80089ca:	095b      	lsrs	r3, r3, #5
 80089cc:	2264      	movs	r2, #100	@ 0x64
 80089ce:	fb02 f303 	mul.w	r3, r2, r3
 80089d2:	1acb      	subs	r3, r1, r3
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80089da:	4b36      	ldr	r3, [pc, #216]	@ (8008ab4 <UART_SetConfig+0x2d4>)
 80089dc:	fba3 2302 	umull	r2, r3, r3, r2
 80089e0:	095b      	lsrs	r3, r3, #5
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80089e8:	441c      	add	r4, r3
 80089ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80089f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80089fc:	4642      	mov	r2, r8
 80089fe:	464b      	mov	r3, r9
 8008a00:	1891      	adds	r1, r2, r2
 8008a02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a04:	415b      	adcs	r3, r3
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	1851      	adds	r1, r2, r1
 8008a10:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a12:	4649      	mov	r1, r9
 8008a14:	414b      	adcs	r3, r1
 8008a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a24:	4659      	mov	r1, fp
 8008a26:	00cb      	lsls	r3, r1, #3
 8008a28:	4651      	mov	r1, sl
 8008a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a2e:	4651      	mov	r1, sl
 8008a30:	00ca      	lsls	r2, r1, #3
 8008a32:	4610      	mov	r0, r2
 8008a34:	4619      	mov	r1, r3
 8008a36:	4603      	mov	r3, r0
 8008a38:	4642      	mov	r2, r8
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a40:	464b      	mov	r3, r9
 8008a42:	460a      	mov	r2, r1
 8008a44:	eb42 0303 	adc.w	r3, r2, r3
 8008a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a60:	460b      	mov	r3, r1
 8008a62:	18db      	adds	r3, r3, r3
 8008a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a66:	4613      	mov	r3, r2
 8008a68:	eb42 0303 	adc.w	r3, r2, r3
 8008a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008a76:	f7f8 f907 	bl	8000c88 <__aeabi_uldivmod>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <UART_SetConfig+0x2d4>)
 8008a80:	fba3 1302 	umull	r1, r3, r3, r2
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	2164      	movs	r1, #100	@ 0x64
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	3332      	adds	r3, #50	@ 0x32
 8008a92:	4a08      	ldr	r2, [pc, #32]	@ (8008ab4 <UART_SetConfig+0x2d4>)
 8008a94:	fba2 2303 	umull	r2, r3, r2, r3
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	f003 0207 	and.w	r2, r3, #7
 8008a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4422      	add	r2, r4
 8008aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008aa8:	e106      	b.n	8008cb8 <UART_SetConfig+0x4d8>
 8008aaa:	bf00      	nop
 8008aac:	40011000 	.word	0x40011000
 8008ab0:	40011400 	.word	0x40011400
 8008ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008aca:	4642      	mov	r2, r8
 8008acc:	464b      	mov	r3, r9
 8008ace:	1891      	adds	r1, r2, r2
 8008ad0:	6239      	str	r1, [r7, #32]
 8008ad2:	415b      	adcs	r3, r3
 8008ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ada:	4641      	mov	r1, r8
 8008adc:	1854      	adds	r4, r2, r1
 8008ade:	4649      	mov	r1, r9
 8008ae0:	eb43 0501 	adc.w	r5, r3, r1
 8008ae4:	f04f 0200 	mov.w	r2, #0
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	00eb      	lsls	r3, r5, #3
 8008aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008af2:	00e2      	lsls	r2, r4, #3
 8008af4:	4614      	mov	r4, r2
 8008af6:	461d      	mov	r5, r3
 8008af8:	4643      	mov	r3, r8
 8008afa:	18e3      	adds	r3, r4, r3
 8008afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b00:	464b      	mov	r3, r9
 8008b02:	eb45 0303 	adc.w	r3, r5, r3
 8008b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	f04f 0300 	mov.w	r3, #0
 8008b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b26:	4629      	mov	r1, r5
 8008b28:	008b      	lsls	r3, r1, #2
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b30:	4621      	mov	r1, r4
 8008b32:	008a      	lsls	r2, r1, #2
 8008b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008b38:	f7f8 f8a6 	bl	8000c88 <__aeabi_uldivmod>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4b60      	ldr	r3, [pc, #384]	@ (8008cc4 <UART_SetConfig+0x4e4>)
 8008b42:	fba3 2302 	umull	r2, r3, r3, r2
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	011c      	lsls	r4, r3, #4
 8008b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	464b      	mov	r3, r9
 8008b60:	1891      	adds	r1, r2, r2
 8008b62:	61b9      	str	r1, [r7, #24]
 8008b64:	415b      	adcs	r3, r3
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b6c:	4641      	mov	r1, r8
 8008b6e:	1851      	adds	r1, r2, r1
 8008b70:	6139      	str	r1, [r7, #16]
 8008b72:	4649      	mov	r1, r9
 8008b74:	414b      	adcs	r3, r1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	f04f 0200 	mov.w	r2, #0
 8008b7c:	f04f 0300 	mov.w	r3, #0
 8008b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b84:	4659      	mov	r1, fp
 8008b86:	00cb      	lsls	r3, r1, #3
 8008b88:	4651      	mov	r1, sl
 8008b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b8e:	4651      	mov	r1, sl
 8008b90:	00ca      	lsls	r2, r1, #3
 8008b92:	4610      	mov	r0, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	4603      	mov	r3, r0
 8008b98:	4642      	mov	r2, r8
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ba0:	464b      	mov	r3, r9
 8008ba2:	460a      	mov	r2, r1
 8008ba4:	eb42 0303 	adc.w	r3, r2, r3
 8008ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008bb8:	f04f 0200 	mov.w	r2, #0
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	008b      	lsls	r3, r1, #2
 8008bc8:	4641      	mov	r1, r8
 8008bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bce:	4641      	mov	r1, r8
 8008bd0:	008a      	lsls	r2, r1, #2
 8008bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008bd6:	f7f8 f857 	bl	8000c88 <__aeabi_uldivmod>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	4b38      	ldr	r3, [pc, #224]	@ (8008cc4 <UART_SetConfig+0x4e4>)
 8008be2:	fba3 2301 	umull	r2, r3, r3, r1
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	2264      	movs	r2, #100	@ 0x64
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	1acb      	subs	r3, r1, r3
 8008bf0:	011b      	lsls	r3, r3, #4
 8008bf2:	3332      	adds	r3, #50	@ 0x32
 8008bf4:	4a33      	ldr	r2, [pc, #204]	@ (8008cc4 <UART_SetConfig+0x4e4>)
 8008bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfa:	095b      	lsrs	r3, r3, #5
 8008bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c00:	441c      	add	r4, r3
 8008c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c06:	2200      	movs	r2, #0
 8008c08:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c10:	4642      	mov	r2, r8
 8008c12:	464b      	mov	r3, r9
 8008c14:	1891      	adds	r1, r2, r2
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	415b      	adcs	r3, r3
 8008c1a:	60fb      	str	r3, [r7, #12]
 8008c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c20:	4641      	mov	r1, r8
 8008c22:	1851      	adds	r1, r2, r1
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	4649      	mov	r1, r9
 8008c28:	414b      	adcs	r3, r1
 8008c2a:	607b      	str	r3, [r7, #4]
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c38:	4659      	mov	r1, fp
 8008c3a:	00cb      	lsls	r3, r1, #3
 8008c3c:	4651      	mov	r1, sl
 8008c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c42:	4651      	mov	r1, sl
 8008c44:	00ca      	lsls	r2, r1, #3
 8008c46:	4610      	mov	r0, r2
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	189b      	adds	r3, r3, r2
 8008c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c52:	464b      	mov	r3, r9
 8008c54:	460a      	mov	r2, r1
 8008c56:	eb42 0303 	adc.w	r3, r2, r3
 8008c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c66:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008c74:	4649      	mov	r1, r9
 8008c76:	008b      	lsls	r3, r1, #2
 8008c78:	4641      	mov	r1, r8
 8008c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c7e:	4641      	mov	r1, r8
 8008c80:	008a      	lsls	r2, r1, #2
 8008c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c86:	f7f7 ffff 	bl	8000c88 <__aeabi_uldivmod>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <UART_SetConfig+0x4e4>)
 8008c90:	fba3 1302 	umull	r1, r3, r3, r2
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	2164      	movs	r1, #100	@ 0x64
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	3332      	adds	r3, #50	@ 0x32
 8008ca2:	4a08      	ldr	r2, [pc, #32]	@ (8008cc4 <UART_SetConfig+0x4e4>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	f003 020f 	and.w	r2, r3, #15
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4422      	add	r2, r4
 8008cb6:	609a      	str	r2, [r3, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cc4:	51eb851f 	.word	0x51eb851f

08008cc8 <atof>:
 8008cc8:	2100      	movs	r1, #0
 8008cca:	f000 be0b 	b.w	80098e4 <strtod>

08008cce <sulp>:
 8008cce:	b570      	push	{r4, r5, r6, lr}
 8008cd0:	4604      	mov	r4, r0
 8008cd2:	460d      	mov	r5, r1
 8008cd4:	ec45 4b10 	vmov	d0, r4, r5
 8008cd8:	4616      	mov	r6, r2
 8008cda:	f003 fe25 	bl	800c928 <__ulp>
 8008cde:	ec51 0b10 	vmov	r0, r1, d0
 8008ce2:	b17e      	cbz	r6, 8008d04 <sulp+0x36>
 8008ce4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ce8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd09      	ble.n	8008d04 <sulp+0x36>
 8008cf0:	051b      	lsls	r3, r3, #20
 8008cf2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	462b      	mov	r3, r5
 8008d00:	f7f7 fc7a 	bl	80005f8 <__aeabi_dmul>
 8008d04:	ec41 0b10 	vmov	d0, r0, r1
 8008d08:	bd70      	pop	{r4, r5, r6, pc}
 8008d0a:	0000      	movs	r0, r0
 8008d0c:	0000      	movs	r0, r0
	...

08008d10 <_strtod_l>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	b09f      	sub	sp, #124	@ 0x7c
 8008d16:	460c      	mov	r4, r1
 8008d18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d1e:	9005      	str	r0, [sp, #20]
 8008d20:	f04f 0a00 	mov.w	sl, #0
 8008d24:	f04f 0b00 	mov.w	fp, #0
 8008d28:	460a      	mov	r2, r1
 8008d2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d2c:	7811      	ldrb	r1, [r2, #0]
 8008d2e:	292b      	cmp	r1, #43	@ 0x2b
 8008d30:	d04a      	beq.n	8008dc8 <_strtod_l+0xb8>
 8008d32:	d838      	bhi.n	8008da6 <_strtod_l+0x96>
 8008d34:	290d      	cmp	r1, #13
 8008d36:	d832      	bhi.n	8008d9e <_strtod_l+0x8e>
 8008d38:	2908      	cmp	r1, #8
 8008d3a:	d832      	bhi.n	8008da2 <_strtod_l+0x92>
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d03b      	beq.n	8008db8 <_strtod_l+0xa8>
 8008d40:	2200      	movs	r2, #0
 8008d42:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d46:	782a      	ldrb	r2, [r5, #0]
 8008d48:	2a30      	cmp	r2, #48	@ 0x30
 8008d4a:	f040 80b3 	bne.w	8008eb4 <_strtod_l+0x1a4>
 8008d4e:	786a      	ldrb	r2, [r5, #1]
 8008d50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d54:	2a58      	cmp	r2, #88	@ 0x58
 8008d56:	d16e      	bne.n	8008e36 <_strtod_l+0x126>
 8008d58:	9302      	str	r3, [sp, #8]
 8008d5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	4a8e      	ldr	r2, [pc, #568]	@ (8008f9c <_strtod_l+0x28c>)
 8008d64:	9805      	ldr	r0, [sp, #20]
 8008d66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d68:	a919      	add	r1, sp, #100	@ 0x64
 8008d6a:	f002 fecf 	bl	800bb0c <__gethex>
 8008d6e:	f010 060f 	ands.w	r6, r0, #15
 8008d72:	4604      	mov	r4, r0
 8008d74:	d005      	beq.n	8008d82 <_strtod_l+0x72>
 8008d76:	2e06      	cmp	r6, #6
 8008d78:	d128      	bne.n	8008dcc <_strtod_l+0xbc>
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008d80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 858e 	bne.w	80098a6 <_strtod_l+0xb96>
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d8c:	b1cb      	cbz	r3, 8008dc2 <_strtod_l+0xb2>
 8008d8e:	4652      	mov	r2, sl
 8008d90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008d94:	ec43 2b10 	vmov	d0, r2, r3
 8008d98:	b01f      	add	sp, #124	@ 0x7c
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	2920      	cmp	r1, #32
 8008da0:	d1ce      	bne.n	8008d40 <_strtod_l+0x30>
 8008da2:	3201      	adds	r2, #1
 8008da4:	e7c1      	b.n	8008d2a <_strtod_l+0x1a>
 8008da6:	292d      	cmp	r1, #45	@ 0x2d
 8008da8:	d1ca      	bne.n	8008d40 <_strtod_l+0x30>
 8008daa:	2101      	movs	r1, #1
 8008dac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008dae:	1c51      	adds	r1, r2, #1
 8008db0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008db2:	7852      	ldrb	r2, [r2, #1]
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d1c5      	bne.n	8008d44 <_strtod_l+0x34>
 8008db8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dba:	9419      	str	r4, [sp, #100]	@ 0x64
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f040 8570 	bne.w	80098a2 <_strtod_l+0xb92>
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	e7e5      	b.n	8008d94 <_strtod_l+0x84>
 8008dc8:	2100      	movs	r1, #0
 8008dca:	e7ef      	b.n	8008dac <_strtod_l+0x9c>
 8008dcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dce:	b13a      	cbz	r2, 8008de0 <_strtod_l+0xd0>
 8008dd0:	2135      	movs	r1, #53	@ 0x35
 8008dd2:	a81c      	add	r0, sp, #112	@ 0x70
 8008dd4:	f003 fea2 	bl	800cb1c <__copybits>
 8008dd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dda:	9805      	ldr	r0, [sp, #20]
 8008ddc:	f003 fa70 	bl	800c2c0 <_Bfree>
 8008de0:	3e01      	subs	r6, #1
 8008de2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008de4:	2e04      	cmp	r6, #4
 8008de6:	d806      	bhi.n	8008df6 <_strtod_l+0xe6>
 8008de8:	e8df f006 	tbb	[pc, r6]
 8008dec:	201d0314 	.word	0x201d0314
 8008df0:	14          	.byte	0x14
 8008df1:	00          	.byte	0x00
 8008df2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008df6:	05e1      	lsls	r1, r4, #23
 8008df8:	bf48      	it	mi
 8008dfa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008dfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e02:	0d1b      	lsrs	r3, r3, #20
 8008e04:	051b      	lsls	r3, r3, #20
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1bb      	bne.n	8008d82 <_strtod_l+0x72>
 8008e0a:	f001 ff17 	bl	800ac3c <__errno>
 8008e0e:	2322      	movs	r3, #34	@ 0x22
 8008e10:	6003      	str	r3, [r0, #0]
 8008e12:	e7b6      	b.n	8008d82 <_strtod_l+0x72>
 8008e14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e24:	e7e7      	b.n	8008df6 <_strtod_l+0xe6>
 8008e26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008fa4 <_strtod_l+0x294>
 8008e2a:	e7e4      	b.n	8008df6 <_strtod_l+0xe6>
 8008e2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e30:	f04f 3aff 	mov.w	sl, #4294967295
 8008e34:	e7df      	b.n	8008df6 <_strtod_l+0xe6>
 8008e36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b30      	cmp	r3, #48	@ 0x30
 8008e40:	d0f9      	beq.n	8008e36 <_strtod_l+0x126>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d09d      	beq.n	8008d82 <_strtod_l+0x72>
 8008e46:	2301      	movs	r3, #1
 8008e48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9308      	str	r3, [sp, #32]
 8008e52:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e54:	461f      	mov	r7, r3
 8008e56:	220a      	movs	r2, #10
 8008e58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e5a:	7805      	ldrb	r5, [r0, #0]
 8008e5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e60:	b2d9      	uxtb	r1, r3
 8008e62:	2909      	cmp	r1, #9
 8008e64:	d928      	bls.n	8008eb8 <_strtod_l+0x1a8>
 8008e66:	494e      	ldr	r1, [pc, #312]	@ (8008fa0 <_strtod_l+0x290>)
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f001 fe19 	bl	800aaa0 <strncmp>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d032      	beq.n	8008ed8 <_strtod_l+0x1c8>
 8008e72:	2000      	movs	r0, #0
 8008e74:	462a      	mov	r2, r5
 8008e76:	4681      	mov	r9, r0
 8008e78:	463d      	mov	r5, r7
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2a65      	cmp	r2, #101	@ 0x65
 8008e7e:	d001      	beq.n	8008e84 <_strtod_l+0x174>
 8008e80:	2a45      	cmp	r2, #69	@ 0x45
 8008e82:	d114      	bne.n	8008eae <_strtod_l+0x19e>
 8008e84:	b91d      	cbnz	r5, 8008e8e <_strtod_l+0x17e>
 8008e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e88:	4302      	orrs	r2, r0
 8008e8a:	d095      	beq.n	8008db8 <_strtod_l+0xa8>
 8008e8c:	2500      	movs	r5, #0
 8008e8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008e90:	1c62      	adds	r2, r4, #1
 8008e92:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e94:	7862      	ldrb	r2, [r4, #1]
 8008e96:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e98:	d077      	beq.n	8008f8a <_strtod_l+0x27a>
 8008e9a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e9c:	d07b      	beq.n	8008f96 <_strtod_l+0x286>
 8008e9e:	f04f 0c00 	mov.w	ip, #0
 8008ea2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ea6:	2909      	cmp	r1, #9
 8008ea8:	f240 8082 	bls.w	8008fb0 <_strtod_l+0x2a0>
 8008eac:	9419      	str	r4, [sp, #100]	@ 0x64
 8008eae:	f04f 0800 	mov.w	r8, #0
 8008eb2:	e0a2      	b.n	8008ffa <_strtod_l+0x2ea>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e7c7      	b.n	8008e48 <_strtod_l+0x138>
 8008eb8:	2f08      	cmp	r7, #8
 8008eba:	bfd5      	itete	le
 8008ebc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008ebe:	9908      	ldrgt	r1, [sp, #32]
 8008ec0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ec4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ec8:	f100 0001 	add.w	r0, r0, #1
 8008ecc:	bfd4      	ite	le
 8008ece:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008ed0:	9308      	strgt	r3, [sp, #32]
 8008ed2:	3701      	adds	r7, #1
 8008ed4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ed6:	e7bf      	b.n	8008e58 <_strtod_l+0x148>
 8008ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ede:	785a      	ldrb	r2, [r3, #1]
 8008ee0:	b37f      	cbz	r7, 8008f42 <_strtod_l+0x232>
 8008ee2:	4681      	mov	r9, r0
 8008ee4:	463d      	mov	r5, r7
 8008ee6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d912      	bls.n	8008f14 <_strtod_l+0x204>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e7c4      	b.n	8008e7c <_strtod_l+0x16c>
 8008ef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ef8:	785a      	ldrb	r2, [r3, #1]
 8008efa:	3001      	adds	r0, #1
 8008efc:	2a30      	cmp	r2, #48	@ 0x30
 8008efe:	d0f8      	beq.n	8008ef2 <_strtod_l+0x1e2>
 8008f00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	f200 84d3 	bhi.w	80098b0 <_strtod_l+0xba0>
 8008f0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f0e:	4681      	mov	r9, r0
 8008f10:	2000      	movs	r0, #0
 8008f12:	4605      	mov	r5, r0
 8008f14:	3a30      	subs	r2, #48	@ 0x30
 8008f16:	f100 0301 	add.w	r3, r0, #1
 8008f1a:	d02a      	beq.n	8008f72 <_strtod_l+0x262>
 8008f1c:	4499      	add	r9, r3
 8008f1e:	eb00 0c05 	add.w	ip, r0, r5
 8008f22:	462b      	mov	r3, r5
 8008f24:	210a      	movs	r1, #10
 8008f26:	4563      	cmp	r3, ip
 8008f28:	d10d      	bne.n	8008f46 <_strtod_l+0x236>
 8008f2a:	1c69      	adds	r1, r5, #1
 8008f2c:	4401      	add	r1, r0
 8008f2e:	4428      	add	r0, r5
 8008f30:	2808      	cmp	r0, #8
 8008f32:	dc16      	bgt.n	8008f62 <_strtod_l+0x252>
 8008f34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f36:	230a      	movs	r3, #10
 8008f38:	fb03 2300 	mla	r3, r3, r0, r2
 8008f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e018      	b.n	8008f74 <_strtod_l+0x264>
 8008f42:	4638      	mov	r0, r7
 8008f44:	e7da      	b.n	8008efc <_strtod_l+0x1ec>
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	f103 0301 	add.w	r3, r3, #1
 8008f4c:	dc03      	bgt.n	8008f56 <_strtod_l+0x246>
 8008f4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f50:	434e      	muls	r6, r1
 8008f52:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f54:	e7e7      	b.n	8008f26 <_strtod_l+0x216>
 8008f56:	2b10      	cmp	r3, #16
 8008f58:	bfde      	ittt	le
 8008f5a:	9e08      	ldrle	r6, [sp, #32]
 8008f5c:	434e      	mulle	r6, r1
 8008f5e:	9608      	strle	r6, [sp, #32]
 8008f60:	e7e1      	b.n	8008f26 <_strtod_l+0x216>
 8008f62:	280f      	cmp	r0, #15
 8008f64:	dceb      	bgt.n	8008f3e <_strtod_l+0x22e>
 8008f66:	9808      	ldr	r0, [sp, #32]
 8008f68:	230a      	movs	r3, #10
 8008f6a:	fb03 2300 	mla	r3, r3, r0, r2
 8008f6e:	9308      	str	r3, [sp, #32]
 8008f70:	e7e5      	b.n	8008f3e <_strtod_l+0x22e>
 8008f72:	4629      	mov	r1, r5
 8008f74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f76:	1c50      	adds	r0, r2, #1
 8008f78:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f7a:	7852      	ldrb	r2, [r2, #1]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	460d      	mov	r5, r1
 8008f80:	e7b1      	b.n	8008ee6 <_strtod_l+0x1d6>
 8008f82:	f04f 0900 	mov.w	r9, #0
 8008f86:	2301      	movs	r3, #1
 8008f88:	e77d      	b.n	8008e86 <_strtod_l+0x176>
 8008f8a:	f04f 0c00 	mov.w	ip, #0
 8008f8e:	1ca2      	adds	r2, r4, #2
 8008f90:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f92:	78a2      	ldrb	r2, [r4, #2]
 8008f94:	e785      	b.n	8008ea2 <_strtod_l+0x192>
 8008f96:	f04f 0c01 	mov.w	ip, #1
 8008f9a:	e7f8      	b.n	8008f8e <_strtod_l+0x27e>
 8008f9c:	0800eb08 	.word	0x0800eb08
 8008fa0:	0800eaf0 	.word	0x0800eaf0
 8008fa4:	7ff00000 	.word	0x7ff00000
 8008fa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008faa:	1c51      	adds	r1, r2, #1
 8008fac:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fae:	7852      	ldrb	r2, [r2, #1]
 8008fb0:	2a30      	cmp	r2, #48	@ 0x30
 8008fb2:	d0f9      	beq.n	8008fa8 <_strtod_l+0x298>
 8008fb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008fb8:	2908      	cmp	r1, #8
 8008fba:	f63f af78 	bhi.w	8008eae <_strtod_l+0x19e>
 8008fbe:	3a30      	subs	r2, #48	@ 0x30
 8008fc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008fc6:	f04f 080a 	mov.w	r8, #10
 8008fca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fcc:	1c56      	adds	r6, r2, #1
 8008fce:	9619      	str	r6, [sp, #100]	@ 0x64
 8008fd0:	7852      	ldrb	r2, [r2, #1]
 8008fd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008fd6:	f1be 0f09 	cmp.w	lr, #9
 8008fda:	d939      	bls.n	8009050 <_strtod_l+0x340>
 8008fdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008fde:	1a76      	subs	r6, r6, r1
 8008fe0:	2e08      	cmp	r6, #8
 8008fe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008fe6:	dc03      	bgt.n	8008ff0 <_strtod_l+0x2e0>
 8008fe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008fea:	4588      	cmp	r8, r1
 8008fec:	bfa8      	it	ge
 8008fee:	4688      	movge	r8, r1
 8008ff0:	f1bc 0f00 	cmp.w	ip, #0
 8008ff4:	d001      	beq.n	8008ffa <_strtod_l+0x2ea>
 8008ff6:	f1c8 0800 	rsb	r8, r8, #0
 8008ffa:	2d00      	cmp	r5, #0
 8008ffc:	d14e      	bne.n	800909c <_strtod_l+0x38c>
 8008ffe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009000:	4308      	orrs	r0, r1
 8009002:	f47f aebe 	bne.w	8008d82 <_strtod_l+0x72>
 8009006:	2b00      	cmp	r3, #0
 8009008:	f47f aed6 	bne.w	8008db8 <_strtod_l+0xa8>
 800900c:	2a69      	cmp	r2, #105	@ 0x69
 800900e:	d028      	beq.n	8009062 <_strtod_l+0x352>
 8009010:	dc25      	bgt.n	800905e <_strtod_l+0x34e>
 8009012:	2a49      	cmp	r2, #73	@ 0x49
 8009014:	d025      	beq.n	8009062 <_strtod_l+0x352>
 8009016:	2a4e      	cmp	r2, #78	@ 0x4e
 8009018:	f47f aece 	bne.w	8008db8 <_strtod_l+0xa8>
 800901c:	499b      	ldr	r1, [pc, #620]	@ (800928c <_strtod_l+0x57c>)
 800901e:	a819      	add	r0, sp, #100	@ 0x64
 8009020:	f002 ff96 	bl	800bf50 <__match>
 8009024:	2800      	cmp	r0, #0
 8009026:	f43f aec7 	beq.w	8008db8 <_strtod_l+0xa8>
 800902a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	2b28      	cmp	r3, #40	@ 0x28
 8009030:	d12e      	bne.n	8009090 <_strtod_l+0x380>
 8009032:	4997      	ldr	r1, [pc, #604]	@ (8009290 <_strtod_l+0x580>)
 8009034:	aa1c      	add	r2, sp, #112	@ 0x70
 8009036:	a819      	add	r0, sp, #100	@ 0x64
 8009038:	f002 ff9e 	bl	800bf78 <__hexnan>
 800903c:	2805      	cmp	r0, #5
 800903e:	d127      	bne.n	8009090 <_strtod_l+0x380>
 8009040:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009042:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009046:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800904a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800904e:	e698      	b.n	8008d82 <_strtod_l+0x72>
 8009050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009052:	fb08 2101 	mla	r1, r8, r1, r2
 8009056:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800905a:	920e      	str	r2, [sp, #56]	@ 0x38
 800905c:	e7b5      	b.n	8008fca <_strtod_l+0x2ba>
 800905e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009060:	e7da      	b.n	8009018 <_strtod_l+0x308>
 8009062:	498c      	ldr	r1, [pc, #560]	@ (8009294 <_strtod_l+0x584>)
 8009064:	a819      	add	r0, sp, #100	@ 0x64
 8009066:	f002 ff73 	bl	800bf50 <__match>
 800906a:	2800      	cmp	r0, #0
 800906c:	f43f aea4 	beq.w	8008db8 <_strtod_l+0xa8>
 8009070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009072:	4989      	ldr	r1, [pc, #548]	@ (8009298 <_strtod_l+0x588>)
 8009074:	3b01      	subs	r3, #1
 8009076:	a819      	add	r0, sp, #100	@ 0x64
 8009078:	9319      	str	r3, [sp, #100]	@ 0x64
 800907a:	f002 ff69 	bl	800bf50 <__match>
 800907e:	b910      	cbnz	r0, 8009086 <_strtod_l+0x376>
 8009080:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009082:	3301      	adds	r3, #1
 8009084:	9319      	str	r3, [sp, #100]	@ 0x64
 8009086:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80092a8 <_strtod_l+0x598>
 800908a:	f04f 0a00 	mov.w	sl, #0
 800908e:	e678      	b.n	8008d82 <_strtod_l+0x72>
 8009090:	4882      	ldr	r0, [pc, #520]	@ (800929c <_strtod_l+0x58c>)
 8009092:	f001 fe11 	bl	800acb8 <nan>
 8009096:	ec5b ab10 	vmov	sl, fp, d0
 800909a:	e672      	b.n	8008d82 <_strtod_l+0x72>
 800909c:	eba8 0309 	sub.w	r3, r8, r9
 80090a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a4:	2f00      	cmp	r7, #0
 80090a6:	bf08      	it	eq
 80090a8:	462f      	moveq	r7, r5
 80090aa:	2d10      	cmp	r5, #16
 80090ac:	462c      	mov	r4, r5
 80090ae:	bfa8      	it	ge
 80090b0:	2410      	movge	r4, #16
 80090b2:	f7f7 fa27 	bl	8000504 <__aeabi_ui2d>
 80090b6:	2d09      	cmp	r5, #9
 80090b8:	4682      	mov	sl, r0
 80090ba:	468b      	mov	fp, r1
 80090bc:	dc13      	bgt.n	80090e6 <_strtod_l+0x3d6>
 80090be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f43f ae5e 	beq.w	8008d82 <_strtod_l+0x72>
 80090c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c8:	dd78      	ble.n	80091bc <_strtod_l+0x4ac>
 80090ca:	2b16      	cmp	r3, #22
 80090cc:	dc5f      	bgt.n	800918e <_strtod_l+0x47e>
 80090ce:	4974      	ldr	r1, [pc, #464]	@ (80092a0 <_strtod_l+0x590>)
 80090d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d8:	4652      	mov	r2, sl
 80090da:	465b      	mov	r3, fp
 80090dc:	f7f7 fa8c 	bl	80005f8 <__aeabi_dmul>
 80090e0:	4682      	mov	sl, r0
 80090e2:	468b      	mov	fp, r1
 80090e4:	e64d      	b.n	8008d82 <_strtod_l+0x72>
 80090e6:	4b6e      	ldr	r3, [pc, #440]	@ (80092a0 <_strtod_l+0x590>)
 80090e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	4682      	mov	sl, r0
 80090f6:	9808      	ldr	r0, [sp, #32]
 80090f8:	468b      	mov	fp, r1
 80090fa:	f7f7 fa03 	bl	8000504 <__aeabi_ui2d>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4650      	mov	r0, sl
 8009104:	4659      	mov	r1, fp
 8009106:	f7f7 f8c1 	bl	800028c <__adddf3>
 800910a:	2d0f      	cmp	r5, #15
 800910c:	4682      	mov	sl, r0
 800910e:	468b      	mov	fp, r1
 8009110:	ddd5      	ble.n	80090be <_strtod_l+0x3ae>
 8009112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009114:	1b2c      	subs	r4, r5, r4
 8009116:	441c      	add	r4, r3
 8009118:	2c00      	cmp	r4, #0
 800911a:	f340 8096 	ble.w	800924a <_strtod_l+0x53a>
 800911e:	f014 030f 	ands.w	r3, r4, #15
 8009122:	d00a      	beq.n	800913a <_strtod_l+0x42a>
 8009124:	495e      	ldr	r1, [pc, #376]	@ (80092a0 <_strtod_l+0x590>)
 8009126:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800912a:	4652      	mov	r2, sl
 800912c:	465b      	mov	r3, fp
 800912e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009132:	f7f7 fa61 	bl	80005f8 <__aeabi_dmul>
 8009136:	4682      	mov	sl, r0
 8009138:	468b      	mov	fp, r1
 800913a:	f034 040f 	bics.w	r4, r4, #15
 800913e:	d073      	beq.n	8009228 <_strtod_l+0x518>
 8009140:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009144:	dd48      	ble.n	80091d8 <_strtod_l+0x4c8>
 8009146:	2400      	movs	r4, #0
 8009148:	46a0      	mov	r8, r4
 800914a:	940a      	str	r4, [sp, #40]	@ 0x28
 800914c:	46a1      	mov	r9, r4
 800914e:	9a05      	ldr	r2, [sp, #20]
 8009150:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80092a8 <_strtod_l+0x598>
 8009154:	2322      	movs	r3, #34	@ 0x22
 8009156:	6013      	str	r3, [r2, #0]
 8009158:	f04f 0a00 	mov.w	sl, #0
 800915c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	f43f ae0f 	beq.w	8008d82 <_strtod_l+0x72>
 8009164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009166:	9805      	ldr	r0, [sp, #20]
 8009168:	f003 f8aa 	bl	800c2c0 <_Bfree>
 800916c:	9805      	ldr	r0, [sp, #20]
 800916e:	4649      	mov	r1, r9
 8009170:	f003 f8a6 	bl	800c2c0 <_Bfree>
 8009174:	9805      	ldr	r0, [sp, #20]
 8009176:	4641      	mov	r1, r8
 8009178:	f003 f8a2 	bl	800c2c0 <_Bfree>
 800917c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800917e:	9805      	ldr	r0, [sp, #20]
 8009180:	f003 f89e 	bl	800c2c0 <_Bfree>
 8009184:	9805      	ldr	r0, [sp, #20]
 8009186:	4621      	mov	r1, r4
 8009188:	f003 f89a 	bl	800c2c0 <_Bfree>
 800918c:	e5f9      	b.n	8008d82 <_strtod_l+0x72>
 800918e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009190:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009194:	4293      	cmp	r3, r2
 8009196:	dbbc      	blt.n	8009112 <_strtod_l+0x402>
 8009198:	4c41      	ldr	r4, [pc, #260]	@ (80092a0 <_strtod_l+0x590>)
 800919a:	f1c5 050f 	rsb	r5, r5, #15
 800919e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091a2:	4652      	mov	r2, sl
 80091a4:	465b      	mov	r3, fp
 80091a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091aa:	f7f7 fa25 	bl	80005f8 <__aeabi_dmul>
 80091ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b0:	1b5d      	subs	r5, r3, r5
 80091b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091ba:	e78f      	b.n	80090dc <_strtod_l+0x3cc>
 80091bc:	3316      	adds	r3, #22
 80091be:	dba8      	blt.n	8009112 <_strtod_l+0x402>
 80091c0:	4b37      	ldr	r3, [pc, #220]	@ (80092a0 <_strtod_l+0x590>)
 80091c2:	eba9 0808 	sub.w	r8, r9, r8
 80091c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80091ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091ce:	4650      	mov	r0, sl
 80091d0:	4659      	mov	r1, fp
 80091d2:	f7f7 fb3b 	bl	800084c <__aeabi_ddiv>
 80091d6:	e783      	b.n	80090e0 <_strtod_l+0x3d0>
 80091d8:	4b32      	ldr	r3, [pc, #200]	@ (80092a4 <_strtod_l+0x594>)
 80091da:	9308      	str	r3, [sp, #32]
 80091dc:	2300      	movs	r3, #0
 80091de:	1124      	asrs	r4, r4, #4
 80091e0:	4650      	mov	r0, sl
 80091e2:	4659      	mov	r1, fp
 80091e4:	461e      	mov	r6, r3
 80091e6:	2c01      	cmp	r4, #1
 80091e8:	dc21      	bgt.n	800922e <_strtod_l+0x51e>
 80091ea:	b10b      	cbz	r3, 80091f0 <_strtod_l+0x4e0>
 80091ec:	4682      	mov	sl, r0
 80091ee:	468b      	mov	fp, r1
 80091f0:	492c      	ldr	r1, [pc, #176]	@ (80092a4 <_strtod_l+0x594>)
 80091f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80091f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80091fa:	4652      	mov	r2, sl
 80091fc:	465b      	mov	r3, fp
 80091fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4b28      	ldr	r3, [pc, #160]	@ (80092a8 <_strtod_l+0x598>)
 8009208:	460a      	mov	r2, r1
 800920a:	400b      	ands	r3, r1
 800920c:	4927      	ldr	r1, [pc, #156]	@ (80092ac <_strtod_l+0x59c>)
 800920e:	428b      	cmp	r3, r1
 8009210:	4682      	mov	sl, r0
 8009212:	d898      	bhi.n	8009146 <_strtod_l+0x436>
 8009214:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009218:	428b      	cmp	r3, r1
 800921a:	bf86      	itte	hi
 800921c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80092b0 <_strtod_l+0x5a0>
 8009220:	f04f 3aff 	movhi.w	sl, #4294967295
 8009224:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009228:	2300      	movs	r3, #0
 800922a:	9308      	str	r3, [sp, #32]
 800922c:	e07a      	b.n	8009324 <_strtod_l+0x614>
 800922e:	07e2      	lsls	r2, r4, #31
 8009230:	d505      	bpl.n	800923e <_strtod_l+0x52e>
 8009232:	9b08      	ldr	r3, [sp, #32]
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f7f7 f9de 	bl	80005f8 <__aeabi_dmul>
 800923c:	2301      	movs	r3, #1
 800923e:	9a08      	ldr	r2, [sp, #32]
 8009240:	3208      	adds	r2, #8
 8009242:	3601      	adds	r6, #1
 8009244:	1064      	asrs	r4, r4, #1
 8009246:	9208      	str	r2, [sp, #32]
 8009248:	e7cd      	b.n	80091e6 <_strtod_l+0x4d6>
 800924a:	d0ed      	beq.n	8009228 <_strtod_l+0x518>
 800924c:	4264      	negs	r4, r4
 800924e:	f014 020f 	ands.w	r2, r4, #15
 8009252:	d00a      	beq.n	800926a <_strtod_l+0x55a>
 8009254:	4b12      	ldr	r3, [pc, #72]	@ (80092a0 <_strtod_l+0x590>)
 8009256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800925a:	4650      	mov	r0, sl
 800925c:	4659      	mov	r1, fp
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 faf3 	bl	800084c <__aeabi_ddiv>
 8009266:	4682      	mov	sl, r0
 8009268:	468b      	mov	fp, r1
 800926a:	1124      	asrs	r4, r4, #4
 800926c:	d0dc      	beq.n	8009228 <_strtod_l+0x518>
 800926e:	2c1f      	cmp	r4, #31
 8009270:	dd20      	ble.n	80092b4 <_strtod_l+0x5a4>
 8009272:	2400      	movs	r4, #0
 8009274:	46a0      	mov	r8, r4
 8009276:	940a      	str	r4, [sp, #40]	@ 0x28
 8009278:	46a1      	mov	r9, r4
 800927a:	9a05      	ldr	r2, [sp, #20]
 800927c:	2322      	movs	r3, #34	@ 0x22
 800927e:	f04f 0a00 	mov.w	sl, #0
 8009282:	f04f 0b00 	mov.w	fp, #0
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	e768      	b.n	800915c <_strtod_l+0x44c>
 800928a:	bf00      	nop
 800928c:	0800eb55 	.word	0x0800eb55
 8009290:	0800eaf4 	.word	0x0800eaf4
 8009294:	0800eb4d 	.word	0x0800eb4d
 8009298:	0800ec39 	.word	0x0800ec39
 800929c:	0800ec35 	.word	0x0800ec35
 80092a0:	0800eda0 	.word	0x0800eda0
 80092a4:	0800ed78 	.word	0x0800ed78
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	7ca00000 	.word	0x7ca00000
 80092b0:	7fefffff 	.word	0x7fefffff
 80092b4:	f014 0310 	ands.w	r3, r4, #16
 80092b8:	bf18      	it	ne
 80092ba:	236a      	movne	r3, #106	@ 0x6a
 80092bc:	4ea9      	ldr	r6, [pc, #676]	@ (8009564 <_strtod_l+0x854>)
 80092be:	9308      	str	r3, [sp, #32]
 80092c0:	4650      	mov	r0, sl
 80092c2:	4659      	mov	r1, fp
 80092c4:	2300      	movs	r3, #0
 80092c6:	07e2      	lsls	r2, r4, #31
 80092c8:	d504      	bpl.n	80092d4 <_strtod_l+0x5c4>
 80092ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092ce:	f7f7 f993 	bl	80005f8 <__aeabi_dmul>
 80092d2:	2301      	movs	r3, #1
 80092d4:	1064      	asrs	r4, r4, #1
 80092d6:	f106 0608 	add.w	r6, r6, #8
 80092da:	d1f4      	bne.n	80092c6 <_strtod_l+0x5b6>
 80092dc:	b10b      	cbz	r3, 80092e2 <_strtod_l+0x5d2>
 80092de:	4682      	mov	sl, r0
 80092e0:	468b      	mov	fp, r1
 80092e2:	9b08      	ldr	r3, [sp, #32]
 80092e4:	b1b3      	cbz	r3, 8009314 <_strtod_l+0x604>
 80092e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80092ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	4659      	mov	r1, fp
 80092f2:	dd0f      	ble.n	8009314 <_strtod_l+0x604>
 80092f4:	2b1f      	cmp	r3, #31
 80092f6:	dd55      	ble.n	80093a4 <_strtod_l+0x694>
 80092f8:	2b34      	cmp	r3, #52	@ 0x34
 80092fa:	bfde      	ittt	le
 80092fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009300:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009304:	4093      	lslle	r3, r2
 8009306:	f04f 0a00 	mov.w	sl, #0
 800930a:	bfcc      	ite	gt
 800930c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009310:	ea03 0b01 	andle.w	fp, r3, r1
 8009314:	2200      	movs	r2, #0
 8009316:	2300      	movs	r3, #0
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	f7f7 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009320:	2800      	cmp	r0, #0
 8009322:	d1a6      	bne.n	8009272 <_strtod_l+0x562>
 8009324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800932a:	9805      	ldr	r0, [sp, #20]
 800932c:	462b      	mov	r3, r5
 800932e:	463a      	mov	r2, r7
 8009330:	f003 f82e 	bl	800c390 <__s2b>
 8009334:	900a      	str	r0, [sp, #40]	@ 0x28
 8009336:	2800      	cmp	r0, #0
 8009338:	f43f af05 	beq.w	8009146 <_strtod_l+0x436>
 800933c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800933e:	2a00      	cmp	r2, #0
 8009340:	eba9 0308 	sub.w	r3, r9, r8
 8009344:	bfa8      	it	ge
 8009346:	2300      	movge	r3, #0
 8009348:	9312      	str	r3, [sp, #72]	@ 0x48
 800934a:	2400      	movs	r4, #0
 800934c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009350:	9316      	str	r3, [sp, #88]	@ 0x58
 8009352:	46a0      	mov	r8, r4
 8009354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009356:	9805      	ldr	r0, [sp, #20]
 8009358:	6859      	ldr	r1, [r3, #4]
 800935a:	f002 ff71 	bl	800c240 <_Balloc>
 800935e:	4681      	mov	r9, r0
 8009360:	2800      	cmp	r0, #0
 8009362:	f43f aef4 	beq.w	800914e <_strtod_l+0x43e>
 8009366:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009368:	691a      	ldr	r2, [r3, #16]
 800936a:	3202      	adds	r2, #2
 800936c:	f103 010c 	add.w	r1, r3, #12
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	300c      	adds	r0, #12
 8009374:	f001 fc8f 	bl	800ac96 <memcpy>
 8009378:	ec4b ab10 	vmov	d0, sl, fp
 800937c:	9805      	ldr	r0, [sp, #20]
 800937e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009380:	a91b      	add	r1, sp, #108	@ 0x6c
 8009382:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009386:	f003 fb3f 	bl	800ca08 <__d2b>
 800938a:	901a      	str	r0, [sp, #104]	@ 0x68
 800938c:	2800      	cmp	r0, #0
 800938e:	f43f aede 	beq.w	800914e <_strtod_l+0x43e>
 8009392:	9805      	ldr	r0, [sp, #20]
 8009394:	2101      	movs	r1, #1
 8009396:	f003 f891 	bl	800c4bc <__i2b>
 800939a:	4680      	mov	r8, r0
 800939c:	b948      	cbnz	r0, 80093b2 <_strtod_l+0x6a2>
 800939e:	f04f 0800 	mov.w	r8, #0
 80093a2:	e6d4      	b.n	800914e <_strtod_l+0x43e>
 80093a4:	f04f 32ff 	mov.w	r2, #4294967295
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	ea03 0a0a 	and.w	sl, r3, sl
 80093b0:	e7b0      	b.n	8009314 <_strtod_l+0x604>
 80093b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	bfab      	itete	ge
 80093ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093c2:	bfac      	ite	ge
 80093c4:	18ef      	addge	r7, r5, r3
 80093c6:	1b5e      	sublt	r6, r3, r5
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	1aed      	subs	r5, r5, r3
 80093cc:	4415      	add	r5, r2
 80093ce:	4b66      	ldr	r3, [pc, #408]	@ (8009568 <_strtod_l+0x858>)
 80093d0:	3d01      	subs	r5, #1
 80093d2:	429d      	cmp	r5, r3
 80093d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80093d8:	da50      	bge.n	800947c <_strtod_l+0x76c>
 80093da:	1b5b      	subs	r3, r3, r5
 80093dc:	2b1f      	cmp	r3, #31
 80093de:	eba2 0203 	sub.w	r2, r2, r3
 80093e2:	f04f 0101 	mov.w	r1, #1
 80093e6:	dc3d      	bgt.n	8009464 <_strtod_l+0x754>
 80093e8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093ee:	2300      	movs	r3, #0
 80093f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80093f2:	18bd      	adds	r5, r7, r2
 80093f4:	9b08      	ldr	r3, [sp, #32]
 80093f6:	42af      	cmp	r7, r5
 80093f8:	4416      	add	r6, r2
 80093fa:	441e      	add	r6, r3
 80093fc:	463b      	mov	r3, r7
 80093fe:	bfa8      	it	ge
 8009400:	462b      	movge	r3, r5
 8009402:	42b3      	cmp	r3, r6
 8009404:	bfa8      	it	ge
 8009406:	4633      	movge	r3, r6
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfc2      	ittt	gt
 800940c:	1aed      	subgt	r5, r5, r3
 800940e:	1af6      	subgt	r6, r6, r3
 8009410:	1aff      	subgt	r7, r7, r3
 8009412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009414:	2b00      	cmp	r3, #0
 8009416:	dd16      	ble.n	8009446 <_strtod_l+0x736>
 8009418:	4641      	mov	r1, r8
 800941a:	9805      	ldr	r0, [sp, #20]
 800941c:	461a      	mov	r2, r3
 800941e:	f003 f90d 	bl	800c63c <__pow5mult>
 8009422:	4680      	mov	r8, r0
 8009424:	2800      	cmp	r0, #0
 8009426:	d0ba      	beq.n	800939e <_strtod_l+0x68e>
 8009428:	4601      	mov	r1, r0
 800942a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800942c:	9805      	ldr	r0, [sp, #20]
 800942e:	f003 f85b 	bl	800c4e8 <__multiply>
 8009432:	900e      	str	r0, [sp, #56]	@ 0x38
 8009434:	2800      	cmp	r0, #0
 8009436:	f43f ae8a 	beq.w	800914e <_strtod_l+0x43e>
 800943a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800943c:	9805      	ldr	r0, [sp, #20]
 800943e:	f002 ff3f 	bl	800c2c0 <_Bfree>
 8009442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009444:	931a      	str	r3, [sp, #104]	@ 0x68
 8009446:	2d00      	cmp	r5, #0
 8009448:	dc1d      	bgt.n	8009486 <_strtod_l+0x776>
 800944a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd23      	ble.n	8009498 <_strtod_l+0x788>
 8009450:	4649      	mov	r1, r9
 8009452:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009454:	9805      	ldr	r0, [sp, #20]
 8009456:	f003 f8f1 	bl	800c63c <__pow5mult>
 800945a:	4681      	mov	r9, r0
 800945c:	b9e0      	cbnz	r0, 8009498 <_strtod_l+0x788>
 800945e:	f04f 0900 	mov.w	r9, #0
 8009462:	e674      	b.n	800914e <_strtod_l+0x43e>
 8009464:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009468:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800946c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009470:	35e2      	adds	r5, #226	@ 0xe2
 8009472:	fa01 f305 	lsl.w	r3, r1, r5
 8009476:	9310      	str	r3, [sp, #64]	@ 0x40
 8009478:	9113      	str	r1, [sp, #76]	@ 0x4c
 800947a:	e7ba      	b.n	80093f2 <_strtod_l+0x6e2>
 800947c:	2300      	movs	r3, #0
 800947e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009480:	2301      	movs	r3, #1
 8009482:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009484:	e7b5      	b.n	80093f2 <_strtod_l+0x6e2>
 8009486:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009488:	9805      	ldr	r0, [sp, #20]
 800948a:	462a      	mov	r2, r5
 800948c:	f003 f930 	bl	800c6f0 <__lshift>
 8009490:	901a      	str	r0, [sp, #104]	@ 0x68
 8009492:	2800      	cmp	r0, #0
 8009494:	d1d9      	bne.n	800944a <_strtod_l+0x73a>
 8009496:	e65a      	b.n	800914e <_strtod_l+0x43e>
 8009498:	2e00      	cmp	r6, #0
 800949a:	dd07      	ble.n	80094ac <_strtod_l+0x79c>
 800949c:	4649      	mov	r1, r9
 800949e:	9805      	ldr	r0, [sp, #20]
 80094a0:	4632      	mov	r2, r6
 80094a2:	f003 f925 	bl	800c6f0 <__lshift>
 80094a6:	4681      	mov	r9, r0
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d0d8      	beq.n	800945e <_strtod_l+0x74e>
 80094ac:	2f00      	cmp	r7, #0
 80094ae:	dd08      	ble.n	80094c2 <_strtod_l+0x7b2>
 80094b0:	4641      	mov	r1, r8
 80094b2:	9805      	ldr	r0, [sp, #20]
 80094b4:	463a      	mov	r2, r7
 80094b6:	f003 f91b 	bl	800c6f0 <__lshift>
 80094ba:	4680      	mov	r8, r0
 80094bc:	2800      	cmp	r0, #0
 80094be:	f43f ae46 	beq.w	800914e <_strtod_l+0x43e>
 80094c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	464a      	mov	r2, r9
 80094c8:	f003 f99a 	bl	800c800 <__mdiff>
 80094cc:	4604      	mov	r4, r0
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f43f ae3d 	beq.w	800914e <_strtod_l+0x43e>
 80094d4:	68c3      	ldr	r3, [r0, #12]
 80094d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094d8:	2300      	movs	r3, #0
 80094da:	60c3      	str	r3, [r0, #12]
 80094dc:	4641      	mov	r1, r8
 80094de:	f003 f973 	bl	800c7c8 <__mcmp>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	da46      	bge.n	8009574 <_strtod_l+0x864>
 80094e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e8:	ea53 030a 	orrs.w	r3, r3, sl
 80094ec:	d16c      	bne.n	80095c8 <_strtod_l+0x8b8>
 80094ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d168      	bne.n	80095c8 <_strtod_l+0x8b8>
 80094f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094fa:	0d1b      	lsrs	r3, r3, #20
 80094fc:	051b      	lsls	r3, r3, #20
 80094fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009502:	d961      	bls.n	80095c8 <_strtod_l+0x8b8>
 8009504:	6963      	ldr	r3, [r4, #20]
 8009506:	b913      	cbnz	r3, 800950e <_strtod_l+0x7fe>
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	2b01      	cmp	r3, #1
 800950c:	dd5c      	ble.n	80095c8 <_strtod_l+0x8b8>
 800950e:	4621      	mov	r1, r4
 8009510:	2201      	movs	r2, #1
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	f003 f8ec 	bl	800c6f0 <__lshift>
 8009518:	4641      	mov	r1, r8
 800951a:	4604      	mov	r4, r0
 800951c:	f003 f954 	bl	800c7c8 <__mcmp>
 8009520:	2800      	cmp	r0, #0
 8009522:	dd51      	ble.n	80095c8 <_strtod_l+0x8b8>
 8009524:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009528:	9a08      	ldr	r2, [sp, #32]
 800952a:	0d1b      	lsrs	r3, r3, #20
 800952c:	051b      	lsls	r3, r3, #20
 800952e:	2a00      	cmp	r2, #0
 8009530:	d06b      	beq.n	800960a <_strtod_l+0x8fa>
 8009532:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009536:	d868      	bhi.n	800960a <_strtod_l+0x8fa>
 8009538:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800953c:	f67f ae9d 	bls.w	800927a <_strtod_l+0x56a>
 8009540:	4b0a      	ldr	r3, [pc, #40]	@ (800956c <_strtod_l+0x85c>)
 8009542:	4650      	mov	r0, sl
 8009544:	4659      	mov	r1, fp
 8009546:	2200      	movs	r2, #0
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	4b08      	ldr	r3, [pc, #32]	@ (8009570 <_strtod_l+0x860>)
 800954e:	400b      	ands	r3, r1
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	2b00      	cmp	r3, #0
 8009556:	f47f ae05 	bne.w	8009164 <_strtod_l+0x454>
 800955a:	9a05      	ldr	r2, [sp, #20]
 800955c:	2322      	movs	r3, #34	@ 0x22
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	e600      	b.n	8009164 <_strtod_l+0x454>
 8009562:	bf00      	nop
 8009564:	0800eb20 	.word	0x0800eb20
 8009568:	fffffc02 	.word	0xfffffc02
 800956c:	39500000 	.word	0x39500000
 8009570:	7ff00000 	.word	0x7ff00000
 8009574:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009578:	d165      	bne.n	8009646 <_strtod_l+0x936>
 800957a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800957c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009580:	b35a      	cbz	r2, 80095da <_strtod_l+0x8ca>
 8009582:	4a9f      	ldr	r2, [pc, #636]	@ (8009800 <_strtod_l+0xaf0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d12b      	bne.n	80095e0 <_strtod_l+0x8d0>
 8009588:	9b08      	ldr	r3, [sp, #32]
 800958a:	4651      	mov	r1, sl
 800958c:	b303      	cbz	r3, 80095d0 <_strtod_l+0x8c0>
 800958e:	4b9d      	ldr	r3, [pc, #628]	@ (8009804 <_strtod_l+0xaf4>)
 8009590:	465a      	mov	r2, fp
 8009592:	4013      	ands	r3, r2
 8009594:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009598:	f04f 32ff 	mov.w	r2, #4294967295
 800959c:	d81b      	bhi.n	80095d6 <_strtod_l+0x8c6>
 800959e:	0d1b      	lsrs	r3, r3, #20
 80095a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095a4:	fa02 f303 	lsl.w	r3, r2, r3
 80095a8:	4299      	cmp	r1, r3
 80095aa:	d119      	bne.n	80095e0 <_strtod_l+0x8d0>
 80095ac:	4b96      	ldr	r3, [pc, #600]	@ (8009808 <_strtod_l+0xaf8>)
 80095ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d102      	bne.n	80095ba <_strtod_l+0x8aa>
 80095b4:	3101      	adds	r1, #1
 80095b6:	f43f adca 	beq.w	800914e <_strtod_l+0x43e>
 80095ba:	4b92      	ldr	r3, [pc, #584]	@ (8009804 <_strtod_l+0xaf4>)
 80095bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095be:	401a      	ands	r2, r3
 80095c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095c4:	f04f 0a00 	mov.w	sl, #0
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1b8      	bne.n	8009540 <_strtod_l+0x830>
 80095ce:	e5c9      	b.n	8009164 <_strtod_l+0x454>
 80095d0:	f04f 33ff 	mov.w	r3, #4294967295
 80095d4:	e7e8      	b.n	80095a8 <_strtod_l+0x898>
 80095d6:	4613      	mov	r3, r2
 80095d8:	e7e6      	b.n	80095a8 <_strtod_l+0x898>
 80095da:	ea53 030a 	orrs.w	r3, r3, sl
 80095de:	d0a1      	beq.n	8009524 <_strtod_l+0x814>
 80095e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095e2:	b1db      	cbz	r3, 800961c <_strtod_l+0x90c>
 80095e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095e6:	4213      	tst	r3, r2
 80095e8:	d0ee      	beq.n	80095c8 <_strtod_l+0x8b8>
 80095ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ec:	9a08      	ldr	r2, [sp, #32]
 80095ee:	4650      	mov	r0, sl
 80095f0:	4659      	mov	r1, fp
 80095f2:	b1bb      	cbz	r3, 8009624 <_strtod_l+0x914>
 80095f4:	f7ff fb6b 	bl	8008cce <sulp>
 80095f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095fc:	ec53 2b10 	vmov	r2, r3, d0
 8009600:	f7f6 fe44 	bl	800028c <__adddf3>
 8009604:	4682      	mov	sl, r0
 8009606:	468b      	mov	fp, r1
 8009608:	e7de      	b.n	80095c8 <_strtod_l+0x8b8>
 800960a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800960e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009612:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009616:	f04f 3aff 	mov.w	sl, #4294967295
 800961a:	e7d5      	b.n	80095c8 <_strtod_l+0x8b8>
 800961c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800961e:	ea13 0f0a 	tst.w	r3, sl
 8009622:	e7e1      	b.n	80095e8 <_strtod_l+0x8d8>
 8009624:	f7ff fb53 	bl	8008cce <sulp>
 8009628:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800962c:	ec53 2b10 	vmov	r2, r3, d0
 8009630:	f7f6 fe2a 	bl	8000288 <__aeabi_dsub>
 8009634:	2200      	movs	r2, #0
 8009636:	2300      	movs	r3, #0
 8009638:	4682      	mov	sl, r0
 800963a:	468b      	mov	fp, r1
 800963c:	f7f7 fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8009640:	2800      	cmp	r0, #0
 8009642:	d0c1      	beq.n	80095c8 <_strtod_l+0x8b8>
 8009644:	e619      	b.n	800927a <_strtod_l+0x56a>
 8009646:	4641      	mov	r1, r8
 8009648:	4620      	mov	r0, r4
 800964a:	f003 fa35 	bl	800cab8 <__ratio>
 800964e:	ec57 6b10 	vmov	r6, r7, d0
 8009652:	2200      	movs	r2, #0
 8009654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f7 fa48 	bl	8000af0 <__aeabi_dcmple>
 8009660:	2800      	cmp	r0, #0
 8009662:	d06f      	beq.n	8009744 <_strtod_l+0xa34>
 8009664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d17a      	bne.n	8009760 <_strtod_l+0xa50>
 800966a:	f1ba 0f00 	cmp.w	sl, #0
 800966e:	d158      	bne.n	8009722 <_strtod_l+0xa12>
 8009670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009676:	2b00      	cmp	r3, #0
 8009678:	d15a      	bne.n	8009730 <_strtod_l+0xa20>
 800967a:	4b64      	ldr	r3, [pc, #400]	@ (800980c <_strtod_l+0xafc>)
 800967c:	2200      	movs	r2, #0
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f7 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8009686:	2800      	cmp	r0, #0
 8009688:	d159      	bne.n	800973e <_strtod_l+0xa2e>
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	4b60      	ldr	r3, [pc, #384]	@ (8009810 <_strtod_l+0xb00>)
 8009690:	2200      	movs	r2, #0
 8009692:	f7f6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8009696:	4606      	mov	r6, r0
 8009698:	460f      	mov	r7, r1
 800969a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800969e:	9606      	str	r6, [sp, #24]
 80096a0:	9307      	str	r3, [sp, #28]
 80096a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096a6:	4d57      	ldr	r5, [pc, #348]	@ (8009804 <_strtod_l+0xaf4>)
 80096a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ae:	401d      	ands	r5, r3
 80096b0:	4b58      	ldr	r3, [pc, #352]	@ (8009814 <_strtod_l+0xb04>)
 80096b2:	429d      	cmp	r5, r3
 80096b4:	f040 80b2 	bne.w	800981c <_strtod_l+0xb0c>
 80096b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096be:	ec4b ab10 	vmov	d0, sl, fp
 80096c2:	f003 f931 	bl	800c928 <__ulp>
 80096c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096ca:	ec51 0b10 	vmov	r0, r1, d0
 80096ce:	f7f6 ff93 	bl	80005f8 <__aeabi_dmul>
 80096d2:	4652      	mov	r2, sl
 80096d4:	465b      	mov	r3, fp
 80096d6:	f7f6 fdd9 	bl	800028c <__adddf3>
 80096da:	460b      	mov	r3, r1
 80096dc:	4949      	ldr	r1, [pc, #292]	@ (8009804 <_strtod_l+0xaf4>)
 80096de:	4a4e      	ldr	r2, [pc, #312]	@ (8009818 <_strtod_l+0xb08>)
 80096e0:	4019      	ands	r1, r3
 80096e2:	4291      	cmp	r1, r2
 80096e4:	4682      	mov	sl, r0
 80096e6:	d942      	bls.n	800976e <_strtod_l+0xa5e>
 80096e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096ea:	4b47      	ldr	r3, [pc, #284]	@ (8009808 <_strtod_l+0xaf8>)
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d103      	bne.n	80096f8 <_strtod_l+0x9e8>
 80096f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096f2:	3301      	adds	r3, #1
 80096f4:	f43f ad2b 	beq.w	800914e <_strtod_l+0x43e>
 80096f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009808 <_strtod_l+0xaf8>
 80096fc:	f04f 3aff 	mov.w	sl, #4294967295
 8009700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009702:	9805      	ldr	r0, [sp, #20]
 8009704:	f002 fddc 	bl	800c2c0 <_Bfree>
 8009708:	9805      	ldr	r0, [sp, #20]
 800970a:	4649      	mov	r1, r9
 800970c:	f002 fdd8 	bl	800c2c0 <_Bfree>
 8009710:	9805      	ldr	r0, [sp, #20]
 8009712:	4641      	mov	r1, r8
 8009714:	f002 fdd4 	bl	800c2c0 <_Bfree>
 8009718:	9805      	ldr	r0, [sp, #20]
 800971a:	4621      	mov	r1, r4
 800971c:	f002 fdd0 	bl	800c2c0 <_Bfree>
 8009720:	e618      	b.n	8009354 <_strtod_l+0x644>
 8009722:	f1ba 0f01 	cmp.w	sl, #1
 8009726:	d103      	bne.n	8009730 <_strtod_l+0xa20>
 8009728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800972a:	2b00      	cmp	r3, #0
 800972c:	f43f ada5 	beq.w	800927a <_strtod_l+0x56a>
 8009730:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80097e0 <_strtod_l+0xad0>
 8009734:	4f35      	ldr	r7, [pc, #212]	@ (800980c <_strtod_l+0xafc>)
 8009736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800973a:	2600      	movs	r6, #0
 800973c:	e7b1      	b.n	80096a2 <_strtod_l+0x992>
 800973e:	4f34      	ldr	r7, [pc, #208]	@ (8009810 <_strtod_l+0xb00>)
 8009740:	2600      	movs	r6, #0
 8009742:	e7aa      	b.n	800969a <_strtod_l+0x98a>
 8009744:	4b32      	ldr	r3, [pc, #200]	@ (8009810 <_strtod_l+0xb00>)
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	2200      	movs	r2, #0
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d09f      	beq.n	800969a <_strtod_l+0x98a>
 800975a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800975e:	e7a0      	b.n	80096a2 <_strtod_l+0x992>
 8009760:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80097e8 <_strtod_l+0xad8>
 8009764:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009768:	ec57 6b17 	vmov	r6, r7, d7
 800976c:	e799      	b.n	80096a2 <_strtod_l+0x992>
 800976e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009772:	9b08      	ldr	r3, [sp, #32]
 8009774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1c1      	bne.n	8009700 <_strtod_l+0x9f0>
 800977c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009780:	0d1b      	lsrs	r3, r3, #20
 8009782:	051b      	lsls	r3, r3, #20
 8009784:	429d      	cmp	r5, r3
 8009786:	d1bb      	bne.n	8009700 <_strtod_l+0x9f0>
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f7 fa94 	bl	8000cb8 <__aeabi_d2lz>
 8009790:	f7f6 ff04 	bl	800059c <__aeabi_l2d>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f6 fd74 	bl	8000288 <__aeabi_dsub>
 80097a0:	460b      	mov	r3, r1
 80097a2:	4602      	mov	r2, r0
 80097a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ae:	ea46 060a 	orr.w	r6, r6, sl
 80097b2:	431e      	orrs	r6, r3
 80097b4:	d06f      	beq.n	8009896 <_strtod_l+0xb86>
 80097b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80097f0 <_strtod_l+0xae0>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f7 f98e 	bl	8000adc <__aeabi_dcmplt>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f47f accf 	bne.w	8009164 <_strtod_l+0x454>
 80097c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80097f8 <_strtod_l+0xae8>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097d0:	f7f7 f9a2 	bl	8000b18 <__aeabi_dcmpgt>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d093      	beq.n	8009700 <_strtod_l+0x9f0>
 80097d8:	e4c4      	b.n	8009164 <_strtod_l+0x454>
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w
 80097e0:	00000000 	.word	0x00000000
 80097e4:	bff00000 	.word	0xbff00000
 80097e8:	00000000 	.word	0x00000000
 80097ec:	3ff00000 	.word	0x3ff00000
 80097f0:	94a03595 	.word	0x94a03595
 80097f4:	3fdfffff 	.word	0x3fdfffff
 80097f8:	35afe535 	.word	0x35afe535
 80097fc:	3fe00000 	.word	0x3fe00000
 8009800:	000fffff 	.word	0x000fffff
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	7fefffff 	.word	0x7fefffff
 800980c:	3ff00000 	.word	0x3ff00000
 8009810:	3fe00000 	.word	0x3fe00000
 8009814:	7fe00000 	.word	0x7fe00000
 8009818:	7c9fffff 	.word	0x7c9fffff
 800981c:	9b08      	ldr	r3, [sp, #32]
 800981e:	b323      	cbz	r3, 800986a <_strtod_l+0xb5a>
 8009820:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009824:	d821      	bhi.n	800986a <_strtod_l+0xb5a>
 8009826:	a328      	add	r3, pc, #160	@ (adr r3, 80098c8 <_strtod_l+0xbb8>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	4630      	mov	r0, r6
 800982e:	4639      	mov	r1, r7
 8009830:	f7f7 f95e 	bl	8000af0 <__aeabi_dcmple>
 8009834:	b1a0      	cbz	r0, 8009860 <_strtod_l+0xb50>
 8009836:	4639      	mov	r1, r7
 8009838:	4630      	mov	r0, r6
 800983a:	f7f7 f9b5 	bl	8000ba8 <__aeabi_d2uiz>
 800983e:	2801      	cmp	r0, #1
 8009840:	bf38      	it	cc
 8009842:	2001      	movcc	r0, #1
 8009844:	f7f6 fe5e 	bl	8000504 <__aeabi_ui2d>
 8009848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800984a:	4606      	mov	r6, r0
 800984c:	460f      	mov	r7, r1
 800984e:	b9fb      	cbnz	r3, 8009890 <_strtod_l+0xb80>
 8009850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009854:	9014      	str	r0, [sp, #80]	@ 0x50
 8009856:	9315      	str	r3, [sp, #84]	@ 0x54
 8009858:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800985c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009860:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009862:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009866:	1b5b      	subs	r3, r3, r5
 8009868:	9311      	str	r3, [sp, #68]	@ 0x44
 800986a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800986e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009872:	f003 f859 	bl	800c928 <__ulp>
 8009876:	4650      	mov	r0, sl
 8009878:	ec53 2b10 	vmov	r2, r3, d0
 800987c:	4659      	mov	r1, fp
 800987e:	f7f6 febb 	bl	80005f8 <__aeabi_dmul>
 8009882:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009886:	f7f6 fd01 	bl	800028c <__adddf3>
 800988a:	4682      	mov	sl, r0
 800988c:	468b      	mov	fp, r1
 800988e:	e770      	b.n	8009772 <_strtod_l+0xa62>
 8009890:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009894:	e7e0      	b.n	8009858 <_strtod_l+0xb48>
 8009896:	a30e      	add	r3, pc, #56	@ (adr r3, 80098d0 <_strtod_l+0xbc0>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f7 f91e 	bl	8000adc <__aeabi_dcmplt>
 80098a0:	e798      	b.n	80097d4 <_strtod_l+0xac4>
 80098a2:	2300      	movs	r3, #0
 80098a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	f7ff ba6d 	b.w	8008d8a <_strtod_l+0x7a>
 80098b0:	2a65      	cmp	r2, #101	@ 0x65
 80098b2:	f43f ab66 	beq.w	8008f82 <_strtod_l+0x272>
 80098b6:	2a45      	cmp	r2, #69	@ 0x45
 80098b8:	f43f ab63 	beq.w	8008f82 <_strtod_l+0x272>
 80098bc:	2301      	movs	r3, #1
 80098be:	f7ff bb9e 	b.w	8008ffe <_strtod_l+0x2ee>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	ffc00000 	.word	0xffc00000
 80098cc:	41dfffff 	.word	0x41dfffff
 80098d0:	94a03595 	.word	0x94a03595
 80098d4:	3fcfffff 	.word	0x3fcfffff

080098d8 <_strtod_r>:
 80098d8:	4b01      	ldr	r3, [pc, #4]	@ (80098e0 <_strtod_r+0x8>)
 80098da:	f7ff ba19 	b.w	8008d10 <_strtod_l>
 80098de:	bf00      	nop
 80098e0:	20000098 	.word	0x20000098

080098e4 <strtod>:
 80098e4:	460a      	mov	r2, r1
 80098e6:	4601      	mov	r1, r0
 80098e8:	4802      	ldr	r0, [pc, #8]	@ (80098f4 <strtod+0x10>)
 80098ea:	4b03      	ldr	r3, [pc, #12]	@ (80098f8 <strtod+0x14>)
 80098ec:	6800      	ldr	r0, [r0, #0]
 80098ee:	f7ff ba0f 	b.w	8008d10 <_strtod_l>
 80098f2:	bf00      	nop
 80098f4:	20000204 	.word	0x20000204
 80098f8:	20000098 	.word	0x20000098

080098fc <__cvt>:
 80098fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009900:	ec57 6b10 	vmov	r6, r7, d0
 8009904:	2f00      	cmp	r7, #0
 8009906:	460c      	mov	r4, r1
 8009908:	4619      	mov	r1, r3
 800990a:	463b      	mov	r3, r7
 800990c:	bfbb      	ittet	lt
 800990e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009912:	461f      	movlt	r7, r3
 8009914:	2300      	movge	r3, #0
 8009916:	232d      	movlt	r3, #45	@ 0x2d
 8009918:	700b      	strb	r3, [r1, #0]
 800991a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800991c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009920:	4691      	mov	r9, r2
 8009922:	f023 0820 	bic.w	r8, r3, #32
 8009926:	bfbc      	itt	lt
 8009928:	4632      	movlt	r2, r6
 800992a:	4616      	movlt	r6, r2
 800992c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009930:	d005      	beq.n	800993e <__cvt+0x42>
 8009932:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009936:	d100      	bne.n	800993a <__cvt+0x3e>
 8009938:	3401      	adds	r4, #1
 800993a:	2102      	movs	r1, #2
 800993c:	e000      	b.n	8009940 <__cvt+0x44>
 800993e:	2103      	movs	r1, #3
 8009940:	ab03      	add	r3, sp, #12
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	ab02      	add	r3, sp, #8
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	ec47 6b10 	vmov	d0, r6, r7
 800994c:	4653      	mov	r3, sl
 800994e:	4622      	mov	r2, r4
 8009950:	f001 fa66 	bl	800ae20 <_dtoa_r>
 8009954:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009958:	4605      	mov	r5, r0
 800995a:	d119      	bne.n	8009990 <__cvt+0x94>
 800995c:	f019 0f01 	tst.w	r9, #1
 8009960:	d00e      	beq.n	8009980 <__cvt+0x84>
 8009962:	eb00 0904 	add.w	r9, r0, r4
 8009966:	2200      	movs	r2, #0
 8009968:	2300      	movs	r3, #0
 800996a:	4630      	mov	r0, r6
 800996c:	4639      	mov	r1, r7
 800996e:	f7f7 f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009972:	b108      	cbz	r0, 8009978 <__cvt+0x7c>
 8009974:	f8cd 900c 	str.w	r9, [sp, #12]
 8009978:	2230      	movs	r2, #48	@ 0x30
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	454b      	cmp	r3, r9
 800997e:	d31e      	bcc.n	80099be <__cvt+0xc2>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009984:	1b5b      	subs	r3, r3, r5
 8009986:	4628      	mov	r0, r5
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	b004      	add	sp, #16
 800998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009990:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009994:	eb00 0904 	add.w	r9, r0, r4
 8009998:	d1e5      	bne.n	8009966 <__cvt+0x6a>
 800999a:	7803      	ldrb	r3, [r0, #0]
 800999c:	2b30      	cmp	r3, #48	@ 0x30
 800999e:	d10a      	bne.n	80099b6 <__cvt+0xba>
 80099a0:	2200      	movs	r2, #0
 80099a2:	2300      	movs	r3, #0
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f7 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ac:	b918      	cbnz	r0, 80099b6 <__cvt+0xba>
 80099ae:	f1c4 0401 	rsb	r4, r4, #1
 80099b2:	f8ca 4000 	str.w	r4, [sl]
 80099b6:	f8da 3000 	ldr.w	r3, [sl]
 80099ba:	4499      	add	r9, r3
 80099bc:	e7d3      	b.n	8009966 <__cvt+0x6a>
 80099be:	1c59      	adds	r1, r3, #1
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	e7d9      	b.n	800997a <__cvt+0x7e>

080099c6 <__exponent>:
 80099c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c8:	2900      	cmp	r1, #0
 80099ca:	bfba      	itte	lt
 80099cc:	4249      	neglt	r1, r1
 80099ce:	232d      	movlt	r3, #45	@ 0x2d
 80099d0:	232b      	movge	r3, #43	@ 0x2b
 80099d2:	2909      	cmp	r1, #9
 80099d4:	7002      	strb	r2, [r0, #0]
 80099d6:	7043      	strb	r3, [r0, #1]
 80099d8:	dd29      	ble.n	8009a2e <__exponent+0x68>
 80099da:	f10d 0307 	add.w	r3, sp, #7
 80099de:	461d      	mov	r5, r3
 80099e0:	270a      	movs	r7, #10
 80099e2:	461a      	mov	r2, r3
 80099e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80099e8:	fb07 1416 	mls	r4, r7, r6, r1
 80099ec:	3430      	adds	r4, #48	@ 0x30
 80099ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099f2:	460c      	mov	r4, r1
 80099f4:	2c63      	cmp	r4, #99	@ 0x63
 80099f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80099fa:	4631      	mov	r1, r6
 80099fc:	dcf1      	bgt.n	80099e2 <__exponent+0x1c>
 80099fe:	3130      	adds	r1, #48	@ 0x30
 8009a00:	1e94      	subs	r4, r2, #2
 8009a02:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a06:	1c41      	adds	r1, r0, #1
 8009a08:	4623      	mov	r3, r4
 8009a0a:	42ab      	cmp	r3, r5
 8009a0c:	d30a      	bcc.n	8009a24 <__exponent+0x5e>
 8009a0e:	f10d 0309 	add.w	r3, sp, #9
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	42ac      	cmp	r4, r5
 8009a16:	bf88      	it	hi
 8009a18:	2300      	movhi	r3, #0
 8009a1a:	3302      	adds	r3, #2
 8009a1c:	4403      	add	r3, r0
 8009a1e:	1a18      	subs	r0, r3, r0
 8009a20:	b003      	add	sp, #12
 8009a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a24:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a28:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a2c:	e7ed      	b.n	8009a0a <__exponent+0x44>
 8009a2e:	2330      	movs	r3, #48	@ 0x30
 8009a30:	3130      	adds	r1, #48	@ 0x30
 8009a32:	7083      	strb	r3, [r0, #2]
 8009a34:	70c1      	strb	r1, [r0, #3]
 8009a36:	1d03      	adds	r3, r0, #4
 8009a38:	e7f1      	b.n	8009a1e <__exponent+0x58>
	...

08009a3c <_printf_float>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	b08d      	sub	sp, #52	@ 0x34
 8009a42:	460c      	mov	r4, r1
 8009a44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a48:	4616      	mov	r6, r2
 8009a4a:	461f      	mov	r7, r3
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	f001 f8ab 	bl	800aba8 <_localeconv_r>
 8009a52:	6803      	ldr	r3, [r0, #0]
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f6 fc0a 	bl	8000270 <strlen>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a60:	f8d8 3000 	ldr.w	r3, [r8]
 8009a64:	9005      	str	r0, [sp, #20]
 8009a66:	3307      	adds	r3, #7
 8009a68:	f023 0307 	bic.w	r3, r3, #7
 8009a6c:	f103 0208 	add.w	r2, r3, #8
 8009a70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a74:	f8d4 b000 	ldr.w	fp, [r4]
 8009a78:	f8c8 2000 	str.w	r2, [r8]
 8009a7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a84:	9307      	str	r3, [sp, #28]
 8009a86:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a92:	4b9c      	ldr	r3, [pc, #624]	@ (8009d04 <_printf_float+0x2c8>)
 8009a94:	f04f 32ff 	mov.w	r2, #4294967295
 8009a98:	f7f7 f848 	bl	8000b2c <__aeabi_dcmpun>
 8009a9c:	bb70      	cbnz	r0, 8009afc <_printf_float+0xc0>
 8009a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aa2:	4b98      	ldr	r3, [pc, #608]	@ (8009d04 <_printf_float+0x2c8>)
 8009aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa8:	f7f7 f822 	bl	8000af0 <__aeabi_dcmple>
 8009aac:	bb30      	cbnz	r0, 8009afc <_printf_float+0xc0>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f7 f811 	bl	8000adc <__aeabi_dcmplt>
 8009aba:	b110      	cbz	r0, 8009ac2 <_printf_float+0x86>
 8009abc:	232d      	movs	r3, #45	@ 0x2d
 8009abe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ac2:	4a91      	ldr	r2, [pc, #580]	@ (8009d08 <_printf_float+0x2cc>)
 8009ac4:	4b91      	ldr	r3, [pc, #580]	@ (8009d0c <_printf_float+0x2d0>)
 8009ac6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009aca:	bf94      	ite	ls
 8009acc:	4690      	movls	r8, r2
 8009ace:	4698      	movhi	r8, r3
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	f02b 0304 	bic.w	r3, fp, #4
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	f04f 0900 	mov.w	r9, #0
 8009ade:	9700      	str	r7, [sp, #0]
 8009ae0:	4633      	mov	r3, r6
 8009ae2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f000 f9d2 	bl	8009e90 <_printf_common>
 8009aec:	3001      	adds	r0, #1
 8009aee:	f040 808d 	bne.w	8009c0c <_printf_float+0x1d0>
 8009af2:	f04f 30ff 	mov.w	r0, #4294967295
 8009af6:	b00d      	add	sp, #52	@ 0x34
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	4640      	mov	r0, r8
 8009b02:	4649      	mov	r1, r9
 8009b04:	f7f7 f812 	bl	8000b2c <__aeabi_dcmpun>
 8009b08:	b140      	cbz	r0, 8009b1c <_printf_float+0xe0>
 8009b0a:	464b      	mov	r3, r9
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	bfbc      	itt	lt
 8009b10:	232d      	movlt	r3, #45	@ 0x2d
 8009b12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b16:	4a7e      	ldr	r2, [pc, #504]	@ (8009d10 <_printf_float+0x2d4>)
 8009b18:	4b7e      	ldr	r3, [pc, #504]	@ (8009d14 <_printf_float+0x2d8>)
 8009b1a:	e7d4      	b.n	8009ac6 <_printf_float+0x8a>
 8009b1c:	6863      	ldr	r3, [r4, #4]
 8009b1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b22:	9206      	str	r2, [sp, #24]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	d13b      	bne.n	8009ba0 <_printf_float+0x164>
 8009b28:	2306      	movs	r3, #6
 8009b2a:	6063      	str	r3, [r4, #4]
 8009b2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b30:	2300      	movs	r3, #0
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b38:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b3c:	ab09      	add	r3, sp, #36	@ 0x24
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	6861      	ldr	r1, [r4, #4]
 8009b42:	ec49 8b10 	vmov	d0, r8, r9
 8009b46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f7ff fed6 	bl	80098fc <__cvt>
 8009b50:	9b06      	ldr	r3, [sp, #24]
 8009b52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b54:	2b47      	cmp	r3, #71	@ 0x47
 8009b56:	4680      	mov	r8, r0
 8009b58:	d129      	bne.n	8009bae <_printf_float+0x172>
 8009b5a:	1cc8      	adds	r0, r1, #3
 8009b5c:	db02      	blt.n	8009b64 <_printf_float+0x128>
 8009b5e:	6863      	ldr	r3, [r4, #4]
 8009b60:	4299      	cmp	r1, r3
 8009b62:	dd41      	ble.n	8009be8 <_printf_float+0x1ac>
 8009b64:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b68:	fa5f fa8a 	uxtb.w	sl, sl
 8009b6c:	3901      	subs	r1, #1
 8009b6e:	4652      	mov	r2, sl
 8009b70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b74:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b76:	f7ff ff26 	bl	80099c6 <__exponent>
 8009b7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b7c:	1813      	adds	r3, r2, r0
 8009b7e:	2a01      	cmp	r2, #1
 8009b80:	4681      	mov	r9, r0
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	dc02      	bgt.n	8009b8c <_printf_float+0x150>
 8009b86:	6822      	ldr	r2, [r4, #0]
 8009b88:	07d2      	lsls	r2, r2, #31
 8009b8a:	d501      	bpl.n	8009b90 <_printf_float+0x154>
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	6123      	str	r3, [r4, #16]
 8009b90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d0a2      	beq.n	8009ade <_printf_float+0xa2>
 8009b98:	232d      	movs	r3, #45	@ 0x2d
 8009b9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9e:	e79e      	b.n	8009ade <_printf_float+0xa2>
 8009ba0:	9a06      	ldr	r2, [sp, #24]
 8009ba2:	2a47      	cmp	r2, #71	@ 0x47
 8009ba4:	d1c2      	bne.n	8009b2c <_printf_float+0xf0>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1c0      	bne.n	8009b2c <_printf_float+0xf0>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e7bd      	b.n	8009b2a <_printf_float+0xee>
 8009bae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bb2:	d9db      	bls.n	8009b6c <_printf_float+0x130>
 8009bb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bb8:	d118      	bne.n	8009bec <_printf_float+0x1b0>
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	6863      	ldr	r3, [r4, #4]
 8009bbe:	dd0b      	ble.n	8009bd8 <_printf_float+0x19c>
 8009bc0:	6121      	str	r1, [r4, #16]
 8009bc2:	b913      	cbnz	r3, 8009bca <_printf_float+0x18e>
 8009bc4:	6822      	ldr	r2, [r4, #0]
 8009bc6:	07d0      	lsls	r0, r2, #31
 8009bc8:	d502      	bpl.n	8009bd0 <_printf_float+0x194>
 8009bca:	3301      	adds	r3, #1
 8009bcc:	440b      	add	r3, r1
 8009bce:	6123      	str	r3, [r4, #16]
 8009bd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	e7db      	b.n	8009b90 <_printf_float+0x154>
 8009bd8:	b913      	cbnz	r3, 8009be0 <_printf_float+0x1a4>
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	07d2      	lsls	r2, r2, #31
 8009bde:	d501      	bpl.n	8009be4 <_printf_float+0x1a8>
 8009be0:	3302      	adds	r3, #2
 8009be2:	e7f4      	b.n	8009bce <_printf_float+0x192>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e7f2      	b.n	8009bce <_printf_float+0x192>
 8009be8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	db05      	blt.n	8009bfe <_printf_float+0x1c2>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	6121      	str	r1, [r4, #16]
 8009bf6:	07d8      	lsls	r0, r3, #31
 8009bf8:	d5ea      	bpl.n	8009bd0 <_printf_float+0x194>
 8009bfa:	1c4b      	adds	r3, r1, #1
 8009bfc:	e7e7      	b.n	8009bce <_printf_float+0x192>
 8009bfe:	2900      	cmp	r1, #0
 8009c00:	bfd4      	ite	le
 8009c02:	f1c1 0202 	rsble	r2, r1, #2
 8009c06:	2201      	movgt	r2, #1
 8009c08:	4413      	add	r3, r2
 8009c0a:	e7e0      	b.n	8009bce <_printf_float+0x192>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	055a      	lsls	r2, r3, #21
 8009c10:	d407      	bmi.n	8009c22 <_printf_float+0x1e6>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	4642      	mov	r2, r8
 8009c16:	4631      	mov	r1, r6
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b8      	blx	r7
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d12b      	bne.n	8009c78 <_printf_float+0x23c>
 8009c20:	e767      	b.n	8009af2 <_printf_float+0xb6>
 8009c22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c26:	f240 80dd 	bls.w	8009de4 <_printf_float+0x3a8>
 8009c2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	f7f6 ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d033      	beq.n	8009ca2 <_printf_float+0x266>
 8009c3a:	4a37      	ldr	r2, [pc, #220]	@ (8009d18 <_printf_float+0x2dc>)
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b8      	blx	r7
 8009c44:	3001      	adds	r0, #1
 8009c46:	f43f af54 	beq.w	8009af2 <_printf_float+0xb6>
 8009c4a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c4e:	4543      	cmp	r3, r8
 8009c50:	db02      	blt.n	8009c58 <_printf_float+0x21c>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	07d8      	lsls	r0, r3, #31
 8009c56:	d50f      	bpl.n	8009c78 <_printf_float+0x23c>
 8009c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	f43f af45 	beq.w	8009af2 <_printf_float+0xb6>
 8009c68:	f04f 0900 	mov.w	r9, #0
 8009c6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c70:	f104 0a1a 	add.w	sl, r4, #26
 8009c74:	45c8      	cmp	r8, r9
 8009c76:	dc09      	bgt.n	8009c8c <_printf_float+0x250>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	079b      	lsls	r3, r3, #30
 8009c7c:	f100 8103 	bmi.w	8009e86 <_printf_float+0x44a>
 8009c80:	68e0      	ldr	r0, [r4, #12]
 8009c82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c84:	4298      	cmp	r0, r3
 8009c86:	bfb8      	it	lt
 8009c88:	4618      	movlt	r0, r3
 8009c8a:	e734      	b.n	8009af6 <_printf_float+0xba>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	4652      	mov	r2, sl
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f af2b 	beq.w	8009af2 <_printf_float+0xb6>
 8009c9c:	f109 0901 	add.w	r9, r9, #1
 8009ca0:	e7e8      	b.n	8009c74 <_printf_float+0x238>
 8009ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	dc39      	bgt.n	8009d1c <_printf_float+0x2e0>
 8009ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d18 <_printf_float+0x2dc>)
 8009caa:	2301      	movs	r3, #1
 8009cac:	4631      	mov	r1, r6
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f43f af1d 	beq.w	8009af2 <_printf_float+0xb6>
 8009cb8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009cbc:	ea59 0303 	orrs.w	r3, r9, r3
 8009cc0:	d102      	bne.n	8009cc8 <_printf_float+0x28c>
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	d5d7      	bpl.n	8009c78 <_printf_float+0x23c>
 8009cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f43f af0d 	beq.w	8009af2 <_printf_float+0xb6>
 8009cd8:	f04f 0a00 	mov.w	sl, #0
 8009cdc:	f104 0b1a 	add.w	fp, r4, #26
 8009ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce2:	425b      	negs	r3, r3
 8009ce4:	4553      	cmp	r3, sl
 8009ce6:	dc01      	bgt.n	8009cec <_printf_float+0x2b0>
 8009ce8:	464b      	mov	r3, r9
 8009cea:	e793      	b.n	8009c14 <_printf_float+0x1d8>
 8009cec:	2301      	movs	r3, #1
 8009cee:	465a      	mov	r2, fp
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f aefb 	beq.w	8009af2 <_printf_float+0xb6>
 8009cfc:	f10a 0a01 	add.w	sl, sl, #1
 8009d00:	e7ee      	b.n	8009ce0 <_printf_float+0x2a4>
 8009d02:	bf00      	nop
 8009d04:	7fefffff 	.word	0x7fefffff
 8009d08:	0800eb48 	.word	0x0800eb48
 8009d0c:	0800eb4c 	.word	0x0800eb4c
 8009d10:	0800eb50 	.word	0x0800eb50
 8009d14:	0800eb54 	.word	0x0800eb54
 8009d18:	0800eb58 	.word	0x0800eb58
 8009d1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d22:	4553      	cmp	r3, sl
 8009d24:	bfa8      	it	ge
 8009d26:	4653      	movge	r3, sl
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	4699      	mov	r9, r3
 8009d2c:	dc36      	bgt.n	8009d9c <_printf_float+0x360>
 8009d2e:	f04f 0b00 	mov.w	fp, #0
 8009d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d36:	f104 021a 	add.w	r2, r4, #26
 8009d3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	eba3 0309 	sub.w	r3, r3, r9
 8009d42:	455b      	cmp	r3, fp
 8009d44:	dc31      	bgt.n	8009daa <_printf_float+0x36e>
 8009d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d48:	459a      	cmp	sl, r3
 8009d4a:	dc3a      	bgt.n	8009dc2 <_printf_float+0x386>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	07da      	lsls	r2, r3, #31
 8009d50:	d437      	bmi.n	8009dc2 <_printf_float+0x386>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	ebaa 0903 	sub.w	r9, sl, r3
 8009d58:	9b06      	ldr	r3, [sp, #24]
 8009d5a:	ebaa 0303 	sub.w	r3, sl, r3
 8009d5e:	4599      	cmp	r9, r3
 8009d60:	bfa8      	it	ge
 8009d62:	4699      	movge	r9, r3
 8009d64:	f1b9 0f00 	cmp.w	r9, #0
 8009d68:	dc33      	bgt.n	8009dd2 <_printf_float+0x396>
 8009d6a:	f04f 0800 	mov.w	r8, #0
 8009d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d72:	f104 0b1a 	add.w	fp, r4, #26
 8009d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d78:	ebaa 0303 	sub.w	r3, sl, r3
 8009d7c:	eba3 0309 	sub.w	r3, r3, r9
 8009d80:	4543      	cmp	r3, r8
 8009d82:	f77f af79 	ble.w	8009c78 <_printf_float+0x23c>
 8009d86:	2301      	movs	r3, #1
 8009d88:	465a      	mov	r2, fp
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b8      	blx	r7
 8009d90:	3001      	adds	r0, #1
 8009d92:	f43f aeae 	beq.w	8009af2 <_printf_float+0xb6>
 8009d96:	f108 0801 	add.w	r8, r8, #1
 8009d9a:	e7ec      	b.n	8009d76 <_printf_float+0x33a>
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	d1c2      	bne.n	8009d2e <_printf_float+0x2f2>
 8009da8:	e6a3      	b.n	8009af2 <_printf_float+0xb6>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4631      	mov	r1, r6
 8009dae:	4628      	mov	r0, r5
 8009db0:	9206      	str	r2, [sp, #24]
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	f43f ae9c 	beq.w	8009af2 <_printf_float+0xb6>
 8009dba:	9a06      	ldr	r2, [sp, #24]
 8009dbc:	f10b 0b01 	add.w	fp, fp, #1
 8009dc0:	e7bb      	b.n	8009d3a <_printf_float+0x2fe>
 8009dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b8      	blx	r7
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d1c0      	bne.n	8009d52 <_printf_float+0x316>
 8009dd0:	e68f      	b.n	8009af2 <_printf_float+0xb6>
 8009dd2:	9a06      	ldr	r2, [sp, #24]
 8009dd4:	464b      	mov	r3, r9
 8009dd6:	4442      	add	r2, r8
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	d1c3      	bne.n	8009d6a <_printf_float+0x32e>
 8009de2:	e686      	b.n	8009af2 <_printf_float+0xb6>
 8009de4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009de8:	f1ba 0f01 	cmp.w	sl, #1
 8009dec:	dc01      	bgt.n	8009df2 <_printf_float+0x3b6>
 8009dee:	07db      	lsls	r3, r3, #31
 8009df0:	d536      	bpl.n	8009e60 <_printf_float+0x424>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4642      	mov	r2, r8
 8009df6:	4631      	mov	r1, r6
 8009df8:	4628      	mov	r0, r5
 8009dfa:	47b8      	blx	r7
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	f43f ae78 	beq.w	8009af2 <_printf_float+0xb6>
 8009e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e06:	4631      	mov	r1, r6
 8009e08:	4628      	mov	r0, r5
 8009e0a:	47b8      	blx	r7
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	f43f ae70 	beq.w	8009af2 <_printf_float+0xb6>
 8009e12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e1e:	f7f6 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e22:	b9c0      	cbnz	r0, 8009e56 <_printf_float+0x41a>
 8009e24:	4653      	mov	r3, sl
 8009e26:	f108 0201 	add.w	r2, r8, #1
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	47b8      	blx	r7
 8009e30:	3001      	adds	r0, #1
 8009e32:	d10c      	bne.n	8009e4e <_printf_float+0x412>
 8009e34:	e65d      	b.n	8009af2 <_printf_float+0xb6>
 8009e36:	2301      	movs	r3, #1
 8009e38:	465a      	mov	r2, fp
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	f43f ae56 	beq.w	8009af2 <_printf_float+0xb6>
 8009e46:	f108 0801 	add.w	r8, r8, #1
 8009e4a:	45d0      	cmp	r8, sl
 8009e4c:	dbf3      	blt.n	8009e36 <_printf_float+0x3fa>
 8009e4e:	464b      	mov	r3, r9
 8009e50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e54:	e6df      	b.n	8009c16 <_printf_float+0x1da>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	f104 0b1a 	add.w	fp, r4, #26
 8009e5e:	e7f4      	b.n	8009e4a <_printf_float+0x40e>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4642      	mov	r2, r8
 8009e64:	e7e1      	b.n	8009e2a <_printf_float+0x3ee>
 8009e66:	2301      	movs	r3, #1
 8009e68:	464a      	mov	r2, r9
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	f43f ae3e 	beq.w	8009af2 <_printf_float+0xb6>
 8009e76:	f108 0801 	add.w	r8, r8, #1
 8009e7a:	68e3      	ldr	r3, [r4, #12]
 8009e7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e7e:	1a5b      	subs	r3, r3, r1
 8009e80:	4543      	cmp	r3, r8
 8009e82:	dcf0      	bgt.n	8009e66 <_printf_float+0x42a>
 8009e84:	e6fc      	b.n	8009c80 <_printf_float+0x244>
 8009e86:	f04f 0800 	mov.w	r8, #0
 8009e8a:	f104 0919 	add.w	r9, r4, #25
 8009e8e:	e7f4      	b.n	8009e7a <_printf_float+0x43e>

08009e90 <_printf_common>:
 8009e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	4616      	mov	r6, r2
 8009e96:	4698      	mov	r8, r3
 8009e98:	688a      	ldr	r2, [r1, #8]
 8009e9a:	690b      	ldr	r3, [r1, #16]
 8009e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	bfb8      	it	lt
 8009ea4:	4613      	movlt	r3, r2
 8009ea6:	6033      	str	r3, [r6, #0]
 8009ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009eac:	4607      	mov	r7, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_printf_common+0x26>
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	6033      	str	r3, [r6, #0]
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	0699      	lsls	r1, r3, #26
 8009eba:	bf42      	ittt	mi
 8009ebc:	6833      	ldrmi	r3, [r6, #0]
 8009ebe:	3302      	addmi	r3, #2
 8009ec0:	6033      	strmi	r3, [r6, #0]
 8009ec2:	6825      	ldr	r5, [r4, #0]
 8009ec4:	f015 0506 	ands.w	r5, r5, #6
 8009ec8:	d106      	bne.n	8009ed8 <_printf_common+0x48>
 8009eca:	f104 0a19 	add.w	sl, r4, #25
 8009ece:	68e3      	ldr	r3, [r4, #12]
 8009ed0:	6832      	ldr	r2, [r6, #0]
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	42ab      	cmp	r3, r5
 8009ed6:	dc26      	bgt.n	8009f26 <_printf_common+0x96>
 8009ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009edc:	6822      	ldr	r2, [r4, #0]
 8009ede:	3b00      	subs	r3, #0
 8009ee0:	bf18      	it	ne
 8009ee2:	2301      	movne	r3, #1
 8009ee4:	0692      	lsls	r2, r2, #26
 8009ee6:	d42b      	bmi.n	8009f40 <_printf_common+0xb0>
 8009ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009eec:	4641      	mov	r1, r8
 8009eee:	4638      	mov	r0, r7
 8009ef0:	47c8      	blx	r9
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	d01e      	beq.n	8009f34 <_printf_common+0xa4>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	6922      	ldr	r2, [r4, #16]
 8009efa:	f003 0306 	and.w	r3, r3, #6
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	bf02      	ittt	eq
 8009f02:	68e5      	ldreq	r5, [r4, #12]
 8009f04:	6833      	ldreq	r3, [r6, #0]
 8009f06:	1aed      	subeq	r5, r5, r3
 8009f08:	68a3      	ldr	r3, [r4, #8]
 8009f0a:	bf0c      	ite	eq
 8009f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f10:	2500      	movne	r5, #0
 8009f12:	4293      	cmp	r3, r2
 8009f14:	bfc4      	itt	gt
 8009f16:	1a9b      	subgt	r3, r3, r2
 8009f18:	18ed      	addgt	r5, r5, r3
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	341a      	adds	r4, #26
 8009f1e:	42b5      	cmp	r5, r6
 8009f20:	d11a      	bne.n	8009f58 <_printf_common+0xc8>
 8009f22:	2000      	movs	r0, #0
 8009f24:	e008      	b.n	8009f38 <_printf_common+0xa8>
 8009f26:	2301      	movs	r3, #1
 8009f28:	4652      	mov	r2, sl
 8009f2a:	4641      	mov	r1, r8
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	47c8      	blx	r9
 8009f30:	3001      	adds	r0, #1
 8009f32:	d103      	bne.n	8009f3c <_printf_common+0xac>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	e7c6      	b.n	8009ece <_printf_common+0x3e>
 8009f40:	18e1      	adds	r1, r4, r3
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	2030      	movs	r0, #48	@ 0x30
 8009f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f4a:	4422      	add	r2, r4
 8009f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f54:	3302      	adds	r3, #2
 8009f56:	e7c7      	b.n	8009ee8 <_printf_common+0x58>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	4641      	mov	r1, r8
 8009f5e:	4638      	mov	r0, r7
 8009f60:	47c8      	blx	r9
 8009f62:	3001      	adds	r0, #1
 8009f64:	d0e6      	beq.n	8009f34 <_printf_common+0xa4>
 8009f66:	3601      	adds	r6, #1
 8009f68:	e7d9      	b.n	8009f1e <_printf_common+0x8e>
	...

08009f6c <_printf_i>:
 8009f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	7e0f      	ldrb	r7, [r1, #24]
 8009f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f74:	2f78      	cmp	r7, #120	@ 0x78
 8009f76:	4691      	mov	r9, r2
 8009f78:	4680      	mov	r8, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	469a      	mov	sl, r3
 8009f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f82:	d807      	bhi.n	8009f94 <_printf_i+0x28>
 8009f84:	2f62      	cmp	r7, #98	@ 0x62
 8009f86:	d80a      	bhi.n	8009f9e <_printf_i+0x32>
 8009f88:	2f00      	cmp	r7, #0
 8009f8a:	f000 80d2 	beq.w	800a132 <_printf_i+0x1c6>
 8009f8e:	2f58      	cmp	r7, #88	@ 0x58
 8009f90:	f000 80b9 	beq.w	800a106 <_printf_i+0x19a>
 8009f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f9c:	e03a      	b.n	800a014 <_printf_i+0xa8>
 8009f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fa2:	2b15      	cmp	r3, #21
 8009fa4:	d8f6      	bhi.n	8009f94 <_printf_i+0x28>
 8009fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8009fac <_printf_i+0x40>)
 8009fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fac:	0800a005 	.word	0x0800a005
 8009fb0:	0800a019 	.word	0x0800a019
 8009fb4:	08009f95 	.word	0x08009f95
 8009fb8:	08009f95 	.word	0x08009f95
 8009fbc:	08009f95 	.word	0x08009f95
 8009fc0:	08009f95 	.word	0x08009f95
 8009fc4:	0800a019 	.word	0x0800a019
 8009fc8:	08009f95 	.word	0x08009f95
 8009fcc:	08009f95 	.word	0x08009f95
 8009fd0:	08009f95 	.word	0x08009f95
 8009fd4:	08009f95 	.word	0x08009f95
 8009fd8:	0800a119 	.word	0x0800a119
 8009fdc:	0800a043 	.word	0x0800a043
 8009fe0:	0800a0d3 	.word	0x0800a0d3
 8009fe4:	08009f95 	.word	0x08009f95
 8009fe8:	08009f95 	.word	0x08009f95
 8009fec:	0800a13b 	.word	0x0800a13b
 8009ff0:	08009f95 	.word	0x08009f95
 8009ff4:	0800a043 	.word	0x0800a043
 8009ff8:	08009f95 	.word	0x08009f95
 8009ffc:	08009f95 	.word	0x08009f95
 800a000:	0800a0db 	.word	0x0800a0db
 800a004:	6833      	ldr	r3, [r6, #0]
 800a006:	1d1a      	adds	r2, r3, #4
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6032      	str	r2, [r6, #0]
 800a00c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a014:	2301      	movs	r3, #1
 800a016:	e09d      	b.n	800a154 <_printf_i+0x1e8>
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	6820      	ldr	r0, [r4, #0]
 800a01c:	1d19      	adds	r1, r3, #4
 800a01e:	6031      	str	r1, [r6, #0]
 800a020:	0606      	lsls	r6, r0, #24
 800a022:	d501      	bpl.n	800a028 <_printf_i+0xbc>
 800a024:	681d      	ldr	r5, [r3, #0]
 800a026:	e003      	b.n	800a030 <_printf_i+0xc4>
 800a028:	0645      	lsls	r5, r0, #25
 800a02a:	d5fb      	bpl.n	800a024 <_printf_i+0xb8>
 800a02c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a030:	2d00      	cmp	r5, #0
 800a032:	da03      	bge.n	800a03c <_printf_i+0xd0>
 800a034:	232d      	movs	r3, #45	@ 0x2d
 800a036:	426d      	negs	r5, r5
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a03c:	4859      	ldr	r0, [pc, #356]	@ (800a1a4 <_printf_i+0x238>)
 800a03e:	230a      	movs	r3, #10
 800a040:	e011      	b.n	800a066 <_printf_i+0xfa>
 800a042:	6821      	ldr	r1, [r4, #0]
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	0608      	lsls	r0, r1, #24
 800a048:	f853 5b04 	ldr.w	r5, [r3], #4
 800a04c:	d402      	bmi.n	800a054 <_printf_i+0xe8>
 800a04e:	0649      	lsls	r1, r1, #25
 800a050:	bf48      	it	mi
 800a052:	b2ad      	uxthmi	r5, r5
 800a054:	2f6f      	cmp	r7, #111	@ 0x6f
 800a056:	4853      	ldr	r0, [pc, #332]	@ (800a1a4 <_printf_i+0x238>)
 800a058:	6033      	str	r3, [r6, #0]
 800a05a:	bf14      	ite	ne
 800a05c:	230a      	movne	r3, #10
 800a05e:	2308      	moveq	r3, #8
 800a060:	2100      	movs	r1, #0
 800a062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a066:	6866      	ldr	r6, [r4, #4]
 800a068:	60a6      	str	r6, [r4, #8]
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	bfa2      	ittt	ge
 800a06e:	6821      	ldrge	r1, [r4, #0]
 800a070:	f021 0104 	bicge.w	r1, r1, #4
 800a074:	6021      	strge	r1, [r4, #0]
 800a076:	b90d      	cbnz	r5, 800a07c <_printf_i+0x110>
 800a078:	2e00      	cmp	r6, #0
 800a07a:	d04b      	beq.n	800a114 <_printf_i+0x1a8>
 800a07c:	4616      	mov	r6, r2
 800a07e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a082:	fb03 5711 	mls	r7, r3, r1, r5
 800a086:	5dc7      	ldrb	r7, [r0, r7]
 800a088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a08c:	462f      	mov	r7, r5
 800a08e:	42bb      	cmp	r3, r7
 800a090:	460d      	mov	r5, r1
 800a092:	d9f4      	bls.n	800a07e <_printf_i+0x112>
 800a094:	2b08      	cmp	r3, #8
 800a096:	d10b      	bne.n	800a0b0 <_printf_i+0x144>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	07df      	lsls	r7, r3, #31
 800a09c:	d508      	bpl.n	800a0b0 <_printf_i+0x144>
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	6861      	ldr	r1, [r4, #4]
 800a0a2:	4299      	cmp	r1, r3
 800a0a4:	bfde      	ittt	le
 800a0a6:	2330      	movle	r3, #48	@ 0x30
 800a0a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0b0:	1b92      	subs	r2, r2, r6
 800a0b2:	6122      	str	r2, [r4, #16]
 800a0b4:	f8cd a000 	str.w	sl, [sp]
 800a0b8:	464b      	mov	r3, r9
 800a0ba:	aa03      	add	r2, sp, #12
 800a0bc:	4621      	mov	r1, r4
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7ff fee6 	bl	8009e90 <_printf_common>
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d14a      	bne.n	800a15e <_printf_i+0x1f2>
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	b004      	add	sp, #16
 800a0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	f043 0320 	orr.w	r3, r3, #32
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	4833      	ldr	r0, [pc, #204]	@ (800a1a8 <_printf_i+0x23c>)
 800a0dc:	2778      	movs	r7, #120	@ 0x78
 800a0de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	6831      	ldr	r1, [r6, #0]
 800a0e6:	061f      	lsls	r7, r3, #24
 800a0e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0ec:	d402      	bmi.n	800a0f4 <_printf_i+0x188>
 800a0ee:	065f      	lsls	r7, r3, #25
 800a0f0:	bf48      	it	mi
 800a0f2:	b2ad      	uxthmi	r5, r5
 800a0f4:	6031      	str	r1, [r6, #0]
 800a0f6:	07d9      	lsls	r1, r3, #31
 800a0f8:	bf44      	itt	mi
 800a0fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fe:	6023      	strmi	r3, [r4, #0]
 800a100:	b11d      	cbz	r5, 800a10a <_printf_i+0x19e>
 800a102:	2310      	movs	r3, #16
 800a104:	e7ac      	b.n	800a060 <_printf_i+0xf4>
 800a106:	4827      	ldr	r0, [pc, #156]	@ (800a1a4 <_printf_i+0x238>)
 800a108:	e7e9      	b.n	800a0de <_printf_i+0x172>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f023 0320 	bic.w	r3, r3, #32
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	e7f6      	b.n	800a102 <_printf_i+0x196>
 800a114:	4616      	mov	r6, r2
 800a116:	e7bd      	b.n	800a094 <_printf_i+0x128>
 800a118:	6833      	ldr	r3, [r6, #0]
 800a11a:	6825      	ldr	r5, [r4, #0]
 800a11c:	6961      	ldr	r1, [r4, #20]
 800a11e:	1d18      	adds	r0, r3, #4
 800a120:	6030      	str	r0, [r6, #0]
 800a122:	062e      	lsls	r6, r5, #24
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	d501      	bpl.n	800a12c <_printf_i+0x1c0>
 800a128:	6019      	str	r1, [r3, #0]
 800a12a:	e002      	b.n	800a132 <_printf_i+0x1c6>
 800a12c:	0668      	lsls	r0, r5, #25
 800a12e:	d5fb      	bpl.n	800a128 <_printf_i+0x1bc>
 800a130:	8019      	strh	r1, [r3, #0]
 800a132:	2300      	movs	r3, #0
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	4616      	mov	r6, r2
 800a138:	e7bc      	b.n	800a0b4 <_printf_i+0x148>
 800a13a:	6833      	ldr	r3, [r6, #0]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	6032      	str	r2, [r6, #0]
 800a140:	681e      	ldr	r6, [r3, #0]
 800a142:	6862      	ldr	r2, [r4, #4]
 800a144:	2100      	movs	r1, #0
 800a146:	4630      	mov	r0, r6
 800a148:	f7f6 f842 	bl	80001d0 <memchr>
 800a14c:	b108      	cbz	r0, 800a152 <_printf_i+0x1e6>
 800a14e:	1b80      	subs	r0, r0, r6
 800a150:	6060      	str	r0, [r4, #4]
 800a152:	6863      	ldr	r3, [r4, #4]
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	2300      	movs	r3, #0
 800a158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a15c:	e7aa      	b.n	800a0b4 <_printf_i+0x148>
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	4632      	mov	r2, r6
 800a162:	4649      	mov	r1, r9
 800a164:	4640      	mov	r0, r8
 800a166:	47d0      	blx	sl
 800a168:	3001      	adds	r0, #1
 800a16a:	d0ad      	beq.n	800a0c8 <_printf_i+0x15c>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	079b      	lsls	r3, r3, #30
 800a170:	d413      	bmi.n	800a19a <_printf_i+0x22e>
 800a172:	68e0      	ldr	r0, [r4, #12]
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	4298      	cmp	r0, r3
 800a178:	bfb8      	it	lt
 800a17a:	4618      	movlt	r0, r3
 800a17c:	e7a6      	b.n	800a0cc <_printf_i+0x160>
 800a17e:	2301      	movs	r3, #1
 800a180:	4632      	mov	r2, r6
 800a182:	4649      	mov	r1, r9
 800a184:	4640      	mov	r0, r8
 800a186:	47d0      	blx	sl
 800a188:	3001      	adds	r0, #1
 800a18a:	d09d      	beq.n	800a0c8 <_printf_i+0x15c>
 800a18c:	3501      	adds	r5, #1
 800a18e:	68e3      	ldr	r3, [r4, #12]
 800a190:	9903      	ldr	r1, [sp, #12]
 800a192:	1a5b      	subs	r3, r3, r1
 800a194:	42ab      	cmp	r3, r5
 800a196:	dcf2      	bgt.n	800a17e <_printf_i+0x212>
 800a198:	e7eb      	b.n	800a172 <_printf_i+0x206>
 800a19a:	2500      	movs	r5, #0
 800a19c:	f104 0619 	add.w	r6, r4, #25
 800a1a0:	e7f5      	b.n	800a18e <_printf_i+0x222>
 800a1a2:	bf00      	nop
 800a1a4:	0800eb5a 	.word	0x0800eb5a
 800a1a8:	0800eb6b 	.word	0x0800eb6b

0800a1ac <_scanf_float>:
 800a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	b087      	sub	sp, #28
 800a1b2:	4617      	mov	r7, r2
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	688b      	ldr	r3, [r1, #8]
 800a1b8:	1e5a      	subs	r2, r3, #1
 800a1ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a1be:	bf81      	itttt	hi
 800a1c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a1c4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a1c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a1cc:	608b      	strhi	r3, [r1, #8]
 800a1ce:	680b      	ldr	r3, [r1, #0]
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	f04f 0500 	mov.w	r5, #0
 800a1d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a1da:	f842 3b1c 	str.w	r3, [r2], #28
 800a1de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	bf98      	it	ls
 800a1e8:	f04f 0b00 	movls.w	fp, #0
 800a1ec:	9201      	str	r2, [sp, #4]
 800a1ee:	4616      	mov	r6, r2
 800a1f0:	46aa      	mov	sl, r5
 800a1f2:	46a9      	mov	r9, r5
 800a1f4:	9502      	str	r5, [sp, #8]
 800a1f6:	68a2      	ldr	r2, [r4, #8]
 800a1f8:	b152      	cbz	r2, 800a210 <_scanf_float+0x64>
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b4e      	cmp	r3, #78	@ 0x4e
 800a200:	d864      	bhi.n	800a2cc <_scanf_float+0x120>
 800a202:	2b40      	cmp	r3, #64	@ 0x40
 800a204:	d83c      	bhi.n	800a280 <_scanf_float+0xd4>
 800a206:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a20a:	b2c8      	uxtb	r0, r1
 800a20c:	280e      	cmp	r0, #14
 800a20e:	d93a      	bls.n	800a286 <_scanf_float+0xda>
 800a210:	f1b9 0f00 	cmp.w	r9, #0
 800a214:	d003      	beq.n	800a21e <_scanf_float+0x72>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a222:	f1ba 0f01 	cmp.w	sl, #1
 800a226:	f200 8117 	bhi.w	800a458 <_scanf_float+0x2ac>
 800a22a:	9b01      	ldr	r3, [sp, #4]
 800a22c:	429e      	cmp	r6, r3
 800a22e:	f200 8108 	bhi.w	800a442 <_scanf_float+0x296>
 800a232:	2001      	movs	r0, #1
 800a234:	b007      	add	sp, #28
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a23e:	2a0d      	cmp	r2, #13
 800a240:	d8e6      	bhi.n	800a210 <_scanf_float+0x64>
 800a242:	a101      	add	r1, pc, #4	@ (adr r1, 800a248 <_scanf_float+0x9c>)
 800a244:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a248:	0800a38f 	.word	0x0800a38f
 800a24c:	0800a211 	.word	0x0800a211
 800a250:	0800a211 	.word	0x0800a211
 800a254:	0800a211 	.word	0x0800a211
 800a258:	0800a3ef 	.word	0x0800a3ef
 800a25c:	0800a3c7 	.word	0x0800a3c7
 800a260:	0800a211 	.word	0x0800a211
 800a264:	0800a211 	.word	0x0800a211
 800a268:	0800a39d 	.word	0x0800a39d
 800a26c:	0800a211 	.word	0x0800a211
 800a270:	0800a211 	.word	0x0800a211
 800a274:	0800a211 	.word	0x0800a211
 800a278:	0800a211 	.word	0x0800a211
 800a27c:	0800a355 	.word	0x0800a355
 800a280:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a284:	e7db      	b.n	800a23e <_scanf_float+0x92>
 800a286:	290e      	cmp	r1, #14
 800a288:	d8c2      	bhi.n	800a210 <_scanf_float+0x64>
 800a28a:	a001      	add	r0, pc, #4	@ (adr r0, 800a290 <_scanf_float+0xe4>)
 800a28c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a290:	0800a345 	.word	0x0800a345
 800a294:	0800a211 	.word	0x0800a211
 800a298:	0800a345 	.word	0x0800a345
 800a29c:	0800a3db 	.word	0x0800a3db
 800a2a0:	0800a211 	.word	0x0800a211
 800a2a4:	0800a2ed 	.word	0x0800a2ed
 800a2a8:	0800a32b 	.word	0x0800a32b
 800a2ac:	0800a32b 	.word	0x0800a32b
 800a2b0:	0800a32b 	.word	0x0800a32b
 800a2b4:	0800a32b 	.word	0x0800a32b
 800a2b8:	0800a32b 	.word	0x0800a32b
 800a2bc:	0800a32b 	.word	0x0800a32b
 800a2c0:	0800a32b 	.word	0x0800a32b
 800a2c4:	0800a32b 	.word	0x0800a32b
 800a2c8:	0800a32b 	.word	0x0800a32b
 800a2cc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a2ce:	d809      	bhi.n	800a2e4 <_scanf_float+0x138>
 800a2d0:	2b60      	cmp	r3, #96	@ 0x60
 800a2d2:	d8b2      	bhi.n	800a23a <_scanf_float+0x8e>
 800a2d4:	2b54      	cmp	r3, #84	@ 0x54
 800a2d6:	d07b      	beq.n	800a3d0 <_scanf_float+0x224>
 800a2d8:	2b59      	cmp	r3, #89	@ 0x59
 800a2da:	d199      	bne.n	800a210 <_scanf_float+0x64>
 800a2dc:	2d07      	cmp	r5, #7
 800a2de:	d197      	bne.n	800a210 <_scanf_float+0x64>
 800a2e0:	2508      	movs	r5, #8
 800a2e2:	e02c      	b.n	800a33e <_scanf_float+0x192>
 800a2e4:	2b74      	cmp	r3, #116	@ 0x74
 800a2e6:	d073      	beq.n	800a3d0 <_scanf_float+0x224>
 800a2e8:	2b79      	cmp	r3, #121	@ 0x79
 800a2ea:	e7f6      	b.n	800a2da <_scanf_float+0x12e>
 800a2ec:	6821      	ldr	r1, [r4, #0]
 800a2ee:	05c8      	lsls	r0, r1, #23
 800a2f0:	d51b      	bpl.n	800a32a <_scanf_float+0x17e>
 800a2f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a2f6:	6021      	str	r1, [r4, #0]
 800a2f8:	f109 0901 	add.w	r9, r9, #1
 800a2fc:	f1bb 0f00 	cmp.w	fp, #0
 800a300:	d003      	beq.n	800a30a <_scanf_float+0x15e>
 800a302:	3201      	adds	r2, #1
 800a304:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a308:	60a2      	str	r2, [r4, #8]
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	60a3      	str	r3, [r4, #8]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	3301      	adds	r3, #1
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3b01      	subs	r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	607b      	str	r3, [r7, #4]
 800a31e:	f340 8087 	ble.w	800a430 <_scanf_float+0x284>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	e765      	b.n	800a1f6 <_scanf_float+0x4a>
 800a32a:	eb1a 0105 	adds.w	r1, sl, r5
 800a32e:	f47f af6f 	bne.w	800a210 <_scanf_float+0x64>
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a338:	6022      	str	r2, [r4, #0]
 800a33a:	460d      	mov	r5, r1
 800a33c:	468a      	mov	sl, r1
 800a33e:	f806 3b01 	strb.w	r3, [r6], #1
 800a342:	e7e2      	b.n	800a30a <_scanf_float+0x15e>
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	0610      	lsls	r0, r2, #24
 800a348:	f57f af62 	bpl.w	800a210 <_scanf_float+0x64>
 800a34c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a350:	6022      	str	r2, [r4, #0]
 800a352:	e7f4      	b.n	800a33e <_scanf_float+0x192>
 800a354:	f1ba 0f00 	cmp.w	sl, #0
 800a358:	d10e      	bne.n	800a378 <_scanf_float+0x1cc>
 800a35a:	f1b9 0f00 	cmp.w	r9, #0
 800a35e:	d10e      	bne.n	800a37e <_scanf_float+0x1d2>
 800a360:	6822      	ldr	r2, [r4, #0]
 800a362:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a366:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a36a:	d108      	bne.n	800a37e <_scanf_float+0x1d2>
 800a36c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a370:	6022      	str	r2, [r4, #0]
 800a372:	f04f 0a01 	mov.w	sl, #1
 800a376:	e7e2      	b.n	800a33e <_scanf_float+0x192>
 800a378:	f1ba 0f02 	cmp.w	sl, #2
 800a37c:	d055      	beq.n	800a42a <_scanf_float+0x27e>
 800a37e:	2d01      	cmp	r5, #1
 800a380:	d002      	beq.n	800a388 <_scanf_float+0x1dc>
 800a382:	2d04      	cmp	r5, #4
 800a384:	f47f af44 	bne.w	800a210 <_scanf_float+0x64>
 800a388:	3501      	adds	r5, #1
 800a38a:	b2ed      	uxtb	r5, r5
 800a38c:	e7d7      	b.n	800a33e <_scanf_float+0x192>
 800a38e:	f1ba 0f01 	cmp.w	sl, #1
 800a392:	f47f af3d 	bne.w	800a210 <_scanf_float+0x64>
 800a396:	f04f 0a02 	mov.w	sl, #2
 800a39a:	e7d0      	b.n	800a33e <_scanf_float+0x192>
 800a39c:	b97d      	cbnz	r5, 800a3be <_scanf_float+0x212>
 800a39e:	f1b9 0f00 	cmp.w	r9, #0
 800a3a2:	f47f af38 	bne.w	800a216 <_scanf_float+0x6a>
 800a3a6:	6822      	ldr	r2, [r4, #0]
 800a3a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3b0:	f040 8108 	bne.w	800a5c4 <_scanf_float+0x418>
 800a3b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3b8:	6022      	str	r2, [r4, #0]
 800a3ba:	2501      	movs	r5, #1
 800a3bc:	e7bf      	b.n	800a33e <_scanf_float+0x192>
 800a3be:	2d03      	cmp	r5, #3
 800a3c0:	d0e2      	beq.n	800a388 <_scanf_float+0x1dc>
 800a3c2:	2d05      	cmp	r5, #5
 800a3c4:	e7de      	b.n	800a384 <_scanf_float+0x1d8>
 800a3c6:	2d02      	cmp	r5, #2
 800a3c8:	f47f af22 	bne.w	800a210 <_scanf_float+0x64>
 800a3cc:	2503      	movs	r5, #3
 800a3ce:	e7b6      	b.n	800a33e <_scanf_float+0x192>
 800a3d0:	2d06      	cmp	r5, #6
 800a3d2:	f47f af1d 	bne.w	800a210 <_scanf_float+0x64>
 800a3d6:	2507      	movs	r5, #7
 800a3d8:	e7b1      	b.n	800a33e <_scanf_float+0x192>
 800a3da:	6822      	ldr	r2, [r4, #0]
 800a3dc:	0591      	lsls	r1, r2, #22
 800a3de:	f57f af17 	bpl.w	800a210 <_scanf_float+0x64>
 800a3e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a3e6:	6022      	str	r2, [r4, #0]
 800a3e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3ec:	e7a7      	b.n	800a33e <_scanf_float+0x192>
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a3f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a3f8:	d006      	beq.n	800a408 <_scanf_float+0x25c>
 800a3fa:	0550      	lsls	r0, r2, #21
 800a3fc:	f57f af08 	bpl.w	800a210 <_scanf_float+0x64>
 800a400:	f1b9 0f00 	cmp.w	r9, #0
 800a404:	f000 80de 	beq.w	800a5c4 <_scanf_float+0x418>
 800a408:	0591      	lsls	r1, r2, #22
 800a40a:	bf58      	it	pl
 800a40c:	9902      	ldrpl	r1, [sp, #8]
 800a40e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a412:	bf58      	it	pl
 800a414:	eba9 0101 	subpl.w	r1, r9, r1
 800a418:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a41c:	bf58      	it	pl
 800a41e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a422:	6022      	str	r2, [r4, #0]
 800a424:	f04f 0900 	mov.w	r9, #0
 800a428:	e789      	b.n	800a33e <_scanf_float+0x192>
 800a42a:	f04f 0a03 	mov.w	sl, #3
 800a42e:	e786      	b.n	800a33e <_scanf_float+0x192>
 800a430:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a434:	4639      	mov	r1, r7
 800a436:	4640      	mov	r0, r8
 800a438:	4798      	blx	r3
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f43f aedb 	beq.w	800a1f6 <_scanf_float+0x4a>
 800a440:	e6e6      	b.n	800a210 <_scanf_float+0x64>
 800a442:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a44a:	463a      	mov	r2, r7
 800a44c:	4640      	mov	r0, r8
 800a44e:	4798      	blx	r3
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	3b01      	subs	r3, #1
 800a454:	6123      	str	r3, [r4, #16]
 800a456:	e6e8      	b.n	800a22a <_scanf_float+0x7e>
 800a458:	1e6b      	subs	r3, r5, #1
 800a45a:	2b06      	cmp	r3, #6
 800a45c:	d824      	bhi.n	800a4a8 <_scanf_float+0x2fc>
 800a45e:	2d02      	cmp	r5, #2
 800a460:	d836      	bhi.n	800a4d0 <_scanf_float+0x324>
 800a462:	9b01      	ldr	r3, [sp, #4]
 800a464:	429e      	cmp	r6, r3
 800a466:	f67f aee4 	bls.w	800a232 <_scanf_float+0x86>
 800a46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a46e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a472:	463a      	mov	r2, r7
 800a474:	4640      	mov	r0, r8
 800a476:	4798      	blx	r3
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	e7f0      	b.n	800a462 <_scanf_float+0x2b6>
 800a480:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a484:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a488:	463a      	mov	r2, r7
 800a48a:	4640      	mov	r0, r8
 800a48c:	4798      	blx	r3
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	3b01      	subs	r3, #1
 800a492:	6123      	str	r3, [r4, #16]
 800a494:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a498:	fa5f fa8a 	uxtb.w	sl, sl
 800a49c:	f1ba 0f02 	cmp.w	sl, #2
 800a4a0:	d1ee      	bne.n	800a480 <_scanf_float+0x2d4>
 800a4a2:	3d03      	subs	r5, #3
 800a4a4:	b2ed      	uxtb	r5, r5
 800a4a6:	1b76      	subs	r6, r6, r5
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	05da      	lsls	r2, r3, #23
 800a4ac:	d530      	bpl.n	800a510 <_scanf_float+0x364>
 800a4ae:	055b      	lsls	r3, r3, #21
 800a4b0:	d511      	bpl.n	800a4d6 <_scanf_float+0x32a>
 800a4b2:	9b01      	ldr	r3, [sp, #4]
 800a4b4:	429e      	cmp	r6, r3
 800a4b6:	f67f aebc 	bls.w	800a232 <_scanf_float+0x86>
 800a4ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4c2:	463a      	mov	r2, r7
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	4798      	blx	r3
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	6123      	str	r3, [r4, #16]
 800a4ce:	e7f0      	b.n	800a4b2 <_scanf_float+0x306>
 800a4d0:	46aa      	mov	sl, r5
 800a4d2:	46b3      	mov	fp, r6
 800a4d4:	e7de      	b.n	800a494 <_scanf_float+0x2e8>
 800a4d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	2965      	cmp	r1, #101	@ 0x65
 800a4de:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a4e6:	6123      	str	r3, [r4, #16]
 800a4e8:	d00c      	beq.n	800a504 <_scanf_float+0x358>
 800a4ea:	2945      	cmp	r1, #69	@ 0x45
 800a4ec:	d00a      	beq.n	800a504 <_scanf_float+0x358>
 800a4ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4f2:	463a      	mov	r2, r7
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	4798      	blx	r3
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	1eb5      	subs	r5, r6, #2
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a508:	463a      	mov	r2, r7
 800a50a:	4640      	mov	r0, r8
 800a50c:	4798      	blx	r3
 800a50e:	462e      	mov	r6, r5
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	f012 0210 	ands.w	r2, r2, #16
 800a516:	d001      	beq.n	800a51c <_scanf_float+0x370>
 800a518:	2000      	movs	r0, #0
 800a51a:	e68b      	b.n	800a234 <_scanf_float+0x88>
 800a51c:	7032      	strb	r2, [r6, #0]
 800a51e:	6823      	ldr	r3, [r4, #0]
 800a520:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a528:	d11c      	bne.n	800a564 <_scanf_float+0x3b8>
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	454b      	cmp	r3, r9
 800a52e:	eba3 0209 	sub.w	r2, r3, r9
 800a532:	d123      	bne.n	800a57c <_scanf_float+0x3d0>
 800a534:	9901      	ldr	r1, [sp, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	4640      	mov	r0, r8
 800a53a:	f7ff f9cd 	bl	80098d8 <_strtod_r>
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	6821      	ldr	r1, [r4, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f011 0f02 	tst.w	r1, #2
 800a548:	ec57 6b10 	vmov	r6, r7, d0
 800a54c:	f103 0204 	add.w	r2, r3, #4
 800a550:	d01f      	beq.n	800a592 <_scanf_float+0x3e6>
 800a552:	9903      	ldr	r1, [sp, #12]
 800a554:	600a      	str	r2, [r1, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	e9c3 6700 	strd	r6, r7, [r3]
 800a55c:	68e3      	ldr	r3, [r4, #12]
 800a55e:	3301      	adds	r3, #1
 800a560:	60e3      	str	r3, [r4, #12]
 800a562:	e7d9      	b.n	800a518 <_scanf_float+0x36c>
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0e4      	beq.n	800a534 <_scanf_float+0x388>
 800a56a:	9905      	ldr	r1, [sp, #20]
 800a56c:	230a      	movs	r3, #10
 800a56e:	3101      	adds	r1, #1
 800a570:	4640      	mov	r0, r8
 800a572:	f002 fb91 	bl	800cc98 <_strtol_r>
 800a576:	9b04      	ldr	r3, [sp, #16]
 800a578:	9e05      	ldr	r6, [sp, #20]
 800a57a:	1ac2      	subs	r2, r0, r3
 800a57c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a580:	429e      	cmp	r6, r3
 800a582:	bf28      	it	cs
 800a584:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a588:	4910      	ldr	r1, [pc, #64]	@ (800a5cc <_scanf_float+0x420>)
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 f988 	bl	800a8a0 <siprintf>
 800a590:	e7d0      	b.n	800a534 <_scanf_float+0x388>
 800a592:	f011 0f04 	tst.w	r1, #4
 800a596:	9903      	ldr	r1, [sp, #12]
 800a598:	600a      	str	r2, [r1, #0]
 800a59a:	d1dc      	bne.n	800a556 <_scanf_float+0x3aa>
 800a59c:	681d      	ldr	r5, [r3, #0]
 800a59e:	4632      	mov	r2, r6
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	f7f6 fac1 	bl	8000b2c <__aeabi_dcmpun>
 800a5aa:	b128      	cbz	r0, 800a5b8 <_scanf_float+0x40c>
 800a5ac:	4808      	ldr	r0, [pc, #32]	@ (800a5d0 <_scanf_float+0x424>)
 800a5ae:	f000 fb8b 	bl	800acc8 <nanf>
 800a5b2:	ed85 0a00 	vstr	s0, [r5]
 800a5b6:	e7d1      	b.n	800a55c <_scanf_float+0x3b0>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fb14 	bl	8000be8 <__aeabi_d2f>
 800a5c0:	6028      	str	r0, [r5, #0]
 800a5c2:	e7cb      	b.n	800a55c <_scanf_float+0x3b0>
 800a5c4:	f04f 0900 	mov.w	r9, #0
 800a5c8:	e629      	b.n	800a21e <_scanf_float+0x72>
 800a5ca:	bf00      	nop
 800a5cc:	0800eb7c 	.word	0x0800eb7c
 800a5d0:	0800ec35 	.word	0x0800ec35

0800a5d4 <std>:
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	4604      	mov	r4, r0
 800a5da:	e9c0 3300 	strd	r3, r3, [r0]
 800a5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5e2:	6083      	str	r3, [r0, #8]
 800a5e4:	8181      	strh	r1, [r0, #12]
 800a5e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5e8:	81c2      	strh	r2, [r0, #14]
 800a5ea:	6183      	str	r3, [r0, #24]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	2208      	movs	r2, #8
 800a5f0:	305c      	adds	r0, #92	@ 0x5c
 800a5f2:	f000 fa4d 	bl	800aa90 <memset>
 800a5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a62c <std+0x58>)
 800a5f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a630 <std+0x5c>)
 800a5fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a634 <std+0x60>)
 800a600:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a602:	4b0d      	ldr	r3, [pc, #52]	@ (800a638 <std+0x64>)
 800a604:	6323      	str	r3, [r4, #48]	@ 0x30
 800a606:	4b0d      	ldr	r3, [pc, #52]	@ (800a63c <std+0x68>)
 800a608:	6224      	str	r4, [r4, #32]
 800a60a:	429c      	cmp	r4, r3
 800a60c:	d006      	beq.n	800a61c <std+0x48>
 800a60e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a612:	4294      	cmp	r4, r2
 800a614:	d002      	beq.n	800a61c <std+0x48>
 800a616:	33d0      	adds	r3, #208	@ 0xd0
 800a618:	429c      	cmp	r4, r3
 800a61a:	d105      	bne.n	800a628 <std+0x54>
 800a61c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a624:	f000 bb34 	b.w	800ac90 <__retarget_lock_init_recursive>
 800a628:	bd10      	pop	{r4, pc}
 800a62a:	bf00      	nop
 800a62c:	0800a8e1 	.word	0x0800a8e1
 800a630:	0800a903 	.word	0x0800a903
 800a634:	0800a93b 	.word	0x0800a93b
 800a638:	0800a95f 	.word	0x0800a95f
 800a63c:	20000818 	.word	0x20000818

0800a640 <stdio_exit_handler>:
 800a640:	4a02      	ldr	r2, [pc, #8]	@ (800a64c <stdio_exit_handler+0xc>)
 800a642:	4903      	ldr	r1, [pc, #12]	@ (800a650 <stdio_exit_handler+0x10>)
 800a644:	4803      	ldr	r0, [pc, #12]	@ (800a654 <stdio_exit_handler+0x14>)
 800a646:	f000 b869 	b.w	800a71c <_fwalk_sglue>
 800a64a:	bf00      	nop
 800a64c:	2000008c 	.word	0x2000008c
 800a650:	0800d2f1 	.word	0x0800d2f1
 800a654:	20000208 	.word	0x20000208

0800a658 <cleanup_stdio>:
 800a658:	6841      	ldr	r1, [r0, #4]
 800a65a:	4b0c      	ldr	r3, [pc, #48]	@ (800a68c <cleanup_stdio+0x34>)
 800a65c:	4299      	cmp	r1, r3
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	d001      	beq.n	800a668 <cleanup_stdio+0x10>
 800a664:	f002 fe44 	bl	800d2f0 <_fflush_r>
 800a668:	68a1      	ldr	r1, [r4, #8]
 800a66a:	4b09      	ldr	r3, [pc, #36]	@ (800a690 <cleanup_stdio+0x38>)
 800a66c:	4299      	cmp	r1, r3
 800a66e:	d002      	beq.n	800a676 <cleanup_stdio+0x1e>
 800a670:	4620      	mov	r0, r4
 800a672:	f002 fe3d 	bl	800d2f0 <_fflush_r>
 800a676:	68e1      	ldr	r1, [r4, #12]
 800a678:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <cleanup_stdio+0x3c>)
 800a67a:	4299      	cmp	r1, r3
 800a67c:	d004      	beq.n	800a688 <cleanup_stdio+0x30>
 800a67e:	4620      	mov	r0, r4
 800a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a684:	f002 be34 	b.w	800d2f0 <_fflush_r>
 800a688:	bd10      	pop	{r4, pc}
 800a68a:	bf00      	nop
 800a68c:	20000818 	.word	0x20000818
 800a690:	20000880 	.word	0x20000880
 800a694:	200008e8 	.word	0x200008e8

0800a698 <global_stdio_init.part.0>:
 800a698:	b510      	push	{r4, lr}
 800a69a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c8 <global_stdio_init.part.0+0x30>)
 800a69c:	4c0b      	ldr	r4, [pc, #44]	@ (800a6cc <global_stdio_init.part.0+0x34>)
 800a69e:	4a0c      	ldr	r2, [pc, #48]	@ (800a6d0 <global_stdio_init.part.0+0x38>)
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2104      	movs	r1, #4
 800a6a8:	f7ff ff94 	bl	800a5d4 <std>
 800a6ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	2109      	movs	r1, #9
 800a6b4:	f7ff ff8e 	bl	800a5d4 <std>
 800a6b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6bc:	2202      	movs	r2, #2
 800a6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6c2:	2112      	movs	r1, #18
 800a6c4:	f7ff bf86 	b.w	800a5d4 <std>
 800a6c8:	20000950 	.word	0x20000950
 800a6cc:	20000818 	.word	0x20000818
 800a6d0:	0800a641 	.word	0x0800a641

0800a6d4 <__sfp_lock_acquire>:
 800a6d4:	4801      	ldr	r0, [pc, #4]	@ (800a6dc <__sfp_lock_acquire+0x8>)
 800a6d6:	f000 badc 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800a6da:	bf00      	nop
 800a6dc:	20000959 	.word	0x20000959

0800a6e0 <__sfp_lock_release>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	@ (800a6e8 <__sfp_lock_release+0x8>)
 800a6e2:	f000 bad7 	b.w	800ac94 <__retarget_lock_release_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	20000959 	.word	0x20000959

0800a6ec <__sinit>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	f7ff fff0 	bl	800a6d4 <__sfp_lock_acquire>
 800a6f4:	6a23      	ldr	r3, [r4, #32]
 800a6f6:	b11b      	cbz	r3, 800a700 <__sinit+0x14>
 800a6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6fc:	f7ff bff0 	b.w	800a6e0 <__sfp_lock_release>
 800a700:	4b04      	ldr	r3, [pc, #16]	@ (800a714 <__sinit+0x28>)
 800a702:	6223      	str	r3, [r4, #32]
 800a704:	4b04      	ldr	r3, [pc, #16]	@ (800a718 <__sinit+0x2c>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1f5      	bne.n	800a6f8 <__sinit+0xc>
 800a70c:	f7ff ffc4 	bl	800a698 <global_stdio_init.part.0>
 800a710:	e7f2      	b.n	800a6f8 <__sinit+0xc>
 800a712:	bf00      	nop
 800a714:	0800a659 	.word	0x0800a659
 800a718:	20000950 	.word	0x20000950

0800a71c <_fwalk_sglue>:
 800a71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a720:	4607      	mov	r7, r0
 800a722:	4688      	mov	r8, r1
 800a724:	4614      	mov	r4, r2
 800a726:	2600      	movs	r6, #0
 800a728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a72c:	f1b9 0901 	subs.w	r9, r9, #1
 800a730:	d505      	bpl.n	800a73e <_fwalk_sglue+0x22>
 800a732:	6824      	ldr	r4, [r4, #0]
 800a734:	2c00      	cmp	r4, #0
 800a736:	d1f7      	bne.n	800a728 <_fwalk_sglue+0xc>
 800a738:	4630      	mov	r0, r6
 800a73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a73e:	89ab      	ldrh	r3, [r5, #12]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d907      	bls.n	800a754 <_fwalk_sglue+0x38>
 800a744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a748:	3301      	adds	r3, #1
 800a74a:	d003      	beq.n	800a754 <_fwalk_sglue+0x38>
 800a74c:	4629      	mov	r1, r5
 800a74e:	4638      	mov	r0, r7
 800a750:	47c0      	blx	r8
 800a752:	4306      	orrs	r6, r0
 800a754:	3568      	adds	r5, #104	@ 0x68
 800a756:	e7e9      	b.n	800a72c <_fwalk_sglue+0x10>

0800a758 <iprintf>:
 800a758:	b40f      	push	{r0, r1, r2, r3}
 800a75a:	b507      	push	{r0, r1, r2, lr}
 800a75c:	4906      	ldr	r1, [pc, #24]	@ (800a778 <iprintf+0x20>)
 800a75e:	ab04      	add	r3, sp, #16
 800a760:	6808      	ldr	r0, [r1, #0]
 800a762:	f853 2b04 	ldr.w	r2, [r3], #4
 800a766:	6881      	ldr	r1, [r0, #8]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	f002 fc25 	bl	800cfb8 <_vfiprintf_r>
 800a76e:	b003      	add	sp, #12
 800a770:	f85d eb04 	ldr.w	lr, [sp], #4
 800a774:	b004      	add	sp, #16
 800a776:	4770      	bx	lr
 800a778:	20000204 	.word	0x20000204

0800a77c <_puts_r>:
 800a77c:	6a03      	ldr	r3, [r0, #32]
 800a77e:	b570      	push	{r4, r5, r6, lr}
 800a780:	6884      	ldr	r4, [r0, #8]
 800a782:	4605      	mov	r5, r0
 800a784:	460e      	mov	r6, r1
 800a786:	b90b      	cbnz	r3, 800a78c <_puts_r+0x10>
 800a788:	f7ff ffb0 	bl	800a6ec <__sinit>
 800a78c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a78e:	07db      	lsls	r3, r3, #31
 800a790:	d405      	bmi.n	800a79e <_puts_r+0x22>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	0598      	lsls	r0, r3, #22
 800a796:	d402      	bmi.n	800a79e <_puts_r+0x22>
 800a798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a79a:	f000 fa7a 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	0719      	lsls	r1, r3, #28
 800a7a2:	d502      	bpl.n	800a7aa <_puts_r+0x2e>
 800a7a4:	6923      	ldr	r3, [r4, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d135      	bne.n	800a816 <_puts_r+0x9a>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f000 f919 	bl	800a9e4 <__swsetup_r>
 800a7b2:	b380      	cbz	r0, 800a816 <_puts_r+0x9a>
 800a7b4:	f04f 35ff 	mov.w	r5, #4294967295
 800a7b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7ba:	07da      	lsls	r2, r3, #31
 800a7bc:	d405      	bmi.n	800a7ca <_puts_r+0x4e>
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	059b      	lsls	r3, r3, #22
 800a7c2:	d402      	bmi.n	800a7ca <_puts_r+0x4e>
 800a7c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7c6:	f000 fa65 	bl	800ac94 <__retarget_lock_release_recursive>
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	da04      	bge.n	800a7dc <_puts_r+0x60>
 800a7d2:	69a2      	ldr	r2, [r4, #24]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	dc17      	bgt.n	800a808 <_puts_r+0x8c>
 800a7d8:	290a      	cmp	r1, #10
 800a7da:	d015      	beq.n	800a808 <_puts_r+0x8c>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	1c5a      	adds	r2, r3, #1
 800a7e0:	6022      	str	r2, [r4, #0]
 800a7e2:	7019      	strb	r1, [r3, #0]
 800a7e4:	68a3      	ldr	r3, [r4, #8]
 800a7e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	2900      	cmp	r1, #0
 800a7f0:	d1ed      	bne.n	800a7ce <_puts_r+0x52>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	da11      	bge.n	800a81a <_puts_r+0x9e>
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	210a      	movs	r1, #10
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	f000 f8b3 	bl	800a966 <__swbuf_r>
 800a800:	3001      	adds	r0, #1
 800a802:	d0d7      	beq.n	800a7b4 <_puts_r+0x38>
 800a804:	250a      	movs	r5, #10
 800a806:	e7d7      	b.n	800a7b8 <_puts_r+0x3c>
 800a808:	4622      	mov	r2, r4
 800a80a:	4628      	mov	r0, r5
 800a80c:	f000 f8ab 	bl	800a966 <__swbuf_r>
 800a810:	3001      	adds	r0, #1
 800a812:	d1e7      	bne.n	800a7e4 <_puts_r+0x68>
 800a814:	e7ce      	b.n	800a7b4 <_puts_r+0x38>
 800a816:	3e01      	subs	r6, #1
 800a818:	e7e4      	b.n	800a7e4 <_puts_r+0x68>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	220a      	movs	r2, #10
 800a822:	701a      	strb	r2, [r3, #0]
 800a824:	e7ee      	b.n	800a804 <_puts_r+0x88>
	...

0800a828 <puts>:
 800a828:	4b02      	ldr	r3, [pc, #8]	@ (800a834 <puts+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f7ff bfa5 	b.w	800a77c <_puts_r>
 800a832:	bf00      	nop
 800a834:	20000204 	.word	0x20000204

0800a838 <sniprintf>:
 800a838:	b40c      	push	{r2, r3}
 800a83a:	b530      	push	{r4, r5, lr}
 800a83c:	4b17      	ldr	r3, [pc, #92]	@ (800a89c <sniprintf+0x64>)
 800a83e:	1e0c      	subs	r4, r1, #0
 800a840:	681d      	ldr	r5, [r3, #0]
 800a842:	b09d      	sub	sp, #116	@ 0x74
 800a844:	da08      	bge.n	800a858 <sniprintf+0x20>
 800a846:	238b      	movs	r3, #139	@ 0x8b
 800a848:	602b      	str	r3, [r5, #0]
 800a84a:	f04f 30ff 	mov.w	r0, #4294967295
 800a84e:	b01d      	add	sp, #116	@ 0x74
 800a850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a854:	b002      	add	sp, #8
 800a856:	4770      	bx	lr
 800a858:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a85c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a860:	bf14      	ite	ne
 800a862:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a866:	4623      	moveq	r3, r4
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	9307      	str	r3, [sp, #28]
 800a86c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a870:	9002      	str	r0, [sp, #8]
 800a872:	9006      	str	r0, [sp, #24]
 800a874:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a878:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a87a:	ab21      	add	r3, sp, #132	@ 0x84
 800a87c:	a902      	add	r1, sp, #8
 800a87e:	4628      	mov	r0, r5
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	f002 fa73 	bl	800cd6c <_svfiprintf_r>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	bfbc      	itt	lt
 800a88a:	238b      	movlt	r3, #139	@ 0x8b
 800a88c:	602b      	strlt	r3, [r5, #0]
 800a88e:	2c00      	cmp	r4, #0
 800a890:	d0dd      	beq.n	800a84e <sniprintf+0x16>
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	e7d9      	b.n	800a84e <sniprintf+0x16>
 800a89a:	bf00      	nop
 800a89c:	20000204 	.word	0x20000204

0800a8a0 <siprintf>:
 800a8a0:	b40e      	push	{r1, r2, r3}
 800a8a2:	b500      	push	{lr}
 800a8a4:	b09c      	sub	sp, #112	@ 0x70
 800a8a6:	ab1d      	add	r3, sp, #116	@ 0x74
 800a8a8:	9002      	str	r0, [sp, #8]
 800a8aa:	9006      	str	r0, [sp, #24]
 800a8ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a8b0:	4809      	ldr	r0, [pc, #36]	@ (800a8d8 <siprintf+0x38>)
 800a8b2:	9107      	str	r1, [sp, #28]
 800a8b4:	9104      	str	r1, [sp, #16]
 800a8b6:	4909      	ldr	r1, [pc, #36]	@ (800a8dc <siprintf+0x3c>)
 800a8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8bc:	9105      	str	r1, [sp, #20]
 800a8be:	6800      	ldr	r0, [r0, #0]
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	a902      	add	r1, sp, #8
 800a8c4:	f002 fa52 	bl	800cd6c <_svfiprintf_r>
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	b01c      	add	sp, #112	@ 0x70
 800a8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8d4:	b003      	add	sp, #12
 800a8d6:	4770      	bx	lr
 800a8d8:	20000204 	.word	0x20000204
 800a8dc:	ffff0208 	.word	0xffff0208

0800a8e0 <__sread>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e8:	f000 f984 	bl	800abf4 <_read_r>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	bfab      	itete	ge
 800a8f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a8f4:	181b      	addge	r3, r3, r0
 800a8f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8fa:	bfac      	ite	ge
 800a8fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8fe:	81a3      	strhlt	r3, [r4, #12]
 800a900:	bd10      	pop	{r4, pc}

0800a902 <__swrite>:
 800a902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a906:	461f      	mov	r7, r3
 800a908:	898b      	ldrh	r3, [r1, #12]
 800a90a:	05db      	lsls	r3, r3, #23
 800a90c:	4605      	mov	r5, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	4616      	mov	r6, r2
 800a912:	d505      	bpl.n	800a920 <__swrite+0x1e>
 800a914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a918:	2302      	movs	r3, #2
 800a91a:	2200      	movs	r2, #0
 800a91c:	f000 f958 	bl	800abd0 <_lseek_r>
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	4632      	mov	r2, r6
 800a92e:	463b      	mov	r3, r7
 800a930:	4628      	mov	r0, r5
 800a932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a936:	f000 b96f 	b.w	800ac18 <_write_r>

0800a93a <__sseek>:
 800a93a:	b510      	push	{r4, lr}
 800a93c:	460c      	mov	r4, r1
 800a93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a942:	f000 f945 	bl	800abd0 <_lseek_r>
 800a946:	1c43      	adds	r3, r0, #1
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	bf15      	itete	ne
 800a94c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a94e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a952:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a956:	81a3      	strheq	r3, [r4, #12]
 800a958:	bf18      	it	ne
 800a95a:	81a3      	strhne	r3, [r4, #12]
 800a95c:	bd10      	pop	{r4, pc}

0800a95e <__sclose>:
 800a95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a962:	f000 b925 	b.w	800abb0 <_close_r>

0800a966 <__swbuf_r>:
 800a966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a968:	460e      	mov	r6, r1
 800a96a:	4614      	mov	r4, r2
 800a96c:	4605      	mov	r5, r0
 800a96e:	b118      	cbz	r0, 800a978 <__swbuf_r+0x12>
 800a970:	6a03      	ldr	r3, [r0, #32]
 800a972:	b90b      	cbnz	r3, 800a978 <__swbuf_r+0x12>
 800a974:	f7ff feba 	bl	800a6ec <__sinit>
 800a978:	69a3      	ldr	r3, [r4, #24]
 800a97a:	60a3      	str	r3, [r4, #8]
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	071a      	lsls	r2, r3, #28
 800a980:	d501      	bpl.n	800a986 <__swbuf_r+0x20>
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	b943      	cbnz	r3, 800a998 <__swbuf_r+0x32>
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 f82b 	bl	800a9e4 <__swsetup_r>
 800a98e:	b118      	cbz	r0, 800a998 <__swbuf_r+0x32>
 800a990:	f04f 37ff 	mov.w	r7, #4294967295
 800a994:	4638      	mov	r0, r7
 800a996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	6922      	ldr	r2, [r4, #16]
 800a99c:	1a98      	subs	r0, r3, r2
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	b2f6      	uxtb	r6, r6
 800a9a2:	4283      	cmp	r3, r0
 800a9a4:	4637      	mov	r7, r6
 800a9a6:	dc05      	bgt.n	800a9b4 <__swbuf_r+0x4e>
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f002 fca0 	bl	800d2f0 <_fflush_r>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d1ed      	bne.n	800a990 <__swbuf_r+0x2a>
 800a9b4:	68a3      	ldr	r3, [r4, #8]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	60a3      	str	r3, [r4, #8]
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	6022      	str	r2, [r4, #0]
 800a9c0:	701e      	strb	r6, [r3, #0]
 800a9c2:	6962      	ldr	r2, [r4, #20]
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d004      	beq.n	800a9d4 <__swbuf_r+0x6e>
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	07db      	lsls	r3, r3, #31
 800a9ce:	d5e1      	bpl.n	800a994 <__swbuf_r+0x2e>
 800a9d0:	2e0a      	cmp	r6, #10
 800a9d2:	d1df      	bne.n	800a994 <__swbuf_r+0x2e>
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f002 fc8a 	bl	800d2f0 <_fflush_r>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d0d9      	beq.n	800a994 <__swbuf_r+0x2e>
 800a9e0:	e7d6      	b.n	800a990 <__swbuf_r+0x2a>
	...

0800a9e4 <__swsetup_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4b29      	ldr	r3, [pc, #164]	@ (800aa8c <__swsetup_r+0xa8>)
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	6818      	ldr	r0, [r3, #0]
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	b118      	cbz	r0, 800a9f8 <__swsetup_r+0x14>
 800a9f0:	6a03      	ldr	r3, [r0, #32]
 800a9f2:	b90b      	cbnz	r3, 800a9f8 <__swsetup_r+0x14>
 800a9f4:	f7ff fe7a 	bl	800a6ec <__sinit>
 800a9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fc:	0719      	lsls	r1, r3, #28
 800a9fe:	d422      	bmi.n	800aa46 <__swsetup_r+0x62>
 800aa00:	06da      	lsls	r2, r3, #27
 800aa02:	d407      	bmi.n	800aa14 <__swsetup_r+0x30>
 800aa04:	2209      	movs	r2, #9
 800aa06:	602a      	str	r2, [r5, #0]
 800aa08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0c:	81a3      	strh	r3, [r4, #12]
 800aa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa12:	e033      	b.n	800aa7c <__swsetup_r+0x98>
 800aa14:	0758      	lsls	r0, r3, #29
 800aa16:	d512      	bpl.n	800aa3e <__swsetup_r+0x5a>
 800aa18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa1a:	b141      	cbz	r1, 800aa2e <__swsetup_r+0x4a>
 800aa1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa20:	4299      	cmp	r1, r3
 800aa22:	d002      	beq.n	800aa2a <__swsetup_r+0x46>
 800aa24:	4628      	mov	r0, r5
 800aa26:	f000 ffbf 	bl	800b9a8 <_free_r>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	2300      	movs	r3, #0
 800aa38:	6063      	str	r3, [r4, #4]
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f043 0308 	orr.w	r3, r3, #8
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	b94b      	cbnz	r3, 800aa5e <__swsetup_r+0x7a>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa54:	d003      	beq.n	800aa5e <__swsetup_r+0x7a>
 800aa56:	4621      	mov	r1, r4
 800aa58:	4628      	mov	r0, r5
 800aa5a:	f002 fca9 	bl	800d3b0 <__smakebuf_r>
 800aa5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa62:	f013 0201 	ands.w	r2, r3, #1
 800aa66:	d00a      	beq.n	800aa7e <__swsetup_r+0x9a>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	60a2      	str	r2, [r4, #8]
 800aa6c:	6962      	ldr	r2, [r4, #20]
 800aa6e:	4252      	negs	r2, r2
 800aa70:	61a2      	str	r2, [r4, #24]
 800aa72:	6922      	ldr	r2, [r4, #16]
 800aa74:	b942      	cbnz	r2, 800aa88 <__swsetup_r+0xa4>
 800aa76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa7a:	d1c5      	bne.n	800aa08 <__swsetup_r+0x24>
 800aa7c:	bd38      	pop	{r3, r4, r5, pc}
 800aa7e:	0799      	lsls	r1, r3, #30
 800aa80:	bf58      	it	pl
 800aa82:	6962      	ldrpl	r2, [r4, #20]
 800aa84:	60a2      	str	r2, [r4, #8]
 800aa86:	e7f4      	b.n	800aa72 <__swsetup_r+0x8e>
 800aa88:	2000      	movs	r0, #0
 800aa8a:	e7f7      	b.n	800aa7c <__swsetup_r+0x98>
 800aa8c:	20000204 	.word	0x20000204

0800aa90 <memset>:
 800aa90:	4402      	add	r2, r0
 800aa92:	4603      	mov	r3, r0
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d100      	bne.n	800aa9a <memset+0xa>
 800aa98:	4770      	bx	lr
 800aa9a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa9e:	e7f9      	b.n	800aa94 <memset+0x4>

0800aaa0 <strncmp>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	b16a      	cbz	r2, 800aac0 <strncmp+0x20>
 800aaa4:	3901      	subs	r1, #1
 800aaa6:	1884      	adds	r4, r0, r2
 800aaa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d103      	bne.n	800aabc <strncmp+0x1c>
 800aab4:	42a0      	cmp	r0, r4
 800aab6:	d001      	beq.n	800aabc <strncmp+0x1c>
 800aab8:	2a00      	cmp	r2, #0
 800aaba:	d1f5      	bne.n	800aaa8 <strncmp+0x8>
 800aabc:	1ad0      	subs	r0, r2, r3
 800aabe:	bd10      	pop	{r4, pc}
 800aac0:	4610      	mov	r0, r2
 800aac2:	e7fc      	b.n	800aabe <strncmp+0x1e>

0800aac4 <strtok>:
 800aac4:	4b16      	ldr	r3, [pc, #88]	@ (800ab20 <strtok+0x5c>)
 800aac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	681f      	ldr	r7, [r3, #0]
 800aacc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aace:	4605      	mov	r5, r0
 800aad0:	460e      	mov	r6, r1
 800aad2:	b9ec      	cbnz	r4, 800ab10 <strtok+0x4c>
 800aad4:	2050      	movs	r0, #80	@ 0x50
 800aad6:	f001 faeb 	bl	800c0b0 <malloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	6478      	str	r0, [r7, #68]	@ 0x44
 800aade:	b920      	cbnz	r0, 800aaea <strtok+0x26>
 800aae0:	4b10      	ldr	r3, [pc, #64]	@ (800ab24 <strtok+0x60>)
 800aae2:	4811      	ldr	r0, [pc, #68]	@ (800ab28 <strtok+0x64>)
 800aae4:	215b      	movs	r1, #91	@ 0x5b
 800aae6:	f000 f8f5 	bl	800acd4 <__assert_func>
 800aaea:	e9c0 4400 	strd	r4, r4, [r0]
 800aaee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aaf2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aaf6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aafa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aafe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ab02:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ab06:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ab0a:	6184      	str	r4, [r0, #24]
 800ab0c:	7704      	strb	r4, [r0, #28]
 800ab0e:	6244      	str	r4, [r0, #36]	@ 0x24
 800ab10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	2301      	movs	r3, #1
 800ab18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	f000 b806 	b.w	800ab2c <__strtok_r>
 800ab20:	20000204 	.word	0x20000204
 800ab24:	0800eb81 	.word	0x0800eb81
 800ab28:	0800eb98 	.word	0x0800eb98

0800ab2c <__strtok_r>:
 800ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2e:	4604      	mov	r4, r0
 800ab30:	b908      	cbnz	r0, 800ab36 <__strtok_r+0xa>
 800ab32:	6814      	ldr	r4, [r2, #0]
 800ab34:	b144      	cbz	r4, 800ab48 <__strtok_r+0x1c>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ab42:	b91e      	cbnz	r6, 800ab4c <__strtok_r+0x20>
 800ab44:	b965      	cbnz	r5, 800ab60 <__strtok_r+0x34>
 800ab46:	6015      	str	r5, [r2, #0]
 800ab48:	2000      	movs	r0, #0
 800ab4a:	e005      	b.n	800ab58 <__strtok_r+0x2c>
 800ab4c:	42b5      	cmp	r5, r6
 800ab4e:	d1f6      	bne.n	800ab3e <__strtok_r+0x12>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1f0      	bne.n	800ab36 <__strtok_r+0xa>
 800ab54:	6014      	str	r4, [r2, #0]
 800ab56:	7003      	strb	r3, [r0, #0]
 800ab58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab5a:	461c      	mov	r4, r3
 800ab5c:	e00c      	b.n	800ab78 <__strtok_r+0x4c>
 800ab5e:	b915      	cbnz	r5, 800ab66 <__strtok_r+0x3a>
 800ab60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab64:	460e      	mov	r6, r1
 800ab66:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ab6a:	42ab      	cmp	r3, r5
 800ab6c:	d1f7      	bne.n	800ab5e <__strtok_r+0x32>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f3      	beq.n	800ab5a <__strtok_r+0x2e>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ab78:	6014      	str	r4, [r2, #0]
 800ab7a:	e7ed      	b.n	800ab58 <__strtok_r+0x2c>

0800ab7c <strstr>:
 800ab7c:	780a      	ldrb	r2, [r1, #0]
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	b96a      	cbnz	r2, 800ab9e <strstr+0x22>
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d109      	bne.n	800ab9c <strstr+0x20>
 800ab88:	460c      	mov	r4, r1
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0f6      	beq.n	800ab82 <strstr+0x6>
 800ab94:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ab98:	429e      	cmp	r6, r3
 800ab9a:	d0f7      	beq.n	800ab8c <strstr+0x10>
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	7803      	ldrb	r3, [r0, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1ef      	bne.n	800ab84 <strstr+0x8>
 800aba4:	4618      	mov	r0, r3
 800aba6:	e7ec      	b.n	800ab82 <strstr+0x6>

0800aba8 <_localeconv_r>:
 800aba8:	4800      	ldr	r0, [pc, #0]	@ (800abac <_localeconv_r+0x4>)
 800abaa:	4770      	bx	lr
 800abac:	20000188 	.word	0x20000188

0800abb0 <_close_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4d06      	ldr	r5, [pc, #24]	@ (800abcc <_close_r+0x1c>)
 800abb4:	2300      	movs	r3, #0
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	f7fa fbe2 	bl	8005384 <_close>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_close_r+0x1a>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_close_r+0x1a>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	20000954 	.word	0x20000954

0800abd0 <_lseek_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d07      	ldr	r5, [pc, #28]	@ (800abf0 <_lseek_r+0x20>)
 800abd4:	4604      	mov	r4, r0
 800abd6:	4608      	mov	r0, r1
 800abd8:	4611      	mov	r1, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	602a      	str	r2, [r5, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	f7fa fbf7 	bl	80053d2 <_lseek>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_lseek_r+0x1e>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_lseek_r+0x1e>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20000954 	.word	0x20000954

0800abf4 <_read_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	@ (800ac14 <_read_r+0x20>)
 800abf8:	4604      	mov	r4, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7fa fba1 	bl	800534a <_read>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_read_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_read_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20000954 	.word	0x20000954

0800ac18 <_write_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	@ (800ac38 <_write_r+0x20>)
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	2200      	movs	r2, #0
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f7fa f852 	bl	8004cd0 <_write>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_write_r+0x1e>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_write_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20000954 	.word	0x20000954

0800ac3c <__errno>:
 800ac3c:	4b01      	ldr	r3, [pc, #4]	@ (800ac44 <__errno+0x8>)
 800ac3e:	6818      	ldr	r0, [r3, #0]
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20000204 	.word	0x20000204

0800ac48 <__libc_init_array>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	4d0d      	ldr	r5, [pc, #52]	@ (800ac80 <__libc_init_array+0x38>)
 800ac4c:	4c0d      	ldr	r4, [pc, #52]	@ (800ac84 <__libc_init_array+0x3c>)
 800ac4e:	1b64      	subs	r4, r4, r5
 800ac50:	10a4      	asrs	r4, r4, #2
 800ac52:	2600      	movs	r6, #0
 800ac54:	42a6      	cmp	r6, r4
 800ac56:	d109      	bne.n	800ac6c <__libc_init_array+0x24>
 800ac58:	4d0b      	ldr	r5, [pc, #44]	@ (800ac88 <__libc_init_array+0x40>)
 800ac5a:	4c0c      	ldr	r4, [pc, #48]	@ (800ac8c <__libc_init_array+0x44>)
 800ac5c:	f003 fed0 	bl	800ea00 <_init>
 800ac60:	1b64      	subs	r4, r4, r5
 800ac62:	10a4      	asrs	r4, r4, #2
 800ac64:	2600      	movs	r6, #0
 800ac66:	42a6      	cmp	r6, r4
 800ac68:	d105      	bne.n	800ac76 <__libc_init_array+0x2e>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac70:	4798      	blx	r3
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7ee      	b.n	800ac54 <__libc_init_array+0xc>
 800ac76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7a:	4798      	blx	r3
 800ac7c:	3601      	adds	r6, #1
 800ac7e:	e7f2      	b.n	800ac66 <__libc_init_array+0x1e>
 800ac80:	0800f160 	.word	0x0800f160
 800ac84:	0800f160 	.word	0x0800f160
 800ac88:	0800f160 	.word	0x0800f160
 800ac8c:	0800f164 	.word	0x0800f164

0800ac90 <__retarget_lock_init_recursive>:
 800ac90:	4770      	bx	lr

0800ac92 <__retarget_lock_acquire_recursive>:
 800ac92:	4770      	bx	lr

0800ac94 <__retarget_lock_release_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <memcpy>:
 800ac96:	440a      	add	r2, r1
 800ac98:	4291      	cmp	r1, r2
 800ac9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac9e:	d100      	bne.n	800aca2 <memcpy+0xc>
 800aca0:	4770      	bx	lr
 800aca2:	b510      	push	{r4, lr}
 800aca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acac:	4291      	cmp	r1, r2
 800acae:	d1f9      	bne.n	800aca4 <memcpy+0xe>
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	0000      	movs	r0, r0
 800acb4:	0000      	movs	r0, r0
	...

0800acb8 <nan>:
 800acb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800acc0 <nan+0x8>
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	00000000 	.word	0x00000000
 800acc4:	7ff80000 	.word	0x7ff80000

0800acc8 <nanf>:
 800acc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800acd0 <nanf+0x8>
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	7fc00000 	.word	0x7fc00000

0800acd4 <__assert_func>:
 800acd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acd6:	4614      	mov	r4, r2
 800acd8:	461a      	mov	r2, r3
 800acda:	4b09      	ldr	r3, [pc, #36]	@ (800ad00 <__assert_func+0x2c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4605      	mov	r5, r0
 800ace0:	68d8      	ldr	r0, [r3, #12]
 800ace2:	b954      	cbnz	r4, 800acfa <__assert_func+0x26>
 800ace4:	4b07      	ldr	r3, [pc, #28]	@ (800ad04 <__assert_func+0x30>)
 800ace6:	461c      	mov	r4, r3
 800ace8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acec:	9100      	str	r1, [sp, #0]
 800acee:	462b      	mov	r3, r5
 800acf0:	4905      	ldr	r1, [pc, #20]	@ (800ad08 <__assert_func+0x34>)
 800acf2:	f002 fb25 	bl	800d340 <fiprintf>
 800acf6:	f002 fbe3 	bl	800d4c0 <abort>
 800acfa:	4b04      	ldr	r3, [pc, #16]	@ (800ad0c <__assert_func+0x38>)
 800acfc:	e7f4      	b.n	800ace8 <__assert_func+0x14>
 800acfe:	bf00      	nop
 800ad00:	20000204 	.word	0x20000204
 800ad04:	0800ec35 	.word	0x0800ec35
 800ad08:	0800ec07 	.word	0x0800ec07
 800ad0c:	0800ebfa 	.word	0x0800ebfa

0800ad10 <quorem>:
 800ad10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	6903      	ldr	r3, [r0, #16]
 800ad16:	690c      	ldr	r4, [r1, #16]
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	db7e      	blt.n	800ae1c <quorem+0x10c>
 800ad1e:	3c01      	subs	r4, #1
 800ad20:	f101 0814 	add.w	r8, r1, #20
 800ad24:	00a3      	lsls	r3, r4, #2
 800ad26:	f100 0514 	add.w	r5, r0, #20
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad42:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad46:	d32e      	bcc.n	800ada6 <quorem+0x96>
 800ad48:	f04f 0a00 	mov.w	sl, #0
 800ad4c:	46c4      	mov	ip, r8
 800ad4e:	46ae      	mov	lr, r5
 800ad50:	46d3      	mov	fp, sl
 800ad52:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad56:	b298      	uxth	r0, r3
 800ad58:	fb06 a000 	mla	r0, r6, r0, sl
 800ad5c:	0c02      	lsrs	r2, r0, #16
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	fb06 2303 	mla	r3, r6, r3, r2
 800ad64:	f8de 2000 	ldr.w	r2, [lr]
 800ad68:	b280      	uxth	r0, r0
 800ad6a:	b292      	uxth	r2, r2
 800ad6c:	1a12      	subs	r2, r2, r0
 800ad6e:	445a      	add	r2, fp
 800ad70:	f8de 0000 	ldr.w	r0, [lr]
 800ad74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad82:	b292      	uxth	r2, r2
 800ad84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad88:	45e1      	cmp	r9, ip
 800ad8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ad8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad92:	d2de      	bcs.n	800ad52 <quorem+0x42>
 800ad94:	9b00      	ldr	r3, [sp, #0]
 800ad96:	58eb      	ldr	r3, [r5, r3]
 800ad98:	b92b      	cbnz	r3, 800ada6 <quorem+0x96>
 800ad9a:	9b01      	ldr	r3, [sp, #4]
 800ad9c:	3b04      	subs	r3, #4
 800ad9e:	429d      	cmp	r5, r3
 800ada0:	461a      	mov	r2, r3
 800ada2:	d32f      	bcc.n	800ae04 <quorem+0xf4>
 800ada4:	613c      	str	r4, [r7, #16]
 800ada6:	4638      	mov	r0, r7
 800ada8:	f001 fd0e 	bl	800c7c8 <__mcmp>
 800adac:	2800      	cmp	r0, #0
 800adae:	db25      	blt.n	800adfc <quorem+0xec>
 800adb0:	4629      	mov	r1, r5
 800adb2:	2000      	movs	r0, #0
 800adb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800adb8:	f8d1 c000 	ldr.w	ip, [r1]
 800adbc:	fa1f fe82 	uxth.w	lr, r2
 800adc0:	fa1f f38c 	uxth.w	r3, ip
 800adc4:	eba3 030e 	sub.w	r3, r3, lr
 800adc8:	4403      	add	r3, r0
 800adca:	0c12      	lsrs	r2, r2, #16
 800adcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800add0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800add4:	b29b      	uxth	r3, r3
 800add6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adda:	45c1      	cmp	r9, r8
 800addc:	f841 3b04 	str.w	r3, [r1], #4
 800ade0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ade4:	d2e6      	bcs.n	800adb4 <quorem+0xa4>
 800ade6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adee:	b922      	cbnz	r2, 800adfa <quorem+0xea>
 800adf0:	3b04      	subs	r3, #4
 800adf2:	429d      	cmp	r5, r3
 800adf4:	461a      	mov	r2, r3
 800adf6:	d30b      	bcc.n	800ae10 <quorem+0x100>
 800adf8:	613c      	str	r4, [r7, #16]
 800adfa:	3601      	adds	r6, #1
 800adfc:	4630      	mov	r0, r6
 800adfe:	b003      	add	sp, #12
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	6812      	ldr	r2, [r2, #0]
 800ae06:	3b04      	subs	r3, #4
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	d1cb      	bne.n	800ada4 <quorem+0x94>
 800ae0c:	3c01      	subs	r4, #1
 800ae0e:	e7c6      	b.n	800ad9e <quorem+0x8e>
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	3b04      	subs	r3, #4
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	d1ef      	bne.n	800adf8 <quorem+0xe8>
 800ae18:	3c01      	subs	r4, #1
 800ae1a:	e7ea      	b.n	800adf2 <quorem+0xe2>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7ee      	b.n	800adfe <quorem+0xee>

0800ae20 <_dtoa_r>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	69c7      	ldr	r7, [r0, #28]
 800ae26:	b099      	sub	sp, #100	@ 0x64
 800ae28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae2c:	ec55 4b10 	vmov	r4, r5, d0
 800ae30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae32:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae34:	4683      	mov	fp, r0
 800ae36:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae3a:	b97f      	cbnz	r7, 800ae5c <_dtoa_r+0x3c>
 800ae3c:	2010      	movs	r0, #16
 800ae3e:	f001 f937 	bl	800c0b0 <malloc>
 800ae42:	4602      	mov	r2, r0
 800ae44:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae48:	b920      	cbnz	r0, 800ae54 <_dtoa_r+0x34>
 800ae4a:	4ba7      	ldr	r3, [pc, #668]	@ (800b0e8 <_dtoa_r+0x2c8>)
 800ae4c:	21ef      	movs	r1, #239	@ 0xef
 800ae4e:	48a7      	ldr	r0, [pc, #668]	@ (800b0ec <_dtoa_r+0x2cc>)
 800ae50:	f7ff ff40 	bl	800acd4 <__assert_func>
 800ae54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae58:	6007      	str	r7, [r0, #0]
 800ae5a:	60c7      	str	r7, [r0, #12]
 800ae5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae60:	6819      	ldr	r1, [r3, #0]
 800ae62:	b159      	cbz	r1, 800ae7c <_dtoa_r+0x5c>
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	604a      	str	r2, [r1, #4]
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4093      	lsls	r3, r2
 800ae6c:	608b      	str	r3, [r1, #8]
 800ae6e:	4658      	mov	r0, fp
 800ae70:	f001 fa26 	bl	800c2c0 <_Bfree>
 800ae74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	1e2b      	subs	r3, r5, #0
 800ae7e:	bfb9      	ittee	lt
 800ae80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae84:	9303      	strlt	r3, [sp, #12]
 800ae86:	2300      	movge	r3, #0
 800ae88:	6033      	strge	r3, [r6, #0]
 800ae8a:	9f03      	ldr	r7, [sp, #12]
 800ae8c:	4b98      	ldr	r3, [pc, #608]	@ (800b0f0 <_dtoa_r+0x2d0>)
 800ae8e:	bfbc      	itt	lt
 800ae90:	2201      	movlt	r2, #1
 800ae92:	6032      	strlt	r2, [r6, #0]
 800ae94:	43bb      	bics	r3, r7
 800ae96:	d112      	bne.n	800aebe <_dtoa_r+0x9e>
 800ae98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aea4:	4323      	orrs	r3, r4
 800aea6:	f000 854d 	beq.w	800b944 <_dtoa_r+0xb24>
 800aeaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aeac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b104 <_dtoa_r+0x2e4>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 854f 	beq.w	800b954 <_dtoa_r+0xb34>
 800aeb6:	f10a 0303 	add.w	r3, sl, #3
 800aeba:	f000 bd49 	b.w	800b950 <_dtoa_r+0xb30>
 800aebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aec2:	2200      	movs	r2, #0
 800aec4:	ec51 0b17 	vmov	r0, r1, d7
 800aec8:	2300      	movs	r3, #0
 800aeca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aece:	f7f5 fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800aed2:	4680      	mov	r8, r0
 800aed4:	b158      	cbz	r0, 800aeee <_dtoa_r+0xce>
 800aed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aed8:	2301      	movs	r3, #1
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aede:	b113      	cbz	r3, 800aee6 <_dtoa_r+0xc6>
 800aee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aee2:	4b84      	ldr	r3, [pc, #528]	@ (800b0f4 <_dtoa_r+0x2d4>)
 800aee4:	6013      	str	r3, [r2, #0]
 800aee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b108 <_dtoa_r+0x2e8>
 800aeea:	f000 bd33 	b.w	800b954 <_dtoa_r+0xb34>
 800aeee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aef2:	aa16      	add	r2, sp, #88	@ 0x58
 800aef4:	a917      	add	r1, sp, #92	@ 0x5c
 800aef6:	4658      	mov	r0, fp
 800aef8:	f001 fd86 	bl	800ca08 <__d2b>
 800aefc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af00:	4681      	mov	r9, r0
 800af02:	2e00      	cmp	r6, #0
 800af04:	d077      	beq.n	800aff6 <_dtoa_r+0x1d6>
 800af06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af20:	4619      	mov	r1, r3
 800af22:	2200      	movs	r2, #0
 800af24:	4b74      	ldr	r3, [pc, #464]	@ (800b0f8 <_dtoa_r+0x2d8>)
 800af26:	f7f5 f9af 	bl	8000288 <__aeabi_dsub>
 800af2a:	a369      	add	r3, pc, #420	@ (adr r3, 800b0d0 <_dtoa_r+0x2b0>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	f7f5 fb62 	bl	80005f8 <__aeabi_dmul>
 800af34:	a368      	add	r3, pc, #416	@ (adr r3, 800b0d8 <_dtoa_r+0x2b8>)
 800af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3a:	f7f5 f9a7 	bl	800028c <__adddf3>
 800af3e:	4604      	mov	r4, r0
 800af40:	4630      	mov	r0, r6
 800af42:	460d      	mov	r5, r1
 800af44:	f7f5 faee 	bl	8000524 <__aeabi_i2d>
 800af48:	a365      	add	r3, pc, #404	@ (adr r3, 800b0e0 <_dtoa_r+0x2c0>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 fb53 	bl	80005f8 <__aeabi_dmul>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	f7f5 f997 	bl	800028c <__adddf3>
 800af5e:	4604      	mov	r4, r0
 800af60:	460d      	mov	r5, r1
 800af62:	f7f5 fdf9 	bl	8000b58 <__aeabi_d2iz>
 800af66:	2200      	movs	r2, #0
 800af68:	4607      	mov	r7, r0
 800af6a:	2300      	movs	r3, #0
 800af6c:	4620      	mov	r0, r4
 800af6e:	4629      	mov	r1, r5
 800af70:	f7f5 fdb4 	bl	8000adc <__aeabi_dcmplt>
 800af74:	b140      	cbz	r0, 800af88 <_dtoa_r+0x168>
 800af76:	4638      	mov	r0, r7
 800af78:	f7f5 fad4 	bl	8000524 <__aeabi_i2d>
 800af7c:	4622      	mov	r2, r4
 800af7e:	462b      	mov	r3, r5
 800af80:	f7f5 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 800af84:	b900      	cbnz	r0, 800af88 <_dtoa_r+0x168>
 800af86:	3f01      	subs	r7, #1
 800af88:	2f16      	cmp	r7, #22
 800af8a:	d851      	bhi.n	800b030 <_dtoa_r+0x210>
 800af8c:	4b5b      	ldr	r3, [pc, #364]	@ (800b0fc <_dtoa_r+0x2dc>)
 800af8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af9a:	f7f5 fd9f 	bl	8000adc <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	d048      	beq.n	800b034 <_dtoa_r+0x214>
 800afa2:	3f01      	subs	r7, #1
 800afa4:	2300      	movs	r3, #0
 800afa6:	9312      	str	r3, [sp, #72]	@ 0x48
 800afa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afaa:	1b9b      	subs	r3, r3, r6
 800afac:	1e5a      	subs	r2, r3, #1
 800afae:	bf44      	itt	mi
 800afb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800afb4:	2300      	movmi	r3, #0
 800afb6:	9208      	str	r2, [sp, #32]
 800afb8:	bf54      	ite	pl
 800afba:	f04f 0800 	movpl.w	r8, #0
 800afbe:	9308      	strmi	r3, [sp, #32]
 800afc0:	2f00      	cmp	r7, #0
 800afc2:	db39      	blt.n	800b038 <_dtoa_r+0x218>
 800afc4:	9b08      	ldr	r3, [sp, #32]
 800afc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800afc8:	443b      	add	r3, r7
 800afca:	9308      	str	r3, [sp, #32]
 800afcc:	2300      	movs	r3, #0
 800afce:	930a      	str	r3, [sp, #40]	@ 0x28
 800afd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd2:	2b09      	cmp	r3, #9
 800afd4:	d864      	bhi.n	800b0a0 <_dtoa_r+0x280>
 800afd6:	2b05      	cmp	r3, #5
 800afd8:	bfc4      	itt	gt
 800afda:	3b04      	subgt	r3, #4
 800afdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800afde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe0:	f1a3 0302 	sub.w	r3, r3, #2
 800afe4:	bfcc      	ite	gt
 800afe6:	2400      	movgt	r4, #0
 800afe8:	2401      	movle	r4, #1
 800afea:	2b03      	cmp	r3, #3
 800afec:	d863      	bhi.n	800b0b6 <_dtoa_r+0x296>
 800afee:	e8df f003 	tbb	[pc, r3]
 800aff2:	372a      	.short	0x372a
 800aff4:	5535      	.short	0x5535
 800aff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800affa:	441e      	add	r6, r3
 800affc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b000:	2b20      	cmp	r3, #32
 800b002:	bfc1      	itttt	gt
 800b004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b008:	409f      	lslgt	r7, r3
 800b00a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b00e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b012:	bfd6      	itet	le
 800b014:	f1c3 0320 	rsble	r3, r3, #32
 800b018:	ea47 0003 	orrgt.w	r0, r7, r3
 800b01c:	fa04 f003 	lslle.w	r0, r4, r3
 800b020:	f7f5 fa70 	bl	8000504 <__aeabi_ui2d>
 800b024:	2201      	movs	r2, #1
 800b026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b02a:	3e01      	subs	r6, #1
 800b02c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b02e:	e777      	b.n	800af20 <_dtoa_r+0x100>
 800b030:	2301      	movs	r3, #1
 800b032:	e7b8      	b.n	800afa6 <_dtoa_r+0x186>
 800b034:	9012      	str	r0, [sp, #72]	@ 0x48
 800b036:	e7b7      	b.n	800afa8 <_dtoa_r+0x188>
 800b038:	427b      	negs	r3, r7
 800b03a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b03c:	2300      	movs	r3, #0
 800b03e:	eba8 0807 	sub.w	r8, r8, r7
 800b042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b044:	e7c4      	b.n	800afd0 <_dtoa_r+0x1b0>
 800b046:	2300      	movs	r3, #0
 800b048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dc35      	bgt.n	800b0bc <_dtoa_r+0x29c>
 800b050:	2301      	movs	r3, #1
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	9307      	str	r3, [sp, #28]
 800b056:	461a      	mov	r2, r3
 800b058:	920e      	str	r2, [sp, #56]	@ 0x38
 800b05a:	e00b      	b.n	800b074 <_dtoa_r+0x254>
 800b05c:	2301      	movs	r3, #1
 800b05e:	e7f3      	b.n	800b048 <_dtoa_r+0x228>
 800b060:	2300      	movs	r3, #0
 800b062:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b066:	18fb      	adds	r3, r7, r3
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	3301      	adds	r3, #1
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	bfb8      	it	lt
 800b072:	2301      	movlt	r3, #1
 800b074:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b078:	2100      	movs	r1, #0
 800b07a:	2204      	movs	r2, #4
 800b07c:	f102 0514 	add.w	r5, r2, #20
 800b080:	429d      	cmp	r5, r3
 800b082:	d91f      	bls.n	800b0c4 <_dtoa_r+0x2a4>
 800b084:	6041      	str	r1, [r0, #4]
 800b086:	4658      	mov	r0, fp
 800b088:	f001 f8da 	bl	800c240 <_Balloc>
 800b08c:	4682      	mov	sl, r0
 800b08e:	2800      	cmp	r0, #0
 800b090:	d13c      	bne.n	800b10c <_dtoa_r+0x2ec>
 800b092:	4b1b      	ldr	r3, [pc, #108]	@ (800b100 <_dtoa_r+0x2e0>)
 800b094:	4602      	mov	r2, r0
 800b096:	f240 11af 	movw	r1, #431	@ 0x1af
 800b09a:	e6d8      	b.n	800ae4e <_dtoa_r+0x2e>
 800b09c:	2301      	movs	r3, #1
 800b09e:	e7e0      	b.n	800b062 <_dtoa_r+0x242>
 800b0a0:	2401      	movs	r4, #1
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	9307      	str	r3, [sp, #28]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2312      	movs	r3, #18
 800b0b4:	e7d0      	b.n	800b058 <_dtoa_r+0x238>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0ba:	e7f5      	b.n	800b0a8 <_dtoa_r+0x288>
 800b0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	9307      	str	r3, [sp, #28]
 800b0c2:	e7d7      	b.n	800b074 <_dtoa_r+0x254>
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	0052      	lsls	r2, r2, #1
 800b0c8:	e7d8      	b.n	800b07c <_dtoa_r+0x25c>
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	636f4361 	.word	0x636f4361
 800b0d4:	3fd287a7 	.word	0x3fd287a7
 800b0d8:	8b60c8b3 	.word	0x8b60c8b3
 800b0dc:	3fc68a28 	.word	0x3fc68a28
 800b0e0:	509f79fb 	.word	0x509f79fb
 800b0e4:	3fd34413 	.word	0x3fd34413
 800b0e8:	0800eb81 	.word	0x0800eb81
 800b0ec:	0800ec43 	.word	0x0800ec43
 800b0f0:	7ff00000 	.word	0x7ff00000
 800b0f4:	0800eb59 	.word	0x0800eb59
 800b0f8:	3ff80000 	.word	0x3ff80000
 800b0fc:	0800eda0 	.word	0x0800eda0
 800b100:	0800ec9b 	.word	0x0800ec9b
 800b104:	0800ec3f 	.word	0x0800ec3f
 800b108:	0800eb58 	.word	0x0800eb58
 800b10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b110:	6018      	str	r0, [r3, #0]
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	2b0e      	cmp	r3, #14
 800b116:	f200 80a4 	bhi.w	800b262 <_dtoa_r+0x442>
 800b11a:	2c00      	cmp	r4, #0
 800b11c:	f000 80a1 	beq.w	800b262 <_dtoa_r+0x442>
 800b120:	2f00      	cmp	r7, #0
 800b122:	dd33      	ble.n	800b18c <_dtoa_r+0x36c>
 800b124:	4bad      	ldr	r3, [pc, #692]	@ (800b3dc <_dtoa_r+0x5bc>)
 800b126:	f007 020f 	and.w	r2, r7, #15
 800b12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b12e:	ed93 7b00 	vldr	d7, [r3]
 800b132:	05f8      	lsls	r0, r7, #23
 800b134:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b13c:	d516      	bpl.n	800b16c <_dtoa_r+0x34c>
 800b13e:	4ba8      	ldr	r3, [pc, #672]	@ (800b3e0 <_dtoa_r+0x5c0>)
 800b140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b148:	f7f5 fb80 	bl	800084c <__aeabi_ddiv>
 800b14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b150:	f004 040f 	and.w	r4, r4, #15
 800b154:	2603      	movs	r6, #3
 800b156:	4da2      	ldr	r5, [pc, #648]	@ (800b3e0 <_dtoa_r+0x5c0>)
 800b158:	b954      	cbnz	r4, 800b170 <_dtoa_r+0x350>
 800b15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b162:	f7f5 fb73 	bl	800084c <__aeabi_ddiv>
 800b166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b16a:	e028      	b.n	800b1be <_dtoa_r+0x39e>
 800b16c:	2602      	movs	r6, #2
 800b16e:	e7f2      	b.n	800b156 <_dtoa_r+0x336>
 800b170:	07e1      	lsls	r1, r4, #31
 800b172:	d508      	bpl.n	800b186 <_dtoa_r+0x366>
 800b174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b17c:	f7f5 fa3c 	bl	80005f8 <__aeabi_dmul>
 800b180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b184:	3601      	adds	r6, #1
 800b186:	1064      	asrs	r4, r4, #1
 800b188:	3508      	adds	r5, #8
 800b18a:	e7e5      	b.n	800b158 <_dtoa_r+0x338>
 800b18c:	f000 80d2 	beq.w	800b334 <_dtoa_r+0x514>
 800b190:	427c      	negs	r4, r7
 800b192:	4b92      	ldr	r3, [pc, #584]	@ (800b3dc <_dtoa_r+0x5bc>)
 800b194:	4d92      	ldr	r5, [pc, #584]	@ (800b3e0 <_dtoa_r+0x5c0>)
 800b196:	f004 020f 	and.w	r2, r4, #15
 800b19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1a6:	f7f5 fa27 	bl	80005f8 <__aeabi_dmul>
 800b1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ae:	1124      	asrs	r4, r4, #4
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2602      	movs	r6, #2
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	f040 80b2 	bne.w	800b31e <_dtoa_r+0x4fe>
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1d3      	bne.n	800b166 <_dtoa_r+0x346>
 800b1be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 80b7 	beq.w	800b338 <_dtoa_r+0x518>
 800b1ca:	4b86      	ldr	r3, [pc, #536]	@ (800b3e4 <_dtoa_r+0x5c4>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 fc83 	bl	8000adc <__aeabi_dcmplt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f000 80ae 	beq.w	800b338 <_dtoa_r+0x518>
 800b1dc:	9b07      	ldr	r3, [sp, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80aa 	beq.w	800b338 <_dtoa_r+0x518>
 800b1e4:	9b00      	ldr	r3, [sp, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dd37      	ble.n	800b25a <_dtoa_r+0x43a>
 800b1ea:	1e7b      	subs	r3, r7, #1
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800b3e8 <_dtoa_r+0x5c8>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f5 f9ff 	bl	80005f8 <__aeabi_dmul>
 800b1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1fe:	9c00      	ldr	r4, [sp, #0]
 800b200:	3601      	adds	r6, #1
 800b202:	4630      	mov	r0, r6
 800b204:	f7f5 f98e 	bl	8000524 <__aeabi_i2d>
 800b208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b20c:	f7f5 f9f4 	bl	80005f8 <__aeabi_dmul>
 800b210:	4b76      	ldr	r3, [pc, #472]	@ (800b3ec <_dtoa_r+0x5cc>)
 800b212:	2200      	movs	r2, #0
 800b214:	f7f5 f83a 	bl	800028c <__adddf3>
 800b218:	4605      	mov	r5, r0
 800b21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b21e:	2c00      	cmp	r4, #0
 800b220:	f040 808d 	bne.w	800b33e <_dtoa_r+0x51e>
 800b224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b228:	4b71      	ldr	r3, [pc, #452]	@ (800b3f0 <_dtoa_r+0x5d0>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	f7f5 f82c 	bl	8000288 <__aeabi_dsub>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b238:	462a      	mov	r2, r5
 800b23a:	4633      	mov	r3, r6
 800b23c:	f7f5 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800b240:	2800      	cmp	r0, #0
 800b242:	f040 828b 	bne.w	800b75c <_dtoa_r+0x93c>
 800b246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b24a:	462a      	mov	r2, r5
 800b24c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b250:	f7f5 fc44 	bl	8000adc <__aeabi_dcmplt>
 800b254:	2800      	cmp	r0, #0
 800b256:	f040 8128 	bne.w	800b4aa <_dtoa_r+0x68a>
 800b25a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b25e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b264:	2b00      	cmp	r3, #0
 800b266:	f2c0 815a 	blt.w	800b51e <_dtoa_r+0x6fe>
 800b26a:	2f0e      	cmp	r7, #14
 800b26c:	f300 8157 	bgt.w	800b51e <_dtoa_r+0x6fe>
 800b270:	4b5a      	ldr	r3, [pc, #360]	@ (800b3dc <_dtoa_r+0x5bc>)
 800b272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b276:	ed93 7b00 	vldr	d7, [r3]
 800b27a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	ed8d 7b00 	vstr	d7, [sp]
 800b282:	da03      	bge.n	800b28c <_dtoa_r+0x46c>
 800b284:	9b07      	ldr	r3, [sp, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f340 8101 	ble.w	800b48e <_dtoa_r+0x66e>
 800b28c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b290:	4656      	mov	r6, sl
 800b292:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f5 fad7 	bl	800084c <__aeabi_ddiv>
 800b29e:	f7f5 fc5b 	bl	8000b58 <__aeabi_d2iz>
 800b2a2:	4680      	mov	r8, r0
 800b2a4:	f7f5 f93e 	bl	8000524 <__aeabi_i2d>
 800b2a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ac:	f7f5 f9a4 	bl	80005f8 <__aeabi_dmul>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2bc:	f7f4 ffe4 	bl	8000288 <__aeabi_dsub>
 800b2c0:	f806 4b01 	strb.w	r4, [r6], #1
 800b2c4:	9d07      	ldr	r5, [sp, #28]
 800b2c6:	eba6 040a 	sub.w	r4, r6, sl
 800b2ca:	42a5      	cmp	r5, r4
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	f040 8117 	bne.w	800b502 <_dtoa_r+0x6e2>
 800b2d4:	f7f4 ffda 	bl	800028c <__adddf3>
 800b2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2dc:	4604      	mov	r4, r0
 800b2de:	460d      	mov	r5, r1
 800b2e0:	f7f5 fc1a 	bl	8000b18 <__aeabi_dcmpgt>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	f040 80f9 	bne.w	800b4dc <_dtoa_r+0x6bc>
 800b2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f5 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2f6:	b118      	cbz	r0, 800b300 <_dtoa_r+0x4e0>
 800b2f8:	f018 0f01 	tst.w	r8, #1
 800b2fc:	f040 80ee 	bne.w	800b4dc <_dtoa_r+0x6bc>
 800b300:	4649      	mov	r1, r9
 800b302:	4658      	mov	r0, fp
 800b304:	f000 ffdc 	bl	800c2c0 <_Bfree>
 800b308:	2300      	movs	r3, #0
 800b30a:	7033      	strb	r3, [r6, #0]
 800b30c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b30e:	3701      	adds	r7, #1
 800b310:	601f      	str	r7, [r3, #0]
 800b312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 831d 	beq.w	800b954 <_dtoa_r+0xb34>
 800b31a:	601e      	str	r6, [r3, #0]
 800b31c:	e31a      	b.n	800b954 <_dtoa_r+0xb34>
 800b31e:	07e2      	lsls	r2, r4, #31
 800b320:	d505      	bpl.n	800b32e <_dtoa_r+0x50e>
 800b322:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b326:	f7f5 f967 	bl	80005f8 <__aeabi_dmul>
 800b32a:	3601      	adds	r6, #1
 800b32c:	2301      	movs	r3, #1
 800b32e:	1064      	asrs	r4, r4, #1
 800b330:	3508      	adds	r5, #8
 800b332:	e73f      	b.n	800b1b4 <_dtoa_r+0x394>
 800b334:	2602      	movs	r6, #2
 800b336:	e742      	b.n	800b1be <_dtoa_r+0x39e>
 800b338:	9c07      	ldr	r4, [sp, #28]
 800b33a:	9704      	str	r7, [sp, #16]
 800b33c:	e761      	b.n	800b202 <_dtoa_r+0x3e2>
 800b33e:	4b27      	ldr	r3, [pc, #156]	@ (800b3dc <_dtoa_r+0x5bc>)
 800b340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b34a:	4454      	add	r4, sl
 800b34c:	2900      	cmp	r1, #0
 800b34e:	d053      	beq.n	800b3f8 <_dtoa_r+0x5d8>
 800b350:	4928      	ldr	r1, [pc, #160]	@ (800b3f4 <_dtoa_r+0x5d4>)
 800b352:	2000      	movs	r0, #0
 800b354:	f7f5 fa7a 	bl	800084c <__aeabi_ddiv>
 800b358:	4633      	mov	r3, r6
 800b35a:	462a      	mov	r2, r5
 800b35c:	f7f4 ff94 	bl	8000288 <__aeabi_dsub>
 800b360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b364:	4656      	mov	r6, sl
 800b366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b36a:	f7f5 fbf5 	bl	8000b58 <__aeabi_d2iz>
 800b36e:	4605      	mov	r5, r0
 800b370:	f7f5 f8d8 	bl	8000524 <__aeabi_i2d>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b37c:	f7f4 ff84 	bl	8000288 <__aeabi_dsub>
 800b380:	3530      	adds	r5, #48	@ 0x30
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b38a:	f806 5b01 	strb.w	r5, [r6], #1
 800b38e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b392:	f7f5 fba3 	bl	8000adc <__aeabi_dcmplt>
 800b396:	2800      	cmp	r0, #0
 800b398:	d171      	bne.n	800b47e <_dtoa_r+0x65e>
 800b39a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b39e:	4911      	ldr	r1, [pc, #68]	@ (800b3e4 <_dtoa_r+0x5c4>)
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	f7f4 ff71 	bl	8000288 <__aeabi_dsub>
 800b3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3aa:	f7f5 fb97 	bl	8000adc <__aeabi_dcmplt>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	f040 8095 	bne.w	800b4de <_dtoa_r+0x6be>
 800b3b4:	42a6      	cmp	r6, r4
 800b3b6:	f43f af50 	beq.w	800b25a <_dtoa_r+0x43a>
 800b3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3be:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e8 <_dtoa_r+0x5c8>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f7f5 f919 	bl	80005f8 <__aeabi_dmul>
 800b3c6:	4b08      	ldr	r3, [pc, #32]	@ (800b3e8 <_dtoa_r+0x5c8>)
 800b3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3d2:	f7f5 f911 	bl	80005f8 <__aeabi_dmul>
 800b3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3da:	e7c4      	b.n	800b366 <_dtoa_r+0x546>
 800b3dc:	0800eda0 	.word	0x0800eda0
 800b3e0:	0800ed78 	.word	0x0800ed78
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	40240000 	.word	0x40240000
 800b3ec:	401c0000 	.word	0x401c0000
 800b3f0:	40140000 	.word	0x40140000
 800b3f4:	3fe00000 	.word	0x3fe00000
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f7f5 f8fc 	bl	80005f8 <__aeabi_dmul>
 800b400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b404:	9415      	str	r4, [sp, #84]	@ 0x54
 800b406:	4656      	mov	r6, sl
 800b408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b40c:	f7f5 fba4 	bl	8000b58 <__aeabi_d2iz>
 800b410:	4605      	mov	r5, r0
 800b412:	f7f5 f887 	bl	8000524 <__aeabi_i2d>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b41e:	f7f4 ff33 	bl	8000288 <__aeabi_dsub>
 800b422:	3530      	adds	r5, #48	@ 0x30
 800b424:	f806 5b01 	strb.w	r5, [r6], #1
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	42a6      	cmp	r6, r4
 800b42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b432:	f04f 0200 	mov.w	r2, #0
 800b436:	d124      	bne.n	800b482 <_dtoa_r+0x662>
 800b438:	4bac      	ldr	r3, [pc, #688]	@ (800b6ec <_dtoa_r+0x8cc>)
 800b43a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b43e:	f7f4 ff25 	bl	800028c <__adddf3>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b44a:	f7f5 fb65 	bl	8000b18 <__aeabi_dcmpgt>
 800b44e:	2800      	cmp	r0, #0
 800b450:	d145      	bne.n	800b4de <_dtoa_r+0x6be>
 800b452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b456:	49a5      	ldr	r1, [pc, #660]	@ (800b6ec <_dtoa_r+0x8cc>)
 800b458:	2000      	movs	r0, #0
 800b45a:	f7f4 ff15 	bl	8000288 <__aeabi_dsub>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b466:	f7f5 fb39 	bl	8000adc <__aeabi_dcmplt>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	f43f aef5 	beq.w	800b25a <_dtoa_r+0x43a>
 800b470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b472:	1e73      	subs	r3, r6, #1
 800b474:	9315      	str	r3, [sp, #84]	@ 0x54
 800b476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b47a:	2b30      	cmp	r3, #48	@ 0x30
 800b47c:	d0f8      	beq.n	800b470 <_dtoa_r+0x650>
 800b47e:	9f04      	ldr	r7, [sp, #16]
 800b480:	e73e      	b.n	800b300 <_dtoa_r+0x4e0>
 800b482:	4b9b      	ldr	r3, [pc, #620]	@ (800b6f0 <_dtoa_r+0x8d0>)
 800b484:	f7f5 f8b8 	bl	80005f8 <__aeabi_dmul>
 800b488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b48c:	e7bc      	b.n	800b408 <_dtoa_r+0x5e8>
 800b48e:	d10c      	bne.n	800b4aa <_dtoa_r+0x68a>
 800b490:	4b98      	ldr	r3, [pc, #608]	@ (800b6f4 <_dtoa_r+0x8d4>)
 800b492:	2200      	movs	r2, #0
 800b494:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b498:	f7f5 f8ae 	bl	80005f8 <__aeabi_dmul>
 800b49c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4a0:	f7f5 fb30 	bl	8000b04 <__aeabi_dcmpge>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f000 8157 	beq.w	800b758 <_dtoa_r+0x938>
 800b4aa:	2400      	movs	r4, #0
 800b4ac:	4625      	mov	r5, r4
 800b4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	4656      	mov	r6, sl
 800b4b6:	2700      	movs	r7, #0
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	4658      	mov	r0, fp
 800b4bc:	f000 ff00 	bl	800c2c0 <_Bfree>
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	d0dc      	beq.n	800b47e <_dtoa_r+0x65e>
 800b4c4:	b12f      	cbz	r7, 800b4d2 <_dtoa_r+0x6b2>
 800b4c6:	42af      	cmp	r7, r5
 800b4c8:	d003      	beq.n	800b4d2 <_dtoa_r+0x6b2>
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	4658      	mov	r0, fp
 800b4ce:	f000 fef7 	bl	800c2c0 <_Bfree>
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	4658      	mov	r0, fp
 800b4d6:	f000 fef3 	bl	800c2c0 <_Bfree>
 800b4da:	e7d0      	b.n	800b47e <_dtoa_r+0x65e>
 800b4dc:	9704      	str	r7, [sp, #16]
 800b4de:	4633      	mov	r3, r6
 800b4e0:	461e      	mov	r6, r3
 800b4e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4e6:	2a39      	cmp	r2, #57	@ 0x39
 800b4e8:	d107      	bne.n	800b4fa <_dtoa_r+0x6da>
 800b4ea:	459a      	cmp	sl, r3
 800b4ec:	d1f8      	bne.n	800b4e0 <_dtoa_r+0x6c0>
 800b4ee:	9a04      	ldr	r2, [sp, #16]
 800b4f0:	3201      	adds	r2, #1
 800b4f2:	9204      	str	r2, [sp, #16]
 800b4f4:	2230      	movs	r2, #48	@ 0x30
 800b4f6:	f88a 2000 	strb.w	r2, [sl]
 800b4fa:	781a      	ldrb	r2, [r3, #0]
 800b4fc:	3201      	adds	r2, #1
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	e7bd      	b.n	800b47e <_dtoa_r+0x65e>
 800b502:	4b7b      	ldr	r3, [pc, #492]	@ (800b6f0 <_dtoa_r+0x8d0>)
 800b504:	2200      	movs	r2, #0
 800b506:	f7f5 f877 	bl	80005f8 <__aeabi_dmul>
 800b50a:	2200      	movs	r2, #0
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	460d      	mov	r5, r1
 800b512:	f7f5 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b516:	2800      	cmp	r0, #0
 800b518:	f43f aebb 	beq.w	800b292 <_dtoa_r+0x472>
 800b51c:	e6f0      	b.n	800b300 <_dtoa_r+0x4e0>
 800b51e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b520:	2a00      	cmp	r2, #0
 800b522:	f000 80db 	beq.w	800b6dc <_dtoa_r+0x8bc>
 800b526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b528:	2a01      	cmp	r2, #1
 800b52a:	f300 80bf 	bgt.w	800b6ac <_dtoa_r+0x88c>
 800b52e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b530:	2a00      	cmp	r2, #0
 800b532:	f000 80b7 	beq.w	800b6a4 <_dtoa_r+0x884>
 800b536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b53a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b53c:	4646      	mov	r6, r8
 800b53e:	9a08      	ldr	r2, [sp, #32]
 800b540:	2101      	movs	r1, #1
 800b542:	441a      	add	r2, r3
 800b544:	4658      	mov	r0, fp
 800b546:	4498      	add	r8, r3
 800b548:	9208      	str	r2, [sp, #32]
 800b54a:	f000 ffb7 	bl	800c4bc <__i2b>
 800b54e:	4605      	mov	r5, r0
 800b550:	b15e      	cbz	r6, 800b56a <_dtoa_r+0x74a>
 800b552:	9b08      	ldr	r3, [sp, #32]
 800b554:	2b00      	cmp	r3, #0
 800b556:	dd08      	ble.n	800b56a <_dtoa_r+0x74a>
 800b558:	42b3      	cmp	r3, r6
 800b55a:	9a08      	ldr	r2, [sp, #32]
 800b55c:	bfa8      	it	ge
 800b55e:	4633      	movge	r3, r6
 800b560:	eba8 0803 	sub.w	r8, r8, r3
 800b564:	1af6      	subs	r6, r6, r3
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	9308      	str	r3, [sp, #32]
 800b56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b56c:	b1f3      	cbz	r3, 800b5ac <_dtoa_r+0x78c>
 800b56e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 80b7 	beq.w	800b6e4 <_dtoa_r+0x8c4>
 800b576:	b18c      	cbz	r4, 800b59c <_dtoa_r+0x77c>
 800b578:	4629      	mov	r1, r5
 800b57a:	4622      	mov	r2, r4
 800b57c:	4658      	mov	r0, fp
 800b57e:	f001 f85d 	bl	800c63c <__pow5mult>
 800b582:	464a      	mov	r2, r9
 800b584:	4601      	mov	r1, r0
 800b586:	4605      	mov	r5, r0
 800b588:	4658      	mov	r0, fp
 800b58a:	f000 ffad 	bl	800c4e8 <__multiply>
 800b58e:	4649      	mov	r1, r9
 800b590:	9004      	str	r0, [sp, #16]
 800b592:	4658      	mov	r0, fp
 800b594:	f000 fe94 	bl	800c2c0 <_Bfree>
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	4699      	mov	r9, r3
 800b59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b59e:	1b1a      	subs	r2, r3, r4
 800b5a0:	d004      	beq.n	800b5ac <_dtoa_r+0x78c>
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4658      	mov	r0, fp
 800b5a6:	f001 f849 	bl	800c63c <__pow5mult>
 800b5aa:	4681      	mov	r9, r0
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	f000 ff84 	bl	800c4bc <__i2b>
 800b5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 81cf 	beq.w	800b95c <_dtoa_r+0xb3c>
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4601      	mov	r1, r0
 800b5c2:	4658      	mov	r0, fp
 800b5c4:	f001 f83a 	bl	800c63c <__pow5mult>
 800b5c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	f300 8095 	bgt.w	800b6fc <_dtoa_r+0x8dc>
 800b5d2:	9b02      	ldr	r3, [sp, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f040 8087 	bne.w	800b6e8 <_dtoa_r+0x8c8>
 800b5da:	9b03      	ldr	r3, [sp, #12]
 800b5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f040 8089 	bne.w	800b6f8 <_dtoa_r+0x8d8>
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5ec:	0d1b      	lsrs	r3, r3, #20
 800b5ee:	051b      	lsls	r3, r3, #20
 800b5f0:	b12b      	cbz	r3, 800b5fe <_dtoa_r+0x7de>
 800b5f2:	9b08      	ldr	r3, [sp, #32]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	9308      	str	r3, [sp, #32]
 800b5f8:	f108 0801 	add.w	r8, r8, #1
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 81b0 	beq.w	800b968 <_dtoa_r+0xb48>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b60e:	6918      	ldr	r0, [r3, #16]
 800b610:	f000 ff08 	bl	800c424 <__hi0bits>
 800b614:	f1c0 0020 	rsb	r0, r0, #32
 800b618:	9b08      	ldr	r3, [sp, #32]
 800b61a:	4418      	add	r0, r3
 800b61c:	f010 001f 	ands.w	r0, r0, #31
 800b620:	d077      	beq.n	800b712 <_dtoa_r+0x8f2>
 800b622:	f1c0 0320 	rsb	r3, r0, #32
 800b626:	2b04      	cmp	r3, #4
 800b628:	dd6b      	ble.n	800b702 <_dtoa_r+0x8e2>
 800b62a:	9b08      	ldr	r3, [sp, #32]
 800b62c:	f1c0 001c 	rsb	r0, r0, #28
 800b630:	4403      	add	r3, r0
 800b632:	4480      	add	r8, r0
 800b634:	4406      	add	r6, r0
 800b636:	9308      	str	r3, [sp, #32]
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	dd05      	ble.n	800b64a <_dtoa_r+0x82a>
 800b63e:	4649      	mov	r1, r9
 800b640:	4642      	mov	r2, r8
 800b642:	4658      	mov	r0, fp
 800b644:	f001 f854 	bl	800c6f0 <__lshift>
 800b648:	4681      	mov	r9, r0
 800b64a:	9b08      	ldr	r3, [sp, #32]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dd05      	ble.n	800b65c <_dtoa_r+0x83c>
 800b650:	4621      	mov	r1, r4
 800b652:	461a      	mov	r2, r3
 800b654:	4658      	mov	r0, fp
 800b656:	f001 f84b 	bl	800c6f0 <__lshift>
 800b65a:	4604      	mov	r4, r0
 800b65c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d059      	beq.n	800b716 <_dtoa_r+0x8f6>
 800b662:	4621      	mov	r1, r4
 800b664:	4648      	mov	r0, r9
 800b666:	f001 f8af 	bl	800c7c8 <__mcmp>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	da53      	bge.n	800b716 <_dtoa_r+0x8f6>
 800b66e:	1e7b      	subs	r3, r7, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	4649      	mov	r1, r9
 800b674:	2300      	movs	r3, #0
 800b676:	220a      	movs	r2, #10
 800b678:	4658      	mov	r0, fp
 800b67a:	f000 fe43 	bl	800c304 <__multadd>
 800b67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b680:	4681      	mov	r9, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 8172 	beq.w	800b96c <_dtoa_r+0xb4c>
 800b688:	2300      	movs	r3, #0
 800b68a:	4629      	mov	r1, r5
 800b68c:	220a      	movs	r2, #10
 800b68e:	4658      	mov	r0, fp
 800b690:	f000 fe38 	bl	800c304 <__multadd>
 800b694:	9b00      	ldr	r3, [sp, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	4605      	mov	r5, r0
 800b69a:	dc67      	bgt.n	800b76c <_dtoa_r+0x94c>
 800b69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	dc41      	bgt.n	800b726 <_dtoa_r+0x906>
 800b6a2:	e063      	b.n	800b76c <_dtoa_r+0x94c>
 800b6a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b6a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6aa:	e746      	b.n	800b53a <_dtoa_r+0x71a>
 800b6ac:	9b07      	ldr	r3, [sp, #28]
 800b6ae:	1e5c      	subs	r4, r3, #1
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6b2:	42a3      	cmp	r3, r4
 800b6b4:	bfbf      	itttt	lt
 800b6b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b6b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b6ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b6bc:	1ae3      	sublt	r3, r4, r3
 800b6be:	bfb4      	ite	lt
 800b6c0:	18d2      	addlt	r2, r2, r3
 800b6c2:	1b1c      	subge	r4, r3, r4
 800b6c4:	9b07      	ldr	r3, [sp, #28]
 800b6c6:	bfbc      	itt	lt
 800b6c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b6ca:	2400      	movlt	r4, #0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	bfb5      	itete	lt
 800b6d0:	eba8 0603 	sublt.w	r6, r8, r3
 800b6d4:	9b07      	ldrge	r3, [sp, #28]
 800b6d6:	2300      	movlt	r3, #0
 800b6d8:	4646      	movge	r6, r8
 800b6da:	e730      	b.n	800b53e <_dtoa_r+0x71e>
 800b6dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b6e0:	4646      	mov	r6, r8
 800b6e2:	e735      	b.n	800b550 <_dtoa_r+0x730>
 800b6e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6e6:	e75c      	b.n	800b5a2 <_dtoa_r+0x782>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e788      	b.n	800b5fe <_dtoa_r+0x7de>
 800b6ec:	3fe00000 	.word	0x3fe00000
 800b6f0:	40240000 	.word	0x40240000
 800b6f4:	40140000 	.word	0x40140000
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	e780      	b.n	800b5fe <_dtoa_r+0x7de>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b700:	e782      	b.n	800b608 <_dtoa_r+0x7e8>
 800b702:	d099      	beq.n	800b638 <_dtoa_r+0x818>
 800b704:	9a08      	ldr	r2, [sp, #32]
 800b706:	331c      	adds	r3, #28
 800b708:	441a      	add	r2, r3
 800b70a:	4498      	add	r8, r3
 800b70c:	441e      	add	r6, r3
 800b70e:	9208      	str	r2, [sp, #32]
 800b710:	e792      	b.n	800b638 <_dtoa_r+0x818>
 800b712:	4603      	mov	r3, r0
 800b714:	e7f6      	b.n	800b704 <_dtoa_r+0x8e4>
 800b716:	9b07      	ldr	r3, [sp, #28]
 800b718:	9704      	str	r7, [sp, #16]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dc20      	bgt.n	800b760 <_dtoa_r+0x940>
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b722:	2b02      	cmp	r3, #2
 800b724:	dd1e      	ble.n	800b764 <_dtoa_r+0x944>
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f47f aec0 	bne.w	800b4ae <_dtoa_r+0x68e>
 800b72e:	4621      	mov	r1, r4
 800b730:	2205      	movs	r2, #5
 800b732:	4658      	mov	r0, fp
 800b734:	f000 fde6 	bl	800c304 <__multadd>
 800b738:	4601      	mov	r1, r0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4648      	mov	r0, r9
 800b73e:	f001 f843 	bl	800c7c8 <__mcmp>
 800b742:	2800      	cmp	r0, #0
 800b744:	f77f aeb3 	ble.w	800b4ae <_dtoa_r+0x68e>
 800b748:	4656      	mov	r6, sl
 800b74a:	2331      	movs	r3, #49	@ 0x31
 800b74c:	f806 3b01 	strb.w	r3, [r6], #1
 800b750:	9b04      	ldr	r3, [sp, #16]
 800b752:	3301      	adds	r3, #1
 800b754:	9304      	str	r3, [sp, #16]
 800b756:	e6ae      	b.n	800b4b6 <_dtoa_r+0x696>
 800b758:	9c07      	ldr	r4, [sp, #28]
 800b75a:	9704      	str	r7, [sp, #16]
 800b75c:	4625      	mov	r5, r4
 800b75e:	e7f3      	b.n	800b748 <_dtoa_r+0x928>
 800b760:	9b07      	ldr	r3, [sp, #28]
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 8104 	beq.w	800b974 <_dtoa_r+0xb54>
 800b76c:	2e00      	cmp	r6, #0
 800b76e:	dd05      	ble.n	800b77c <_dtoa_r+0x95c>
 800b770:	4629      	mov	r1, r5
 800b772:	4632      	mov	r2, r6
 800b774:	4658      	mov	r0, fp
 800b776:	f000 ffbb 	bl	800c6f0 <__lshift>
 800b77a:	4605      	mov	r5, r0
 800b77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d05a      	beq.n	800b838 <_dtoa_r+0xa18>
 800b782:	6869      	ldr	r1, [r5, #4]
 800b784:	4658      	mov	r0, fp
 800b786:	f000 fd5b 	bl	800c240 <_Balloc>
 800b78a:	4606      	mov	r6, r0
 800b78c:	b928      	cbnz	r0, 800b79a <_dtoa_r+0x97a>
 800b78e:	4b84      	ldr	r3, [pc, #528]	@ (800b9a0 <_dtoa_r+0xb80>)
 800b790:	4602      	mov	r2, r0
 800b792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b796:	f7ff bb5a 	b.w	800ae4e <_dtoa_r+0x2e>
 800b79a:	692a      	ldr	r2, [r5, #16]
 800b79c:	3202      	adds	r2, #2
 800b79e:	0092      	lsls	r2, r2, #2
 800b7a0:	f105 010c 	add.w	r1, r5, #12
 800b7a4:	300c      	adds	r0, #12
 800b7a6:	f7ff fa76 	bl	800ac96 <memcpy>
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	4631      	mov	r1, r6
 800b7ae:	4658      	mov	r0, fp
 800b7b0:	f000 ff9e 	bl	800c6f0 <__lshift>
 800b7b4:	f10a 0301 	add.w	r3, sl, #1
 800b7b8:	9307      	str	r3, [sp, #28]
 800b7ba:	9b00      	ldr	r3, [sp, #0]
 800b7bc:	4453      	add	r3, sl
 800b7be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7c0:	9b02      	ldr	r3, [sp, #8]
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	462f      	mov	r7, r5
 800b7c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	9b07      	ldr	r3, [sp, #28]
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	4648      	mov	r0, r9
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	f7ff fa9b 	bl	800ad10 <quorem>
 800b7da:	4639      	mov	r1, r7
 800b7dc:	9002      	str	r0, [sp, #8]
 800b7de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7e2:	4648      	mov	r0, r9
 800b7e4:	f000 fff0 	bl	800c7c8 <__mcmp>
 800b7e8:	462a      	mov	r2, r5
 800b7ea:	9008      	str	r0, [sp, #32]
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	4658      	mov	r0, fp
 800b7f0:	f001 f806 	bl	800c800 <__mdiff>
 800b7f4:	68c2      	ldr	r2, [r0, #12]
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	bb02      	cbnz	r2, 800b83c <_dtoa_r+0xa1c>
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	4648      	mov	r0, r9
 800b7fe:	f000 ffe3 	bl	800c7c8 <__mcmp>
 800b802:	4602      	mov	r2, r0
 800b804:	4631      	mov	r1, r6
 800b806:	4658      	mov	r0, fp
 800b808:	920e      	str	r2, [sp, #56]	@ 0x38
 800b80a:	f000 fd59 	bl	800c2c0 <_Bfree>
 800b80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b812:	9e07      	ldr	r6, [sp, #28]
 800b814:	ea43 0102 	orr.w	r1, r3, r2
 800b818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b81a:	4319      	orrs	r1, r3
 800b81c:	d110      	bne.n	800b840 <_dtoa_r+0xa20>
 800b81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b822:	d029      	beq.n	800b878 <_dtoa_r+0xa58>
 800b824:	9b08      	ldr	r3, [sp, #32]
 800b826:	2b00      	cmp	r3, #0
 800b828:	dd02      	ble.n	800b830 <_dtoa_r+0xa10>
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b830:	9b00      	ldr	r3, [sp, #0]
 800b832:	f883 8000 	strb.w	r8, [r3]
 800b836:	e63f      	b.n	800b4b8 <_dtoa_r+0x698>
 800b838:	4628      	mov	r0, r5
 800b83a:	e7bb      	b.n	800b7b4 <_dtoa_r+0x994>
 800b83c:	2201      	movs	r2, #1
 800b83e:	e7e1      	b.n	800b804 <_dtoa_r+0x9e4>
 800b840:	9b08      	ldr	r3, [sp, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	db04      	blt.n	800b850 <_dtoa_r+0xa30>
 800b846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b848:	430b      	orrs	r3, r1
 800b84a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b84c:	430b      	orrs	r3, r1
 800b84e:	d120      	bne.n	800b892 <_dtoa_r+0xa72>
 800b850:	2a00      	cmp	r2, #0
 800b852:	dded      	ble.n	800b830 <_dtoa_r+0xa10>
 800b854:	4649      	mov	r1, r9
 800b856:	2201      	movs	r2, #1
 800b858:	4658      	mov	r0, fp
 800b85a:	f000 ff49 	bl	800c6f0 <__lshift>
 800b85e:	4621      	mov	r1, r4
 800b860:	4681      	mov	r9, r0
 800b862:	f000 ffb1 	bl	800c7c8 <__mcmp>
 800b866:	2800      	cmp	r0, #0
 800b868:	dc03      	bgt.n	800b872 <_dtoa_r+0xa52>
 800b86a:	d1e1      	bne.n	800b830 <_dtoa_r+0xa10>
 800b86c:	f018 0f01 	tst.w	r8, #1
 800b870:	d0de      	beq.n	800b830 <_dtoa_r+0xa10>
 800b872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b876:	d1d8      	bne.n	800b82a <_dtoa_r+0xa0a>
 800b878:	9a00      	ldr	r2, [sp, #0]
 800b87a:	2339      	movs	r3, #57	@ 0x39
 800b87c:	7013      	strb	r3, [r2, #0]
 800b87e:	4633      	mov	r3, r6
 800b880:	461e      	mov	r6, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b888:	2a39      	cmp	r2, #57	@ 0x39
 800b88a:	d052      	beq.n	800b932 <_dtoa_r+0xb12>
 800b88c:	3201      	adds	r2, #1
 800b88e:	701a      	strb	r2, [r3, #0]
 800b890:	e612      	b.n	800b4b8 <_dtoa_r+0x698>
 800b892:	2a00      	cmp	r2, #0
 800b894:	dd07      	ble.n	800b8a6 <_dtoa_r+0xa86>
 800b896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b89a:	d0ed      	beq.n	800b878 <_dtoa_r+0xa58>
 800b89c:	9a00      	ldr	r2, [sp, #0]
 800b89e:	f108 0301 	add.w	r3, r8, #1
 800b8a2:	7013      	strb	r3, [r2, #0]
 800b8a4:	e608      	b.n	800b4b8 <_dtoa_r+0x698>
 800b8a6:	9b07      	ldr	r3, [sp, #28]
 800b8a8:	9a07      	ldr	r2, [sp, #28]
 800b8aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b8ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d028      	beq.n	800b906 <_dtoa_r+0xae6>
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	220a      	movs	r2, #10
 800b8ba:	4658      	mov	r0, fp
 800b8bc:	f000 fd22 	bl	800c304 <__multadd>
 800b8c0:	42af      	cmp	r7, r5
 800b8c2:	4681      	mov	r9, r0
 800b8c4:	f04f 0300 	mov.w	r3, #0
 800b8c8:	f04f 020a 	mov.w	r2, #10
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	4658      	mov	r0, fp
 800b8d0:	d107      	bne.n	800b8e2 <_dtoa_r+0xac2>
 800b8d2:	f000 fd17 	bl	800c304 <__multadd>
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	4605      	mov	r5, r0
 800b8da:	9b07      	ldr	r3, [sp, #28]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	9307      	str	r3, [sp, #28]
 800b8e0:	e774      	b.n	800b7cc <_dtoa_r+0x9ac>
 800b8e2:	f000 fd0f 	bl	800c304 <__multadd>
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	220a      	movs	r2, #10
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	f000 fd08 	bl	800c304 <__multadd>
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	e7f0      	b.n	800b8da <_dtoa_r+0xaba>
 800b8f8:	9b00      	ldr	r3, [sp, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfcc      	ite	gt
 800b8fe:	461e      	movgt	r6, r3
 800b900:	2601      	movle	r6, #1
 800b902:	4456      	add	r6, sl
 800b904:	2700      	movs	r7, #0
 800b906:	4649      	mov	r1, r9
 800b908:	2201      	movs	r2, #1
 800b90a:	4658      	mov	r0, fp
 800b90c:	f000 fef0 	bl	800c6f0 <__lshift>
 800b910:	4621      	mov	r1, r4
 800b912:	4681      	mov	r9, r0
 800b914:	f000 ff58 	bl	800c7c8 <__mcmp>
 800b918:	2800      	cmp	r0, #0
 800b91a:	dcb0      	bgt.n	800b87e <_dtoa_r+0xa5e>
 800b91c:	d102      	bne.n	800b924 <_dtoa_r+0xb04>
 800b91e:	f018 0f01 	tst.w	r8, #1
 800b922:	d1ac      	bne.n	800b87e <_dtoa_r+0xa5e>
 800b924:	4633      	mov	r3, r6
 800b926:	461e      	mov	r6, r3
 800b928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b92c:	2a30      	cmp	r2, #48	@ 0x30
 800b92e:	d0fa      	beq.n	800b926 <_dtoa_r+0xb06>
 800b930:	e5c2      	b.n	800b4b8 <_dtoa_r+0x698>
 800b932:	459a      	cmp	sl, r3
 800b934:	d1a4      	bne.n	800b880 <_dtoa_r+0xa60>
 800b936:	9b04      	ldr	r3, [sp, #16]
 800b938:	3301      	adds	r3, #1
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	2331      	movs	r3, #49	@ 0x31
 800b93e:	f88a 3000 	strb.w	r3, [sl]
 800b942:	e5b9      	b.n	800b4b8 <_dtoa_r+0x698>
 800b944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b9a4 <_dtoa_r+0xb84>
 800b94a:	b11b      	cbz	r3, 800b954 <_dtoa_r+0xb34>
 800b94c:	f10a 0308 	add.w	r3, sl, #8
 800b950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	4650      	mov	r0, sl
 800b956:	b019      	add	sp, #100	@ 0x64
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b95e:	2b01      	cmp	r3, #1
 800b960:	f77f ae37 	ble.w	800b5d2 <_dtoa_r+0x7b2>
 800b964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b966:	930a      	str	r3, [sp, #40]	@ 0x28
 800b968:	2001      	movs	r0, #1
 800b96a:	e655      	b.n	800b618 <_dtoa_r+0x7f8>
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f77f aed6 	ble.w	800b720 <_dtoa_r+0x900>
 800b974:	4656      	mov	r6, sl
 800b976:	4621      	mov	r1, r4
 800b978:	4648      	mov	r0, r9
 800b97a:	f7ff f9c9 	bl	800ad10 <quorem>
 800b97e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b982:	f806 8b01 	strb.w	r8, [r6], #1
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	eba6 020a 	sub.w	r2, r6, sl
 800b98c:	4293      	cmp	r3, r2
 800b98e:	ddb3      	ble.n	800b8f8 <_dtoa_r+0xad8>
 800b990:	4649      	mov	r1, r9
 800b992:	2300      	movs	r3, #0
 800b994:	220a      	movs	r2, #10
 800b996:	4658      	mov	r0, fp
 800b998:	f000 fcb4 	bl	800c304 <__multadd>
 800b99c:	4681      	mov	r9, r0
 800b99e:	e7ea      	b.n	800b976 <_dtoa_r+0xb56>
 800b9a0:	0800ec9b 	.word	0x0800ec9b
 800b9a4:	0800ec36 	.word	0x0800ec36

0800b9a8 <_free_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	2900      	cmp	r1, #0
 800b9ae:	d041      	beq.n	800ba34 <_free_r+0x8c>
 800b9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b4:	1f0c      	subs	r4, r1, #4
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bfb8      	it	lt
 800b9ba:	18e4      	addlt	r4, r4, r3
 800b9bc:	f000 fc34 	bl	800c228 <__malloc_lock>
 800b9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba38 <_free_r+0x90>)
 800b9c2:	6813      	ldr	r3, [r2, #0]
 800b9c4:	b933      	cbnz	r3, 800b9d4 <_free_r+0x2c>
 800b9c6:	6063      	str	r3, [r4, #4]
 800b9c8:	6014      	str	r4, [r2, #0]
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9d0:	f000 bc30 	b.w	800c234 <__malloc_unlock>
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	d908      	bls.n	800b9ea <_free_r+0x42>
 800b9d8:	6820      	ldr	r0, [r4, #0]
 800b9da:	1821      	adds	r1, r4, r0
 800b9dc:	428b      	cmp	r3, r1
 800b9de:	bf01      	itttt	eq
 800b9e0:	6819      	ldreq	r1, [r3, #0]
 800b9e2:	685b      	ldreq	r3, [r3, #4]
 800b9e4:	1809      	addeq	r1, r1, r0
 800b9e6:	6021      	streq	r1, [r4, #0]
 800b9e8:	e7ed      	b.n	800b9c6 <_free_r+0x1e>
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	b10b      	cbz	r3, 800b9f4 <_free_r+0x4c>
 800b9f0:	42a3      	cmp	r3, r4
 800b9f2:	d9fa      	bls.n	800b9ea <_free_r+0x42>
 800b9f4:	6811      	ldr	r1, [r2, #0]
 800b9f6:	1850      	adds	r0, r2, r1
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d10b      	bne.n	800ba14 <_free_r+0x6c>
 800b9fc:	6820      	ldr	r0, [r4, #0]
 800b9fe:	4401      	add	r1, r0
 800ba00:	1850      	adds	r0, r2, r1
 800ba02:	4283      	cmp	r3, r0
 800ba04:	6011      	str	r1, [r2, #0]
 800ba06:	d1e0      	bne.n	800b9ca <_free_r+0x22>
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	6053      	str	r3, [r2, #4]
 800ba0e:	4408      	add	r0, r1
 800ba10:	6010      	str	r0, [r2, #0]
 800ba12:	e7da      	b.n	800b9ca <_free_r+0x22>
 800ba14:	d902      	bls.n	800ba1c <_free_r+0x74>
 800ba16:	230c      	movs	r3, #12
 800ba18:	602b      	str	r3, [r5, #0]
 800ba1a:	e7d6      	b.n	800b9ca <_free_r+0x22>
 800ba1c:	6820      	ldr	r0, [r4, #0]
 800ba1e:	1821      	adds	r1, r4, r0
 800ba20:	428b      	cmp	r3, r1
 800ba22:	bf04      	itt	eq
 800ba24:	6819      	ldreq	r1, [r3, #0]
 800ba26:	685b      	ldreq	r3, [r3, #4]
 800ba28:	6063      	str	r3, [r4, #4]
 800ba2a:	bf04      	itt	eq
 800ba2c:	1809      	addeq	r1, r1, r0
 800ba2e:	6021      	streq	r1, [r4, #0]
 800ba30:	6054      	str	r4, [r2, #4]
 800ba32:	e7ca      	b.n	800b9ca <_free_r+0x22>
 800ba34:	bd38      	pop	{r3, r4, r5, pc}
 800ba36:	bf00      	nop
 800ba38:	20000960 	.word	0x20000960

0800ba3c <rshift>:
 800ba3c:	6903      	ldr	r3, [r0, #16]
 800ba3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba4a:	f100 0414 	add.w	r4, r0, #20
 800ba4e:	dd45      	ble.n	800badc <rshift+0xa0>
 800ba50:	f011 011f 	ands.w	r1, r1, #31
 800ba54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba5c:	d10c      	bne.n	800ba78 <rshift+0x3c>
 800ba5e:	f100 0710 	add.w	r7, r0, #16
 800ba62:	4629      	mov	r1, r5
 800ba64:	42b1      	cmp	r1, r6
 800ba66:	d334      	bcc.n	800bad2 <rshift+0x96>
 800ba68:	1a9b      	subs	r3, r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	1eea      	subs	r2, r5, #3
 800ba6e:	4296      	cmp	r6, r2
 800ba70:	bf38      	it	cc
 800ba72:	2300      	movcc	r3, #0
 800ba74:	4423      	add	r3, r4
 800ba76:	e015      	b.n	800baa4 <rshift+0x68>
 800ba78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba7c:	f1c1 0820 	rsb	r8, r1, #32
 800ba80:	40cf      	lsrs	r7, r1
 800ba82:	f105 0e04 	add.w	lr, r5, #4
 800ba86:	46a1      	mov	r9, r4
 800ba88:	4576      	cmp	r6, lr
 800ba8a:	46f4      	mov	ip, lr
 800ba8c:	d815      	bhi.n	800baba <rshift+0x7e>
 800ba8e:	1a9a      	subs	r2, r3, r2
 800ba90:	0092      	lsls	r2, r2, #2
 800ba92:	3a04      	subs	r2, #4
 800ba94:	3501      	adds	r5, #1
 800ba96:	42ae      	cmp	r6, r5
 800ba98:	bf38      	it	cc
 800ba9a:	2200      	movcc	r2, #0
 800ba9c:	18a3      	adds	r3, r4, r2
 800ba9e:	50a7      	str	r7, [r4, r2]
 800baa0:	b107      	cbz	r7, 800baa4 <rshift+0x68>
 800baa2:	3304      	adds	r3, #4
 800baa4:	1b1a      	subs	r2, r3, r4
 800baa6:	42a3      	cmp	r3, r4
 800baa8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800baac:	bf08      	it	eq
 800baae:	2300      	moveq	r3, #0
 800bab0:	6102      	str	r2, [r0, #16]
 800bab2:	bf08      	it	eq
 800bab4:	6143      	streq	r3, [r0, #20]
 800bab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baba:	f8dc c000 	ldr.w	ip, [ip]
 800babe:	fa0c fc08 	lsl.w	ip, ip, r8
 800bac2:	ea4c 0707 	orr.w	r7, ip, r7
 800bac6:	f849 7b04 	str.w	r7, [r9], #4
 800baca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bace:	40cf      	lsrs	r7, r1
 800bad0:	e7da      	b.n	800ba88 <rshift+0x4c>
 800bad2:	f851 cb04 	ldr.w	ip, [r1], #4
 800bad6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bada:	e7c3      	b.n	800ba64 <rshift+0x28>
 800badc:	4623      	mov	r3, r4
 800bade:	e7e1      	b.n	800baa4 <rshift+0x68>

0800bae0 <__hexdig_fun>:
 800bae0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bae4:	2b09      	cmp	r3, #9
 800bae6:	d802      	bhi.n	800baee <__hexdig_fun+0xe>
 800bae8:	3820      	subs	r0, #32
 800baea:	b2c0      	uxtb	r0, r0
 800baec:	4770      	bx	lr
 800baee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	d801      	bhi.n	800bafa <__hexdig_fun+0x1a>
 800baf6:	3847      	subs	r0, #71	@ 0x47
 800baf8:	e7f7      	b.n	800baea <__hexdig_fun+0xa>
 800bafa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bafe:	2b05      	cmp	r3, #5
 800bb00:	d801      	bhi.n	800bb06 <__hexdig_fun+0x26>
 800bb02:	3827      	subs	r0, #39	@ 0x27
 800bb04:	e7f1      	b.n	800baea <__hexdig_fun+0xa>
 800bb06:	2000      	movs	r0, #0
 800bb08:	4770      	bx	lr
	...

0800bb0c <__gethex>:
 800bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	b085      	sub	sp, #20
 800bb12:	468a      	mov	sl, r1
 800bb14:	9302      	str	r3, [sp, #8]
 800bb16:	680b      	ldr	r3, [r1, #0]
 800bb18:	9001      	str	r0, [sp, #4]
 800bb1a:	4690      	mov	r8, r2
 800bb1c:	1c9c      	adds	r4, r3, #2
 800bb1e:	46a1      	mov	r9, r4
 800bb20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb24:	2830      	cmp	r0, #48	@ 0x30
 800bb26:	d0fa      	beq.n	800bb1e <__gethex+0x12>
 800bb28:	eba9 0303 	sub.w	r3, r9, r3
 800bb2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb30:	f7ff ffd6 	bl	800bae0 <__hexdig_fun>
 800bb34:	4605      	mov	r5, r0
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d168      	bne.n	800bc0c <__gethex+0x100>
 800bb3a:	49a0      	ldr	r1, [pc, #640]	@ (800bdbc <__gethex+0x2b0>)
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	4648      	mov	r0, r9
 800bb40:	f7fe ffae 	bl	800aaa0 <strncmp>
 800bb44:	4607      	mov	r7, r0
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d167      	bne.n	800bc1a <__gethex+0x10e>
 800bb4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb4e:	4626      	mov	r6, r4
 800bb50:	f7ff ffc6 	bl	800bae0 <__hexdig_fun>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d062      	beq.n	800bc1e <__gethex+0x112>
 800bb58:	4623      	mov	r3, r4
 800bb5a:	7818      	ldrb	r0, [r3, #0]
 800bb5c:	2830      	cmp	r0, #48	@ 0x30
 800bb5e:	4699      	mov	r9, r3
 800bb60:	f103 0301 	add.w	r3, r3, #1
 800bb64:	d0f9      	beq.n	800bb5a <__gethex+0x4e>
 800bb66:	f7ff ffbb 	bl	800bae0 <__hexdig_fun>
 800bb6a:	fab0 f580 	clz	r5, r0
 800bb6e:	096d      	lsrs	r5, r5, #5
 800bb70:	f04f 0b01 	mov.w	fp, #1
 800bb74:	464a      	mov	r2, r9
 800bb76:	4616      	mov	r6, r2
 800bb78:	3201      	adds	r2, #1
 800bb7a:	7830      	ldrb	r0, [r6, #0]
 800bb7c:	f7ff ffb0 	bl	800bae0 <__hexdig_fun>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d1f8      	bne.n	800bb76 <__gethex+0x6a>
 800bb84:	498d      	ldr	r1, [pc, #564]	@ (800bdbc <__gethex+0x2b0>)
 800bb86:	2201      	movs	r2, #1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7fe ff89 	bl	800aaa0 <strncmp>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d13f      	bne.n	800bc12 <__gethex+0x106>
 800bb92:	b944      	cbnz	r4, 800bba6 <__gethex+0x9a>
 800bb94:	1c74      	adds	r4, r6, #1
 800bb96:	4622      	mov	r2, r4
 800bb98:	4616      	mov	r6, r2
 800bb9a:	3201      	adds	r2, #1
 800bb9c:	7830      	ldrb	r0, [r6, #0]
 800bb9e:	f7ff ff9f 	bl	800bae0 <__hexdig_fun>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d1f8      	bne.n	800bb98 <__gethex+0x8c>
 800bba6:	1ba4      	subs	r4, r4, r6
 800bba8:	00a7      	lsls	r7, r4, #2
 800bbaa:	7833      	ldrb	r3, [r6, #0]
 800bbac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bbb0:	2b50      	cmp	r3, #80	@ 0x50
 800bbb2:	d13e      	bne.n	800bc32 <__gethex+0x126>
 800bbb4:	7873      	ldrb	r3, [r6, #1]
 800bbb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbb8:	d033      	beq.n	800bc22 <__gethex+0x116>
 800bbba:	2b2d      	cmp	r3, #45	@ 0x2d
 800bbbc:	d034      	beq.n	800bc28 <__gethex+0x11c>
 800bbbe:	1c71      	adds	r1, r6, #1
 800bbc0:	2400      	movs	r4, #0
 800bbc2:	7808      	ldrb	r0, [r1, #0]
 800bbc4:	f7ff ff8c 	bl	800bae0 <__hexdig_fun>
 800bbc8:	1e43      	subs	r3, r0, #1
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b18      	cmp	r3, #24
 800bbce:	d830      	bhi.n	800bc32 <__gethex+0x126>
 800bbd0:	f1a0 0210 	sub.w	r2, r0, #16
 800bbd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbd8:	f7ff ff82 	bl	800bae0 <__hexdig_fun>
 800bbdc:	f100 3cff 	add.w	ip, r0, #4294967295
 800bbe0:	fa5f fc8c 	uxtb.w	ip, ip
 800bbe4:	f1bc 0f18 	cmp.w	ip, #24
 800bbe8:	f04f 030a 	mov.w	r3, #10
 800bbec:	d91e      	bls.n	800bc2c <__gethex+0x120>
 800bbee:	b104      	cbz	r4, 800bbf2 <__gethex+0xe6>
 800bbf0:	4252      	negs	r2, r2
 800bbf2:	4417      	add	r7, r2
 800bbf4:	f8ca 1000 	str.w	r1, [sl]
 800bbf8:	b1ed      	cbz	r5, 800bc36 <__gethex+0x12a>
 800bbfa:	f1bb 0f00 	cmp.w	fp, #0
 800bbfe:	bf0c      	ite	eq
 800bc00:	2506      	moveq	r5, #6
 800bc02:	2500      	movne	r5, #0
 800bc04:	4628      	mov	r0, r5
 800bc06:	b005      	add	sp, #20
 800bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc0c:	2500      	movs	r5, #0
 800bc0e:	462c      	mov	r4, r5
 800bc10:	e7b0      	b.n	800bb74 <__gethex+0x68>
 800bc12:	2c00      	cmp	r4, #0
 800bc14:	d1c7      	bne.n	800bba6 <__gethex+0x9a>
 800bc16:	4627      	mov	r7, r4
 800bc18:	e7c7      	b.n	800bbaa <__gethex+0x9e>
 800bc1a:	464e      	mov	r6, r9
 800bc1c:	462f      	mov	r7, r5
 800bc1e:	2501      	movs	r5, #1
 800bc20:	e7c3      	b.n	800bbaa <__gethex+0x9e>
 800bc22:	2400      	movs	r4, #0
 800bc24:	1cb1      	adds	r1, r6, #2
 800bc26:	e7cc      	b.n	800bbc2 <__gethex+0xb6>
 800bc28:	2401      	movs	r4, #1
 800bc2a:	e7fb      	b.n	800bc24 <__gethex+0x118>
 800bc2c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc30:	e7ce      	b.n	800bbd0 <__gethex+0xc4>
 800bc32:	4631      	mov	r1, r6
 800bc34:	e7de      	b.n	800bbf4 <__gethex+0xe8>
 800bc36:	eba6 0309 	sub.w	r3, r6, r9
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	2b07      	cmp	r3, #7
 800bc40:	dc0a      	bgt.n	800bc58 <__gethex+0x14c>
 800bc42:	9801      	ldr	r0, [sp, #4]
 800bc44:	f000 fafc 	bl	800c240 <_Balloc>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	b940      	cbnz	r0, 800bc5e <__gethex+0x152>
 800bc4c:	4b5c      	ldr	r3, [pc, #368]	@ (800bdc0 <__gethex+0x2b4>)
 800bc4e:	4602      	mov	r2, r0
 800bc50:	21e4      	movs	r1, #228	@ 0xe4
 800bc52:	485c      	ldr	r0, [pc, #368]	@ (800bdc4 <__gethex+0x2b8>)
 800bc54:	f7ff f83e 	bl	800acd4 <__assert_func>
 800bc58:	3101      	adds	r1, #1
 800bc5a:	105b      	asrs	r3, r3, #1
 800bc5c:	e7ef      	b.n	800bc3e <__gethex+0x132>
 800bc5e:	f100 0a14 	add.w	sl, r0, #20
 800bc62:	2300      	movs	r3, #0
 800bc64:	4655      	mov	r5, sl
 800bc66:	469b      	mov	fp, r3
 800bc68:	45b1      	cmp	r9, r6
 800bc6a:	d337      	bcc.n	800bcdc <__gethex+0x1d0>
 800bc6c:	f845 bb04 	str.w	fp, [r5], #4
 800bc70:	eba5 050a 	sub.w	r5, r5, sl
 800bc74:	10ad      	asrs	r5, r5, #2
 800bc76:	6125      	str	r5, [r4, #16]
 800bc78:	4658      	mov	r0, fp
 800bc7a:	f000 fbd3 	bl	800c424 <__hi0bits>
 800bc7e:	016d      	lsls	r5, r5, #5
 800bc80:	f8d8 6000 	ldr.w	r6, [r8]
 800bc84:	1a2d      	subs	r5, r5, r0
 800bc86:	42b5      	cmp	r5, r6
 800bc88:	dd54      	ble.n	800bd34 <__gethex+0x228>
 800bc8a:	1bad      	subs	r5, r5, r6
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 ff67 	bl	800cb62 <__any_on>
 800bc94:	4681      	mov	r9, r0
 800bc96:	b178      	cbz	r0, 800bcb8 <__gethex+0x1ac>
 800bc98:	1e6b      	subs	r3, r5, #1
 800bc9a:	1159      	asrs	r1, r3, #5
 800bc9c:	f003 021f 	and.w	r2, r3, #31
 800bca0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bca4:	f04f 0901 	mov.w	r9, #1
 800bca8:	fa09 f202 	lsl.w	r2, r9, r2
 800bcac:	420a      	tst	r2, r1
 800bcae:	d003      	beq.n	800bcb8 <__gethex+0x1ac>
 800bcb0:	454b      	cmp	r3, r9
 800bcb2:	dc36      	bgt.n	800bd22 <__gethex+0x216>
 800bcb4:	f04f 0902 	mov.w	r9, #2
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f7ff febe 	bl	800ba3c <rshift>
 800bcc0:	442f      	add	r7, r5
 800bcc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcc6:	42bb      	cmp	r3, r7
 800bcc8:	da42      	bge.n	800bd50 <__gethex+0x244>
 800bcca:	9801      	ldr	r0, [sp, #4]
 800bccc:	4621      	mov	r1, r4
 800bcce:	f000 faf7 	bl	800c2c0 <_Bfree>
 800bcd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	25a3      	movs	r5, #163	@ 0xa3
 800bcda:	e793      	b.n	800bc04 <__gethex+0xf8>
 800bcdc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bce0:	2a2e      	cmp	r2, #46	@ 0x2e
 800bce2:	d012      	beq.n	800bd0a <__gethex+0x1fe>
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d104      	bne.n	800bcf2 <__gethex+0x1e6>
 800bce8:	f845 bb04 	str.w	fp, [r5], #4
 800bcec:	f04f 0b00 	mov.w	fp, #0
 800bcf0:	465b      	mov	r3, fp
 800bcf2:	7830      	ldrb	r0, [r6, #0]
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	f7ff fef3 	bl	800bae0 <__hexdig_fun>
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	f000 000f 	and.w	r0, r0, #15
 800bd00:	4098      	lsls	r0, r3
 800bd02:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd06:	3304      	adds	r3, #4
 800bd08:	e7ae      	b.n	800bc68 <__gethex+0x15c>
 800bd0a:	45b1      	cmp	r9, r6
 800bd0c:	d8ea      	bhi.n	800bce4 <__gethex+0x1d8>
 800bd0e:	492b      	ldr	r1, [pc, #172]	@ (800bdbc <__gethex+0x2b0>)
 800bd10:	9303      	str	r3, [sp, #12]
 800bd12:	2201      	movs	r2, #1
 800bd14:	4630      	mov	r0, r6
 800bd16:	f7fe fec3 	bl	800aaa0 <strncmp>
 800bd1a:	9b03      	ldr	r3, [sp, #12]
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d1e1      	bne.n	800bce4 <__gethex+0x1d8>
 800bd20:	e7a2      	b.n	800bc68 <__gethex+0x15c>
 800bd22:	1ea9      	subs	r1, r5, #2
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 ff1c 	bl	800cb62 <__any_on>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d0c2      	beq.n	800bcb4 <__gethex+0x1a8>
 800bd2e:	f04f 0903 	mov.w	r9, #3
 800bd32:	e7c1      	b.n	800bcb8 <__gethex+0x1ac>
 800bd34:	da09      	bge.n	800bd4a <__gethex+0x23e>
 800bd36:	1b75      	subs	r5, r6, r5
 800bd38:	4621      	mov	r1, r4
 800bd3a:	9801      	ldr	r0, [sp, #4]
 800bd3c:	462a      	mov	r2, r5
 800bd3e:	f000 fcd7 	bl	800c6f0 <__lshift>
 800bd42:	1b7f      	subs	r7, r7, r5
 800bd44:	4604      	mov	r4, r0
 800bd46:	f100 0a14 	add.w	sl, r0, #20
 800bd4a:	f04f 0900 	mov.w	r9, #0
 800bd4e:	e7b8      	b.n	800bcc2 <__gethex+0x1b6>
 800bd50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd54:	42bd      	cmp	r5, r7
 800bd56:	dd6f      	ble.n	800be38 <__gethex+0x32c>
 800bd58:	1bed      	subs	r5, r5, r7
 800bd5a:	42ae      	cmp	r6, r5
 800bd5c:	dc34      	bgt.n	800bdc8 <__gethex+0x2bc>
 800bd5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd62:	2b02      	cmp	r3, #2
 800bd64:	d022      	beq.n	800bdac <__gethex+0x2a0>
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d024      	beq.n	800bdb4 <__gethex+0x2a8>
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d115      	bne.n	800bd9a <__gethex+0x28e>
 800bd6e:	42ae      	cmp	r6, r5
 800bd70:	d113      	bne.n	800bd9a <__gethex+0x28e>
 800bd72:	2e01      	cmp	r6, #1
 800bd74:	d10b      	bne.n	800bd8e <__gethex+0x282>
 800bd76:	9a02      	ldr	r2, [sp, #8]
 800bd78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	2301      	movs	r3, #1
 800bd80:	6123      	str	r3, [r4, #16]
 800bd82:	f8ca 3000 	str.w	r3, [sl]
 800bd86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd88:	2562      	movs	r5, #98	@ 0x62
 800bd8a:	601c      	str	r4, [r3, #0]
 800bd8c:	e73a      	b.n	800bc04 <__gethex+0xf8>
 800bd8e:	1e71      	subs	r1, r6, #1
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fee6 	bl	800cb62 <__any_on>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d1ed      	bne.n	800bd76 <__gethex+0x26a>
 800bd9a:	9801      	ldr	r0, [sp, #4]
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	f000 fa8f 	bl	800c2c0 <_Bfree>
 800bda2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bda4:	2300      	movs	r3, #0
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	2550      	movs	r5, #80	@ 0x50
 800bdaa:	e72b      	b.n	800bc04 <__gethex+0xf8>
 800bdac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1f3      	bne.n	800bd9a <__gethex+0x28e>
 800bdb2:	e7e0      	b.n	800bd76 <__gethex+0x26a>
 800bdb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1dd      	bne.n	800bd76 <__gethex+0x26a>
 800bdba:	e7ee      	b.n	800bd9a <__gethex+0x28e>
 800bdbc:	0800eaf0 	.word	0x0800eaf0
 800bdc0:	0800ec9b 	.word	0x0800ec9b
 800bdc4:	0800ecac 	.word	0x0800ecac
 800bdc8:	1e6f      	subs	r7, r5, #1
 800bdca:	f1b9 0f00 	cmp.w	r9, #0
 800bdce:	d130      	bne.n	800be32 <__gethex+0x326>
 800bdd0:	b127      	cbz	r7, 800bddc <__gethex+0x2d0>
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f000 fec4 	bl	800cb62 <__any_on>
 800bdda:	4681      	mov	r9, r0
 800bddc:	117a      	asrs	r2, r7, #5
 800bdde:	2301      	movs	r3, #1
 800bde0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bde4:	f007 071f 	and.w	r7, r7, #31
 800bde8:	40bb      	lsls	r3, r7
 800bdea:	4213      	tst	r3, r2
 800bdec:	4629      	mov	r1, r5
 800bdee:	4620      	mov	r0, r4
 800bdf0:	bf18      	it	ne
 800bdf2:	f049 0902 	orrne.w	r9, r9, #2
 800bdf6:	f7ff fe21 	bl	800ba3c <rshift>
 800bdfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bdfe:	1b76      	subs	r6, r6, r5
 800be00:	2502      	movs	r5, #2
 800be02:	f1b9 0f00 	cmp.w	r9, #0
 800be06:	d047      	beq.n	800be98 <__gethex+0x38c>
 800be08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d015      	beq.n	800be3c <__gethex+0x330>
 800be10:	2b03      	cmp	r3, #3
 800be12:	d017      	beq.n	800be44 <__gethex+0x338>
 800be14:	2b01      	cmp	r3, #1
 800be16:	d109      	bne.n	800be2c <__gethex+0x320>
 800be18:	f019 0f02 	tst.w	r9, #2
 800be1c:	d006      	beq.n	800be2c <__gethex+0x320>
 800be1e:	f8da 3000 	ldr.w	r3, [sl]
 800be22:	ea49 0903 	orr.w	r9, r9, r3
 800be26:	f019 0f01 	tst.w	r9, #1
 800be2a:	d10e      	bne.n	800be4a <__gethex+0x33e>
 800be2c:	f045 0510 	orr.w	r5, r5, #16
 800be30:	e032      	b.n	800be98 <__gethex+0x38c>
 800be32:	f04f 0901 	mov.w	r9, #1
 800be36:	e7d1      	b.n	800bddc <__gethex+0x2d0>
 800be38:	2501      	movs	r5, #1
 800be3a:	e7e2      	b.n	800be02 <__gethex+0x2f6>
 800be3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be3e:	f1c3 0301 	rsb	r3, r3, #1
 800be42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0f0      	beq.n	800be2c <__gethex+0x320>
 800be4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be4e:	f104 0314 	add.w	r3, r4, #20
 800be52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be5a:	f04f 0c00 	mov.w	ip, #0
 800be5e:	4618      	mov	r0, r3
 800be60:	f853 2b04 	ldr.w	r2, [r3], #4
 800be64:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be68:	d01b      	beq.n	800bea2 <__gethex+0x396>
 800be6a:	3201      	adds	r2, #1
 800be6c:	6002      	str	r2, [r0, #0]
 800be6e:	2d02      	cmp	r5, #2
 800be70:	f104 0314 	add.w	r3, r4, #20
 800be74:	d13c      	bne.n	800bef0 <__gethex+0x3e4>
 800be76:	f8d8 2000 	ldr.w	r2, [r8]
 800be7a:	3a01      	subs	r2, #1
 800be7c:	42b2      	cmp	r2, r6
 800be7e:	d109      	bne.n	800be94 <__gethex+0x388>
 800be80:	1171      	asrs	r1, r6, #5
 800be82:	2201      	movs	r2, #1
 800be84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be88:	f006 061f 	and.w	r6, r6, #31
 800be8c:	fa02 f606 	lsl.w	r6, r2, r6
 800be90:	421e      	tst	r6, r3
 800be92:	d13a      	bne.n	800bf0a <__gethex+0x3fe>
 800be94:	f045 0520 	orr.w	r5, r5, #32
 800be98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be9a:	601c      	str	r4, [r3, #0]
 800be9c:	9b02      	ldr	r3, [sp, #8]
 800be9e:	601f      	str	r7, [r3, #0]
 800bea0:	e6b0      	b.n	800bc04 <__gethex+0xf8>
 800bea2:	4299      	cmp	r1, r3
 800bea4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bea8:	d8d9      	bhi.n	800be5e <__gethex+0x352>
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	459b      	cmp	fp, r3
 800beae:	db17      	blt.n	800bee0 <__gethex+0x3d4>
 800beb0:	6861      	ldr	r1, [r4, #4]
 800beb2:	9801      	ldr	r0, [sp, #4]
 800beb4:	3101      	adds	r1, #1
 800beb6:	f000 f9c3 	bl	800c240 <_Balloc>
 800beba:	4681      	mov	r9, r0
 800bebc:	b918      	cbnz	r0, 800bec6 <__gethex+0x3ba>
 800bebe:	4b1a      	ldr	r3, [pc, #104]	@ (800bf28 <__gethex+0x41c>)
 800bec0:	4602      	mov	r2, r0
 800bec2:	2184      	movs	r1, #132	@ 0x84
 800bec4:	e6c5      	b.n	800bc52 <__gethex+0x146>
 800bec6:	6922      	ldr	r2, [r4, #16]
 800bec8:	3202      	adds	r2, #2
 800beca:	f104 010c 	add.w	r1, r4, #12
 800bece:	0092      	lsls	r2, r2, #2
 800bed0:	300c      	adds	r0, #12
 800bed2:	f7fe fee0 	bl	800ac96 <memcpy>
 800bed6:	4621      	mov	r1, r4
 800bed8:	9801      	ldr	r0, [sp, #4]
 800beda:	f000 f9f1 	bl	800c2c0 <_Bfree>
 800bede:	464c      	mov	r4, r9
 800bee0:	6923      	ldr	r3, [r4, #16]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bee8:	6122      	str	r2, [r4, #16]
 800beea:	2201      	movs	r2, #1
 800beec:	615a      	str	r2, [r3, #20]
 800beee:	e7be      	b.n	800be6e <__gethex+0x362>
 800bef0:	6922      	ldr	r2, [r4, #16]
 800bef2:	455a      	cmp	r2, fp
 800bef4:	dd0b      	ble.n	800bf0e <__gethex+0x402>
 800bef6:	2101      	movs	r1, #1
 800bef8:	4620      	mov	r0, r4
 800befa:	f7ff fd9f 	bl	800ba3c <rshift>
 800befe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf02:	3701      	adds	r7, #1
 800bf04:	42bb      	cmp	r3, r7
 800bf06:	f6ff aee0 	blt.w	800bcca <__gethex+0x1be>
 800bf0a:	2501      	movs	r5, #1
 800bf0c:	e7c2      	b.n	800be94 <__gethex+0x388>
 800bf0e:	f016 061f 	ands.w	r6, r6, #31
 800bf12:	d0fa      	beq.n	800bf0a <__gethex+0x3fe>
 800bf14:	4453      	add	r3, sl
 800bf16:	f1c6 0620 	rsb	r6, r6, #32
 800bf1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf1e:	f000 fa81 	bl	800c424 <__hi0bits>
 800bf22:	42b0      	cmp	r0, r6
 800bf24:	dbe7      	blt.n	800bef6 <__gethex+0x3ea>
 800bf26:	e7f0      	b.n	800bf0a <__gethex+0x3fe>
 800bf28:	0800ec9b 	.word	0x0800ec9b

0800bf2c <L_shift>:
 800bf2c:	f1c2 0208 	rsb	r2, r2, #8
 800bf30:	0092      	lsls	r2, r2, #2
 800bf32:	b570      	push	{r4, r5, r6, lr}
 800bf34:	f1c2 0620 	rsb	r6, r2, #32
 800bf38:	6843      	ldr	r3, [r0, #4]
 800bf3a:	6804      	ldr	r4, [r0, #0]
 800bf3c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf40:	432c      	orrs	r4, r5
 800bf42:	40d3      	lsrs	r3, r2
 800bf44:	6004      	str	r4, [r0, #0]
 800bf46:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf4a:	4288      	cmp	r0, r1
 800bf4c:	d3f4      	bcc.n	800bf38 <L_shift+0xc>
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}

0800bf50 <__match>:
 800bf50:	b530      	push	{r4, r5, lr}
 800bf52:	6803      	ldr	r3, [r0, #0]
 800bf54:	3301      	adds	r3, #1
 800bf56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf5a:	b914      	cbnz	r4, 800bf62 <__match+0x12>
 800bf5c:	6003      	str	r3, [r0, #0]
 800bf5e:	2001      	movs	r0, #1
 800bf60:	bd30      	pop	{r4, r5, pc}
 800bf62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf6a:	2d19      	cmp	r5, #25
 800bf6c:	bf98      	it	ls
 800bf6e:	3220      	addls	r2, #32
 800bf70:	42a2      	cmp	r2, r4
 800bf72:	d0f0      	beq.n	800bf56 <__match+0x6>
 800bf74:	2000      	movs	r0, #0
 800bf76:	e7f3      	b.n	800bf60 <__match+0x10>

0800bf78 <__hexnan>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	680b      	ldr	r3, [r1, #0]
 800bf7e:	6801      	ldr	r1, [r0, #0]
 800bf80:	115e      	asrs	r6, r3, #5
 800bf82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf86:	f013 031f 	ands.w	r3, r3, #31
 800bf8a:	b087      	sub	sp, #28
 800bf8c:	bf18      	it	ne
 800bf8e:	3604      	addne	r6, #4
 800bf90:	2500      	movs	r5, #0
 800bf92:	1f37      	subs	r7, r6, #4
 800bf94:	4682      	mov	sl, r0
 800bf96:	4690      	mov	r8, r2
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf9e:	46b9      	mov	r9, r7
 800bfa0:	463c      	mov	r4, r7
 800bfa2:	9502      	str	r5, [sp, #8]
 800bfa4:	46ab      	mov	fp, r5
 800bfa6:	784a      	ldrb	r2, [r1, #1]
 800bfa8:	1c4b      	adds	r3, r1, #1
 800bfaa:	9303      	str	r3, [sp, #12]
 800bfac:	b342      	cbz	r2, 800c000 <__hexnan+0x88>
 800bfae:	4610      	mov	r0, r2
 800bfb0:	9105      	str	r1, [sp, #20]
 800bfb2:	9204      	str	r2, [sp, #16]
 800bfb4:	f7ff fd94 	bl	800bae0 <__hexdig_fun>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d151      	bne.n	800c060 <__hexnan+0xe8>
 800bfbc:	9a04      	ldr	r2, [sp, #16]
 800bfbe:	9905      	ldr	r1, [sp, #20]
 800bfc0:	2a20      	cmp	r2, #32
 800bfc2:	d818      	bhi.n	800bff6 <__hexnan+0x7e>
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	459b      	cmp	fp, r3
 800bfc8:	dd13      	ble.n	800bff2 <__hexnan+0x7a>
 800bfca:	454c      	cmp	r4, r9
 800bfcc:	d206      	bcs.n	800bfdc <__hexnan+0x64>
 800bfce:	2d07      	cmp	r5, #7
 800bfd0:	dc04      	bgt.n	800bfdc <__hexnan+0x64>
 800bfd2:	462a      	mov	r2, r5
 800bfd4:	4649      	mov	r1, r9
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7ff ffa8 	bl	800bf2c <L_shift>
 800bfdc:	4544      	cmp	r4, r8
 800bfde:	d952      	bls.n	800c086 <__hexnan+0x10e>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f1a4 0904 	sub.w	r9, r4, #4
 800bfe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfea:	f8cd b008 	str.w	fp, [sp, #8]
 800bfee:	464c      	mov	r4, r9
 800bff0:	461d      	mov	r5, r3
 800bff2:	9903      	ldr	r1, [sp, #12]
 800bff4:	e7d7      	b.n	800bfa6 <__hexnan+0x2e>
 800bff6:	2a29      	cmp	r2, #41	@ 0x29
 800bff8:	d157      	bne.n	800c0aa <__hexnan+0x132>
 800bffa:	3102      	adds	r1, #2
 800bffc:	f8ca 1000 	str.w	r1, [sl]
 800c000:	f1bb 0f00 	cmp.w	fp, #0
 800c004:	d051      	beq.n	800c0aa <__hexnan+0x132>
 800c006:	454c      	cmp	r4, r9
 800c008:	d206      	bcs.n	800c018 <__hexnan+0xa0>
 800c00a:	2d07      	cmp	r5, #7
 800c00c:	dc04      	bgt.n	800c018 <__hexnan+0xa0>
 800c00e:	462a      	mov	r2, r5
 800c010:	4649      	mov	r1, r9
 800c012:	4620      	mov	r0, r4
 800c014:	f7ff ff8a 	bl	800bf2c <L_shift>
 800c018:	4544      	cmp	r4, r8
 800c01a:	d936      	bls.n	800c08a <__hexnan+0x112>
 800c01c:	f1a8 0204 	sub.w	r2, r8, #4
 800c020:	4623      	mov	r3, r4
 800c022:	f853 1b04 	ldr.w	r1, [r3], #4
 800c026:	f842 1f04 	str.w	r1, [r2, #4]!
 800c02a:	429f      	cmp	r7, r3
 800c02c:	d2f9      	bcs.n	800c022 <__hexnan+0xaa>
 800c02e:	1b3b      	subs	r3, r7, r4
 800c030:	f023 0303 	bic.w	r3, r3, #3
 800c034:	3304      	adds	r3, #4
 800c036:	3401      	adds	r4, #1
 800c038:	3e03      	subs	r6, #3
 800c03a:	42b4      	cmp	r4, r6
 800c03c:	bf88      	it	hi
 800c03e:	2304      	movhi	r3, #4
 800c040:	4443      	add	r3, r8
 800c042:	2200      	movs	r2, #0
 800c044:	f843 2b04 	str.w	r2, [r3], #4
 800c048:	429f      	cmp	r7, r3
 800c04a:	d2fb      	bcs.n	800c044 <__hexnan+0xcc>
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	b91b      	cbnz	r3, 800c058 <__hexnan+0xe0>
 800c050:	4547      	cmp	r7, r8
 800c052:	d128      	bne.n	800c0a6 <__hexnan+0x12e>
 800c054:	2301      	movs	r3, #1
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	2005      	movs	r0, #5
 800c05a:	b007      	add	sp, #28
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c060:	3501      	adds	r5, #1
 800c062:	2d08      	cmp	r5, #8
 800c064:	f10b 0b01 	add.w	fp, fp, #1
 800c068:	dd06      	ble.n	800c078 <__hexnan+0x100>
 800c06a:	4544      	cmp	r4, r8
 800c06c:	d9c1      	bls.n	800bff2 <__hexnan+0x7a>
 800c06e:	2300      	movs	r3, #0
 800c070:	f844 3c04 	str.w	r3, [r4, #-4]
 800c074:	2501      	movs	r5, #1
 800c076:	3c04      	subs	r4, #4
 800c078:	6822      	ldr	r2, [r4, #0]
 800c07a:	f000 000f 	and.w	r0, r0, #15
 800c07e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c082:	6020      	str	r0, [r4, #0]
 800c084:	e7b5      	b.n	800bff2 <__hexnan+0x7a>
 800c086:	2508      	movs	r5, #8
 800c088:	e7b3      	b.n	800bff2 <__hexnan+0x7a>
 800c08a:	9b01      	ldr	r3, [sp, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0dd      	beq.n	800c04c <__hexnan+0xd4>
 800c090:	f1c3 0320 	rsb	r3, r3, #32
 800c094:	f04f 32ff 	mov.w	r2, #4294967295
 800c098:	40da      	lsrs	r2, r3
 800c09a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0a4:	e7d2      	b.n	800c04c <__hexnan+0xd4>
 800c0a6:	3f04      	subs	r7, #4
 800c0a8:	e7d0      	b.n	800c04c <__hexnan+0xd4>
 800c0aa:	2004      	movs	r0, #4
 800c0ac:	e7d5      	b.n	800c05a <__hexnan+0xe2>
	...

0800c0b0 <malloc>:
 800c0b0:	4b02      	ldr	r3, [pc, #8]	@ (800c0bc <malloc+0xc>)
 800c0b2:	4601      	mov	r1, r0
 800c0b4:	6818      	ldr	r0, [r3, #0]
 800c0b6:	f000 b825 	b.w	800c104 <_malloc_r>
 800c0ba:	bf00      	nop
 800c0bc:	20000204 	.word	0x20000204

0800c0c0 <sbrk_aligned>:
 800c0c0:	b570      	push	{r4, r5, r6, lr}
 800c0c2:	4e0f      	ldr	r6, [pc, #60]	@ (800c100 <sbrk_aligned+0x40>)
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	6831      	ldr	r1, [r6, #0]
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	b911      	cbnz	r1, 800c0d2 <sbrk_aligned+0x12>
 800c0cc:	f001 f9e8 	bl	800d4a0 <_sbrk_r>
 800c0d0:	6030      	str	r0, [r6, #0]
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f001 f9e3 	bl	800d4a0 <_sbrk_r>
 800c0da:	1c43      	adds	r3, r0, #1
 800c0dc:	d103      	bne.n	800c0e6 <sbrk_aligned+0x26>
 800c0de:	f04f 34ff 	mov.w	r4, #4294967295
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	1cc4      	adds	r4, r0, #3
 800c0e8:	f024 0403 	bic.w	r4, r4, #3
 800c0ec:	42a0      	cmp	r0, r4
 800c0ee:	d0f8      	beq.n	800c0e2 <sbrk_aligned+0x22>
 800c0f0:	1a21      	subs	r1, r4, r0
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f001 f9d4 	bl	800d4a0 <_sbrk_r>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d1f2      	bne.n	800c0e2 <sbrk_aligned+0x22>
 800c0fc:	e7ef      	b.n	800c0de <sbrk_aligned+0x1e>
 800c0fe:	bf00      	nop
 800c100:	2000095c 	.word	0x2000095c

0800c104 <_malloc_r>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	1ccd      	adds	r5, r1, #3
 800c10a:	f025 0503 	bic.w	r5, r5, #3
 800c10e:	3508      	adds	r5, #8
 800c110:	2d0c      	cmp	r5, #12
 800c112:	bf38      	it	cc
 800c114:	250c      	movcc	r5, #12
 800c116:	2d00      	cmp	r5, #0
 800c118:	4606      	mov	r6, r0
 800c11a:	db01      	blt.n	800c120 <_malloc_r+0x1c>
 800c11c:	42a9      	cmp	r1, r5
 800c11e:	d904      	bls.n	800c12a <_malloc_r+0x26>
 800c120:	230c      	movs	r3, #12
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	2000      	movs	r0, #0
 800c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c200 <_malloc_r+0xfc>
 800c12e:	f000 f87b 	bl	800c228 <__malloc_lock>
 800c132:	f8d8 3000 	ldr.w	r3, [r8]
 800c136:	461c      	mov	r4, r3
 800c138:	bb44      	cbnz	r4, 800c18c <_malloc_r+0x88>
 800c13a:	4629      	mov	r1, r5
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff ffbf 	bl	800c0c0 <sbrk_aligned>
 800c142:	1c43      	adds	r3, r0, #1
 800c144:	4604      	mov	r4, r0
 800c146:	d158      	bne.n	800c1fa <_malloc_r+0xf6>
 800c148:	f8d8 4000 	ldr.w	r4, [r8]
 800c14c:	4627      	mov	r7, r4
 800c14e:	2f00      	cmp	r7, #0
 800c150:	d143      	bne.n	800c1da <_malloc_r+0xd6>
 800c152:	2c00      	cmp	r4, #0
 800c154:	d04b      	beq.n	800c1ee <_malloc_r+0xea>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	4639      	mov	r1, r7
 800c15a:	4630      	mov	r0, r6
 800c15c:	eb04 0903 	add.w	r9, r4, r3
 800c160:	f001 f99e 	bl	800d4a0 <_sbrk_r>
 800c164:	4581      	cmp	r9, r0
 800c166:	d142      	bne.n	800c1ee <_malloc_r+0xea>
 800c168:	6821      	ldr	r1, [r4, #0]
 800c16a:	1a6d      	subs	r5, r5, r1
 800c16c:	4629      	mov	r1, r5
 800c16e:	4630      	mov	r0, r6
 800c170:	f7ff ffa6 	bl	800c0c0 <sbrk_aligned>
 800c174:	3001      	adds	r0, #1
 800c176:	d03a      	beq.n	800c1ee <_malloc_r+0xea>
 800c178:	6823      	ldr	r3, [r4, #0]
 800c17a:	442b      	add	r3, r5
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	f8d8 3000 	ldr.w	r3, [r8]
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	bb62      	cbnz	r2, 800c1e0 <_malloc_r+0xdc>
 800c186:	f8c8 7000 	str.w	r7, [r8]
 800c18a:	e00f      	b.n	800c1ac <_malloc_r+0xa8>
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	1b52      	subs	r2, r2, r5
 800c190:	d420      	bmi.n	800c1d4 <_malloc_r+0xd0>
 800c192:	2a0b      	cmp	r2, #11
 800c194:	d917      	bls.n	800c1c6 <_malloc_r+0xc2>
 800c196:	1961      	adds	r1, r4, r5
 800c198:	42a3      	cmp	r3, r4
 800c19a:	6025      	str	r5, [r4, #0]
 800c19c:	bf18      	it	ne
 800c19e:	6059      	strne	r1, [r3, #4]
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	bf08      	it	eq
 800c1a4:	f8c8 1000 	streq.w	r1, [r8]
 800c1a8:	5162      	str	r2, [r4, r5]
 800c1aa:	604b      	str	r3, [r1, #4]
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 f841 	bl	800c234 <__malloc_unlock>
 800c1b2:	f104 000b 	add.w	r0, r4, #11
 800c1b6:	1d23      	adds	r3, r4, #4
 800c1b8:	f020 0007 	bic.w	r0, r0, #7
 800c1bc:	1ac2      	subs	r2, r0, r3
 800c1be:	bf1c      	itt	ne
 800c1c0:	1a1b      	subne	r3, r3, r0
 800c1c2:	50a3      	strne	r3, [r4, r2]
 800c1c4:	e7af      	b.n	800c126 <_malloc_r+0x22>
 800c1c6:	6862      	ldr	r2, [r4, #4]
 800c1c8:	42a3      	cmp	r3, r4
 800c1ca:	bf0c      	ite	eq
 800c1cc:	f8c8 2000 	streq.w	r2, [r8]
 800c1d0:	605a      	strne	r2, [r3, #4]
 800c1d2:	e7eb      	b.n	800c1ac <_malloc_r+0xa8>
 800c1d4:	4623      	mov	r3, r4
 800c1d6:	6864      	ldr	r4, [r4, #4]
 800c1d8:	e7ae      	b.n	800c138 <_malloc_r+0x34>
 800c1da:	463c      	mov	r4, r7
 800c1dc:	687f      	ldr	r7, [r7, #4]
 800c1de:	e7b6      	b.n	800c14e <_malloc_r+0x4a>
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d1fb      	bne.n	800c1e0 <_malloc_r+0xdc>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6053      	str	r3, [r2, #4]
 800c1ec:	e7de      	b.n	800c1ac <_malloc_r+0xa8>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	6033      	str	r3, [r6, #0]
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f000 f81e 	bl	800c234 <__malloc_unlock>
 800c1f8:	e794      	b.n	800c124 <_malloc_r+0x20>
 800c1fa:	6005      	str	r5, [r0, #0]
 800c1fc:	e7d6      	b.n	800c1ac <_malloc_r+0xa8>
 800c1fe:	bf00      	nop
 800c200:	20000960 	.word	0x20000960

0800c204 <__ascii_mbtowc>:
 800c204:	b082      	sub	sp, #8
 800c206:	b901      	cbnz	r1, 800c20a <__ascii_mbtowc+0x6>
 800c208:	a901      	add	r1, sp, #4
 800c20a:	b142      	cbz	r2, 800c21e <__ascii_mbtowc+0x1a>
 800c20c:	b14b      	cbz	r3, 800c222 <__ascii_mbtowc+0x1e>
 800c20e:	7813      	ldrb	r3, [r2, #0]
 800c210:	600b      	str	r3, [r1, #0]
 800c212:	7812      	ldrb	r2, [r2, #0]
 800c214:	1e10      	subs	r0, r2, #0
 800c216:	bf18      	it	ne
 800c218:	2001      	movne	r0, #1
 800c21a:	b002      	add	sp, #8
 800c21c:	4770      	bx	lr
 800c21e:	4610      	mov	r0, r2
 800c220:	e7fb      	b.n	800c21a <__ascii_mbtowc+0x16>
 800c222:	f06f 0001 	mvn.w	r0, #1
 800c226:	e7f8      	b.n	800c21a <__ascii_mbtowc+0x16>

0800c228 <__malloc_lock>:
 800c228:	4801      	ldr	r0, [pc, #4]	@ (800c230 <__malloc_lock+0x8>)
 800c22a:	f7fe bd32 	b.w	800ac92 <__retarget_lock_acquire_recursive>
 800c22e:	bf00      	nop
 800c230:	20000958 	.word	0x20000958

0800c234 <__malloc_unlock>:
 800c234:	4801      	ldr	r0, [pc, #4]	@ (800c23c <__malloc_unlock+0x8>)
 800c236:	f7fe bd2d 	b.w	800ac94 <__retarget_lock_release_recursive>
 800c23a:	bf00      	nop
 800c23c:	20000958 	.word	0x20000958

0800c240 <_Balloc>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	69c6      	ldr	r6, [r0, #28]
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	b976      	cbnz	r6, 800c268 <_Balloc+0x28>
 800c24a:	2010      	movs	r0, #16
 800c24c:	f7ff ff30 	bl	800c0b0 <malloc>
 800c250:	4602      	mov	r2, r0
 800c252:	61e0      	str	r0, [r4, #28]
 800c254:	b920      	cbnz	r0, 800c260 <_Balloc+0x20>
 800c256:	4b18      	ldr	r3, [pc, #96]	@ (800c2b8 <_Balloc+0x78>)
 800c258:	4818      	ldr	r0, [pc, #96]	@ (800c2bc <_Balloc+0x7c>)
 800c25a:	216b      	movs	r1, #107	@ 0x6b
 800c25c:	f7fe fd3a 	bl	800acd4 <__assert_func>
 800c260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c264:	6006      	str	r6, [r0, #0]
 800c266:	60c6      	str	r6, [r0, #12]
 800c268:	69e6      	ldr	r6, [r4, #28]
 800c26a:	68f3      	ldr	r3, [r6, #12]
 800c26c:	b183      	cbz	r3, 800c290 <_Balloc+0x50>
 800c26e:	69e3      	ldr	r3, [r4, #28]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c276:	b9b8      	cbnz	r0, 800c2a8 <_Balloc+0x68>
 800c278:	2101      	movs	r1, #1
 800c27a:	fa01 f605 	lsl.w	r6, r1, r5
 800c27e:	1d72      	adds	r2, r6, #5
 800c280:	0092      	lsls	r2, r2, #2
 800c282:	4620      	mov	r0, r4
 800c284:	f001 f923 	bl	800d4ce <_calloc_r>
 800c288:	b160      	cbz	r0, 800c2a4 <_Balloc+0x64>
 800c28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c28e:	e00e      	b.n	800c2ae <_Balloc+0x6e>
 800c290:	2221      	movs	r2, #33	@ 0x21
 800c292:	2104      	movs	r1, #4
 800c294:	4620      	mov	r0, r4
 800c296:	f001 f91a 	bl	800d4ce <_calloc_r>
 800c29a:	69e3      	ldr	r3, [r4, #28]
 800c29c:	60f0      	str	r0, [r6, #12]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e4      	bne.n	800c26e <_Balloc+0x2e>
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}
 800c2a8:	6802      	ldr	r2, [r0, #0]
 800c2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2b4:	e7f7      	b.n	800c2a6 <_Balloc+0x66>
 800c2b6:	bf00      	nop
 800c2b8:	0800eb81 	.word	0x0800eb81
 800c2bc:	0800ed0c 	.word	0x0800ed0c

0800c2c0 <_Bfree>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	69c6      	ldr	r6, [r0, #28]
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	b976      	cbnz	r6, 800c2e8 <_Bfree+0x28>
 800c2ca:	2010      	movs	r0, #16
 800c2cc:	f7ff fef0 	bl	800c0b0 <malloc>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	61e8      	str	r0, [r5, #28]
 800c2d4:	b920      	cbnz	r0, 800c2e0 <_Bfree+0x20>
 800c2d6:	4b09      	ldr	r3, [pc, #36]	@ (800c2fc <_Bfree+0x3c>)
 800c2d8:	4809      	ldr	r0, [pc, #36]	@ (800c300 <_Bfree+0x40>)
 800c2da:	218f      	movs	r1, #143	@ 0x8f
 800c2dc:	f7fe fcfa 	bl	800acd4 <__assert_func>
 800c2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2e4:	6006      	str	r6, [r0, #0]
 800c2e6:	60c6      	str	r6, [r0, #12]
 800c2e8:	b13c      	cbz	r4, 800c2fa <_Bfree+0x3a>
 800c2ea:	69eb      	ldr	r3, [r5, #28]
 800c2ec:	6862      	ldr	r2, [r4, #4]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2f4:	6021      	str	r1, [r4, #0]
 800c2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	0800eb81 	.word	0x0800eb81
 800c300:	0800ed0c 	.word	0x0800ed0c

0800c304 <__multadd>:
 800c304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c308:	690d      	ldr	r5, [r1, #16]
 800c30a:	4607      	mov	r7, r0
 800c30c:	460c      	mov	r4, r1
 800c30e:	461e      	mov	r6, r3
 800c310:	f101 0c14 	add.w	ip, r1, #20
 800c314:	2000      	movs	r0, #0
 800c316:	f8dc 3000 	ldr.w	r3, [ip]
 800c31a:	b299      	uxth	r1, r3
 800c31c:	fb02 6101 	mla	r1, r2, r1, r6
 800c320:	0c1e      	lsrs	r6, r3, #16
 800c322:	0c0b      	lsrs	r3, r1, #16
 800c324:	fb02 3306 	mla	r3, r2, r6, r3
 800c328:	b289      	uxth	r1, r1
 800c32a:	3001      	adds	r0, #1
 800c32c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c330:	4285      	cmp	r5, r0
 800c332:	f84c 1b04 	str.w	r1, [ip], #4
 800c336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c33a:	dcec      	bgt.n	800c316 <__multadd+0x12>
 800c33c:	b30e      	cbz	r6, 800c382 <__multadd+0x7e>
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	42ab      	cmp	r3, r5
 800c342:	dc19      	bgt.n	800c378 <__multadd+0x74>
 800c344:	6861      	ldr	r1, [r4, #4]
 800c346:	4638      	mov	r0, r7
 800c348:	3101      	adds	r1, #1
 800c34a:	f7ff ff79 	bl	800c240 <_Balloc>
 800c34e:	4680      	mov	r8, r0
 800c350:	b928      	cbnz	r0, 800c35e <__multadd+0x5a>
 800c352:	4602      	mov	r2, r0
 800c354:	4b0c      	ldr	r3, [pc, #48]	@ (800c388 <__multadd+0x84>)
 800c356:	480d      	ldr	r0, [pc, #52]	@ (800c38c <__multadd+0x88>)
 800c358:	21ba      	movs	r1, #186	@ 0xba
 800c35a:	f7fe fcbb 	bl	800acd4 <__assert_func>
 800c35e:	6922      	ldr	r2, [r4, #16]
 800c360:	3202      	adds	r2, #2
 800c362:	f104 010c 	add.w	r1, r4, #12
 800c366:	0092      	lsls	r2, r2, #2
 800c368:	300c      	adds	r0, #12
 800c36a:	f7fe fc94 	bl	800ac96 <memcpy>
 800c36e:	4621      	mov	r1, r4
 800c370:	4638      	mov	r0, r7
 800c372:	f7ff ffa5 	bl	800c2c0 <_Bfree>
 800c376:	4644      	mov	r4, r8
 800c378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c37c:	3501      	adds	r5, #1
 800c37e:	615e      	str	r6, [r3, #20]
 800c380:	6125      	str	r5, [r4, #16]
 800c382:	4620      	mov	r0, r4
 800c384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c388:	0800ec9b 	.word	0x0800ec9b
 800c38c:	0800ed0c 	.word	0x0800ed0c

0800c390 <__s2b>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	460c      	mov	r4, r1
 800c396:	4615      	mov	r5, r2
 800c398:	461f      	mov	r7, r3
 800c39a:	2209      	movs	r2, #9
 800c39c:	3308      	adds	r3, #8
 800c39e:	4606      	mov	r6, r0
 800c3a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	db09      	blt.n	800c3c0 <__s2b+0x30>
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7ff ff47 	bl	800c240 <_Balloc>
 800c3b2:	b940      	cbnz	r0, 800c3c6 <__s2b+0x36>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	4b19      	ldr	r3, [pc, #100]	@ (800c41c <__s2b+0x8c>)
 800c3b8:	4819      	ldr	r0, [pc, #100]	@ (800c420 <__s2b+0x90>)
 800c3ba:	21d3      	movs	r1, #211	@ 0xd3
 800c3bc:	f7fe fc8a 	bl	800acd4 <__assert_func>
 800c3c0:	0052      	lsls	r2, r2, #1
 800c3c2:	3101      	adds	r1, #1
 800c3c4:	e7f0      	b.n	800c3a8 <__s2b+0x18>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	6143      	str	r3, [r0, #20]
 800c3ca:	2d09      	cmp	r5, #9
 800c3cc:	f04f 0301 	mov.w	r3, #1
 800c3d0:	6103      	str	r3, [r0, #16]
 800c3d2:	dd16      	ble.n	800c402 <__s2b+0x72>
 800c3d4:	f104 0909 	add.w	r9, r4, #9
 800c3d8:	46c8      	mov	r8, r9
 800c3da:	442c      	add	r4, r5
 800c3dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	3b30      	subs	r3, #48	@ 0x30
 800c3e4:	220a      	movs	r2, #10
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff ff8c 	bl	800c304 <__multadd>
 800c3ec:	45a0      	cmp	r8, r4
 800c3ee:	d1f5      	bne.n	800c3dc <__s2b+0x4c>
 800c3f0:	f1a5 0408 	sub.w	r4, r5, #8
 800c3f4:	444c      	add	r4, r9
 800c3f6:	1b2d      	subs	r5, r5, r4
 800c3f8:	1963      	adds	r3, r4, r5
 800c3fa:	42bb      	cmp	r3, r7
 800c3fc:	db04      	blt.n	800c408 <__s2b+0x78>
 800c3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c402:	340a      	adds	r4, #10
 800c404:	2509      	movs	r5, #9
 800c406:	e7f6      	b.n	800c3f6 <__s2b+0x66>
 800c408:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c40c:	4601      	mov	r1, r0
 800c40e:	3b30      	subs	r3, #48	@ 0x30
 800c410:	220a      	movs	r2, #10
 800c412:	4630      	mov	r0, r6
 800c414:	f7ff ff76 	bl	800c304 <__multadd>
 800c418:	e7ee      	b.n	800c3f8 <__s2b+0x68>
 800c41a:	bf00      	nop
 800c41c:	0800ec9b 	.word	0x0800ec9b
 800c420:	0800ed0c 	.word	0x0800ed0c

0800c424 <__hi0bits>:
 800c424:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c428:	4603      	mov	r3, r0
 800c42a:	bf36      	itet	cc
 800c42c:	0403      	lslcc	r3, r0, #16
 800c42e:	2000      	movcs	r0, #0
 800c430:	2010      	movcc	r0, #16
 800c432:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c436:	bf3c      	itt	cc
 800c438:	021b      	lslcc	r3, r3, #8
 800c43a:	3008      	addcc	r0, #8
 800c43c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c440:	bf3c      	itt	cc
 800c442:	011b      	lslcc	r3, r3, #4
 800c444:	3004      	addcc	r0, #4
 800c446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c44a:	bf3c      	itt	cc
 800c44c:	009b      	lslcc	r3, r3, #2
 800c44e:	3002      	addcc	r0, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	db05      	blt.n	800c460 <__hi0bits+0x3c>
 800c454:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c458:	f100 0001 	add.w	r0, r0, #1
 800c45c:	bf08      	it	eq
 800c45e:	2020      	moveq	r0, #32
 800c460:	4770      	bx	lr

0800c462 <__lo0bits>:
 800c462:	6803      	ldr	r3, [r0, #0]
 800c464:	4602      	mov	r2, r0
 800c466:	f013 0007 	ands.w	r0, r3, #7
 800c46a:	d00b      	beq.n	800c484 <__lo0bits+0x22>
 800c46c:	07d9      	lsls	r1, r3, #31
 800c46e:	d421      	bmi.n	800c4b4 <__lo0bits+0x52>
 800c470:	0798      	lsls	r0, r3, #30
 800c472:	bf49      	itett	mi
 800c474:	085b      	lsrmi	r3, r3, #1
 800c476:	089b      	lsrpl	r3, r3, #2
 800c478:	2001      	movmi	r0, #1
 800c47a:	6013      	strmi	r3, [r2, #0]
 800c47c:	bf5c      	itt	pl
 800c47e:	6013      	strpl	r3, [r2, #0]
 800c480:	2002      	movpl	r0, #2
 800c482:	4770      	bx	lr
 800c484:	b299      	uxth	r1, r3
 800c486:	b909      	cbnz	r1, 800c48c <__lo0bits+0x2a>
 800c488:	0c1b      	lsrs	r3, r3, #16
 800c48a:	2010      	movs	r0, #16
 800c48c:	b2d9      	uxtb	r1, r3
 800c48e:	b909      	cbnz	r1, 800c494 <__lo0bits+0x32>
 800c490:	3008      	adds	r0, #8
 800c492:	0a1b      	lsrs	r3, r3, #8
 800c494:	0719      	lsls	r1, r3, #28
 800c496:	bf04      	itt	eq
 800c498:	091b      	lsreq	r3, r3, #4
 800c49a:	3004      	addeq	r0, #4
 800c49c:	0799      	lsls	r1, r3, #30
 800c49e:	bf04      	itt	eq
 800c4a0:	089b      	lsreq	r3, r3, #2
 800c4a2:	3002      	addeq	r0, #2
 800c4a4:	07d9      	lsls	r1, r3, #31
 800c4a6:	d403      	bmi.n	800c4b0 <__lo0bits+0x4e>
 800c4a8:	085b      	lsrs	r3, r3, #1
 800c4aa:	f100 0001 	add.w	r0, r0, #1
 800c4ae:	d003      	beq.n	800c4b8 <__lo0bits+0x56>
 800c4b0:	6013      	str	r3, [r2, #0]
 800c4b2:	4770      	bx	lr
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	4770      	bx	lr
 800c4b8:	2020      	movs	r0, #32
 800c4ba:	4770      	bx	lr

0800c4bc <__i2b>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	460c      	mov	r4, r1
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	f7ff febd 	bl	800c240 <_Balloc>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	b928      	cbnz	r0, 800c4d6 <__i2b+0x1a>
 800c4ca:	4b05      	ldr	r3, [pc, #20]	@ (800c4e0 <__i2b+0x24>)
 800c4cc:	4805      	ldr	r0, [pc, #20]	@ (800c4e4 <__i2b+0x28>)
 800c4ce:	f240 1145 	movw	r1, #325	@ 0x145
 800c4d2:	f7fe fbff 	bl	800acd4 <__assert_func>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	6144      	str	r4, [r0, #20]
 800c4da:	6103      	str	r3, [r0, #16]
 800c4dc:	bd10      	pop	{r4, pc}
 800c4de:	bf00      	nop
 800c4e0:	0800ec9b 	.word	0x0800ec9b
 800c4e4:	0800ed0c 	.word	0x0800ed0c

0800c4e8 <__multiply>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	4614      	mov	r4, r2
 800c4ee:	690a      	ldr	r2, [r1, #16]
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	bfa8      	it	ge
 800c4f6:	4623      	movge	r3, r4
 800c4f8:	460f      	mov	r7, r1
 800c4fa:	bfa4      	itt	ge
 800c4fc:	460c      	movge	r4, r1
 800c4fe:	461f      	movge	r7, r3
 800c500:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c504:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c508:	68a3      	ldr	r3, [r4, #8]
 800c50a:	6861      	ldr	r1, [r4, #4]
 800c50c:	eb0a 0609 	add.w	r6, sl, r9
 800c510:	42b3      	cmp	r3, r6
 800c512:	b085      	sub	sp, #20
 800c514:	bfb8      	it	lt
 800c516:	3101      	addlt	r1, #1
 800c518:	f7ff fe92 	bl	800c240 <_Balloc>
 800c51c:	b930      	cbnz	r0, 800c52c <__multiply+0x44>
 800c51e:	4602      	mov	r2, r0
 800c520:	4b44      	ldr	r3, [pc, #272]	@ (800c634 <__multiply+0x14c>)
 800c522:	4845      	ldr	r0, [pc, #276]	@ (800c638 <__multiply+0x150>)
 800c524:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c528:	f7fe fbd4 	bl	800acd4 <__assert_func>
 800c52c:	f100 0514 	add.w	r5, r0, #20
 800c530:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c534:	462b      	mov	r3, r5
 800c536:	2200      	movs	r2, #0
 800c538:	4543      	cmp	r3, r8
 800c53a:	d321      	bcc.n	800c580 <__multiply+0x98>
 800c53c:	f107 0114 	add.w	r1, r7, #20
 800c540:	f104 0214 	add.w	r2, r4, #20
 800c544:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c548:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c54c:	9302      	str	r3, [sp, #8]
 800c54e:	1b13      	subs	r3, r2, r4
 800c550:	3b15      	subs	r3, #21
 800c552:	f023 0303 	bic.w	r3, r3, #3
 800c556:	3304      	adds	r3, #4
 800c558:	f104 0715 	add.w	r7, r4, #21
 800c55c:	42ba      	cmp	r2, r7
 800c55e:	bf38      	it	cc
 800c560:	2304      	movcc	r3, #4
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	9b02      	ldr	r3, [sp, #8]
 800c566:	9103      	str	r1, [sp, #12]
 800c568:	428b      	cmp	r3, r1
 800c56a:	d80c      	bhi.n	800c586 <__multiply+0x9e>
 800c56c:	2e00      	cmp	r6, #0
 800c56e:	dd03      	ble.n	800c578 <__multiply+0x90>
 800c570:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c574:	2b00      	cmp	r3, #0
 800c576:	d05b      	beq.n	800c630 <__multiply+0x148>
 800c578:	6106      	str	r6, [r0, #16]
 800c57a:	b005      	add	sp, #20
 800c57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c580:	f843 2b04 	str.w	r2, [r3], #4
 800c584:	e7d8      	b.n	800c538 <__multiply+0x50>
 800c586:	f8b1 a000 	ldrh.w	sl, [r1]
 800c58a:	f1ba 0f00 	cmp.w	sl, #0
 800c58e:	d024      	beq.n	800c5da <__multiply+0xf2>
 800c590:	f104 0e14 	add.w	lr, r4, #20
 800c594:	46a9      	mov	r9, r5
 800c596:	f04f 0c00 	mov.w	ip, #0
 800c59a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c59e:	f8d9 3000 	ldr.w	r3, [r9]
 800c5a2:	fa1f fb87 	uxth.w	fp, r7
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c5ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c5b0:	f8d9 7000 	ldr.w	r7, [r9]
 800c5b4:	4463      	add	r3, ip
 800c5b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5ba:	fb0a c70b 	mla	r7, sl, fp, ip
 800c5be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5c8:	4572      	cmp	r2, lr
 800c5ca:	f849 3b04 	str.w	r3, [r9], #4
 800c5ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c5d2:	d8e2      	bhi.n	800c59a <__multiply+0xb2>
 800c5d4:	9b01      	ldr	r3, [sp, #4]
 800c5d6:	f845 c003 	str.w	ip, [r5, r3]
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c5e0:	3104      	adds	r1, #4
 800c5e2:	f1b9 0f00 	cmp.w	r9, #0
 800c5e6:	d021      	beq.n	800c62c <__multiply+0x144>
 800c5e8:	682b      	ldr	r3, [r5, #0]
 800c5ea:	f104 0c14 	add.w	ip, r4, #20
 800c5ee:	46ae      	mov	lr, r5
 800c5f0:	f04f 0a00 	mov.w	sl, #0
 800c5f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c5f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c5fc:	fb09 770b 	mla	r7, r9, fp, r7
 800c600:	4457      	add	r7, sl
 800c602:	b29b      	uxth	r3, r3
 800c604:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c608:	f84e 3b04 	str.w	r3, [lr], #4
 800c60c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c614:	f8be 3000 	ldrh.w	r3, [lr]
 800c618:	fb09 330a 	mla	r3, r9, sl, r3
 800c61c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c620:	4562      	cmp	r2, ip
 800c622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c626:	d8e5      	bhi.n	800c5f4 <__multiply+0x10c>
 800c628:	9f01      	ldr	r7, [sp, #4]
 800c62a:	51eb      	str	r3, [r5, r7]
 800c62c:	3504      	adds	r5, #4
 800c62e:	e799      	b.n	800c564 <__multiply+0x7c>
 800c630:	3e01      	subs	r6, #1
 800c632:	e79b      	b.n	800c56c <__multiply+0x84>
 800c634:	0800ec9b 	.word	0x0800ec9b
 800c638:	0800ed0c 	.word	0x0800ed0c

0800c63c <__pow5mult>:
 800c63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c640:	4615      	mov	r5, r2
 800c642:	f012 0203 	ands.w	r2, r2, #3
 800c646:	4607      	mov	r7, r0
 800c648:	460e      	mov	r6, r1
 800c64a:	d007      	beq.n	800c65c <__pow5mult+0x20>
 800c64c:	4c25      	ldr	r4, [pc, #148]	@ (800c6e4 <__pow5mult+0xa8>)
 800c64e:	3a01      	subs	r2, #1
 800c650:	2300      	movs	r3, #0
 800c652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c656:	f7ff fe55 	bl	800c304 <__multadd>
 800c65a:	4606      	mov	r6, r0
 800c65c:	10ad      	asrs	r5, r5, #2
 800c65e:	d03d      	beq.n	800c6dc <__pow5mult+0xa0>
 800c660:	69fc      	ldr	r4, [r7, #28]
 800c662:	b97c      	cbnz	r4, 800c684 <__pow5mult+0x48>
 800c664:	2010      	movs	r0, #16
 800c666:	f7ff fd23 	bl	800c0b0 <malloc>
 800c66a:	4602      	mov	r2, r0
 800c66c:	61f8      	str	r0, [r7, #28]
 800c66e:	b928      	cbnz	r0, 800c67c <__pow5mult+0x40>
 800c670:	4b1d      	ldr	r3, [pc, #116]	@ (800c6e8 <__pow5mult+0xac>)
 800c672:	481e      	ldr	r0, [pc, #120]	@ (800c6ec <__pow5mult+0xb0>)
 800c674:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c678:	f7fe fb2c 	bl	800acd4 <__assert_func>
 800c67c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c680:	6004      	str	r4, [r0, #0]
 800c682:	60c4      	str	r4, [r0, #12]
 800c684:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c68c:	b94c      	cbnz	r4, 800c6a2 <__pow5mult+0x66>
 800c68e:	f240 2171 	movw	r1, #625	@ 0x271
 800c692:	4638      	mov	r0, r7
 800c694:	f7ff ff12 	bl	800c4bc <__i2b>
 800c698:	2300      	movs	r3, #0
 800c69a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c69e:	4604      	mov	r4, r0
 800c6a0:	6003      	str	r3, [r0, #0]
 800c6a2:	f04f 0900 	mov.w	r9, #0
 800c6a6:	07eb      	lsls	r3, r5, #31
 800c6a8:	d50a      	bpl.n	800c6c0 <__pow5mult+0x84>
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	f7ff ff1a 	bl	800c4e8 <__multiply>
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff fe01 	bl	800c2c0 <_Bfree>
 800c6be:	4646      	mov	r6, r8
 800c6c0:	106d      	asrs	r5, r5, #1
 800c6c2:	d00b      	beq.n	800c6dc <__pow5mult+0xa0>
 800c6c4:	6820      	ldr	r0, [r4, #0]
 800c6c6:	b938      	cbnz	r0, 800c6d8 <__pow5mult+0x9c>
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f7ff ff0b 	bl	800c4e8 <__multiply>
 800c6d2:	6020      	str	r0, [r4, #0]
 800c6d4:	f8c0 9000 	str.w	r9, [r0]
 800c6d8:	4604      	mov	r4, r0
 800c6da:	e7e4      	b.n	800c6a6 <__pow5mult+0x6a>
 800c6dc:	4630      	mov	r0, r6
 800c6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0800ed68 	.word	0x0800ed68
 800c6e8:	0800eb81 	.word	0x0800eb81
 800c6ec:	0800ed0c 	.word	0x0800ed0c

0800c6f0 <__lshift>:
 800c6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	6849      	ldr	r1, [r1, #4]
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6fe:	68a3      	ldr	r3, [r4, #8]
 800c700:	4607      	mov	r7, r0
 800c702:	4691      	mov	r9, r2
 800c704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c708:	f108 0601 	add.w	r6, r8, #1
 800c70c:	42b3      	cmp	r3, r6
 800c70e:	db0b      	blt.n	800c728 <__lshift+0x38>
 800c710:	4638      	mov	r0, r7
 800c712:	f7ff fd95 	bl	800c240 <_Balloc>
 800c716:	4605      	mov	r5, r0
 800c718:	b948      	cbnz	r0, 800c72e <__lshift+0x3e>
 800c71a:	4602      	mov	r2, r0
 800c71c:	4b28      	ldr	r3, [pc, #160]	@ (800c7c0 <__lshift+0xd0>)
 800c71e:	4829      	ldr	r0, [pc, #164]	@ (800c7c4 <__lshift+0xd4>)
 800c720:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c724:	f7fe fad6 	bl	800acd4 <__assert_func>
 800c728:	3101      	adds	r1, #1
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	e7ee      	b.n	800c70c <__lshift+0x1c>
 800c72e:	2300      	movs	r3, #0
 800c730:	f100 0114 	add.w	r1, r0, #20
 800c734:	f100 0210 	add.w	r2, r0, #16
 800c738:	4618      	mov	r0, r3
 800c73a:	4553      	cmp	r3, sl
 800c73c:	db33      	blt.n	800c7a6 <__lshift+0xb6>
 800c73e:	6920      	ldr	r0, [r4, #16]
 800c740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c744:	f104 0314 	add.w	r3, r4, #20
 800c748:	f019 091f 	ands.w	r9, r9, #31
 800c74c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c750:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c754:	d02b      	beq.n	800c7ae <__lshift+0xbe>
 800c756:	f1c9 0e20 	rsb	lr, r9, #32
 800c75a:	468a      	mov	sl, r1
 800c75c:	2200      	movs	r2, #0
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	fa00 f009 	lsl.w	r0, r0, r9
 800c764:	4310      	orrs	r0, r2
 800c766:	f84a 0b04 	str.w	r0, [sl], #4
 800c76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76e:	459c      	cmp	ip, r3
 800c770:	fa22 f20e 	lsr.w	r2, r2, lr
 800c774:	d8f3      	bhi.n	800c75e <__lshift+0x6e>
 800c776:	ebac 0304 	sub.w	r3, ip, r4
 800c77a:	3b15      	subs	r3, #21
 800c77c:	f023 0303 	bic.w	r3, r3, #3
 800c780:	3304      	adds	r3, #4
 800c782:	f104 0015 	add.w	r0, r4, #21
 800c786:	4584      	cmp	ip, r0
 800c788:	bf38      	it	cc
 800c78a:	2304      	movcc	r3, #4
 800c78c:	50ca      	str	r2, [r1, r3]
 800c78e:	b10a      	cbz	r2, 800c794 <__lshift+0xa4>
 800c790:	f108 0602 	add.w	r6, r8, #2
 800c794:	3e01      	subs	r6, #1
 800c796:	4638      	mov	r0, r7
 800c798:	612e      	str	r6, [r5, #16]
 800c79a:	4621      	mov	r1, r4
 800c79c:	f7ff fd90 	bl	800c2c0 <_Bfree>
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	e7c5      	b.n	800c73a <__lshift+0x4a>
 800c7ae:	3904      	subs	r1, #4
 800c7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7b8:	459c      	cmp	ip, r3
 800c7ba:	d8f9      	bhi.n	800c7b0 <__lshift+0xc0>
 800c7bc:	e7ea      	b.n	800c794 <__lshift+0xa4>
 800c7be:	bf00      	nop
 800c7c0:	0800ec9b 	.word	0x0800ec9b
 800c7c4:	0800ed0c 	.word	0x0800ed0c

0800c7c8 <__mcmp>:
 800c7c8:	690a      	ldr	r2, [r1, #16]
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	6900      	ldr	r0, [r0, #16]
 800c7ce:	1a80      	subs	r0, r0, r2
 800c7d0:	b530      	push	{r4, r5, lr}
 800c7d2:	d10e      	bne.n	800c7f2 <__mcmp+0x2a>
 800c7d4:	3314      	adds	r3, #20
 800c7d6:	3114      	adds	r1, #20
 800c7d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7e8:	4295      	cmp	r5, r2
 800c7ea:	d003      	beq.n	800c7f4 <__mcmp+0x2c>
 800c7ec:	d205      	bcs.n	800c7fa <__mcmp+0x32>
 800c7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f2:	bd30      	pop	{r4, r5, pc}
 800c7f4:	42a3      	cmp	r3, r4
 800c7f6:	d3f3      	bcc.n	800c7e0 <__mcmp+0x18>
 800c7f8:	e7fb      	b.n	800c7f2 <__mcmp+0x2a>
 800c7fa:	2001      	movs	r0, #1
 800c7fc:	e7f9      	b.n	800c7f2 <__mcmp+0x2a>
	...

0800c800 <__mdiff>:
 800c800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	4689      	mov	r9, r1
 800c806:	4606      	mov	r6, r0
 800c808:	4611      	mov	r1, r2
 800c80a:	4648      	mov	r0, r9
 800c80c:	4614      	mov	r4, r2
 800c80e:	f7ff ffdb 	bl	800c7c8 <__mcmp>
 800c812:	1e05      	subs	r5, r0, #0
 800c814:	d112      	bne.n	800c83c <__mdiff+0x3c>
 800c816:	4629      	mov	r1, r5
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff fd11 	bl	800c240 <_Balloc>
 800c81e:	4602      	mov	r2, r0
 800c820:	b928      	cbnz	r0, 800c82e <__mdiff+0x2e>
 800c822:	4b3f      	ldr	r3, [pc, #252]	@ (800c920 <__mdiff+0x120>)
 800c824:	f240 2137 	movw	r1, #567	@ 0x237
 800c828:	483e      	ldr	r0, [pc, #248]	@ (800c924 <__mdiff+0x124>)
 800c82a:	f7fe fa53 	bl	800acd4 <__assert_func>
 800c82e:	2301      	movs	r3, #1
 800c830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c834:	4610      	mov	r0, r2
 800c836:	b003      	add	sp, #12
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	bfbc      	itt	lt
 800c83e:	464b      	movlt	r3, r9
 800c840:	46a1      	movlt	r9, r4
 800c842:	4630      	mov	r0, r6
 800c844:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c848:	bfba      	itte	lt
 800c84a:	461c      	movlt	r4, r3
 800c84c:	2501      	movlt	r5, #1
 800c84e:	2500      	movge	r5, #0
 800c850:	f7ff fcf6 	bl	800c240 <_Balloc>
 800c854:	4602      	mov	r2, r0
 800c856:	b918      	cbnz	r0, 800c860 <__mdiff+0x60>
 800c858:	4b31      	ldr	r3, [pc, #196]	@ (800c920 <__mdiff+0x120>)
 800c85a:	f240 2145 	movw	r1, #581	@ 0x245
 800c85e:	e7e3      	b.n	800c828 <__mdiff+0x28>
 800c860:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c864:	6926      	ldr	r6, [r4, #16]
 800c866:	60c5      	str	r5, [r0, #12]
 800c868:	f109 0310 	add.w	r3, r9, #16
 800c86c:	f109 0514 	add.w	r5, r9, #20
 800c870:	f104 0e14 	add.w	lr, r4, #20
 800c874:	f100 0b14 	add.w	fp, r0, #20
 800c878:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c87c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	46d9      	mov	r9, fp
 800c884:	f04f 0c00 	mov.w	ip, #0
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c88e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	fa1f f38a 	uxth.w	r3, sl
 800c898:	4619      	mov	r1, r3
 800c89a:	b283      	uxth	r3, r0
 800c89c:	1acb      	subs	r3, r1, r3
 800c89e:	0c00      	lsrs	r0, r0, #16
 800c8a0:	4463      	add	r3, ip
 800c8a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c8a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c8b0:	4576      	cmp	r6, lr
 800c8b2:	f849 3b04 	str.w	r3, [r9], #4
 800c8b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8ba:	d8e5      	bhi.n	800c888 <__mdiff+0x88>
 800c8bc:	1b33      	subs	r3, r6, r4
 800c8be:	3b15      	subs	r3, #21
 800c8c0:	f023 0303 	bic.w	r3, r3, #3
 800c8c4:	3415      	adds	r4, #21
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	42a6      	cmp	r6, r4
 800c8ca:	bf38      	it	cc
 800c8cc:	2304      	movcc	r3, #4
 800c8ce:	441d      	add	r5, r3
 800c8d0:	445b      	add	r3, fp
 800c8d2:	461e      	mov	r6, r3
 800c8d4:	462c      	mov	r4, r5
 800c8d6:	4544      	cmp	r4, r8
 800c8d8:	d30e      	bcc.n	800c8f8 <__mdiff+0xf8>
 800c8da:	f108 0103 	add.w	r1, r8, #3
 800c8de:	1b49      	subs	r1, r1, r5
 800c8e0:	f021 0103 	bic.w	r1, r1, #3
 800c8e4:	3d03      	subs	r5, #3
 800c8e6:	45a8      	cmp	r8, r5
 800c8e8:	bf38      	it	cc
 800c8ea:	2100      	movcc	r1, #0
 800c8ec:	440b      	add	r3, r1
 800c8ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8f2:	b191      	cbz	r1, 800c91a <__mdiff+0x11a>
 800c8f4:	6117      	str	r7, [r2, #16]
 800c8f6:	e79d      	b.n	800c834 <__mdiff+0x34>
 800c8f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c8fc:	46e6      	mov	lr, ip
 800c8fe:	0c08      	lsrs	r0, r1, #16
 800c900:	fa1c fc81 	uxtah	ip, ip, r1
 800c904:	4471      	add	r1, lr
 800c906:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c90a:	b289      	uxth	r1, r1
 800c90c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c910:	f846 1b04 	str.w	r1, [r6], #4
 800c914:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c918:	e7dd      	b.n	800c8d6 <__mdiff+0xd6>
 800c91a:	3f01      	subs	r7, #1
 800c91c:	e7e7      	b.n	800c8ee <__mdiff+0xee>
 800c91e:	bf00      	nop
 800c920:	0800ec9b 	.word	0x0800ec9b
 800c924:	0800ed0c 	.word	0x0800ed0c

0800c928 <__ulp>:
 800c928:	b082      	sub	sp, #8
 800c92a:	ed8d 0b00 	vstr	d0, [sp]
 800c92e:	9a01      	ldr	r2, [sp, #4]
 800c930:	4b0f      	ldr	r3, [pc, #60]	@ (800c970 <__ulp+0x48>)
 800c932:	4013      	ands	r3, r2
 800c934:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	dc08      	bgt.n	800c94e <__ulp+0x26>
 800c93c:	425b      	negs	r3, r3
 800c93e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c942:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c946:	da04      	bge.n	800c952 <__ulp+0x2a>
 800c948:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c94c:	4113      	asrs	r3, r2
 800c94e:	2200      	movs	r2, #0
 800c950:	e008      	b.n	800c964 <__ulp+0x3c>
 800c952:	f1a2 0314 	sub.w	r3, r2, #20
 800c956:	2b1e      	cmp	r3, #30
 800c958:	bfda      	itte	le
 800c95a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c95e:	40da      	lsrle	r2, r3
 800c960:	2201      	movgt	r2, #1
 800c962:	2300      	movs	r3, #0
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	ec41 0b10 	vmov	d0, r0, r1
 800c96c:	b002      	add	sp, #8
 800c96e:	4770      	bx	lr
 800c970:	7ff00000 	.word	0x7ff00000

0800c974 <__b2d>:
 800c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c978:	6906      	ldr	r6, [r0, #16]
 800c97a:	f100 0814 	add.w	r8, r0, #20
 800c97e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c982:	1f37      	subs	r7, r6, #4
 800c984:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c988:	4610      	mov	r0, r2
 800c98a:	f7ff fd4b 	bl	800c424 <__hi0bits>
 800c98e:	f1c0 0320 	rsb	r3, r0, #32
 800c992:	280a      	cmp	r0, #10
 800c994:	600b      	str	r3, [r1, #0]
 800c996:	491b      	ldr	r1, [pc, #108]	@ (800ca04 <__b2d+0x90>)
 800c998:	dc15      	bgt.n	800c9c6 <__b2d+0x52>
 800c99a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c99e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c9a2:	45b8      	cmp	r8, r7
 800c9a4:	ea43 0501 	orr.w	r5, r3, r1
 800c9a8:	bf34      	ite	cc
 800c9aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c9ae:	2300      	movcs	r3, #0
 800c9b0:	3015      	adds	r0, #21
 800c9b2:	fa02 f000 	lsl.w	r0, r2, r0
 800c9b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c9ba:	4303      	orrs	r3, r0
 800c9bc:	461c      	mov	r4, r3
 800c9be:	ec45 4b10 	vmov	d0, r4, r5
 800c9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c6:	45b8      	cmp	r8, r7
 800c9c8:	bf3a      	itte	cc
 800c9ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c9ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800c9d2:	2300      	movcs	r3, #0
 800c9d4:	380b      	subs	r0, #11
 800c9d6:	d012      	beq.n	800c9fe <__b2d+0x8a>
 800c9d8:	f1c0 0120 	rsb	r1, r0, #32
 800c9dc:	fa23 f401 	lsr.w	r4, r3, r1
 800c9e0:	4082      	lsls	r2, r0
 800c9e2:	4322      	orrs	r2, r4
 800c9e4:	4547      	cmp	r7, r8
 800c9e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c9ea:	bf8c      	ite	hi
 800c9ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c9f0:	2200      	movls	r2, #0
 800c9f2:	4083      	lsls	r3, r0
 800c9f4:	40ca      	lsrs	r2, r1
 800c9f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	e7de      	b.n	800c9bc <__b2d+0x48>
 800c9fe:	ea42 0501 	orr.w	r5, r2, r1
 800ca02:	e7db      	b.n	800c9bc <__b2d+0x48>
 800ca04:	3ff00000 	.word	0x3ff00000

0800ca08 <__d2b>:
 800ca08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	2101      	movs	r1, #1
 800ca10:	ec59 8b10 	vmov	r8, r9, d0
 800ca14:	4616      	mov	r6, r2
 800ca16:	f7ff fc13 	bl	800c240 <_Balloc>
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	b930      	cbnz	r0, 800ca2c <__d2b+0x24>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4b23      	ldr	r3, [pc, #140]	@ (800cab0 <__d2b+0xa8>)
 800ca22:	4824      	ldr	r0, [pc, #144]	@ (800cab4 <__d2b+0xac>)
 800ca24:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca28:	f7fe f954 	bl	800acd4 <__assert_func>
 800ca2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca34:	b10d      	cbz	r5, 800ca3a <__d2b+0x32>
 800ca36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	f1b8 0300 	subs.w	r3, r8, #0
 800ca40:	d023      	beq.n	800ca8a <__d2b+0x82>
 800ca42:	4668      	mov	r0, sp
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	f7ff fd0c 	bl	800c462 <__lo0bits>
 800ca4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca4e:	b1d0      	cbz	r0, 800ca86 <__d2b+0x7e>
 800ca50:	f1c0 0320 	rsb	r3, r0, #32
 800ca54:	fa02 f303 	lsl.w	r3, r2, r3
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	40c2      	lsrs	r2, r0
 800ca5c:	6163      	str	r3, [r4, #20]
 800ca5e:	9201      	str	r2, [sp, #4]
 800ca60:	9b01      	ldr	r3, [sp, #4]
 800ca62:	61a3      	str	r3, [r4, #24]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	bf0c      	ite	eq
 800ca68:	2201      	moveq	r2, #1
 800ca6a:	2202      	movne	r2, #2
 800ca6c:	6122      	str	r2, [r4, #16]
 800ca6e:	b1a5      	cbz	r5, 800ca9a <__d2b+0x92>
 800ca70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca74:	4405      	add	r5, r0
 800ca76:	603d      	str	r5, [r7, #0]
 800ca78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	b003      	add	sp, #12
 800ca82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca86:	6161      	str	r1, [r4, #20]
 800ca88:	e7ea      	b.n	800ca60 <__d2b+0x58>
 800ca8a:	a801      	add	r0, sp, #4
 800ca8c:	f7ff fce9 	bl	800c462 <__lo0bits>
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	6163      	str	r3, [r4, #20]
 800ca94:	3020      	adds	r0, #32
 800ca96:	2201      	movs	r2, #1
 800ca98:	e7e8      	b.n	800ca6c <__d2b+0x64>
 800ca9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800caa2:	6038      	str	r0, [r7, #0]
 800caa4:	6918      	ldr	r0, [r3, #16]
 800caa6:	f7ff fcbd 	bl	800c424 <__hi0bits>
 800caaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caae:	e7e5      	b.n	800ca7c <__d2b+0x74>
 800cab0:	0800ec9b 	.word	0x0800ec9b
 800cab4:	0800ed0c 	.word	0x0800ed0c

0800cab8 <__ratio>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	b085      	sub	sp, #20
 800cabe:	e9cd 1000 	strd	r1, r0, [sp]
 800cac2:	a902      	add	r1, sp, #8
 800cac4:	f7ff ff56 	bl	800c974 <__b2d>
 800cac8:	9800      	ldr	r0, [sp, #0]
 800caca:	a903      	add	r1, sp, #12
 800cacc:	ec55 4b10 	vmov	r4, r5, d0
 800cad0:	f7ff ff50 	bl	800c974 <__b2d>
 800cad4:	9b01      	ldr	r3, [sp, #4]
 800cad6:	6919      	ldr	r1, [r3, #16]
 800cad8:	9b00      	ldr	r3, [sp, #0]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	1ac9      	subs	r1, r1, r3
 800cade:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	ec5b ab10 	vmov	sl, fp, d0
 800cae8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800caec:	2b00      	cmp	r3, #0
 800caee:	bfce      	itee	gt
 800caf0:	462a      	movgt	r2, r5
 800caf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800caf6:	465a      	movle	r2, fp
 800caf8:	462f      	mov	r7, r5
 800cafa:	46d9      	mov	r9, fp
 800cafc:	bfcc      	ite	gt
 800cafe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cb06:	464b      	mov	r3, r9
 800cb08:	4652      	mov	r2, sl
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	f7f3 fe9d 	bl	800084c <__aeabi_ddiv>
 800cb12:	ec41 0b10 	vmov	d0, r0, r1
 800cb16:	b005      	add	sp, #20
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb1c <__copybits>:
 800cb1c:	3901      	subs	r1, #1
 800cb1e:	b570      	push	{r4, r5, r6, lr}
 800cb20:	1149      	asrs	r1, r1, #5
 800cb22:	6914      	ldr	r4, [r2, #16]
 800cb24:	3101      	adds	r1, #1
 800cb26:	f102 0314 	add.w	r3, r2, #20
 800cb2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb32:	1f05      	subs	r5, r0, #4
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	d30c      	bcc.n	800cb52 <__copybits+0x36>
 800cb38:	1aa3      	subs	r3, r4, r2
 800cb3a:	3b11      	subs	r3, #17
 800cb3c:	f023 0303 	bic.w	r3, r3, #3
 800cb40:	3211      	adds	r2, #17
 800cb42:	42a2      	cmp	r2, r4
 800cb44:	bf88      	it	hi
 800cb46:	2300      	movhi	r3, #0
 800cb48:	4418      	add	r0, r3
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	4288      	cmp	r0, r1
 800cb4e:	d305      	bcc.n	800cb5c <__copybits+0x40>
 800cb50:	bd70      	pop	{r4, r5, r6, pc}
 800cb52:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb56:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb5a:	e7eb      	b.n	800cb34 <__copybits+0x18>
 800cb5c:	f840 3b04 	str.w	r3, [r0], #4
 800cb60:	e7f4      	b.n	800cb4c <__copybits+0x30>

0800cb62 <__any_on>:
 800cb62:	f100 0214 	add.w	r2, r0, #20
 800cb66:	6900      	ldr	r0, [r0, #16]
 800cb68:	114b      	asrs	r3, r1, #5
 800cb6a:	4298      	cmp	r0, r3
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	db11      	blt.n	800cb94 <__any_on+0x32>
 800cb70:	dd0a      	ble.n	800cb88 <__any_on+0x26>
 800cb72:	f011 011f 	ands.w	r1, r1, #31
 800cb76:	d007      	beq.n	800cb88 <__any_on+0x26>
 800cb78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb7c:	fa24 f001 	lsr.w	r0, r4, r1
 800cb80:	fa00 f101 	lsl.w	r1, r0, r1
 800cb84:	428c      	cmp	r4, r1
 800cb86:	d10b      	bne.n	800cba0 <__any_on+0x3e>
 800cb88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d803      	bhi.n	800cb98 <__any_on+0x36>
 800cb90:	2000      	movs	r0, #0
 800cb92:	bd10      	pop	{r4, pc}
 800cb94:	4603      	mov	r3, r0
 800cb96:	e7f7      	b.n	800cb88 <__any_on+0x26>
 800cb98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	d0f5      	beq.n	800cb8c <__any_on+0x2a>
 800cba0:	2001      	movs	r0, #1
 800cba2:	e7f6      	b.n	800cb92 <__any_on+0x30>

0800cba4 <_strtol_l.constprop.0>:
 800cba4:	2b24      	cmp	r3, #36	@ 0x24
 800cba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbaa:	4686      	mov	lr, r0
 800cbac:	4690      	mov	r8, r2
 800cbae:	d801      	bhi.n	800cbb4 <_strtol_l.constprop.0+0x10>
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d106      	bne.n	800cbc2 <_strtol_l.constprop.0+0x1e>
 800cbb4:	f7fe f842 	bl	800ac3c <__errno>
 800cbb8:	2316      	movs	r3, #22
 800cbba:	6003      	str	r3, [r0, #0]
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc2:	4834      	ldr	r0, [pc, #208]	@ (800cc94 <_strtol_l.constprop.0+0xf0>)
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbcc:	5d06      	ldrb	r6, [r0, r4]
 800cbce:	f016 0608 	ands.w	r6, r6, #8
 800cbd2:	d1f8      	bne.n	800cbc6 <_strtol_l.constprop.0+0x22>
 800cbd4:	2c2d      	cmp	r4, #45	@ 0x2d
 800cbd6:	d12d      	bne.n	800cc34 <_strtol_l.constprop.0+0x90>
 800cbd8:	782c      	ldrb	r4, [r5, #0]
 800cbda:	2601      	movs	r6, #1
 800cbdc:	1c95      	adds	r5, r2, #2
 800cbde:	f033 0210 	bics.w	r2, r3, #16
 800cbe2:	d109      	bne.n	800cbf8 <_strtol_l.constprop.0+0x54>
 800cbe4:	2c30      	cmp	r4, #48	@ 0x30
 800cbe6:	d12a      	bne.n	800cc3e <_strtol_l.constprop.0+0x9a>
 800cbe8:	782a      	ldrb	r2, [r5, #0]
 800cbea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cbee:	2a58      	cmp	r2, #88	@ 0x58
 800cbf0:	d125      	bne.n	800cc3e <_strtol_l.constprop.0+0x9a>
 800cbf2:	786c      	ldrb	r4, [r5, #1]
 800cbf4:	2310      	movs	r3, #16
 800cbf6:	3502      	adds	r5, #2
 800cbf8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cbfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cc00:	2200      	movs	r2, #0
 800cc02:	fbbc f9f3 	udiv	r9, ip, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	fb03 ca19 	mls	sl, r3, r9, ip
 800cc0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cc10:	2f09      	cmp	r7, #9
 800cc12:	d81b      	bhi.n	800cc4c <_strtol_l.constprop.0+0xa8>
 800cc14:	463c      	mov	r4, r7
 800cc16:	42a3      	cmp	r3, r4
 800cc18:	dd27      	ble.n	800cc6a <_strtol_l.constprop.0+0xc6>
 800cc1a:	1c57      	adds	r7, r2, #1
 800cc1c:	d007      	beq.n	800cc2e <_strtol_l.constprop.0+0x8a>
 800cc1e:	4581      	cmp	r9, r0
 800cc20:	d320      	bcc.n	800cc64 <_strtol_l.constprop.0+0xc0>
 800cc22:	d101      	bne.n	800cc28 <_strtol_l.constprop.0+0x84>
 800cc24:	45a2      	cmp	sl, r4
 800cc26:	db1d      	blt.n	800cc64 <_strtol_l.constprop.0+0xc0>
 800cc28:	fb00 4003 	mla	r0, r0, r3, r4
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc32:	e7eb      	b.n	800cc0c <_strtol_l.constprop.0+0x68>
 800cc34:	2c2b      	cmp	r4, #43	@ 0x2b
 800cc36:	bf04      	itt	eq
 800cc38:	782c      	ldrbeq	r4, [r5, #0]
 800cc3a:	1c95      	addeq	r5, r2, #2
 800cc3c:	e7cf      	b.n	800cbde <_strtol_l.constprop.0+0x3a>
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1da      	bne.n	800cbf8 <_strtol_l.constprop.0+0x54>
 800cc42:	2c30      	cmp	r4, #48	@ 0x30
 800cc44:	bf0c      	ite	eq
 800cc46:	2308      	moveq	r3, #8
 800cc48:	230a      	movne	r3, #10
 800cc4a:	e7d5      	b.n	800cbf8 <_strtol_l.constprop.0+0x54>
 800cc4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cc50:	2f19      	cmp	r7, #25
 800cc52:	d801      	bhi.n	800cc58 <_strtol_l.constprop.0+0xb4>
 800cc54:	3c37      	subs	r4, #55	@ 0x37
 800cc56:	e7de      	b.n	800cc16 <_strtol_l.constprop.0+0x72>
 800cc58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cc5c:	2f19      	cmp	r7, #25
 800cc5e:	d804      	bhi.n	800cc6a <_strtol_l.constprop.0+0xc6>
 800cc60:	3c57      	subs	r4, #87	@ 0x57
 800cc62:	e7d8      	b.n	800cc16 <_strtol_l.constprop.0+0x72>
 800cc64:	f04f 32ff 	mov.w	r2, #4294967295
 800cc68:	e7e1      	b.n	800cc2e <_strtol_l.constprop.0+0x8a>
 800cc6a:	1c53      	adds	r3, r2, #1
 800cc6c:	d108      	bne.n	800cc80 <_strtol_l.constprop.0+0xdc>
 800cc6e:	2322      	movs	r3, #34	@ 0x22
 800cc70:	f8ce 3000 	str.w	r3, [lr]
 800cc74:	4660      	mov	r0, ip
 800cc76:	f1b8 0f00 	cmp.w	r8, #0
 800cc7a:	d0a0      	beq.n	800cbbe <_strtol_l.constprop.0+0x1a>
 800cc7c:	1e69      	subs	r1, r5, #1
 800cc7e:	e006      	b.n	800cc8e <_strtol_l.constprop.0+0xea>
 800cc80:	b106      	cbz	r6, 800cc84 <_strtol_l.constprop.0+0xe0>
 800cc82:	4240      	negs	r0, r0
 800cc84:	f1b8 0f00 	cmp.w	r8, #0
 800cc88:	d099      	beq.n	800cbbe <_strtol_l.constprop.0+0x1a>
 800cc8a:	2a00      	cmp	r2, #0
 800cc8c:	d1f6      	bne.n	800cc7c <_strtol_l.constprop.0+0xd8>
 800cc8e:	f8c8 1000 	str.w	r1, [r8]
 800cc92:	e794      	b.n	800cbbe <_strtol_l.constprop.0+0x1a>
 800cc94:	0800ee69 	.word	0x0800ee69

0800cc98 <_strtol_r>:
 800cc98:	f7ff bf84 	b.w	800cba4 <_strtol_l.constprop.0>

0800cc9c <__ascii_wctomb>:
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	4608      	mov	r0, r1
 800cca0:	b141      	cbz	r1, 800ccb4 <__ascii_wctomb+0x18>
 800cca2:	2aff      	cmp	r2, #255	@ 0xff
 800cca4:	d904      	bls.n	800ccb0 <__ascii_wctomb+0x14>
 800cca6:	228a      	movs	r2, #138	@ 0x8a
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccae:	4770      	bx	lr
 800ccb0:	700a      	strb	r2, [r1, #0]
 800ccb2:	2001      	movs	r0, #1
 800ccb4:	4770      	bx	lr

0800ccb6 <__ssputs_r>:
 800ccb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccba:	688e      	ldr	r6, [r1, #8]
 800ccbc:	461f      	mov	r7, r3
 800ccbe:	42be      	cmp	r6, r7
 800ccc0:	680b      	ldr	r3, [r1, #0]
 800ccc2:	4682      	mov	sl, r0
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	4690      	mov	r8, r2
 800ccc8:	d82d      	bhi.n	800cd26 <__ssputs_r+0x70>
 800ccca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccd2:	d026      	beq.n	800cd22 <__ssputs_r+0x6c>
 800ccd4:	6965      	ldr	r5, [r4, #20]
 800ccd6:	6909      	ldr	r1, [r1, #16]
 800ccd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccdc:	eba3 0901 	sub.w	r9, r3, r1
 800cce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cce4:	1c7b      	adds	r3, r7, #1
 800cce6:	444b      	add	r3, r9
 800cce8:	106d      	asrs	r5, r5, #1
 800ccea:	429d      	cmp	r5, r3
 800ccec:	bf38      	it	cc
 800ccee:	461d      	movcc	r5, r3
 800ccf0:	0553      	lsls	r3, r2, #21
 800ccf2:	d527      	bpl.n	800cd44 <__ssputs_r+0x8e>
 800ccf4:	4629      	mov	r1, r5
 800ccf6:	f7ff fa05 	bl	800c104 <_malloc_r>
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	b360      	cbz	r0, 800cd58 <__ssputs_r+0xa2>
 800ccfe:	6921      	ldr	r1, [r4, #16]
 800cd00:	464a      	mov	r2, r9
 800cd02:	f7fd ffc8 	bl	800ac96 <memcpy>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd10:	81a3      	strh	r3, [r4, #12]
 800cd12:	6126      	str	r6, [r4, #16]
 800cd14:	6165      	str	r5, [r4, #20]
 800cd16:	444e      	add	r6, r9
 800cd18:	eba5 0509 	sub.w	r5, r5, r9
 800cd1c:	6026      	str	r6, [r4, #0]
 800cd1e:	60a5      	str	r5, [r4, #8]
 800cd20:	463e      	mov	r6, r7
 800cd22:	42be      	cmp	r6, r7
 800cd24:	d900      	bls.n	800cd28 <__ssputs_r+0x72>
 800cd26:	463e      	mov	r6, r7
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	4632      	mov	r2, r6
 800cd2c:	4641      	mov	r1, r8
 800cd2e:	f000 fb7b 	bl	800d428 <memmove>
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	1b9b      	subs	r3, r3, r6
 800cd36:	60a3      	str	r3, [r4, #8]
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	4433      	add	r3, r6
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd44:	462a      	mov	r2, r5
 800cd46:	f000 fbd6 	bl	800d4f6 <_realloc_r>
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d1e0      	bne.n	800cd12 <__ssputs_r+0x5c>
 800cd50:	6921      	ldr	r1, [r4, #16]
 800cd52:	4650      	mov	r0, sl
 800cd54:	f7fe fe28 	bl	800b9a8 <_free_r>
 800cd58:	230c      	movs	r3, #12
 800cd5a:	f8ca 3000 	str.w	r3, [sl]
 800cd5e:	89a3      	ldrh	r3, [r4, #12]
 800cd60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd64:	81a3      	strh	r3, [r4, #12]
 800cd66:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6a:	e7e9      	b.n	800cd40 <__ssputs_r+0x8a>

0800cd6c <_svfiprintf_r>:
 800cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	4698      	mov	r8, r3
 800cd72:	898b      	ldrh	r3, [r1, #12]
 800cd74:	061b      	lsls	r3, r3, #24
 800cd76:	b09d      	sub	sp, #116	@ 0x74
 800cd78:	4607      	mov	r7, r0
 800cd7a:	460d      	mov	r5, r1
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	d510      	bpl.n	800cda2 <_svfiprintf_r+0x36>
 800cd80:	690b      	ldr	r3, [r1, #16]
 800cd82:	b973      	cbnz	r3, 800cda2 <_svfiprintf_r+0x36>
 800cd84:	2140      	movs	r1, #64	@ 0x40
 800cd86:	f7ff f9bd 	bl	800c104 <_malloc_r>
 800cd8a:	6028      	str	r0, [r5, #0]
 800cd8c:	6128      	str	r0, [r5, #16]
 800cd8e:	b930      	cbnz	r0, 800cd9e <_svfiprintf_r+0x32>
 800cd90:	230c      	movs	r3, #12
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	f04f 30ff 	mov.w	r0, #4294967295
 800cd98:	b01d      	add	sp, #116	@ 0x74
 800cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9e:	2340      	movs	r3, #64	@ 0x40
 800cda0:	616b      	str	r3, [r5, #20]
 800cda2:	2300      	movs	r3, #0
 800cda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda6:	2320      	movs	r3, #32
 800cda8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdac:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdb0:	2330      	movs	r3, #48	@ 0x30
 800cdb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf50 <_svfiprintf_r+0x1e4>
 800cdb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdba:	f04f 0901 	mov.w	r9, #1
 800cdbe:	4623      	mov	r3, r4
 800cdc0:	469a      	mov	sl, r3
 800cdc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc6:	b10a      	cbz	r2, 800cdcc <_svfiprintf_r+0x60>
 800cdc8:	2a25      	cmp	r2, #37	@ 0x25
 800cdca:	d1f9      	bne.n	800cdc0 <_svfiprintf_r+0x54>
 800cdcc:	ebba 0b04 	subs.w	fp, sl, r4
 800cdd0:	d00b      	beq.n	800cdea <_svfiprintf_r+0x7e>
 800cdd2:	465b      	mov	r3, fp
 800cdd4:	4622      	mov	r2, r4
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4638      	mov	r0, r7
 800cdda:	f7ff ff6c 	bl	800ccb6 <__ssputs_r>
 800cdde:	3001      	adds	r0, #1
 800cde0:	f000 80a7 	beq.w	800cf32 <_svfiprintf_r+0x1c6>
 800cde4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cde6:	445a      	add	r2, fp
 800cde8:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdea:	f89a 3000 	ldrb.w	r3, [sl]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f000 809f 	beq.w	800cf32 <_svfiprintf_r+0x1c6>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdfe:	f10a 0a01 	add.w	sl, sl, #1
 800ce02:	9304      	str	r3, [sp, #16]
 800ce04:	9307      	str	r3, [sp, #28]
 800ce06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce0c:	4654      	mov	r4, sl
 800ce0e:	2205      	movs	r2, #5
 800ce10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce14:	484e      	ldr	r0, [pc, #312]	@ (800cf50 <_svfiprintf_r+0x1e4>)
 800ce16:	f7f3 f9db 	bl	80001d0 <memchr>
 800ce1a:	9a04      	ldr	r2, [sp, #16]
 800ce1c:	b9d8      	cbnz	r0, 800ce56 <_svfiprintf_r+0xea>
 800ce1e:	06d0      	lsls	r0, r2, #27
 800ce20:	bf44      	itt	mi
 800ce22:	2320      	movmi	r3, #32
 800ce24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce28:	0711      	lsls	r1, r2, #28
 800ce2a:	bf44      	itt	mi
 800ce2c:	232b      	movmi	r3, #43	@ 0x2b
 800ce2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce32:	f89a 3000 	ldrb.w	r3, [sl]
 800ce36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce38:	d015      	beq.n	800ce66 <_svfiprintf_r+0xfa>
 800ce3a:	9a07      	ldr	r2, [sp, #28]
 800ce3c:	4654      	mov	r4, sl
 800ce3e:	2000      	movs	r0, #0
 800ce40:	f04f 0c0a 	mov.w	ip, #10
 800ce44:	4621      	mov	r1, r4
 800ce46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce4a:	3b30      	subs	r3, #48	@ 0x30
 800ce4c:	2b09      	cmp	r3, #9
 800ce4e:	d94b      	bls.n	800cee8 <_svfiprintf_r+0x17c>
 800ce50:	b1b0      	cbz	r0, 800ce80 <_svfiprintf_r+0x114>
 800ce52:	9207      	str	r2, [sp, #28]
 800ce54:	e014      	b.n	800ce80 <_svfiprintf_r+0x114>
 800ce56:	eba0 0308 	sub.w	r3, r0, r8
 800ce5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	46a2      	mov	sl, r4
 800ce64:	e7d2      	b.n	800ce0c <_svfiprintf_r+0xa0>
 800ce66:	9b03      	ldr	r3, [sp, #12]
 800ce68:	1d19      	adds	r1, r3, #4
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	9103      	str	r1, [sp, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bfbb      	ittet	lt
 800ce72:	425b      	neglt	r3, r3
 800ce74:	f042 0202 	orrlt.w	r2, r2, #2
 800ce78:	9307      	strge	r3, [sp, #28]
 800ce7a:	9307      	strlt	r3, [sp, #28]
 800ce7c:	bfb8      	it	lt
 800ce7e:	9204      	strlt	r2, [sp, #16]
 800ce80:	7823      	ldrb	r3, [r4, #0]
 800ce82:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce84:	d10a      	bne.n	800ce9c <_svfiprintf_r+0x130>
 800ce86:	7863      	ldrb	r3, [r4, #1]
 800ce88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce8a:	d132      	bne.n	800cef2 <_svfiprintf_r+0x186>
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	1d1a      	adds	r2, r3, #4
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	9203      	str	r2, [sp, #12]
 800ce94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce98:	3402      	adds	r4, #2
 800ce9a:	9305      	str	r3, [sp, #20]
 800ce9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf60 <_svfiprintf_r+0x1f4>
 800cea0:	7821      	ldrb	r1, [r4, #0]
 800cea2:	2203      	movs	r2, #3
 800cea4:	4650      	mov	r0, sl
 800cea6:	f7f3 f993 	bl	80001d0 <memchr>
 800ceaa:	b138      	cbz	r0, 800cebc <_svfiprintf_r+0x150>
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	eba0 000a 	sub.w	r0, r0, sl
 800ceb2:	2240      	movs	r2, #64	@ 0x40
 800ceb4:	4082      	lsls	r2, r0
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	3401      	adds	r4, #1
 800ceba:	9304      	str	r3, [sp, #16]
 800cebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec0:	4824      	ldr	r0, [pc, #144]	@ (800cf54 <_svfiprintf_r+0x1e8>)
 800cec2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cec6:	2206      	movs	r2, #6
 800cec8:	f7f3 f982 	bl	80001d0 <memchr>
 800cecc:	2800      	cmp	r0, #0
 800cece:	d036      	beq.n	800cf3e <_svfiprintf_r+0x1d2>
 800ced0:	4b21      	ldr	r3, [pc, #132]	@ (800cf58 <_svfiprintf_r+0x1ec>)
 800ced2:	bb1b      	cbnz	r3, 800cf1c <_svfiprintf_r+0x1b0>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	3307      	adds	r3, #7
 800ced8:	f023 0307 	bic.w	r3, r3, #7
 800cedc:	3308      	adds	r3, #8
 800cede:	9303      	str	r3, [sp, #12]
 800cee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cee2:	4433      	add	r3, r6
 800cee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cee6:	e76a      	b.n	800cdbe <_svfiprintf_r+0x52>
 800cee8:	fb0c 3202 	mla	r2, ip, r2, r3
 800ceec:	460c      	mov	r4, r1
 800ceee:	2001      	movs	r0, #1
 800cef0:	e7a8      	b.n	800ce44 <_svfiprintf_r+0xd8>
 800cef2:	2300      	movs	r3, #0
 800cef4:	3401      	adds	r4, #1
 800cef6:	9305      	str	r3, [sp, #20]
 800cef8:	4619      	mov	r1, r3
 800cefa:	f04f 0c0a 	mov.w	ip, #10
 800cefe:	4620      	mov	r0, r4
 800cf00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf04:	3a30      	subs	r2, #48	@ 0x30
 800cf06:	2a09      	cmp	r2, #9
 800cf08:	d903      	bls.n	800cf12 <_svfiprintf_r+0x1a6>
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d0c6      	beq.n	800ce9c <_svfiprintf_r+0x130>
 800cf0e:	9105      	str	r1, [sp, #20]
 800cf10:	e7c4      	b.n	800ce9c <_svfiprintf_r+0x130>
 800cf12:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf16:	4604      	mov	r4, r0
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e7f0      	b.n	800cefe <_svfiprintf_r+0x192>
 800cf1c:	ab03      	add	r3, sp, #12
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	462a      	mov	r2, r5
 800cf22:	4b0e      	ldr	r3, [pc, #56]	@ (800cf5c <_svfiprintf_r+0x1f0>)
 800cf24:	a904      	add	r1, sp, #16
 800cf26:	4638      	mov	r0, r7
 800cf28:	f7fc fd88 	bl	8009a3c <_printf_float>
 800cf2c:	1c42      	adds	r2, r0, #1
 800cf2e:	4606      	mov	r6, r0
 800cf30:	d1d6      	bne.n	800cee0 <_svfiprintf_r+0x174>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	065b      	lsls	r3, r3, #25
 800cf36:	f53f af2d 	bmi.w	800cd94 <_svfiprintf_r+0x28>
 800cf3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf3c:	e72c      	b.n	800cd98 <_svfiprintf_r+0x2c>
 800cf3e:	ab03      	add	r3, sp, #12
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	462a      	mov	r2, r5
 800cf44:	4b05      	ldr	r3, [pc, #20]	@ (800cf5c <_svfiprintf_r+0x1f0>)
 800cf46:	a904      	add	r1, sp, #16
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7fd f80f 	bl	8009f6c <_printf_i>
 800cf4e:	e7ed      	b.n	800cf2c <_svfiprintf_r+0x1c0>
 800cf50:	0800ef69 	.word	0x0800ef69
 800cf54:	0800ef73 	.word	0x0800ef73
 800cf58:	08009a3d 	.word	0x08009a3d
 800cf5c:	0800ccb7 	.word	0x0800ccb7
 800cf60:	0800ef6f 	.word	0x0800ef6f

0800cf64 <__sfputc_r>:
 800cf64:	6893      	ldr	r3, [r2, #8]
 800cf66:	3b01      	subs	r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	b410      	push	{r4}
 800cf6c:	6093      	str	r3, [r2, #8]
 800cf6e:	da08      	bge.n	800cf82 <__sfputc_r+0x1e>
 800cf70:	6994      	ldr	r4, [r2, #24]
 800cf72:	42a3      	cmp	r3, r4
 800cf74:	db01      	blt.n	800cf7a <__sfputc_r+0x16>
 800cf76:	290a      	cmp	r1, #10
 800cf78:	d103      	bne.n	800cf82 <__sfputc_r+0x1e>
 800cf7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf7e:	f7fd bcf2 	b.w	800a966 <__swbuf_r>
 800cf82:	6813      	ldr	r3, [r2, #0]
 800cf84:	1c58      	adds	r0, r3, #1
 800cf86:	6010      	str	r0, [r2, #0]
 800cf88:	7019      	strb	r1, [r3, #0]
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <__sfputs_r>:
 800cf92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf94:	4606      	mov	r6, r0
 800cf96:	460f      	mov	r7, r1
 800cf98:	4614      	mov	r4, r2
 800cf9a:	18d5      	adds	r5, r2, r3
 800cf9c:	42ac      	cmp	r4, r5
 800cf9e:	d101      	bne.n	800cfa4 <__sfputs_r+0x12>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e007      	b.n	800cfb4 <__sfputs_r+0x22>
 800cfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa8:	463a      	mov	r2, r7
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7ff ffda 	bl	800cf64 <__sfputc_r>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d1f3      	bne.n	800cf9c <__sfputs_r+0xa>
 800cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb8 <_vfiprintf_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	460d      	mov	r5, r1
 800cfbe:	b09d      	sub	sp, #116	@ 0x74
 800cfc0:	4614      	mov	r4, r2
 800cfc2:	4698      	mov	r8, r3
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	b118      	cbz	r0, 800cfd0 <_vfiprintf_r+0x18>
 800cfc8:	6a03      	ldr	r3, [r0, #32]
 800cfca:	b90b      	cbnz	r3, 800cfd0 <_vfiprintf_r+0x18>
 800cfcc:	f7fd fb8e 	bl	800a6ec <__sinit>
 800cfd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfd2:	07d9      	lsls	r1, r3, #31
 800cfd4:	d405      	bmi.n	800cfe2 <_vfiprintf_r+0x2a>
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	059a      	lsls	r2, r3, #22
 800cfda:	d402      	bmi.n	800cfe2 <_vfiprintf_r+0x2a>
 800cfdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfde:	f7fd fe58 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800cfe2:	89ab      	ldrh	r3, [r5, #12]
 800cfe4:	071b      	lsls	r3, r3, #28
 800cfe6:	d501      	bpl.n	800cfec <_vfiprintf_r+0x34>
 800cfe8:	692b      	ldr	r3, [r5, #16]
 800cfea:	b99b      	cbnz	r3, 800d014 <_vfiprintf_r+0x5c>
 800cfec:	4629      	mov	r1, r5
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7fd fcf8 	bl	800a9e4 <__swsetup_r>
 800cff4:	b170      	cbz	r0, 800d014 <_vfiprintf_r+0x5c>
 800cff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cff8:	07dc      	lsls	r4, r3, #31
 800cffa:	d504      	bpl.n	800d006 <_vfiprintf_r+0x4e>
 800cffc:	f04f 30ff 	mov.w	r0, #4294967295
 800d000:	b01d      	add	sp, #116	@ 0x74
 800d002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d006:	89ab      	ldrh	r3, [r5, #12]
 800d008:	0598      	lsls	r0, r3, #22
 800d00a:	d4f7      	bmi.n	800cffc <_vfiprintf_r+0x44>
 800d00c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d00e:	f7fd fe41 	bl	800ac94 <__retarget_lock_release_recursive>
 800d012:	e7f3      	b.n	800cffc <_vfiprintf_r+0x44>
 800d014:	2300      	movs	r3, #0
 800d016:	9309      	str	r3, [sp, #36]	@ 0x24
 800d018:	2320      	movs	r3, #32
 800d01a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d022:	2330      	movs	r3, #48	@ 0x30
 800d024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d1d4 <_vfiprintf_r+0x21c>
 800d028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d02c:	f04f 0901 	mov.w	r9, #1
 800d030:	4623      	mov	r3, r4
 800d032:	469a      	mov	sl, r3
 800d034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d038:	b10a      	cbz	r2, 800d03e <_vfiprintf_r+0x86>
 800d03a:	2a25      	cmp	r2, #37	@ 0x25
 800d03c:	d1f9      	bne.n	800d032 <_vfiprintf_r+0x7a>
 800d03e:	ebba 0b04 	subs.w	fp, sl, r4
 800d042:	d00b      	beq.n	800d05c <_vfiprintf_r+0xa4>
 800d044:	465b      	mov	r3, fp
 800d046:	4622      	mov	r2, r4
 800d048:	4629      	mov	r1, r5
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7ff ffa1 	bl	800cf92 <__sfputs_r>
 800d050:	3001      	adds	r0, #1
 800d052:	f000 80a7 	beq.w	800d1a4 <_vfiprintf_r+0x1ec>
 800d056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d058:	445a      	add	r2, fp
 800d05a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d05c:	f89a 3000 	ldrb.w	r3, [sl]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f000 809f 	beq.w	800d1a4 <_vfiprintf_r+0x1ec>
 800d066:	2300      	movs	r3, #0
 800d068:	f04f 32ff 	mov.w	r2, #4294967295
 800d06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d070:	f10a 0a01 	add.w	sl, sl, #1
 800d074:	9304      	str	r3, [sp, #16]
 800d076:	9307      	str	r3, [sp, #28]
 800d078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d07c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d07e:	4654      	mov	r4, sl
 800d080:	2205      	movs	r2, #5
 800d082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d086:	4853      	ldr	r0, [pc, #332]	@ (800d1d4 <_vfiprintf_r+0x21c>)
 800d088:	f7f3 f8a2 	bl	80001d0 <memchr>
 800d08c:	9a04      	ldr	r2, [sp, #16]
 800d08e:	b9d8      	cbnz	r0, 800d0c8 <_vfiprintf_r+0x110>
 800d090:	06d1      	lsls	r1, r2, #27
 800d092:	bf44      	itt	mi
 800d094:	2320      	movmi	r3, #32
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d09a:	0713      	lsls	r3, r2, #28
 800d09c:	bf44      	itt	mi
 800d09e:	232b      	movmi	r3, #43	@ 0x2b
 800d0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0aa:	d015      	beq.n	800d0d8 <_vfiprintf_r+0x120>
 800d0ac:	9a07      	ldr	r2, [sp, #28]
 800d0ae:	4654      	mov	r4, sl
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	f04f 0c0a 	mov.w	ip, #10
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0bc:	3b30      	subs	r3, #48	@ 0x30
 800d0be:	2b09      	cmp	r3, #9
 800d0c0:	d94b      	bls.n	800d15a <_vfiprintf_r+0x1a2>
 800d0c2:	b1b0      	cbz	r0, 800d0f2 <_vfiprintf_r+0x13a>
 800d0c4:	9207      	str	r2, [sp, #28]
 800d0c6:	e014      	b.n	800d0f2 <_vfiprintf_r+0x13a>
 800d0c8:	eba0 0308 	sub.w	r3, r0, r8
 800d0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	9304      	str	r3, [sp, #16]
 800d0d4:	46a2      	mov	sl, r4
 800d0d6:	e7d2      	b.n	800d07e <_vfiprintf_r+0xc6>
 800d0d8:	9b03      	ldr	r3, [sp, #12]
 800d0da:	1d19      	adds	r1, r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	9103      	str	r1, [sp, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bfbb      	ittet	lt
 800d0e4:	425b      	neglt	r3, r3
 800d0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ea:	9307      	strge	r3, [sp, #28]
 800d0ec:	9307      	strlt	r3, [sp, #28]
 800d0ee:	bfb8      	it	lt
 800d0f0:	9204      	strlt	r2, [sp, #16]
 800d0f2:	7823      	ldrb	r3, [r4, #0]
 800d0f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0f6:	d10a      	bne.n	800d10e <_vfiprintf_r+0x156>
 800d0f8:	7863      	ldrb	r3, [r4, #1]
 800d0fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0fc:	d132      	bne.n	800d164 <_vfiprintf_r+0x1ac>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	1d1a      	adds	r2, r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	9203      	str	r2, [sp, #12]
 800d106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d10a:	3402      	adds	r4, #2
 800d10c:	9305      	str	r3, [sp, #20]
 800d10e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1e4 <_vfiprintf_r+0x22c>
 800d112:	7821      	ldrb	r1, [r4, #0]
 800d114:	2203      	movs	r2, #3
 800d116:	4650      	mov	r0, sl
 800d118:	f7f3 f85a 	bl	80001d0 <memchr>
 800d11c:	b138      	cbz	r0, 800d12e <_vfiprintf_r+0x176>
 800d11e:	9b04      	ldr	r3, [sp, #16]
 800d120:	eba0 000a 	sub.w	r0, r0, sl
 800d124:	2240      	movs	r2, #64	@ 0x40
 800d126:	4082      	lsls	r2, r0
 800d128:	4313      	orrs	r3, r2
 800d12a:	3401      	adds	r4, #1
 800d12c:	9304      	str	r3, [sp, #16]
 800d12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d132:	4829      	ldr	r0, [pc, #164]	@ (800d1d8 <_vfiprintf_r+0x220>)
 800d134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d138:	2206      	movs	r2, #6
 800d13a:	f7f3 f849 	bl	80001d0 <memchr>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d03f      	beq.n	800d1c2 <_vfiprintf_r+0x20a>
 800d142:	4b26      	ldr	r3, [pc, #152]	@ (800d1dc <_vfiprintf_r+0x224>)
 800d144:	bb1b      	cbnz	r3, 800d18e <_vfiprintf_r+0x1d6>
 800d146:	9b03      	ldr	r3, [sp, #12]
 800d148:	3307      	adds	r3, #7
 800d14a:	f023 0307 	bic.w	r3, r3, #7
 800d14e:	3308      	adds	r3, #8
 800d150:	9303      	str	r3, [sp, #12]
 800d152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d154:	443b      	add	r3, r7
 800d156:	9309      	str	r3, [sp, #36]	@ 0x24
 800d158:	e76a      	b.n	800d030 <_vfiprintf_r+0x78>
 800d15a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d15e:	460c      	mov	r4, r1
 800d160:	2001      	movs	r0, #1
 800d162:	e7a8      	b.n	800d0b6 <_vfiprintf_r+0xfe>
 800d164:	2300      	movs	r3, #0
 800d166:	3401      	adds	r4, #1
 800d168:	9305      	str	r3, [sp, #20]
 800d16a:	4619      	mov	r1, r3
 800d16c:	f04f 0c0a 	mov.w	ip, #10
 800d170:	4620      	mov	r0, r4
 800d172:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d176:	3a30      	subs	r2, #48	@ 0x30
 800d178:	2a09      	cmp	r2, #9
 800d17a:	d903      	bls.n	800d184 <_vfiprintf_r+0x1cc>
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d0c6      	beq.n	800d10e <_vfiprintf_r+0x156>
 800d180:	9105      	str	r1, [sp, #20]
 800d182:	e7c4      	b.n	800d10e <_vfiprintf_r+0x156>
 800d184:	fb0c 2101 	mla	r1, ip, r1, r2
 800d188:	4604      	mov	r4, r0
 800d18a:	2301      	movs	r3, #1
 800d18c:	e7f0      	b.n	800d170 <_vfiprintf_r+0x1b8>
 800d18e:	ab03      	add	r3, sp, #12
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	462a      	mov	r2, r5
 800d194:	4b12      	ldr	r3, [pc, #72]	@ (800d1e0 <_vfiprintf_r+0x228>)
 800d196:	a904      	add	r1, sp, #16
 800d198:	4630      	mov	r0, r6
 800d19a:	f7fc fc4f 	bl	8009a3c <_printf_float>
 800d19e:	4607      	mov	r7, r0
 800d1a0:	1c78      	adds	r0, r7, #1
 800d1a2:	d1d6      	bne.n	800d152 <_vfiprintf_r+0x19a>
 800d1a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1a6:	07d9      	lsls	r1, r3, #31
 800d1a8:	d405      	bmi.n	800d1b6 <_vfiprintf_r+0x1fe>
 800d1aa:	89ab      	ldrh	r3, [r5, #12]
 800d1ac:	059a      	lsls	r2, r3, #22
 800d1ae:	d402      	bmi.n	800d1b6 <_vfiprintf_r+0x1fe>
 800d1b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1b2:	f7fd fd6f 	bl	800ac94 <__retarget_lock_release_recursive>
 800d1b6:	89ab      	ldrh	r3, [r5, #12]
 800d1b8:	065b      	lsls	r3, r3, #25
 800d1ba:	f53f af1f 	bmi.w	800cffc <_vfiprintf_r+0x44>
 800d1be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1c0:	e71e      	b.n	800d000 <_vfiprintf_r+0x48>
 800d1c2:	ab03      	add	r3, sp, #12
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	462a      	mov	r2, r5
 800d1c8:	4b05      	ldr	r3, [pc, #20]	@ (800d1e0 <_vfiprintf_r+0x228>)
 800d1ca:	a904      	add	r1, sp, #16
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7fc fecd 	bl	8009f6c <_printf_i>
 800d1d2:	e7e4      	b.n	800d19e <_vfiprintf_r+0x1e6>
 800d1d4:	0800ef69 	.word	0x0800ef69
 800d1d8:	0800ef73 	.word	0x0800ef73
 800d1dc:	08009a3d 	.word	0x08009a3d
 800d1e0:	0800cf93 	.word	0x0800cf93
 800d1e4:	0800ef6f 	.word	0x0800ef6f

0800d1e8 <__sflush_r>:
 800d1e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f0:	0716      	lsls	r6, r2, #28
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	d454      	bmi.n	800d2a2 <__sflush_r+0xba>
 800d1f8:	684b      	ldr	r3, [r1, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	dc02      	bgt.n	800d204 <__sflush_r+0x1c>
 800d1fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d200:	2b00      	cmp	r3, #0
 800d202:	dd48      	ble.n	800d296 <__sflush_r+0xae>
 800d204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d206:	2e00      	cmp	r6, #0
 800d208:	d045      	beq.n	800d296 <__sflush_r+0xae>
 800d20a:	2300      	movs	r3, #0
 800d20c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d210:	682f      	ldr	r7, [r5, #0]
 800d212:	6a21      	ldr	r1, [r4, #32]
 800d214:	602b      	str	r3, [r5, #0]
 800d216:	d030      	beq.n	800d27a <__sflush_r+0x92>
 800d218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d21a:	89a3      	ldrh	r3, [r4, #12]
 800d21c:	0759      	lsls	r1, r3, #29
 800d21e:	d505      	bpl.n	800d22c <__sflush_r+0x44>
 800d220:	6863      	ldr	r3, [r4, #4]
 800d222:	1ad2      	subs	r2, r2, r3
 800d224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d226:	b10b      	cbz	r3, 800d22c <__sflush_r+0x44>
 800d228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d22a:	1ad2      	subs	r2, r2, r3
 800d22c:	2300      	movs	r3, #0
 800d22e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d230:	6a21      	ldr	r1, [r4, #32]
 800d232:	4628      	mov	r0, r5
 800d234:	47b0      	blx	r6
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	d106      	bne.n	800d24a <__sflush_r+0x62>
 800d23c:	6829      	ldr	r1, [r5, #0]
 800d23e:	291d      	cmp	r1, #29
 800d240:	d82b      	bhi.n	800d29a <__sflush_r+0xb2>
 800d242:	4a2a      	ldr	r2, [pc, #168]	@ (800d2ec <__sflush_r+0x104>)
 800d244:	410a      	asrs	r2, r1
 800d246:	07d6      	lsls	r6, r2, #31
 800d248:	d427      	bmi.n	800d29a <__sflush_r+0xb2>
 800d24a:	2200      	movs	r2, #0
 800d24c:	6062      	str	r2, [r4, #4]
 800d24e:	04d9      	lsls	r1, r3, #19
 800d250:	6922      	ldr	r2, [r4, #16]
 800d252:	6022      	str	r2, [r4, #0]
 800d254:	d504      	bpl.n	800d260 <__sflush_r+0x78>
 800d256:	1c42      	adds	r2, r0, #1
 800d258:	d101      	bne.n	800d25e <__sflush_r+0x76>
 800d25a:	682b      	ldr	r3, [r5, #0]
 800d25c:	b903      	cbnz	r3, 800d260 <__sflush_r+0x78>
 800d25e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d262:	602f      	str	r7, [r5, #0]
 800d264:	b1b9      	cbz	r1, 800d296 <__sflush_r+0xae>
 800d266:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d26a:	4299      	cmp	r1, r3
 800d26c:	d002      	beq.n	800d274 <__sflush_r+0x8c>
 800d26e:	4628      	mov	r0, r5
 800d270:	f7fe fb9a 	bl	800b9a8 <_free_r>
 800d274:	2300      	movs	r3, #0
 800d276:	6363      	str	r3, [r4, #52]	@ 0x34
 800d278:	e00d      	b.n	800d296 <__sflush_r+0xae>
 800d27a:	2301      	movs	r3, #1
 800d27c:	4628      	mov	r0, r5
 800d27e:	47b0      	blx	r6
 800d280:	4602      	mov	r2, r0
 800d282:	1c50      	adds	r0, r2, #1
 800d284:	d1c9      	bne.n	800d21a <__sflush_r+0x32>
 800d286:	682b      	ldr	r3, [r5, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d0c6      	beq.n	800d21a <__sflush_r+0x32>
 800d28c:	2b1d      	cmp	r3, #29
 800d28e:	d001      	beq.n	800d294 <__sflush_r+0xac>
 800d290:	2b16      	cmp	r3, #22
 800d292:	d11e      	bne.n	800d2d2 <__sflush_r+0xea>
 800d294:	602f      	str	r7, [r5, #0]
 800d296:	2000      	movs	r0, #0
 800d298:	e022      	b.n	800d2e0 <__sflush_r+0xf8>
 800d29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d29e:	b21b      	sxth	r3, r3
 800d2a0:	e01b      	b.n	800d2da <__sflush_r+0xf2>
 800d2a2:	690f      	ldr	r7, [r1, #16]
 800d2a4:	2f00      	cmp	r7, #0
 800d2a6:	d0f6      	beq.n	800d296 <__sflush_r+0xae>
 800d2a8:	0793      	lsls	r3, r2, #30
 800d2aa:	680e      	ldr	r6, [r1, #0]
 800d2ac:	bf08      	it	eq
 800d2ae:	694b      	ldreq	r3, [r1, #20]
 800d2b0:	600f      	str	r7, [r1, #0]
 800d2b2:	bf18      	it	ne
 800d2b4:	2300      	movne	r3, #0
 800d2b6:	eba6 0807 	sub.w	r8, r6, r7
 800d2ba:	608b      	str	r3, [r1, #8]
 800d2bc:	f1b8 0f00 	cmp.w	r8, #0
 800d2c0:	dde9      	ble.n	800d296 <__sflush_r+0xae>
 800d2c2:	6a21      	ldr	r1, [r4, #32]
 800d2c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d2c6:	4643      	mov	r3, r8
 800d2c8:	463a      	mov	r2, r7
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	47b0      	blx	r6
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	dc08      	bgt.n	800d2e4 <__sflush_r+0xfc>
 800d2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2da:	81a3      	strh	r3, [r4, #12]
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e4:	4407      	add	r7, r0
 800d2e6:	eba8 0800 	sub.w	r8, r8, r0
 800d2ea:	e7e7      	b.n	800d2bc <__sflush_r+0xd4>
 800d2ec:	dfbffffe 	.word	0xdfbffffe

0800d2f0 <_fflush_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	690b      	ldr	r3, [r1, #16]
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	b913      	cbnz	r3, 800d300 <_fflush_r+0x10>
 800d2fa:	2500      	movs	r5, #0
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	bd38      	pop	{r3, r4, r5, pc}
 800d300:	b118      	cbz	r0, 800d30a <_fflush_r+0x1a>
 800d302:	6a03      	ldr	r3, [r0, #32]
 800d304:	b90b      	cbnz	r3, 800d30a <_fflush_r+0x1a>
 800d306:	f7fd f9f1 	bl	800a6ec <__sinit>
 800d30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d0f3      	beq.n	800d2fa <_fflush_r+0xa>
 800d312:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d314:	07d0      	lsls	r0, r2, #31
 800d316:	d404      	bmi.n	800d322 <_fflush_r+0x32>
 800d318:	0599      	lsls	r1, r3, #22
 800d31a:	d402      	bmi.n	800d322 <_fflush_r+0x32>
 800d31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d31e:	f7fd fcb8 	bl	800ac92 <__retarget_lock_acquire_recursive>
 800d322:	4628      	mov	r0, r5
 800d324:	4621      	mov	r1, r4
 800d326:	f7ff ff5f 	bl	800d1e8 <__sflush_r>
 800d32a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d32c:	07da      	lsls	r2, r3, #31
 800d32e:	4605      	mov	r5, r0
 800d330:	d4e4      	bmi.n	800d2fc <_fflush_r+0xc>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	059b      	lsls	r3, r3, #22
 800d336:	d4e1      	bmi.n	800d2fc <_fflush_r+0xc>
 800d338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d33a:	f7fd fcab 	bl	800ac94 <__retarget_lock_release_recursive>
 800d33e:	e7dd      	b.n	800d2fc <_fflush_r+0xc>

0800d340 <fiprintf>:
 800d340:	b40e      	push	{r1, r2, r3}
 800d342:	b503      	push	{r0, r1, lr}
 800d344:	4601      	mov	r1, r0
 800d346:	ab03      	add	r3, sp, #12
 800d348:	4805      	ldr	r0, [pc, #20]	@ (800d360 <fiprintf+0x20>)
 800d34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d34e:	6800      	ldr	r0, [r0, #0]
 800d350:	9301      	str	r3, [sp, #4]
 800d352:	f7ff fe31 	bl	800cfb8 <_vfiprintf_r>
 800d356:	b002      	add	sp, #8
 800d358:	f85d eb04 	ldr.w	lr, [sp], #4
 800d35c:	b003      	add	sp, #12
 800d35e:	4770      	bx	lr
 800d360:	20000204 	.word	0x20000204

0800d364 <__swhatbuf_r>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	460c      	mov	r4, r1
 800d368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36c:	2900      	cmp	r1, #0
 800d36e:	b096      	sub	sp, #88	@ 0x58
 800d370:	4615      	mov	r5, r2
 800d372:	461e      	mov	r6, r3
 800d374:	da0d      	bge.n	800d392 <__swhatbuf_r+0x2e>
 800d376:	89a3      	ldrh	r3, [r4, #12]
 800d378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d37c:	f04f 0100 	mov.w	r1, #0
 800d380:	bf14      	ite	ne
 800d382:	2340      	movne	r3, #64	@ 0x40
 800d384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d388:	2000      	movs	r0, #0
 800d38a:	6031      	str	r1, [r6, #0]
 800d38c:	602b      	str	r3, [r5, #0]
 800d38e:	b016      	add	sp, #88	@ 0x58
 800d390:	bd70      	pop	{r4, r5, r6, pc}
 800d392:	466a      	mov	r2, sp
 800d394:	f000 f862 	bl	800d45c <_fstat_r>
 800d398:	2800      	cmp	r0, #0
 800d39a:	dbec      	blt.n	800d376 <__swhatbuf_r+0x12>
 800d39c:	9901      	ldr	r1, [sp, #4]
 800d39e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3a6:	4259      	negs	r1, r3
 800d3a8:	4159      	adcs	r1, r3
 800d3aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3ae:	e7eb      	b.n	800d388 <__swhatbuf_r+0x24>

0800d3b0 <__smakebuf_r>:
 800d3b0:	898b      	ldrh	r3, [r1, #12]
 800d3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3b4:	079d      	lsls	r5, r3, #30
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	d507      	bpl.n	800d3cc <__smakebuf_r+0x1c>
 800d3bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	6123      	str	r3, [r4, #16]
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	6163      	str	r3, [r4, #20]
 800d3c8:	b003      	add	sp, #12
 800d3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3cc:	ab01      	add	r3, sp, #4
 800d3ce:	466a      	mov	r2, sp
 800d3d0:	f7ff ffc8 	bl	800d364 <__swhatbuf_r>
 800d3d4:	9f00      	ldr	r7, [sp, #0]
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	4639      	mov	r1, r7
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f7fe fe92 	bl	800c104 <_malloc_r>
 800d3e0:	b948      	cbnz	r0, 800d3f6 <__smakebuf_r+0x46>
 800d3e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e6:	059a      	lsls	r2, r3, #22
 800d3e8:	d4ee      	bmi.n	800d3c8 <__smakebuf_r+0x18>
 800d3ea:	f023 0303 	bic.w	r3, r3, #3
 800d3ee:	f043 0302 	orr.w	r3, r3, #2
 800d3f2:	81a3      	strh	r3, [r4, #12]
 800d3f4:	e7e2      	b.n	800d3bc <__smakebuf_r+0xc>
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	6020      	str	r0, [r4, #0]
 800d3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3fe:	81a3      	strh	r3, [r4, #12]
 800d400:	9b01      	ldr	r3, [sp, #4]
 800d402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d406:	b15b      	cbz	r3, 800d420 <__smakebuf_r+0x70>
 800d408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d40c:	4630      	mov	r0, r6
 800d40e:	f000 f837 	bl	800d480 <_isatty_r>
 800d412:	b128      	cbz	r0, 800d420 <__smakebuf_r+0x70>
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	f023 0303 	bic.w	r3, r3, #3
 800d41a:	f043 0301 	orr.w	r3, r3, #1
 800d41e:	81a3      	strh	r3, [r4, #12]
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	431d      	orrs	r5, r3
 800d424:	81a5      	strh	r5, [r4, #12]
 800d426:	e7cf      	b.n	800d3c8 <__smakebuf_r+0x18>

0800d428 <memmove>:
 800d428:	4288      	cmp	r0, r1
 800d42a:	b510      	push	{r4, lr}
 800d42c:	eb01 0402 	add.w	r4, r1, r2
 800d430:	d902      	bls.n	800d438 <memmove+0x10>
 800d432:	4284      	cmp	r4, r0
 800d434:	4623      	mov	r3, r4
 800d436:	d807      	bhi.n	800d448 <memmove+0x20>
 800d438:	1e43      	subs	r3, r0, #1
 800d43a:	42a1      	cmp	r1, r4
 800d43c:	d008      	beq.n	800d450 <memmove+0x28>
 800d43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d446:	e7f8      	b.n	800d43a <memmove+0x12>
 800d448:	4402      	add	r2, r0
 800d44a:	4601      	mov	r1, r0
 800d44c:	428a      	cmp	r2, r1
 800d44e:	d100      	bne.n	800d452 <memmove+0x2a>
 800d450:	bd10      	pop	{r4, pc}
 800d452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d45a:	e7f7      	b.n	800d44c <memmove+0x24>

0800d45c <_fstat_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d07      	ldr	r5, [pc, #28]	@ (800d47c <_fstat_r+0x20>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	4611      	mov	r1, r2
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	f7f7 ff97 	bl	800539c <_fstat>
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	d102      	bne.n	800d478 <_fstat_r+0x1c>
 800d472:	682b      	ldr	r3, [r5, #0]
 800d474:	b103      	cbz	r3, 800d478 <_fstat_r+0x1c>
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	bf00      	nop
 800d47c:	20000954 	.word	0x20000954

0800d480 <_isatty_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4d06      	ldr	r5, [pc, #24]	@ (800d49c <_isatty_r+0x1c>)
 800d484:	2300      	movs	r3, #0
 800d486:	4604      	mov	r4, r0
 800d488:	4608      	mov	r0, r1
 800d48a:	602b      	str	r3, [r5, #0]
 800d48c:	f7f7 ff96 	bl	80053bc <_isatty>
 800d490:	1c43      	adds	r3, r0, #1
 800d492:	d102      	bne.n	800d49a <_isatty_r+0x1a>
 800d494:	682b      	ldr	r3, [r5, #0]
 800d496:	b103      	cbz	r3, 800d49a <_isatty_r+0x1a>
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
 800d49c:	20000954 	.word	0x20000954

0800d4a0 <_sbrk_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d06      	ldr	r5, [pc, #24]	@ (800d4bc <_sbrk_r+0x1c>)
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4608      	mov	r0, r1
 800d4aa:	602b      	str	r3, [r5, #0]
 800d4ac:	f7f7 ff9e 	bl	80053ec <_sbrk>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_sbrk_r+0x1a>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_sbrk_r+0x1a>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	20000954 	.word	0x20000954

0800d4c0 <abort>:
 800d4c0:	b508      	push	{r3, lr}
 800d4c2:	2006      	movs	r0, #6
 800d4c4:	f000 f86e 	bl	800d5a4 <raise>
 800d4c8:	2001      	movs	r0, #1
 800d4ca:	f7f7 ff33 	bl	8005334 <_exit>

0800d4ce <_calloc_r>:
 800d4ce:	b570      	push	{r4, r5, r6, lr}
 800d4d0:	fba1 5402 	umull	r5, r4, r1, r2
 800d4d4:	b93c      	cbnz	r4, 800d4e6 <_calloc_r+0x18>
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	f7fe fe14 	bl	800c104 <_malloc_r>
 800d4dc:	4606      	mov	r6, r0
 800d4de:	b928      	cbnz	r0, 800d4ec <_calloc_r+0x1e>
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	bd70      	pop	{r4, r5, r6, pc}
 800d4e6:	220c      	movs	r2, #12
 800d4e8:	6002      	str	r2, [r0, #0]
 800d4ea:	e7f9      	b.n	800d4e0 <_calloc_r+0x12>
 800d4ec:	462a      	mov	r2, r5
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	f7fd face 	bl	800aa90 <memset>
 800d4f4:	e7f5      	b.n	800d4e2 <_calloc_r+0x14>

0800d4f6 <_realloc_r>:
 800d4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fa:	4680      	mov	r8, r0
 800d4fc:	4615      	mov	r5, r2
 800d4fe:	460c      	mov	r4, r1
 800d500:	b921      	cbnz	r1, 800d50c <_realloc_r+0x16>
 800d502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d506:	4611      	mov	r1, r2
 800d508:	f7fe bdfc 	b.w	800c104 <_malloc_r>
 800d50c:	b92a      	cbnz	r2, 800d51a <_realloc_r+0x24>
 800d50e:	f7fe fa4b 	bl	800b9a8 <_free_r>
 800d512:	2400      	movs	r4, #0
 800d514:	4620      	mov	r0, r4
 800d516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d51a:	f000 f85f 	bl	800d5dc <_malloc_usable_size_r>
 800d51e:	4285      	cmp	r5, r0
 800d520:	4606      	mov	r6, r0
 800d522:	d802      	bhi.n	800d52a <_realloc_r+0x34>
 800d524:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d528:	d8f4      	bhi.n	800d514 <_realloc_r+0x1e>
 800d52a:	4629      	mov	r1, r5
 800d52c:	4640      	mov	r0, r8
 800d52e:	f7fe fde9 	bl	800c104 <_malloc_r>
 800d532:	4607      	mov	r7, r0
 800d534:	2800      	cmp	r0, #0
 800d536:	d0ec      	beq.n	800d512 <_realloc_r+0x1c>
 800d538:	42b5      	cmp	r5, r6
 800d53a:	462a      	mov	r2, r5
 800d53c:	4621      	mov	r1, r4
 800d53e:	bf28      	it	cs
 800d540:	4632      	movcs	r2, r6
 800d542:	f7fd fba8 	bl	800ac96 <memcpy>
 800d546:	4621      	mov	r1, r4
 800d548:	4640      	mov	r0, r8
 800d54a:	f7fe fa2d 	bl	800b9a8 <_free_r>
 800d54e:	463c      	mov	r4, r7
 800d550:	e7e0      	b.n	800d514 <_realloc_r+0x1e>

0800d552 <_raise_r>:
 800d552:	291f      	cmp	r1, #31
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	4605      	mov	r5, r0
 800d558:	460c      	mov	r4, r1
 800d55a:	d904      	bls.n	800d566 <_raise_r+0x14>
 800d55c:	2316      	movs	r3, #22
 800d55e:	6003      	str	r3, [r0, #0]
 800d560:	f04f 30ff 	mov.w	r0, #4294967295
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d568:	b112      	cbz	r2, 800d570 <_raise_r+0x1e>
 800d56a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d56e:	b94b      	cbnz	r3, 800d584 <_raise_r+0x32>
 800d570:	4628      	mov	r0, r5
 800d572:	f000 f831 	bl	800d5d8 <_getpid_r>
 800d576:	4622      	mov	r2, r4
 800d578:	4601      	mov	r1, r0
 800d57a:	4628      	mov	r0, r5
 800d57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d580:	f000 b818 	b.w	800d5b4 <_kill_r>
 800d584:	2b01      	cmp	r3, #1
 800d586:	d00a      	beq.n	800d59e <_raise_r+0x4c>
 800d588:	1c59      	adds	r1, r3, #1
 800d58a:	d103      	bne.n	800d594 <_raise_r+0x42>
 800d58c:	2316      	movs	r3, #22
 800d58e:	6003      	str	r3, [r0, #0]
 800d590:	2001      	movs	r0, #1
 800d592:	e7e7      	b.n	800d564 <_raise_r+0x12>
 800d594:	2100      	movs	r1, #0
 800d596:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d59a:	4620      	mov	r0, r4
 800d59c:	4798      	blx	r3
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e7e0      	b.n	800d564 <_raise_r+0x12>
	...

0800d5a4 <raise>:
 800d5a4:	4b02      	ldr	r3, [pc, #8]	@ (800d5b0 <raise+0xc>)
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	6818      	ldr	r0, [r3, #0]
 800d5aa:	f7ff bfd2 	b.w	800d552 <_raise_r>
 800d5ae:	bf00      	nop
 800d5b0:	20000204 	.word	0x20000204

0800d5b4 <_kill_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d07      	ldr	r5, [pc, #28]	@ (800d5d4 <_kill_r+0x20>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	4611      	mov	r1, r2
 800d5c0:	602b      	str	r3, [r5, #0]
 800d5c2:	f7f7 fea7 	bl	8005314 <_kill>
 800d5c6:	1c43      	adds	r3, r0, #1
 800d5c8:	d102      	bne.n	800d5d0 <_kill_r+0x1c>
 800d5ca:	682b      	ldr	r3, [r5, #0]
 800d5cc:	b103      	cbz	r3, 800d5d0 <_kill_r+0x1c>
 800d5ce:	6023      	str	r3, [r4, #0]
 800d5d0:	bd38      	pop	{r3, r4, r5, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000954 	.word	0x20000954

0800d5d8 <_getpid_r>:
 800d5d8:	f7f7 be94 	b.w	8005304 <_getpid>

0800d5dc <_malloc_usable_size_r>:
 800d5dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e0:	1f18      	subs	r0, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bfbc      	itt	lt
 800d5e6:	580b      	ldrlt	r3, [r1, r0]
 800d5e8:	18c0      	addlt	r0, r0, r3
 800d5ea:	4770      	bx	lr

0800d5ec <sqrt>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	ed2d 8b02 	vpush	{d8}
 800d5f2:	ec55 4b10 	vmov	r4, r5, d0
 800d5f6:	f000 f94d 	bl	800d894 <__ieee754_sqrt>
 800d5fa:	4622      	mov	r2, r4
 800d5fc:	462b      	mov	r3, r5
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	eeb0 8a40 	vmov.f32	s16, s0
 800d606:	eef0 8a60 	vmov.f32	s17, s1
 800d60a:	f7f3 fa8f 	bl	8000b2c <__aeabi_dcmpun>
 800d60e:	b990      	cbnz	r0, 800d636 <sqrt+0x4a>
 800d610:	2200      	movs	r2, #0
 800d612:	2300      	movs	r3, #0
 800d614:	4620      	mov	r0, r4
 800d616:	4629      	mov	r1, r5
 800d618:	f7f3 fa60 	bl	8000adc <__aeabi_dcmplt>
 800d61c:	b158      	cbz	r0, 800d636 <sqrt+0x4a>
 800d61e:	f7fd fb0d 	bl	800ac3c <__errno>
 800d622:	2321      	movs	r3, #33	@ 0x21
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	2200      	movs	r2, #0
 800d628:	2300      	movs	r3, #0
 800d62a:	4610      	mov	r0, r2
 800d62c:	4619      	mov	r1, r3
 800d62e:	f7f3 f90d 	bl	800084c <__aeabi_ddiv>
 800d632:	ec41 0b18 	vmov	d8, r0, r1
 800d636:	eeb0 0a48 	vmov.f32	s0, s16
 800d63a:	eef0 0a68 	vmov.f32	s1, s17
 800d63e:	ecbd 8b02 	vpop	{d8}
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	0000      	movs	r0, r0
	...

0800d648 <cos>:
 800d648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d64a:	ec53 2b10 	vmov	r2, r3, d0
 800d64e:	4826      	ldr	r0, [pc, #152]	@ (800d6e8 <cos+0xa0>)
 800d650:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d654:	4281      	cmp	r1, r0
 800d656:	d806      	bhi.n	800d666 <cos+0x1e>
 800d658:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d6e0 <cos+0x98>
 800d65c:	b005      	add	sp, #20
 800d65e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d662:	f000 b9f1 	b.w	800da48 <__kernel_cos>
 800d666:	4821      	ldr	r0, [pc, #132]	@ (800d6ec <cos+0xa4>)
 800d668:	4281      	cmp	r1, r0
 800d66a:	d908      	bls.n	800d67e <cos+0x36>
 800d66c:	4610      	mov	r0, r2
 800d66e:	4619      	mov	r1, r3
 800d670:	f7f2 fe0a 	bl	8000288 <__aeabi_dsub>
 800d674:	ec41 0b10 	vmov	d0, r0, r1
 800d678:	b005      	add	sp, #20
 800d67a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d67e:	4668      	mov	r0, sp
 800d680:	f000 fb66 	bl	800dd50 <__ieee754_rem_pio2>
 800d684:	f000 0003 	and.w	r0, r0, #3
 800d688:	2801      	cmp	r0, #1
 800d68a:	d00b      	beq.n	800d6a4 <cos+0x5c>
 800d68c:	2802      	cmp	r0, #2
 800d68e:	d015      	beq.n	800d6bc <cos+0x74>
 800d690:	b9d8      	cbnz	r0, 800d6ca <cos+0x82>
 800d692:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d696:	ed9d 0b00 	vldr	d0, [sp]
 800d69a:	f000 f9d5 	bl	800da48 <__kernel_cos>
 800d69e:	ec51 0b10 	vmov	r0, r1, d0
 800d6a2:	e7e7      	b.n	800d674 <cos+0x2c>
 800d6a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6a8:	ed9d 0b00 	vldr	d0, [sp]
 800d6ac:	f000 fa94 	bl	800dbd8 <__kernel_sin>
 800d6b0:	ec53 2b10 	vmov	r2, r3, d0
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d6ba:	e7db      	b.n	800d674 <cos+0x2c>
 800d6bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6c0:	ed9d 0b00 	vldr	d0, [sp]
 800d6c4:	f000 f9c0 	bl	800da48 <__kernel_cos>
 800d6c8:	e7f2      	b.n	800d6b0 <cos+0x68>
 800d6ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ce:	ed9d 0b00 	vldr	d0, [sp]
 800d6d2:	2001      	movs	r0, #1
 800d6d4:	f000 fa80 	bl	800dbd8 <__kernel_sin>
 800d6d8:	e7e1      	b.n	800d69e <cos+0x56>
 800d6da:	bf00      	nop
 800d6dc:	f3af 8000 	nop.w
	...
 800d6e8:	3fe921fb 	.word	0x3fe921fb
 800d6ec:	7fefffff 	.word	0x7fefffff

0800d6f0 <sin>:
 800d6f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6f2:	ec53 2b10 	vmov	r2, r3, d0
 800d6f6:	4826      	ldr	r0, [pc, #152]	@ (800d790 <sin+0xa0>)
 800d6f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d6fc:	4281      	cmp	r1, r0
 800d6fe:	d807      	bhi.n	800d710 <sin+0x20>
 800d700:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d788 <sin+0x98>
 800d704:	2000      	movs	r0, #0
 800d706:	b005      	add	sp, #20
 800d708:	f85d eb04 	ldr.w	lr, [sp], #4
 800d70c:	f000 ba64 	b.w	800dbd8 <__kernel_sin>
 800d710:	4820      	ldr	r0, [pc, #128]	@ (800d794 <sin+0xa4>)
 800d712:	4281      	cmp	r1, r0
 800d714:	d908      	bls.n	800d728 <sin+0x38>
 800d716:	4610      	mov	r0, r2
 800d718:	4619      	mov	r1, r3
 800d71a:	f7f2 fdb5 	bl	8000288 <__aeabi_dsub>
 800d71e:	ec41 0b10 	vmov	d0, r0, r1
 800d722:	b005      	add	sp, #20
 800d724:	f85d fb04 	ldr.w	pc, [sp], #4
 800d728:	4668      	mov	r0, sp
 800d72a:	f000 fb11 	bl	800dd50 <__ieee754_rem_pio2>
 800d72e:	f000 0003 	and.w	r0, r0, #3
 800d732:	2801      	cmp	r0, #1
 800d734:	d00c      	beq.n	800d750 <sin+0x60>
 800d736:	2802      	cmp	r0, #2
 800d738:	d011      	beq.n	800d75e <sin+0x6e>
 800d73a:	b9e8      	cbnz	r0, 800d778 <sin+0x88>
 800d73c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d740:	ed9d 0b00 	vldr	d0, [sp]
 800d744:	2001      	movs	r0, #1
 800d746:	f000 fa47 	bl	800dbd8 <__kernel_sin>
 800d74a:	ec51 0b10 	vmov	r0, r1, d0
 800d74e:	e7e6      	b.n	800d71e <sin+0x2e>
 800d750:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d754:	ed9d 0b00 	vldr	d0, [sp]
 800d758:	f000 f976 	bl	800da48 <__kernel_cos>
 800d75c:	e7f5      	b.n	800d74a <sin+0x5a>
 800d75e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d762:	ed9d 0b00 	vldr	d0, [sp]
 800d766:	2001      	movs	r0, #1
 800d768:	f000 fa36 	bl	800dbd8 <__kernel_sin>
 800d76c:	ec53 2b10 	vmov	r2, r3, d0
 800d770:	4610      	mov	r0, r2
 800d772:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d776:	e7d2      	b.n	800d71e <sin+0x2e>
 800d778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d77c:	ed9d 0b00 	vldr	d0, [sp]
 800d780:	f000 f962 	bl	800da48 <__kernel_cos>
 800d784:	e7f2      	b.n	800d76c <sin+0x7c>
 800d786:	bf00      	nop
	...
 800d790:	3fe921fb 	.word	0x3fe921fb
 800d794:	7fefffff 	.word	0x7fefffff

0800d798 <fmax>:
 800d798:	b508      	push	{r3, lr}
 800d79a:	ed2d 8b04 	vpush	{d8-d9}
 800d79e:	eeb0 8a40 	vmov.f32	s16, s0
 800d7a2:	eef0 8a60 	vmov.f32	s17, s1
 800d7a6:	eeb0 9a41 	vmov.f32	s18, s2
 800d7aa:	eef0 9a61 	vmov.f32	s19, s3
 800d7ae:	f000 f847 	bl	800d840 <__fpclassifyd>
 800d7b2:	b950      	cbnz	r0, 800d7ca <fmax+0x32>
 800d7b4:	eeb0 8a49 	vmov.f32	s16, s18
 800d7b8:	eef0 8a69 	vmov.f32	s17, s19
 800d7bc:	eeb0 0a48 	vmov.f32	s0, s16
 800d7c0:	eef0 0a68 	vmov.f32	s1, s17
 800d7c4:	ecbd 8b04 	vpop	{d8-d9}
 800d7c8:	bd08      	pop	{r3, pc}
 800d7ca:	eeb0 0a49 	vmov.f32	s0, s18
 800d7ce:	eef0 0a69 	vmov.f32	s1, s19
 800d7d2:	f000 f835 	bl	800d840 <__fpclassifyd>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d0f0      	beq.n	800d7bc <fmax+0x24>
 800d7da:	ec53 2b19 	vmov	r2, r3, d9
 800d7de:	ec51 0b18 	vmov	r0, r1, d8
 800d7e2:	f7f3 f999 	bl	8000b18 <__aeabi_dcmpgt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d0e4      	beq.n	800d7b4 <fmax+0x1c>
 800d7ea:	e7e7      	b.n	800d7bc <fmax+0x24>

0800d7ec <fmin>:
 800d7ec:	b508      	push	{r3, lr}
 800d7ee:	ed2d 8b04 	vpush	{d8-d9}
 800d7f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d7f6:	eef0 8a60 	vmov.f32	s17, s1
 800d7fa:	eeb0 9a41 	vmov.f32	s18, s2
 800d7fe:	eef0 9a61 	vmov.f32	s19, s3
 800d802:	f000 f81d 	bl	800d840 <__fpclassifyd>
 800d806:	b950      	cbnz	r0, 800d81e <fmin+0x32>
 800d808:	eeb0 8a49 	vmov.f32	s16, s18
 800d80c:	eef0 8a69 	vmov.f32	s17, s19
 800d810:	eeb0 0a48 	vmov.f32	s0, s16
 800d814:	eef0 0a68 	vmov.f32	s1, s17
 800d818:	ecbd 8b04 	vpop	{d8-d9}
 800d81c:	bd08      	pop	{r3, pc}
 800d81e:	eeb0 0a49 	vmov.f32	s0, s18
 800d822:	eef0 0a69 	vmov.f32	s1, s19
 800d826:	f000 f80b 	bl	800d840 <__fpclassifyd>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d0f0      	beq.n	800d810 <fmin+0x24>
 800d82e:	ec53 2b19 	vmov	r2, r3, d9
 800d832:	ec51 0b18 	vmov	r0, r1, d8
 800d836:	f7f3 f951 	bl	8000adc <__aeabi_dcmplt>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d0e4      	beq.n	800d808 <fmin+0x1c>
 800d83e:	e7e7      	b.n	800d810 <fmin+0x24>

0800d840 <__fpclassifyd>:
 800d840:	ec51 0b10 	vmov	r0, r1, d0
 800d844:	b510      	push	{r4, lr}
 800d846:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800d84a:	460b      	mov	r3, r1
 800d84c:	d019      	beq.n	800d882 <__fpclassifyd+0x42>
 800d84e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800d852:	490e      	ldr	r1, [pc, #56]	@ (800d88c <__fpclassifyd+0x4c>)
 800d854:	428a      	cmp	r2, r1
 800d856:	d90e      	bls.n	800d876 <__fpclassifyd+0x36>
 800d858:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800d85c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800d860:	428a      	cmp	r2, r1
 800d862:	d908      	bls.n	800d876 <__fpclassifyd+0x36>
 800d864:	4a0a      	ldr	r2, [pc, #40]	@ (800d890 <__fpclassifyd+0x50>)
 800d866:	4213      	tst	r3, r2
 800d868:	d007      	beq.n	800d87a <__fpclassifyd+0x3a>
 800d86a:	4294      	cmp	r4, r2
 800d86c:	d107      	bne.n	800d87e <__fpclassifyd+0x3e>
 800d86e:	fab0 f080 	clz	r0, r0
 800d872:	0940      	lsrs	r0, r0, #5
 800d874:	bd10      	pop	{r4, pc}
 800d876:	2004      	movs	r0, #4
 800d878:	e7fc      	b.n	800d874 <__fpclassifyd+0x34>
 800d87a:	2003      	movs	r0, #3
 800d87c:	e7fa      	b.n	800d874 <__fpclassifyd+0x34>
 800d87e:	2000      	movs	r0, #0
 800d880:	e7f8      	b.n	800d874 <__fpclassifyd+0x34>
 800d882:	2800      	cmp	r0, #0
 800d884:	d1ee      	bne.n	800d864 <__fpclassifyd+0x24>
 800d886:	2002      	movs	r0, #2
 800d888:	e7f4      	b.n	800d874 <__fpclassifyd+0x34>
 800d88a:	bf00      	nop
 800d88c:	7fdfffff 	.word	0x7fdfffff
 800d890:	7ff00000 	.word	0x7ff00000

0800d894 <__ieee754_sqrt>:
 800d894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d898:	4a68      	ldr	r2, [pc, #416]	@ (800da3c <__ieee754_sqrt+0x1a8>)
 800d89a:	ec55 4b10 	vmov	r4, r5, d0
 800d89e:	43aa      	bics	r2, r5
 800d8a0:	462b      	mov	r3, r5
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	d110      	bne.n	800d8c8 <__ieee754_sqrt+0x34>
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7f2 fea4 	bl	80005f8 <__aeabi_dmul>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	f7f2 fce8 	bl	800028c <__adddf3>
 800d8bc:	4604      	mov	r4, r0
 800d8be:	460d      	mov	r5, r1
 800d8c0:	ec45 4b10 	vmov	d0, r4, r5
 800d8c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c8:	2d00      	cmp	r5, #0
 800d8ca:	dc0e      	bgt.n	800d8ea <__ieee754_sqrt+0x56>
 800d8cc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d8d0:	4322      	orrs	r2, r4
 800d8d2:	d0f5      	beq.n	800d8c0 <__ieee754_sqrt+0x2c>
 800d8d4:	b19d      	cbz	r5, 800d8fe <__ieee754_sqrt+0x6a>
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	4620      	mov	r0, r4
 800d8da:	4629      	mov	r1, r5
 800d8dc:	f7f2 fcd4 	bl	8000288 <__aeabi_dsub>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	f7f2 ffb2 	bl	800084c <__aeabi_ddiv>
 800d8e8:	e7e8      	b.n	800d8bc <__ieee754_sqrt+0x28>
 800d8ea:	152a      	asrs	r2, r5, #20
 800d8ec:	d115      	bne.n	800d91a <__ieee754_sqrt+0x86>
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	e009      	b.n	800d906 <__ieee754_sqrt+0x72>
 800d8f2:	0acb      	lsrs	r3, r1, #11
 800d8f4:	3a15      	subs	r2, #21
 800d8f6:	0549      	lsls	r1, r1, #21
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d0fa      	beq.n	800d8f2 <__ieee754_sqrt+0x5e>
 800d8fc:	e7f7      	b.n	800d8ee <__ieee754_sqrt+0x5a>
 800d8fe:	462a      	mov	r2, r5
 800d900:	e7fa      	b.n	800d8f8 <__ieee754_sqrt+0x64>
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	3001      	adds	r0, #1
 800d906:	02dc      	lsls	r4, r3, #11
 800d908:	d5fb      	bpl.n	800d902 <__ieee754_sqrt+0x6e>
 800d90a:	1e44      	subs	r4, r0, #1
 800d90c:	1b12      	subs	r2, r2, r4
 800d90e:	f1c0 0420 	rsb	r4, r0, #32
 800d912:	fa21 f404 	lsr.w	r4, r1, r4
 800d916:	4323      	orrs	r3, r4
 800d918:	4081      	lsls	r1, r0
 800d91a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d91e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d926:	07d2      	lsls	r2, r2, #31
 800d928:	bf5c      	itt	pl
 800d92a:	005b      	lslpl	r3, r3, #1
 800d92c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d934:	bf58      	it	pl
 800d936:	0049      	lslpl	r1, r1, #1
 800d938:	2600      	movs	r6, #0
 800d93a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d93e:	106d      	asrs	r5, r5, #1
 800d940:	0049      	lsls	r1, r1, #1
 800d942:	2016      	movs	r0, #22
 800d944:	4632      	mov	r2, r6
 800d946:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d94a:	1917      	adds	r7, r2, r4
 800d94c:	429f      	cmp	r7, r3
 800d94e:	bfde      	ittt	le
 800d950:	193a      	addle	r2, r7, r4
 800d952:	1bdb      	suble	r3, r3, r7
 800d954:	1936      	addle	r6, r6, r4
 800d956:	0fcf      	lsrs	r7, r1, #31
 800d958:	3801      	subs	r0, #1
 800d95a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d95e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d962:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d966:	d1f0      	bne.n	800d94a <__ieee754_sqrt+0xb6>
 800d968:	4604      	mov	r4, r0
 800d96a:	2720      	movs	r7, #32
 800d96c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d970:	429a      	cmp	r2, r3
 800d972:	eb00 0e0c 	add.w	lr, r0, ip
 800d976:	db02      	blt.n	800d97e <__ieee754_sqrt+0xea>
 800d978:	d113      	bne.n	800d9a2 <__ieee754_sqrt+0x10e>
 800d97a:	458e      	cmp	lr, r1
 800d97c:	d811      	bhi.n	800d9a2 <__ieee754_sqrt+0x10e>
 800d97e:	f1be 0f00 	cmp.w	lr, #0
 800d982:	eb0e 000c 	add.w	r0, lr, ip
 800d986:	da42      	bge.n	800da0e <__ieee754_sqrt+0x17a>
 800d988:	2800      	cmp	r0, #0
 800d98a:	db40      	blt.n	800da0e <__ieee754_sqrt+0x17a>
 800d98c:	f102 0801 	add.w	r8, r2, #1
 800d990:	1a9b      	subs	r3, r3, r2
 800d992:	458e      	cmp	lr, r1
 800d994:	bf88      	it	hi
 800d996:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d99a:	eba1 010e 	sub.w	r1, r1, lr
 800d99e:	4464      	add	r4, ip
 800d9a0:	4642      	mov	r2, r8
 800d9a2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d9a6:	3f01      	subs	r7, #1
 800d9a8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d9ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d9b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d9b4:	d1dc      	bne.n	800d970 <__ieee754_sqrt+0xdc>
 800d9b6:	4319      	orrs	r1, r3
 800d9b8:	d01b      	beq.n	800d9f2 <__ieee754_sqrt+0x15e>
 800d9ba:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800da40 <__ieee754_sqrt+0x1ac>
 800d9be:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800da44 <__ieee754_sqrt+0x1b0>
 800d9c2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9ca:	f7f2 fc5d 	bl	8000288 <__aeabi_dsub>
 800d9ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	4649      	mov	r1, r9
 800d9da:	f7f3 f889 	bl	8000af0 <__aeabi_dcmple>
 800d9de:	b140      	cbz	r0, 800d9f2 <__ieee754_sqrt+0x15e>
 800d9e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d9e4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d9e8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d9ec:	d111      	bne.n	800da12 <__ieee754_sqrt+0x17e>
 800d9ee:	3601      	adds	r6, #1
 800d9f0:	463c      	mov	r4, r7
 800d9f2:	1072      	asrs	r2, r6, #1
 800d9f4:	0863      	lsrs	r3, r4, #1
 800d9f6:	07f1      	lsls	r1, r6, #31
 800d9f8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d9fc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800da00:	bf48      	it	mi
 800da02:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800da06:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800da0a:	4618      	mov	r0, r3
 800da0c:	e756      	b.n	800d8bc <__ieee754_sqrt+0x28>
 800da0e:	4690      	mov	r8, r2
 800da10:	e7be      	b.n	800d990 <__ieee754_sqrt+0xfc>
 800da12:	f7f2 fc3b 	bl	800028c <__adddf3>
 800da16:	e9da 8900 	ldrd	r8, r9, [sl]
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	4640      	mov	r0, r8
 800da20:	4649      	mov	r1, r9
 800da22:	f7f3 f85b 	bl	8000adc <__aeabi_dcmplt>
 800da26:	b120      	cbz	r0, 800da32 <__ieee754_sqrt+0x19e>
 800da28:	1ca0      	adds	r0, r4, #2
 800da2a:	bf08      	it	eq
 800da2c:	3601      	addeq	r6, #1
 800da2e:	3402      	adds	r4, #2
 800da30:	e7df      	b.n	800d9f2 <__ieee754_sqrt+0x15e>
 800da32:	1c63      	adds	r3, r4, #1
 800da34:	f023 0401 	bic.w	r4, r3, #1
 800da38:	e7db      	b.n	800d9f2 <__ieee754_sqrt+0x15e>
 800da3a:	bf00      	nop
 800da3c:	7ff00000 	.word	0x7ff00000
 800da40:	20000260 	.word	0x20000260
 800da44:	20000258 	.word	0x20000258

0800da48 <__kernel_cos>:
 800da48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	ec57 6b10 	vmov	r6, r7, d0
 800da50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800da54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800da58:	ed8d 1b00 	vstr	d1, [sp]
 800da5c:	d206      	bcs.n	800da6c <__kernel_cos+0x24>
 800da5e:	4630      	mov	r0, r6
 800da60:	4639      	mov	r1, r7
 800da62:	f7f3 f879 	bl	8000b58 <__aeabi_d2iz>
 800da66:	2800      	cmp	r0, #0
 800da68:	f000 8088 	beq.w	800db7c <__kernel_cos+0x134>
 800da6c:	4632      	mov	r2, r6
 800da6e:	463b      	mov	r3, r7
 800da70:	4630      	mov	r0, r6
 800da72:	4639      	mov	r1, r7
 800da74:	f7f2 fdc0 	bl	80005f8 <__aeabi_dmul>
 800da78:	4b51      	ldr	r3, [pc, #324]	@ (800dbc0 <__kernel_cos+0x178>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	4604      	mov	r4, r0
 800da7e:	460d      	mov	r5, r1
 800da80:	f7f2 fdba 	bl	80005f8 <__aeabi_dmul>
 800da84:	a340      	add	r3, pc, #256	@ (adr r3, 800db88 <__kernel_cos+0x140>)
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	4682      	mov	sl, r0
 800da8c:	468b      	mov	fp, r1
 800da8e:	4620      	mov	r0, r4
 800da90:	4629      	mov	r1, r5
 800da92:	f7f2 fdb1 	bl	80005f8 <__aeabi_dmul>
 800da96:	a33e      	add	r3, pc, #248	@ (adr r3, 800db90 <__kernel_cos+0x148>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f7f2 fbf6 	bl	800028c <__adddf3>
 800daa0:	4622      	mov	r2, r4
 800daa2:	462b      	mov	r3, r5
 800daa4:	f7f2 fda8 	bl	80005f8 <__aeabi_dmul>
 800daa8:	a33b      	add	r3, pc, #236	@ (adr r3, 800db98 <__kernel_cos+0x150>)
 800daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daae:	f7f2 fbeb 	bl	8000288 <__aeabi_dsub>
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	f7f2 fd9f 	bl	80005f8 <__aeabi_dmul>
 800daba:	a339      	add	r3, pc, #228	@ (adr r3, 800dba0 <__kernel_cos+0x158>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f7f2 fbe4 	bl	800028c <__adddf3>
 800dac4:	4622      	mov	r2, r4
 800dac6:	462b      	mov	r3, r5
 800dac8:	f7f2 fd96 	bl	80005f8 <__aeabi_dmul>
 800dacc:	a336      	add	r3, pc, #216	@ (adr r3, 800dba8 <__kernel_cos+0x160>)
 800dace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad2:	f7f2 fbd9 	bl	8000288 <__aeabi_dsub>
 800dad6:	4622      	mov	r2, r4
 800dad8:	462b      	mov	r3, r5
 800dada:	f7f2 fd8d 	bl	80005f8 <__aeabi_dmul>
 800dade:	a334      	add	r3, pc, #208	@ (adr r3, 800dbb0 <__kernel_cos+0x168>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	f7f2 fbd2 	bl	800028c <__adddf3>
 800dae8:	4622      	mov	r2, r4
 800daea:	462b      	mov	r3, r5
 800daec:	f7f2 fd84 	bl	80005f8 <__aeabi_dmul>
 800daf0:	4622      	mov	r2, r4
 800daf2:	462b      	mov	r3, r5
 800daf4:	f7f2 fd80 	bl	80005f8 <__aeabi_dmul>
 800daf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 fd78 	bl	80005f8 <__aeabi_dmul>
 800db08:	460b      	mov	r3, r1
 800db0a:	4602      	mov	r2, r0
 800db0c:	4629      	mov	r1, r5
 800db0e:	4620      	mov	r0, r4
 800db10:	f7f2 fbba 	bl	8000288 <__aeabi_dsub>
 800db14:	4b2b      	ldr	r3, [pc, #172]	@ (800dbc4 <__kernel_cos+0x17c>)
 800db16:	4598      	cmp	r8, r3
 800db18:	4606      	mov	r6, r0
 800db1a:	460f      	mov	r7, r1
 800db1c:	d810      	bhi.n	800db40 <__kernel_cos+0xf8>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4650      	mov	r0, sl
 800db24:	4659      	mov	r1, fp
 800db26:	f7f2 fbaf 	bl	8000288 <__aeabi_dsub>
 800db2a:	460b      	mov	r3, r1
 800db2c:	4926      	ldr	r1, [pc, #152]	@ (800dbc8 <__kernel_cos+0x180>)
 800db2e:	4602      	mov	r2, r0
 800db30:	2000      	movs	r0, #0
 800db32:	f7f2 fba9 	bl	8000288 <__aeabi_dsub>
 800db36:	ec41 0b10 	vmov	d0, r0, r1
 800db3a:	b003      	add	sp, #12
 800db3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db40:	4b22      	ldr	r3, [pc, #136]	@ (800dbcc <__kernel_cos+0x184>)
 800db42:	4921      	ldr	r1, [pc, #132]	@ (800dbc8 <__kernel_cos+0x180>)
 800db44:	4598      	cmp	r8, r3
 800db46:	bf8c      	ite	hi
 800db48:	4d21      	ldrhi	r5, [pc, #132]	@ (800dbd0 <__kernel_cos+0x188>)
 800db4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800db4e:	2400      	movs	r4, #0
 800db50:	4622      	mov	r2, r4
 800db52:	462b      	mov	r3, r5
 800db54:	2000      	movs	r0, #0
 800db56:	f7f2 fb97 	bl	8000288 <__aeabi_dsub>
 800db5a:	4622      	mov	r2, r4
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	462b      	mov	r3, r5
 800db62:	4650      	mov	r0, sl
 800db64:	4659      	mov	r1, fp
 800db66:	f7f2 fb8f 	bl	8000288 <__aeabi_dsub>
 800db6a:	4632      	mov	r2, r6
 800db6c:	463b      	mov	r3, r7
 800db6e:	f7f2 fb8b 	bl	8000288 <__aeabi_dsub>
 800db72:	4602      	mov	r2, r0
 800db74:	460b      	mov	r3, r1
 800db76:	4640      	mov	r0, r8
 800db78:	4649      	mov	r1, r9
 800db7a:	e7da      	b.n	800db32 <__kernel_cos+0xea>
 800db7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800dbb8 <__kernel_cos+0x170>
 800db80:	e7db      	b.n	800db3a <__kernel_cos+0xf2>
 800db82:	bf00      	nop
 800db84:	f3af 8000 	nop.w
 800db88:	be8838d4 	.word	0xbe8838d4
 800db8c:	bda8fae9 	.word	0xbda8fae9
 800db90:	bdb4b1c4 	.word	0xbdb4b1c4
 800db94:	3e21ee9e 	.word	0x3e21ee9e
 800db98:	809c52ad 	.word	0x809c52ad
 800db9c:	3e927e4f 	.word	0x3e927e4f
 800dba0:	19cb1590 	.word	0x19cb1590
 800dba4:	3efa01a0 	.word	0x3efa01a0
 800dba8:	16c15177 	.word	0x16c15177
 800dbac:	3f56c16c 	.word	0x3f56c16c
 800dbb0:	5555554c 	.word	0x5555554c
 800dbb4:	3fa55555 	.word	0x3fa55555
 800dbb8:	00000000 	.word	0x00000000
 800dbbc:	3ff00000 	.word	0x3ff00000
 800dbc0:	3fe00000 	.word	0x3fe00000
 800dbc4:	3fd33332 	.word	0x3fd33332
 800dbc8:	3ff00000 	.word	0x3ff00000
 800dbcc:	3fe90000 	.word	0x3fe90000
 800dbd0:	3fd20000 	.word	0x3fd20000
 800dbd4:	00000000 	.word	0x00000000

0800dbd8 <__kernel_sin>:
 800dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbdc:	ec55 4b10 	vmov	r4, r5, d0
 800dbe0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dbe4:	b085      	sub	sp, #20
 800dbe6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dbea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800dbee:	4680      	mov	r8, r0
 800dbf0:	d205      	bcs.n	800dbfe <__kernel_sin+0x26>
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	f7f2 ffaf 	bl	8000b58 <__aeabi_d2iz>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d052      	beq.n	800dca4 <__kernel_sin+0xcc>
 800dbfe:	4622      	mov	r2, r4
 800dc00:	462b      	mov	r3, r5
 800dc02:	4620      	mov	r0, r4
 800dc04:	4629      	mov	r1, r5
 800dc06:	f7f2 fcf7 	bl	80005f8 <__aeabi_dmul>
 800dc0a:	4682      	mov	sl, r0
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	f7f2 fcef 	bl	80005f8 <__aeabi_dmul>
 800dc1a:	a342      	add	r3, pc, #264	@ (adr r3, 800dd24 <__kernel_sin+0x14c>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	e9cd 0100 	strd	r0, r1, [sp]
 800dc24:	4650      	mov	r0, sl
 800dc26:	4659      	mov	r1, fp
 800dc28:	f7f2 fce6 	bl	80005f8 <__aeabi_dmul>
 800dc2c:	a33f      	add	r3, pc, #252	@ (adr r3, 800dd2c <__kernel_sin+0x154>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	f7f2 fb29 	bl	8000288 <__aeabi_dsub>
 800dc36:	4652      	mov	r2, sl
 800dc38:	465b      	mov	r3, fp
 800dc3a:	f7f2 fcdd 	bl	80005f8 <__aeabi_dmul>
 800dc3e:	a33d      	add	r3, pc, #244	@ (adr r3, 800dd34 <__kernel_sin+0x15c>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 fb22 	bl	800028c <__adddf3>
 800dc48:	4652      	mov	r2, sl
 800dc4a:	465b      	mov	r3, fp
 800dc4c:	f7f2 fcd4 	bl	80005f8 <__aeabi_dmul>
 800dc50:	a33a      	add	r3, pc, #232	@ (adr r3, 800dd3c <__kernel_sin+0x164>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	f7f2 fb17 	bl	8000288 <__aeabi_dsub>
 800dc5a:	4652      	mov	r2, sl
 800dc5c:	465b      	mov	r3, fp
 800dc5e:	f7f2 fccb 	bl	80005f8 <__aeabi_dmul>
 800dc62:	a338      	add	r3, pc, #224	@ (adr r3, 800dd44 <__kernel_sin+0x16c>)
 800dc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc68:	f7f2 fb10 	bl	800028c <__adddf3>
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	460f      	mov	r7, r1
 800dc70:	f1b8 0f00 	cmp.w	r8, #0
 800dc74:	d11b      	bne.n	800dcae <__kernel_sin+0xd6>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	4659      	mov	r1, fp
 800dc7e:	f7f2 fcbb 	bl	80005f8 <__aeabi_dmul>
 800dc82:	a325      	add	r3, pc, #148	@ (adr r3, 800dd18 <__kernel_sin+0x140>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	f7f2 fafe 	bl	8000288 <__aeabi_dsub>
 800dc8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc90:	f7f2 fcb2 	bl	80005f8 <__aeabi_dmul>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	4620      	mov	r0, r4
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	f7f2 faf6 	bl	800028c <__adddf3>
 800dca0:	4604      	mov	r4, r0
 800dca2:	460d      	mov	r5, r1
 800dca4:	ec45 4b10 	vmov	d0, r4, r5
 800dca8:	b005      	add	sp, #20
 800dcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcb2:	4b1b      	ldr	r3, [pc, #108]	@ (800dd20 <__kernel_sin+0x148>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f7f2 fc9f 	bl	80005f8 <__aeabi_dmul>
 800dcba:	4632      	mov	r2, r6
 800dcbc:	4680      	mov	r8, r0
 800dcbe:	4689      	mov	r9, r1
 800dcc0:	463b      	mov	r3, r7
 800dcc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcc6:	f7f2 fc97 	bl	80005f8 <__aeabi_dmul>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4640      	mov	r0, r8
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	f7f2 fad9 	bl	8000288 <__aeabi_dsub>
 800dcd6:	4652      	mov	r2, sl
 800dcd8:	465b      	mov	r3, fp
 800dcda:	f7f2 fc8d 	bl	80005f8 <__aeabi_dmul>
 800dcde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dce2:	f7f2 fad1 	bl	8000288 <__aeabi_dsub>
 800dce6:	a30c      	add	r3, pc, #48	@ (adr r3, 800dd18 <__kernel_sin+0x140>)
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	4606      	mov	r6, r0
 800dcee:	460f      	mov	r7, r1
 800dcf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcf4:	f7f2 fc80 	bl	80005f8 <__aeabi_dmul>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	4639      	mov	r1, r7
 800dd00:	f7f2 fac4 	bl	800028c <__adddf3>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7f2 fabc 	bl	8000288 <__aeabi_dsub>
 800dd10:	e7c6      	b.n	800dca0 <__kernel_sin+0xc8>
 800dd12:	bf00      	nop
 800dd14:	f3af 8000 	nop.w
 800dd18:	55555549 	.word	0x55555549
 800dd1c:	3fc55555 	.word	0x3fc55555
 800dd20:	3fe00000 	.word	0x3fe00000
 800dd24:	5acfd57c 	.word	0x5acfd57c
 800dd28:	3de5d93a 	.word	0x3de5d93a
 800dd2c:	8a2b9ceb 	.word	0x8a2b9ceb
 800dd30:	3e5ae5e6 	.word	0x3e5ae5e6
 800dd34:	57b1fe7d 	.word	0x57b1fe7d
 800dd38:	3ec71de3 	.word	0x3ec71de3
 800dd3c:	19c161d5 	.word	0x19c161d5
 800dd40:	3f2a01a0 	.word	0x3f2a01a0
 800dd44:	1110f8a6 	.word	0x1110f8a6
 800dd48:	3f811111 	.word	0x3f811111
 800dd4c:	00000000 	.word	0x00000000

0800dd50 <__ieee754_rem_pio2>:
 800dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd54:	ec57 6b10 	vmov	r6, r7, d0
 800dd58:	4bc5      	ldr	r3, [pc, #788]	@ (800e070 <__ieee754_rem_pio2+0x320>)
 800dd5a:	b08d      	sub	sp, #52	@ 0x34
 800dd5c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dd60:	4598      	cmp	r8, r3
 800dd62:	4604      	mov	r4, r0
 800dd64:	9704      	str	r7, [sp, #16]
 800dd66:	d807      	bhi.n	800dd78 <__ieee754_rem_pio2+0x28>
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	ed80 0b00 	vstr	d0, [r0]
 800dd70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dd74:	2500      	movs	r5, #0
 800dd76:	e028      	b.n	800ddca <__ieee754_rem_pio2+0x7a>
 800dd78:	4bbe      	ldr	r3, [pc, #760]	@ (800e074 <__ieee754_rem_pio2+0x324>)
 800dd7a:	4598      	cmp	r8, r3
 800dd7c:	d878      	bhi.n	800de70 <__ieee754_rem_pio2+0x120>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	4dbd      	ldr	r5, [pc, #756]	@ (800e078 <__ieee754_rem_pio2+0x328>)
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	4630      	mov	r0, r6
 800dd86:	a3ac      	add	r3, pc, #688	@ (adr r3, 800e038 <__ieee754_rem_pio2+0x2e8>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	4639      	mov	r1, r7
 800dd8e:	dd38      	ble.n	800de02 <__ieee754_rem_pio2+0xb2>
 800dd90:	f7f2 fa7a 	bl	8000288 <__aeabi_dsub>
 800dd94:	45a8      	cmp	r8, r5
 800dd96:	4606      	mov	r6, r0
 800dd98:	460f      	mov	r7, r1
 800dd9a:	d01a      	beq.n	800ddd2 <__ieee754_rem_pio2+0x82>
 800dd9c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800e040 <__ieee754_rem_pio2+0x2f0>)
 800dd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda2:	f7f2 fa71 	bl	8000288 <__aeabi_dsub>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4680      	mov	r8, r0
 800ddac:	4689      	mov	r9, r1
 800ddae:	4630      	mov	r0, r6
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	f7f2 fa69 	bl	8000288 <__aeabi_dsub>
 800ddb6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800e040 <__ieee754_rem_pio2+0x2f0>)
 800ddb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbc:	f7f2 fa64 	bl	8000288 <__aeabi_dsub>
 800ddc0:	e9c4 8900 	strd	r8, r9, [r4]
 800ddc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddc8:	2501      	movs	r5, #1
 800ddca:	4628      	mov	r0, r5
 800ddcc:	b00d      	add	sp, #52	@ 0x34
 800ddce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd2:	a39d      	add	r3, pc, #628	@ (adr r3, 800e048 <__ieee754_rem_pio2+0x2f8>)
 800ddd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd8:	f7f2 fa56 	bl	8000288 <__aeabi_dsub>
 800dddc:	a39c      	add	r3, pc, #624	@ (adr r3, 800e050 <__ieee754_rem_pio2+0x300>)
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	4606      	mov	r6, r0
 800dde4:	460f      	mov	r7, r1
 800dde6:	f7f2 fa4f 	bl	8000288 <__aeabi_dsub>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4680      	mov	r8, r0
 800ddf0:	4689      	mov	r9, r1
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	f7f2 fa47 	bl	8000288 <__aeabi_dsub>
 800ddfa:	a395      	add	r3, pc, #596	@ (adr r3, 800e050 <__ieee754_rem_pio2+0x300>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	e7dc      	b.n	800ddbc <__ieee754_rem_pio2+0x6c>
 800de02:	f7f2 fa43 	bl	800028c <__adddf3>
 800de06:	45a8      	cmp	r8, r5
 800de08:	4606      	mov	r6, r0
 800de0a:	460f      	mov	r7, r1
 800de0c:	d018      	beq.n	800de40 <__ieee754_rem_pio2+0xf0>
 800de0e:	a38c      	add	r3, pc, #560	@ (adr r3, 800e040 <__ieee754_rem_pio2+0x2f0>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	f7f2 fa3a 	bl	800028c <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4680      	mov	r8, r0
 800de1e:	4689      	mov	r9, r1
 800de20:	4630      	mov	r0, r6
 800de22:	4639      	mov	r1, r7
 800de24:	f7f2 fa30 	bl	8000288 <__aeabi_dsub>
 800de28:	a385      	add	r3, pc, #532	@ (adr r3, 800e040 <__ieee754_rem_pio2+0x2f0>)
 800de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2e:	f7f2 fa2d 	bl	800028c <__adddf3>
 800de32:	f04f 35ff 	mov.w	r5, #4294967295
 800de36:	e9c4 8900 	strd	r8, r9, [r4]
 800de3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de3e:	e7c4      	b.n	800ddca <__ieee754_rem_pio2+0x7a>
 800de40:	a381      	add	r3, pc, #516	@ (adr r3, 800e048 <__ieee754_rem_pio2+0x2f8>)
 800de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de46:	f7f2 fa21 	bl	800028c <__adddf3>
 800de4a:	a381      	add	r3, pc, #516	@ (adr r3, 800e050 <__ieee754_rem_pio2+0x300>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	4606      	mov	r6, r0
 800de52:	460f      	mov	r7, r1
 800de54:	f7f2 fa1a 	bl	800028c <__adddf3>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4680      	mov	r8, r0
 800de5e:	4689      	mov	r9, r1
 800de60:	4630      	mov	r0, r6
 800de62:	4639      	mov	r1, r7
 800de64:	f7f2 fa10 	bl	8000288 <__aeabi_dsub>
 800de68:	a379      	add	r3, pc, #484	@ (adr r3, 800e050 <__ieee754_rem_pio2+0x300>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	e7de      	b.n	800de2e <__ieee754_rem_pio2+0xde>
 800de70:	4b82      	ldr	r3, [pc, #520]	@ (800e07c <__ieee754_rem_pio2+0x32c>)
 800de72:	4598      	cmp	r8, r3
 800de74:	f200 80d1 	bhi.w	800e01a <__ieee754_rem_pio2+0x2ca>
 800de78:	f000 f966 	bl	800e148 <fabs>
 800de7c:	ec57 6b10 	vmov	r6, r7, d0
 800de80:	a375      	add	r3, pc, #468	@ (adr r3, 800e058 <__ieee754_rem_pio2+0x308>)
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	4630      	mov	r0, r6
 800de88:	4639      	mov	r1, r7
 800de8a:	f7f2 fbb5 	bl	80005f8 <__aeabi_dmul>
 800de8e:	4b7c      	ldr	r3, [pc, #496]	@ (800e080 <__ieee754_rem_pio2+0x330>)
 800de90:	2200      	movs	r2, #0
 800de92:	f7f2 f9fb 	bl	800028c <__adddf3>
 800de96:	f7f2 fe5f 	bl	8000b58 <__aeabi_d2iz>
 800de9a:	4605      	mov	r5, r0
 800de9c:	f7f2 fb42 	bl	8000524 <__aeabi_i2d>
 800dea0:	4602      	mov	r2, r0
 800dea2:	460b      	mov	r3, r1
 800dea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dea8:	a363      	add	r3, pc, #396	@ (adr r3, 800e038 <__ieee754_rem_pio2+0x2e8>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f7f2 fba3 	bl	80005f8 <__aeabi_dmul>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 f9e5 	bl	8000288 <__aeabi_dsub>
 800debe:	a360      	add	r3, pc, #384	@ (adr r3, 800e040 <__ieee754_rem_pio2+0x2f0>)
 800dec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec4:	4682      	mov	sl, r0
 800dec6:	468b      	mov	fp, r1
 800dec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800decc:	f7f2 fb94 	bl	80005f8 <__aeabi_dmul>
 800ded0:	2d1f      	cmp	r5, #31
 800ded2:	4606      	mov	r6, r0
 800ded4:	460f      	mov	r7, r1
 800ded6:	dc0c      	bgt.n	800def2 <__ieee754_rem_pio2+0x1a2>
 800ded8:	4b6a      	ldr	r3, [pc, #424]	@ (800e084 <__ieee754_rem_pio2+0x334>)
 800deda:	1e6a      	subs	r2, r5, #1
 800dedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dee0:	4543      	cmp	r3, r8
 800dee2:	d006      	beq.n	800def2 <__ieee754_rem_pio2+0x1a2>
 800dee4:	4632      	mov	r2, r6
 800dee6:	463b      	mov	r3, r7
 800dee8:	4650      	mov	r0, sl
 800deea:	4659      	mov	r1, fp
 800deec:	f7f2 f9cc 	bl	8000288 <__aeabi_dsub>
 800def0:	e00e      	b.n	800df10 <__ieee754_rem_pio2+0x1c0>
 800def2:	463b      	mov	r3, r7
 800def4:	4632      	mov	r2, r6
 800def6:	4650      	mov	r0, sl
 800def8:	4659      	mov	r1, fp
 800defa:	f7f2 f9c5 	bl	8000288 <__aeabi_dsub>
 800defe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800df02:	9305      	str	r3, [sp, #20]
 800df04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df08:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800df0c:	2b10      	cmp	r3, #16
 800df0e:	dc02      	bgt.n	800df16 <__ieee754_rem_pio2+0x1c6>
 800df10:	e9c4 0100 	strd	r0, r1, [r4]
 800df14:	e039      	b.n	800df8a <__ieee754_rem_pio2+0x23a>
 800df16:	a34c      	add	r3, pc, #304	@ (adr r3, 800e048 <__ieee754_rem_pio2+0x2f8>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df20:	f7f2 fb6a 	bl	80005f8 <__aeabi_dmul>
 800df24:	4606      	mov	r6, r0
 800df26:	460f      	mov	r7, r1
 800df28:	4602      	mov	r2, r0
 800df2a:	460b      	mov	r3, r1
 800df2c:	4650      	mov	r0, sl
 800df2e:	4659      	mov	r1, fp
 800df30:	f7f2 f9aa 	bl	8000288 <__aeabi_dsub>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4680      	mov	r8, r0
 800df3a:	4689      	mov	r9, r1
 800df3c:	4650      	mov	r0, sl
 800df3e:	4659      	mov	r1, fp
 800df40:	f7f2 f9a2 	bl	8000288 <__aeabi_dsub>
 800df44:	4632      	mov	r2, r6
 800df46:	463b      	mov	r3, r7
 800df48:	f7f2 f99e 	bl	8000288 <__aeabi_dsub>
 800df4c:	a340      	add	r3, pc, #256	@ (adr r3, 800e050 <__ieee754_rem_pio2+0x300>)
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	4606      	mov	r6, r0
 800df54:	460f      	mov	r7, r1
 800df56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df5a:	f7f2 fb4d 	bl	80005f8 <__aeabi_dmul>
 800df5e:	4632      	mov	r2, r6
 800df60:	463b      	mov	r3, r7
 800df62:	f7f2 f991 	bl	8000288 <__aeabi_dsub>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4606      	mov	r6, r0
 800df6c:	460f      	mov	r7, r1
 800df6e:	4640      	mov	r0, r8
 800df70:	4649      	mov	r1, r9
 800df72:	f7f2 f989 	bl	8000288 <__aeabi_dsub>
 800df76:	9a05      	ldr	r2, [sp, #20]
 800df78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df7c:	1ad3      	subs	r3, r2, r3
 800df7e:	2b31      	cmp	r3, #49	@ 0x31
 800df80:	dc20      	bgt.n	800dfc4 <__ieee754_rem_pio2+0x274>
 800df82:	e9c4 0100 	strd	r0, r1, [r4]
 800df86:	46c2      	mov	sl, r8
 800df88:	46cb      	mov	fp, r9
 800df8a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800df8e:	4650      	mov	r0, sl
 800df90:	4642      	mov	r2, r8
 800df92:	464b      	mov	r3, r9
 800df94:	4659      	mov	r1, fp
 800df96:	f7f2 f977 	bl	8000288 <__aeabi_dsub>
 800df9a:	463b      	mov	r3, r7
 800df9c:	4632      	mov	r2, r6
 800df9e:	f7f2 f973 	bl	8000288 <__aeabi_dsub>
 800dfa2:	9b04      	ldr	r3, [sp, #16]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dfaa:	f6bf af0e 	bge.w	800ddca <__ieee754_rem_pio2+0x7a>
 800dfae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800dfb2:	6063      	str	r3, [r4, #4]
 800dfb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfb8:	f8c4 8000 	str.w	r8, [r4]
 800dfbc:	60a0      	str	r0, [r4, #8]
 800dfbe:	60e3      	str	r3, [r4, #12]
 800dfc0:	426d      	negs	r5, r5
 800dfc2:	e702      	b.n	800ddca <__ieee754_rem_pio2+0x7a>
 800dfc4:	a326      	add	r3, pc, #152	@ (adr r3, 800e060 <__ieee754_rem_pio2+0x310>)
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfce:	f7f2 fb13 	bl	80005f8 <__aeabi_dmul>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	460f      	mov	r7, r1
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	4640      	mov	r0, r8
 800dfdc:	4649      	mov	r1, r9
 800dfde:	f7f2 f953 	bl	8000288 <__aeabi_dsub>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	460b      	mov	r3, r1
 800dfe6:	4682      	mov	sl, r0
 800dfe8:	468b      	mov	fp, r1
 800dfea:	4640      	mov	r0, r8
 800dfec:	4649      	mov	r1, r9
 800dfee:	f7f2 f94b 	bl	8000288 <__aeabi_dsub>
 800dff2:	4632      	mov	r2, r6
 800dff4:	463b      	mov	r3, r7
 800dff6:	f7f2 f947 	bl	8000288 <__aeabi_dsub>
 800dffa:	a31b      	add	r3, pc, #108	@ (adr r3, 800e068 <__ieee754_rem_pio2+0x318>)
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	4606      	mov	r6, r0
 800e002:	460f      	mov	r7, r1
 800e004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e008:	f7f2 faf6 	bl	80005f8 <__aeabi_dmul>
 800e00c:	4632      	mov	r2, r6
 800e00e:	463b      	mov	r3, r7
 800e010:	f7f2 f93a 	bl	8000288 <__aeabi_dsub>
 800e014:	4606      	mov	r6, r0
 800e016:	460f      	mov	r7, r1
 800e018:	e764      	b.n	800dee4 <__ieee754_rem_pio2+0x194>
 800e01a:	4b1b      	ldr	r3, [pc, #108]	@ (800e088 <__ieee754_rem_pio2+0x338>)
 800e01c:	4598      	cmp	r8, r3
 800e01e:	d935      	bls.n	800e08c <__ieee754_rem_pio2+0x33c>
 800e020:	4632      	mov	r2, r6
 800e022:	463b      	mov	r3, r7
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 f92e 	bl	8000288 <__aeabi_dsub>
 800e02c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e030:	e9c4 0100 	strd	r0, r1, [r4]
 800e034:	e69e      	b.n	800dd74 <__ieee754_rem_pio2+0x24>
 800e036:	bf00      	nop
 800e038:	54400000 	.word	0x54400000
 800e03c:	3ff921fb 	.word	0x3ff921fb
 800e040:	1a626331 	.word	0x1a626331
 800e044:	3dd0b461 	.word	0x3dd0b461
 800e048:	1a600000 	.word	0x1a600000
 800e04c:	3dd0b461 	.word	0x3dd0b461
 800e050:	2e037073 	.word	0x2e037073
 800e054:	3ba3198a 	.word	0x3ba3198a
 800e058:	6dc9c883 	.word	0x6dc9c883
 800e05c:	3fe45f30 	.word	0x3fe45f30
 800e060:	2e000000 	.word	0x2e000000
 800e064:	3ba3198a 	.word	0x3ba3198a
 800e068:	252049c1 	.word	0x252049c1
 800e06c:	397b839a 	.word	0x397b839a
 800e070:	3fe921fb 	.word	0x3fe921fb
 800e074:	4002d97b 	.word	0x4002d97b
 800e078:	3ff921fb 	.word	0x3ff921fb
 800e07c:	413921fb 	.word	0x413921fb
 800e080:	3fe00000 	.word	0x3fe00000
 800e084:	0800ef7c 	.word	0x0800ef7c
 800e088:	7fefffff 	.word	0x7fefffff
 800e08c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e090:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800e094:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e098:	4630      	mov	r0, r6
 800e09a:	460f      	mov	r7, r1
 800e09c:	f7f2 fd5c 	bl	8000b58 <__aeabi_d2iz>
 800e0a0:	f7f2 fa40 	bl	8000524 <__aeabi_i2d>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e0b0:	f7f2 f8ea 	bl	8000288 <__aeabi_dsub>
 800e0b4:	4b22      	ldr	r3, [pc, #136]	@ (800e140 <__ieee754_rem_pio2+0x3f0>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	f7f2 fa9e 	bl	80005f8 <__aeabi_dmul>
 800e0bc:	460f      	mov	r7, r1
 800e0be:	4606      	mov	r6, r0
 800e0c0:	f7f2 fd4a 	bl	8000b58 <__aeabi_d2iz>
 800e0c4:	f7f2 fa2e 	bl	8000524 <__aeabi_i2d>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	4639      	mov	r1, r7
 800e0d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e0d4:	f7f2 f8d8 	bl	8000288 <__aeabi_dsub>
 800e0d8:	4b19      	ldr	r3, [pc, #100]	@ (800e140 <__ieee754_rem_pio2+0x3f0>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f7f2 fa8c 	bl	80005f8 <__aeabi_dmul>
 800e0e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800e0e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800e0e8:	f04f 0803 	mov.w	r8, #3
 800e0ec:	2600      	movs	r6, #0
 800e0ee:	2700      	movs	r7, #0
 800e0f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e0f4:	4632      	mov	r2, r6
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	46c2      	mov	sl, r8
 800e0fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0fe:	f7f2 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e102:	2800      	cmp	r0, #0
 800e104:	d1f4      	bne.n	800e0f0 <__ieee754_rem_pio2+0x3a0>
 800e106:	4b0f      	ldr	r3, [pc, #60]	@ (800e144 <__ieee754_rem_pio2+0x3f4>)
 800e108:	9301      	str	r3, [sp, #4]
 800e10a:	2302      	movs	r3, #2
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	462a      	mov	r2, r5
 800e110:	4653      	mov	r3, sl
 800e112:	4621      	mov	r1, r4
 800e114:	a806      	add	r0, sp, #24
 800e116:	f000 f81f 	bl	800e158 <__kernel_rem_pio2>
 800e11a:	9b04      	ldr	r3, [sp, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	4605      	mov	r5, r0
 800e120:	f6bf ae53 	bge.w	800ddca <__ieee754_rem_pio2+0x7a>
 800e124:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e128:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e12c:	e9c4 2300 	strd	r2, r3, [r4]
 800e130:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e138:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e13c:	e740      	b.n	800dfc0 <__ieee754_rem_pio2+0x270>
 800e13e:	bf00      	nop
 800e140:	41700000 	.word	0x41700000
 800e144:	0800effc 	.word	0x0800effc

0800e148 <fabs>:
 800e148:	ec51 0b10 	vmov	r0, r1, d0
 800e14c:	4602      	mov	r2, r0
 800e14e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e152:	ec43 2b10 	vmov	d0, r2, r3
 800e156:	4770      	bx	lr

0800e158 <__kernel_rem_pio2>:
 800e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	ed2d 8b02 	vpush	{d8}
 800e160:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e164:	f112 0f14 	cmn.w	r2, #20
 800e168:	9306      	str	r3, [sp, #24]
 800e16a:	9104      	str	r1, [sp, #16]
 800e16c:	4bbe      	ldr	r3, [pc, #760]	@ (800e468 <__kernel_rem_pio2+0x310>)
 800e16e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e170:	9008      	str	r0, [sp, #32]
 800e172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	9b06      	ldr	r3, [sp, #24]
 800e17a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e17e:	bfa8      	it	ge
 800e180:	1ed4      	subge	r4, r2, #3
 800e182:	9305      	str	r3, [sp, #20]
 800e184:	bfb2      	itee	lt
 800e186:	2400      	movlt	r4, #0
 800e188:	2318      	movge	r3, #24
 800e18a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e18e:	f06f 0317 	mvn.w	r3, #23
 800e192:	fb04 3303 	mla	r3, r4, r3, r3
 800e196:	eb03 0b02 	add.w	fp, r3, r2
 800e19a:	9b00      	ldr	r3, [sp, #0]
 800e19c:	9a05      	ldr	r2, [sp, #20]
 800e19e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e458 <__kernel_rem_pio2+0x300>
 800e1a2:	eb03 0802 	add.w	r8, r3, r2
 800e1a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e1a8:	1aa7      	subs	r7, r4, r2
 800e1aa:	ae20      	add	r6, sp, #128	@ 0x80
 800e1ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e1b0:	2500      	movs	r5, #0
 800e1b2:	4545      	cmp	r5, r8
 800e1b4:	dd13      	ble.n	800e1de <__kernel_rem_pio2+0x86>
 800e1b6:	9b06      	ldr	r3, [sp, #24]
 800e1b8:	aa20      	add	r2, sp, #128	@ 0x80
 800e1ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e1be:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e1c2:	f04f 0800 	mov.w	r8, #0
 800e1c6:	9b00      	ldr	r3, [sp, #0]
 800e1c8:	4598      	cmp	r8, r3
 800e1ca:	dc31      	bgt.n	800e230 <__kernel_rem_pio2+0xd8>
 800e1cc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e458 <__kernel_rem_pio2+0x300>
 800e1d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e1d8:	462f      	mov	r7, r5
 800e1da:	2600      	movs	r6, #0
 800e1dc:	e01b      	b.n	800e216 <__kernel_rem_pio2+0xbe>
 800e1de:	42ef      	cmn	r7, r5
 800e1e0:	d407      	bmi.n	800e1f2 <__kernel_rem_pio2+0x9a>
 800e1e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e1e6:	f7f2 f99d 	bl	8000524 <__aeabi_i2d>
 800e1ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e1ee:	3501      	adds	r5, #1
 800e1f0:	e7df      	b.n	800e1b2 <__kernel_rem_pio2+0x5a>
 800e1f2:	ec51 0b18 	vmov	r0, r1, d8
 800e1f6:	e7f8      	b.n	800e1ea <__kernel_rem_pio2+0x92>
 800e1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e200:	f7f2 f9fa 	bl	80005f8 <__aeabi_dmul>
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e20c:	f7f2 f83e 	bl	800028c <__adddf3>
 800e210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e214:	3601      	adds	r6, #1
 800e216:	9b05      	ldr	r3, [sp, #20]
 800e218:	429e      	cmp	r6, r3
 800e21a:	f1a7 0708 	sub.w	r7, r7, #8
 800e21e:	ddeb      	ble.n	800e1f8 <__kernel_rem_pio2+0xa0>
 800e220:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e224:	f108 0801 	add.w	r8, r8, #1
 800e228:	ecaa 7b02 	vstmia	sl!, {d7}
 800e22c:	3508      	adds	r5, #8
 800e22e:	e7ca      	b.n	800e1c6 <__kernel_rem_pio2+0x6e>
 800e230:	9b00      	ldr	r3, [sp, #0]
 800e232:	f8dd 8000 	ldr.w	r8, [sp]
 800e236:	aa0c      	add	r2, sp, #48	@ 0x30
 800e238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e23c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e23e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e240:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e244:	9309      	str	r3, [sp, #36]	@ 0x24
 800e246:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e24a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e24c:	ab98      	add	r3, sp, #608	@ 0x260
 800e24e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e252:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e256:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e25a:	ac0c      	add	r4, sp, #48	@ 0x30
 800e25c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e25e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e262:	46a1      	mov	r9, r4
 800e264:	46c2      	mov	sl, r8
 800e266:	f1ba 0f00 	cmp.w	sl, #0
 800e26a:	f1a5 0508 	sub.w	r5, r5, #8
 800e26e:	dc77      	bgt.n	800e360 <__kernel_rem_pio2+0x208>
 800e270:	4658      	mov	r0, fp
 800e272:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e276:	f000 fac7 	bl	800e808 <scalbn>
 800e27a:	ec57 6b10 	vmov	r6, r7, d0
 800e27e:	2200      	movs	r2, #0
 800e280:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e284:	4630      	mov	r0, r6
 800e286:	4639      	mov	r1, r7
 800e288:	f7f2 f9b6 	bl	80005f8 <__aeabi_dmul>
 800e28c:	ec41 0b10 	vmov	d0, r0, r1
 800e290:	f000 fb3a 	bl	800e908 <floor>
 800e294:	4b75      	ldr	r3, [pc, #468]	@ (800e46c <__kernel_rem_pio2+0x314>)
 800e296:	ec51 0b10 	vmov	r0, r1, d0
 800e29a:	2200      	movs	r2, #0
 800e29c:	f7f2 f9ac 	bl	80005f8 <__aeabi_dmul>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	4639      	mov	r1, r7
 800e2a8:	f7f1 ffee 	bl	8000288 <__aeabi_dsub>
 800e2ac:	460f      	mov	r7, r1
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	f7f2 fc52 	bl	8000b58 <__aeabi_d2iz>
 800e2b4:	9002      	str	r0, [sp, #8]
 800e2b6:	f7f2 f935 	bl	8000524 <__aeabi_i2d>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4630      	mov	r0, r6
 800e2c0:	4639      	mov	r1, r7
 800e2c2:	f7f1 ffe1 	bl	8000288 <__aeabi_dsub>
 800e2c6:	f1bb 0f00 	cmp.w	fp, #0
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	460f      	mov	r7, r1
 800e2ce:	dd6c      	ble.n	800e3aa <__kernel_rem_pio2+0x252>
 800e2d0:	f108 31ff 	add.w	r1, r8, #4294967295
 800e2d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e2d6:	9d02      	ldr	r5, [sp, #8]
 800e2d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2dc:	f1cb 0018 	rsb	r0, fp, #24
 800e2e0:	fa43 f200 	asr.w	r2, r3, r0
 800e2e4:	4415      	add	r5, r2
 800e2e6:	4082      	lsls	r2, r0
 800e2e8:	1a9b      	subs	r3, r3, r2
 800e2ea:	aa0c      	add	r2, sp, #48	@ 0x30
 800e2ec:	9502      	str	r5, [sp, #8]
 800e2ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e2f2:	f1cb 0217 	rsb	r2, fp, #23
 800e2f6:	fa43 f902 	asr.w	r9, r3, r2
 800e2fa:	f1b9 0f00 	cmp.w	r9, #0
 800e2fe:	dd64      	ble.n	800e3ca <__kernel_rem_pio2+0x272>
 800e300:	9b02      	ldr	r3, [sp, #8]
 800e302:	2200      	movs	r2, #0
 800e304:	3301      	adds	r3, #1
 800e306:	9302      	str	r3, [sp, #8]
 800e308:	4615      	mov	r5, r2
 800e30a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e30e:	4590      	cmp	r8, r2
 800e310:	f300 80b8 	bgt.w	800e484 <__kernel_rem_pio2+0x32c>
 800e314:	f1bb 0f00 	cmp.w	fp, #0
 800e318:	dd07      	ble.n	800e32a <__kernel_rem_pio2+0x1d2>
 800e31a:	f1bb 0f01 	cmp.w	fp, #1
 800e31e:	f000 80bf 	beq.w	800e4a0 <__kernel_rem_pio2+0x348>
 800e322:	f1bb 0f02 	cmp.w	fp, #2
 800e326:	f000 80c6 	beq.w	800e4b6 <__kernel_rem_pio2+0x35e>
 800e32a:	f1b9 0f02 	cmp.w	r9, #2
 800e32e:	d14c      	bne.n	800e3ca <__kernel_rem_pio2+0x272>
 800e330:	4632      	mov	r2, r6
 800e332:	463b      	mov	r3, r7
 800e334:	494e      	ldr	r1, [pc, #312]	@ (800e470 <__kernel_rem_pio2+0x318>)
 800e336:	2000      	movs	r0, #0
 800e338:	f7f1 ffa6 	bl	8000288 <__aeabi_dsub>
 800e33c:	4606      	mov	r6, r0
 800e33e:	460f      	mov	r7, r1
 800e340:	2d00      	cmp	r5, #0
 800e342:	d042      	beq.n	800e3ca <__kernel_rem_pio2+0x272>
 800e344:	4658      	mov	r0, fp
 800e346:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e460 <__kernel_rem_pio2+0x308>
 800e34a:	f000 fa5d 	bl	800e808 <scalbn>
 800e34e:	4630      	mov	r0, r6
 800e350:	4639      	mov	r1, r7
 800e352:	ec53 2b10 	vmov	r2, r3, d0
 800e356:	f7f1 ff97 	bl	8000288 <__aeabi_dsub>
 800e35a:	4606      	mov	r6, r0
 800e35c:	460f      	mov	r7, r1
 800e35e:	e034      	b.n	800e3ca <__kernel_rem_pio2+0x272>
 800e360:	4b44      	ldr	r3, [pc, #272]	@ (800e474 <__kernel_rem_pio2+0x31c>)
 800e362:	2200      	movs	r2, #0
 800e364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e368:	f7f2 f946 	bl	80005f8 <__aeabi_dmul>
 800e36c:	f7f2 fbf4 	bl	8000b58 <__aeabi_d2iz>
 800e370:	f7f2 f8d8 	bl	8000524 <__aeabi_i2d>
 800e374:	4b40      	ldr	r3, [pc, #256]	@ (800e478 <__kernel_rem_pio2+0x320>)
 800e376:	2200      	movs	r2, #0
 800e378:	4606      	mov	r6, r0
 800e37a:	460f      	mov	r7, r1
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e388:	f7f1 ff7e 	bl	8000288 <__aeabi_dsub>
 800e38c:	f7f2 fbe4 	bl	8000b58 <__aeabi_d2iz>
 800e390:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e394:	f849 0b04 	str.w	r0, [r9], #4
 800e398:	4639      	mov	r1, r7
 800e39a:	4630      	mov	r0, r6
 800e39c:	f7f1 ff76 	bl	800028c <__adddf3>
 800e3a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3a8:	e75d      	b.n	800e266 <__kernel_rem_pio2+0x10e>
 800e3aa:	d107      	bne.n	800e3bc <__kernel_rem_pio2+0x264>
 800e3ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800e3b0:	aa0c      	add	r2, sp, #48	@ 0x30
 800e3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e3ba:	e79e      	b.n	800e2fa <__kernel_rem_pio2+0x1a2>
 800e3bc:	4b2f      	ldr	r3, [pc, #188]	@ (800e47c <__kernel_rem_pio2+0x324>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	f7f2 fba0 	bl	8000b04 <__aeabi_dcmpge>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d143      	bne.n	800e450 <__kernel_rem_pio2+0x2f8>
 800e3c8:	4681      	mov	r9, r0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	f7f2 fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	f000 80bf 	beq.w	800e55a <__kernel_rem_pio2+0x402>
 800e3dc:	f108 33ff 	add.w	r3, r8, #4294967295
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	9900      	ldr	r1, [sp, #0]
 800e3e4:	428b      	cmp	r3, r1
 800e3e6:	da6e      	bge.n	800e4c6 <__kernel_rem_pio2+0x36e>
 800e3e8:	2a00      	cmp	r2, #0
 800e3ea:	f000 8089 	beq.w	800e500 <__kernel_rem_pio2+0x3a8>
 800e3ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800e3f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e3f4:	f1ab 0b18 	sub.w	fp, fp, #24
 800e3f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d0f6      	beq.n	800e3ee <__kernel_rem_pio2+0x296>
 800e400:	4658      	mov	r0, fp
 800e402:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e460 <__kernel_rem_pio2+0x308>
 800e406:	f000 f9ff 	bl	800e808 <scalbn>
 800e40a:	f108 0301 	add.w	r3, r8, #1
 800e40e:	00da      	lsls	r2, r3, #3
 800e410:	9205      	str	r2, [sp, #20]
 800e412:	ec55 4b10 	vmov	r4, r5, d0
 800e416:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e418:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e474 <__kernel_rem_pio2+0x31c>
 800e41c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e420:	4646      	mov	r6, r8
 800e422:	f04f 0a00 	mov.w	sl, #0
 800e426:	2e00      	cmp	r6, #0
 800e428:	f280 80cf 	bge.w	800e5ca <__kernel_rem_pio2+0x472>
 800e42c:	4644      	mov	r4, r8
 800e42e:	2c00      	cmp	r4, #0
 800e430:	f2c0 80fd 	blt.w	800e62e <__kernel_rem_pio2+0x4d6>
 800e434:	4b12      	ldr	r3, [pc, #72]	@ (800e480 <__kernel_rem_pio2+0x328>)
 800e436:	461f      	mov	r7, r3
 800e438:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e43a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e43e:	9306      	str	r3, [sp, #24]
 800e440:	f04f 0a00 	mov.w	sl, #0
 800e444:	f04f 0b00 	mov.w	fp, #0
 800e448:	2600      	movs	r6, #0
 800e44a:	eba8 0504 	sub.w	r5, r8, r4
 800e44e:	e0e2      	b.n	800e616 <__kernel_rem_pio2+0x4be>
 800e450:	f04f 0902 	mov.w	r9, #2
 800e454:	e754      	b.n	800e300 <__kernel_rem_pio2+0x1a8>
 800e456:	bf00      	nop
	...
 800e464:	3ff00000 	.word	0x3ff00000
 800e468:	0800f148 	.word	0x0800f148
 800e46c:	40200000 	.word	0x40200000
 800e470:	3ff00000 	.word	0x3ff00000
 800e474:	3e700000 	.word	0x3e700000
 800e478:	41700000 	.word	0x41700000
 800e47c:	3fe00000 	.word	0x3fe00000
 800e480:	0800f108 	.word	0x0800f108
 800e484:	f854 3b04 	ldr.w	r3, [r4], #4
 800e488:	b945      	cbnz	r5, 800e49c <__kernel_rem_pio2+0x344>
 800e48a:	b123      	cbz	r3, 800e496 <__kernel_rem_pio2+0x33e>
 800e48c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e490:	f844 3c04 	str.w	r3, [r4, #-4]
 800e494:	2301      	movs	r3, #1
 800e496:	3201      	adds	r2, #1
 800e498:	461d      	mov	r5, r3
 800e49a:	e738      	b.n	800e30e <__kernel_rem_pio2+0x1b6>
 800e49c:	1acb      	subs	r3, r1, r3
 800e49e:	e7f7      	b.n	800e490 <__kernel_rem_pio2+0x338>
 800e4a0:	f108 32ff 	add.w	r2, r8, #4294967295
 800e4a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e4ae:	a90c      	add	r1, sp, #48	@ 0x30
 800e4b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4b4:	e739      	b.n	800e32a <__kernel_rem_pio2+0x1d2>
 800e4b6:	f108 32ff 	add.w	r2, r8, #4294967295
 800e4ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800e4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4c4:	e7f3      	b.n	800e4ae <__kernel_rem_pio2+0x356>
 800e4c6:	a90c      	add	r1, sp, #48	@ 0x30
 800e4c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	e787      	b.n	800e3e2 <__kernel_rem_pio2+0x28a>
 800e4d2:	3401      	adds	r4, #1
 800e4d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e4d8:	2a00      	cmp	r2, #0
 800e4da:	d0fa      	beq.n	800e4d2 <__kernel_rem_pio2+0x37a>
 800e4dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e4e2:	eb0d 0503 	add.w	r5, sp, r3
 800e4e6:	9b06      	ldr	r3, [sp, #24]
 800e4e8:	aa20      	add	r2, sp, #128	@ 0x80
 800e4ea:	4443      	add	r3, r8
 800e4ec:	f108 0701 	add.w	r7, r8, #1
 800e4f0:	3d98      	subs	r5, #152	@ 0x98
 800e4f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e4f6:	4444      	add	r4, r8
 800e4f8:	42bc      	cmp	r4, r7
 800e4fa:	da04      	bge.n	800e506 <__kernel_rem_pio2+0x3ae>
 800e4fc:	46a0      	mov	r8, r4
 800e4fe:	e6a2      	b.n	800e246 <__kernel_rem_pio2+0xee>
 800e500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e502:	2401      	movs	r4, #1
 800e504:	e7e6      	b.n	800e4d4 <__kernel_rem_pio2+0x37c>
 800e506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e508:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e50c:	f7f2 f80a 	bl	8000524 <__aeabi_i2d>
 800e510:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e7d8 <__kernel_rem_pio2+0x680>
 800e514:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e518:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e51c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e520:	46b2      	mov	sl, r6
 800e522:	f04f 0800 	mov.w	r8, #0
 800e526:	9b05      	ldr	r3, [sp, #20]
 800e528:	4598      	cmp	r8, r3
 800e52a:	dd05      	ble.n	800e538 <__kernel_rem_pio2+0x3e0>
 800e52c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e530:	3701      	adds	r7, #1
 800e532:	eca5 7b02 	vstmia	r5!, {d7}
 800e536:	e7df      	b.n	800e4f8 <__kernel_rem_pio2+0x3a0>
 800e538:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e53c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e540:	f7f2 f85a 	bl	80005f8 <__aeabi_dmul>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e54c:	f7f1 fe9e 	bl	800028c <__adddf3>
 800e550:	f108 0801 	add.w	r8, r8, #1
 800e554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e558:	e7e5      	b.n	800e526 <__kernel_rem_pio2+0x3ce>
 800e55a:	f1cb 0000 	rsb	r0, fp, #0
 800e55e:	ec47 6b10 	vmov	d0, r6, r7
 800e562:	f000 f951 	bl	800e808 <scalbn>
 800e566:	ec55 4b10 	vmov	r4, r5, d0
 800e56a:	4b9d      	ldr	r3, [pc, #628]	@ (800e7e0 <__kernel_rem_pio2+0x688>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	4620      	mov	r0, r4
 800e570:	4629      	mov	r1, r5
 800e572:	f7f2 fac7 	bl	8000b04 <__aeabi_dcmpge>
 800e576:	b300      	cbz	r0, 800e5ba <__kernel_rem_pio2+0x462>
 800e578:	4b9a      	ldr	r3, [pc, #616]	@ (800e7e4 <__kernel_rem_pio2+0x68c>)
 800e57a:	2200      	movs	r2, #0
 800e57c:	4620      	mov	r0, r4
 800e57e:	4629      	mov	r1, r5
 800e580:	f7f2 f83a 	bl	80005f8 <__aeabi_dmul>
 800e584:	f7f2 fae8 	bl	8000b58 <__aeabi_d2iz>
 800e588:	4606      	mov	r6, r0
 800e58a:	f7f1 ffcb 	bl	8000524 <__aeabi_i2d>
 800e58e:	4b94      	ldr	r3, [pc, #592]	@ (800e7e0 <__kernel_rem_pio2+0x688>)
 800e590:	2200      	movs	r2, #0
 800e592:	f7f2 f831 	bl	80005f8 <__aeabi_dmul>
 800e596:	460b      	mov	r3, r1
 800e598:	4602      	mov	r2, r0
 800e59a:	4629      	mov	r1, r5
 800e59c:	4620      	mov	r0, r4
 800e59e:	f7f1 fe73 	bl	8000288 <__aeabi_dsub>
 800e5a2:	f7f2 fad9 	bl	8000b58 <__aeabi_d2iz>
 800e5a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5a8:	f10b 0b18 	add.w	fp, fp, #24
 800e5ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e5b0:	f108 0801 	add.w	r8, r8, #1
 800e5b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e5b8:	e722      	b.n	800e400 <__kernel_rem_pio2+0x2a8>
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	4629      	mov	r1, r5
 800e5be:	f7f2 facb 	bl	8000b58 <__aeabi_d2iz>
 800e5c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e5c8:	e71a      	b.n	800e400 <__kernel_rem_pio2+0x2a8>
 800e5ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e5d0:	f7f1 ffa8 	bl	8000524 <__aeabi_i2d>
 800e5d4:	4622      	mov	r2, r4
 800e5d6:	462b      	mov	r3, r5
 800e5d8:	f7f2 f80e 	bl	80005f8 <__aeabi_dmul>
 800e5dc:	4652      	mov	r2, sl
 800e5de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e5e2:	465b      	mov	r3, fp
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f7f2 f806 	bl	80005f8 <__aeabi_dmul>
 800e5ec:	3e01      	subs	r6, #1
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	e718      	b.n	800e426 <__kernel_rem_pio2+0x2ce>
 800e5f4:	9906      	ldr	r1, [sp, #24]
 800e5f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e5fa:	9106      	str	r1, [sp, #24]
 800e5fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e600:	f7f1 fffa 	bl	80005f8 <__aeabi_dmul>
 800e604:	4602      	mov	r2, r0
 800e606:	460b      	mov	r3, r1
 800e608:	4650      	mov	r0, sl
 800e60a:	4659      	mov	r1, fp
 800e60c:	f7f1 fe3e 	bl	800028c <__adddf3>
 800e610:	3601      	adds	r6, #1
 800e612:	4682      	mov	sl, r0
 800e614:	468b      	mov	fp, r1
 800e616:	9b00      	ldr	r3, [sp, #0]
 800e618:	429e      	cmp	r6, r3
 800e61a:	dc01      	bgt.n	800e620 <__kernel_rem_pio2+0x4c8>
 800e61c:	42b5      	cmp	r5, r6
 800e61e:	dae9      	bge.n	800e5f4 <__kernel_rem_pio2+0x49c>
 800e620:	ab48      	add	r3, sp, #288	@ 0x120
 800e622:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e626:	e9c5 ab00 	strd	sl, fp, [r5]
 800e62a:	3c01      	subs	r4, #1
 800e62c:	e6ff      	b.n	800e42e <__kernel_rem_pio2+0x2d6>
 800e62e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e630:	2b02      	cmp	r3, #2
 800e632:	dc0b      	bgt.n	800e64c <__kernel_rem_pio2+0x4f4>
 800e634:	2b00      	cmp	r3, #0
 800e636:	dc39      	bgt.n	800e6ac <__kernel_rem_pio2+0x554>
 800e638:	d05d      	beq.n	800e6f6 <__kernel_rem_pio2+0x59e>
 800e63a:	9b02      	ldr	r3, [sp, #8]
 800e63c:	f003 0007 	and.w	r0, r3, #7
 800e640:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e644:	ecbd 8b02 	vpop	{d8}
 800e648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e64e:	2b03      	cmp	r3, #3
 800e650:	d1f3      	bne.n	800e63a <__kernel_rem_pio2+0x4e2>
 800e652:	9b05      	ldr	r3, [sp, #20]
 800e654:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e658:	eb0d 0403 	add.w	r4, sp, r3
 800e65c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e660:	4625      	mov	r5, r4
 800e662:	46c2      	mov	sl, r8
 800e664:	f1ba 0f00 	cmp.w	sl, #0
 800e668:	f1a5 0508 	sub.w	r5, r5, #8
 800e66c:	dc6b      	bgt.n	800e746 <__kernel_rem_pio2+0x5ee>
 800e66e:	4645      	mov	r5, r8
 800e670:	2d01      	cmp	r5, #1
 800e672:	f1a4 0408 	sub.w	r4, r4, #8
 800e676:	f300 8087 	bgt.w	800e788 <__kernel_rem_pio2+0x630>
 800e67a:	9c05      	ldr	r4, [sp, #20]
 800e67c:	ab48      	add	r3, sp, #288	@ 0x120
 800e67e:	441c      	add	r4, r3
 800e680:	2000      	movs	r0, #0
 800e682:	2100      	movs	r1, #0
 800e684:	f1b8 0f01 	cmp.w	r8, #1
 800e688:	f300 809c 	bgt.w	800e7c4 <__kernel_rem_pio2+0x66c>
 800e68c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e690:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e694:	f1b9 0f00 	cmp.w	r9, #0
 800e698:	f040 80a6 	bne.w	800e7e8 <__kernel_rem_pio2+0x690>
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	e9c3 7800 	strd	r7, r8, [r3]
 800e6a2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e6a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e6aa:	e7c6      	b.n	800e63a <__kernel_rem_pio2+0x4e2>
 800e6ac:	9d05      	ldr	r5, [sp, #20]
 800e6ae:	ab48      	add	r3, sp, #288	@ 0x120
 800e6b0:	441d      	add	r5, r3
 800e6b2:	4644      	mov	r4, r8
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	2c00      	cmp	r4, #0
 800e6ba:	da35      	bge.n	800e728 <__kernel_rem_pio2+0x5d0>
 800e6bc:	f1b9 0f00 	cmp.w	r9, #0
 800e6c0:	d038      	beq.n	800e734 <__kernel_rem_pio2+0x5dc>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e6c8:	9c04      	ldr	r4, [sp, #16]
 800e6ca:	e9c4 2300 	strd	r2, r3, [r4]
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e6d6:	f7f1 fdd7 	bl	8000288 <__aeabi_dsub>
 800e6da:	ad4a      	add	r5, sp, #296	@ 0x128
 800e6dc:	2401      	movs	r4, #1
 800e6de:	45a0      	cmp	r8, r4
 800e6e0:	da2b      	bge.n	800e73a <__kernel_rem_pio2+0x5e2>
 800e6e2:	f1b9 0f00 	cmp.w	r9, #0
 800e6e6:	d002      	beq.n	800e6ee <__kernel_rem_pio2+0x596>
 800e6e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	9b04      	ldr	r3, [sp, #16]
 800e6f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e6f4:	e7a1      	b.n	800e63a <__kernel_rem_pio2+0x4e2>
 800e6f6:	9c05      	ldr	r4, [sp, #20]
 800e6f8:	ab48      	add	r3, sp, #288	@ 0x120
 800e6fa:	441c      	add	r4, r3
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	2100      	movs	r1, #0
 800e700:	f1b8 0f00 	cmp.w	r8, #0
 800e704:	da09      	bge.n	800e71a <__kernel_rem_pio2+0x5c2>
 800e706:	f1b9 0f00 	cmp.w	r9, #0
 800e70a:	d002      	beq.n	800e712 <__kernel_rem_pio2+0x5ba>
 800e70c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e710:	4619      	mov	r1, r3
 800e712:	9b04      	ldr	r3, [sp, #16]
 800e714:	e9c3 0100 	strd	r0, r1, [r3]
 800e718:	e78f      	b.n	800e63a <__kernel_rem_pio2+0x4e2>
 800e71a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e71e:	f7f1 fdb5 	bl	800028c <__adddf3>
 800e722:	f108 38ff 	add.w	r8, r8, #4294967295
 800e726:	e7eb      	b.n	800e700 <__kernel_rem_pio2+0x5a8>
 800e728:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e72c:	f7f1 fdae 	bl	800028c <__adddf3>
 800e730:	3c01      	subs	r4, #1
 800e732:	e7c1      	b.n	800e6b8 <__kernel_rem_pio2+0x560>
 800e734:	4602      	mov	r2, r0
 800e736:	460b      	mov	r3, r1
 800e738:	e7c6      	b.n	800e6c8 <__kernel_rem_pio2+0x570>
 800e73a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e73e:	f7f1 fda5 	bl	800028c <__adddf3>
 800e742:	3401      	adds	r4, #1
 800e744:	e7cb      	b.n	800e6de <__kernel_rem_pio2+0x586>
 800e746:	ed95 7b00 	vldr	d7, [r5]
 800e74a:	ed8d 7b00 	vstr	d7, [sp]
 800e74e:	ed95 7b02 	vldr	d7, [r5, #8]
 800e752:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e756:	ec53 2b17 	vmov	r2, r3, d7
 800e75a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e75e:	f7f1 fd95 	bl	800028c <__adddf3>
 800e762:	4602      	mov	r2, r0
 800e764:	460b      	mov	r3, r1
 800e766:	4606      	mov	r6, r0
 800e768:	460f      	mov	r7, r1
 800e76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e76e:	f7f1 fd8b 	bl	8000288 <__aeabi_dsub>
 800e772:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e776:	f7f1 fd89 	bl	800028c <__adddf3>
 800e77a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e77e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e782:	e9c5 6700 	strd	r6, r7, [r5]
 800e786:	e76d      	b.n	800e664 <__kernel_rem_pio2+0x50c>
 800e788:	ed94 7b00 	vldr	d7, [r4]
 800e78c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e790:	ec51 0b17 	vmov	r0, r1, d7
 800e794:	4652      	mov	r2, sl
 800e796:	465b      	mov	r3, fp
 800e798:	ed8d 7b00 	vstr	d7, [sp]
 800e79c:	f7f1 fd76 	bl	800028c <__adddf3>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	460f      	mov	r7, r1
 800e7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7ac:	f7f1 fd6c 	bl	8000288 <__aeabi_dsub>
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	465b      	mov	r3, fp
 800e7b4:	f7f1 fd6a 	bl	800028c <__adddf3>
 800e7b8:	3d01      	subs	r5, #1
 800e7ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e7be:	e9c4 6700 	strd	r6, r7, [r4]
 800e7c2:	e755      	b.n	800e670 <__kernel_rem_pio2+0x518>
 800e7c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7c8:	f7f1 fd60 	bl	800028c <__adddf3>
 800e7cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7d0:	e758      	b.n	800e684 <__kernel_rem_pio2+0x52c>
 800e7d2:	bf00      	nop
 800e7d4:	f3af 8000 	nop.w
	...
 800e7e0:	41700000 	.word	0x41700000
 800e7e4:	3e700000 	.word	0x3e700000
 800e7e8:	9b04      	ldr	r3, [sp, #16]
 800e7ea:	9a04      	ldr	r2, [sp, #16]
 800e7ec:	601f      	str	r7, [r3, #0]
 800e7ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e7f2:	605c      	str	r4, [r3, #4]
 800e7f4:	609d      	str	r5, [r3, #8]
 800e7f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e7fa:	60d3      	str	r3, [r2, #12]
 800e7fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e800:	6110      	str	r0, [r2, #16]
 800e802:	6153      	str	r3, [r2, #20]
 800e804:	e719      	b.n	800e63a <__kernel_rem_pio2+0x4e2>
 800e806:	bf00      	nop

0800e808 <scalbn>:
 800e808:	b570      	push	{r4, r5, r6, lr}
 800e80a:	ec55 4b10 	vmov	r4, r5, d0
 800e80e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e812:	4606      	mov	r6, r0
 800e814:	462b      	mov	r3, r5
 800e816:	b991      	cbnz	r1, 800e83e <scalbn+0x36>
 800e818:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e81c:	4323      	orrs	r3, r4
 800e81e:	d03d      	beq.n	800e89c <scalbn+0x94>
 800e820:	4b35      	ldr	r3, [pc, #212]	@ (800e8f8 <scalbn+0xf0>)
 800e822:	4620      	mov	r0, r4
 800e824:	4629      	mov	r1, r5
 800e826:	2200      	movs	r2, #0
 800e828:	f7f1 fee6 	bl	80005f8 <__aeabi_dmul>
 800e82c:	4b33      	ldr	r3, [pc, #204]	@ (800e8fc <scalbn+0xf4>)
 800e82e:	429e      	cmp	r6, r3
 800e830:	4604      	mov	r4, r0
 800e832:	460d      	mov	r5, r1
 800e834:	da0f      	bge.n	800e856 <scalbn+0x4e>
 800e836:	a328      	add	r3, pc, #160	@ (adr r3, 800e8d8 <scalbn+0xd0>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	e01e      	b.n	800e87c <scalbn+0x74>
 800e83e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e842:	4291      	cmp	r1, r2
 800e844:	d10b      	bne.n	800e85e <scalbn+0x56>
 800e846:	4622      	mov	r2, r4
 800e848:	4620      	mov	r0, r4
 800e84a:	4629      	mov	r1, r5
 800e84c:	f7f1 fd1e 	bl	800028c <__adddf3>
 800e850:	4604      	mov	r4, r0
 800e852:	460d      	mov	r5, r1
 800e854:	e022      	b.n	800e89c <scalbn+0x94>
 800e856:	460b      	mov	r3, r1
 800e858:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e85c:	3936      	subs	r1, #54	@ 0x36
 800e85e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e862:	4296      	cmp	r6, r2
 800e864:	dd0d      	ble.n	800e882 <scalbn+0x7a>
 800e866:	2d00      	cmp	r5, #0
 800e868:	a11d      	add	r1, pc, #116	@ (adr r1, 800e8e0 <scalbn+0xd8>)
 800e86a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e86e:	da02      	bge.n	800e876 <scalbn+0x6e>
 800e870:	a11d      	add	r1, pc, #116	@ (adr r1, 800e8e8 <scalbn+0xe0>)
 800e872:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e876:	a31a      	add	r3, pc, #104	@ (adr r3, 800e8e0 <scalbn+0xd8>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 febc 	bl	80005f8 <__aeabi_dmul>
 800e880:	e7e6      	b.n	800e850 <scalbn+0x48>
 800e882:	1872      	adds	r2, r6, r1
 800e884:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e888:	428a      	cmp	r2, r1
 800e88a:	dcec      	bgt.n	800e866 <scalbn+0x5e>
 800e88c:	2a00      	cmp	r2, #0
 800e88e:	dd08      	ble.n	800e8a2 <scalbn+0x9a>
 800e890:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e894:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e898:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e89c:	ec45 4b10 	vmov	d0, r4, r5
 800e8a0:	bd70      	pop	{r4, r5, r6, pc}
 800e8a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e8a6:	da08      	bge.n	800e8ba <scalbn+0xb2>
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800e8d8 <scalbn+0xd0>)
 800e8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8b0:	dac1      	bge.n	800e836 <scalbn+0x2e>
 800e8b2:	a10f      	add	r1, pc, #60	@ (adr r1, 800e8f0 <scalbn+0xe8>)
 800e8b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8b8:	e7bd      	b.n	800e836 <scalbn+0x2e>
 800e8ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e8be:	3236      	adds	r2, #54	@ 0x36
 800e8c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e8c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e900 <scalbn+0xf8>)
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	e7d4      	b.n	800e87c <scalbn+0x74>
 800e8d2:	bf00      	nop
 800e8d4:	f3af 8000 	nop.w
 800e8d8:	c2f8f359 	.word	0xc2f8f359
 800e8dc:	01a56e1f 	.word	0x01a56e1f
 800e8e0:	8800759c 	.word	0x8800759c
 800e8e4:	7e37e43c 	.word	0x7e37e43c
 800e8e8:	8800759c 	.word	0x8800759c
 800e8ec:	fe37e43c 	.word	0xfe37e43c
 800e8f0:	c2f8f359 	.word	0xc2f8f359
 800e8f4:	81a56e1f 	.word	0x81a56e1f
 800e8f8:	43500000 	.word	0x43500000
 800e8fc:	ffff3cb0 	.word	0xffff3cb0
 800e900:	3c900000 	.word	0x3c900000
 800e904:	00000000 	.word	0x00000000

0800e908 <floor>:
 800e908:	ec51 0b10 	vmov	r0, r1, d0
 800e90c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e918:	2e13      	cmp	r6, #19
 800e91a:	460c      	mov	r4, r1
 800e91c:	4605      	mov	r5, r0
 800e91e:	4680      	mov	r8, r0
 800e920:	dc34      	bgt.n	800e98c <floor+0x84>
 800e922:	2e00      	cmp	r6, #0
 800e924:	da17      	bge.n	800e956 <floor+0x4e>
 800e926:	a332      	add	r3, pc, #200	@ (adr r3, 800e9f0 <floor+0xe8>)
 800e928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92c:	f7f1 fcae 	bl	800028c <__adddf3>
 800e930:	2200      	movs	r2, #0
 800e932:	2300      	movs	r3, #0
 800e934:	f7f2 f8f0 	bl	8000b18 <__aeabi_dcmpgt>
 800e938:	b150      	cbz	r0, 800e950 <floor+0x48>
 800e93a:	2c00      	cmp	r4, #0
 800e93c:	da55      	bge.n	800e9ea <floor+0xe2>
 800e93e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e942:	432c      	orrs	r4, r5
 800e944:	2500      	movs	r5, #0
 800e946:	42ac      	cmp	r4, r5
 800e948:	4c2b      	ldr	r4, [pc, #172]	@ (800e9f8 <floor+0xf0>)
 800e94a:	bf08      	it	eq
 800e94c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e950:	4621      	mov	r1, r4
 800e952:	4628      	mov	r0, r5
 800e954:	e023      	b.n	800e99e <floor+0x96>
 800e956:	4f29      	ldr	r7, [pc, #164]	@ (800e9fc <floor+0xf4>)
 800e958:	4137      	asrs	r7, r6
 800e95a:	ea01 0307 	and.w	r3, r1, r7
 800e95e:	4303      	orrs	r3, r0
 800e960:	d01d      	beq.n	800e99e <floor+0x96>
 800e962:	a323      	add	r3, pc, #140	@ (adr r3, 800e9f0 <floor+0xe8>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	f7f1 fc90 	bl	800028c <__adddf3>
 800e96c:	2200      	movs	r2, #0
 800e96e:	2300      	movs	r3, #0
 800e970:	f7f2 f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 800e974:	2800      	cmp	r0, #0
 800e976:	d0eb      	beq.n	800e950 <floor+0x48>
 800e978:	2c00      	cmp	r4, #0
 800e97a:	bfbe      	ittt	lt
 800e97c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e980:	4133      	asrlt	r3, r6
 800e982:	18e4      	addlt	r4, r4, r3
 800e984:	ea24 0407 	bic.w	r4, r4, r7
 800e988:	2500      	movs	r5, #0
 800e98a:	e7e1      	b.n	800e950 <floor+0x48>
 800e98c:	2e33      	cmp	r6, #51	@ 0x33
 800e98e:	dd0a      	ble.n	800e9a6 <floor+0x9e>
 800e990:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e994:	d103      	bne.n	800e99e <floor+0x96>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	f7f1 fc77 	bl	800028c <__adddf3>
 800e99e:	ec41 0b10 	vmov	d0, r0, r1
 800e9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e9aa:	f04f 37ff 	mov.w	r7, #4294967295
 800e9ae:	40df      	lsrs	r7, r3
 800e9b0:	4207      	tst	r7, r0
 800e9b2:	d0f4      	beq.n	800e99e <floor+0x96>
 800e9b4:	a30e      	add	r3, pc, #56	@ (adr r3, 800e9f0 <floor+0xe8>)
 800e9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ba:	f7f1 fc67 	bl	800028c <__adddf3>
 800e9be:	2200      	movs	r2, #0
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	f7f2 f8a9 	bl	8000b18 <__aeabi_dcmpgt>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d0c2      	beq.n	800e950 <floor+0x48>
 800e9ca:	2c00      	cmp	r4, #0
 800e9cc:	da0a      	bge.n	800e9e4 <floor+0xdc>
 800e9ce:	2e14      	cmp	r6, #20
 800e9d0:	d101      	bne.n	800e9d6 <floor+0xce>
 800e9d2:	3401      	adds	r4, #1
 800e9d4:	e006      	b.n	800e9e4 <floor+0xdc>
 800e9d6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e9da:	2301      	movs	r3, #1
 800e9dc:	40b3      	lsls	r3, r6
 800e9de:	441d      	add	r5, r3
 800e9e0:	4545      	cmp	r5, r8
 800e9e2:	d3f6      	bcc.n	800e9d2 <floor+0xca>
 800e9e4:	ea25 0507 	bic.w	r5, r5, r7
 800e9e8:	e7b2      	b.n	800e950 <floor+0x48>
 800e9ea:	2500      	movs	r5, #0
 800e9ec:	462c      	mov	r4, r5
 800e9ee:	e7af      	b.n	800e950 <floor+0x48>
 800e9f0:	8800759c 	.word	0x8800759c
 800e9f4:	7e37e43c 	.word	0x7e37e43c
 800e9f8:	bff00000 	.word	0xbff00000
 800e9fc:	000fffff 	.word	0x000fffff

0800ea00 <_init>:
 800ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea02:	bf00      	nop
 800ea04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea06:	bc08      	pop	{r3}
 800ea08:	469e      	mov	lr, r3
 800ea0a:	4770      	bx	lr

0800ea0c <_fini>:
 800ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0e:	bf00      	nop
 800ea10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea12:	bc08      	pop	{r3}
 800ea14:	469e      	mov	lr, r3
 800ea16:	4770      	bx	lr
