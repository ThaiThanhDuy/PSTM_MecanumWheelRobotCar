
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800bb30  0800bb30  0000cb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c08c  0800c08c  0000e254  2**0
                  CONTENTS
  4 .ARM          00000008  0800c08c  0800c08c  0000d08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c094  0800c094  0000e254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c094  0800c094  0000d094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c098  0800c098  0000d098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  0800c09c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e254  2**0
                  CONTENTS
 10 .bss          00000570  20000258  20000258  0000e258  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200007c8  200007c8  0000e258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed68  00000000  00000000  0000e284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002142  00000000  00000000  0001cfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  0001f130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1d  00000000  00000000  0001ff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cb9  00000000  00000000  00020a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001000d  00000000  00000000  0002373e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce080  00000000  00000000  0003374b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001017cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005384  00000000  00000000  00101810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00106b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb18 	.word	0x0800bb18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800bb18 	.word	0x0800bb18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <sendJointState>:
float oldValue1, oldValue2, oldValue3, oldValue4;
float newValue1, newValue2, newValue3, newValue4; // Store new values
/// SEND DATA

void sendJointState(float pos1, float pos2, float pos3, float pos4, float velO1,
		float velO2, float velO3, float velO4) {
 8000fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fe8:	b0e0      	sub	sp, #384	@ 0x180
 8000fea:	af10      	add	r7, sp, #64	@ 0x40
 8000fec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ff4:	ed83 0a00 	vstr	s0, [r3]
 8000ff8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001000:	edc3 0a00 	vstr	s1, [r3]
 8001004:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001008:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800100c:	ed83 1a00 	vstr	s2, [r3]
 8001010:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001014:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001018:	edc3 1a00 	vstr	s3, [r3]
 800101c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001020:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001024:	ed83 2a00 	vstr	s4, [r3]
 8001028:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800102c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001030:	edc3 2a00 	vstr	s5, [r3]
 8001034:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001038:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800103c:	ed83 3a00 	vstr	s6, [r3]
 8001040:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001044:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001048:	edc3 3a00 	vstr	s7, [r3]
	 HAL_Delay(100);*/
	// Prepare a buffer to hold the complete joint state message
	char txBuffer[256]; // Ensure this buffer is large enough to hold the entire message

	// Format the joint state message into the buffer
	snprintf(txBuffer, sizeof(txBuffer),
 800104c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	4682      	mov	sl, r0
 800105c:	468b      	mov	fp, r1
 800105e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001062:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	f7ff fa6e 	bl	8000548 <__aeabi_f2d>
 800106c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001070:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f7ff fa65 	bl	8000548 <__aeabi_f2d>
 800107e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001082:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001086:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	f7ff fa5c 	bl	8000548 <__aeabi_f2d>
 8001090:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001094:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001098:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	e9c7 0100 	strd	r0, r1, [r7]
 80010a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_f2d>
 80010b4:	4680      	mov	r8, r0
 80010b6:	4689      	mov	r9, r1
 80010b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff fa41 	bl	8000548 <__aeabi_f2d>
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
 80010ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80010e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 80010e4:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 80010e8:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 80010ec:	ed97 7b00 	vldr	d7, [r7]
 80010f0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80010f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80010f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001100:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001104:	ed97 7b06 	vldr	d7, [r7, #24]
 8001108:	ed8d 7b02 	vstr	d7, [sp, #8]
 800110c:	e9cd ab00 	strd	sl, fp, [sp]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <sendJointState+0x164>)
 8001112:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001116:	f007 fda7 	bl	8008c68 <sniprintf>
			"pos1:%.2f vel1:%.2f pos2:%.2f vel2:%.2f pos3:%.2f vel3:%.2f pos4:%.2f vel4:%.2f\n",
			pos1, velO1, pos2, velO2, pos3, velO3, pos4, velO4);

	// Transmit the complete message over UART
	HAL_UART_Transmit(&huart2, (uint8_t*) txBuffer, strlen(txBuffer),
 800111a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f8a6 	bl	8000270 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	4806      	ldr	r0, [pc, #24]	@ (800114c <sendJointState+0x168>)
 8001132:	f005 fb8f 	bl	8006854 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	// Optional delay to prevent flooding the UART
	HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f003 fc78 	bl	8004a2c <HAL_Delay>
}
 800113c:	bf00      	nop
 800113e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001148:	0800bb30 	.word	0x0800bb30
 800114c:	20000628 	.word	0x20000628

08001150 <UART_ReceiveString>:

/// REVICE DATA


void UART_ReceiveString(uint8_t *buffer, size_t length) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    // Clear the buffer before receiving new data
    memset(buffer, 0, length); // Clear the buffer
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f007 feae 	bl	8008ec0 <memset>

    // Receive data with a timeout of 256 ms
    if (HAL_UART_Receive(&huart2, buffer, length - 1, 256) == HAL_OK) {
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	3b01      	subs	r3, #1
 800116a:	b29a      	uxth	r2, r3
 800116c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <UART_ReceiveString+0x4c>)
 8001174:	f005 fbf9 	bl	800696a <HAL_UART_Receive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <UART_ReceiveString+0x3c>
        buffer[length - 1] = '\0'; // Null-terminate the string
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3b01      	subs	r3, #1
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
    } else {
        // Handle reception error
        printf("UART reception error\n");
    }
}
 800118a:	e002      	b.n	8001192 <UART_ReceiveString+0x42>
        printf("UART reception error\n");
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <UART_ReceiveString+0x50>)
 800118e:	f007 fd63 	bl	8008c58 <puts>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000628 	.word	0x20000628
 80011a0:	0800bb84 	.word	0x0800bb84

080011a4 <ReadFourFloats>:

// Function to read four float values from a received string
void ReadFourFloats(float *val1, float *val2, float *val3, float *val4) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	@ 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
    HAL_Delay(100); // Wait for 100 ms before receiving new data
 80011b2:	2064      	movs	r0, #100	@ 0x64
 80011b4:	f003 fc3a 	bl	8004a2c <HAL_Delay>
    UART_ReceiveString(buffer, sizeof(buffer)); // Receive the string from UART
 80011b8:	211e      	movs	r1, #30
 80011ba:	4866      	ldr	r0, [pc, #408]	@ (8001354 <ReadFourFloats+0x1b0>)
 80011bc:	f7ff ffc8 	bl	8001150 <UART_ReceiveString>
    // Example input: "c: 0.54,0.54,0.54,0.54"

    // Print the received buffer for debugging
    printf("Received buffer: %s\n", buffer);
 80011c0:	4964      	ldr	r1, [pc, #400]	@ (8001354 <ReadFourFloats+0x1b0>)
 80011c2:	4865      	ldr	r0, [pc, #404]	@ (8001358 <ReadFourFloats+0x1b4>)
 80011c4:	f007 fce0 	bl	8008b88 <iprintf>


    // Pointer to the start of the buffer
    char *start = (char*) buffer;
 80011c8:	4b62      	ldr	r3, [pc, #392]	@ (8001354 <ReadFourFloats+0x1b0>)
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Loop to find and process all valid messages
    while ((start = strstr(start, "c:")) != NULL) {
 80011cc:	e0b3      	b.n	8001336 <ReadFourFloats+0x192>
        // Move the pointer past "c:"
        char *data = start + 2;
 80011ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d0:	3302      	adds	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]

        // Find the end of the message (next 'c:' or end of buffer)
        char *end = strstr(data, "c:");
 80011d4:	4961      	ldr	r1, [pc, #388]	@ (800135c <ReadFourFloats+0x1b8>)
 80011d6:	69b8      	ldr	r0, [r7, #24]
 80011d8:	f007 fee8 	bl	8008fac <strstr>
 80011dc:	6178      	str	r0, [r7, #20]
        if (end != NULL) {
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <ReadFourFloats+0x46>
            *end = '\0'; // Temporarily terminate the string for parsing
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
        }

        // Print the data after the prefix for debugging
        printf("Data after prefix: %s\n", data);
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	485c      	ldr	r0, [pc, #368]	@ (8001360 <ReadFourFloats+0x1bc>)
 80011ee:	f007 fccb 	bl	8008b88 <iprintf>

        // Parse the string
        char *token = strtok(data, ",");
 80011f2:	495c      	ldr	r1, [pc, #368]	@ (8001364 <ReadFourFloats+0x1c0>)
 80011f4:	69b8      	ldr	r0, [r7, #24]
 80011f6:	f007 fe7d 	bl	8008ef4 <strtok>
 80011fa:	6138      	str	r0, [r7, #16]

        float newValue1 = 0.0, newValue2 = 0.0, newValue3 = 0.0, newValue4 = 0.0;
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
        static float oldValue1 = 0.0, oldValue2 = 0.0, oldValue3 = 0.0, oldValue4 = 0.0;

        if (token != NULL) {
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00a      	beq.n	8001230 <ReadFourFloats+0x8c>
            newValue1 = atof(token); // Convert to float
 800121a:	6938      	ldr	r0, [r7, #16]
 800121c:	f005 ff6c 	bl	80070f8 <atof>
 8001220:	ec53 2b10 	vmov	r2, r3, d0
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcde 	bl	8000be8 <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
            // printf("Parsed val1: %.2f\n", newValue1);
        }

        token = strtok(NULL, ",");
 8001230:	494c      	ldr	r1, [pc, #304]	@ (8001364 <ReadFourFloats+0x1c0>)
 8001232:	2000      	movs	r0, #0
 8001234:	f007 fe5e 	bl	8008ef4 <strtok>
 8001238:	6138      	str	r0, [r7, #16]
        if (token != NULL) {
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d012      	beq.n	8001266 <ReadFourFloats+0xc2>
            newValue2 = atof(token); // Convert to float
 8001240:	6938      	ldr	r0, [r7, #16]
 8001242:	f005 ff59 	bl	80070f8 <atof>
 8001246:	ec53 2b10 	vmov	r2, r3, d0
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fccb 	bl	8000be8 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
            printf("Parsed val2: %.2f\n", newValue2);
 8001256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001258:	f7ff f976 	bl	8000548 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4841      	ldr	r0, [pc, #260]	@ (8001368 <ReadFourFloats+0x1c4>)
 8001262:	f007 fc91 	bl	8008b88 <iprintf>
        }

        token = strtok(NULL, ",");
 8001266:	493f      	ldr	r1, [pc, #252]	@ (8001364 <ReadFourFloats+0x1c0>)
 8001268:	2000      	movs	r0, #0
 800126a:	f007 fe43 	bl	8008ef4 <strtok>
 800126e:	6138      	str	r0, [r7, #16]
        if (token != NULL) {
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <ReadFourFloats+0xe8>
            newValue3 = atof(token); // Convert to float
 8001276:	6938      	ldr	r0, [r7, #16]
 8001278:	f005 ff3e 	bl	80070f8 <atof>
 800127c:	ec53 2b10 	vmov	r2, r3, d0
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fcb0 	bl	8000be8 <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	623b      	str	r3, [r7, #32]
            // printf("Parsed val3: %.2f\n", newValue3);
        }

        token = strtok(NULL, ",");
 800128c:	4935      	ldr	r1, [pc, #212]	@ (8001364 <ReadFourFloats+0x1c0>)
 800128e:	2000      	movs	r0, #0
 8001290:	f007 fe30 	bl	8008ef4 <strtok>
 8001294:	6138      	str	r0, [r7, #16]
        if (token != NULL) {
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00a      	beq.n	80012b2 <ReadFourFloats+0x10e>
            newValue4 = atof(token); // Convert to float
 800129c:	6938      	ldr	r0, [r7, #16]
 800129e:	f005 ff2b 	bl	80070f8 <atof>
 80012a2:	ec53 2b10 	vmov	r2, r3, d0
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fc9d 	bl	8000be8 <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	61fb      	str	r3, [r7, #28]
            // printf("Parsed val4: %.2f\n", newValue4);
        }

        // Check if new values are different from old values
        if (newValue1 != oldValue1 || newValue2 != oldValue2
 80012b2:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <ReadFourFloats+0x1c8>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d11d      	bne.n	8001302 <ReadFourFloats+0x15e>
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <ReadFourFloats+0x1cc>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80012d0:	eeb4 7a67 	vcmp.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d113      	bne.n	8001302 <ReadFourFloats+0x15e>
                || newValue3 != oldValue3 || newValue4 != oldValue4) {
 80012da:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <ReadFourFloats+0x1d0>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80012e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80012e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ec:	d109      	bne.n	8001302 <ReadFourFloats+0x15e>
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <ReadFourFloats+0x1d4>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80012f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	d017      	beq.n	8001332 <ReadFourFloats+0x18e>
            *val1 = newValue1;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001306:	601a      	str	r2, [r3, #0]
            *val2 = newValue2;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800130c:	601a      	str	r2, [r3, #0]
            *val3 = newValue3;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	601a      	str	r2, [r3, #0]
            *val4 = newValue4;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	69fa      	ldr	r2, [r7, #28]
 8001318:	601a      	str	r2, [r3, #0]

            oldValue1 = newValue1;
 800131a:	4a14      	ldr	r2, [pc, #80]	@ (800136c <ReadFourFloats+0x1c8>)
 800131c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800131e:	6013      	str	r3, [r2, #0]
            oldValue2 = newValue2;
 8001320:	4a13      	ldr	r2, [pc, #76]	@ (8001370 <ReadFourFloats+0x1cc>)
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	6013      	str	r3, [r2, #0]
            oldValue3 = newValue3;
 8001326:	4a13      	ldr	r2, [pc, #76]	@ (8001374 <ReadFourFloats+0x1d0>)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	6013      	str	r3, [r2, #0]
            oldValue4 = newValue4;
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <ReadFourFloats+0x1d4>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	6013      	str	r3, [r2, #0]
        }

        // Move the start pointer to the end of the current message for the next iteration
        start = end;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while ((start = strstr(start, "c:")) != NULL) {
 8001336:	4909      	ldr	r1, [pc, #36]	@ (800135c <ReadFourFloats+0x1b8>)
 8001338:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800133a:	f007 fe37 	bl	8008fac <strstr>
 800133e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001342:	2b00      	cmp	r3, #0
 8001344:	f47f af43 	bne.w	80011ce <ReadFourFloats+0x2a>
    }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000274 	.word	0x20000274
 8001358:	0800bb9c 	.word	0x0800bb9c
 800135c:	0800bbb4 	.word	0x0800bbb4
 8001360:	0800bbb8 	.word	0x0800bbb8
 8001364:	0800bbd0 	.word	0x0800bbd0
 8001368:	0800bbd4 	.word	0x0800bbd4
 800136c:	200003c8 	.word	0x200003c8
 8001370:	200003cc 	.word	0x200003cc
 8001374:	200003d0 	.word	0x200003d0
 8001378:	200003d4 	.word	0x200003d4
 800137c:	00000000 	.word	0x00000000

08001380 <moving_average_filter1>:
float angular_position_deg1 = 0.0; // Angular position in degrees
float realVel1;
float realRPM1;

// Function to calculate exponential moving average
float moving_average_filter1(float new_velocity) {
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema1 = 0.0; // Initialize EMA variable
	ema1 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema1);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff f8dc 	bl	8000548 <__aeabi_f2d>
 8001390:	a318      	add	r3, pc, #96	@ (adr r3, 80013f4 <moving_average_filter1+0x74>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4614      	mov	r4, r2
 80013a0:	461d      	mov	r5, r3
 80013a2:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <moving_average_filter1+0x70>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8ce 	bl	8000548 <__aeabi_f2d>
 80013ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80013e8 <moving_average_filter1+0x68>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f921 	bl	80005f8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7fe ff65 	bl	800028c <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fc0d 	bl	8000be8 <__aeabi_d2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a07      	ldr	r2, [pc, #28]	@ (80013f0 <moving_average_filter1+0x70>)
 80013d2:	6013      	str	r3, [r2, #0]
	return ema1;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <moving_average_filter1+0x70>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	ee07 3a90 	vmov	s15, r3
}
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	9999999a 	.word	0x9999999a
 80013ec:	3fe99999 	.word	0x3fe99999
 80013f0:	200003d8 	.word	0x200003d8
 80013f4:	9999999a 	.word	0x9999999a
 80013f8:	3fc99999 	.word	0x3fc99999
 80013fc:	00000000 	.word	0x00000000

08001400 <calculate_pwm1>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm1(float desired_velocity) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	d505      	bpl.n	8001424 <calculate_pwm1+0x24>
		desired_velocity = -desired_velocity;
 8001418:	edd7 7a01 	vldr	s15, [r7, #4]
 800141c:	eef1 7a67 	vneg.f32	s15, s15
 8001420:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	a310      	add	r3, pc, #64	@ (adr r3, 800146c <calculate_pwm1+0x6c>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff fa0c 	bl	800084c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <calculate_pwm1+0x68>)
 8001442:	f7ff f8d9 	bl	80005f8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fbcb 	bl	8000be8 <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	ee07 3a90 	vmov	s15, r3
}
 8001458:	eeb0 0a67 	vmov.f32	s0, s15
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	f3af 8000 	nop.w
 8001468:	408f4000 	.word	0x408f4000
 800146c:	147ae148 	.word	0x147ae148
 8001470:	3fd147ae 	.word	0x3fd147ae

08001474 <PID_Controller1>:

// PID Controller Function with Anti-Windup
float PID_Controller1(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8001474:	b480      	push	{r7}
 8001476:	b08d      	sub	sp, #52	@ 0x34
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a07 	vstr	s0, [r7, #28]
 800147e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001482:	ed87 1a05 	vstr	s2, [r7, #20]
 8001486:	6138      	str	r0, [r7, #16]
 8001488:	edc7 1a03 	vstr	s3, [r7, #12]
 800148c:	ed87 2a02 	vstr	s4, [r7, #8]
 8001490:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error1 = setpoint - measured_value;
 8001494:	ed97 7a02 	vldr	s14, [r7, #8]
 8001498:	edd7 7a01 	vldr	s15, [r7, #4]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error1;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001548 <PID_Controller1+0xd4>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	dd03      	ble.n	80014d4 <PID_Controller1+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <PID_Controller1+0xd8>)
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e00c      	b.n	80014ee <PID_Controller1+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001550 <PID_Controller1+0xdc>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d502      	bpl.n	80014ee <PID_Controller1+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <PID_Controller1+0xe0>)
 80014ec:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative1 = error1 - last_error;
 80014ee:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80014f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output1 = (Kp * error1) + (Ki * (*integral)) + (Kd * derivative1);
 80014fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001502:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	edd3 6a00 	vldr	s13, [r3]
 8001510:	edd7 7a06 	vldr	s15, [r7, #24]
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001520:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error1;
 8001530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001532:	60fb      	str	r3, [r7, #12]

	return output1; // Return the control output
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	ee07 3a90 	vmov	s15, r3
}
 800153a:	eeb0 0a67 	vmov.f32	s0, s15
 800153e:	3734      	adds	r7, #52	@ 0x34
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	42c80000 	.word	0x42c80000
 800154c:	42c80000 	.word	0x42c80000
 8001550:	c2c80000 	.word	0xc2c80000
 8001554:	c2c80000 	.word	0xc2c80000

08001558 <calculateVel1>:

int32_t current_pulse_count1 = 0;
 float distance_traveled1 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel1(float velTag1, float current_time1) {
 8001558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	ed87 0a01 	vstr	s0, [r7, #4]
 8001564:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag1 is within the deadband
	if (fabs(velTag1) < DEAD_BAND) {
 8001568:	edd7 7a01 	vldr	s15, [r7, #4]
 800156c:	eef0 7ae7 	vabs.f32	s15, s15
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	a382      	add	r3, pc, #520	@ (adr r3, 8001784 <calculateVel1+0x22c>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff faad 	bl	8000adc <__aeabi_dcmplt>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <calculateVel1+0x36>
		velTag1 = 0; // Set velTag1 to zero if within deadband
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag1 is 0
	if (velTag1 == 0) {
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d13c      	bne.n	8001616 <calculateVel1+0xbe>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 800159c:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <calculateVel1+0x1e8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <calculateVel1+0x1e8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	639a      	str	r2, [r3, #56]	@ 0x38
		vel1 = 0.0;
 80015ac:	4b65      	ldr	r3, [pc, #404]	@ (8001744 <calculateVel1+0x1ec>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80015b4:	4b64      	ldr	r3, [pc, #400]	@ (8001748 <calculateVel1+0x1f0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm1 = 0.0;
 80015bc:	4963      	ldr	r1, [pc, #396]	@ (800174c <calculateVel1+0x1f4>)
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	e9c1 2300 	strd	r2, r3, [r1]
		control_output1 = 0.0;
 80015ca:	4b61      	ldr	r3, [pc, #388]	@ (8001750 <calculateVel1+0x1f8>)
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad1
		realVel1 = 0.0;
 80015d2:	4b60      	ldr	r3, [pc, #384]	@ (8001754 <calculateVel1+0x1fc>)
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
		realRPM1 = 0.0;
 80015da:	4b5f      	ldr	r3, [pc, #380]	@ (8001758 <calculateVel1+0x200>)
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
		integral1_1 = 0.0;
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <calculateVel1+0x204>)
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
		last_error1 = 0.0;
 80015ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001760 <calculateVel1+0x208>)
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
		last_control_output1 = 0.0;
 80015f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001764 <calculateVel1+0x20c>)
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
		distance_traveled1 = 0.0;
 80015fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001768 <calculateVel1+0x210>)
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
		pulse_count1 = 0; // Reset pulse count
 8001602:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <calculateVel1+0x214>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
		last_velTag1 = velTag1; // Update last velTag1
 8001608:	4a59      	ldr	r2, [pc, #356]	@ (8001770 <calculateVel1+0x218>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 800160e:	2064      	movs	r0, #100	@ 0x64
 8001610:	f003 fa0c 	bl	8004a2c <HAL_Delay>
		return; // Exit the function
 8001614:	e2f6      	b.n	8001c04 <calculateVel1+0x6ac>
	}

	// Calculate the time elapsed since the last update
	float delta_time1 = current_time1 - last_time1;
 8001616:	4b57      	ldr	r3, [pc, #348]	@ (8001774 <calculateVel1+0x21c>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ed97 7a00 	vldr	s14, [r7]
 8001620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001624:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001628:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <calculateVel1+0x1f0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	461a      	mov	r2, r3
 8001630:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <calculateVel1+0x220>)
 8001632:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8001634:	200a      	movs	r0, #10
 8001636:	f003 f9f9 	bl	8004a2c <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference1 = current_pulse_count1 - pulse_count1;
 800163a:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <calculateVel1+0x220>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <calculateVel1+0x214>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm1 = fabs((float) pulse_difference1 / (float) PPR) * 60.0; // Always positive
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001652:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800165a:	eef0 7ae7 	vabs.f32	s15, s15
 800165e:	ee17 0a90 	vmov	r0, s15
 8001662:	f7fe ff71 	bl	8000548 <__aeabi_f2d>
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b44      	ldr	r3, [pc, #272]	@ (800177c <calculateVel1+0x224>)
 800166c:	f7fe ffc4 	bl	80005f8 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4935      	ldr	r1, [pc, #212]	@ (800174c <calculateVel1+0x1f4>)
 8001676:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count1 = current_pulse_count1;
 800167a:	4b3f      	ldr	r3, [pc, #252]	@ (8001778 <calculateVel1+0x220>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	4b3a      	ldr	r3, [pc, #232]	@ (800176c <calculateVel1+0x214>)
 8001682:	601a      	str	r2, [r3, #0]

	// Limit RPM to the range [0, 250]
	rpm1 = fmax(0.0, fmin(250.0, rpm1));
 8001684:	4b31      	ldr	r3, [pc, #196]	@ (800174c <calculateVel1+0x1f4>)
 8001686:	ed93 7b00 	vldr	d7, [r3]
 800168a:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8001728 <calculateVel1+0x1d0>
 800168e:	eeb0 0a47 	vmov.f32	s0, s14
 8001692:	eef0 0a67 	vmov.f32	s1, s15
 8001696:	f00a f9eb 	bl	800ba70 <fmin>
 800169a:	eeb0 7a40 	vmov.f32	s14, s0
 800169e:	eef0 7a60 	vmov.f32	s15, s1
 80016a2:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8001730 <calculateVel1+0x1d8>
 80016a6:	eeb0 0a47 	vmov.f32	s0, s14
 80016aa:	eef0 0a67 	vmov.f32	s1, s15
 80016ae:	f00a f9b5 	bl	800ba1c <fmax>
 80016b2:	eeb0 7a40 	vmov.f32	s14, s0
 80016b6:	eef0 7a60 	vmov.f32	s15, s1
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <calculateVel1+0x1f4>)
 80016bc:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel1;
	if (pulse_difference1 < 0) {
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da62      	bge.n	800178c <calculateVel1+0x234>
		new_vel1 = -((rpm1 / 60.0) * dia1 * M_PI); // Negative velocity for reverse direction
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <calculateVel1+0x1f4>)
 80016c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <calculateVel1+0x224>)
 80016d2:	f7ff f8bb 	bl	800084c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4614      	mov	r4, r2
 80016dc:	461d      	mov	r5, r3
 80016de:	4b28      	ldr	r3, [pc, #160]	@ (8001780 <calculateVel1+0x228>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4620      	mov	r0, r4
 80016ee:	4629      	mov	r1, r5
 80016f0:	f7fe ff82 	bl	80005f8 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001738 <calculateVel1+0x1e0>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff79 	bl	80005f8 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fa6b 	bl	8000be8 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef1 7a67 	vneg.f32	s15, s15
 800171c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001720:	e05c      	b.n	80017dc <calculateVel1+0x284>
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	00000000 	.word	0x00000000
 800172c:	406f4000 	.word	0x406f4000
	...
 8001738:	54442d18 	.word	0x54442d18
 800173c:	400921fb 	.word	0x400921fb
 8001740:	200005e0 	.word	0x200005e0
 8001744:	200002b8 	.word	0x200002b8
 8001748:	200003e8 	.word	0x200003e8
 800174c:	200002b0 	.word	0x200002b0
 8001750:	200002bc 	.word	0x200002bc
 8001754:	200002e0 	.word	0x200002e0
 8001758:	200002e4 	.word	0x200002e4
 800175c:	200002c0 	.word	0x200002c0
 8001760:	200002c4 	.word	0x200002c4
 8001764:	200002c8 	.word	0x200002c8
 8001768:	200002ec 	.word	0x200002ec
 800176c:	200002a8 	.word	0x200002a8
 8001770:	200002cc 	.word	0x200002cc
 8001774:	200002d4 	.word	0x200002d4
 8001778:	200002e8 	.word	0x200002e8
 800177c:	404e0000 	.word	0x404e0000
 8001780:	20000000 	.word	0x20000000
 8001784:	47ae147b 	.word	0x47ae147b
 8001788:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel1 = (rpm1 / 60.0) * dia1 * M_PI; // Positive velocity for forward direction
 800178c:	4bac      	ldr	r3, [pc, #688]	@ (8001a40 <calculateVel1+0x4e8>)
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4bab      	ldr	r3, [pc, #684]	@ (8001a44 <calculateVel1+0x4ec>)
 8001798:	f7ff f858 	bl	800084c <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4614      	mov	r4, r2
 80017a2:	461d      	mov	r5, r3
 80017a4:	4ba8      	ldr	r3, [pc, #672]	@ (8001a48 <calculateVel1+0x4f0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fecd 	bl	8000548 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	f7fe ff1f 	bl	80005f8 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	a397      	add	r3, pc, #604	@ (adr r3, 8001a20 <calculateVel1+0x4c8>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff16 	bl	80005f8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff fa08 	bl	8000be8 <__aeabi_d2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	617b      	str	r3, [r7, #20]
	}

	// Apply moving average filter for velocity
	//  vel1 = moving_average_filter1(new_vel1);
	// Constrain the velocity to the range [-1, 1]
	vel1 = fmax(-1.0, fmin(1.0, moving_average_filter1(new_vel1)));
 80017dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80017e0:	f7ff fdce 	bl	8001380 <moving_average_filter1>
 80017e4:	ee10 3a10 	vmov	r3, s0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fead 	bl	8000548 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8001a28 <calculateVel1+0x4d0>
 80017f6:	ec43 2b10 	vmov	d0, r2, r3
 80017fa:	f00a f939 	bl	800ba70 <fmin>
 80017fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001802:	eef0 7a60 	vmov.f32	s15, s1
 8001806:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8001a30 <calculateVel1+0x4d8>
 800180a:	eeb0 0a47 	vmov.f32	s0, s14
 800180e:	eef0 0a67 	vmov.f32	s1, s15
 8001812:	f00a f903 	bl	800ba1c <fmax>
 8001816:	ec53 2b10 	vmov	r2, r3, d0
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9e3 	bl	8000be8 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a89      	ldr	r2, [pc, #548]	@ (8001a4c <calculateVel1+0x4f4>)
 8001826:	6013      	str	r3, [r2, #0]
	// Update position based on velocity and elapsed time
	distance_traveled1 += vel1 * (delta_time1 / 1000.0); // Linear distance traveled in meters
 8001828:	4b89      	ldr	r3, [pc, #548]	@ (8001a50 <calculateVel1+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe8b 	bl	8000548 <__aeabi_f2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <calculateVel1+0x4f4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	4680      	mov	r8, r0
 8001842:	4689      	mov	r9, r1
 8001844:	6938      	ldr	r0, [r7, #16]
 8001846:	f7fe fe7f 	bl	8000548 <__aeabi_f2d>
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b81      	ldr	r3, [pc, #516]	@ (8001a54 <calculateVel1+0x4fc>)
 8001850:	f7fe fffc 	bl	800084c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4640      	mov	r0, r8
 800185a:	4649      	mov	r1, r9
 800185c:	f7fe fecc 	bl	80005f8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4620      	mov	r0, r4
 8001866:	4629      	mov	r1, r5
 8001868:	f7fe fd10 	bl	800028c <__adddf3>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f9b8 	bl	8000be8 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4a75      	ldr	r2, [pc, #468]	@ (8001a50 <calculateVel1+0x4f8>)
 800187c:	6013      	str	r3, [r2, #0]
	angular_position_rad1 += distance_traveled1 / (dia1 / 2.0); // Update angular position in radians
 800187e:	4b76      	ldr	r3, [pc, #472]	@ (8001a58 <calculateVel1+0x500>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe60 	bl	8000548 <__aeabi_f2d>
 8001888:	4604      	mov	r4, r0
 800188a:	460d      	mov	r5, r1
 800188c:	4b70      	ldr	r3, [pc, #448]	@ (8001a50 <calculateVel1+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe59 	bl	8000548 <__aeabi_f2d>
 8001896:	4680      	mov	r8, r0
 8001898:	4689      	mov	r9, r1
 800189a:	4b6b      	ldr	r3, [pc, #428]	@ (8001a48 <calculateVel1+0x4f0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe52 	bl	8000548 <__aeabi_f2d>
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018ac:	f7fe ffce 	bl	800084c <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4640      	mov	r0, r8
 80018b6:	4649      	mov	r1, r9
 80018b8:	f7fe ffc8 	bl	800084c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fce2 	bl	800028c <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f98a 	bl	8000be8 <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a60      	ldr	r2, [pc, #384]	@ (8001a58 <calculateVel1+0x500>)
 80018d8:	6013      	str	r3, [r2, #0]
	angular_position_deg1 = angular_position_rad1 * (180.0 / M_PI); // Convert to degrees
 80018da:	4b5f      	ldr	r3, [pc, #380]	@ (8001a58 <calculateVel1+0x500>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe32 	bl	8000548 <__aeabi_f2d>
 80018e4:	a354      	add	r3, pc, #336	@ (adr r3, 8001a38 <calculateVel1+0x4e0>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe85 	bl	80005f8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f977 	bl	8000be8 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a57      	ldr	r2, [pc, #348]	@ (8001a5c <calculateVel1+0x504>)
 80018fe:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate1 = estimate1; // Predicted state (previous estimate)
 8001900:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <calculateVel1+0x508>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a56      	ldr	r2, [pc, #344]	@ (8001a60 <calculateVel1+0x508>)
 8001906:	6013      	str	r3, [r2, #0]
	error_covariance1 += process_noise1; // Update error covariance
 8001908:	4b56      	ldr	r3, [pc, #344]	@ (8001a64 <calculateVel1+0x50c>)
 800190a:	ed93 7a00 	vldr	s14, [r3]
 800190e:	4b56      	ldr	r3, [pc, #344]	@ (8001a68 <calculateVel1+0x510>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <calculateVel1+0x50c>)
 800191a:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain1 = error_covariance1 / (error_covariance1 + measurement_noise1); // Calculate Kalman gain
 800191e:	4b51      	ldr	r3, [pc, #324]	@ (8001a64 <calculateVel1+0x50c>)
 8001920:	edd3 6a00 	vldr	s13, [r3]
 8001924:	4b4f      	ldr	r3, [pc, #316]	@ (8001a64 <calculateVel1+0x50c>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <calculateVel1+0x514>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001938:	4b4d      	ldr	r3, [pc, #308]	@ (8001a70 <calculateVel1+0x518>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
	estimate1 += kalman_gain1 * (vel1 - estimate1); // Update estimate with measurement
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <calculateVel1+0x4f4>)
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	4b46      	ldr	r3, [pc, #280]	@ (8001a60 <calculateVel1+0x508>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194e:	4b48      	ldr	r3, [pc, #288]	@ (8001a70 <calculateVel1+0x518>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001958:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <calculateVel1+0x508>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <calculateVel1+0x508>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
	error_covariance1 = (1 - kalman_gain1) * error_covariance1; // Update error covariance
 8001968:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <calculateVel1+0x518>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <calculateVel1+0x50c>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001980:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <calculateVel1+0x50c>)
 8001982:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output1 = PID_Controller1(Kp1, Ki1, Kd1, &integral1_1, last_error1,
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <calculateVel1+0x51c>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <calculateVel1+0x520>)
 800198e:	ed93 7a00 	vldr	s14, [r3]
 8001992:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <calculateVel1+0x524>)
 8001994:	edd3 6a00 	vldr	s13, [r3]
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <calculateVel1+0x528>)
 800199a:	ed93 6a00 	vldr	s12, [r3]
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <calculateVel1+0x4f4>)
 80019a0:	edd3 5a00 	vldr	s11, [r3]
 80019a4:	eef0 2a65 	vmov.f32	s5, s11
 80019a8:	ed97 2a01 	vldr	s4, [r7, #4]
 80019ac:	eef0 1a46 	vmov.f32	s3, s12
 80019b0:	4834      	ldr	r0, [pc, #208]	@ (8001a84 <calculateVel1+0x52c>)
 80019b2:	eeb0 1a66 	vmov.f32	s2, s13
 80019b6:	eef0 0a47 	vmov.f32	s1, s14
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f7ff fd59 	bl	8001474 <PID_Controller1>
 80019c2:	eef0 7a40 	vmov.f32	s15, s0
 80019c6:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <calculateVel1+0x530>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
			velTag1, vel1);

	// Implement ramping to control output
	if (fabs(control_output1 - last_control_output1) > RAMP_RATE) {
 80019cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <calculateVel1+0x530>)
 80019ce:	ed93 7a00 	vldr	s14, [r3]
 80019d2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <calculateVel1+0x534>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019dc:	eef0 7ae7 	vabs.f32	s15, s15
 80019e0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	dd60      	ble.n	8001ab0 <calculateVel1+0x558>
		control_output1 = last_control_output1
				+ (control_output1 > last_control_output1 ?
 80019ee:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <calculateVel1+0x534>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fda8 	bl	8000548 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4922      	ldr	r1, [pc, #136]	@ (8001a88 <calculateVel1+0x530>)
 80019fe:	ed91 7a00 	vldr	s14, [r1]
 8001a02:	4922      	ldr	r1, [pc, #136]	@ (8001a8c <calculateVel1+0x534>)
 8001a04:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 8001a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	dd40      	ble.n	8001a94 <calculateVel1+0x53c>
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	491e      	ldr	r1, [pc, #120]	@ (8001a90 <calculateVel1+0x538>)
 8001a18:	e03f      	b.n	8001a9a <calculateVel1+0x542>
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	54442d18 	.word	0x54442d18
 8001a24:	400921fb 	.word	0x400921fb
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	3ff00000 	.word	0x3ff00000
 8001a30:	00000000 	.word	0x00000000
 8001a34:	bff00000 	.word	0xbff00000
 8001a38:	1a63c1f8 	.word	0x1a63c1f8
 8001a3c:	404ca5dc 	.word	0x404ca5dc
 8001a40:	200002b0 	.word	0x200002b0
 8001a44:	404e0000 	.word	0x404e0000
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	200002b8 	.word	0x200002b8
 8001a50:	200002ec 	.word	0x200002ec
 8001a54:	408f4000 	.word	0x408f4000
 8001a58:	200002d8 	.word	0x200002d8
 8001a5c:	200002dc 	.word	0x200002dc
 8001a60:	200002d0 	.word	0x200002d0
 8001a64:	20000014 	.word	0x20000014
 8001a68:	20000018 	.word	0x20000018
 8001a6c:	2000001c 	.word	0x2000001c
 8001a70:	20000010 	.word	0x20000010
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	2000000c 	.word	0x2000000c
 8001a80:	200002c4 	.word	0x200002c4
 8001a84:	200002c0 	.word	0x200002c0
 8001a88:	200002bc 	.word	0x200002bc
 8001a8c:	200002c8 	.word	0x200002c8
 8001a90:	40140000 	.word	0x40140000
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	4965      	ldr	r1, [pc, #404]	@ (8001c30 <calculateVel1+0x6d8>)
				+ (control_output1 > last_control_output1 ?
 8001a9a:	f7fe fbf7 	bl	800028c <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f89f 	bl	8000be8 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
		control_output1 = last_control_output1
 8001aac:	4a61      	ldr	r2, [pc, #388]	@ (8001c34 <calculateVel1+0x6dc>)
 8001aae:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output1 > 0 && control_output1 < -HYSTERESIS)
 8001ab0:	4b61      	ldr	r3, [pc, #388]	@ (8001c38 <calculateVel1+0x6e0>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	dd0c      	ble.n	8001ada <calculateVel1+0x582>
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c34 <calculateVel1+0x6dc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd3f 	bl	8000548 <__aeabi_f2d>
 8001aca:	a351      	add	r3, pc, #324	@ (adr r3, 8001c10 <calculateVel1+0x6b8>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7ff f804 	bl	8000adc <__aeabi_dcmplt>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d114      	bne.n	8001b04 <calculateVel1+0x5ac>
			|| (last_control_output1 < 0 && control_output1 > HYSTERESIS)) {
 8001ada:	4b57      	ldr	r3, [pc, #348]	@ (8001c38 <calculateVel1+0x6e0>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae8:	d510      	bpl.n	8001b0c <calculateVel1+0x5b4>
 8001aea:	4b52      	ldr	r3, [pc, #328]	@ (8001c34 <calculateVel1+0x6dc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd2a 	bl	8000548 <__aeabi_f2d>
 8001af4:	a348      	add	r3, pc, #288	@ (adr r3, 8001c18 <calculateVel1+0x6c0>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7ff f80d 	bl	8000b18 <__aeabi_dcmpgt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <calculateVel1+0x5b4>
		control_output1 = last_control_output1; // Maintain last control output if within hysteresis
 8001b04:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <calculateVel1+0x6e0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a4a      	ldr	r2, [pc, #296]	@ (8001c34 <calculateVel1+0x6dc>)
 8001b0a:	6013      	str	r3, [r2, #0]
	}

	realVel1 = vel1 / 2.0; // Scale factor
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <calculateVel1+0x6e4>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b1a:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <calculateVel1+0x6e8>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]
	realRPM1 = rpm1 / 2.0;
 8001b20:	4b48      	ldr	r3, [pc, #288]	@ (8001c44 <calculateVel1+0x6ec>)
 8001b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b2e:	f7fe fe8d 	bl	800084c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f855 	bl	8000be8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a41      	ldr	r2, [pc, #260]	@ (8001c48 <calculateVel1+0x6f0>)
 8001b42:	6013      	str	r3, [r2, #0]

	// Limit control_output4 to the range [-0.27, 0.27]
	control_output1 = fmax(-0.27, fmin(0.27, control_output1));
 8001b44:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <calculateVel1+0x6dc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8001c20 <calculateVel1+0x6c8>
 8001b56:	ec43 2b10 	vmov	d0, r2, r3
 8001b5a:	f009 ff89 	bl	800ba70 <fmin>
 8001b5e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b62:	eef0 7a60 	vmov.f32	s15, s1
 8001b66:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8001c28 <calculateVel1+0x6d0>
 8001b6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b6e:	eef0 0a67 	vmov.f32	s1, s15
 8001b72:	f009 ff53 	bl	800ba1c <fmax>
 8001b76:	ec53 2b10 	vmov	r2, r3, d0
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff f833 	bl	8000be8 <__aeabi_d2f>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4a2b      	ldr	r2, [pc, #172]	@ (8001c34 <calculateVel1+0x6dc>)
 8001b86:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag1 > 0) {
 8001b88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	dd14      	ble.n	8001bc0 <calculateVel1+0x668>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, 0);
 8001b96:	4b2d      	ldr	r3, [pc, #180]	@ (8001c4c <calculateVel1+0x6f4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2,
 8001b9e:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <calculateVel1+0x6dc>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	f7ff fc2a 	bl	8001400 <calculate_pwm1>
 8001bac:	eef0 7a40 	vmov.f32	s15, s0
 8001bb0:	4b26      	ldr	r3, [pc, #152]	@ (8001c4c <calculateVel1+0x6f4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb8:	ee17 2a90 	vmov	r2, s15
 8001bbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bbe:	e01a      	b.n	8001bf6 <calculateVel1+0x69e>
				calculate_pwm1(control_output1));
	} else if (velTag1 < 0) {
 8001bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	d513      	bpl.n	8001bf6 <calculateVel1+0x69e>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1,
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <calculateVel1+0x6dc>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd8:	f7ff fc12 	bl	8001400 <calculate_pwm1>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <calculateVel1+0x6f4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 2a90 	vmov	r2, s15
 8001bec:	635a      	str	r2, [r3, #52]	@ 0x34
				calculate_pwm1(control_output1));
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, 0);
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <calculateVel1+0x6f4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	// Update last time and last control output
	last_time1 = current_time1;
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <calculateVel1+0x6f8>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6013      	str	r3, [r2, #0]
	last_control_output1 = control_output1;
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <calculateVel1+0x6dc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <calculateVel1+0x6e0>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c0c:	f3af 8000 	nop.w
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	bfa99999 	.word	0xbfa99999
 8001c18:	9999999a 	.word	0x9999999a
 8001c1c:	3fa99999 	.word	0x3fa99999
 8001c20:	147ae148 	.word	0x147ae148
 8001c24:	3fd147ae 	.word	0x3fd147ae
 8001c28:	147ae148 	.word	0x147ae148
 8001c2c:	bfd147ae 	.word	0xbfd147ae
 8001c30:	c0140000 	.word	0xc0140000
 8001c34:	200002bc 	.word	0x200002bc
 8001c38:	200002c8 	.word	0x200002c8
 8001c3c:	200002b8 	.word	0x200002b8
 8001c40:	200002e0 	.word	0x200002e0
 8001c44:	200002b0 	.word	0x200002b0
 8001c48:	200002e4 	.word	0x200002e4
 8001c4c:	200005e0 	.word	0x200005e0
 8001c50:	200002d4 	.word	0x200002d4
 8001c54:	00000000 	.word	0x00000000

08001c58 <moving_average_filter2>:
float angular_position_deg2 = 0.0; // Angular position in degrees
float realVel2;
float realRPM2;

// Function to calculate exponential moving average
float moving_average_filter2(float new_velocity) {
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema2 = 0.0; // Initialize EMA variable
	ema2 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema2);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fc70 	bl	8000548 <__aeabi_f2d>
 8001c68:	a318      	add	r3, pc, #96	@ (adr r3, 8001ccc <moving_average_filter2+0x74>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4614      	mov	r4, r2
 8001c78:	461d      	mov	r5, r3
 8001c7a:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <moving_average_filter2+0x70>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc62 	bl	8000548 <__aeabi_f2d>
 8001c84:	a30e      	add	r3, pc, #56	@ (adr r3, 8001cc0 <moving_average_filter2+0x68>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fcb5 	bl	80005f8 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe faf9 	bl	800028c <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ffa1 	bl	8000be8 <__aeabi_d2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a07      	ldr	r2, [pc, #28]	@ (8001cc8 <moving_average_filter2+0x70>)
 8001caa:	6013      	str	r3, [r2, #0]
	return ema2;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <moving_average_filter2+0x70>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	ee07 3a90 	vmov	s15, r3
}
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	9999999a 	.word	0x9999999a
 8001cc4:	3fe99999 	.word	0x3fe99999
 8001cc8:	200003dc 	.word	0x200003dc
 8001ccc:	9999999a 	.word	0x9999999a
 8001cd0:	3fc99999 	.word	0x3fc99999
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <calculate_pwm2>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm2(float desired_velocity) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8001ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d505      	bpl.n	8001cfc <calculate_pwm2+0x24>
		desired_velocity = -desired_velocity;
 8001cf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf4:	eef1 7a67 	vneg.f32	s15, s15
 8001cf8:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7fe fc23 	bl	8000548 <__aeabi_f2d>
 8001d02:	a310      	add	r3, pc, #64	@ (adr r3, 8001d44 <calculate_pwm2+0x6c>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fda0 	bl	800084c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <calculate_pwm2+0x68>)
 8001d1a:	f7fe fc6d 	bl	80005f8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe ff5f 	bl	8000be8 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	ee07 3a90 	vmov	s15, r3
}
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	408f4000 	.word	0x408f4000
 8001d44:	147ae148 	.word	0x147ae148
 8001d48:	3fd147ae 	.word	0x3fd147ae

08001d4c <PID_Controller2>:

// PID Controller Function with Anti-Windup
float PID_Controller2(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b08d      	sub	sp, #52	@ 0x34
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d56:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d5a:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d5e:	6138      	str	r0, [r7, #16]
 8001d60:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d64:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d68:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error2 = setpoint - measured_value;
 8001d6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error2;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001e20 <PID_Controller2+0xd4>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd03      	ble.n	8001dac <PID_Controller2+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <PID_Controller2+0xd8>)
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e00c      	b.n	8001dc6 <PID_Controller2+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e28 <PID_Controller2+0xdc>
 8001db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d502      	bpl.n	8001dc6 <PID_Controller2+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <PID_Controller2+0xe0>)
 8001dc4:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative2 = error2 - last_error;
 8001dc6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output2 = (Kp * error2) + (Ki * (*integral)) + (Kd * derivative2);
 8001dd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dda:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	edd3 6a00 	vldr	s13, [r3]
 8001de8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df4:	edd7 6a05 	vldr	s13, [r7, #20]
 8001df8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error2;
 8001e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0a:	60fb      	str	r3, [r7, #12]

	return output2; // Return the control output
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	ee07 3a90 	vmov	s15, r3
}
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	3734      	adds	r7, #52	@ 0x34
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	42c80000 	.word	0x42c80000
 8001e24:	42c80000 	.word	0x42c80000
 8001e28:	c2c80000 	.word	0xc2c80000
 8001e2c:	c2c80000 	.word	0xc2c80000

08001e30 <calculateVel2>:

int32_t current_pulse_count2 = 0;
float distance_traveled2 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel2(float velTag2, float current_time2) {
 8001e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e3c:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag2 is within the deadband
	if (fabs(velTag2) < DEAD_BAND) {
 8001e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e44:	eef0 7ae7 	vabs.f32	s15, s15
 8001e48:	ee17 0a90 	vmov	r0, s15
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	a382      	add	r3, pc, #520	@ (adr r3, 800205c <calculateVel2+0x22c>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fe41 	bl	8000adc <__aeabi_dcmplt>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <calculateVel2+0x36>
		velTag2 = 0; // Set velTag2 to zero if within deadband
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag2 is 0
	if (velTag2 == 0) {
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e72:	d13c      	bne.n	8001eee <calculateVel2+0xbe>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001e74:	4b68      	ldr	r3, [pc, #416]	@ (8002018 <calculateVel2+0x1e8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001e7c:	4b66      	ldr	r3, [pc, #408]	@ (8002018 <calculateVel2+0x1e8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	641a      	str	r2, [r3, #64]	@ 0x40
		vel2 = 0.0;
 8001e84:	4b65      	ldr	r3, [pc, #404]	@ (800201c <calculateVel2+0x1ec>)
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e8c:	4b64      	ldr	r3, [pc, #400]	@ (8002020 <calculateVel2+0x1f0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm2 = 0.0;
 8001e94:	4963      	ldr	r1, [pc, #396]	@ (8002024 <calculateVel2+0x1f4>)
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
		control_output2 = 0.0;
 8001ea2:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <calculateVel2+0x1f8>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad2
		realVel2 = 0.0;
 8001eaa:	4b60      	ldr	r3, [pc, #384]	@ (800202c <calculateVel2+0x1fc>)
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
		realRPM2 = 0.0;
 8001eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002030 <calculateVel2+0x200>)
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
		integral1_2 = 0.0;
 8001eba:	4b5e      	ldr	r3, [pc, #376]	@ (8002034 <calculateVel2+0x204>)
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
		last_error2 = 0.0;
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <calculateVel2+0x208>)
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
		last_control_output2 = 0.0;
 8001eca:	4b5c      	ldr	r3, [pc, #368]	@ (800203c <calculateVel2+0x20c>)
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
		distance_traveled2 = 0.0;
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8002040 <calculateVel2+0x210>)
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
		pulse_count2 = 0; // Reset pulse count
 8001eda:	4b5a      	ldr	r3, [pc, #360]	@ (8002044 <calculateVel2+0x214>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
		last_velTag2 = velTag2; // Update last velTag2
 8001ee0:	4a59      	ldr	r2, [pc, #356]	@ (8002048 <calculateVel2+0x218>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8001ee6:	2064      	movs	r0, #100	@ 0x64
 8001ee8:	f002 fda0 	bl	8004a2c <HAL_Delay>
		return; // Exit the function
 8001eec:	e2f6      	b.n	80024dc <calculateVel2+0x6ac>
	}

	// Calculate the time elapsed since the last update
	float delta_time2 = current_time2 - last_time2;
 8001eee:	4b57      	ldr	r3, [pc, #348]	@ (800204c <calculateVel2+0x21c>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	ed97 7a00 	vldr	s14, [r7]
 8001ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efc:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001f00:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <calculateVel2+0x1f0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b51      	ldr	r3, [pc, #324]	@ (8002050 <calculateVel2+0x220>)
 8001f0a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8001f0c:	200a      	movs	r0, #10
 8001f0e:	f002 fd8d 	bl	8004a2c <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference2 = current_pulse_count2 - pulse_count2;
 8001f12:	4b4f      	ldr	r3, [pc, #316]	@ (8002050 <calculateVel2+0x220>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b4a      	ldr	r3, [pc, #296]	@ (8002044 <calculateVel2+0x214>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm2 = fabs((float) pulse_difference2 / (float) PPR) * 60.0; // Always positive
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	eef0 7ae7 	vabs.f32	s15, s15
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fb05 	bl	8000548 <__aeabi_f2d>
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b44      	ldr	r3, [pc, #272]	@ (8002054 <calculateVel2+0x224>)
 8001f44:	f7fe fb58 	bl	80005f8 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4935      	ldr	r1, [pc, #212]	@ (8002024 <calculateVel2+0x1f4>)
 8001f4e:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count2 = current_pulse_count2;
 8001f52:	4b3f      	ldr	r3, [pc, #252]	@ (8002050 <calculateVel2+0x220>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b3a      	ldr	r3, [pc, #232]	@ (8002044 <calculateVel2+0x214>)
 8001f5a:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm2 = fmax(0.0, fmin(250.0, rpm2));
 8001f5c:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <calculateVel2+0x1f4>)
 8001f5e:	ed93 7b00 	vldr	d7, [r3]
 8001f62:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 8002000 <calculateVel2+0x1d0>
 8001f66:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6a:	eef0 0a67 	vmov.f32	s1, s15
 8001f6e:	f009 fd7f 	bl	800ba70 <fmin>
 8001f72:	eeb0 7a40 	vmov.f32	s14, s0
 8001f76:	eef0 7a60 	vmov.f32	s15, s1
 8001f7a:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8002008 <calculateVel2+0x1d8>
 8001f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f82:	eef0 0a67 	vmov.f32	s1, s15
 8001f86:	f009 fd49 	bl	800ba1c <fmax>
 8001f8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f8e:	eef0 7a60 	vmov.f32	s15, s1
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <calculateVel2+0x1f4>)
 8001f94:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel2;
	if (pulse_difference2 < 0) {
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da62      	bge.n	8002064 <calculateVel2+0x234>
		new_vel2 = -((rpm2 / 60.0) * dia2 * M_PI); // Negative velocity for reverse direction
 8001f9e:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <calculateVel2+0x1f4>)
 8001fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <calculateVel2+0x224>)
 8001faa:	f7fe fc4f 	bl	800084c <__aeabi_ddiv>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <calculateVel2+0x228>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fac4 	bl	8000548 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	f7fe fb16 	bl	80005f8 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	a30e      	add	r3, pc, #56	@ (adr r3, 8002010 <calculateVel2+0x1e0>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fb0d 	bl	80005f8 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fdff 	bl	8000be8 <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef1 7a67 	vneg.f32	s15, s15
 8001ff4:	edc7 7a05 	vstr	s15, [r7, #20]
 8001ff8:	e05c      	b.n	80020b4 <calculateVel2+0x284>
 8001ffa:	bf00      	nop
 8001ffc:	f3af 8000 	nop.w
 8002000:	00000000 	.word	0x00000000
 8002004:	406f4000 	.word	0x406f4000
	...
 8002010:	54442d18 	.word	0x54442d18
 8002014:	400921fb 	.word	0x400921fb
 8002018:	200004c0 	.word	0x200004c0
 800201c:	20000300 	.word	0x20000300
 8002020:	20000478 	.word	0x20000478
 8002024:	200002f8 	.word	0x200002f8
 8002028:	20000304 	.word	0x20000304
 800202c:	20000328 	.word	0x20000328
 8002030:	2000032c 	.word	0x2000032c
 8002034:	20000308 	.word	0x20000308
 8002038:	2000030c 	.word	0x2000030c
 800203c:	20000310 	.word	0x20000310
 8002040:	20000334 	.word	0x20000334
 8002044:	200002f0 	.word	0x200002f0
 8002048:	20000314 	.word	0x20000314
 800204c:	2000031c 	.word	0x2000031c
 8002050:	20000330 	.word	0x20000330
 8002054:	404e0000 	.word	0x404e0000
 8002058:	20000020 	.word	0x20000020
 800205c:	47ae147b 	.word	0x47ae147b
 8002060:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel2 = (rpm2 / 60.0) * dia2 * M_PI; // Positive velocity for forward direction
 8002064:	4bac      	ldr	r3, [pc, #688]	@ (8002318 <calculateVel2+0x4e8>)
 8002066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4bab      	ldr	r3, [pc, #684]	@ (800231c <calculateVel2+0x4ec>)
 8002070:	f7fe fbec 	bl	800084c <__aeabi_ddiv>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4614      	mov	r4, r2
 800207a:	461d      	mov	r5, r3
 800207c:	4ba8      	ldr	r3, [pc, #672]	@ (8002320 <calculateVel2+0x4f0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fa61 	bl	8000548 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe fab3 	bl	80005f8 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	a397      	add	r3, pc, #604	@ (adr r3, 80022f8 <calculateVel2+0x4c8>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	f7fe fd9c 	bl	8000be8 <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	617b      	str	r3, [r7, #20]
	}

	// Apply moving average filter for velocity
	//vel2 = moving_average_filter2(new_vel2);
	// Constrain the velocity to the range [-1, 1]
	vel2 = fmax(-1.0, fmin(1.0, moving_average_filter2(new_vel2)));
 80020b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80020b8:	f7ff fdce 	bl	8001c58 <moving_average_filter2>
 80020bc:	ee10 3a10 	vmov	r3, s0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa41 	bl	8000548 <__aeabi_f2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002300 <calculateVel2+0x4d0>
 80020ce:	ec43 2b10 	vmov	d0, r2, r3
 80020d2:	f009 fccd 	bl	800ba70 <fmin>
 80020d6:	eeb0 7a40 	vmov.f32	s14, s0
 80020da:	eef0 7a60 	vmov.f32	s15, s1
 80020de:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8002308 <calculateVel2+0x4d8>
 80020e2:	eeb0 0a47 	vmov.f32	s0, s14
 80020e6:	eef0 0a67 	vmov.f32	s1, s15
 80020ea:	f009 fc97 	bl	800ba1c <fmax>
 80020ee:	ec53 2b10 	vmov	r2, r3, d0
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7fe fd77 	bl	8000be8 <__aeabi_d2f>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a89      	ldr	r2, [pc, #548]	@ (8002324 <calculateVel2+0x4f4>)
 80020fe:	6013      	str	r3, [r2, #0]
	// Update position based on velocity and elapsed time
	distance_traveled2 += vel2 * (delta_time2 / 1000.0); // Linear distance traveled in meters
 8002100:	4b89      	ldr	r3, [pc, #548]	@ (8002328 <calculateVel2+0x4f8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa1f 	bl	8000548 <__aeabi_f2d>
 800210a:	4604      	mov	r4, r0
 800210c:	460d      	mov	r5, r1
 800210e:	4b85      	ldr	r3, [pc, #532]	@ (8002324 <calculateVel2+0x4f4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	4680      	mov	r8, r0
 800211a:	4689      	mov	r9, r1
 800211c:	6938      	ldr	r0, [r7, #16]
 800211e:	f7fe fa13 	bl	8000548 <__aeabi_f2d>
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4b81      	ldr	r3, [pc, #516]	@ (800232c <calculateVel2+0x4fc>)
 8002128:	f7fe fb90 	bl	800084c <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4640      	mov	r0, r8
 8002132:	4649      	mov	r1, r9
 8002134:	f7fe fa60 	bl	80005f8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8a4 	bl	800028c <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd4c 	bl	8000be8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a75      	ldr	r2, [pc, #468]	@ (8002328 <calculateVel2+0x4f8>)
 8002154:	6013      	str	r3, [r2, #0]
	angular_position_rad2 += distance_traveled2 / (dia2 / 2.0); // Update angular position in radians
 8002156:	4b76      	ldr	r3, [pc, #472]	@ (8002330 <calculateVel2+0x500>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f9f4 	bl	8000548 <__aeabi_f2d>
 8002160:	4604      	mov	r4, r0
 8002162:	460d      	mov	r5, r1
 8002164:	4b70      	ldr	r3, [pc, #448]	@ (8002328 <calculateVel2+0x4f8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9ed 	bl	8000548 <__aeabi_f2d>
 800216e:	4680      	mov	r8, r0
 8002170:	4689      	mov	r9, r1
 8002172:	4b6b      	ldr	r3, [pc, #428]	@ (8002320 <calculateVel2+0x4f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9e6 	bl	8000548 <__aeabi_f2d>
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002184:	f7fe fb62 	bl	800084c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4640      	mov	r0, r8
 800218e:	4649      	mov	r1, r9
 8002190:	f7fe fb5c 	bl	800084c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f876 	bl	800028c <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fd1e 	bl	8000be8 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a60      	ldr	r2, [pc, #384]	@ (8002330 <calculateVel2+0x500>)
 80021b0:	6013      	str	r3, [r2, #0]
	angular_position_deg2 = angular_position_rad2 * (180.0 / M_PI); // Convert to degrees
 80021b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002330 <calculateVel2+0x500>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f9c6 	bl	8000548 <__aeabi_f2d>
 80021bc:	a354      	add	r3, pc, #336	@ (adr r3, 8002310 <calculateVel2+0x4e0>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fa19 	bl	80005f8 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fd0b 	bl	8000be8 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a57      	ldr	r2, [pc, #348]	@ (8002334 <calculateVel2+0x504>)
 80021d6:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate2 = estimate2; // Predicted state (previous estimate)
 80021d8:	4b57      	ldr	r3, [pc, #348]	@ (8002338 <calculateVel2+0x508>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a56      	ldr	r2, [pc, #344]	@ (8002338 <calculateVel2+0x508>)
 80021de:	6013      	str	r3, [r2, #0]
	error_covariance2 += process_noise2; // Update error covariance
 80021e0:	4b56      	ldr	r3, [pc, #344]	@ (800233c <calculateVel2+0x50c>)
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	4b56      	ldr	r3, [pc, #344]	@ (8002340 <calculateVel2+0x510>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	4b52      	ldr	r3, [pc, #328]	@ (800233c <calculateVel2+0x50c>)
 80021f2:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain2 = error_covariance2 / (error_covariance2 + measurement_noise2); // Calculate Kalman gain
 80021f6:	4b51      	ldr	r3, [pc, #324]	@ (800233c <calculateVel2+0x50c>)
 80021f8:	edd3 6a00 	vldr	s13, [r3]
 80021fc:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <calculateVel2+0x50c>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	4b50      	ldr	r3, [pc, #320]	@ (8002344 <calculateVel2+0x514>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	4b4d      	ldr	r3, [pc, #308]	@ (8002348 <calculateVel2+0x518>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
	estimate2 += kalman_gain2 * (vel2 - estimate2); // Update estimate with measurement
 8002216:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <calculateVel2+0x4f4>)
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <calculateVel2+0x508>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002226:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <calculateVel2+0x518>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002230:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <calculateVel2+0x508>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223a:	4b3f      	ldr	r3, [pc, #252]	@ (8002338 <calculateVel2+0x508>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
	error_covariance2 = (1 - kalman_gain2) * error_covariance2; // Update error covariance
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <calculateVel2+0x518>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800224a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800224e:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <calculateVel2+0x50c>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	4b38      	ldr	r3, [pc, #224]	@ (800233c <calculateVel2+0x50c>)
 800225a:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output2 = PID_Controller2(Kp2, Ki2, Kd2, &integral1_2, last_error2,
 800225e:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <calculateVel2+0x51c>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	4b3a      	ldr	r3, [pc, #232]	@ (8002350 <calculateVel2+0x520>)
 8002266:	ed93 7a00 	vldr	s14, [r3]
 800226a:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <calculateVel2+0x524>)
 800226c:	edd3 6a00 	vldr	s13, [r3]
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <calculateVel2+0x528>)
 8002272:	ed93 6a00 	vldr	s12, [r3]
 8002276:	4b2b      	ldr	r3, [pc, #172]	@ (8002324 <calculateVel2+0x4f4>)
 8002278:	edd3 5a00 	vldr	s11, [r3]
 800227c:	eef0 2a65 	vmov.f32	s5, s11
 8002280:	ed97 2a01 	vldr	s4, [r7, #4]
 8002284:	eef0 1a46 	vmov.f32	s3, s12
 8002288:	4834      	ldr	r0, [pc, #208]	@ (800235c <calculateVel2+0x52c>)
 800228a:	eeb0 1a66 	vmov.f32	s2, s13
 800228e:	eef0 0a47 	vmov.f32	s1, s14
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	f7ff fd59 	bl	8001d4c <PID_Controller2>
 800229a:	eef0 7a40 	vmov.f32	s15, s0
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <calculateVel2+0x530>)
 80022a0:	edc3 7a00 	vstr	s15, [r3]
			velTag2, vel2);

	// Implement ramping to control output
	if (fabs(control_output2 - last_control_output2) > RAMP_RATE) {
 80022a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002360 <calculateVel2+0x530>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002364 <calculateVel2+0x534>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b4:	eef0 7ae7 	vabs.f32	s15, s15
 80022b8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80022bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	dd60      	ble.n	8002388 <calculateVel2+0x558>
		control_output2 = last_control_output2
				+ (control_output2 > last_control_output2 ?
 80022c6:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <calculateVel2+0x534>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f93c 	bl	8000548 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4922      	ldr	r1, [pc, #136]	@ (8002360 <calculateVel2+0x530>)
 80022d6:	ed91 7a00 	vldr	s14, [r1]
 80022da:	4922      	ldr	r1, [pc, #136]	@ (8002364 <calculateVel2+0x534>)
 80022dc:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 80022e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	dd40      	ble.n	800236c <calculateVel2+0x53c>
 80022ea:	f04f 0000 	mov.w	r0, #0
 80022ee:	491e      	ldr	r1, [pc, #120]	@ (8002368 <calculateVel2+0x538>)
 80022f0:	e03f      	b.n	8002372 <calculateVel2+0x542>
 80022f2:	bf00      	nop
 80022f4:	f3af 8000 	nop.w
 80022f8:	54442d18 	.word	0x54442d18
 80022fc:	400921fb 	.word	0x400921fb
 8002300:	00000000 	.word	0x00000000
 8002304:	3ff00000 	.word	0x3ff00000
 8002308:	00000000 	.word	0x00000000
 800230c:	bff00000 	.word	0xbff00000
 8002310:	1a63c1f8 	.word	0x1a63c1f8
 8002314:	404ca5dc 	.word	0x404ca5dc
 8002318:	200002f8 	.word	0x200002f8
 800231c:	404e0000 	.word	0x404e0000
 8002320:	20000020 	.word	0x20000020
 8002324:	20000300 	.word	0x20000300
 8002328:	20000334 	.word	0x20000334
 800232c:	408f4000 	.word	0x408f4000
 8002330:	20000320 	.word	0x20000320
 8002334:	20000324 	.word	0x20000324
 8002338:	20000318 	.word	0x20000318
 800233c:	20000034 	.word	0x20000034
 8002340:	20000038 	.word	0x20000038
 8002344:	2000003c 	.word	0x2000003c
 8002348:	20000030 	.word	0x20000030
 800234c:	20000024 	.word	0x20000024
 8002350:	20000028 	.word	0x20000028
 8002354:	2000002c 	.word	0x2000002c
 8002358:	2000030c 	.word	0x2000030c
 800235c:	20000308 	.word	0x20000308
 8002360:	20000304 	.word	0x20000304
 8002364:	20000310 	.word	0x20000310
 8002368:	40140000 	.word	0x40140000
 800236c:	f04f 0000 	mov.w	r0, #0
 8002370:	4965      	ldr	r1, [pc, #404]	@ (8002508 <calculateVel2+0x6d8>)
				+ (control_output2 > last_control_output2 ?
 8002372:	f7fd ff8b 	bl	800028c <__adddf3>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fc33 	bl	8000be8 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
		control_output2 = last_control_output2
 8002384:	4a61      	ldr	r2, [pc, #388]	@ (800250c <calculateVel2+0x6dc>)
 8002386:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output2 > 0 && control_output2 < -HYSTERESIS)
 8002388:	4b61      	ldr	r3, [pc, #388]	@ (8002510 <calculateVel2+0x6e0>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	dd0c      	ble.n	80023b2 <calculateVel2+0x582>
 8002398:	4b5c      	ldr	r3, [pc, #368]	@ (800250c <calculateVel2+0x6dc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8d3 	bl	8000548 <__aeabi_f2d>
 80023a2:	a351      	add	r3, pc, #324	@ (adr r3, 80024e8 <calculateVel2+0x6b8>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe fb98 	bl	8000adc <__aeabi_dcmplt>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d114      	bne.n	80023dc <calculateVel2+0x5ac>
			|| (last_control_output2 < 0 && control_output2 > HYSTERESIS)) {
 80023b2:	4b57      	ldr	r3, [pc, #348]	@ (8002510 <calculateVel2+0x6e0>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	d510      	bpl.n	80023e4 <calculateVel2+0x5b4>
 80023c2:	4b52      	ldr	r3, [pc, #328]	@ (800250c <calculateVel2+0x6dc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fe f8be 	bl	8000548 <__aeabi_f2d>
 80023cc:	a348      	add	r3, pc, #288	@ (adr r3, 80024f0 <calculateVel2+0x6c0>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe fba1 	bl	8000b18 <__aeabi_dcmpgt>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <calculateVel2+0x5b4>
		control_output2 = last_control_output2; // Maintain last control output if within hysteresis
 80023dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <calculateVel2+0x6e0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	@ (800250c <calculateVel2+0x6dc>)
 80023e2:	6013      	str	r3, [r2, #0]
	}

	realVel2 = vel2 / 2.0; // Scale factor
 80023e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002514 <calculateVel2+0x6e4>)
 80023e6:	ed93 7a00 	vldr	s14, [r3]
 80023ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f2:	4b49      	ldr	r3, [pc, #292]	@ (8002518 <calculateVel2+0x6e8>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]
	realRPM2 = rpm2 / 2.0;
 80023f8:	4b48      	ldr	r3, [pc, #288]	@ (800251c <calculateVel2+0x6ec>)
 80023fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002406:	f7fe fa21 	bl	800084c <__aeabi_ddiv>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	f7fe fbe9 	bl	8000be8 <__aeabi_d2f>
 8002416:	4603      	mov	r3, r0
 8002418:	4a41      	ldr	r2, [pc, #260]	@ (8002520 <calculateVel2+0x6f0>)
 800241a:	6013      	str	r3, [r2, #0]

	// Limit control_output4 to the range [-0.27, 0.27]
	control_output2 = fmax(-0.27, fmin(0.27, control_output2));
 800241c:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <calculateVel2+0x6dc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f891 	bl	8000548 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80024f8 <calculateVel2+0x6c8>
 800242e:	ec43 2b10 	vmov	d0, r2, r3
 8002432:	f009 fb1d 	bl	800ba70 <fmin>
 8002436:	eeb0 7a40 	vmov.f32	s14, s0
 800243a:	eef0 7a60 	vmov.f32	s15, s1
 800243e:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8002500 <calculateVel2+0x6d0>
 8002442:	eeb0 0a47 	vmov.f32	s0, s14
 8002446:	eef0 0a67 	vmov.f32	s1, s15
 800244a:	f009 fae7 	bl	800ba1c <fmax>
 800244e:	ec53 2b10 	vmov	r2, r3, d0
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fbc7 	bl	8000be8 <__aeabi_d2f>
 800245a:	4603      	mov	r3, r0
 800245c:	4a2b      	ldr	r2, [pc, #172]	@ (800250c <calculateVel2+0x6dc>)
 800245e:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag2 > 0) {
 8002460:	edd7 7a01 	vldr	s15, [r7, #4]
 8002464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246c:	dd14      	ble.n	8002498 <calculateVel2+0x668>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,
 800246e:	4b27      	ldr	r3, [pc, #156]	@ (800250c <calculateVel2+0x6dc>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	eeb0 0a67 	vmov.f32	s0, s15
 8002478:	f7ff fc2e 	bl	8001cd8 <calculate_pwm2>
 800247c:	eef0 7a40 	vmov.f32	s15, s0
 8002480:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <calculateVel2+0x6f4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002488:	ee17 2a90 	vmov	r2, s15
 800248c:	63da      	str	r2, [r3, #60]	@ 0x3c
				calculate_pwm2(control_output2));
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800248e:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <calculateVel2+0x6f4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	641a      	str	r2, [r3, #64]	@ 0x40
 8002496:	e01a      	b.n	80024ce <calculateVel2+0x69e>
	} else if (velTag2 < 0) {
 8002498:	edd7 7a01 	vldr	s15, [r7, #4]
 800249c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d513      	bpl.n	80024ce <calculateVel2+0x69e>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80024a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <calculateVel2+0x6f4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4,
 80024ae:	4b17      	ldr	r3, [pc, #92]	@ (800250c <calculateVel2+0x6dc>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eeb0 0a67 	vmov.f32	s0, s15
 80024b8:	f7ff fc0e 	bl	8001cd8 <calculate_pwm2>
 80024bc:	eef0 7a40 	vmov.f32	s15, s0
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <calculateVel2+0x6f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 2a90 	vmov	r2, s15
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
				calculate_pwm2(control_output2));

	}

	// Update last time and last control output
	last_time2 = current_time2;
 80024ce:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <calculateVel2+0x6f8>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6013      	str	r3, [r2, #0]
	last_control_output2 = control_output2;
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <calculateVel2+0x6dc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <calculateVel2+0x6e0>)
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024e4:	f3af 8000 	nop.w
 80024e8:	9999999a 	.word	0x9999999a
 80024ec:	bfa99999 	.word	0xbfa99999
 80024f0:	9999999a 	.word	0x9999999a
 80024f4:	3fa99999 	.word	0x3fa99999
 80024f8:	147ae148 	.word	0x147ae148
 80024fc:	3fd147ae 	.word	0x3fd147ae
 8002500:	147ae148 	.word	0x147ae148
 8002504:	bfd147ae 	.word	0xbfd147ae
 8002508:	c0140000 	.word	0xc0140000
 800250c:	20000304 	.word	0x20000304
 8002510:	20000310 	.word	0x20000310
 8002514:	20000300 	.word	0x20000300
 8002518:	20000328 	.word	0x20000328
 800251c:	200002f8 	.word	0x200002f8
 8002520:	2000032c 	.word	0x2000032c
 8002524:	200004c0 	.word	0x200004c0
 8002528:	2000031c 	.word	0x2000031c
 800252c:	00000000 	.word	0x00000000

08002530 <moving_average_filter3>:
float angular_position_deg3 = 0.0; // Angular position in degrees
float realVel3;
float realRPM3;

// Function to calculate exponential moving average
float moving_average_filter3(float new_velocity) {
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema3 = 0.0; // Initialize EMA variable
	ema3 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema3);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe f804 	bl	8000548 <__aeabi_f2d>
 8002540:	a318      	add	r3, pc, #96	@ (adr r3, 80025a4 <moving_average_filter3+0x74>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f857 	bl	80005f8 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4614      	mov	r4, r2
 8002550:	461d      	mov	r5, r3
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <moving_average_filter3+0x70>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fff6 	bl	8000548 <__aeabi_f2d>
 800255c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002598 <moving_average_filter3+0x68>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f849 	bl	80005f8 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4620      	mov	r0, r4
 800256c:	4629      	mov	r1, r5
 800256e:	f7fd fe8d 	bl	800028c <__adddf3>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fb35 	bl	8000be8 <__aeabi_d2f>
 800257e:	4603      	mov	r3, r0
 8002580:	4a07      	ldr	r2, [pc, #28]	@ (80025a0 <moving_average_filter3+0x70>)
 8002582:	6013      	str	r3, [r2, #0]
	return ema3;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <moving_average_filter3+0x70>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	ee07 3a90 	vmov	s15, r3
}
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bdb0      	pop	{r4, r5, r7, pc}
 8002596:	bf00      	nop
 8002598:	9999999a 	.word	0x9999999a
 800259c:	3fe99999 	.word	0x3fe99999
 80025a0:	200003e0 	.word	0x200003e0
 80025a4:	9999999a 	.word	0x9999999a
 80025a8:	3fc99999 	.word	0x3fc99999
 80025ac:	00000000 	.word	0x00000000

080025b0 <calculate_pwm3>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm3(float desired_velocity) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 80025ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80025be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d505      	bpl.n	80025d4 <calculate_pwm3+0x24>
		desired_velocity = -desired_velocity;
 80025c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025cc:	eef1 7a67 	vneg.f32	s15, s15
 80025d0:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fd ffb7 	bl	8000548 <__aeabi_f2d>
 80025da:	a310      	add	r3, pc, #64	@ (adr r3, 800261c <calculate_pwm3+0x6c>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe f934 	bl	800084c <__aeabi_ddiv>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <calculate_pwm3+0x68>)
 80025f2:	f7fe f801 	bl	80005f8 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe faf3 	bl	8000be8 <__aeabi_d2f>
 8002602:	4603      	mov	r3, r0
 8002604:	ee07 3a90 	vmov	s15, r3
}
 8002608:	eeb0 0a67 	vmov.f32	s0, s15
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	f3af 8000 	nop.w
 8002618:	408f4000 	.word	0x408f4000
 800261c:	147ae148 	.word	0x147ae148
 8002620:	3fd147ae 	.word	0x3fd147ae

08002624 <PID_Controller3>:

// PID Controller Function with Anti-Windup
float PID_Controller3(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8002624:	b480      	push	{r7}
 8002626:	b08d      	sub	sp, #52	@ 0x34
 8002628:	af00      	add	r7, sp, #0
 800262a:	ed87 0a07 	vstr	s0, [r7, #28]
 800262e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002632:	ed87 1a05 	vstr	s2, [r7, #20]
 8002636:	6138      	str	r0, [r7, #16]
 8002638:	edc7 1a03 	vstr	s3, [r7, #12]
 800263c:	ed87 2a02 	vstr	s4, [r7, #8]
 8002640:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error3 = setpoint - measured_value;
 8002644:	ed97 7a02 	vldr	s14, [r7, #8]
 8002648:	edd7 7a01 	vldr	s15, [r7, #4]
 800264c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002650:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error3;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800265e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80026f8 <PID_Controller3+0xd4>
 8002672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	dd03      	ble.n	8002684 <PID_Controller3+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <PID_Controller3+0xd8>)
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00c      	b.n	800269e <PID_Controller3+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002700 <PID_Controller3+0xdc>
 800268e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002696:	d502      	bpl.n	800269e <PID_Controller3+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4a1a      	ldr	r2, [pc, #104]	@ (8002704 <PID_Controller3+0xe0>)
 800269c:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative3 = error3 - last_error;
 800269e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80026a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output3 = (Kp * error3) + (Ki * (*integral)) + (Kd * derivative3);
 80026ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	edd3 6a00 	vldr	s13, [r3]
 80026c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80026c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80026d0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error3;
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e2:	60fb      	str	r3, [r7, #12]

	return output3; // Return the control output
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	ee07 3a90 	vmov	s15, r3
}
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	3734      	adds	r7, #52	@ 0x34
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	42c80000 	.word	0x42c80000
 80026fc:	42c80000 	.word	0x42c80000
 8002700:	c2c80000 	.word	0xc2c80000
 8002704:	c2c80000 	.word	0xc2c80000

08002708 <calculateVel3>:

int32_t current_pulse_count3 = 0;
float distance_traveled3 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel3(float velTag3, float current_time3) {
 8002708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	ed87 0a01 	vstr	s0, [r7, #4]
 8002714:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag3 is within the deadband
	if (fabs(velTag3) < DEAD_BAND) {
 8002718:	edd7 7a01 	vldr	s15, [r7, #4]
 800271c:	eef0 7ae7 	vabs.f32	s15, s15
 8002720:	ee17 0a90 	vmov	r0, s15
 8002724:	f7fd ff10 	bl	8000548 <__aeabi_f2d>
 8002728:	a382      	add	r3, pc, #520	@ (adr r3, 8002934 <calculateVel3+0x22c>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fe f9d5 	bl	8000adc <__aeabi_dcmplt>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <calculateVel3+0x36>
		velTag3 = 0; // Set velTag3 to zero if within deadband
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag3 is 0
	if (velTag3 == 0) {
 800273e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002742:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	d13c      	bne.n	80027c6 <calculateVel3+0xbe>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800274c:	4b68      	ldr	r3, [pc, #416]	@ (80028f0 <calculateVel3+0x1e8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002754:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <calculateVel3+0x1e8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
		vel3 = 0.0;
 800275c:	4b65      	ldr	r3, [pc, #404]	@ (80028f4 <calculateVel3+0x1ec>)
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8002764:	4b64      	ldr	r3, [pc, #400]	@ (80028f8 <calculateVel3+0x1f0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2200      	movs	r2, #0
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm3 = 0.0;
 800276c:	4963      	ldr	r1, [pc, #396]	@ (80028fc <calculateVel3+0x1f4>)
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9c1 2300 	strd	r2, r3, [r1]
		control_output3 = 0.0;
 800277a:	4b61      	ldr	r3, [pc, #388]	@ (8002900 <calculateVel3+0x1f8>)
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad3
		realVel3 = 0.0;
 8002782:	4b60      	ldr	r3, [pc, #384]	@ (8002904 <calculateVel3+0x1fc>)
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
		realRPM3 = 0.0;
 800278a:	4b5f      	ldr	r3, [pc, #380]	@ (8002908 <calculateVel3+0x200>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
		integral1_3 = 0.0;
 8002792:	4b5e      	ldr	r3, [pc, #376]	@ (800290c <calculateVel3+0x204>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
		last_error3 = 0.0;
 800279a:	4b5d      	ldr	r3, [pc, #372]	@ (8002910 <calculateVel3+0x208>)
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
		last_control_output3 = 0.0;
 80027a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <calculateVel3+0x20c>)
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
		distance_traveled3 = 0.0;
 80027aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <calculateVel3+0x210>)
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
		pulse_count3 = 0; // Reset pulse count
 80027b2:	4b5a      	ldr	r3, [pc, #360]	@ (800291c <calculateVel3+0x214>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
		last_velTag3 = velTag3; // Update last velTag3
 80027b8:	4a59      	ldr	r2, [pc, #356]	@ (8002920 <calculateVel3+0x218>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 80027be:	2064      	movs	r0, #100	@ 0x64
 80027c0:	f002 f934 	bl	8004a2c <HAL_Delay>
		return; // Exit the function
 80027c4:	e2f6      	b.n	8002db4 <calculateVel3+0x6ac>
	}

	// Calculate the time elapsed since the last update
	float delta_time3 = current_time3 - last_time3;
 80027c6:	4b57      	ldr	r3, [pc, #348]	@ (8002924 <calculateVel3+0x21c>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ed97 7a00 	vldr	s14, [r7]
 80027d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d4:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count3 = __HAL_TIM_GET_COUNTER(&htim5);
 80027d8:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <calculateVel3+0x1f0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	461a      	mov	r2, r3
 80027e0:	4b51      	ldr	r3, [pc, #324]	@ (8002928 <calculateVel3+0x220>)
 80027e2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80027e4:	200a      	movs	r0, #10
 80027e6:	f002 f921 	bl	8004a2c <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference3 = current_pulse_count3 - pulse_count3;
 80027ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002928 <calculateVel3+0x220>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b4a      	ldr	r3, [pc, #296]	@ (800291c <calculateVel3+0x214>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm3 = fabs((float) pulse_difference3 / (float) PPR) * 60.0; // Always positive
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002802:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8002806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800280a:	eef0 7ae7 	vabs.f32	s15, s15
 800280e:	ee17 0a90 	vmov	r0, s15
 8002812:	f7fd fe99 	bl	8000548 <__aeabi_f2d>
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	4b44      	ldr	r3, [pc, #272]	@ (800292c <calculateVel3+0x224>)
 800281c:	f7fd feec 	bl	80005f8 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4935      	ldr	r1, [pc, #212]	@ (80028fc <calculateVel3+0x1f4>)
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count3 = current_pulse_count3;
 800282a:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <calculateVel3+0x220>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	4b3a      	ldr	r3, [pc, #232]	@ (800291c <calculateVel3+0x214>)
 8002832:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm3 = fmax(0.0, fmin(250.0, rpm3));
 8002834:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <calculateVel3+0x1f4>)
 8002836:	ed93 7b00 	vldr	d7, [r3]
 800283a:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 80028d8 <calculateVel3+0x1d0>
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	f009 f913 	bl	800ba70 <fmin>
 800284a:	eeb0 7a40 	vmov.f32	s14, s0
 800284e:	eef0 7a60 	vmov.f32	s15, s1
 8002852:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 80028e0 <calculateVel3+0x1d8>
 8002856:	eeb0 0a47 	vmov.f32	s0, s14
 800285a:	eef0 0a67 	vmov.f32	s1, s15
 800285e:	f009 f8dd 	bl	800ba1c <fmax>
 8002862:	eeb0 7a40 	vmov.f32	s14, s0
 8002866:	eef0 7a60 	vmov.f32	s15, s1
 800286a:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <calculateVel3+0x1f4>)
 800286c:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel3;
	if (pulse_difference3 < 0) {
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	da62      	bge.n	800293c <calculateVel3+0x234>
		new_vel3 = -((rpm3 / 60.0) * dia3 * M_PI); // Negative velocity for reverse direction
 8002876:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <calculateVel3+0x1f4>)
 8002878:	e9d3 0100 	ldrd	r0, r1, [r3]
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <calculateVel3+0x224>)
 8002882:	f7fd ffe3 	bl	800084c <__aeabi_ddiv>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4614      	mov	r4, r2
 800288c:	461d      	mov	r5, r3
 800288e:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <calculateVel3+0x228>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe58 	bl	8000548 <__aeabi_f2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4620      	mov	r0, r4
 800289e:	4629      	mov	r1, r5
 80028a0:	f7fd feaa 	bl	80005f8 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80028e8 <calculateVel3+0x1e0>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fea1 	bl	80005f8 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f993 	bl	8000be8 <__aeabi_d2f>
 80028c2:	4603      	mov	r3, r0
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef1 7a67 	vneg.f32	s15, s15
 80028cc:	edc7 7a05 	vstr	s15, [r7, #20]
 80028d0:	e05c      	b.n	800298c <calculateVel3+0x284>
 80028d2:	bf00      	nop
 80028d4:	f3af 8000 	nop.w
 80028d8:	00000000 	.word	0x00000000
 80028dc:	406f4000 	.word	0x406f4000
	...
 80028e8:	54442d18 	.word	0x54442d18
 80028ec:	400921fb 	.word	0x400921fb
 80028f0:	20000430 	.word	0x20000430
 80028f4:	20000348 	.word	0x20000348
 80028f8:	20000508 	.word	0x20000508
 80028fc:	20000340 	.word	0x20000340
 8002900:	2000034c 	.word	0x2000034c
 8002904:	20000370 	.word	0x20000370
 8002908:	20000374 	.word	0x20000374
 800290c:	20000350 	.word	0x20000350
 8002910:	20000354 	.word	0x20000354
 8002914:	20000358 	.word	0x20000358
 8002918:	2000037c 	.word	0x2000037c
 800291c:	20000338 	.word	0x20000338
 8002920:	2000035c 	.word	0x2000035c
 8002924:	20000364 	.word	0x20000364
 8002928:	20000378 	.word	0x20000378
 800292c:	404e0000 	.word	0x404e0000
 8002930:	20000040 	.word	0x20000040
 8002934:	47ae147b 	.word	0x47ae147b
 8002938:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel3 = (rpm3 / 60.0) * dia3 * M_PI; // Positive velocity for forward direction
 800293c:	4bac      	ldr	r3, [pc, #688]	@ (8002bf0 <calculateVel3+0x4e8>)
 800293e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	4bab      	ldr	r3, [pc, #684]	@ (8002bf4 <calculateVel3+0x4ec>)
 8002948:	f7fd ff80 	bl	800084c <__aeabi_ddiv>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	461d      	mov	r5, r3
 8002954:	4ba8      	ldr	r3, [pc, #672]	@ (8002bf8 <calculateVel3+0x4f0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fdf5 	bl	8000548 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fe47 	bl	80005f8 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	a397      	add	r3, pc, #604	@ (adr r3, 8002bd0 <calculateVel3+0x4c8>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fd fe3e 	bl	80005f8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f7fe f930 	bl	8000be8 <__aeabi_d2f>
 8002988:	4603      	mov	r3, r0
 800298a:	617b      	str	r3, [r7, #20]
	}
	// Constrain the velocity to the range [-1, 1]
	vel3 = fmax(-1.0, fmin(1.0, moving_average_filter3(new_vel3)));
 800298c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002990:	f7ff fdce 	bl	8002530 <moving_average_filter3>
 8002994:	ee10 3a10 	vmov	r3, s0
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fdd5 	bl	8000548 <__aeabi_f2d>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002bd8 <calculateVel3+0x4d0>
 80029a6:	ec43 2b10 	vmov	d0, r2, r3
 80029aa:	f009 f861 	bl	800ba70 <fmin>
 80029ae:	eeb0 7a40 	vmov.f32	s14, s0
 80029b2:	eef0 7a60 	vmov.f32	s15, s1
 80029b6:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 8002be0 <calculateVel3+0x4d8>
 80029ba:	eeb0 0a47 	vmov.f32	s0, s14
 80029be:	eef0 0a67 	vmov.f32	s1, s15
 80029c2:	f009 f82b 	bl	800ba1c <fmax>
 80029c6:	ec53 2b10 	vmov	r2, r3, d0
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7fe f90b 	bl	8000be8 <__aeabi_d2f>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a89      	ldr	r2, [pc, #548]	@ (8002bfc <calculateVel3+0x4f4>)
 80029d6:	6013      	str	r3, [r2, #0]
	// Apply moving average filter for velocity
	// vel3 = moving_average_filter3(new_vel3);

	// Update position based on velocity and elapsed time
	distance_traveled3 += vel3 * (delta_time3 / 1000.0); // Linear distance traveled in meters
 80029d8:	4b89      	ldr	r3, [pc, #548]	@ (8002c00 <calculateVel3+0x4f8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdb3 	bl	8000548 <__aeabi_f2d>
 80029e2:	4604      	mov	r4, r0
 80029e4:	460d      	mov	r5, r1
 80029e6:	4b85      	ldr	r3, [pc, #532]	@ (8002bfc <calculateVel3+0x4f4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fd fdac 	bl	8000548 <__aeabi_f2d>
 80029f0:	4680      	mov	r8, r0
 80029f2:	4689      	mov	r9, r1
 80029f4:	6938      	ldr	r0, [r7, #16]
 80029f6:	f7fd fda7 	bl	8000548 <__aeabi_f2d>
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	4b81      	ldr	r3, [pc, #516]	@ (8002c04 <calculateVel3+0x4fc>)
 8002a00:	f7fd ff24 	bl	800084c <__aeabi_ddiv>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4640      	mov	r0, r8
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	f7fd fdf4 	bl	80005f8 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fc38 	bl	800028c <__adddf3>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f8e0 	bl	8000be8 <__aeabi_d2f>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4a75      	ldr	r2, [pc, #468]	@ (8002c00 <calculateVel3+0x4f8>)
 8002a2c:	6013      	str	r3, [r2, #0]
	angular_position_rad3 += distance_traveled3 / (dia3 / 2.0); // Update angular position in radians
 8002a2e:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <calculateVel3+0x500>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fd88 	bl	8000548 <__aeabi_f2d>
 8002a38:	4604      	mov	r4, r0
 8002a3a:	460d      	mov	r5, r1
 8002a3c:	4b70      	ldr	r3, [pc, #448]	@ (8002c00 <calculateVel3+0x4f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd81 	bl	8000548 <__aeabi_f2d>
 8002a46:	4680      	mov	r8, r0
 8002a48:	4689      	mov	r9, r1
 8002a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf8 <calculateVel3+0x4f0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd7a 	bl	8000548 <__aeabi_f2d>
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a5c:	f7fd fef6 	bl	800084c <__aeabi_ddiv>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4640      	mov	r0, r8
 8002a66:	4649      	mov	r1, r9
 8002a68:	f7fd fef0 	bl	800084c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4620      	mov	r0, r4
 8002a72:	4629      	mov	r1, r5
 8002a74:	f7fd fc0a 	bl	800028c <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f8b2 	bl	8000be8 <__aeabi_d2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a60      	ldr	r2, [pc, #384]	@ (8002c08 <calculateVel3+0x500>)
 8002a88:	6013      	str	r3, [r2, #0]
	angular_position_deg3 = angular_position_rad3 * (180.0 / M_PI); // Convert to degrees
 8002a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002c08 <calculateVel3+0x500>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fd5a 	bl	8000548 <__aeabi_f2d>
 8002a94:	a354      	add	r3, pc, #336	@ (adr r3, 8002be8 <calculateVel3+0x4e0>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fdad 	bl	80005f8 <__aeabi_dmul>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fe f89f 	bl	8000be8 <__aeabi_d2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a57      	ldr	r2, [pc, #348]	@ (8002c0c <calculateVel3+0x504>)
 8002aae:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate3 = estimate3; // Predicted state (previous estimate)
 8002ab0:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <calculateVel3+0x508>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	@ (8002c10 <calculateVel3+0x508>)
 8002ab6:	6013      	str	r3, [r2, #0]
	error_covariance3 += process_noise3; // Update error covariance
 8002ab8:	4b56      	ldr	r3, [pc, #344]	@ (8002c14 <calculateVel3+0x50c>)
 8002aba:	ed93 7a00 	vldr	s14, [r3]
 8002abe:	4b56      	ldr	r3, [pc, #344]	@ (8002c18 <calculateVel3+0x510>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac8:	4b52      	ldr	r3, [pc, #328]	@ (8002c14 <calculateVel3+0x50c>)
 8002aca:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain3 = error_covariance3 / (error_covariance3 + measurement_noise3); // Calculate Kalman gain
 8002ace:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <calculateVel3+0x50c>)
 8002ad0:	edd3 6a00 	vldr	s13, [r3]
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <calculateVel3+0x50c>)
 8002ad6:	ed93 7a00 	vldr	s14, [r3]
 8002ada:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <calculateVel3+0x514>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c20 <calculateVel3+0x518>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]
	estimate3 += kalman_gain3 * (vel3 - estimate3); // Update estimate with measurement
 8002aee:	4b43      	ldr	r3, [pc, #268]	@ (8002bfc <calculateVel3+0x4f4>)
 8002af0:	ed93 7a00 	vldr	s14, [r3]
 8002af4:	4b46      	ldr	r3, [pc, #280]	@ (8002c10 <calculateVel3+0x508>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002afe:	4b48      	ldr	r3, [pc, #288]	@ (8002c20 <calculateVel3+0x518>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b08:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <calculateVel3+0x508>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	4b3f      	ldr	r3, [pc, #252]	@ (8002c10 <calculateVel3+0x508>)
 8002b14:	edc3 7a00 	vstr	s15, [r3]
	error_covariance3 = (1 - kalman_gain3) * error_covariance3; // Update error covariance
 8002b18:	4b41      	ldr	r3, [pc, #260]	@ (8002c20 <calculateVel3+0x518>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <calculateVel3+0x50c>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b30:	4b38      	ldr	r3, [pc, #224]	@ (8002c14 <calculateVel3+0x50c>)
 8002b32:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control output using PID controller
	control_output3 = PID_Controller3(Kp3, Ki3, Kd3, &integral1_3, last_error3,
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <calculateVel3+0x51c>)
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c28 <calculateVel3+0x520>)
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	4b3a      	ldr	r3, [pc, #232]	@ (8002c2c <calculateVel3+0x524>)
 8002b44:	edd3 6a00 	vldr	s13, [r3]
 8002b48:	4b39      	ldr	r3, [pc, #228]	@ (8002c30 <calculateVel3+0x528>)
 8002b4a:	ed93 6a00 	vldr	s12, [r3]
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bfc <calculateVel3+0x4f4>)
 8002b50:	edd3 5a00 	vldr	s11, [r3]
 8002b54:	eef0 2a65 	vmov.f32	s5, s11
 8002b58:	ed97 2a01 	vldr	s4, [r7, #4]
 8002b5c:	eef0 1a46 	vmov.f32	s3, s12
 8002b60:	4834      	ldr	r0, [pc, #208]	@ (8002c34 <calculateVel3+0x52c>)
 8002b62:	eeb0 1a66 	vmov.f32	s2, s13
 8002b66:	eef0 0a47 	vmov.f32	s1, s14
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	f7ff fd59 	bl	8002624 <PID_Controller3>
 8002b72:	eef0 7a40 	vmov.f32	s15, s0
 8002b76:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <calculateVel3+0x530>)
 8002b78:	edc3 7a00 	vstr	s15, [r3]
			velTag3, vel3);

	// Implement ramping to control output
	if (fabs(control_output3 - last_control_output3) > RAMP_RATE) {
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <calculateVel3+0x530>)
 8002b7e:	ed93 7a00 	vldr	s14, [r3]
 8002b82:	4b2e      	ldr	r3, [pc, #184]	@ (8002c3c <calculateVel3+0x534>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	eef0 7ae7 	vabs.f32	s15, s15
 8002b90:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	dd60      	ble.n	8002c60 <calculateVel3+0x558>
		control_output3 = last_control_output3
				+ (control_output3 > last_control_output3 ?
 8002b9e:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <calculateVel3+0x534>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcd0 	bl	8000548 <__aeabi_f2d>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4922      	ldr	r1, [pc, #136]	@ (8002c38 <calculateVel3+0x530>)
 8002bae:	ed91 7a00 	vldr	s14, [r1]
 8002bb2:	4922      	ldr	r1, [pc, #136]	@ (8002c3c <calculateVel3+0x534>)
 8002bb4:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 8002bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	dd40      	ble.n	8002c44 <calculateVel3+0x53c>
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	491e      	ldr	r1, [pc, #120]	@ (8002c40 <calculateVel3+0x538>)
 8002bc8:	e03f      	b.n	8002c4a <calculateVel3+0x542>
 8002bca:	bf00      	nop
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	54442d18 	.word	0x54442d18
 8002bd4:	400921fb 	.word	0x400921fb
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	3ff00000 	.word	0x3ff00000
 8002be0:	00000000 	.word	0x00000000
 8002be4:	bff00000 	.word	0xbff00000
 8002be8:	1a63c1f8 	.word	0x1a63c1f8
 8002bec:	404ca5dc 	.word	0x404ca5dc
 8002bf0:	20000340 	.word	0x20000340
 8002bf4:	404e0000 	.word	0x404e0000
 8002bf8:	20000040 	.word	0x20000040
 8002bfc:	20000348 	.word	0x20000348
 8002c00:	2000037c 	.word	0x2000037c
 8002c04:	408f4000 	.word	0x408f4000
 8002c08:	20000368 	.word	0x20000368
 8002c0c:	2000036c 	.word	0x2000036c
 8002c10:	20000360 	.word	0x20000360
 8002c14:	20000054 	.word	0x20000054
 8002c18:	20000058 	.word	0x20000058
 8002c1c:	2000005c 	.word	0x2000005c
 8002c20:	20000050 	.word	0x20000050
 8002c24:	20000044 	.word	0x20000044
 8002c28:	20000048 	.word	0x20000048
 8002c2c:	2000004c 	.word	0x2000004c
 8002c30:	20000354 	.word	0x20000354
 8002c34:	20000350 	.word	0x20000350
 8002c38:	2000034c 	.word	0x2000034c
 8002c3c:	20000358 	.word	0x20000358
 8002c40:	40140000 	.word	0x40140000
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	4965      	ldr	r1, [pc, #404]	@ (8002de0 <calculateVel3+0x6d8>)
				+ (control_output3 > last_control_output3 ?
 8002c4a:	f7fd fb1f 	bl	800028c <__adddf3>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ffc7 	bl	8000be8 <__aeabi_d2f>
 8002c5a:	4603      	mov	r3, r0
		control_output3 = last_control_output3
 8002c5c:	4a61      	ldr	r2, [pc, #388]	@ (8002de4 <calculateVel3+0x6dc>)
 8002c5e:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output3 > 0 && control_output3 < -HYSTERESIS)
 8002c60:	4b61      	ldr	r3, [pc, #388]	@ (8002de8 <calculateVel3+0x6e0>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	dd0c      	ble.n	8002c8a <calculateVel3+0x582>
 8002c70:	4b5c      	ldr	r3, [pc, #368]	@ (8002de4 <calculateVel3+0x6dc>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc67 	bl	8000548 <__aeabi_f2d>
 8002c7a:	a351      	add	r3, pc, #324	@ (adr r3, 8002dc0 <calculateVel3+0x6b8>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd ff2c 	bl	8000adc <__aeabi_dcmplt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d114      	bne.n	8002cb4 <calculateVel3+0x5ac>
			|| (last_control_output3 < 0 && control_output3 > HYSTERESIS)) {
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <calculateVel3+0x6e0>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	d510      	bpl.n	8002cbc <calculateVel3+0x5b4>
 8002c9a:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <calculateVel3+0x6dc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc52 	bl	8000548 <__aeabi_f2d>
 8002ca4:	a348      	add	r3, pc, #288	@ (adr r3, 8002dc8 <calculateVel3+0x6c0>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd ff35 	bl	8000b18 <__aeabi_dcmpgt>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <calculateVel3+0x5b4>
		control_output3 = last_control_output3; // Maintain last control output if within hysteresis
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8002de8 <calculateVel3+0x6e0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <calculateVel3+0x6dc>)
 8002cba:	6013      	str	r3, [r2, #0]
	}

	realVel3 = vel3 / 2.0; // Scale factor
 8002cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002dec <calculateVel3+0x6e4>)
 8002cbe:	ed93 7a00 	vldr	s14, [r3]
 8002cc2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <calculateVel3+0x6e8>)
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
	realRPM3 = rpm3 / 2.0;
 8002cd0:	4b48      	ldr	r3, [pc, #288]	@ (8002df4 <calculateVel3+0x6ec>)
 8002cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cde:	f7fd fdb5 	bl	800084c <__aeabi_ddiv>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff7d 	bl	8000be8 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a41      	ldr	r2, [pc, #260]	@ (8002df8 <calculateVel3+0x6f0>)
 8002cf2:	6013      	str	r3, [r2, #0]

	// Limit control_output4 to the range [-0.27, 0.27]
	control_output3 = fmax(-0.27, fmin(0.27, control_output3));
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <calculateVel3+0x6dc>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc25 	bl	8000548 <__aeabi_f2d>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8002dd0 <calculateVel3+0x6c8>
 8002d06:	ec43 2b10 	vmov	d0, r2, r3
 8002d0a:	f008 feb1 	bl	800ba70 <fmin>
 8002d0e:	eeb0 7a40 	vmov.f32	s14, s0
 8002d12:	eef0 7a60 	vmov.f32	s15, s1
 8002d16:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 8002dd8 <calculateVel3+0x6d0>
 8002d1a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d1e:	eef0 0a67 	vmov.f32	s1, s15
 8002d22:	f008 fe7b 	bl	800ba1c <fmax>
 8002d26:	ec53 2b10 	vmov	r2, r3, d0
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd ff5b 	bl	8000be8 <__aeabi_d2f>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4a2b      	ldr	r2, [pc, #172]	@ (8002de4 <calculateVel3+0x6dc>)
 8002d36:	6013      	str	r3, [r2, #0]
	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag3 > 0) {
 8002d38:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	dd14      	ble.n	8002d70 <calculateVel3+0x668>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8002d46:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <calculateVel3+0x6f4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,
 8002d4e:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <calculateVel3+0x6dc>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	eeb0 0a67 	vmov.f32	s0, s15
 8002d58:	f7ff fc2a 	bl	80025b0 <calculate_pwm3>
 8002d5c:	eef0 7a40 	vmov.f32	s15, s0
 8002d60:	4b26      	ldr	r3, [pc, #152]	@ (8002dfc <calculateVel3+0x6f4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d68:	ee17 2a90 	vmov	r2, s15
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d6e:	e01a      	b.n	8002da6 <calculateVel3+0x69e>
				calculate_pwm3(control_output3));
	} else if (velTag3 < 0) {
 8002d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d513      	bpl.n	8002da6 <calculateVel3+0x69e>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,
 8002d7e:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <calculateVel3+0x6dc>)
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	eeb0 0a67 	vmov.f32	s0, s15
 8002d88:	f7ff fc12 	bl	80025b0 <calculate_pwm3>
 8002d8c:	eef0 7a40 	vmov.f32	s15, s0
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <calculateVel3+0x6f4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	ee17 2a90 	vmov	r2, s15
 8002d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
				calculate_pwm3(control_output3));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002d9e:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <calculateVel3+0x6f4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	// Update last time and last control output
	last_time3 = current_time3;
 8002da6:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <calculateVel3+0x6f8>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6013      	str	r3, [r2, #0]
	last_control_output3 = control_output3;
 8002dac:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <calculateVel3+0x6dc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0d      	ldr	r2, [pc, #52]	@ (8002de8 <calculateVel3+0x6e0>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	9999999a 	.word	0x9999999a
 8002dc4:	bfa99999 	.word	0xbfa99999
 8002dc8:	9999999a 	.word	0x9999999a
 8002dcc:	3fa99999 	.word	0x3fa99999
 8002dd0:	147ae148 	.word	0x147ae148
 8002dd4:	3fd147ae 	.word	0x3fd147ae
 8002dd8:	147ae148 	.word	0x147ae148
 8002ddc:	bfd147ae 	.word	0xbfd147ae
 8002de0:	c0140000 	.word	0xc0140000
 8002de4:	2000034c 	.word	0x2000034c
 8002de8:	20000358 	.word	0x20000358
 8002dec:	20000348 	.word	0x20000348
 8002df0:	20000370 	.word	0x20000370
 8002df4:	20000340 	.word	0x20000340
 8002df8:	20000374 	.word	0x20000374
 8002dfc:	20000430 	.word	0x20000430
 8002e00:	20000364 	.word	0x20000364
 8002e04:	00000000 	.word	0x00000000

08002e08 <moving_average_filter4>:
float angular_position_deg4 = 0.0; // Angular position in degrees
float realVel4;
float realRPM4;

// Function to calculate exponential moving average
float moving_average_filter4(float new_velocity) {
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	ed87 0a01 	vstr	s0, [r7, #4]
	static float ema4 = 0.0; // Initialize EMA variable
	ema4 = (SMOOTHING_FACTOR * new_velocity) + ((1 - SMOOTHING_FACTOR) * ema4);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fb98 	bl	8000548 <__aeabi_f2d>
 8002e18:	a318      	add	r3, pc, #96	@ (adr r3, 8002e7c <moving_average_filter4+0x74>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f7fd fbeb 	bl	80005f8 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4614      	mov	r4, r2
 8002e28:	461d      	mov	r5, r3
 8002e2a:	4b13      	ldr	r3, [pc, #76]	@ (8002e78 <moving_average_filter4+0x70>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb8a 	bl	8000548 <__aeabi_f2d>
 8002e34:	a30e      	add	r3, pc, #56	@ (adr r3, 8002e70 <moving_average_filter4+0x68>)
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f7fd fbdd 	bl	80005f8 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd fa21 	bl	800028c <__adddf3>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7fd fec9 	bl	8000be8 <__aeabi_d2f>
 8002e56:	4603      	mov	r3, r0
 8002e58:	4a07      	ldr	r2, [pc, #28]	@ (8002e78 <moving_average_filter4+0x70>)
 8002e5a:	6013      	str	r3, [r2, #0]
	return ema4;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	@ (8002e78 <moving_average_filter4+0x70>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	ee07 3a90 	vmov	s15, r3
}
 8002e64:	eeb0 0a67 	vmov.f32	s0, s15
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	9999999a 	.word	0x9999999a
 8002e74:	3fe99999 	.word	0x3fe99999
 8002e78:	200003e4 	.word	0x200003e4
 8002e7c:	9999999a 	.word	0x9999999a
 8002e80:	3fc99999 	.word	0x3fc99999
 8002e84:	00000000 	.word	0x00000000

08002e88 <calculate_pwm4>:

// Function to calculate PWM duty cycle based on desired velocity
float calculate_pwm4(float desired_velocity) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (desired_velocity < 0) {
 8002e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	d505      	bpl.n	8002eac <calculate_pwm4+0x24>
		desired_velocity = -desired_velocity;
 8002ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea4:	eef1 7a67 	vneg.f32	s15, s15
 8002ea8:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return (desired_velocity / MAX_VELOCITY) * MAX_PWM_VALUE; // Scale to PWM range
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7fd fb4b 	bl	8000548 <__aeabi_f2d>
 8002eb2:	a310      	add	r3, pc, #64	@ (adr r3, 8002ef4 <calculate_pwm4+0x6c>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd fcc8 	bl	800084c <__aeabi_ddiv>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <calculate_pwm4+0x68>)
 8002eca:	f7fd fb95 	bl	80005f8 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f7fd fe87 	bl	8000be8 <__aeabi_d2f>
 8002eda:	4603      	mov	r3, r0
 8002edc:	ee07 3a90 	vmov	s15, r3
}
 8002ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	f3af 8000 	nop.w
 8002ef0:	408f4000 	.word	0x408f4000
 8002ef4:	147ae148 	.word	0x147ae148
 8002ef8:	3fd147ae 	.word	0x3fd147ae

08002efc <PID_Controller4>:

// PID Controller Function with Anti-Windup
float PID_Controller4(float Kp, float Ki, float Kd, float *integral,
		float last_error, float setpoint, float measured_value) {
 8002efc:	b480      	push	{r7}
 8002efe:	b08d      	sub	sp, #52	@ 0x34
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f06:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f0a:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f0e:	6138      	str	r0, [r7, #16]
 8002f10:	edc7 1a03 	vstr	s3, [r7, #12]
 8002f14:	ed87 2a02 	vstr	s4, [r7, #8]
 8002f18:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate the error
	float error4 = setpoint - measured_value;
 8002f1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f28:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Update the integral term with clamping to prevent windup
	*integral += error4;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	ed93 7a00 	vldr	s14, [r3]
 8002f32:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	edc3 7a00 	vstr	s15, [r3]
	if (*integral > MAX_INTEGRAL) {
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	edd3 7a00 	vldr	s15, [r3]
 8002f46:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002fd0 <PID_Controller4+0xd4>
 8002f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f52:	dd03      	ble.n	8002f5c <PID_Controller4+0x60>
		*integral = MAX_INTEGRAL; // Clamp integral to prevent windup
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd4 <PID_Controller4+0xd8>)
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	e00c      	b.n	8002f76 <PID_Controller4+0x7a>
	} else if (*integral < -MAX_INTEGRAL) {
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002fd8 <PID_Controller4+0xdc>
 8002f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	d502      	bpl.n	8002f76 <PID_Controller4+0x7a>
		*integral = -MAX_INTEGRAL; // Clamp integral to prevent windup
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	@ (8002fdc <PID_Controller4+0xe0>)
 8002f74:	601a      	str	r2, [r3, #0]
	}

	// Calculate the derivative term
	float derivative4 = error4 - last_error;
 8002f76:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Calculate the output
	float output4 = (Kp * error4) + (Ki * (*integral)) + (Kd * derivative4);
 8002f86:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f8a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	edd3 6a00 	vldr	s13, [r3]
 8002f98:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	edd7 6a05 	vldr	s13, [r7, #20]
 8002fa8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Save the last error for next iteration
	last_error = error4;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fba:	60fb      	str	r3, [r7, #12]

	return output4; // Return the control output
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	ee07 3a90 	vmov	s15, r3
}
 8002fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc6:	3734      	adds	r7, #52	@ 0x34
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	42c80000 	.word	0x42c80000
 8002fd4:	42c80000 	.word	0x42c80000
 8002fd8:	c2c80000 	.word	0xc2c80000
 8002fdc:	c2c80000 	.word	0xc2c80000

08002fe0 <calculateVel4>:

int32_t current_pulse_count4 = 0;
float distance_traveled4 = 0.0;
// Function to calculate RPM and control the motor
void calculateVel4(float velTag4, float current_time4) {
 8002fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fec:	edc7 0a00 	vstr	s1, [r7]


	// Check if velTag4 is within the deadband
	if (fabs(velTag4) < DEAD_BAND) {
 8002ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff4:	eef0 7ae7 	vabs.f32	s15, s15
 8002ff8:	ee17 0a90 	vmov	r0, s15
 8002ffc:	f7fd faa4 	bl	8000548 <__aeabi_f2d>
 8003000:	a382      	add	r3, pc, #520	@ (adr r3, 800320c <calculateVel4+0x22c>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd fd69 	bl	8000adc <__aeabi_dcmplt>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <calculateVel4+0x36>
		velTag4 = 0; // Set velTag4 to zero if within deadband
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
	}

	// Immediate stop if velTag4 is 0
	if (velTag4 == 0) {
 8003016:	edd7 7a01 	vldr	s15, [r7, #4]
 800301a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d13c      	bne.n	800309e <calculateVel4+0xbe>
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8003024:	4b68      	ldr	r3, [pc, #416]	@ (80031c8 <calculateVel4+0x1e8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 800302c:	4b66      	ldr	r3, [pc, #408]	@ (80031c8 <calculateVel4+0x1e8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38
		vel4 = 0.0;
 8003034:	4b65      	ldr	r3, [pc, #404]	@ (80031cc <calculateVel4+0x1ec>)
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim8, 0);
 800303c:	4b64      	ldr	r3, [pc, #400]	@ (80031d0 <calculateVel4+0x1f0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
		rpm4 = 0.0;
 8003044:	4963      	ldr	r1, [pc, #396]	@ (80031d4 <calculateVel4+0x1f4>)
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9c1 2300 	strd	r2, r3, [r1]
		control_output4 = 0.0;
 8003052:	4b61      	ldr	r3, [pc, #388]	@ (80031d8 <calculateVel4+0x1f8>)
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
		// Reset variables except angular_position_rad4
		realVel4 = 0.0;
 800305a:	4b60      	ldr	r3, [pc, #384]	@ (80031dc <calculateVel4+0x1fc>)
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
		realRPM4 = 0.0;
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <calculateVel4+0x200>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
		integral1_4 = 0.0;
 800306a:	4b5e      	ldr	r3, [pc, #376]	@ (80031e4 <calculateVel4+0x204>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
		last_error4 = 0.0;
 8003072:	4b5d      	ldr	r3, [pc, #372]	@ (80031e8 <calculateVel4+0x208>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
		last_control_output4 = 0.0;
 800307a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ec <calculateVel4+0x20c>)
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
		distance_traveled4 = 0.0;
 8003082:	4b5b      	ldr	r3, [pc, #364]	@ (80031f0 <calculateVel4+0x210>)
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
		pulse_count4 = 0; // Reset pulse count
 800308a:	4b5a      	ldr	r3, [pc, #360]	@ (80031f4 <calculateVel4+0x214>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
		last_velTag4 = velTag4; // Update last velTag4
 8003090:	4a59      	ldr	r2, [pc, #356]	@ (80031f8 <calculateVel4+0x218>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6013      	str	r3, [r2, #0]
		HAL_Delay(STOP_DURATION); // Wait for 100 ms
 8003096:	2064      	movs	r0, #100	@ 0x64
 8003098:	f001 fcc8 	bl	8004a2c <HAL_Delay>
		return; // Exit the function
 800309c:	e2f6      	b.n	800368c <calculateVel4+0x6ac>
	}

	// Calculate the time elapsed since the last update
	float delta_time4 = current_time4 - last_time4;
 800309e:	4b57      	ldr	r3, [pc, #348]	@ (80031fc <calculateVel4+0x21c>)
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ed97 7a00 	vldr	s14, [r7]
 80030a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ac:	edc7 7a04 	vstr	s15, [r7, #16]

	// Read the current pulse count
	current_pulse_count4 = __HAL_TIM_GET_COUNTER(&htim8);
 80030b0:	4b47      	ldr	r3, [pc, #284]	@ (80031d0 <calculateVel4+0x1f0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b51      	ldr	r3, [pc, #324]	@ (8003200 <calculateVel4+0x220>)
 80030ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80030bc:	200a      	movs	r0, #10
 80030be:	f001 fcb5 	bl	8004a2c <HAL_Delay>

	// Calculate the difference in pulse count
	int32_t pulse_difference4 = current_pulse_count4 - pulse_count4;
 80030c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003200 <calculateVel4+0x220>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <calculateVel4+0x214>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	60fb      	str	r3, [r7, #12]

	// Calculate RPM as a positive value
	rpm4 = fabs((float) pulse_difference4 / (float) PPR) * 60.0; // Always positive
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030da:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80030de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030e2:	eef0 7ae7 	vabs.f32	s15, s15
 80030e6:	ee17 0a90 	vmov	r0, s15
 80030ea:	f7fd fa2d 	bl	8000548 <__aeabi_f2d>
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	4b44      	ldr	r3, [pc, #272]	@ (8003204 <calculateVel4+0x224>)
 80030f4:	f7fd fa80 	bl	80005f8 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4935      	ldr	r1, [pc, #212]	@ (80031d4 <calculateVel4+0x1f4>)
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
	pulse_count4 = current_pulse_count4;
 8003102:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <calculateVel4+0x220>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <calculateVel4+0x214>)
 800310a:	601a      	str	r2, [r3, #0]
	// Limit RPM to the range [0, 250]
	rpm4 = fmax(0.0, fmin(250.0, rpm4));
 800310c:	4b31      	ldr	r3, [pc, #196]	@ (80031d4 <calculateVel4+0x1f4>)
 800310e:	ed93 7b00 	vldr	d7, [r3]
 8003112:	ed9f 1b27 	vldr	d1, [pc, #156]	@ 80031b0 <calculateVel4+0x1d0>
 8003116:	eeb0 0a47 	vmov.f32	s0, s14
 800311a:	eef0 0a67 	vmov.f32	s1, s15
 800311e:	f008 fca7 	bl	800ba70 <fmin>
 8003122:	eeb0 7a40 	vmov.f32	s14, s0
 8003126:	eef0 7a60 	vmov.f32	s15, s1
 800312a:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 80031b8 <calculateVel4+0x1d8>
 800312e:	eeb0 0a47 	vmov.f32	s0, s14
 8003132:	eef0 0a67 	vmov.f32	s1, s15
 8003136:	f008 fc71 	bl	800ba1c <fmax>
 800313a:	eeb0 7a40 	vmov.f32	s14, s0
 800313e:	eef0 7a60 	vmov.f32	s15, s1
 8003142:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <calculateVel4+0x1f4>)
 8003144:	ed83 7b00 	vstr	d7, [r3]
	// Calculate linear velocity (m/s)
	float new_vel4;
	if (pulse_difference4 < 0) {
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da62      	bge.n	8003214 <calculateVel4+0x234>
		new_vel4 = -((rpm4 / 60.0) * dia4 * M_PI); // Negative velocity for reverse direction
 800314e:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <calculateVel4+0x1f4>)
 8003150:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	4b2a      	ldr	r3, [pc, #168]	@ (8003204 <calculateVel4+0x224>)
 800315a:	f7fd fb77 	bl	800084c <__aeabi_ddiv>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4614      	mov	r4, r2
 8003164:	461d      	mov	r5, r3
 8003166:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <calculateVel4+0x228>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f9ec 	bl	8000548 <__aeabi_f2d>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4620      	mov	r0, r4
 8003176:	4629      	mov	r1, r5
 8003178:	f7fd fa3e 	bl	80005f8 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	a30e      	add	r3, pc, #56	@ (adr r3, 80031c0 <calculateVel4+0x1e0>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fa35 	bl	80005f8 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f7fd fd27 	bl	8000be8 <__aeabi_d2f>
 800319a:	4603      	mov	r3, r0
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef1 7a67 	vneg.f32	s15, s15
 80031a4:	edc7 7a05 	vstr	s15, [r7, #20]
 80031a8:	e05c      	b.n	8003264 <calculateVel4+0x284>
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	00000000 	.word	0x00000000
 80031b4:	406f4000 	.word	0x406f4000
	...
 80031c0:	54442d18 	.word	0x54442d18
 80031c4:	400921fb 	.word	0x400921fb
 80031c8:	20000598 	.word	0x20000598
 80031cc:	20000390 	.word	0x20000390
 80031d0:	20000550 	.word	0x20000550
 80031d4:	20000388 	.word	0x20000388
 80031d8:	20000394 	.word	0x20000394
 80031dc:	200003b8 	.word	0x200003b8
 80031e0:	200003bc 	.word	0x200003bc
 80031e4:	20000398 	.word	0x20000398
 80031e8:	2000039c 	.word	0x2000039c
 80031ec:	200003a0 	.word	0x200003a0
 80031f0:	200003c4 	.word	0x200003c4
 80031f4:	20000380 	.word	0x20000380
 80031f8:	200003a4 	.word	0x200003a4
 80031fc:	200003ac 	.word	0x200003ac
 8003200:	200003c0 	.word	0x200003c0
 8003204:	404e0000 	.word	0x404e0000
 8003208:	20000060 	.word	0x20000060
 800320c:	47ae147b 	.word	0x47ae147b
 8003210:	3f847ae1 	.word	0x3f847ae1
	} else {
		new_vel4 = (rpm4 / 60.0) * dia4 * M_PI; // Positive velocity for forward direction
 8003214:	4bac      	ldr	r3, [pc, #688]	@ (80034c8 <calculateVel4+0x4e8>)
 8003216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	4bab      	ldr	r3, [pc, #684]	@ (80034cc <calculateVel4+0x4ec>)
 8003220:	f7fd fb14 	bl	800084c <__aeabi_ddiv>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4614      	mov	r4, r2
 800322a:	461d      	mov	r5, r3
 800322c:	4ba8      	ldr	r3, [pc, #672]	@ (80034d0 <calculateVel4+0x4f0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd f989 	bl	8000548 <__aeabi_f2d>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4620      	mov	r0, r4
 800323c:	4629      	mov	r1, r5
 800323e:	f7fd f9db 	bl	80005f8 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	a397      	add	r3, pc, #604	@ (adr r3, 80034a8 <calculateVel4+0x4c8>)
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f7fd f9d2 	bl	80005f8 <__aeabi_dmul>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4610      	mov	r0, r2
 800325a:	4619      	mov	r1, r3
 800325c:	f7fd fcc4 	bl	8000be8 <__aeabi_d2f>
 8003260:	4603      	mov	r3, r0
 8003262:	617b      	str	r3, [r7, #20]
	}

	// Constrain the velocity to the range [-1, 1]
	vel4 = fmax(-1.0, fmin(1.0, moving_average_filter4(new_vel4)));
 8003264:	ed97 0a05 	vldr	s0, [r7, #20]
 8003268:	f7ff fdce 	bl	8002e08 <moving_average_filter4>
 800326c:	ee10 3a10 	vmov	r3, s0
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd f969 	bl	8000548 <__aeabi_f2d>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 80034b0 <calculateVel4+0x4d0>
 800327e:	ec43 2b10 	vmov	d0, r2, r3
 8003282:	f008 fbf5 	bl	800ba70 <fmin>
 8003286:	eeb0 7a40 	vmov.f32	s14, s0
 800328a:	eef0 7a60 	vmov.f32	s15, s1
 800328e:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 80034b8 <calculateVel4+0x4d8>
 8003292:	eeb0 0a47 	vmov.f32	s0, s14
 8003296:	eef0 0a67 	vmov.f32	s1, s15
 800329a:	f008 fbbf 	bl	800ba1c <fmax>
 800329e:	ec53 2b10 	vmov	r2, r3, d0
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7fd fc9f 	bl	8000be8 <__aeabi_d2f>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a89      	ldr	r2, [pc, #548]	@ (80034d4 <calculateVel4+0x4f4>)
 80032ae:	6013      	str	r3, [r2, #0]
	// Apply moving average filter for velocity
	//  vel4 = moving_average_filter4(new_vel4);

	// Update position based on velocity and elapsed time
	distance_traveled4 += vel4 * (delta_time4 / 1000.0); // Linear distance traveled in meters
 80032b0:	4b89      	ldr	r3, [pc, #548]	@ (80034d8 <calculateVel4+0x4f8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	4604      	mov	r4, r0
 80032bc:	460d      	mov	r5, r1
 80032be:	4b85      	ldr	r3, [pc, #532]	@ (80034d4 <calculateVel4+0x4f4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f940 	bl	8000548 <__aeabi_f2d>
 80032c8:	4680      	mov	r8, r0
 80032ca:	4689      	mov	r9, r1
 80032cc:	6938      	ldr	r0, [r7, #16]
 80032ce:	f7fd f93b 	bl	8000548 <__aeabi_f2d>
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	4b81      	ldr	r3, [pc, #516]	@ (80034dc <calculateVel4+0x4fc>)
 80032d8:	f7fd fab8 	bl	800084c <__aeabi_ddiv>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4640      	mov	r0, r8
 80032e2:	4649      	mov	r1, r9
 80032e4:	f7fd f988 	bl	80005f8 <__aeabi_dmul>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4620      	mov	r0, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	f7fc ffcc 	bl	800028c <__adddf3>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd fc74 	bl	8000be8 <__aeabi_d2f>
 8003300:	4603      	mov	r3, r0
 8003302:	4a75      	ldr	r2, [pc, #468]	@ (80034d8 <calculateVel4+0x4f8>)
 8003304:	6013      	str	r3, [r2, #0]
	angular_position_rad4 += distance_traveled4 / (dia4 / 2.0); // Update angular position in radians
 8003306:	4b76      	ldr	r3, [pc, #472]	@ (80034e0 <calculateVel4+0x500>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f91c 	bl	8000548 <__aeabi_f2d>
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	4b70      	ldr	r3, [pc, #448]	@ (80034d8 <calculateVel4+0x4f8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f915 	bl	8000548 <__aeabi_f2d>
 800331e:	4680      	mov	r8, r0
 8003320:	4689      	mov	r9, r1
 8003322:	4b6b      	ldr	r3, [pc, #428]	@ (80034d0 <calculateVel4+0x4f0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f90e 	bl	8000548 <__aeabi_f2d>
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003334:	f7fd fa8a 	bl	800084c <__aeabi_ddiv>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4640      	mov	r0, r8
 800333e:	4649      	mov	r1, r9
 8003340:	f7fd fa84 	bl	800084c <__aeabi_ddiv>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4620      	mov	r0, r4
 800334a:	4629      	mov	r1, r5
 800334c:	f7fc ff9e 	bl	800028c <__adddf3>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f7fd fc46 	bl	8000be8 <__aeabi_d2f>
 800335c:	4603      	mov	r3, r0
 800335e:	4a60      	ldr	r2, [pc, #384]	@ (80034e0 <calculateVel4+0x500>)
 8003360:	6013      	str	r3, [r2, #0]
	angular_position_deg4 = angular_position_rad4 * (180.0 / M_PI); // Convert to degrees
 8003362:	4b5f      	ldr	r3, [pc, #380]	@ (80034e0 <calculateVel4+0x500>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f8ee 	bl	8000548 <__aeabi_f2d>
 800336c:	a354      	add	r3, pc, #336	@ (adr r3, 80034c0 <calculateVel4+0x4e0>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fd f941 	bl	80005f8 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f7fd fc33 	bl	8000be8 <__aeabi_d2f>
 8003382:	4603      	mov	r3, r0
 8003384:	4a57      	ldr	r2, [pc, #348]	@ (80034e4 <calculateVel4+0x504>)
 8003386:	6013      	str	r3, [r2, #0]

	// Kalman filter update
	estimate4 = estimate4; // Predicted state (previous estimate)
 8003388:	4b57      	ldr	r3, [pc, #348]	@ (80034e8 <calculateVel4+0x508>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a56      	ldr	r2, [pc, #344]	@ (80034e8 <calculateVel4+0x508>)
 800338e:	6013      	str	r3, [r2, #0]
	error_covariance4 += process_noise4; // Update error covariance
 8003390:	4b56      	ldr	r3, [pc, #344]	@ (80034ec <calculateVel4+0x50c>)
 8003392:	ed93 7a00 	vldr	s14, [r3]
 8003396:	4b56      	ldr	r3, [pc, #344]	@ (80034f0 <calculateVel4+0x510>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	4b52      	ldr	r3, [pc, #328]	@ (80034ec <calculateVel4+0x50c>)
 80033a2:	edc3 7a00 	vstr	s15, [r3]

	// Measurement update
	kalman_gain4 = error_covariance4 / (error_covariance4 + measurement_noise4); // Calculate Kalman gain
 80033a6:	4b51      	ldr	r3, [pc, #324]	@ (80034ec <calculateVel4+0x50c>)
 80033a8:	edd3 6a00 	vldr	s13, [r3]
 80033ac:	4b4f      	ldr	r3, [pc, #316]	@ (80034ec <calculateVel4+0x50c>)
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	4b50      	ldr	r3, [pc, #320]	@ (80034f4 <calculateVel4+0x514>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c0:	4b4d      	ldr	r3, [pc, #308]	@ (80034f8 <calculateVel4+0x518>)
 80033c2:	edc3 7a00 	vstr	s15, [r3]
	estimate4 += kalman_gain4 * (vel4 - estimate4); // Update estimate with measurement
 80033c6:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <calculateVel4+0x4f4>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	4b46      	ldr	r3, [pc, #280]	@ (80034e8 <calculateVel4+0x508>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033d6:	4b48      	ldr	r3, [pc, #288]	@ (80034f8 <calculateVel4+0x518>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e0:	4b41      	ldr	r3, [pc, #260]	@ (80034e8 <calculateVel4+0x508>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ea:	4b3f      	ldr	r3, [pc, #252]	@ (80034e8 <calculateVel4+0x508>)
 80033ec:	edc3 7a00 	vstr	s15, [r3]
	error_covariance4 = (1 - kalman_gain4) * error_covariance4; // Update error covariance
 80033f0:	4b41      	ldr	r3, [pc, #260]	@ (80034f8 <calculateVel4+0x518>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033fe:	4b3b      	ldr	r3, [pc, #236]	@ (80034ec <calculateVel4+0x50c>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003408:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <calculateVel4+0x50c>)
 800340a:	edc3 7a00 	vstr	s15, [r3]
	// Calculate control output using PID controller
	control_output4 = PID_Controller4(Kp4, Ki4, Kd4, &integral1_4, last_error4,
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <calculateVel4+0x51c>)
 8003410:	edd3 7a00 	vldr	s15, [r3]
 8003414:	4b3a      	ldr	r3, [pc, #232]	@ (8003500 <calculateVel4+0x520>)
 8003416:	ed93 7a00 	vldr	s14, [r3]
 800341a:	4b3a      	ldr	r3, [pc, #232]	@ (8003504 <calculateVel4+0x524>)
 800341c:	edd3 6a00 	vldr	s13, [r3]
 8003420:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <calculateVel4+0x528>)
 8003422:	ed93 6a00 	vldr	s12, [r3]
 8003426:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <calculateVel4+0x4f4>)
 8003428:	edd3 5a00 	vldr	s11, [r3]
 800342c:	eef0 2a65 	vmov.f32	s5, s11
 8003430:	ed97 2a01 	vldr	s4, [r7, #4]
 8003434:	eef0 1a46 	vmov.f32	s3, s12
 8003438:	4834      	ldr	r0, [pc, #208]	@ (800350c <calculateVel4+0x52c>)
 800343a:	eeb0 1a66 	vmov.f32	s2, s13
 800343e:	eef0 0a47 	vmov.f32	s1, s14
 8003442:	eeb0 0a67 	vmov.f32	s0, s15
 8003446:	f7ff fd59 	bl	8002efc <PID_Controller4>
 800344a:	eef0 7a40 	vmov.f32	s15, s0
 800344e:	4b30      	ldr	r3, [pc, #192]	@ (8003510 <calculateVel4+0x530>)
 8003450:	edc3 7a00 	vstr	s15, [r3]
			velTag4, vel4);

	// Implement ramping to control output
	if (fabs(control_output4 - last_control_output4) > RAMP_RATE) {
 8003454:	4b2e      	ldr	r3, [pc, #184]	@ (8003510 <calculateVel4+0x530>)
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	4b2e      	ldr	r3, [pc, #184]	@ (8003514 <calculateVel4+0x534>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003464:	eef0 7ae7 	vabs.f32	s15, s15
 8003468:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800346c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	dd60      	ble.n	8003538 <calculateVel4+0x558>
		control_output4 = last_control_output4
				+ (control_output4 > last_control_output4 ?
 8003476:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <calculateVel4+0x534>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f864 	bl	8000548 <__aeabi_f2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4922      	ldr	r1, [pc, #136]	@ (8003510 <calculateVel4+0x530>)
 8003486:	ed91 7a00 	vldr	s14, [r1]
 800348a:	4922      	ldr	r1, [pc, #136]	@ (8003514 <calculateVel4+0x534>)
 800348c:	edd1 7a00 	vldr	s15, [r1]
						RAMP_RATE : -RAMP_RATE);
 8003490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	dd40      	ble.n	800351c <calculateVel4+0x53c>
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	491e      	ldr	r1, [pc, #120]	@ (8003518 <calculateVel4+0x538>)
 80034a0:	e03f      	b.n	8003522 <calculateVel4+0x542>
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	54442d18 	.word	0x54442d18
 80034ac:	400921fb 	.word	0x400921fb
 80034b0:	00000000 	.word	0x00000000
 80034b4:	3ff00000 	.word	0x3ff00000
 80034b8:	00000000 	.word	0x00000000
 80034bc:	bff00000 	.word	0xbff00000
 80034c0:	1a63c1f8 	.word	0x1a63c1f8
 80034c4:	404ca5dc 	.word	0x404ca5dc
 80034c8:	20000388 	.word	0x20000388
 80034cc:	404e0000 	.word	0x404e0000
 80034d0:	20000060 	.word	0x20000060
 80034d4:	20000390 	.word	0x20000390
 80034d8:	200003c4 	.word	0x200003c4
 80034dc:	408f4000 	.word	0x408f4000
 80034e0:	200003b0 	.word	0x200003b0
 80034e4:	200003b4 	.word	0x200003b4
 80034e8:	200003a8 	.word	0x200003a8
 80034ec:	20000074 	.word	0x20000074
 80034f0:	20000078 	.word	0x20000078
 80034f4:	2000007c 	.word	0x2000007c
 80034f8:	20000070 	.word	0x20000070
 80034fc:	20000064 	.word	0x20000064
 8003500:	20000068 	.word	0x20000068
 8003504:	2000006c 	.word	0x2000006c
 8003508:	2000039c 	.word	0x2000039c
 800350c:	20000398 	.word	0x20000398
 8003510:	20000394 	.word	0x20000394
 8003514:	200003a0 	.word	0x200003a0
 8003518:	40140000 	.word	0x40140000
 800351c:	f04f 0000 	mov.w	r0, #0
 8003520:	4965      	ldr	r1, [pc, #404]	@ (80036b8 <calculateVel4+0x6d8>)
				+ (control_output4 > last_control_output4 ?
 8003522:	f7fc feb3 	bl	800028c <__adddf3>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fb5b 	bl	8000be8 <__aeabi_d2f>
 8003532:	4603      	mov	r3, r0
		control_output4 = last_control_output4
 8003534:	4a61      	ldr	r2, [pc, #388]	@ (80036bc <calculateVel4+0x6dc>)
 8003536:	6013      	str	r3, [r2, #0]
	}

	// Implement hysteresis to prevent rapid switching
	if ((last_control_output4 > 0 && control_output4 < -HYSTERESIS)
 8003538:	4b61      	ldr	r3, [pc, #388]	@ (80036c0 <calculateVel4+0x6e0>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	dd0c      	ble.n	8003562 <calculateVel4+0x582>
 8003548:	4b5c      	ldr	r3, [pc, #368]	@ (80036bc <calculateVel4+0x6dc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fc fffb 	bl	8000548 <__aeabi_f2d>
 8003552:	a351      	add	r3, pc, #324	@ (adr r3, 8003698 <calculateVel4+0x6b8>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fd fac0 	bl	8000adc <__aeabi_dcmplt>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d114      	bne.n	800358c <calculateVel4+0x5ac>
			|| (last_control_output4 < 0 && control_output4 > HYSTERESIS)) {
 8003562:	4b57      	ldr	r3, [pc, #348]	@ (80036c0 <calculateVel4+0x6e0>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800356c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003570:	d510      	bpl.n	8003594 <calculateVel4+0x5b4>
 8003572:	4b52      	ldr	r3, [pc, #328]	@ (80036bc <calculateVel4+0x6dc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ffe6 	bl	8000548 <__aeabi_f2d>
 800357c:	a348      	add	r3, pc, #288	@ (adr r3, 80036a0 <calculateVel4+0x6c0>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fd fac9 	bl	8000b18 <__aeabi_dcmpgt>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <calculateVel4+0x5b4>
		control_output4 = last_control_output4; // Maintain last control output if within hysteresis
 800358c:	4b4c      	ldr	r3, [pc, #304]	@ (80036c0 <calculateVel4+0x6e0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a4a      	ldr	r2, [pc, #296]	@ (80036bc <calculateVel4+0x6dc>)
 8003592:	6013      	str	r3, [r2, #0]
	}

	realVel4 = vel4 / 2.0; // Scale factor
 8003594:	4b4b      	ldr	r3, [pc, #300]	@ (80036c4 <calculateVel4+0x6e4>)
 8003596:	ed93 7a00 	vldr	s14, [r3]
 800359a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800359e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a2:	4b49      	ldr	r3, [pc, #292]	@ (80036c8 <calculateVel4+0x6e8>)
 80035a4:	edc3 7a00 	vstr	s15, [r3]
	realRPM4 = rpm4 / 2.0;
 80035a8:	4b48      	ldr	r3, [pc, #288]	@ (80036cc <calculateVel4+0x6ec>)
 80035aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035b6:	f7fd f949 	bl	800084c <__aeabi_ddiv>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	f7fd fb11 	bl	8000be8 <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a41      	ldr	r2, [pc, #260]	@ (80036d0 <calculateVel4+0x6f0>)
 80035ca:	6013      	str	r3, [r2, #0]

	// Limit control_output4 to the range [-0.27, 0.27]
	control_output4 = fmax(-0.27, fmin(0.27, control_output4));
 80035cc:	4b3b      	ldr	r3, [pc, #236]	@ (80036bc <calculateVel4+0x6dc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffb9 	bl	8000548 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80036a8 <calculateVel4+0x6c8>
 80035de:	ec43 2b10 	vmov	d0, r2, r3
 80035e2:	f008 fa45 	bl	800ba70 <fmin>
 80035e6:	eeb0 7a40 	vmov.f32	s14, s0
 80035ea:	eef0 7a60 	vmov.f32	s15, s1
 80035ee:	ed9f 1b30 	vldr	d1, [pc, #192]	@ 80036b0 <calculateVel4+0x6d0>
 80035f2:	eeb0 0a47 	vmov.f32	s0, s14
 80035f6:	eef0 0a67 	vmov.f32	s1, s15
 80035fa:	f008 fa0f 	bl	800ba1c <fmax>
 80035fe:	ec53 2b10 	vmov	r2, r3, d0
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	f7fd faef 	bl	8000be8 <__aeabi_d2f>
 800360a:	4603      	mov	r3, r0
 800360c:	4a2b      	ldr	r2, [pc, #172]	@ (80036bc <calculateVel4+0x6dc>)
 800360e:	6013      	str	r3, [r2, #0]

	// Set the PWM duty cycle based on the sign of desired_velocity
	if (velTag4 > 0) {
 8003610:	edd7 7a01 	vldr	s15, [r7, #4]
 8003614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	dd14      	ble.n	8003648 <calculateVel4+0x668>
		// Positive velocity
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1,
 800361e:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <calculateVel4+0x6dc>)
 8003620:	edd3 7a00 	vldr	s15, [r3]
 8003624:	eeb0 0a67 	vmov.f32	s0, s15
 8003628:	f7ff fc2e 	bl	8002e88 <calculate_pwm4>
 800362c:	eef0 7a40 	vmov.f32	s15, s0
 8003630:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <calculateVel4+0x6f4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	ee17 2a90 	vmov	r2, s15
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34
				calculate_pwm4(control_output4));
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 800363e:	4b25      	ldr	r3, [pc, #148]	@ (80036d4 <calculateVel4+0x6f4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	639a      	str	r2, [r3, #56]	@ 0x38
 8003646:	e01a      	b.n	800367e <calculateVel4+0x69e>

	} else if (velTag4 < 0) {
 8003648:	edd7 7a01 	vldr	s15, [r7, #4]
 800364c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003654:	d513      	bpl.n	800367e <calculateVel4+0x69e>
		// Negative velocity
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8003656:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <calculateVel4+0x6f4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2,
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <calculateVel4+0x6dc>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	eeb0 0a67 	vmov.f32	s0, s15
 8003668:	f7ff fc0e 	bl	8002e88 <calculate_pwm4>
 800366c:	eef0 7a40 	vmov.f32	s15, s0
 8003670:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <calculateVel4+0x6f4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003678:	ee17 2a90 	vmov	r2, s15
 800367c:	639a      	str	r2, [r3, #56]	@ 0x38
				calculate_pwm4(control_output4));
	}

	// Update last time and last control output
	last_time4 = current_time4;
 800367e:	4a16      	ldr	r2, [pc, #88]	@ (80036d8 <calculateVel4+0x6f8>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6013      	str	r3, [r2, #0]
	last_control_output4 = control_output4;
 8003684:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <calculateVel4+0x6dc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <calculateVel4+0x6e0>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003694:	f3af 8000 	nop.w
 8003698:	9999999a 	.word	0x9999999a
 800369c:	bfa99999 	.word	0xbfa99999
 80036a0:	9999999a 	.word	0x9999999a
 80036a4:	3fa99999 	.word	0x3fa99999
 80036a8:	147ae148 	.word	0x147ae148
 80036ac:	3fd147ae 	.word	0x3fd147ae
 80036b0:	147ae148 	.word	0x147ae148
 80036b4:	bfd147ae 	.word	0xbfd147ae
 80036b8:	c0140000 	.word	0xc0140000
 80036bc:	20000394 	.word	0x20000394
 80036c0:	200003a0 	.word	0x200003a0
 80036c4:	20000390 	.word	0x20000390
 80036c8:	200003b8 	.word	0x200003b8
 80036cc:	20000388 	.word	0x20000388
 80036d0:	200003bc 	.word	0x200003bc
 80036d4:	20000598 	.word	0x20000598
 80036d8:	200003ac 	.word	0x200003ac

080036dc <motor>:




void motor(void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	ReadFourFloats(&value1, &value2, &value3, &value4);
 80036e0:	4b3c      	ldr	r3, [pc, #240]	@ (80037d4 <motor+0xf8>)
 80036e2:	4a3d      	ldr	r2, [pc, #244]	@ (80037d8 <motor+0xfc>)
 80036e4:	493d      	ldr	r1, [pc, #244]	@ (80037dc <motor+0x100>)
 80036e6:	483e      	ldr	r0, [pc, #248]	@ (80037e0 <motor+0x104>)
 80036e8:	f7fd fd5c 	bl	80011a4 <ReadFourFloats>

	HAL_Delay(1);
 80036ec:	2001      	movs	r0, #1
 80036ee:	f001 f99d 	bl	8004a2c <HAL_Delay>

	time = get_custom_tick();
 80036f2:	f001 f837 	bl	8004764 <get_custom_tick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4a3a      	ldr	r2, [pc, #232]	@ (80037e4 <motor+0x108>)
 80036fa:	6013      	str	r3, [r2, #0]
	calculateVel1(value1, time);
 80036fc:	4b38      	ldr	r3, [pc, #224]	@ (80037e0 <motor+0x104>)
 80036fe:	edd3 7a00 	vldr	s15, [r3]
 8003702:	4b38      	ldr	r3, [pc, #224]	@ (80037e4 <motor+0x108>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	ee07 3a10 	vmov	s14, r3
 800370a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800370e:	eef0 0a47 	vmov.f32	s1, s14
 8003712:	eeb0 0a67 	vmov.f32	s0, s15
 8003716:	f7fd ff1f 	bl	8001558 <calculateVel1>
	calculateVel2(value2, time);
 800371a:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <motor+0x100>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	4b30      	ldr	r3, [pc, #192]	@ (80037e4 <motor+0x108>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	ee07 3a10 	vmov	s14, r3
 8003728:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800372c:	eef0 0a47 	vmov.f32	s1, s14
 8003730:	eeb0 0a67 	vmov.f32	s0, s15
 8003734:	f7fe fb7c 	bl	8001e30 <calculateVel2>
	calculateVel3(value3, time);
 8003738:	4b27      	ldr	r3, [pc, #156]	@ (80037d8 <motor+0xfc>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	4b29      	ldr	r3, [pc, #164]	@ (80037e4 <motor+0x108>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	ee07 3a10 	vmov	s14, r3
 8003746:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800374a:	eef0 0a47 	vmov.f32	s1, s14
 800374e:	eeb0 0a67 	vmov.f32	s0, s15
 8003752:	f7fe ffd9 	bl	8002708 <calculateVel3>
    calculateVel4(value4, time);
 8003756:	4b1f      	ldr	r3, [pc, #124]	@ (80037d4 <motor+0xf8>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	4b21      	ldr	r3, [pc, #132]	@ (80037e4 <motor+0x108>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	ee07 3a10 	vmov	s14, r3
 8003764:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003768:	eef0 0a47 	vmov.f32	s1, s14
 800376c:	eeb0 0a67 	vmov.f32	s0, s15
 8003770:	f7ff fc36 	bl	8002fe0 <calculateVel4>
	calculateVel2(0.54, time);
	calculateVel3(0.54, time);
	calculateVel4(0.54, time);
*/
	// Print the final values
	HAL_Delay(100);
 8003774:	2064      	movs	r0, #100	@ 0x64
 8003776:	f001 f959 	bl	8004a2c <HAL_Delay>
	sendJointState(angular_position_rad1, angular_position_rad2,
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <motor+0x10c>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	4b1a      	ldr	r3, [pc, #104]	@ (80037ec <motor+0x110>)
 8003782:	ed93 7a00 	vldr	s14, [r3]
 8003786:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <motor+0x114>)
 8003788:	edd3 6a00 	vldr	s13, [r3]
 800378c:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <motor+0x118>)
 800378e:	ed93 6a00 	vldr	s12, [r3]
 8003792:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <motor+0x11c>)
 8003794:	edd3 5a00 	vldr	s11, [r3]
 8003798:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <motor+0x120>)
 800379a:	ed93 5a00 	vldr	s10, [r3]
 800379e:	4b18      	ldr	r3, [pc, #96]	@ (8003800 <motor+0x124>)
 80037a0:	edd3 4a00 	vldr	s9, [r3]
 80037a4:	4b17      	ldr	r3, [pc, #92]	@ (8003804 <motor+0x128>)
 80037a6:	ed93 4a00 	vldr	s8, [r3]
 80037aa:	eef0 3a44 	vmov.f32	s7, s8
 80037ae:	eeb0 3a64 	vmov.f32	s6, s9
 80037b2:	eef0 2a45 	vmov.f32	s5, s10
 80037b6:	eeb0 2a65 	vmov.f32	s4, s11
 80037ba:	eef0 1a46 	vmov.f32	s3, s12
 80037be:	eeb0 1a66 	vmov.f32	s2, s13
 80037c2:	eef0 0a47 	vmov.f32	s1, s14
 80037c6:	eeb0 0a67 	vmov.f32	s0, s15
 80037ca:	f7fd fc0b 	bl	8000fe4 <sendJointState>
			angular_position_rad3, angular_position_rad4, realVel1, realVel2,
			realVel3, realVel4);

}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200002a0 	.word	0x200002a0
 80037d8:	2000029c 	.word	0x2000029c
 80037dc:	20000298 	.word	0x20000298
 80037e0:	20000294 	.word	0x20000294
 80037e4:	200002a4 	.word	0x200002a4
 80037e8:	200002d8 	.word	0x200002d8
 80037ec:	20000320 	.word	0x20000320
 80037f0:	20000368 	.word	0x20000368
 80037f4:	200003b0 	.word	0x200003b0
 80037f8:	200002e0 	.word	0x200002e0
 80037fc:	20000328 	.word	0x20000328
 8003800:	20000370 	.word	0x20000370
 8003804:	200003b8 	.word	0x200003b8

08003808 <Motor_Init>:

#define MAX_PWM 1000 // Maximum PWM value

#define k 0.1 // Motor characteristic constant (RPS per PWM)
// MOTOR
void Motor_Init(void) {
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // Init PWM1 -> RPWM
 800380c:	2108      	movs	r1, #8
 800380e:	4810      	ldr	r0, [pc, #64]	@ (8003850 <Motor_Init+0x48>)
 8003810:	f002 f8b2 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // Init PWM2 -> LPWM
 8003814:	210c      	movs	r1, #12
 8003816:	480e      	ldr	r0, [pc, #56]	@ (8003850 <Motor_Init+0x48>)
 8003818:	f002 f8ae 	bl	8005978 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Init PWM3 -> RPWM
 800381c:	2108      	movs	r1, #8
 800381e:	480d      	ldr	r0, [pc, #52]	@ (8003854 <Motor_Init+0x4c>)
 8003820:	f002 f8aa 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);  // Init PWM4 -> LPWM
 8003824:	210c      	movs	r1, #12
 8003826:	480b      	ldr	r0, [pc, #44]	@ (8003854 <Motor_Init+0x4c>)
 8003828:	f002 f8a6 	bl	8005978 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 800382c:	2100      	movs	r1, #0
 800382e:	480a      	ldr	r0, [pc, #40]	@ (8003858 <Motor_Init+0x50>)
 8003830:	f002 f8a2 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 8003834:	2104      	movs	r1, #4
 8003836:	4808      	ldr	r0, [pc, #32]	@ (8003858 <Motor_Init+0x50>)
 8003838:	f002 f89e 	bl	8005978 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);  // Init PWM1 -> RPWM
 800383c:	2100      	movs	r1, #0
 800383e:	4807      	ldr	r0, [pc, #28]	@ (800385c <Motor_Init+0x54>)
 8003840:	f002 f89a 	bl	8005978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);  // Init PWM2 -> LPWM
 8003844:	2104      	movs	r1, #4
 8003846:	4805      	ldr	r0, [pc, #20]	@ (800385c <Motor_Init+0x54>)
 8003848:	f002 f896 	bl	8005978 <HAL_TIM_PWM_Start>
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200004c0 	.word	0x200004c0
 8003854:	20000430 	.word	0x20000430
 8003858:	20000598 	.word	0x20000598
 800385c:	200005e0 	.word	0x200005e0

08003860 <Encoder_Init>:

}

// ENCODER

void Encoder_Init(void) {
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // Init Timer 1 -> mode Encoder
 8003864:	213c      	movs	r1, #60	@ 0x3c
 8003866:	4808      	ldr	r0, [pc, #32]	@ (8003888 <Encoder_Init+0x28>)
 8003868:	f002 f9f4 	bl	8005c54 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Init Timer 3 -> mode Encoder
 800386c:	213c      	movs	r1, #60	@ 0x3c
 800386e:	4807      	ldr	r0, [pc, #28]	@ (800388c <Encoder_Init+0x2c>)
 8003870:	f002 f9f0 	bl	8005c54 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Init Timer 5 -> mode Encoder
 8003874:	213c      	movs	r1, #60	@ 0x3c
 8003876:	4806      	ldr	r0, [pc, #24]	@ (8003890 <Encoder_Init+0x30>)
 8003878:	f002 f9ec 	bl	8005c54 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL); // Init Timer 8 -> mode Encoder
 800387c:	213c      	movs	r1, #60	@ 0x3c
 800387e:	4805      	ldr	r0, [pc, #20]	@ (8003894 <Encoder_Init+0x34>)
 8003880:	f002 f9e8 	bl	8005c54 <HAL_TIM_Encoder_Start>
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200003e8 	.word	0x200003e8
 800388c:	20000478 	.word	0x20000478
 8003890:	20000508 	.word	0x20000508
 8003894:	20000550 	.word	0x20000550

08003898 <Reset_Encoder1>:
int16_t Read_Encoder1(void) {
	return __HAL_TIM_GET_COUNTER(&htim1);
}
void Reset_Encoder1(void) {
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <Reset_Encoder1+0x18>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	200003e8 	.word	0x200003e8

080038b4 <Reset_Encoder2>:
int16_t Read_Encoder2(void) {
	return __HAL_TIM_GET_COUNTER(&htim3);
}
void Reset_Encoder2(void) {
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <Reset_Encoder2+0x18>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000478 	.word	0x20000478

080038d0 <Reset_Encoder3>:
int16_t Read_Encoder3(void) {
	return __HAL_TIM_GET_COUNTER(&htim5);
}
void Reset_Encoder3(void) {
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 80038d4:	4b04      	ldr	r3, [pc, #16]	@ (80038e8 <Reset_Encoder3+0x18>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000508 	.word	0x20000508

080038ec <Reset_Encoder4>:
int16_t Read_Encoder4(void) {
	return __HAL_TIM_GET_COUNTER(&htim8);
}
void Reset_Encoder4(void) {
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 80038f0:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <Reset_Encoder4+0x18>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2200      	movs	r2, #0
 80038f6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000550 	.word	0x20000550

08003908 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003910:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003914:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003920:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003924:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8003928:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00b      	beq.n	8003948 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003930:	e000      	b.n	8003934 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003932:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003934:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f9      	beq.n	8003932 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800393e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003948:	687b      	ldr	r3, [r7, #4]
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800395a:	f000 fff5 	bl	8004948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800395e:	f000 f823 	bl	80039a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003962:	f000 fbe9 	bl	8004138 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003966:	f000 f887 	bl	8003a78 <MX_TIM1_Init>
  MX_TIM2_Init();
 800396a:	f000 f8dd 	bl	8003b28 <MX_TIM2_Init>
  MX_TIM3_Init();
 800396e:	f000 f95b 	bl	8003c28 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003972:	f000 fa2f 	bl	8003dd4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8003976:	f000 fa81 	bl	8003e7c <MX_TIM8_Init>
  MX_TIM9_Init();
 800397a:	f000 fad7 	bl	8003f2c <MX_TIM9_Init>
  MX_TIM12_Init();
 800397e:	f000 fb43 	bl	8004008 <MX_TIM12_Init>
  MX_TIM4_Init();
 8003982:	f000 f9a5 	bl	8003cd0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003986:	f000 fbad 	bl	80040e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init();  // Khởi động encoder
 800398a:	f7ff ff69 	bl	8003860 <Encoder_Init>
	Motor_Init();    // Khởi động Motor
 800398e:	f7ff ff3b 	bl	8003808 <Motor_Init>
	Reset_Encoder1();
 8003992:	f7ff ff81 	bl	8003898 <Reset_Encoder1>
	Reset_Encoder2();
 8003996:	f7ff ff8d 	bl	80038b4 <Reset_Encoder2>
	Reset_Encoder3();
 800399a:	f7ff ff99 	bl	80038d0 <Reset_Encoder3>
	Reset_Encoder4();
 800399e:	f7ff ffa5 	bl	80038ec <Reset_Encoder4>

	while (1) {
    /* USER CODE END WHILE */
	//	readEncoder();

	motor();
 80039a2:	f7ff fe9b 	bl	80036dc <motor>
 80039a6:	e7fc      	b.n	80039a2 <main+0x4c>

080039a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b094      	sub	sp, #80	@ 0x50
 80039ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ae:	f107 0320 	add.w	r3, r7, #32
 80039b2:	2230      	movs	r2, #48	@ 0x30
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f005 fa82 	bl	8008ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <SystemClock_Config+0xc8>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	4a26      	ldr	r2, [pc, #152]	@ (8003a70 <SystemClock_Config+0xc8>)
 80039d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039da:	6413      	str	r3, [r2, #64]	@ 0x40
 80039dc:	4b24      	ldr	r3, [pc, #144]	@ (8003a70 <SystemClock_Config+0xc8>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039e8:	2300      	movs	r3, #0
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	4b21      	ldr	r3, [pc, #132]	@ (8003a74 <SystemClock_Config+0xcc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a20      	ldr	r2, [pc, #128]	@ (8003a74 <SystemClock_Config+0xcc>)
 80039f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <SystemClock_Config+0xcc>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a04:	2302      	movs	r3, #2
 8003a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a10:	2302      	movs	r3, #2
 8003a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a14:	2300      	movs	r3, #0
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a18:	2308      	movs	r3, #8
 8003a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003a1c:	2350      	movs	r3, #80	@ 0x50
 8003a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a20:	2302      	movs	r3, #2
 8003a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a24:	2304      	movs	r3, #4
 8003a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a28:	f107 0320 	add.w	r3, r7, #32
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 faa3 	bl	8004f78 <HAL_RCC_OscConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a38:	f000 fbec 	bl	8004214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a40:	2302      	movs	r3, #2
 8003a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a52:	f107 030c 	add.w	r3, r7, #12
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 fd05 	bl	8005468 <HAL_RCC_ClockConfig>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003a64:	f000 fbd6 	bl	8004214 <Error_Handler>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3750      	adds	r7, #80	@ 0x50
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000

08003a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	@ 0x30
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	2224      	movs	r2, #36	@ 0x24
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f005 fa1a 	bl	8008ec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a94:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003a96:	4a23      	ldr	r2, [pc, #140]	@ (8003b24 <MX_TIM1_Init+0xac>)
 8003a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003a9c:	2263      	movs	r2, #99	@ 0x63
 8003a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003aa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aae:	4b1c      	ldr	r3, [pc, #112]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4619      	mov	r1, r3
 8003aea:	480d      	ldr	r0, [pc, #52]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003aec:	f002 f80c 	bl	8005b08 <HAL_TIM_Encoder_Init>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003af6:	f000 fb8d 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4806      	ldr	r0, [pc, #24]	@ (8003b20 <MX_TIM1_Init+0xa8>)
 8003b08:	f002 fdd8 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003b12:	f000 fb7f 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	3730      	adds	r7, #48	@ 0x30
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200003e8 	.word	0x200003e8
 8003b24:	40010000 	.word	0x40010000

08003b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	@ 0x38
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b3c:	f107 0320 	add.w	r3, r7, #32
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	611a      	str	r2, [r3, #16]
 8003b54:	615a      	str	r2, [r3, #20]
 8003b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b58:	4b32      	ldr	r3, [pc, #200]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8003b60:	4b30      	ldr	r3, [pc, #192]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b62:	224f      	movs	r2, #79	@ 0x4f
 8003b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b66:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b74:	4b2b      	ldr	r3, [pc, #172]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b80:	4828      	ldr	r0, [pc, #160]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b82:	f001 fe51 	bl	8005828 <HAL_TIM_Base_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003b8c:	f000 fb42 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4821      	ldr	r0, [pc, #132]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003b9e:	f002 f9a9 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003ba8:	f000 fb34 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003bac:	481d      	ldr	r0, [pc, #116]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003bae:	f001 fe8a 	bl	80058c6 <HAL_TIM_PWM_Init>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003bb8:	f000 fb2c 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bc4:	f107 0320 	add.w	r3, r7, #32
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4816      	ldr	r0, [pc, #88]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003bcc:	f002 fd76 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003bd6:	f000 fb1d 	bl	8004214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bda:	2360      	movs	r3, #96	@ 0x60
 8003bdc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	2208      	movs	r2, #8
 8003bee:	4619      	mov	r1, r3
 8003bf0:	480c      	ldr	r0, [pc, #48]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003bf2:	f002 f8bd 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003bfc:	f000 fb0a 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	220c      	movs	r2, #12
 8003c04:	4619      	mov	r1, r3
 8003c06:	4807      	ldr	r0, [pc, #28]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003c08:	f002 f8b2 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003c12:	f000 faff 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003c16:	4803      	ldr	r0, [pc, #12]	@ (8003c24 <MX_TIM2_Init+0xfc>)
 8003c18:	f000 fc74 	bl	8004504 <HAL_TIM_MspPostInit>

}
 8003c1c:	bf00      	nop
 8003c1e:	3738      	adds	r7, #56	@ 0x38
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000430 	.word	0x20000430

08003c28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	@ 0x30
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	2224      	movs	r2, #36	@ 0x24
 8003c34:	2100      	movs	r1, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f005 f942 	bl	8008ec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c44:	4b20      	ldr	r3, [pc, #128]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c46:	4a21      	ldr	r2, [pc, #132]	@ (8003ccc <MX_TIM3_Init+0xa4>)
 8003c48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c4c:	224f      	movs	r2, #79	@ 0x4f
 8003c4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c56:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c72:	2301      	movs	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c82:	2301      	movs	r3, #1
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	4619      	mov	r1, r3
 8003c94:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003c96:	f001 ff37 	bl	8005b08 <HAL_TIM_Encoder_Init>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003ca0:	f000 fab8 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4805      	ldr	r0, [pc, #20]	@ (8003cc8 <MX_TIM3_Init+0xa0>)
 8003cb2:	f002 fd03 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003cbc:	f000 faaa 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003cc0:	bf00      	nop
 8003cc2:	3730      	adds	r7, #48	@ 0x30
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000478 	.word	0x20000478
 8003ccc:	40000400 	.word	0x40000400

08003cd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08e      	sub	sp, #56	@ 0x38
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	609a      	str	r2, [r3, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ce4:	f107 0320 	add.w	r3, r7, #32
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
 8003cfc:	615a      	str	r2, [r3, #20]
 8003cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d00:	4b32      	ldr	r3, [pc, #200]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d02:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <MX_TIM4_Init+0x100>)
 8003d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 80-1;
 8003d06:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d08:	224f      	movs	r2, #79	@ 0x4f
 8003d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003d12:	4b2e      	ldr	r3, [pc, #184]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d20:	4b2a      	ldr	r3, [pc, #168]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d26:	4829      	ldr	r0, [pc, #164]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d28:	f001 fd7e 	bl	8005828 <HAL_TIM_Base_Init>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003d32:	f000 fa6f 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d40:	4619      	mov	r1, r3
 8003d42:	4822      	ldr	r0, [pc, #136]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d44:	f002 f8d6 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003d4e:	f000 fa61 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d52:	481e      	ldr	r0, [pc, #120]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d54:	f001 fdb7 	bl	80058c6 <HAL_TIM_PWM_Init>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003d5e:	f000 fa59 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d6a:	f107 0320 	add.w	r3, r7, #32
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4816      	ldr	r0, [pc, #88]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d72:	f002 fca3 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003d7c:	f000 fa4a 	bl	8004214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d80:	2360      	movs	r3, #96	@ 0x60
 8003d82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	2208      	movs	r2, #8
 8003d94:	4619      	mov	r1, r3
 8003d96:	480d      	ldr	r0, [pc, #52]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003d98:	f001 ffea 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003da2:	f000 fa37 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	220c      	movs	r2, #12
 8003daa:	4619      	mov	r1, r3
 8003dac:	4807      	ldr	r0, [pc, #28]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003dae:	f001 ffdf 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003db8:	f000 fa2c 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003dbc:	4803      	ldr	r0, [pc, #12]	@ (8003dcc <MX_TIM4_Init+0xfc>)
 8003dbe:	f000 fba1 	bl	8004504 <HAL_TIM_MspPostInit>

}
 8003dc2:	bf00      	nop
 8003dc4:	3738      	adds	r7, #56	@ 0x38
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200004c0 	.word	0x200004c0
 8003dd0:	40000800 	.word	0x40000800

08003dd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	@ 0x30
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	2224      	movs	r2, #36	@ 0x24
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 f86c 	bl	8008ec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003df0:	4b20      	ldr	r3, [pc, #128]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003df2:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <MX_TIM5_Init+0xa4>)
 8003df4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8003df6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003df8:	224f      	movs	r2, #79	@ 0x4f
 8003dfa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8003e02:	4b1c      	ldr	r3, [pc, #112]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e10:	4b18      	ldr	r3, [pc, #96]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e16:	2303      	movs	r3, #3
 8003e18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	4619      	mov	r1, r3
 8003e40:	480c      	ldr	r0, [pc, #48]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003e42:	f001 fe61 	bl	8005b08 <HAL_TIM_Encoder_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003e4c:	f000 f9e2 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4805      	ldr	r0, [pc, #20]	@ (8003e74 <MX_TIM5_Init+0xa0>)
 8003e5e:	f002 fc2d 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003e68:	f000 f9d4 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e6c:	bf00      	nop
 8003e6e:	3730      	adds	r7, #48	@ 0x30
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000508 	.word	0x20000508
 8003e78:	40000c00 	.word	0x40000c00

08003e7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	@ 0x30
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	2224      	movs	r2, #36	@ 0x24
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f005 f818 	bl	8008ec0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e98:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003e9a:	4a23      	ldr	r2, [pc, #140]	@ (8003f28 <MX_TIM8_Init+0xac>)
 8003e9c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 80-1;
 8003e9e:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003ea0:	224f      	movs	r2, #79	@ 0x4f
 8003ea2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003eac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eb0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ebe:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003edc:	2301      	movs	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003ee8:	f107 030c 	add.w	r3, r7, #12
 8003eec:	4619      	mov	r1, r3
 8003eee:	480d      	ldr	r0, [pc, #52]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003ef0:	f001 fe0a 	bl	8005b08 <HAL_TIM_Encoder_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003efa:	f000 f98b 	bl	8004214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4806      	ldr	r0, [pc, #24]	@ (8003f24 <MX_TIM8_Init+0xa8>)
 8003f0c:	f002 fbd6 	bl	80066bc <HAL_TIMEx_MasterConfigSynchronization>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003f16:	f000 f97d 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f1a:	bf00      	nop
 8003f1c:	3730      	adds	r7, #48	@ 0x30
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000550 	.word	0x20000550
 8003f28:	40010400 	.word	0x40010400

08003f2c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08c      	sub	sp, #48	@ 0x30
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f32:	f107 0320 	add.w	r3, r7, #32
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f40:	1d3b      	adds	r3, r7, #4
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	611a      	str	r2, [r3, #16]
 8003f4e:	615a      	str	r2, [r3, #20]
 8003f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003f52:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f54:	4a2b      	ldr	r2, [pc, #172]	@ (8004004 <MX_TIM9_Init+0xd8>)
 8003f56:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 80-1;
 8003f58:	4b29      	ldr	r3, [pc, #164]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f5a:	224f      	movs	r2, #79	@ 0x4f
 8003f5c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8003f64:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f6a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f6c:	4b24      	ldr	r3, [pc, #144]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f72:	4b23      	ldr	r3, [pc, #140]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003f78:	4821      	ldr	r0, [pc, #132]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f7a:	f001 fc55 	bl	8005828 <HAL_TIM_Base_Init>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8003f84:	f000 f946 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003f8e:	f107 0320 	add.w	r3, r7, #32
 8003f92:	4619      	mov	r1, r3
 8003f94:	481a      	ldr	r0, [pc, #104]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003f96:	f001 ffad 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8003fa0:	f000 f938 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003fa4:	4816      	ldr	r0, [pc, #88]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003fa6:	f001 fc8e 	bl	80058c6 <HAL_TIM_PWM_Init>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8003fb0:	f000 f930 	bl	8004214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fb4:	2360      	movs	r3, #96	@ 0x60
 8003fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	4619      	mov	r1, r3
 8003fca:	480d      	ldr	r0, [pc, #52]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003fcc:	f001 fed0 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8003fd6:	f000 f91d 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	2204      	movs	r2, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4807      	ldr	r0, [pc, #28]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003fe2:	f001 fec5 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 8003fec:	f000 f912 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003ff0:	4803      	ldr	r0, [pc, #12]	@ (8004000 <MX_TIM9_Init+0xd4>)
 8003ff2:	f000 fa87 	bl	8004504 <HAL_TIM_MspPostInit>

}
 8003ff6:	bf00      	nop
 8003ff8:	3730      	adds	r7, #48	@ 0x30
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000598 	.word	0x20000598
 8004004:	40014000 	.word	0x40014000

08004008 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400e:	f107 0320 	add.w	r3, r7, #32
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800401c:	1d3b      	adds	r3, r7, #4
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	60da      	str	r2, [r3, #12]
 8004028:	611a      	str	r2, [r3, #16]
 800402a:	615a      	str	r2, [r3, #20]
 800402c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800402e:	4b2b      	ldr	r3, [pc, #172]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004030:	4a2b      	ldr	r2, [pc, #172]	@ (80040e0 <MX_TIM12_Init+0xd8>)
 8004032:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 80-1;
 8004034:	4b29      	ldr	r3, [pc, #164]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004036:	224f      	movs	r2, #79	@ 0x4f
 8004038:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403a:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <MX_TIM12_Init+0xd4>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8004040:	4b26      	ldr	r3, [pc, #152]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004042:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004046:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004048:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <MX_TIM12_Init+0xd4>)
 800404a:	2200      	movs	r2, #0
 800404c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004054:	4821      	ldr	r0, [pc, #132]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004056:	f001 fbe7 	bl	8005828 <HAL_TIM_Base_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8004060:	f000 f8d8 	bl	8004214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004064:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004068:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800406a:	f107 0320 	add.w	r3, r7, #32
 800406e:	4619      	mov	r1, r3
 8004070:	481a      	ldr	r0, [pc, #104]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004072:	f001 ff3f 	bl	8005ef4 <HAL_TIM_ConfigClockSource>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800407c:	f000 f8ca 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004080:	4816      	ldr	r0, [pc, #88]	@ (80040dc <MX_TIM12_Init+0xd4>)
 8004082:	f001 fc20 	bl	80058c6 <HAL_TIM_PWM_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800408c:	f000 f8c2 	bl	8004214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004090:	2360      	movs	r3, #96	@ 0x60
 8004092:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	2200      	movs	r2, #0
 80040a4:	4619      	mov	r1, r3
 80040a6:	480d      	ldr	r0, [pc, #52]	@ (80040dc <MX_TIM12_Init+0xd4>)
 80040a8:	f001 fe62 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80040b2:	f000 f8af 	bl	8004214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2204      	movs	r2, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4807      	ldr	r0, [pc, #28]	@ (80040dc <MX_TIM12_Init+0xd4>)
 80040be:	f001 fe57 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 80040c8:	f000 f8a4 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80040cc:	4803      	ldr	r0, [pc, #12]	@ (80040dc <MX_TIM12_Init+0xd4>)
 80040ce:	f000 fa19 	bl	8004504 <HAL_TIM_MspPostInit>

}
 80040d2:	bf00      	nop
 80040d4:	3730      	adds	r7, #48	@ 0x30
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200005e0 	.word	0x200005e0
 80040e0:	40001800 	.word	0x40001800

080040e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 80040ea:	4a12      	ldr	r2, [pc, #72]	@ (8004134 <MX_USART2_UART_Init+0x50>)
 80040ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 80040f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 8004104:	2200      	movs	r2, #0
 8004106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004108:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 800410a:	220c      	movs	r2, #12
 800410c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 8004110:	2200      	movs	r2, #0
 8004112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800411a:	4805      	ldr	r0, [pc, #20]	@ (8004130 <MX_USART2_UART_Init+0x4c>)
 800411c:	f002 fb4a 	bl	80067b4 <HAL_UART_Init>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004126:	f000 f875 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000628 	.word	0x20000628
 8004134:	40004400 	.word	0x40004400

08004138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	4b25      	ldr	r3, [pc, #148]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	4a24      	ldr	r2, [pc, #144]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004148:	f043 0310 	orr.w	r3, r3, #16
 800414c:	6313      	str	r3, [r2, #48]	@ 0x30
 800414e:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6313      	str	r3, [r2, #48]	@ 0x30
 800416a:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	6313      	str	r3, [r2, #48]	@ 0x30
 8004186:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	4a0f      	ldr	r2, [pc, #60]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <MX_GPIO_Init+0xa0>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]

	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e009      	b.n	8004202 <_write+0x26>
		ITM_SendChar(*ptr++);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	60ba      	str	r2, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fb86 	bl	8003908 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	dbf1      	blt.n	80041ee <_write+0x12>
	}
	return len;
 800420a:	687b      	ldr	r3, [r7, #4]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004218:	b672      	cpsid	i
}
 800421a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <Error_Handler+0x8>

08004220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <HAL_MspInit+0x4c>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	4a0f      	ldr	r2, [pc, #60]	@ (800426c <HAL_MspInit+0x4c>)
 8004230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004234:	6453      	str	r3, [r2, #68]	@ 0x44
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <HAL_MspInit+0x4c>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4b09      	ldr	r3, [pc, #36]	@ (800426c <HAL_MspInit+0x4c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	4a08      	ldr	r2, [pc, #32]	@ (800426c <HAL_MspInit+0x4c>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	@ 0x40
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_MspInit+0x4c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800

08004270 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b090      	sub	sp, #64	@ 0x40
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a64      	ldr	r2, [pc, #400]	@ (8004420 <HAL_TIM_Encoder_MspInit+0x1b0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12d      	bne.n	80042ee <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004296:	4b63      	ldr	r3, [pc, #396]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	4a62      	ldr	r2, [pc, #392]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042a2:	4b60      	ldr	r3, [pc, #384]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042b8:	f043 0310 	orr.w	r3, r3, #16
 80042bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042be:	4b59      	ldr	r3, [pc, #356]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80042ca:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80042ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	2302      	movs	r3, #2
 80042d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d4:	2301      	movs	r3, #1
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d8:	2300      	movs	r3, #0
 80042da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042dc:	2301      	movs	r3, #1
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042e4:	4619      	mov	r1, r3
 80042e6:	4850      	ldr	r0, [pc, #320]	@ (8004428 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80042e8:	f000 fcaa 	bl	8004c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80042ec:	e094      	b.n	8004418 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4e      	ldr	r2, [pc, #312]	@ (800442c <HAL_TIM_Encoder_MspInit+0x1bc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d12c      	bne.n	8004352 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042f8:	2300      	movs	r3, #0
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	4a48      	ldr	r2, [pc, #288]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004302:	f043 0302 	orr.w	r3, r3, #2
 8004306:	6413      	str	r3, [r2, #64]	@ 0x40
 8004308:	4b46      	ldr	r3, [pc, #280]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	4b42      	ldr	r3, [pc, #264]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	4a41      	ldr	r2, [pc, #260]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6313      	str	r3, [r2, #48]	@ 0x30
 8004324:	4b3f      	ldr	r3, [pc, #252]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004330:	23c0      	movs	r3, #192	@ 0xc0
 8004332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004334:	2302      	movs	r3, #2
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433c:	2300      	movs	r3, #0
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004340:	2302      	movs	r3, #2
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004348:	4619      	mov	r1, r3
 800434a:	4839      	ldr	r0, [pc, #228]	@ (8004430 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800434c:	f000 fc78 	bl	8004c40 <HAL_GPIO_Init>
}
 8004350:	e062      	b.n	8004418 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a37      	ldr	r2, [pc, #220]	@ (8004434 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d12c      	bne.n	80043b6 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
 8004360:	4b30      	ldr	r3, [pc, #192]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	4a2f      	ldr	r2, [pc, #188]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004366:	f043 0308 	orr.w	r3, r3, #8
 800436a:	6413      	str	r3, [r2, #64]	@ 0x40
 800436c:	4b2d      	ldr	r3, [pc, #180]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
 800437c:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	4a28      	ldr	r2, [pc, #160]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6313      	str	r3, [r2, #48]	@ 0x30
 8004388:	4b26      	ldr	r3, [pc, #152]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004394:	2303      	movs	r3, #3
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004398:	2302      	movs	r3, #2
 800439a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439c:	2300      	movs	r3, #0
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a0:	2300      	movs	r3, #0
 80043a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80043a4:	2302      	movs	r3, #2
 80043a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043ac:	4619      	mov	r1, r3
 80043ae:	4820      	ldr	r0, [pc, #128]	@ (8004430 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80043b0:	f000 fc46 	bl	8004c40 <HAL_GPIO_Init>
}
 80043b4:	e030      	b.n	8004418 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d12b      	bne.n	8004418 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c8:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043ca:	f043 0302 	orr.w	r3, r3, #2
 80043ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80043d0:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043f8:	23c0      	movs	r3, #192	@ 0xc0
 80043fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fc:	2302      	movs	r3, #2
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004400:	2300      	movs	r3, #0
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004404:	2300      	movs	r3, #0
 8004406:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004408:	2303      	movs	r3, #3
 800440a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800440c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004410:	4619      	mov	r1, r3
 8004412:	480a      	ldr	r0, [pc, #40]	@ (800443c <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004414:	f000 fc14 	bl	8004c40 <HAL_GPIO_Init>
}
 8004418:	bf00      	nop
 800441a:	3740      	adds	r7, #64	@ 0x40
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40010000 	.word	0x40010000
 8004424:	40023800 	.word	0x40023800
 8004428:	40021000 	.word	0x40021000
 800442c:	40000400 	.word	0x40000400
 8004430:	40020000 	.word	0x40020000
 8004434:	40000c00 	.word	0x40000c00
 8004438:	40010400 	.word	0x40010400
 800443c:	40020800 	.word	0x40020800

08004440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	4b27      	ldr	r3, [pc, #156]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445a:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6413      	str	r3, [r2, #64]	@ 0x40
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800446e:	e03a      	b.n	80044e6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a20      	ldr	r2, [pc, #128]	@ (80044f8 <HAL_TIM_Base_MspInit+0xb8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	6413      	str	r3, [r2, #64]	@ 0x40
 800448a:	4b1a      	ldr	r3, [pc, #104]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
}
 8004496:	e026      	b.n	80044e6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a17      	ldr	r2, [pc, #92]	@ (80044fc <HAL_TIM_Base_MspInit+0xbc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	4a12      	ldr	r2, [pc, #72]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044b2:	4b10      	ldr	r3, [pc, #64]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	e012      	b.n	80044e6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM12)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004500 <HAL_TIM_Base_MspInit+0xc0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d10d      	bne.n	80044e6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 80044d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_TIM_Base_MspInit+0xb4>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
}
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40014000 	.word	0x40014000
 8004500:	40001800 	.word	0x40001800

08004504 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 031c 	add.w	r3, r7, #28
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004524:	d11f      	bne.n	8004566 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	4b47      	ldr	r3, [pc, #284]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	4a46      	ldr	r2, [pc, #280]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	6313      	str	r3, [r2, #48]	@ 0x30
 8004536:	4b44      	ldr	r3, [pc, #272]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004542:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004554:	2301      	movs	r3, #1
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004558:	f107 031c 	add.w	r3, r7, #28
 800455c:	4619      	mov	r1, r3
 800455e:	483b      	ldr	r0, [pc, #236]	@ (800464c <HAL_TIM_MspPostInit+0x148>)
 8004560:	f000 fb6e 	bl	8004c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004564:	e06c      	b.n	8004640 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a39      	ldr	r2, [pc, #228]	@ (8004650 <HAL_TIM_MspPostInit+0x14c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d11f      	bne.n	80045b0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004578:	4a33      	ldr	r2, [pc, #204]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004580:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800458c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800459e:	2302      	movs	r3, #2
 80045a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045a2:	f107 031c 	add.w	r3, r7, #28
 80045a6:	4619      	mov	r1, r3
 80045a8:	482a      	ldr	r0, [pc, #168]	@ (8004654 <HAL_TIM_MspPostInit+0x150>)
 80045aa:	f000 fb49 	bl	8004c40 <HAL_GPIO_Init>
}
 80045ae:	e047      	b.n	8004640 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a28      	ldr	r2, [pc, #160]	@ (8004658 <HAL_TIM_MspPostInit+0x154>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d11e      	bne.n	80045f8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	4b22      	ldr	r3, [pc, #136]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	4a21      	ldr	r2, [pc, #132]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 80045c4:	f043 0310 	orr.w	r3, r3, #16
 80045c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80045d6:	2360      	movs	r3, #96	@ 0x60
 80045d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80045e6:	2303      	movs	r3, #3
 80045e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045ea:	f107 031c 	add.w	r3, r7, #28
 80045ee:	4619      	mov	r1, r3
 80045f0:	481a      	ldr	r0, [pc, #104]	@ (800465c <HAL_TIM_MspPostInit+0x158>)
 80045f2:	f000 fb25 	bl	8004c40 <HAL_GPIO_Init>
}
 80045f6:	e023      	b.n	8004640 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <HAL_TIM_MspPostInit+0x15c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d11e      	bne.n	8004640 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	4a0f      	ldr	r2, [pc, #60]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	6313      	str	r3, [r2, #48]	@ 0x30
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <HAL_TIM_MspPostInit+0x144>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800461e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	2302      	movs	r3, #2
 8004626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004628:	2301      	movs	r3, #1
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462c:	2300      	movs	r3, #0
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004630:	2309      	movs	r3, #9
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004634:	f107 031c 	add.w	r3, r7, #28
 8004638:	4619      	mov	r1, r3
 800463a:	4804      	ldr	r0, [pc, #16]	@ (800464c <HAL_TIM_MspPostInit+0x148>)
 800463c:	f000 fb00 	bl	8004c40 <HAL_GPIO_Init>
}
 8004640:	bf00      	nop
 8004642:	3730      	adds	r7, #48	@ 0x30
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	40020400 	.word	0x40020400
 8004650:	40000800 	.word	0x40000800
 8004654:	40020c00 	.word	0x40020c00
 8004658:	40014000 	.word	0x40014000
 800465c:	40021000 	.word	0x40021000
 8004660:	40001800 	.word	0x40001800

08004664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	@ 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <HAL_UART_MspInit+0x84>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d12b      	bne.n	80046de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	4b18      	ldr	r3, [pc, #96]	@ (80046ec <HAL_UART_MspInit+0x88>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	4a17      	ldr	r2, [pc, #92]	@ (80046ec <HAL_UART_MspInit+0x88>)
 8004690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004694:	6413      	str	r3, [r2, #64]	@ 0x40
 8004696:	4b15      	ldr	r3, [pc, #84]	@ (80046ec <HAL_UART_MspInit+0x88>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_UART_MspInit+0x88>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	4a10      	ldr	r2, [pc, #64]	@ (80046ec <HAL_UART_MspInit+0x88>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046b2:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <HAL_UART_MspInit+0x88>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80046be:	230c      	movs	r3, #12
 80046c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ca:	2303      	movs	r3, #3
 80046cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046ce:	2307      	movs	r3, #7
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d2:	f107 0314 	add.w	r3, r7, #20
 80046d6:	4619      	mov	r1, r3
 80046d8:	4805      	ldr	r0, [pc, #20]	@ (80046f0 <HAL_UART_MspInit+0x8c>)
 80046da:	f000 fab1 	bl	8004c40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	@ 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40004400 	.word	0x40004400
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40020000 	.word	0x40020000

080046f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <NMI_Handler+0x4>

080046fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004700:	bf00      	nop
 8004702:	e7fd      	b.n	8004700 <HardFault_Handler+0x4>

08004704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <MemManage_Handler+0x4>

0800470c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <BusFault_Handler+0x4>

08004714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <UsageFault_Handler+0x4>

0800471c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800472a:	b480      	push	{r7}
 800472c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800474c:	f000 f94e 	bl	80049ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  custom_tick++; // Increment your custom tick counter
 8004750:	4b03      	ldr	r3, [pc, #12]	@ (8004760 <SysTick_Handler+0x18>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	4a02      	ldr	r2, [pc, #8]	@ (8004760 <SysTick_Handler+0x18>)
 8004758:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000670 	.word	0x20000670

08004764 <get_custom_tick>:
/* USER CODE BEGIN 1 */
void reset_custom_tick(void) {
    custom_tick = 0; // Reset your custom tick counter
}

uint32_t get_custom_tick(void) {
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
    return custom_tick; // Return the current value of your custom tick counter
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <get_custom_tick+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000670 	.word	0x20000670

0800477c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return 1;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_kill>:

int _kill(int pid, int sig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004796:	f004 fc69 	bl	800906c <__errno>
 800479a:	4603      	mov	r3, r0
 800479c:	2216      	movs	r2, #22
 800479e:	601a      	str	r2, [r3, #0]
  return -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_exit>:

void _exit (int status)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ffe7 	bl	800478c <_kill>
  while (1) {}    /* Make sure we hang here */
 80047be:	bf00      	nop
 80047c0:	e7fd      	b.n	80047be <_exit+0x12>

080047c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e00a      	b.n	80047ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047d4:	f3af 8000 	nop.w
 80047d8:	4601      	mov	r1, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	60ba      	str	r2, [r7, #8]
 80047e0:	b2ca      	uxtb	r2, r1
 80047e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	dbf0      	blt.n	80047d4 <_read+0x12>
  }

  return len;
 80047f2:	687b      	ldr	r3, [r7, #4]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004824:	605a      	str	r2, [r3, #4]
  return 0;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <_isatty>:

int _isatty(int file)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800483c:	2301      	movs	r3, #1
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800484a:	b480      	push	{r7}
 800484c:	b085      	sub	sp, #20
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800486c:	4a14      	ldr	r2, [pc, #80]	@ (80048c0 <_sbrk+0x5c>)
 800486e:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <_sbrk+0x60>)
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004878:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <_sbrk+0x64>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <_sbrk+0x64>)
 8004882:	4a12      	ldr	r2, [pc, #72]	@ (80048cc <_sbrk+0x68>)
 8004884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <_sbrk+0x64>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	429a      	cmp	r2, r3
 8004892:	d207      	bcs.n	80048a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004894:	f004 fbea 	bl	800906c <__errno>
 8004898:	4603      	mov	r3, r0
 800489a:	220c      	movs	r2, #12
 800489c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e009      	b.n	80048b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048a4:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <_sbrk+0x64>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <_sbrk+0x64>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	4a05      	ldr	r2, [pc, #20]	@ (80048c8 <_sbrk+0x64>)
 80048b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20020000 	.word	0x20020000
 80048c4:	00000400 	.word	0x00000400
 80048c8:	20000674 	.word	0x20000674
 80048cc:	200007c8 	.word	0x200007c8

080048d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <SystemInit+0x20>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	4a05      	ldr	r2, [pc, #20]	@ (80048f0 <SystemInit+0x20>)
 80048dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000ed00 	.word	0xe000ed00

080048f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800492c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80048f8:	f7ff ffea 	bl	80048d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048fc:	480c      	ldr	r0, [pc, #48]	@ (8004930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048fe:	490d      	ldr	r1, [pc, #52]	@ (8004934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004900:	4a0d      	ldr	r2, [pc, #52]	@ (8004938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004904:	e002      	b.n	800490c <LoopCopyDataInit>

08004906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800490a:	3304      	adds	r3, #4

0800490c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800490c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800490e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004910:	d3f9      	bcc.n	8004906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004914:	4c0a      	ldr	r4, [pc, #40]	@ (8004940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004918:	e001      	b.n	800491e <LoopFillZerobss>

0800491a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800491a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800491c:	3204      	adds	r2, #4

0800491e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800491e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004920:	d3fb      	bcc.n	800491a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004922:	f004 fba9 	bl	8009078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004926:	f7ff f816 	bl	8003956 <main>
  bx  lr    
 800492a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800492c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004934:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8004938:	0800c09c 	.word	0x0800c09c
  ldr r2, =_sbss
 800493c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004940:	200007c8 	.word	0x200007c8

08004944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004944:	e7fe      	b.n	8004944 <ADC_IRQHandler>
	...

08004948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800494c:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <HAL_Init+0x40>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_Init+0x40>)
 8004952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_Init+0x40>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <HAL_Init+0x40>)
 800495e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004964:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <HAL_Init+0x40>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a07      	ldr	r2, [pc, #28]	@ (8004988 <HAL_Init+0x40>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004970:	2003      	movs	r0, #3
 8004972:	f000 f931 	bl	8004bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004976:	200f      	movs	r0, #15
 8004978:	f000 f808 	bl	800498c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800497c:	f7ff fc50 	bl	8004220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023c00 	.word	0x40023c00

0800498c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004994:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <HAL_InitTick+0x54>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <HAL_InitTick+0x58>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f93b 	bl	8004c26 <HAL_SYSTICK_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e00e      	b.n	80049d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d80a      	bhi.n	80049d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049c0:	2200      	movs	r2, #0
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	f000 f911 	bl	8004bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049cc:	4a06      	ldr	r2, [pc, #24]	@ (80049e8 <HAL_InitTick+0x5c>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000080 	.word	0x20000080
 80049e4:	20000088 	.word	0x20000088
 80049e8:	20000084 	.word	0x20000084

080049ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_IncTick+0x20>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_IncTick+0x24>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <HAL_IncTick+0x24>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000088 	.word	0x20000088
 8004a10:	20000678 	.word	0x20000678

08004a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return uwTick;
 8004a18:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <HAL_GetTick+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000678 	.word	0x20000678

08004a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7ff ffee 	bl	8004a14 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d005      	beq.n	8004a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a46:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <HAL_Delay+0x44>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a52:	bf00      	nop
 8004a54:	f7ff ffde 	bl	8004a14 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d8f7      	bhi.n	8004a54 <HAL_Delay+0x28>
  {
  }
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000088 	.word	0x20000088

08004a74 <__NVIC_SetPriorityGrouping>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_GetPriorityGrouping>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0307 	and.w	r3, r3, #7
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_SetPriority>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <SysTick_Config>:
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba4:	d301      	bcc.n	8004baa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00f      	b.n	8004bca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004baa:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f7ff ff8e 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bc2:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	e000e010 	.word	0xe000e010

08004bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff47 	bl	8004a74 <__NVIC_SetPriorityGrouping>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c00:	f7ff ff5c 	bl	8004abc <__NVIC_GetPriorityGrouping>
 8004c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	6978      	ldr	r0, [r7, #20]
 8004c0c:	f7ff ff8e 	bl	8004b2c <NVIC_EncodePriority>
 8004c10:	4602      	mov	r2, r0
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff5d 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ffb0 	bl	8004b94 <SysTick_Config>
 8004c34:	4603      	mov	r3, r0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e16b      	b.n	8004f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	f040 815a 	bne.w	8004f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d005      	beq.n	8004c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d130      	bne.n	8004cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0201 	and.w	r2, r3, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d017      	beq.n	8004d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d123      	bne.n	8004d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	08da      	lsrs	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3208      	adds	r2, #8
 8004d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	220f      	movs	r2, #15
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	69b9      	ldr	r1, [r7, #24]
 8004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0203 	and.w	r2, r3, #3
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80b4 	beq.w	8004f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	4b60      	ldr	r3, [pc, #384]	@ (8004f4c <HAL_GPIO_Init+0x30c>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	4a5f      	ldr	r2, [pc, #380]	@ (8004f4c <HAL_GPIO_Init+0x30c>)
 8004dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f4c <HAL_GPIO_Init+0x30c>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004de2:	4a5b      	ldr	r2, [pc, #364]	@ (8004f50 <HAL_GPIO_Init+0x310>)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	3302      	adds	r3, #2
 8004dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	220f      	movs	r2, #15
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a52      	ldr	r2, [pc, #328]	@ (8004f54 <HAL_GPIO_Init+0x314>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02b      	beq.n	8004e66 <HAL_GPIO_Init+0x226>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a51      	ldr	r2, [pc, #324]	@ (8004f58 <HAL_GPIO_Init+0x318>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d025      	beq.n	8004e62 <HAL_GPIO_Init+0x222>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a50      	ldr	r2, [pc, #320]	@ (8004f5c <HAL_GPIO_Init+0x31c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <HAL_GPIO_Init+0x21e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a4f      	ldr	r2, [pc, #316]	@ (8004f60 <HAL_GPIO_Init+0x320>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x21a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a4e      	ldr	r2, [pc, #312]	@ (8004f64 <HAL_GPIO_Init+0x324>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x216>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a4d      	ldr	r2, [pc, #308]	@ (8004f68 <HAL_GPIO_Init+0x328>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x212>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a4c      	ldr	r2, [pc, #304]	@ (8004f6c <HAL_GPIO_Init+0x32c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x20e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a4b      	ldr	r2, [pc, #300]	@ (8004f70 <HAL_GPIO_Init+0x330>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x20a>
 8004e46:	2307      	movs	r3, #7
 8004e48:	e00e      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	e00c      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e4e:	2306      	movs	r3, #6
 8004e50:	e00a      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e52:	2305      	movs	r3, #5
 8004e54:	e008      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e56:	2304      	movs	r3, #4
 8004e58:	e006      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e004      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e66:	2300      	movs	r3, #0
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f002 0203 	and.w	r2, r2, #3
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	4093      	lsls	r3, r2
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e78:	4935      	ldr	r1, [pc, #212]	@ (8004f50 <HAL_GPIO_Init+0x310>)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eaa:	4a32      	ldr	r2, [pc, #200]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb0:	4b30      	ldr	r3, [pc, #192]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed4:	4a27      	ldr	r2, [pc, #156]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eda:	4b26      	ldr	r3, [pc, #152]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004efe:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f28:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	f67f ae90 	bls.w	8004c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	@ 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40013800 	.word	0x40013800
 8004f54:	40020000 	.word	0x40020000
 8004f58:	40020400 	.word	0x40020400
 8004f5c:	40020800 	.word	0x40020800
 8004f60:	40020c00 	.word	0x40020c00
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40021400 	.word	0x40021400
 8004f6c:	40021800 	.word	0x40021800
 8004f70:	40021c00 	.word	0x40021c00
 8004f74:	40013c00 	.word	0x40013c00

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e267      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d075      	beq.n	8005082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f96:	4b88      	ldr	r3, [pc, #544]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa2:	4b85      	ldr	r3, [pc, #532]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d112      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b82      	ldr	r3, [pc, #520]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05b      	beq.n	8005080 <HAL_RCC_OscConfig+0x108>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d157      	bne.n	8005080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e242      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x74>
 8004fde:	4b76      	ldr	r3, [pc, #472]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a75      	ldr	r2, [pc, #468]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e01d      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x98>
 8004ff6:	4b70      	ldr	r3, [pc, #448]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b6d      	ldr	r3, [pc, #436]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6c      	ldr	r2, [pc, #432]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e00b      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8005010:	4b69      	ldr	r3, [pc, #420]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a68      	ldr	r2, [pc, #416]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a65      	ldr	r2, [pc, #404]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005030:	f7ff fcf0 	bl	8004a14 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7ff fcec 	bl	8004a14 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e207      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b5b      	ldr	r3, [pc, #364]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0xc0>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7ff fcdc 	bl	8004a14 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005060:	f7ff fcd8 	bl	8004a14 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	@ 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1f3      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	4b51      	ldr	r3, [pc, #324]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0xe8>
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d063      	beq.n	8005156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800508e:	4b4a      	ldr	r3, [pc, #296]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509a:	4b47      	ldr	r3, [pc, #284]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d11c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a6:	4b44      	ldr	r3, [pc, #272]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d116      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e1c7      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	4b3b      	ldr	r3, [pc, #236]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4937      	ldr	r1, [pc, #220]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	e03a      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e8:	4b34      	ldr	r3, [pc, #208]	@ (80051bc <HAL_RCC_OscConfig+0x244>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7ff fc91 	bl	8004a14 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f6:	f7ff fc8d 	bl	8004a14 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e1a8      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005114:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4925      	ldr	r1, [pc, #148]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	e015      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512a:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <HAL_RCC_OscConfig+0x244>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7ff fc70 	bl	8004a14 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005138:	f7ff fc6c 	bl	8004a14 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e187      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d036      	beq.n	80051d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <HAL_RCC_OscConfig+0x248>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7ff fc50 	bl	8004a14 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005178:	f7ff fc4c 	bl	8004a14 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e167      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800518c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x200>
 8005196:	e01b      	b.n	80051d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x248>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519e:	f7ff fc39 	bl	8004a14 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a4:	e00e      	b.n	80051c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7ff fc35 	bl	8004a14 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d907      	bls.n	80051c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e150      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
 80051b8:	40023800 	.word	0x40023800
 80051bc:	42470000 	.word	0x42470000
 80051c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1ea      	bne.n	80051a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8097 	beq.w	800530c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e2:	4b81      	ldr	r3, [pc, #516]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10f      	bne.n	800520e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	4b7d      	ldr	r3, [pc, #500]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a7c      	ldr	r2, [pc, #496]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051fe:	4b7a      	ldr	r3, [pc, #488]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520e:	4b77      	ldr	r3, [pc, #476]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d118      	bne.n	800524c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521a:	4b74      	ldr	r3, [pc, #464]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a73      	ldr	r2, [pc, #460]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005226:	f7ff fbf5 	bl	8004a14 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7ff fbf1 	bl	8004a14 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e10c      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	4b6a      	ldr	r3, [pc, #424]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d106      	bne.n	8005262 <HAL_RCC_OscConfig+0x2ea>
 8005254:	4b64      	ldr	r3, [pc, #400]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005258:	4a63      	ldr	r2, [pc, #396]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005260:	e01c      	b.n	800529c <HAL_RCC_OscConfig+0x324>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b05      	cmp	r3, #5
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x30c>
 800526a:	4b5f      	ldr	r3, [pc, #380]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526e:	4a5e      	ldr	r2, [pc, #376]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	6713      	str	r3, [r2, #112]	@ 0x70
 8005276:	4b5c      	ldr	r3, [pc, #368]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	4a5b      	ldr	r2, [pc, #364]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	6713      	str	r3, [r2, #112]	@ 0x70
 8005282:	e00b      	b.n	800529c <HAL_RCC_OscConfig+0x324>
 8005284:	4b58      	ldr	r3, [pc, #352]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005288:	4a57      	ldr	r2, [pc, #348]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005290:	4b55      	ldr	r3, [pc, #340]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	4a54      	ldr	r2, [pc, #336]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7ff fbb6 	bl	8004a14 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7ff fbb2 	bl	8004a14 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0cb      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c2:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0ee      	beq.n	80052ac <HAL_RCC_OscConfig+0x334>
 80052ce:	e014      	b.n	80052fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d0:	f7ff fba0 	bl	8004a14 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d8:	f7ff fb9c 	bl	8004a14 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0b5      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ee:	4b3e      	ldr	r3, [pc, #248]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1ee      	bne.n	80052d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005300:	4b39      	ldr	r3, [pc, #228]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	4a38      	ldr	r2, [pc, #224]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80a1 	beq.w	8005458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005316:	4b34      	ldr	r3, [pc, #208]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b08      	cmp	r3, #8
 8005320:	d05c      	beq.n	80053dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d141      	bne.n	80053ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532a:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7ff fb70 	bl	8004a14 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005338:	f7ff fb6c 	bl	8004a14 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e087      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	4b27      	ldr	r3, [pc, #156]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	019b      	lsls	r3, r3, #6
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	491b      	ldr	r1, [pc, #108]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005380:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7ff fb45 	bl	8004a14 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538e:	f7ff fb41 	bl	8004a14 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e05c      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x416>
 80053ac:	e054      	b.n	8005458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b10      	ldr	r3, [pc, #64]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7ff fb2e 	bl	8004a14 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7ff fb2a 	bl	8004a14 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e045      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x444>
 80053da:	e03d      	b.n	8005458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e038      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40007000 	.word	0x40007000
 80053f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <HAL_RCC_OscConfig+0x4ec>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d028      	beq.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d121      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d11a      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800542a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800542c:	4293      	cmp	r3, r2
 800542e:	d111      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	3b01      	subs	r3, #1
 800543e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800

08005468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0cc      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b68      	ldr	r3, [pc, #416]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d90c      	bls.n	80054a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b65      	ldr	r3, [pc, #404]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b63      	ldr	r3, [pc, #396]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0b8      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054bc:	4b59      	ldr	r3, [pc, #356]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a58      	ldr	r2, [pc, #352]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d4:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4a52      	ldr	r2, [pc, #328]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b50      	ldr	r3, [pc, #320]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	494d      	ldr	r1, [pc, #308]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d044      	beq.n	8005588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b47      	ldr	r3, [pc, #284]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d119      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e07f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d003      	beq.n	8005526 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005522:	2b03      	cmp	r3, #3
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	4b3f      	ldr	r3, [pc, #252]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e06f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005536:	4b3b      	ldr	r3, [pc, #236]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e067      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005546:	4b37      	ldr	r3, [pc, #220]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 0203 	bic.w	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4934      	ldr	r1, [pc, #208]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005558:	f7ff fa5c 	bl	8004a14 <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7ff fa58 	bl	8004a14 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e04f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005576:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 020c 	and.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	429a      	cmp	r2, r3
 8005586:	d1eb      	bne.n	8005560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005588:	4b25      	ldr	r3, [pc, #148]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d20c      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b20      	ldr	r3, [pc, #128]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e032      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4916      	ldr	r1, [pc, #88]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055da:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	490e      	ldr	r1, [pc, #56]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ee:	f000 f821 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	490a      	ldr	r1, [pc, #40]	@ (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	5ccb      	ldrb	r3, [r1, r3]
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	4a09      	ldr	r2, [pc, #36]	@ (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800560a:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <HAL_RCC_ClockConfig+0x1c8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff f9bc 	bl	800498c <HAL_InitTick>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023c00 	.word	0x40023c00
 8005624:	40023800 	.word	0x40023800
 8005628:	0800bbe8 	.word	0x0800bbe8
 800562c:	20000080 	.word	0x20000080
 8005630:	20000084 	.word	0x20000084

08005634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005638:	b090      	sub	sp, #64	@ 0x40
 800563a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564c:	4b59      	ldr	r3, [pc, #356]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 030c 	and.w	r3, r3, #12
 8005654:	2b08      	cmp	r3, #8
 8005656:	d00d      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x40>
 8005658:	2b08      	cmp	r3, #8
 800565a:	f200 80a1 	bhi.w	80057a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x34>
 8005662:	2b04      	cmp	r3, #4
 8005664:	d003      	beq.n	800566e <HAL_RCC_GetSysClockFreq+0x3a>
 8005666:	e09b      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b53      	ldr	r3, [pc, #332]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800566c:	e09b      	b.n	80057a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566e:	4b53      	ldr	r3, [pc, #332]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x188>)
 8005670:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005672:	e098      	b.n	80057a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005674:	4b4f      	ldr	r3, [pc, #316]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567e:	4b4d      	ldr	r3, [pc, #308]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d028      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568a:	4b4a      	ldr	r3, [pc, #296]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	099b      	lsrs	r3, r3, #6
 8005690:	2200      	movs	r2, #0
 8005692:	623b      	str	r3, [r7, #32]
 8005694:	627a      	str	r2, [r7, #36]	@ 0x24
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800569c:	2100      	movs	r1, #0
 800569e:	4b47      	ldr	r3, [pc, #284]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x188>)
 80056a0:	fb03 f201 	mul.w	r2, r3, r1
 80056a4:	2300      	movs	r3, #0
 80056a6:	fb00 f303 	mul.w	r3, r0, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	4a43      	ldr	r2, [pc, #268]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x188>)
 80056ae:	fba0 1202 	umull	r1, r2, r0, r2
 80056b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b4:	460a      	mov	r2, r1
 80056b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80056b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ba:	4413      	add	r3, r2
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c0:	2200      	movs	r2, #0
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	61fa      	str	r2, [r7, #28]
 80056c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056ce:	f7fb fadb 	bl	8000c88 <__aeabi_uldivmod>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4613      	mov	r3, r2
 80056d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056da:	e053      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056dc:	4b35      	ldr	r3, [pc, #212]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	2200      	movs	r2, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	617a      	str	r2, [r7, #20]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056ee:	f04f 0b00 	mov.w	fp, #0
 80056f2:	4652      	mov	r2, sl
 80056f4:	465b      	mov	r3, fp
 80056f6:	f04f 0000 	mov.w	r0, #0
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	0159      	lsls	r1, r3, #5
 8005700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005704:	0150      	lsls	r0, r2, #5
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	ebb2 080a 	subs.w	r8, r2, sl
 800570e:	eb63 090b 	sbc.w	r9, r3, fp
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800571e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005722:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005726:	ebb2 0408 	subs.w	r4, r2, r8
 800572a:	eb63 0509 	sbc.w	r5, r3, r9
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	00eb      	lsls	r3, r5, #3
 8005738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573c:	00e2      	lsls	r2, r4, #3
 800573e:	4614      	mov	r4, r2
 8005740:	461d      	mov	r5, r3
 8005742:	eb14 030a 	adds.w	r3, r4, sl
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	eb45 030b 	adc.w	r3, r5, fp
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800575a:	4629      	mov	r1, r5
 800575c:	028b      	lsls	r3, r1, #10
 800575e:	4621      	mov	r1, r4
 8005760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005764:	4621      	mov	r1, r4
 8005766:	028a      	lsls	r2, r1, #10
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576e:	2200      	movs	r2, #0
 8005770:	60bb      	str	r3, [r7, #8]
 8005772:	60fa      	str	r2, [r7, #12]
 8005774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005778:	f7fb fa86 	bl	8000c88 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4613      	mov	r3, r2
 8005782:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005784:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	3301      	adds	r3, #1
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005794:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	fbb2 f3f3 	udiv	r3, r2, r3
 800579c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800579e:	e002      	b.n	80057a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80057a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3740      	adds	r7, #64	@ 0x40
 80057ac:	46bd      	mov	sp, r7
 80057ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b2:	bf00      	nop
 80057b4:	40023800 	.word	0x40023800
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	017d7840 	.word	0x017d7840

080057c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c4:	4b03      	ldr	r3, [pc, #12]	@ (80057d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000080 	.word	0x20000080

080057d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057dc:	f7ff fff0 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	0a9b      	lsrs	r3, r3, #10
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	4903      	ldr	r1, [pc, #12]	@ (80057fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40023800 	.word	0x40023800
 80057fc:	0800bbf8 	.word	0x0800bbf8

08005800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005804:	f7ff ffdc 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	@ (8005820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0b5b      	lsrs	r3, r3, #13
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4903      	ldr	r1, [pc, #12]	@ (8005824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	0800bbf8 	.word	0x0800bbf8

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e041      	b.n	80058be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fe fdf6 	bl	8004440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 fc0c 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e041      	b.n	800595c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f839 	bl	8005964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 fbbd 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start+0x24>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e022      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d109      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x3e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	bf14      	ite	ne
 80059ae:	2301      	movne	r3, #1
 80059b0:	2300      	moveq	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	e015      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start+0x58>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e008      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e07c      	b.n	8005ae4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0x82>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x92>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2201      	movs	r2, #1
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fe20 	bl	8006670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	@ (8005aec <HAL_TIM_PWM_Start+0x174>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xcc>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <HAL_TIM_PWM_Start+0x178>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_TIM_PWM_Start+0xd0>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_TIM_PWM_Start+0xd2>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a22      	ldr	r2, [pc, #136]	@ (8005aec <HAL_TIM_PWM_Start+0x174>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d022      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a70:	d01d      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1f      	ldr	r2, [pc, #124]	@ (8005af4 <HAL_TIM_PWM_Start+0x17c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d018      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1d      	ldr	r2, [pc, #116]	@ (8005af8 <HAL_TIM_PWM_Start+0x180>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005afc <HAL_TIM_PWM_Start+0x184>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a16      	ldr	r2, [pc, #88]	@ (8005af0 <HAL_TIM_PWM_Start+0x178>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	@ (8005b00 <HAL_TIM_PWM_Start+0x188>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_TIM_PWM_Start+0x136>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a16      	ldr	r2, [pc, #88]	@ (8005b04 <HAL_TIM_PWM_Start+0x18c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d111      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d010      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad0:	e007      	b.n	8005ae2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0201 	orr.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40001800 	.word	0x40001800

08005b08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e097      	b.n	8005c4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7fe fb9d 	bl	8004270 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4c:	f023 0307 	bic.w	r3, r3, #7
 8005b50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f000 fa91 	bl	8006084 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ba8:	f023 030c 	bic.w	r3, r3, #12
 8005bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	011a      	lsls	r2, r3, #4
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	031b      	lsls	r3, r3, #12
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d110      	bne.n	8005ca6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d102      	bne.n	8005c90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c8a:	7b7b      	ldrb	r3, [r7, #13]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e069      	b.n	8005d68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca4:	e031      	b.n	8005d0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d110      	bne.n	8005cce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d102      	bne.n	8005cb8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cb2:	7b3b      	ldrb	r3, [r7, #12]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d001      	beq.n	8005cbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e055      	b.n	8005d68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ccc:	e01d      	b.n	8005d0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d108      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cda:	7b7b      	ldrb	r3, [r7, #13]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d102      	bne.n	8005ce6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ce0:	7b3b      	ldrb	r3, [r7, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d001      	beq.n	8005cea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e03e      	b.n	8005d68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIM_Encoder_Start+0xc4>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d008      	beq.n	8005d28 <HAL_TIM_Encoder_Start+0xd4>
 8005d16:	e00f      	b.n	8005d38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fca5 	bl	8006670 <TIM_CCxChannelCmd>
      break;
 8005d26:	e016      	b.n	8005d56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fc9d 	bl	8006670 <TIM_CCxChannelCmd>
      break;
 8005d36:	e00e      	b.n	8005d56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fc95 	bl	8006670 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	2104      	movs	r1, #4
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fc8e 	bl	8006670 <TIM_CCxChannelCmd>
      break;
 8005d54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e0ae      	b.n	8005eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b0c      	cmp	r3, #12
 8005d9a:	f200 809f 	bhi.w	8005edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dd9 	.word	0x08005dd9
 8005da8:	08005edd 	.word	0x08005edd
 8005dac:	08005edd 	.word	0x08005edd
 8005db0:	08005edd 	.word	0x08005edd
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005edd 	.word	0x08005edd
 8005dbc:	08005edd 	.word	0x08005edd
 8005dc0:	08005edd 	.word	0x08005edd
 8005dc4:	08005e5b 	.word	0x08005e5b
 8005dc8:	08005edd 	.word	0x08005edd
 8005dcc:	08005edd 	.word	0x08005edd
 8005dd0:	08005edd 	.word	0x08005edd
 8005dd4:	08005e9b 	.word	0x08005e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f9fc 	bl	80061dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	619a      	str	r2, [r3, #24]
      break;
 8005e16:	e064      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fa4c 	bl	80062bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]
      break;
 8005e58:	e043      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 faa1 	bl	80063a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]
      break;
 8005e98:	e023      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 faf5 	bl	8006490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	61da      	str	r2, [r3, #28]
      break;
 8005eda:	e002      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_ConfigClockSource+0x1c>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0b4      	b.n	800607a <HAL_TIM_ConfigClockSource+0x186>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d03e      	beq.n	8005fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4e:	f200 8087 	bhi.w	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f56:	f000 8086 	beq.w	8006066 <HAL_TIM_ConfigClockSource+0x172>
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5e:	d87f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b70      	cmp	r3, #112	@ 0x70
 8005f62:	d01a      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0xa6>
 8005f64:	2b70      	cmp	r3, #112	@ 0x70
 8005f66:	d87b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b60      	cmp	r3, #96	@ 0x60
 8005f6a:	d050      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x11a>
 8005f6c:	2b60      	cmp	r3, #96	@ 0x60
 8005f6e:	d877      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b50      	cmp	r3, #80	@ 0x50
 8005f72:	d03c      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0xfa>
 8005f74:	2b50      	cmp	r3, #80	@ 0x50
 8005f76:	d873      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d058      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x13a>
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d86f      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d064      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	2b30      	cmp	r3, #48	@ 0x30
 8005f86:	d86b      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d060      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d867      	bhi.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d05c      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	2b10      	cmp	r3, #16
 8005f96:	d05a      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	e062      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	f000 fb41 	bl	8006630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
      break;
 8005fc6:	e04f      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	f000 fb2a 	bl	8006630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fea:	609a      	str	r2, [r3, #8]
      break;
 8005fec:	e03c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 fa9e 	bl	800653c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2150      	movs	r1, #80	@ 0x50
 8006006:	4618      	mov	r0, r3
 8006008:	f000 faf7 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 800600c:	e02c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fabd 	bl	800659a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2160      	movs	r1, #96	@ 0x60
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fae7 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 800602c:	e01c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603a:	461a      	mov	r2, r3
 800603c:	f000 fa7e 	bl	800653c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2140      	movs	r1, #64	@ 0x40
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fad7 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 800604c:	e00c      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f000 face 	bl	80065fa <TIM_ITRx_SetConfig>
      break;
 800605e:	e003      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e000      	b.n	8006068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a46      	ldr	r2, [pc, #280]	@ (80061b0 <TIM_Base_SetConfig+0x12c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a2:	d00f      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a43      	ldr	r2, [pc, #268]	@ (80061b4 <TIM_Base_SetConfig+0x130>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a42      	ldr	r2, [pc, #264]	@ (80061b8 <TIM_Base_SetConfig+0x134>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a41      	ldr	r2, [pc, #260]	@ (80061bc <TIM_Base_SetConfig+0x138>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a40      	ldr	r2, [pc, #256]	@ (80061c0 <TIM_Base_SetConfig+0x13c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a35      	ldr	r2, [pc, #212]	@ (80061b0 <TIM_Base_SetConfig+0x12c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d02b      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e4:	d027      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a32      	ldr	r2, [pc, #200]	@ (80061b4 <TIM_Base_SetConfig+0x130>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d023      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a31      	ldr	r2, [pc, #196]	@ (80061b8 <TIM_Base_SetConfig+0x134>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01f      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a30      	ldr	r2, [pc, #192]	@ (80061bc <TIM_Base_SetConfig+0x138>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01b      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2f      	ldr	r2, [pc, #188]	@ (80061c0 <TIM_Base_SetConfig+0x13c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d017      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2e      	ldr	r2, [pc, #184]	@ (80061c4 <TIM_Base_SetConfig+0x140>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2d      	ldr	r2, [pc, #180]	@ (80061c8 <TIM_Base_SetConfig+0x144>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2c      	ldr	r2, [pc, #176]	@ (80061cc <TIM_Base_SetConfig+0x148>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <TIM_Base_SetConfig+0x14c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <TIM_Base_SetConfig+0x150>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a29      	ldr	r2, [pc, #164]	@ (80061d8 <TIM_Base_SetConfig+0x154>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d108      	bne.n	8006148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800613c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a10      	ldr	r2, [pc, #64]	@ (80061b0 <TIM_Base_SetConfig+0x12c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_Base_SetConfig+0xf8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a12      	ldr	r2, [pc, #72]	@ (80061c0 <TIM_Base_SetConfig+0x13c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d103      	bne.n	8006184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]
  }
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	40000c00 	.word	0x40000c00
 80061c0:	40010400 	.word	0x40010400
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400
 80061cc:	40014800 	.word	0x40014800
 80061d0:	40001800 	.word	0x40001800
 80061d4:	40001c00 	.word	0x40001c00
 80061d8:	40002000 	.word	0x40002000

080061dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	f023 0201 	bic.w	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0303 	bic.w	r3, r3, #3
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f023 0302 	bic.w	r3, r3, #2
 8006224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a20      	ldr	r2, [pc, #128]	@ (80062b4 <TIM_OC1_SetConfig+0xd8>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC1_SetConfig+0x64>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1f      	ldr	r2, [pc, #124]	@ (80062b8 <TIM_OC1_SetConfig+0xdc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10c      	bne.n	800625a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0308 	bic.w	r3, r3, #8
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f023 0304 	bic.w	r3, r3, #4
 8006258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a15      	ldr	r2, [pc, #84]	@ (80062b4 <TIM_OC1_SetConfig+0xd8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_OC1_SetConfig+0x8e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a14      	ldr	r2, [pc, #80]	@ (80062b8 <TIM_OC1_SetConfig+0xdc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d111      	bne.n	800628e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	621a      	str	r2, [r3, #32]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	40010000 	.word	0x40010000
 80062b8:	40010400 	.word	0x40010400

080062bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f023 0210 	bic.w	r2, r3, #16
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0320 	bic.w	r3, r3, #32
 8006306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a22      	ldr	r2, [pc, #136]	@ (80063a0 <TIM_OC2_SetConfig+0xe4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_OC2_SetConfig+0x68>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a21      	ldr	r2, [pc, #132]	@ (80063a4 <TIM_OC2_SetConfig+0xe8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10d      	bne.n	8006340 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800632a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800633e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a17      	ldr	r2, [pc, #92]	@ (80063a0 <TIM_OC2_SetConfig+0xe4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC2_SetConfig+0x94>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a16      	ldr	r2, [pc, #88]	@ (80063a4 <TIM_OC2_SetConfig+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d113      	bne.n	8006378 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800635e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	621a      	str	r2, [r3, #32]
}
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40010400 	.word	0x40010400

080063a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a21      	ldr	r2, [pc, #132]	@ (8006488 <TIM_OC3_SetConfig+0xe0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_OC3_SetConfig+0x66>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a20      	ldr	r2, [pc, #128]	@ (800648c <TIM_OC3_SetConfig+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10d      	bne.n	800642a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <TIM_OC3_SetConfig+0xe0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_OC3_SetConfig+0x92>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a15      	ldr	r2, [pc, #84]	@ (800648c <TIM_OC3_SetConfig+0xe4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d113      	bne.n	8006462 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	621a      	str	r2, [r3, #32]
}
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	40010000 	.word	0x40010000
 800648c:	40010400 	.word	0x40010400

08006490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a12      	ldr	r2, [pc, #72]	@ (8006534 <TIM_OC4_SetConfig+0xa4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <TIM_OC4_SetConfig+0x68>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a11      	ldr	r2, [pc, #68]	@ (8006538 <TIM_OC4_SetConfig+0xa8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d109      	bne.n	800650c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	019b      	lsls	r3, r3, #6
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400

0800653c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0201 	bic.w	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 030a 	bic.w	r3, r3, #10
 8006578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659a:	b480      	push	{r7}
 800659c:	b087      	sub	sp, #28
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f023 0210 	bic.w	r2, r3, #16
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	031b      	lsls	r3, r3, #12
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	f043 0307 	orr.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	609a      	str	r2, [r3, #8]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800664a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	431a      	orrs	r2, r3
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	609a      	str	r2, [r3, #8]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f003 031f 	and.w	r3, r3, #31
 8006682:	2201      	movs	r2, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	43db      	mvns	r3, r3
 8006692:	401a      	ands	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	431a      	orrs	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e05a      	b.n	800678a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a21      	ldr	r2, [pc, #132]	@ (8006798 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d022      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006720:	d01d      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d018      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1b      	ldr	r2, [pc, #108]	@ (80067a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d013      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1a      	ldr	r2, [pc, #104]	@ (80067a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00e      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a18      	ldr	r2, [pc, #96]	@ (80067a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d009      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a17      	ldr	r2, [pc, #92]	@ (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a15      	ldr	r2, [pc, #84]	@ (80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d10c      	bne.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006764:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4313      	orrs	r3, r2
 800676e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40010400 	.word	0x40010400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40001800 	.word	0x40001800

080067b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e042      	b.n	800684c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fd ff42 	bl	8004664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2224      	movs	r2, #36	@ 0x24
 80067e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa09 	bl	8006c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800680c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800681c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800682c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	@ 0x28
 8006858:	af02      	add	r7, sp, #8
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b20      	cmp	r3, #32
 8006872:	d175      	bne.n	8006960 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_UART_Transmit+0x2c>
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e06e      	b.n	8006962 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2221      	movs	r2, #33	@ 0x21
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006892:	f7fe f8bf 	bl	8004a14 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068ac:	d108      	bne.n	80068c0 <HAL_UART_Transmit+0x6c>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d104      	bne.n	80068c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	e003      	b.n	80068c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068c8:	e02e      	b.n	8006928 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2180      	movs	r1, #128	@ 0x80
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f8df 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e03a      	b.n	8006962 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10b      	bne.n	800690a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006900:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	3302      	adds	r3, #2
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	e007      	b.n	800691a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	3301      	adds	r3, #1
 8006918:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1cb      	bne.n	80068ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2200      	movs	r2, #0
 800693a:	2140      	movs	r1, #64	@ 0x40
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f8ab 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d005      	beq.n	8006954 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e006      	b.n	8006962 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	e000      	b.n	8006962 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
  }
}
 8006962:	4618      	mov	r0, r3
 8006964:	3720      	adds	r7, #32
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b08a      	sub	sp, #40	@ 0x28
 800696e:	af02      	add	r7, sp, #8
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	603b      	str	r3, [r7, #0]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b20      	cmp	r3, #32
 8006988:	f040 8081 	bne.w	8006a8e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_UART_Receive+0x2e>
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e079      	b.n	8006a90 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2222      	movs	r2, #34	@ 0x22
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b0:	f7fe f830 	bl	8004a14 <HAL_GetTick>
 80069b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ca:	d108      	bne.n	80069de <HAL_UART_Receive+0x74>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e003      	b.n	80069e6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80069e6:	e047      	b.n	8006a78 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	2120      	movs	r1, #32
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f850 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e042      	b.n	8006a90 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10c      	bne.n	8006a2a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	3302      	adds	r3, #2
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	e01f      	b.n	8006a6a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a32:	d007      	beq.n	8006a44 <HAL_UART_Receive+0xda>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <HAL_UART_Receive+0xe8>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e008      	b.n	8006a64 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1b2      	bne.n	80069e8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e000      	b.n	8006a90 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006a8e:	2302      	movs	r3, #2
  }
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa8:	e03b      	b.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d037      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab2:	f7fd ffaf 	bl	8004a14 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d302      	bcc.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e03a      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d023      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b80      	cmp	r3, #128	@ 0x80
 8006ade:	d020      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d01d      	beq.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d116      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f81d 	bl	8006b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2208      	movs	r2, #8
 8006b14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e00f      	b.n	8006b42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	2300      	movne	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	79fb      	ldrb	r3, [r7, #7]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d0b4      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b095      	sub	sp, #84	@ 0x54
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	330c      	adds	r3, #12
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	330c      	adds	r3, #12
 8006b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3314      	adds	r3, #20
 8006ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e5      	bne.n	8006b86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d119      	bne.n	8006bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006be2:	61ba      	str	r2, [r7, #24]
 8006be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6979      	ldr	r1, [r7, #20]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e5      	bne.n	8006bc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c04:	bf00      	nop
 8006c06:	3754      	adds	r7, #84	@ 0x54
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c14:	b0c0      	sub	sp, #256	@ 0x100
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	68d9      	ldr	r1, [r3, #12]
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	ea40 0301 	orr.w	r3, r0, r1
 8006c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c68:	f021 010c 	bic.w	r1, r1, #12
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c76:	430b      	orrs	r3, r1
 8006c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8a:	6999      	ldr	r1, [r3, #24]
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	ea40 0301 	orr.w	r3, r0, r1
 8006c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b8f      	ldr	r3, [pc, #572]	@ (8006edc <UART_SetConfig+0x2cc>)
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d005      	beq.n	8006cb0 <UART_SetConfig+0xa0>
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	4b8d      	ldr	r3, [pc, #564]	@ (8006ee0 <UART_SetConfig+0x2d0>)
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d104      	bne.n	8006cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cb0:	f7fe fda6 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8006cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cb8:	e003      	b.n	8006cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cba:	f7fe fd8d 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8006cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ccc:	f040 810c 	bne.w	8006ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	1891      	adds	r1, r2, r2
 8006ce8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cea:	415b      	adcs	r3, r3
 8006cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	eb12 0801 	adds.w	r8, r2, r1
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	eb43 0901 	adc.w	r9, r3, r1
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d12:	4690      	mov	r8, r2
 8006d14:	4699      	mov	r9, r3
 8006d16:	4623      	mov	r3, r4
 8006d18:	eb18 0303 	adds.w	r3, r8, r3
 8006d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d20:	462b      	mov	r3, r5
 8006d22:	eb49 0303 	adc.w	r3, r9, r3
 8006d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d3e:	460b      	mov	r3, r1
 8006d40:	18db      	adds	r3, r3, r3
 8006d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d44:	4613      	mov	r3, r2
 8006d46:	eb42 0303 	adc.w	r3, r2, r3
 8006d4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d54:	f7f9 ff98 	bl	8000c88 <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4b61      	ldr	r3, [pc, #388]	@ (8006ee4 <UART_SetConfig+0x2d4>)
 8006d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	011c      	lsls	r4, r3, #4
 8006d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	1891      	adds	r1, r2, r2
 8006d7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d80:	415b      	adcs	r3, r3
 8006d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d88:	4641      	mov	r1, r8
 8006d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d8e:	4649      	mov	r1, r9
 8006d90:	eb43 0b01 	adc.w	fp, r3, r1
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006da8:	4692      	mov	sl, r2
 8006daa:	469b      	mov	fp, r3
 8006dac:	4643      	mov	r3, r8
 8006dae:	eb1a 0303 	adds.w	r3, sl, r3
 8006db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006db6:	464b      	mov	r3, r9
 8006db8:	eb4b 0303 	adc.w	r3, fp, r3
 8006dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	18db      	adds	r3, r3, r3
 8006dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dda:	4613      	mov	r3, r2
 8006ddc:	eb42 0303 	adc.w	r3, r2, r3
 8006de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dea:	f7f9 ff4d 	bl	8000c88 <__aeabi_uldivmod>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee4 <UART_SetConfig+0x2d4>)
 8006df6:	fba3 2301 	umull	r2, r3, r3, r1
 8006dfa:	095b      	lsrs	r3, r3, #5
 8006dfc:	2264      	movs	r2, #100	@ 0x64
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
 8006e02:	1acb      	subs	r3, r1, r3
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e0a:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <UART_SetConfig+0x2d4>)
 8006e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e18:	441c      	add	r4, r3
 8006e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	1891      	adds	r1, r2, r2
 8006e32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e34:	415b      	adcs	r3, r3
 8006e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	1851      	adds	r1, r2, r1
 8006e40:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e42:	4649      	mov	r1, r9
 8006e44:	414b      	adcs	r3, r1
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e54:	4659      	mov	r1, fp
 8006e56:	00cb      	lsls	r3, r1, #3
 8006e58:	4651      	mov	r1, sl
 8006e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e5e:	4651      	mov	r1, sl
 8006e60:	00ca      	lsls	r2, r1, #3
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	4642      	mov	r2, r8
 8006e6a:	189b      	adds	r3, r3, r2
 8006e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e70:	464b      	mov	r3, r9
 8006e72:	460a      	mov	r2, r1
 8006e74:	eb42 0303 	adc.w	r3, r2, r3
 8006e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e90:	460b      	mov	r3, r1
 8006e92:	18db      	adds	r3, r3, r3
 8006e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e96:	4613      	mov	r3, r2
 8006e98:	eb42 0303 	adc.w	r3, r2, r3
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ea6:	f7f9 feef 	bl	8000c88 <__aeabi_uldivmod>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <UART_SetConfig+0x2d4>)
 8006eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	2164      	movs	r1, #100	@ 0x64
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	3332      	adds	r3, #50	@ 0x32
 8006ec2:	4a08      	ldr	r2, [pc, #32]	@ (8006ee4 <UART_SetConfig+0x2d4>)
 8006ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f003 0207 	and.w	r2, r3, #7
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4422      	add	r2, r4
 8006ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ed8:	e106      	b.n	80070e8 <UART_SetConfig+0x4d8>
 8006eda:	bf00      	nop
 8006edc:	40011000 	.word	0x40011000
 8006ee0:	40011400 	.word	0x40011400
 8006ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006efa:	4642      	mov	r2, r8
 8006efc:	464b      	mov	r3, r9
 8006efe:	1891      	adds	r1, r2, r2
 8006f00:	6239      	str	r1, [r7, #32]
 8006f02:	415b      	adcs	r3, r3
 8006f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f0a:	4641      	mov	r1, r8
 8006f0c:	1854      	adds	r4, r2, r1
 8006f0e:	4649      	mov	r1, r9
 8006f10:	eb43 0501 	adc.w	r5, r3, r1
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	00eb      	lsls	r3, r5, #3
 8006f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f22:	00e2      	lsls	r2, r4, #3
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	4643      	mov	r3, r8
 8006f2a:	18e3      	adds	r3, r4, r3
 8006f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f30:	464b      	mov	r3, r9
 8006f32:	eb45 0303 	adc.w	r3, r5, r3
 8006f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f4a:	f04f 0200 	mov.w	r2, #0
 8006f4e:	f04f 0300 	mov.w	r3, #0
 8006f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f56:	4629      	mov	r1, r5
 8006f58:	008b      	lsls	r3, r1, #2
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f60:	4621      	mov	r1, r4
 8006f62:	008a      	lsls	r2, r1, #2
 8006f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f68:	f7f9 fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4b60      	ldr	r3, [pc, #384]	@ (80070f4 <UART_SetConfig+0x4e4>)
 8006f72:	fba3 2302 	umull	r2, r3, r3, r2
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	011c      	lsls	r4, r3, #4
 8006f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	1891      	adds	r1, r2, r2
 8006f92:	61b9      	str	r1, [r7, #24]
 8006f94:	415b      	adcs	r3, r3
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f9c:	4641      	mov	r1, r8
 8006f9e:	1851      	adds	r1, r2, r1
 8006fa0:	6139      	str	r1, [r7, #16]
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	414b      	adcs	r3, r1
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	00cb      	lsls	r3, r1, #3
 8006fb8:	4651      	mov	r1, sl
 8006fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	00ca      	lsls	r2, r1, #3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4642      	mov	r2, r8
 8006fca:	189b      	adds	r3, r3, r2
 8006fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fe6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	008b      	lsls	r3, r1, #2
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ffe:	4641      	mov	r1, r8
 8007000:	008a      	lsls	r2, r1, #2
 8007002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007006:	f7f9 fe3f 	bl	8000c88 <__aeabi_uldivmod>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4611      	mov	r1, r2
 8007010:	4b38      	ldr	r3, [pc, #224]	@ (80070f4 <UART_SetConfig+0x4e4>)
 8007012:	fba3 2301 	umull	r2, r3, r3, r1
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	2264      	movs	r2, #100	@ 0x64
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	1acb      	subs	r3, r1, r3
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	3332      	adds	r3, #50	@ 0x32
 8007024:	4a33      	ldr	r2, [pc, #204]	@ (80070f4 <UART_SetConfig+0x4e4>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007030:	441c      	add	r4, r3
 8007032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007036:	2200      	movs	r2, #0
 8007038:	673b      	str	r3, [r7, #112]	@ 0x70
 800703a:	677a      	str	r2, [r7, #116]	@ 0x74
 800703c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007040:	4642      	mov	r2, r8
 8007042:	464b      	mov	r3, r9
 8007044:	1891      	adds	r1, r2, r2
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	415b      	adcs	r3, r3
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007050:	4641      	mov	r1, r8
 8007052:	1851      	adds	r1, r2, r1
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	4649      	mov	r1, r9
 8007058:	414b      	adcs	r3, r1
 800705a:	607b      	str	r3, [r7, #4]
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007068:	4659      	mov	r1, fp
 800706a:	00cb      	lsls	r3, r1, #3
 800706c:	4651      	mov	r1, sl
 800706e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007072:	4651      	mov	r1, sl
 8007074:	00ca      	lsls	r2, r1, #3
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	4603      	mov	r3, r0
 800707c:	4642      	mov	r2, r8
 800707e:	189b      	adds	r3, r3, r2
 8007080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007082:	464b      	mov	r3, r9
 8007084:	460a      	mov	r2, r1
 8007086:	eb42 0303 	adc.w	r3, r2, r3
 800708a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	663b      	str	r3, [r7, #96]	@ 0x60
 8007096:	667a      	str	r2, [r7, #100]	@ 0x64
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070a4:	4649      	mov	r1, r9
 80070a6:	008b      	lsls	r3, r1, #2
 80070a8:	4641      	mov	r1, r8
 80070aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070ae:	4641      	mov	r1, r8
 80070b0:	008a      	lsls	r2, r1, #2
 80070b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070b6:	f7f9 fde7 	bl	8000c88 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <UART_SetConfig+0x4e4>)
 80070c0:	fba3 1302 	umull	r1, r3, r3, r2
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	2164      	movs	r1, #100	@ 0x64
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	3332      	adds	r3, #50	@ 0x32
 80070d2:	4a08      	ldr	r2, [pc, #32]	@ (80070f4 <UART_SetConfig+0x4e4>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	f003 020f 	and.w	r2, r3, #15
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4422      	add	r2, r4
 80070e6:	609a      	str	r2, [r3, #8]
}
 80070e8:	bf00      	nop
 80070ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070ee:	46bd      	mov	sp, r7
 80070f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070f4:	51eb851f 	.word	0x51eb851f

080070f8 <atof>:
 80070f8:	2100      	movs	r1, #0
 80070fa:	f000 be0b 	b.w	8007d14 <strtod>

080070fe <sulp>:
 80070fe:	b570      	push	{r4, r5, r6, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	ec45 4b10 	vmov	d0, r4, r5
 8007108:	4616      	mov	r6, r2
 800710a:	f003 fe25 	bl	800ad58 <__ulp>
 800710e:	ec51 0b10 	vmov	r0, r1, d0
 8007112:	b17e      	cbz	r6, 8007134 <sulp+0x36>
 8007114:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007118:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd09      	ble.n	8007134 <sulp+0x36>
 8007120:	051b      	lsls	r3, r3, #20
 8007122:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007126:	2400      	movs	r4, #0
 8007128:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800712c:	4622      	mov	r2, r4
 800712e:	462b      	mov	r3, r5
 8007130:	f7f9 fa62 	bl	80005f8 <__aeabi_dmul>
 8007134:	ec41 0b10 	vmov	d0, r0, r1
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	0000      	movs	r0, r0
 800713c:	0000      	movs	r0, r0
	...

08007140 <_strtod_l>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	b09f      	sub	sp, #124	@ 0x7c
 8007146:	460c      	mov	r4, r1
 8007148:	9217      	str	r2, [sp, #92]	@ 0x5c
 800714a:	2200      	movs	r2, #0
 800714c:	921a      	str	r2, [sp, #104]	@ 0x68
 800714e:	9005      	str	r0, [sp, #20]
 8007150:	f04f 0a00 	mov.w	sl, #0
 8007154:	f04f 0b00 	mov.w	fp, #0
 8007158:	460a      	mov	r2, r1
 800715a:	9219      	str	r2, [sp, #100]	@ 0x64
 800715c:	7811      	ldrb	r1, [r2, #0]
 800715e:	292b      	cmp	r1, #43	@ 0x2b
 8007160:	d04a      	beq.n	80071f8 <_strtod_l+0xb8>
 8007162:	d838      	bhi.n	80071d6 <_strtod_l+0x96>
 8007164:	290d      	cmp	r1, #13
 8007166:	d832      	bhi.n	80071ce <_strtod_l+0x8e>
 8007168:	2908      	cmp	r1, #8
 800716a:	d832      	bhi.n	80071d2 <_strtod_l+0x92>
 800716c:	2900      	cmp	r1, #0
 800716e:	d03b      	beq.n	80071e8 <_strtod_l+0xa8>
 8007170:	2200      	movs	r2, #0
 8007172:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007174:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007176:	782a      	ldrb	r2, [r5, #0]
 8007178:	2a30      	cmp	r2, #48	@ 0x30
 800717a:	f040 80b3 	bne.w	80072e4 <_strtod_l+0x1a4>
 800717e:	786a      	ldrb	r2, [r5, #1]
 8007180:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007184:	2a58      	cmp	r2, #88	@ 0x58
 8007186:	d16e      	bne.n	8007266 <_strtod_l+0x126>
 8007188:	9302      	str	r3, [sp, #8]
 800718a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	4a8e      	ldr	r2, [pc, #568]	@ (80073cc <_strtod_l+0x28c>)
 8007194:	9805      	ldr	r0, [sp, #20]
 8007196:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007198:	a919      	add	r1, sp, #100	@ 0x64
 800719a:	f002 fecf 	bl	8009f3c <__gethex>
 800719e:	f010 060f 	ands.w	r6, r0, #15
 80071a2:	4604      	mov	r4, r0
 80071a4:	d005      	beq.n	80071b2 <_strtod_l+0x72>
 80071a6:	2e06      	cmp	r6, #6
 80071a8:	d128      	bne.n	80071fc <_strtod_l+0xbc>
 80071aa:	3501      	adds	r5, #1
 80071ac:	2300      	movs	r3, #0
 80071ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80071b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 858e 	bne.w	8007cd6 <_strtod_l+0xb96>
 80071ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071bc:	b1cb      	cbz	r3, 80071f2 <_strtod_l+0xb2>
 80071be:	4652      	mov	r2, sl
 80071c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80071c4:	ec43 2b10 	vmov	d0, r2, r3
 80071c8:	b01f      	add	sp, #124	@ 0x7c
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	2920      	cmp	r1, #32
 80071d0:	d1ce      	bne.n	8007170 <_strtod_l+0x30>
 80071d2:	3201      	adds	r2, #1
 80071d4:	e7c1      	b.n	800715a <_strtod_l+0x1a>
 80071d6:	292d      	cmp	r1, #45	@ 0x2d
 80071d8:	d1ca      	bne.n	8007170 <_strtod_l+0x30>
 80071da:	2101      	movs	r1, #1
 80071dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80071de:	1c51      	adds	r1, r2, #1
 80071e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80071e2:	7852      	ldrb	r2, [r2, #1]
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d1c5      	bne.n	8007174 <_strtod_l+0x34>
 80071e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8570 	bne.w	8007cd2 <_strtod_l+0xb92>
 80071f2:	4652      	mov	r2, sl
 80071f4:	465b      	mov	r3, fp
 80071f6:	e7e5      	b.n	80071c4 <_strtod_l+0x84>
 80071f8:	2100      	movs	r1, #0
 80071fa:	e7ef      	b.n	80071dc <_strtod_l+0x9c>
 80071fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071fe:	b13a      	cbz	r2, 8007210 <_strtod_l+0xd0>
 8007200:	2135      	movs	r1, #53	@ 0x35
 8007202:	a81c      	add	r0, sp, #112	@ 0x70
 8007204:	f003 fea2 	bl	800af4c <__copybits>
 8007208:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800720a:	9805      	ldr	r0, [sp, #20]
 800720c:	f003 fa70 	bl	800a6f0 <_Bfree>
 8007210:	3e01      	subs	r6, #1
 8007212:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007214:	2e04      	cmp	r6, #4
 8007216:	d806      	bhi.n	8007226 <_strtod_l+0xe6>
 8007218:	e8df f006 	tbb	[pc, r6]
 800721c:	201d0314 	.word	0x201d0314
 8007220:	14          	.byte	0x14
 8007221:	00          	.byte	0x00
 8007222:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007226:	05e1      	lsls	r1, r4, #23
 8007228:	bf48      	it	mi
 800722a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800722e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007232:	0d1b      	lsrs	r3, r3, #20
 8007234:	051b      	lsls	r3, r3, #20
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1bb      	bne.n	80071b2 <_strtod_l+0x72>
 800723a:	f001 ff17 	bl	800906c <__errno>
 800723e:	2322      	movs	r3, #34	@ 0x22
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	e7b6      	b.n	80071b2 <_strtod_l+0x72>
 8007244:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800724c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007254:	e7e7      	b.n	8007226 <_strtod_l+0xe6>
 8007256:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80073d4 <_strtod_l+0x294>
 800725a:	e7e4      	b.n	8007226 <_strtod_l+0xe6>
 800725c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007260:	f04f 3aff 	mov.w	sl, #4294967295
 8007264:	e7df      	b.n	8007226 <_strtod_l+0xe6>
 8007266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	9219      	str	r2, [sp, #100]	@ 0x64
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b30      	cmp	r3, #48	@ 0x30
 8007270:	d0f9      	beq.n	8007266 <_strtod_l+0x126>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d09d      	beq.n	80071b2 <_strtod_l+0x72>
 8007276:	2301      	movs	r3, #1
 8007278:	9309      	str	r3, [sp, #36]	@ 0x24
 800727a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800727c:	930c      	str	r3, [sp, #48]	@ 0x30
 800727e:	2300      	movs	r3, #0
 8007280:	9308      	str	r3, [sp, #32]
 8007282:	930a      	str	r3, [sp, #40]	@ 0x28
 8007284:	461f      	mov	r7, r3
 8007286:	220a      	movs	r2, #10
 8007288:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800728a:	7805      	ldrb	r5, [r0, #0]
 800728c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007290:	b2d9      	uxtb	r1, r3
 8007292:	2909      	cmp	r1, #9
 8007294:	d928      	bls.n	80072e8 <_strtod_l+0x1a8>
 8007296:	494e      	ldr	r1, [pc, #312]	@ (80073d0 <_strtod_l+0x290>)
 8007298:	2201      	movs	r2, #1
 800729a:	f001 fe19 	bl	8008ed0 <strncmp>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d032      	beq.n	8007308 <_strtod_l+0x1c8>
 80072a2:	2000      	movs	r0, #0
 80072a4:	462a      	mov	r2, r5
 80072a6:	4681      	mov	r9, r0
 80072a8:	463d      	mov	r5, r7
 80072aa:	4603      	mov	r3, r0
 80072ac:	2a65      	cmp	r2, #101	@ 0x65
 80072ae:	d001      	beq.n	80072b4 <_strtod_l+0x174>
 80072b0:	2a45      	cmp	r2, #69	@ 0x45
 80072b2:	d114      	bne.n	80072de <_strtod_l+0x19e>
 80072b4:	b91d      	cbnz	r5, 80072be <_strtod_l+0x17e>
 80072b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072b8:	4302      	orrs	r2, r0
 80072ba:	d095      	beq.n	80071e8 <_strtod_l+0xa8>
 80072bc:	2500      	movs	r5, #0
 80072be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80072c0:	1c62      	adds	r2, r4, #1
 80072c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80072c4:	7862      	ldrb	r2, [r4, #1]
 80072c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80072c8:	d077      	beq.n	80073ba <_strtod_l+0x27a>
 80072ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80072cc:	d07b      	beq.n	80073c6 <_strtod_l+0x286>
 80072ce:	f04f 0c00 	mov.w	ip, #0
 80072d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80072d6:	2909      	cmp	r1, #9
 80072d8:	f240 8082 	bls.w	80073e0 <_strtod_l+0x2a0>
 80072dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	e0a2      	b.n	800742a <_strtod_l+0x2ea>
 80072e4:	2300      	movs	r3, #0
 80072e6:	e7c7      	b.n	8007278 <_strtod_l+0x138>
 80072e8:	2f08      	cmp	r7, #8
 80072ea:	bfd5      	itete	le
 80072ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80072ee:	9908      	ldrgt	r1, [sp, #32]
 80072f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80072f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072f8:	f100 0001 	add.w	r0, r0, #1
 80072fc:	bfd4      	ite	le
 80072fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007300:	9308      	strgt	r3, [sp, #32]
 8007302:	3701      	adds	r7, #1
 8007304:	9019      	str	r0, [sp, #100]	@ 0x64
 8007306:	e7bf      	b.n	8007288 <_strtod_l+0x148>
 8007308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	9219      	str	r2, [sp, #100]	@ 0x64
 800730e:	785a      	ldrb	r2, [r3, #1]
 8007310:	b37f      	cbz	r7, 8007372 <_strtod_l+0x232>
 8007312:	4681      	mov	r9, r0
 8007314:	463d      	mov	r5, r7
 8007316:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800731a:	2b09      	cmp	r3, #9
 800731c:	d912      	bls.n	8007344 <_strtod_l+0x204>
 800731e:	2301      	movs	r3, #1
 8007320:	e7c4      	b.n	80072ac <_strtod_l+0x16c>
 8007322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	9219      	str	r2, [sp, #100]	@ 0x64
 8007328:	785a      	ldrb	r2, [r3, #1]
 800732a:	3001      	adds	r0, #1
 800732c:	2a30      	cmp	r2, #48	@ 0x30
 800732e:	d0f8      	beq.n	8007322 <_strtod_l+0x1e2>
 8007330:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007334:	2b08      	cmp	r3, #8
 8007336:	f200 84d3 	bhi.w	8007ce0 <_strtod_l+0xba0>
 800733a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800733c:	930c      	str	r3, [sp, #48]	@ 0x30
 800733e:	4681      	mov	r9, r0
 8007340:	2000      	movs	r0, #0
 8007342:	4605      	mov	r5, r0
 8007344:	3a30      	subs	r2, #48	@ 0x30
 8007346:	f100 0301 	add.w	r3, r0, #1
 800734a:	d02a      	beq.n	80073a2 <_strtod_l+0x262>
 800734c:	4499      	add	r9, r3
 800734e:	eb00 0c05 	add.w	ip, r0, r5
 8007352:	462b      	mov	r3, r5
 8007354:	210a      	movs	r1, #10
 8007356:	4563      	cmp	r3, ip
 8007358:	d10d      	bne.n	8007376 <_strtod_l+0x236>
 800735a:	1c69      	adds	r1, r5, #1
 800735c:	4401      	add	r1, r0
 800735e:	4428      	add	r0, r5
 8007360:	2808      	cmp	r0, #8
 8007362:	dc16      	bgt.n	8007392 <_strtod_l+0x252>
 8007364:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007366:	230a      	movs	r3, #10
 8007368:	fb03 2300 	mla	r3, r3, r0, r2
 800736c:	930a      	str	r3, [sp, #40]	@ 0x28
 800736e:	2300      	movs	r3, #0
 8007370:	e018      	b.n	80073a4 <_strtod_l+0x264>
 8007372:	4638      	mov	r0, r7
 8007374:	e7da      	b.n	800732c <_strtod_l+0x1ec>
 8007376:	2b08      	cmp	r3, #8
 8007378:	f103 0301 	add.w	r3, r3, #1
 800737c:	dc03      	bgt.n	8007386 <_strtod_l+0x246>
 800737e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007380:	434e      	muls	r6, r1
 8007382:	960a      	str	r6, [sp, #40]	@ 0x28
 8007384:	e7e7      	b.n	8007356 <_strtod_l+0x216>
 8007386:	2b10      	cmp	r3, #16
 8007388:	bfde      	ittt	le
 800738a:	9e08      	ldrle	r6, [sp, #32]
 800738c:	434e      	mulle	r6, r1
 800738e:	9608      	strle	r6, [sp, #32]
 8007390:	e7e1      	b.n	8007356 <_strtod_l+0x216>
 8007392:	280f      	cmp	r0, #15
 8007394:	dceb      	bgt.n	800736e <_strtod_l+0x22e>
 8007396:	9808      	ldr	r0, [sp, #32]
 8007398:	230a      	movs	r3, #10
 800739a:	fb03 2300 	mla	r3, r3, r0, r2
 800739e:	9308      	str	r3, [sp, #32]
 80073a0:	e7e5      	b.n	800736e <_strtod_l+0x22e>
 80073a2:	4629      	mov	r1, r5
 80073a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073a6:	1c50      	adds	r0, r2, #1
 80073a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80073aa:	7852      	ldrb	r2, [r2, #1]
 80073ac:	4618      	mov	r0, r3
 80073ae:	460d      	mov	r5, r1
 80073b0:	e7b1      	b.n	8007316 <_strtod_l+0x1d6>
 80073b2:	f04f 0900 	mov.w	r9, #0
 80073b6:	2301      	movs	r3, #1
 80073b8:	e77d      	b.n	80072b6 <_strtod_l+0x176>
 80073ba:	f04f 0c00 	mov.w	ip, #0
 80073be:	1ca2      	adds	r2, r4, #2
 80073c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80073c2:	78a2      	ldrb	r2, [r4, #2]
 80073c4:	e785      	b.n	80072d2 <_strtod_l+0x192>
 80073c6:	f04f 0c01 	mov.w	ip, #1
 80073ca:	e7f8      	b.n	80073be <_strtod_l+0x27e>
 80073cc:	0800bc18 	.word	0x0800bc18
 80073d0:	0800bc00 	.word	0x0800bc00
 80073d4:	7ff00000 	.word	0x7ff00000
 80073d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073da:	1c51      	adds	r1, r2, #1
 80073dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80073de:	7852      	ldrb	r2, [r2, #1]
 80073e0:	2a30      	cmp	r2, #48	@ 0x30
 80073e2:	d0f9      	beq.n	80073d8 <_strtod_l+0x298>
 80073e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80073e8:	2908      	cmp	r1, #8
 80073ea:	f63f af78 	bhi.w	80072de <_strtod_l+0x19e>
 80073ee:	3a30      	subs	r2, #48	@ 0x30
 80073f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80073f6:	f04f 080a 	mov.w	r8, #10
 80073fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073fc:	1c56      	adds	r6, r2, #1
 80073fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8007400:	7852      	ldrb	r2, [r2, #1]
 8007402:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007406:	f1be 0f09 	cmp.w	lr, #9
 800740a:	d939      	bls.n	8007480 <_strtod_l+0x340>
 800740c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800740e:	1a76      	subs	r6, r6, r1
 8007410:	2e08      	cmp	r6, #8
 8007412:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007416:	dc03      	bgt.n	8007420 <_strtod_l+0x2e0>
 8007418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800741a:	4588      	cmp	r8, r1
 800741c:	bfa8      	it	ge
 800741e:	4688      	movge	r8, r1
 8007420:	f1bc 0f00 	cmp.w	ip, #0
 8007424:	d001      	beq.n	800742a <_strtod_l+0x2ea>
 8007426:	f1c8 0800 	rsb	r8, r8, #0
 800742a:	2d00      	cmp	r5, #0
 800742c:	d14e      	bne.n	80074cc <_strtod_l+0x38c>
 800742e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007430:	4308      	orrs	r0, r1
 8007432:	f47f aebe 	bne.w	80071b2 <_strtod_l+0x72>
 8007436:	2b00      	cmp	r3, #0
 8007438:	f47f aed6 	bne.w	80071e8 <_strtod_l+0xa8>
 800743c:	2a69      	cmp	r2, #105	@ 0x69
 800743e:	d028      	beq.n	8007492 <_strtod_l+0x352>
 8007440:	dc25      	bgt.n	800748e <_strtod_l+0x34e>
 8007442:	2a49      	cmp	r2, #73	@ 0x49
 8007444:	d025      	beq.n	8007492 <_strtod_l+0x352>
 8007446:	2a4e      	cmp	r2, #78	@ 0x4e
 8007448:	f47f aece 	bne.w	80071e8 <_strtod_l+0xa8>
 800744c:	499b      	ldr	r1, [pc, #620]	@ (80076bc <_strtod_l+0x57c>)
 800744e:	a819      	add	r0, sp, #100	@ 0x64
 8007450:	f002 ff96 	bl	800a380 <__match>
 8007454:	2800      	cmp	r0, #0
 8007456:	f43f aec7 	beq.w	80071e8 <_strtod_l+0xa8>
 800745a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b28      	cmp	r3, #40	@ 0x28
 8007460:	d12e      	bne.n	80074c0 <_strtod_l+0x380>
 8007462:	4997      	ldr	r1, [pc, #604]	@ (80076c0 <_strtod_l+0x580>)
 8007464:	aa1c      	add	r2, sp, #112	@ 0x70
 8007466:	a819      	add	r0, sp, #100	@ 0x64
 8007468:	f002 ff9e 	bl	800a3a8 <__hexnan>
 800746c:	2805      	cmp	r0, #5
 800746e:	d127      	bne.n	80074c0 <_strtod_l+0x380>
 8007470:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007472:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007476:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800747a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800747e:	e698      	b.n	80071b2 <_strtod_l+0x72>
 8007480:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007482:	fb08 2101 	mla	r1, r8, r1, r2
 8007486:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800748a:	920e      	str	r2, [sp, #56]	@ 0x38
 800748c:	e7b5      	b.n	80073fa <_strtod_l+0x2ba>
 800748e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007490:	e7da      	b.n	8007448 <_strtod_l+0x308>
 8007492:	498c      	ldr	r1, [pc, #560]	@ (80076c4 <_strtod_l+0x584>)
 8007494:	a819      	add	r0, sp, #100	@ 0x64
 8007496:	f002 ff73 	bl	800a380 <__match>
 800749a:	2800      	cmp	r0, #0
 800749c:	f43f aea4 	beq.w	80071e8 <_strtod_l+0xa8>
 80074a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a2:	4989      	ldr	r1, [pc, #548]	@ (80076c8 <_strtod_l+0x588>)
 80074a4:	3b01      	subs	r3, #1
 80074a6:	a819      	add	r0, sp, #100	@ 0x64
 80074a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80074aa:	f002 ff69 	bl	800a380 <__match>
 80074ae:	b910      	cbnz	r0, 80074b6 <_strtod_l+0x376>
 80074b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074b2:	3301      	adds	r3, #1
 80074b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80074b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80076d8 <_strtod_l+0x598>
 80074ba:	f04f 0a00 	mov.w	sl, #0
 80074be:	e678      	b.n	80071b2 <_strtod_l+0x72>
 80074c0:	4882      	ldr	r0, [pc, #520]	@ (80076cc <_strtod_l+0x58c>)
 80074c2:	f001 fe11 	bl	80090e8 <nan>
 80074c6:	ec5b ab10 	vmov	sl, fp, d0
 80074ca:	e672      	b.n	80071b2 <_strtod_l+0x72>
 80074cc:	eba8 0309 	sub.w	r3, r8, r9
 80074d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d4:	2f00      	cmp	r7, #0
 80074d6:	bf08      	it	eq
 80074d8:	462f      	moveq	r7, r5
 80074da:	2d10      	cmp	r5, #16
 80074dc:	462c      	mov	r4, r5
 80074de:	bfa8      	it	ge
 80074e0:	2410      	movge	r4, #16
 80074e2:	f7f9 f80f 	bl	8000504 <__aeabi_ui2d>
 80074e6:	2d09      	cmp	r5, #9
 80074e8:	4682      	mov	sl, r0
 80074ea:	468b      	mov	fp, r1
 80074ec:	dc13      	bgt.n	8007516 <_strtod_l+0x3d6>
 80074ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f43f ae5e 	beq.w	80071b2 <_strtod_l+0x72>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	dd78      	ble.n	80075ec <_strtod_l+0x4ac>
 80074fa:	2b16      	cmp	r3, #22
 80074fc:	dc5f      	bgt.n	80075be <_strtod_l+0x47e>
 80074fe:	4974      	ldr	r1, [pc, #464]	@ (80076d0 <_strtod_l+0x590>)
 8007500:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007508:	4652      	mov	r2, sl
 800750a:	465b      	mov	r3, fp
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	4682      	mov	sl, r0
 8007512:	468b      	mov	fp, r1
 8007514:	e64d      	b.n	80071b2 <_strtod_l+0x72>
 8007516:	4b6e      	ldr	r3, [pc, #440]	@ (80076d0 <_strtod_l+0x590>)
 8007518:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800751c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007520:	f7f9 f86a 	bl	80005f8 <__aeabi_dmul>
 8007524:	4682      	mov	sl, r0
 8007526:	9808      	ldr	r0, [sp, #32]
 8007528:	468b      	mov	fp, r1
 800752a:	f7f8 ffeb 	bl	8000504 <__aeabi_ui2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4650      	mov	r0, sl
 8007534:	4659      	mov	r1, fp
 8007536:	f7f8 fea9 	bl	800028c <__adddf3>
 800753a:	2d0f      	cmp	r5, #15
 800753c:	4682      	mov	sl, r0
 800753e:	468b      	mov	fp, r1
 8007540:	ddd5      	ble.n	80074ee <_strtod_l+0x3ae>
 8007542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007544:	1b2c      	subs	r4, r5, r4
 8007546:	441c      	add	r4, r3
 8007548:	2c00      	cmp	r4, #0
 800754a:	f340 8096 	ble.w	800767a <_strtod_l+0x53a>
 800754e:	f014 030f 	ands.w	r3, r4, #15
 8007552:	d00a      	beq.n	800756a <_strtod_l+0x42a>
 8007554:	495e      	ldr	r1, [pc, #376]	@ (80076d0 <_strtod_l+0x590>)
 8007556:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800755a:	4652      	mov	r2, sl
 800755c:	465b      	mov	r3, fp
 800755e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007562:	f7f9 f849 	bl	80005f8 <__aeabi_dmul>
 8007566:	4682      	mov	sl, r0
 8007568:	468b      	mov	fp, r1
 800756a:	f034 040f 	bics.w	r4, r4, #15
 800756e:	d073      	beq.n	8007658 <_strtod_l+0x518>
 8007570:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007574:	dd48      	ble.n	8007608 <_strtod_l+0x4c8>
 8007576:	2400      	movs	r4, #0
 8007578:	46a0      	mov	r8, r4
 800757a:	940a      	str	r4, [sp, #40]	@ 0x28
 800757c:	46a1      	mov	r9, r4
 800757e:	9a05      	ldr	r2, [sp, #20]
 8007580:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80076d8 <_strtod_l+0x598>
 8007584:	2322      	movs	r3, #34	@ 0x22
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	f04f 0a00 	mov.w	sl, #0
 800758c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	f43f ae0f 	beq.w	80071b2 <_strtod_l+0x72>
 8007594:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007596:	9805      	ldr	r0, [sp, #20]
 8007598:	f003 f8aa 	bl	800a6f0 <_Bfree>
 800759c:	9805      	ldr	r0, [sp, #20]
 800759e:	4649      	mov	r1, r9
 80075a0:	f003 f8a6 	bl	800a6f0 <_Bfree>
 80075a4:	9805      	ldr	r0, [sp, #20]
 80075a6:	4641      	mov	r1, r8
 80075a8:	f003 f8a2 	bl	800a6f0 <_Bfree>
 80075ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075ae:	9805      	ldr	r0, [sp, #20]
 80075b0:	f003 f89e 	bl	800a6f0 <_Bfree>
 80075b4:	9805      	ldr	r0, [sp, #20]
 80075b6:	4621      	mov	r1, r4
 80075b8:	f003 f89a 	bl	800a6f0 <_Bfree>
 80075bc:	e5f9      	b.n	80071b2 <_strtod_l+0x72>
 80075be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80075c4:	4293      	cmp	r3, r2
 80075c6:	dbbc      	blt.n	8007542 <_strtod_l+0x402>
 80075c8:	4c41      	ldr	r4, [pc, #260]	@ (80076d0 <_strtod_l+0x590>)
 80075ca:	f1c5 050f 	rsb	r5, r5, #15
 80075ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80075d2:	4652      	mov	r2, sl
 80075d4:	465b      	mov	r3, fp
 80075d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075da:	f7f9 f80d 	bl	80005f8 <__aeabi_dmul>
 80075de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e0:	1b5d      	subs	r5, r3, r5
 80075e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075ea:	e78f      	b.n	800750c <_strtod_l+0x3cc>
 80075ec:	3316      	adds	r3, #22
 80075ee:	dba8      	blt.n	8007542 <_strtod_l+0x402>
 80075f0:	4b37      	ldr	r3, [pc, #220]	@ (80076d0 <_strtod_l+0x590>)
 80075f2:	eba9 0808 	sub.w	r8, r9, r8
 80075f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80075fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80075fe:	4650      	mov	r0, sl
 8007600:	4659      	mov	r1, fp
 8007602:	f7f9 f923 	bl	800084c <__aeabi_ddiv>
 8007606:	e783      	b.n	8007510 <_strtod_l+0x3d0>
 8007608:	4b32      	ldr	r3, [pc, #200]	@ (80076d4 <_strtod_l+0x594>)
 800760a:	9308      	str	r3, [sp, #32]
 800760c:	2300      	movs	r3, #0
 800760e:	1124      	asrs	r4, r4, #4
 8007610:	4650      	mov	r0, sl
 8007612:	4659      	mov	r1, fp
 8007614:	461e      	mov	r6, r3
 8007616:	2c01      	cmp	r4, #1
 8007618:	dc21      	bgt.n	800765e <_strtod_l+0x51e>
 800761a:	b10b      	cbz	r3, 8007620 <_strtod_l+0x4e0>
 800761c:	4682      	mov	sl, r0
 800761e:	468b      	mov	fp, r1
 8007620:	492c      	ldr	r1, [pc, #176]	@ (80076d4 <_strtod_l+0x594>)
 8007622:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007626:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800762a:	4652      	mov	r2, sl
 800762c:	465b      	mov	r3, fp
 800762e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007632:	f7f8 ffe1 	bl	80005f8 <__aeabi_dmul>
 8007636:	4b28      	ldr	r3, [pc, #160]	@ (80076d8 <_strtod_l+0x598>)
 8007638:	460a      	mov	r2, r1
 800763a:	400b      	ands	r3, r1
 800763c:	4927      	ldr	r1, [pc, #156]	@ (80076dc <_strtod_l+0x59c>)
 800763e:	428b      	cmp	r3, r1
 8007640:	4682      	mov	sl, r0
 8007642:	d898      	bhi.n	8007576 <_strtod_l+0x436>
 8007644:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007648:	428b      	cmp	r3, r1
 800764a:	bf86      	itte	hi
 800764c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80076e0 <_strtod_l+0x5a0>
 8007650:	f04f 3aff 	movhi.w	sl, #4294967295
 8007654:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007658:	2300      	movs	r3, #0
 800765a:	9308      	str	r3, [sp, #32]
 800765c:	e07a      	b.n	8007754 <_strtod_l+0x614>
 800765e:	07e2      	lsls	r2, r4, #31
 8007660:	d505      	bpl.n	800766e <_strtod_l+0x52e>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 ffc6 	bl	80005f8 <__aeabi_dmul>
 800766c:	2301      	movs	r3, #1
 800766e:	9a08      	ldr	r2, [sp, #32]
 8007670:	3208      	adds	r2, #8
 8007672:	3601      	adds	r6, #1
 8007674:	1064      	asrs	r4, r4, #1
 8007676:	9208      	str	r2, [sp, #32]
 8007678:	e7cd      	b.n	8007616 <_strtod_l+0x4d6>
 800767a:	d0ed      	beq.n	8007658 <_strtod_l+0x518>
 800767c:	4264      	negs	r4, r4
 800767e:	f014 020f 	ands.w	r2, r4, #15
 8007682:	d00a      	beq.n	800769a <_strtod_l+0x55a>
 8007684:	4b12      	ldr	r3, [pc, #72]	@ (80076d0 <_strtod_l+0x590>)
 8007686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800768a:	4650      	mov	r0, sl
 800768c:	4659      	mov	r1, fp
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f9 f8db 	bl	800084c <__aeabi_ddiv>
 8007696:	4682      	mov	sl, r0
 8007698:	468b      	mov	fp, r1
 800769a:	1124      	asrs	r4, r4, #4
 800769c:	d0dc      	beq.n	8007658 <_strtod_l+0x518>
 800769e:	2c1f      	cmp	r4, #31
 80076a0:	dd20      	ble.n	80076e4 <_strtod_l+0x5a4>
 80076a2:	2400      	movs	r4, #0
 80076a4:	46a0      	mov	r8, r4
 80076a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80076a8:	46a1      	mov	r9, r4
 80076aa:	9a05      	ldr	r2, [sp, #20]
 80076ac:	2322      	movs	r3, #34	@ 0x22
 80076ae:	f04f 0a00 	mov.w	sl, #0
 80076b2:	f04f 0b00 	mov.w	fp, #0
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	e768      	b.n	800758c <_strtod_l+0x44c>
 80076ba:	bf00      	nop
 80076bc:	0800bc65 	.word	0x0800bc65
 80076c0:	0800bc04 	.word	0x0800bc04
 80076c4:	0800bc5d 	.word	0x0800bc5d
 80076c8:	0800bd49 	.word	0x0800bd49
 80076cc:	0800bd45 	.word	0x0800bd45
 80076d0:	0800beb0 	.word	0x0800beb0
 80076d4:	0800be88 	.word	0x0800be88
 80076d8:	7ff00000 	.word	0x7ff00000
 80076dc:	7ca00000 	.word	0x7ca00000
 80076e0:	7fefffff 	.word	0x7fefffff
 80076e4:	f014 0310 	ands.w	r3, r4, #16
 80076e8:	bf18      	it	ne
 80076ea:	236a      	movne	r3, #106	@ 0x6a
 80076ec:	4ea9      	ldr	r6, [pc, #676]	@ (8007994 <_strtod_l+0x854>)
 80076ee:	9308      	str	r3, [sp, #32]
 80076f0:	4650      	mov	r0, sl
 80076f2:	4659      	mov	r1, fp
 80076f4:	2300      	movs	r3, #0
 80076f6:	07e2      	lsls	r2, r4, #31
 80076f8:	d504      	bpl.n	8007704 <_strtod_l+0x5c4>
 80076fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076fe:	f7f8 ff7b 	bl	80005f8 <__aeabi_dmul>
 8007702:	2301      	movs	r3, #1
 8007704:	1064      	asrs	r4, r4, #1
 8007706:	f106 0608 	add.w	r6, r6, #8
 800770a:	d1f4      	bne.n	80076f6 <_strtod_l+0x5b6>
 800770c:	b10b      	cbz	r3, 8007712 <_strtod_l+0x5d2>
 800770e:	4682      	mov	sl, r0
 8007710:	468b      	mov	fp, r1
 8007712:	9b08      	ldr	r3, [sp, #32]
 8007714:	b1b3      	cbz	r3, 8007744 <_strtod_l+0x604>
 8007716:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800771a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800771e:	2b00      	cmp	r3, #0
 8007720:	4659      	mov	r1, fp
 8007722:	dd0f      	ble.n	8007744 <_strtod_l+0x604>
 8007724:	2b1f      	cmp	r3, #31
 8007726:	dd55      	ble.n	80077d4 <_strtod_l+0x694>
 8007728:	2b34      	cmp	r3, #52	@ 0x34
 800772a:	bfde      	ittt	le
 800772c:	f04f 33ff 	movle.w	r3, #4294967295
 8007730:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007734:	4093      	lslle	r3, r2
 8007736:	f04f 0a00 	mov.w	sl, #0
 800773a:	bfcc      	ite	gt
 800773c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007740:	ea03 0b01 	andle.w	fp, r3, r1
 8007744:	2200      	movs	r2, #0
 8007746:	2300      	movs	r3, #0
 8007748:	4650      	mov	r0, sl
 800774a:	4659      	mov	r1, fp
 800774c:	f7f9 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007750:	2800      	cmp	r0, #0
 8007752:	d1a6      	bne.n	80076a2 <_strtod_l+0x562>
 8007754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800775a:	9805      	ldr	r0, [sp, #20]
 800775c:	462b      	mov	r3, r5
 800775e:	463a      	mov	r2, r7
 8007760:	f003 f82e 	bl	800a7c0 <__s2b>
 8007764:	900a      	str	r0, [sp, #40]	@ 0x28
 8007766:	2800      	cmp	r0, #0
 8007768:	f43f af05 	beq.w	8007576 <_strtod_l+0x436>
 800776c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800776e:	2a00      	cmp	r2, #0
 8007770:	eba9 0308 	sub.w	r3, r9, r8
 8007774:	bfa8      	it	ge
 8007776:	2300      	movge	r3, #0
 8007778:	9312      	str	r3, [sp, #72]	@ 0x48
 800777a:	2400      	movs	r4, #0
 800777c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007780:	9316      	str	r3, [sp, #88]	@ 0x58
 8007782:	46a0      	mov	r8, r4
 8007784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	6859      	ldr	r1, [r3, #4]
 800778a:	f002 ff71 	bl	800a670 <_Balloc>
 800778e:	4681      	mov	r9, r0
 8007790:	2800      	cmp	r0, #0
 8007792:	f43f aef4 	beq.w	800757e <_strtod_l+0x43e>
 8007796:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	3202      	adds	r2, #2
 800779c:	f103 010c 	add.w	r1, r3, #12
 80077a0:	0092      	lsls	r2, r2, #2
 80077a2:	300c      	adds	r0, #12
 80077a4:	f001 fc8f 	bl	80090c6 <memcpy>
 80077a8:	ec4b ab10 	vmov	d0, sl, fp
 80077ac:	9805      	ldr	r0, [sp, #20]
 80077ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80077b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80077b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80077b6:	f003 fb3f 	bl	800ae38 <__d2b>
 80077ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80077bc:	2800      	cmp	r0, #0
 80077be:	f43f aede 	beq.w	800757e <_strtod_l+0x43e>
 80077c2:	9805      	ldr	r0, [sp, #20]
 80077c4:	2101      	movs	r1, #1
 80077c6:	f003 f891 	bl	800a8ec <__i2b>
 80077ca:	4680      	mov	r8, r0
 80077cc:	b948      	cbnz	r0, 80077e2 <_strtod_l+0x6a2>
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	e6d4      	b.n	800757e <_strtod_l+0x43e>
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	ea03 0a0a 	and.w	sl, r3, sl
 80077e0:	e7b0      	b.n	8007744 <_strtod_l+0x604>
 80077e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80077e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	bfab      	itete	ge
 80077ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80077ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80077ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80077f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80077f2:	bfac      	ite	ge
 80077f4:	18ef      	addge	r7, r5, r3
 80077f6:	1b5e      	sublt	r6, r3, r5
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	1aed      	subs	r5, r5, r3
 80077fc:	4415      	add	r5, r2
 80077fe:	4b66      	ldr	r3, [pc, #408]	@ (8007998 <_strtod_l+0x858>)
 8007800:	3d01      	subs	r5, #1
 8007802:	429d      	cmp	r5, r3
 8007804:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007808:	da50      	bge.n	80078ac <_strtod_l+0x76c>
 800780a:	1b5b      	subs	r3, r3, r5
 800780c:	2b1f      	cmp	r3, #31
 800780e:	eba2 0203 	sub.w	r2, r2, r3
 8007812:	f04f 0101 	mov.w	r1, #1
 8007816:	dc3d      	bgt.n	8007894 <_strtod_l+0x754>
 8007818:	fa01 f303 	lsl.w	r3, r1, r3
 800781c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800781e:	2300      	movs	r3, #0
 8007820:	9310      	str	r3, [sp, #64]	@ 0x40
 8007822:	18bd      	adds	r5, r7, r2
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	42af      	cmp	r7, r5
 8007828:	4416      	add	r6, r2
 800782a:	441e      	add	r6, r3
 800782c:	463b      	mov	r3, r7
 800782e:	bfa8      	it	ge
 8007830:	462b      	movge	r3, r5
 8007832:	42b3      	cmp	r3, r6
 8007834:	bfa8      	it	ge
 8007836:	4633      	movge	r3, r6
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfc2      	ittt	gt
 800783c:	1aed      	subgt	r5, r5, r3
 800783e:	1af6      	subgt	r6, r6, r3
 8007840:	1aff      	subgt	r7, r7, r3
 8007842:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007844:	2b00      	cmp	r3, #0
 8007846:	dd16      	ble.n	8007876 <_strtod_l+0x736>
 8007848:	4641      	mov	r1, r8
 800784a:	9805      	ldr	r0, [sp, #20]
 800784c:	461a      	mov	r2, r3
 800784e:	f003 f90d 	bl	800aa6c <__pow5mult>
 8007852:	4680      	mov	r8, r0
 8007854:	2800      	cmp	r0, #0
 8007856:	d0ba      	beq.n	80077ce <_strtod_l+0x68e>
 8007858:	4601      	mov	r1, r0
 800785a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800785c:	9805      	ldr	r0, [sp, #20]
 800785e:	f003 f85b 	bl	800a918 <__multiply>
 8007862:	900e      	str	r0, [sp, #56]	@ 0x38
 8007864:	2800      	cmp	r0, #0
 8007866:	f43f ae8a 	beq.w	800757e <_strtod_l+0x43e>
 800786a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800786c:	9805      	ldr	r0, [sp, #20]
 800786e:	f002 ff3f 	bl	800a6f0 <_Bfree>
 8007872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007874:	931a      	str	r3, [sp, #104]	@ 0x68
 8007876:	2d00      	cmp	r5, #0
 8007878:	dc1d      	bgt.n	80078b6 <_strtod_l+0x776>
 800787a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	dd23      	ble.n	80078c8 <_strtod_l+0x788>
 8007880:	4649      	mov	r1, r9
 8007882:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007884:	9805      	ldr	r0, [sp, #20]
 8007886:	f003 f8f1 	bl	800aa6c <__pow5mult>
 800788a:	4681      	mov	r9, r0
 800788c:	b9e0      	cbnz	r0, 80078c8 <_strtod_l+0x788>
 800788e:	f04f 0900 	mov.w	r9, #0
 8007892:	e674      	b.n	800757e <_strtod_l+0x43e>
 8007894:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007898:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800789c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80078a0:	35e2      	adds	r5, #226	@ 0xe2
 80078a2:	fa01 f305 	lsl.w	r3, r1, r5
 80078a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80078a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80078aa:	e7ba      	b.n	8007822 <_strtod_l+0x6e2>
 80078ac:	2300      	movs	r3, #0
 80078ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80078b0:	2301      	movs	r3, #1
 80078b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078b4:	e7b5      	b.n	8007822 <_strtod_l+0x6e2>
 80078b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078b8:	9805      	ldr	r0, [sp, #20]
 80078ba:	462a      	mov	r2, r5
 80078bc:	f003 f930 	bl	800ab20 <__lshift>
 80078c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1d9      	bne.n	800787a <_strtod_l+0x73a>
 80078c6:	e65a      	b.n	800757e <_strtod_l+0x43e>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	dd07      	ble.n	80078dc <_strtod_l+0x79c>
 80078cc:	4649      	mov	r1, r9
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	4632      	mov	r2, r6
 80078d2:	f003 f925 	bl	800ab20 <__lshift>
 80078d6:	4681      	mov	r9, r0
 80078d8:	2800      	cmp	r0, #0
 80078da:	d0d8      	beq.n	800788e <_strtod_l+0x74e>
 80078dc:	2f00      	cmp	r7, #0
 80078de:	dd08      	ble.n	80078f2 <_strtod_l+0x7b2>
 80078e0:	4641      	mov	r1, r8
 80078e2:	9805      	ldr	r0, [sp, #20]
 80078e4:	463a      	mov	r2, r7
 80078e6:	f003 f91b 	bl	800ab20 <__lshift>
 80078ea:	4680      	mov	r8, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f43f ae46 	beq.w	800757e <_strtod_l+0x43e>
 80078f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078f4:	9805      	ldr	r0, [sp, #20]
 80078f6:	464a      	mov	r2, r9
 80078f8:	f003 f99a 	bl	800ac30 <__mdiff>
 80078fc:	4604      	mov	r4, r0
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f ae3d 	beq.w	800757e <_strtod_l+0x43e>
 8007904:	68c3      	ldr	r3, [r0, #12]
 8007906:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007908:	2300      	movs	r3, #0
 800790a:	60c3      	str	r3, [r0, #12]
 800790c:	4641      	mov	r1, r8
 800790e:	f003 f973 	bl	800abf8 <__mcmp>
 8007912:	2800      	cmp	r0, #0
 8007914:	da46      	bge.n	80079a4 <_strtod_l+0x864>
 8007916:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007918:	ea53 030a 	orrs.w	r3, r3, sl
 800791c:	d16c      	bne.n	80079f8 <_strtod_l+0x8b8>
 800791e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007922:	2b00      	cmp	r3, #0
 8007924:	d168      	bne.n	80079f8 <_strtod_l+0x8b8>
 8007926:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800792a:	0d1b      	lsrs	r3, r3, #20
 800792c:	051b      	lsls	r3, r3, #20
 800792e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007932:	d961      	bls.n	80079f8 <_strtod_l+0x8b8>
 8007934:	6963      	ldr	r3, [r4, #20]
 8007936:	b913      	cbnz	r3, 800793e <_strtod_l+0x7fe>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	2b01      	cmp	r3, #1
 800793c:	dd5c      	ble.n	80079f8 <_strtod_l+0x8b8>
 800793e:	4621      	mov	r1, r4
 8007940:	2201      	movs	r2, #1
 8007942:	9805      	ldr	r0, [sp, #20]
 8007944:	f003 f8ec 	bl	800ab20 <__lshift>
 8007948:	4641      	mov	r1, r8
 800794a:	4604      	mov	r4, r0
 800794c:	f003 f954 	bl	800abf8 <__mcmp>
 8007950:	2800      	cmp	r0, #0
 8007952:	dd51      	ble.n	80079f8 <_strtod_l+0x8b8>
 8007954:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007958:	9a08      	ldr	r2, [sp, #32]
 800795a:	0d1b      	lsrs	r3, r3, #20
 800795c:	051b      	lsls	r3, r3, #20
 800795e:	2a00      	cmp	r2, #0
 8007960:	d06b      	beq.n	8007a3a <_strtod_l+0x8fa>
 8007962:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007966:	d868      	bhi.n	8007a3a <_strtod_l+0x8fa>
 8007968:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800796c:	f67f ae9d 	bls.w	80076aa <_strtod_l+0x56a>
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <_strtod_l+0x85c>)
 8007972:	4650      	mov	r0, sl
 8007974:	4659      	mov	r1, fp
 8007976:	2200      	movs	r2, #0
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <_strtod_l+0x860>)
 800797e:	400b      	ands	r3, r1
 8007980:	4682      	mov	sl, r0
 8007982:	468b      	mov	fp, r1
 8007984:	2b00      	cmp	r3, #0
 8007986:	f47f ae05 	bne.w	8007594 <_strtod_l+0x454>
 800798a:	9a05      	ldr	r2, [sp, #20]
 800798c:	2322      	movs	r3, #34	@ 0x22
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	e600      	b.n	8007594 <_strtod_l+0x454>
 8007992:	bf00      	nop
 8007994:	0800bc30 	.word	0x0800bc30
 8007998:	fffffc02 	.word	0xfffffc02
 800799c:	39500000 	.word	0x39500000
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80079a8:	d165      	bne.n	8007a76 <_strtod_l+0x936>
 80079aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80079ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079b0:	b35a      	cbz	r2, 8007a0a <_strtod_l+0x8ca>
 80079b2:	4a9f      	ldr	r2, [pc, #636]	@ (8007c30 <_strtod_l+0xaf0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d12b      	bne.n	8007a10 <_strtod_l+0x8d0>
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	4651      	mov	r1, sl
 80079bc:	b303      	cbz	r3, 8007a00 <_strtod_l+0x8c0>
 80079be:	4b9d      	ldr	r3, [pc, #628]	@ (8007c34 <_strtod_l+0xaf4>)
 80079c0:	465a      	mov	r2, fp
 80079c2:	4013      	ands	r3, r2
 80079c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80079c8:	f04f 32ff 	mov.w	r2, #4294967295
 80079cc:	d81b      	bhi.n	8007a06 <_strtod_l+0x8c6>
 80079ce:	0d1b      	lsrs	r3, r3, #20
 80079d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	4299      	cmp	r1, r3
 80079da:	d119      	bne.n	8007a10 <_strtod_l+0x8d0>
 80079dc:	4b96      	ldr	r3, [pc, #600]	@ (8007c38 <_strtod_l+0xaf8>)
 80079de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d102      	bne.n	80079ea <_strtod_l+0x8aa>
 80079e4:	3101      	adds	r1, #1
 80079e6:	f43f adca 	beq.w	800757e <_strtod_l+0x43e>
 80079ea:	4b92      	ldr	r3, [pc, #584]	@ (8007c34 <_strtod_l+0xaf4>)
 80079ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ee:	401a      	ands	r2, r3
 80079f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80079f4:	f04f 0a00 	mov.w	sl, #0
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1b8      	bne.n	8007970 <_strtod_l+0x830>
 80079fe:	e5c9      	b.n	8007594 <_strtod_l+0x454>
 8007a00:	f04f 33ff 	mov.w	r3, #4294967295
 8007a04:	e7e8      	b.n	80079d8 <_strtod_l+0x898>
 8007a06:	4613      	mov	r3, r2
 8007a08:	e7e6      	b.n	80079d8 <_strtod_l+0x898>
 8007a0a:	ea53 030a 	orrs.w	r3, r3, sl
 8007a0e:	d0a1      	beq.n	8007954 <_strtod_l+0x814>
 8007a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a12:	b1db      	cbz	r3, 8007a4c <_strtod_l+0x90c>
 8007a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a16:	4213      	tst	r3, r2
 8007a18:	d0ee      	beq.n	80079f8 <_strtod_l+0x8b8>
 8007a1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a1c:	9a08      	ldr	r2, [sp, #32]
 8007a1e:	4650      	mov	r0, sl
 8007a20:	4659      	mov	r1, fp
 8007a22:	b1bb      	cbz	r3, 8007a54 <_strtod_l+0x914>
 8007a24:	f7ff fb6b 	bl	80070fe <sulp>
 8007a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a2c:	ec53 2b10 	vmov	r2, r3, d0
 8007a30:	f7f8 fc2c 	bl	800028c <__adddf3>
 8007a34:	4682      	mov	sl, r0
 8007a36:	468b      	mov	fp, r1
 8007a38:	e7de      	b.n	80079f8 <_strtod_l+0x8b8>
 8007a3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a46:	f04f 3aff 	mov.w	sl, #4294967295
 8007a4a:	e7d5      	b.n	80079f8 <_strtod_l+0x8b8>
 8007a4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a4e:	ea13 0f0a 	tst.w	r3, sl
 8007a52:	e7e1      	b.n	8007a18 <_strtod_l+0x8d8>
 8007a54:	f7ff fb53 	bl	80070fe <sulp>
 8007a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a5c:	ec53 2b10 	vmov	r2, r3, d0
 8007a60:	f7f8 fc12 	bl	8000288 <__aeabi_dsub>
 8007a64:	2200      	movs	r2, #0
 8007a66:	2300      	movs	r3, #0
 8007a68:	4682      	mov	sl, r0
 8007a6a:	468b      	mov	fp, r1
 8007a6c:	f7f9 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d0c1      	beq.n	80079f8 <_strtod_l+0x8b8>
 8007a74:	e619      	b.n	80076aa <_strtod_l+0x56a>
 8007a76:	4641      	mov	r1, r8
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f003 fa35 	bl	800aee8 <__ratio>
 8007a7e:	ec57 6b10 	vmov	r6, r7, d0
 8007a82:	2200      	movs	r2, #0
 8007a84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f9 f830 	bl	8000af0 <__aeabi_dcmple>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d06f      	beq.n	8007b74 <_strtod_l+0xa34>
 8007a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d17a      	bne.n	8007b90 <_strtod_l+0xa50>
 8007a9a:	f1ba 0f00 	cmp.w	sl, #0
 8007a9e:	d158      	bne.n	8007b52 <_strtod_l+0xa12>
 8007aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d15a      	bne.n	8007b60 <_strtod_l+0xa20>
 8007aaa:	4b64      	ldr	r3, [pc, #400]	@ (8007c3c <_strtod_l+0xafc>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f9 f813 	bl	8000adc <__aeabi_dcmplt>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d159      	bne.n	8007b6e <_strtod_l+0xa2e>
 8007aba:	4630      	mov	r0, r6
 8007abc:	4639      	mov	r1, r7
 8007abe:	4b60      	ldr	r3, [pc, #384]	@ (8007c40 <_strtod_l+0xb00>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f7f8 fd99 	bl	80005f8 <__aeabi_dmul>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007ace:	9606      	str	r6, [sp, #24]
 8007ad0:	9307      	str	r3, [sp, #28]
 8007ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ad6:	4d57      	ldr	r5, [pc, #348]	@ (8007c34 <_strtod_l+0xaf4>)
 8007ad8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ade:	401d      	ands	r5, r3
 8007ae0:	4b58      	ldr	r3, [pc, #352]	@ (8007c44 <_strtod_l+0xb04>)
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	f040 80b2 	bne.w	8007c4c <_strtod_l+0xb0c>
 8007ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007aee:	ec4b ab10 	vmov	d0, sl, fp
 8007af2:	f003 f931 	bl	800ad58 <__ulp>
 8007af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007afa:	ec51 0b10 	vmov	r0, r1, d0
 8007afe:	f7f8 fd7b 	bl	80005f8 <__aeabi_dmul>
 8007b02:	4652      	mov	r2, sl
 8007b04:	465b      	mov	r3, fp
 8007b06:	f7f8 fbc1 	bl	800028c <__adddf3>
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4949      	ldr	r1, [pc, #292]	@ (8007c34 <_strtod_l+0xaf4>)
 8007b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c48 <_strtod_l+0xb08>)
 8007b10:	4019      	ands	r1, r3
 8007b12:	4291      	cmp	r1, r2
 8007b14:	4682      	mov	sl, r0
 8007b16:	d942      	bls.n	8007b9e <_strtod_l+0xa5e>
 8007b18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b1a:	4b47      	ldr	r3, [pc, #284]	@ (8007c38 <_strtod_l+0xaf8>)
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d103      	bne.n	8007b28 <_strtod_l+0x9e8>
 8007b20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b22:	3301      	adds	r3, #1
 8007b24:	f43f ad2b 	beq.w	800757e <_strtod_l+0x43e>
 8007b28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007c38 <_strtod_l+0xaf8>
 8007b2c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b32:	9805      	ldr	r0, [sp, #20]
 8007b34:	f002 fddc 	bl	800a6f0 <_Bfree>
 8007b38:	9805      	ldr	r0, [sp, #20]
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	f002 fdd8 	bl	800a6f0 <_Bfree>
 8007b40:	9805      	ldr	r0, [sp, #20]
 8007b42:	4641      	mov	r1, r8
 8007b44:	f002 fdd4 	bl	800a6f0 <_Bfree>
 8007b48:	9805      	ldr	r0, [sp, #20]
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	f002 fdd0 	bl	800a6f0 <_Bfree>
 8007b50:	e618      	b.n	8007784 <_strtod_l+0x644>
 8007b52:	f1ba 0f01 	cmp.w	sl, #1
 8007b56:	d103      	bne.n	8007b60 <_strtod_l+0xa20>
 8007b58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f43f ada5 	beq.w	80076aa <_strtod_l+0x56a>
 8007b60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007c10 <_strtod_l+0xad0>
 8007b64:	4f35      	ldr	r7, [pc, #212]	@ (8007c3c <_strtod_l+0xafc>)
 8007b66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	e7b1      	b.n	8007ad2 <_strtod_l+0x992>
 8007b6e:	4f34      	ldr	r7, [pc, #208]	@ (8007c40 <_strtod_l+0xb00>)
 8007b70:	2600      	movs	r6, #0
 8007b72:	e7aa      	b.n	8007aca <_strtod_l+0x98a>
 8007b74:	4b32      	ldr	r3, [pc, #200]	@ (8007c40 <_strtod_l+0xb00>)
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b82:	4606      	mov	r6, r0
 8007b84:	460f      	mov	r7, r1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d09f      	beq.n	8007aca <_strtod_l+0x98a>
 8007b8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b8e:	e7a0      	b.n	8007ad2 <_strtod_l+0x992>
 8007b90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007c18 <_strtod_l+0xad8>
 8007b94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b98:	ec57 6b17 	vmov	r6, r7, d7
 8007b9c:	e799      	b.n	8007ad2 <_strtod_l+0x992>
 8007b9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ba2:	9b08      	ldr	r3, [sp, #32]
 8007ba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1c1      	bne.n	8007b30 <_strtod_l+0x9f0>
 8007bac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007bb0:	0d1b      	lsrs	r3, r3, #20
 8007bb2:	051b      	lsls	r3, r3, #20
 8007bb4:	429d      	cmp	r5, r3
 8007bb6:	d1bb      	bne.n	8007b30 <_strtod_l+0x9f0>
 8007bb8:	4630      	mov	r0, r6
 8007bba:	4639      	mov	r1, r7
 8007bbc:	f7f9 f87c 	bl	8000cb8 <__aeabi_d2lz>
 8007bc0:	f7f8 fcec 	bl	800059c <__aeabi_l2d>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 fb5c 	bl	8000288 <__aeabi_dsub>
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007bd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bde:	ea46 060a 	orr.w	r6, r6, sl
 8007be2:	431e      	orrs	r6, r3
 8007be4:	d06f      	beq.n	8007cc6 <_strtod_l+0xb86>
 8007be6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c20 <_strtod_l+0xae0>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 ff76 	bl	8000adc <__aeabi_dcmplt>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f47f accf 	bne.w	8007594 <_strtod_l+0x454>
 8007bf6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007c28 <_strtod_l+0xae8>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c00:	f7f8 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d093      	beq.n	8007b30 <_strtod_l+0x9f0>
 8007c08:	e4c4      	b.n	8007594 <_strtod_l+0x454>
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w
 8007c10:	00000000 	.word	0x00000000
 8007c14:	bff00000 	.word	0xbff00000
 8007c18:	00000000 	.word	0x00000000
 8007c1c:	3ff00000 	.word	0x3ff00000
 8007c20:	94a03595 	.word	0x94a03595
 8007c24:	3fdfffff 	.word	0x3fdfffff
 8007c28:	35afe535 	.word	0x35afe535
 8007c2c:	3fe00000 	.word	0x3fe00000
 8007c30:	000fffff 	.word	0x000fffff
 8007c34:	7ff00000 	.word	0x7ff00000
 8007c38:	7fefffff 	.word	0x7fefffff
 8007c3c:	3ff00000 	.word	0x3ff00000
 8007c40:	3fe00000 	.word	0x3fe00000
 8007c44:	7fe00000 	.word	0x7fe00000
 8007c48:	7c9fffff 	.word	0x7c9fffff
 8007c4c:	9b08      	ldr	r3, [sp, #32]
 8007c4e:	b323      	cbz	r3, 8007c9a <_strtod_l+0xb5a>
 8007c50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c54:	d821      	bhi.n	8007c9a <_strtod_l+0xb5a>
 8007c56:	a328      	add	r3, pc, #160	@ (adr r3, 8007cf8 <_strtod_l+0xbb8>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f7f8 ff46 	bl	8000af0 <__aeabi_dcmple>
 8007c64:	b1a0      	cbz	r0, 8007c90 <_strtod_l+0xb50>
 8007c66:	4639      	mov	r1, r7
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f7f8 ff9d 	bl	8000ba8 <__aeabi_d2uiz>
 8007c6e:	2801      	cmp	r0, #1
 8007c70:	bf38      	it	cc
 8007c72:	2001      	movcc	r0, #1
 8007c74:	f7f8 fc46 	bl	8000504 <__aeabi_ui2d>
 8007c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	460f      	mov	r7, r1
 8007c7e:	b9fb      	cbnz	r3, 8007cc0 <_strtod_l+0xb80>
 8007c80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c84:	9014      	str	r0, [sp, #80]	@ 0x50
 8007c86:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007c8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c96:	1b5b      	subs	r3, r3, r5
 8007c98:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007ca2:	f003 f859 	bl	800ad58 <__ulp>
 8007ca6:	4650      	mov	r0, sl
 8007ca8:	ec53 2b10 	vmov	r2, r3, d0
 8007cac:	4659      	mov	r1, fp
 8007cae:	f7f8 fca3 	bl	80005f8 <__aeabi_dmul>
 8007cb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007cb6:	f7f8 fae9 	bl	800028c <__adddf3>
 8007cba:	4682      	mov	sl, r0
 8007cbc:	468b      	mov	fp, r1
 8007cbe:	e770      	b.n	8007ba2 <_strtod_l+0xa62>
 8007cc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007cc4:	e7e0      	b.n	8007c88 <_strtod_l+0xb48>
 8007cc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d00 <_strtod_l+0xbc0>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 ff06 	bl	8000adc <__aeabi_dcmplt>
 8007cd0:	e798      	b.n	8007c04 <_strtod_l+0xac4>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	f7ff ba6d 	b.w	80071ba <_strtod_l+0x7a>
 8007ce0:	2a65      	cmp	r2, #101	@ 0x65
 8007ce2:	f43f ab66 	beq.w	80073b2 <_strtod_l+0x272>
 8007ce6:	2a45      	cmp	r2, #69	@ 0x45
 8007ce8:	f43f ab63 	beq.w	80073b2 <_strtod_l+0x272>
 8007cec:	2301      	movs	r3, #1
 8007cee:	f7ff bb9e 	b.w	800742e <_strtod_l+0x2ee>
 8007cf2:	bf00      	nop
 8007cf4:	f3af 8000 	nop.w
 8007cf8:	ffc00000 	.word	0xffc00000
 8007cfc:	41dfffff 	.word	0x41dfffff
 8007d00:	94a03595 	.word	0x94a03595
 8007d04:	3fcfffff 	.word	0x3fcfffff

08007d08 <_strtod_r>:
 8007d08:	4b01      	ldr	r3, [pc, #4]	@ (8007d10 <_strtod_r+0x8>)
 8007d0a:	f7ff ba19 	b.w	8007140 <_strtod_l>
 8007d0e:	bf00      	nop
 8007d10:	20000098 	.word	0x20000098

08007d14 <strtod>:
 8007d14:	460a      	mov	r2, r1
 8007d16:	4601      	mov	r1, r0
 8007d18:	4802      	ldr	r0, [pc, #8]	@ (8007d24 <strtod+0x10>)
 8007d1a:	4b03      	ldr	r3, [pc, #12]	@ (8007d28 <strtod+0x14>)
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f7ff ba0f 	b.w	8007140 <_strtod_l>
 8007d22:	bf00      	nop
 8007d24:	20000204 	.word	0x20000204
 8007d28:	20000098 	.word	0x20000098

08007d2c <__cvt>:
 8007d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	ec57 6b10 	vmov	r6, r7, d0
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	460c      	mov	r4, r1
 8007d38:	4619      	mov	r1, r3
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	bfbb      	ittet	lt
 8007d3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d42:	461f      	movlt	r7, r3
 8007d44:	2300      	movge	r3, #0
 8007d46:	232d      	movlt	r3, #45	@ 0x2d
 8007d48:	700b      	strb	r3, [r1, #0]
 8007d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d50:	4691      	mov	r9, r2
 8007d52:	f023 0820 	bic.w	r8, r3, #32
 8007d56:	bfbc      	itt	lt
 8007d58:	4632      	movlt	r2, r6
 8007d5a:	4616      	movlt	r6, r2
 8007d5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d60:	d005      	beq.n	8007d6e <__cvt+0x42>
 8007d62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d66:	d100      	bne.n	8007d6a <__cvt+0x3e>
 8007d68:	3401      	adds	r4, #1
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	e000      	b.n	8007d70 <__cvt+0x44>
 8007d6e:	2103      	movs	r1, #3
 8007d70:	ab03      	add	r3, sp, #12
 8007d72:	9301      	str	r3, [sp, #4]
 8007d74:	ab02      	add	r3, sp, #8
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	ec47 6b10 	vmov	d0, r6, r7
 8007d7c:	4653      	mov	r3, sl
 8007d7e:	4622      	mov	r2, r4
 8007d80:	f001 fa66 	bl	8009250 <_dtoa_r>
 8007d84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d88:	4605      	mov	r5, r0
 8007d8a:	d119      	bne.n	8007dc0 <__cvt+0x94>
 8007d8c:	f019 0f01 	tst.w	r9, #1
 8007d90:	d00e      	beq.n	8007db0 <__cvt+0x84>
 8007d92:	eb00 0904 	add.w	r9, r0, r4
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	f7f8 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da2:	b108      	cbz	r0, 8007da8 <__cvt+0x7c>
 8007da4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007da8:	2230      	movs	r2, #48	@ 0x30
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	454b      	cmp	r3, r9
 8007dae:	d31e      	bcc.n	8007dee <__cvt+0xc2>
 8007db0:	9b03      	ldr	r3, [sp, #12]
 8007db2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007db4:	1b5b      	subs	r3, r3, r5
 8007db6:	4628      	mov	r0, r5
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	b004      	add	sp, #16
 8007dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007dc4:	eb00 0904 	add.w	r9, r0, r4
 8007dc8:	d1e5      	bne.n	8007d96 <__cvt+0x6a>
 8007dca:	7803      	ldrb	r3, [r0, #0]
 8007dcc:	2b30      	cmp	r3, #48	@ 0x30
 8007dce:	d10a      	bne.n	8007de6 <__cvt+0xba>
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ddc:	b918      	cbnz	r0, 8007de6 <__cvt+0xba>
 8007dde:	f1c4 0401 	rsb	r4, r4, #1
 8007de2:	f8ca 4000 	str.w	r4, [sl]
 8007de6:	f8da 3000 	ldr.w	r3, [sl]
 8007dea:	4499      	add	r9, r3
 8007dec:	e7d3      	b.n	8007d96 <__cvt+0x6a>
 8007dee:	1c59      	adds	r1, r3, #1
 8007df0:	9103      	str	r1, [sp, #12]
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	e7d9      	b.n	8007daa <__cvt+0x7e>

08007df6 <__exponent>:
 8007df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	bfba      	itte	lt
 8007dfc:	4249      	neglt	r1, r1
 8007dfe:	232d      	movlt	r3, #45	@ 0x2d
 8007e00:	232b      	movge	r3, #43	@ 0x2b
 8007e02:	2909      	cmp	r1, #9
 8007e04:	7002      	strb	r2, [r0, #0]
 8007e06:	7043      	strb	r3, [r0, #1]
 8007e08:	dd29      	ble.n	8007e5e <__exponent+0x68>
 8007e0a:	f10d 0307 	add.w	r3, sp, #7
 8007e0e:	461d      	mov	r5, r3
 8007e10:	270a      	movs	r7, #10
 8007e12:	461a      	mov	r2, r3
 8007e14:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e18:	fb07 1416 	mls	r4, r7, r6, r1
 8007e1c:	3430      	adds	r4, #48	@ 0x30
 8007e1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e22:	460c      	mov	r4, r1
 8007e24:	2c63      	cmp	r4, #99	@ 0x63
 8007e26:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	dcf1      	bgt.n	8007e12 <__exponent+0x1c>
 8007e2e:	3130      	adds	r1, #48	@ 0x30
 8007e30:	1e94      	subs	r4, r2, #2
 8007e32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e36:	1c41      	adds	r1, r0, #1
 8007e38:	4623      	mov	r3, r4
 8007e3a:	42ab      	cmp	r3, r5
 8007e3c:	d30a      	bcc.n	8007e54 <__exponent+0x5e>
 8007e3e:	f10d 0309 	add.w	r3, sp, #9
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	42ac      	cmp	r4, r5
 8007e46:	bf88      	it	hi
 8007e48:	2300      	movhi	r3, #0
 8007e4a:	3302      	adds	r3, #2
 8007e4c:	4403      	add	r3, r0
 8007e4e:	1a18      	subs	r0, r3, r0
 8007e50:	b003      	add	sp, #12
 8007e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e5c:	e7ed      	b.n	8007e3a <__exponent+0x44>
 8007e5e:	2330      	movs	r3, #48	@ 0x30
 8007e60:	3130      	adds	r1, #48	@ 0x30
 8007e62:	7083      	strb	r3, [r0, #2]
 8007e64:	70c1      	strb	r1, [r0, #3]
 8007e66:	1d03      	adds	r3, r0, #4
 8007e68:	e7f1      	b.n	8007e4e <__exponent+0x58>
	...

08007e6c <_printf_float>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	b08d      	sub	sp, #52	@ 0x34
 8007e72:	460c      	mov	r4, r1
 8007e74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e78:	4616      	mov	r6, r2
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	f001 f8ab 	bl	8008fd8 <_localeconv_r>
 8007e82:	6803      	ldr	r3, [r0, #0]
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7f8 f9f2 	bl	8000270 <strlen>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e90:	f8d8 3000 	ldr.w	r3, [r8]
 8007e94:	9005      	str	r0, [sp, #20]
 8007e96:	3307      	adds	r3, #7
 8007e98:	f023 0307 	bic.w	r3, r3, #7
 8007e9c:	f103 0208 	add.w	r2, r3, #8
 8007ea0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ea4:	f8d4 b000 	ldr.w	fp, [r4]
 8007ea8:	f8c8 2000 	str.w	r2, [r8]
 8007eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007eb4:	9307      	str	r3, [sp, #28]
 8007eb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007eba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ec2:	4b9c      	ldr	r3, [pc, #624]	@ (8008134 <_printf_float+0x2c8>)
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec8:	f7f8 fe30 	bl	8000b2c <__aeabi_dcmpun>
 8007ecc:	bb70      	cbnz	r0, 8007f2c <_printf_float+0xc0>
 8007ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ed2:	4b98      	ldr	r3, [pc, #608]	@ (8008134 <_printf_float+0x2c8>)
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	f7f8 fe0a 	bl	8000af0 <__aeabi_dcmple>
 8007edc:	bb30      	cbnz	r0, 8007f2c <_printf_float+0xc0>
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4640      	mov	r0, r8
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	f7f8 fdf9 	bl	8000adc <__aeabi_dcmplt>
 8007eea:	b110      	cbz	r0, 8007ef2 <_printf_float+0x86>
 8007eec:	232d      	movs	r3, #45	@ 0x2d
 8007eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef2:	4a91      	ldr	r2, [pc, #580]	@ (8008138 <_printf_float+0x2cc>)
 8007ef4:	4b91      	ldr	r3, [pc, #580]	@ (800813c <_printf_float+0x2d0>)
 8007ef6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007efa:	bf94      	ite	ls
 8007efc:	4690      	movls	r8, r2
 8007efe:	4698      	movhi	r8, r3
 8007f00:	2303      	movs	r3, #3
 8007f02:	6123      	str	r3, [r4, #16]
 8007f04:	f02b 0304 	bic.w	r3, fp, #4
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	f04f 0900 	mov.w	r9, #0
 8007f0e:	9700      	str	r7, [sp, #0]
 8007f10:	4633      	mov	r3, r6
 8007f12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f9d2 	bl	80082c0 <_printf_common>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	f040 808d 	bne.w	800803c <_printf_float+0x1d0>
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	b00d      	add	sp, #52	@ 0x34
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	f7f8 fdfa 	bl	8000b2c <__aeabi_dcmpun>
 8007f38:	b140      	cbz	r0, 8007f4c <_printf_float+0xe0>
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bfbc      	itt	lt
 8007f40:	232d      	movlt	r3, #45	@ 0x2d
 8007f42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f46:	4a7e      	ldr	r2, [pc, #504]	@ (8008140 <_printf_float+0x2d4>)
 8007f48:	4b7e      	ldr	r3, [pc, #504]	@ (8008144 <_printf_float+0x2d8>)
 8007f4a:	e7d4      	b.n	8007ef6 <_printf_float+0x8a>
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f52:	9206      	str	r2, [sp, #24]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	d13b      	bne.n	8007fd0 <_printf_float+0x164>
 8007f58:	2306      	movs	r3, #6
 8007f5a:	6063      	str	r3, [r4, #4]
 8007f5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f60:	2300      	movs	r3, #0
 8007f62:	6022      	str	r2, [r4, #0]
 8007f64:	9303      	str	r3, [sp, #12]
 8007f66:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f6c:	ab09      	add	r3, sp, #36	@ 0x24
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	6861      	ldr	r1, [r4, #4]
 8007f72:	ec49 8b10 	vmov	d0, r8, r9
 8007f76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f7ff fed6 	bl	8007d2c <__cvt>
 8007f80:	9b06      	ldr	r3, [sp, #24]
 8007f82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f84:	2b47      	cmp	r3, #71	@ 0x47
 8007f86:	4680      	mov	r8, r0
 8007f88:	d129      	bne.n	8007fde <_printf_float+0x172>
 8007f8a:	1cc8      	adds	r0, r1, #3
 8007f8c:	db02      	blt.n	8007f94 <_printf_float+0x128>
 8007f8e:	6863      	ldr	r3, [r4, #4]
 8007f90:	4299      	cmp	r1, r3
 8007f92:	dd41      	ble.n	8008018 <_printf_float+0x1ac>
 8007f94:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f98:	fa5f fa8a 	uxtb.w	sl, sl
 8007f9c:	3901      	subs	r1, #1
 8007f9e:	4652      	mov	r2, sl
 8007fa0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fa4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fa6:	f7ff ff26 	bl	8007df6 <__exponent>
 8007faa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fac:	1813      	adds	r3, r2, r0
 8007fae:	2a01      	cmp	r2, #1
 8007fb0:	4681      	mov	r9, r0
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	dc02      	bgt.n	8007fbc <_printf_float+0x150>
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	07d2      	lsls	r2, r2, #31
 8007fba:	d501      	bpl.n	8007fc0 <_printf_float+0x154>
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	6123      	str	r3, [r4, #16]
 8007fc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0a2      	beq.n	8007f0e <_printf_float+0xa2>
 8007fc8:	232d      	movs	r3, #45	@ 0x2d
 8007fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fce:	e79e      	b.n	8007f0e <_printf_float+0xa2>
 8007fd0:	9a06      	ldr	r2, [sp, #24]
 8007fd2:	2a47      	cmp	r2, #71	@ 0x47
 8007fd4:	d1c2      	bne.n	8007f5c <_printf_float+0xf0>
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1c0      	bne.n	8007f5c <_printf_float+0xf0>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e7bd      	b.n	8007f5a <_printf_float+0xee>
 8007fde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fe2:	d9db      	bls.n	8007f9c <_printf_float+0x130>
 8007fe4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007fe8:	d118      	bne.n	800801c <_printf_float+0x1b0>
 8007fea:	2900      	cmp	r1, #0
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	dd0b      	ble.n	8008008 <_printf_float+0x19c>
 8007ff0:	6121      	str	r1, [r4, #16]
 8007ff2:	b913      	cbnz	r3, 8007ffa <_printf_float+0x18e>
 8007ff4:	6822      	ldr	r2, [r4, #0]
 8007ff6:	07d0      	lsls	r0, r2, #31
 8007ff8:	d502      	bpl.n	8008000 <_printf_float+0x194>
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	440b      	add	r3, r1
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	e7db      	b.n	8007fc0 <_printf_float+0x154>
 8008008:	b913      	cbnz	r3, 8008010 <_printf_float+0x1a4>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	07d2      	lsls	r2, r2, #31
 800800e:	d501      	bpl.n	8008014 <_printf_float+0x1a8>
 8008010:	3302      	adds	r3, #2
 8008012:	e7f4      	b.n	8007ffe <_printf_float+0x192>
 8008014:	2301      	movs	r3, #1
 8008016:	e7f2      	b.n	8007ffe <_printf_float+0x192>
 8008018:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800801c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801e:	4299      	cmp	r1, r3
 8008020:	db05      	blt.n	800802e <_printf_float+0x1c2>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	6121      	str	r1, [r4, #16]
 8008026:	07d8      	lsls	r0, r3, #31
 8008028:	d5ea      	bpl.n	8008000 <_printf_float+0x194>
 800802a:	1c4b      	adds	r3, r1, #1
 800802c:	e7e7      	b.n	8007ffe <_printf_float+0x192>
 800802e:	2900      	cmp	r1, #0
 8008030:	bfd4      	ite	le
 8008032:	f1c1 0202 	rsble	r2, r1, #2
 8008036:	2201      	movgt	r2, #1
 8008038:	4413      	add	r3, r2
 800803a:	e7e0      	b.n	8007ffe <_printf_float+0x192>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	055a      	lsls	r2, r3, #21
 8008040:	d407      	bmi.n	8008052 <_printf_float+0x1e6>
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	4642      	mov	r2, r8
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	d12b      	bne.n	80080a8 <_printf_float+0x23c>
 8008050:	e767      	b.n	8007f22 <_printf_float+0xb6>
 8008052:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008056:	f240 80dd 	bls.w	8008214 <_printf_float+0x3a8>
 800805a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	f7f8 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008066:	2800      	cmp	r0, #0
 8008068:	d033      	beq.n	80080d2 <_printf_float+0x266>
 800806a:	4a37      	ldr	r2, [pc, #220]	@ (8008148 <_printf_float+0x2dc>)
 800806c:	2301      	movs	r3, #1
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f af54 	beq.w	8007f22 <_printf_float+0xb6>
 800807a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800807e:	4543      	cmp	r3, r8
 8008080:	db02      	blt.n	8008088 <_printf_float+0x21c>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	07d8      	lsls	r0, r3, #31
 8008086:	d50f      	bpl.n	80080a8 <_printf_float+0x23c>
 8008088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	f43f af45 	beq.w	8007f22 <_printf_float+0xb6>
 8008098:	f04f 0900 	mov.w	r9, #0
 800809c:	f108 38ff 	add.w	r8, r8, #4294967295
 80080a0:	f104 0a1a 	add.w	sl, r4, #26
 80080a4:	45c8      	cmp	r8, r9
 80080a6:	dc09      	bgt.n	80080bc <_printf_float+0x250>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	079b      	lsls	r3, r3, #30
 80080ac:	f100 8103 	bmi.w	80082b6 <_printf_float+0x44a>
 80080b0:	68e0      	ldr	r0, [r4, #12]
 80080b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b4:	4298      	cmp	r0, r3
 80080b6:	bfb8      	it	lt
 80080b8:	4618      	movlt	r0, r3
 80080ba:	e734      	b.n	8007f26 <_printf_float+0xba>
 80080bc:	2301      	movs	r3, #1
 80080be:	4652      	mov	r2, sl
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af2b 	beq.w	8007f22 <_printf_float+0xb6>
 80080cc:	f109 0901 	add.w	r9, r9, #1
 80080d0:	e7e8      	b.n	80080a4 <_printf_float+0x238>
 80080d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dc39      	bgt.n	800814c <_printf_float+0x2e0>
 80080d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008148 <_printf_float+0x2dc>)
 80080da:	2301      	movs	r3, #1
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f af1d 	beq.w	8007f22 <_printf_float+0xb6>
 80080e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080ec:	ea59 0303 	orrs.w	r3, r9, r3
 80080f0:	d102      	bne.n	80080f8 <_printf_float+0x28c>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	07d9      	lsls	r1, r3, #31
 80080f6:	d5d7      	bpl.n	80080a8 <_printf_float+0x23c>
 80080f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080fc:	4631      	mov	r1, r6
 80080fe:	4628      	mov	r0, r5
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	f43f af0d 	beq.w	8007f22 <_printf_float+0xb6>
 8008108:	f04f 0a00 	mov.w	sl, #0
 800810c:	f104 0b1a 	add.w	fp, r4, #26
 8008110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008112:	425b      	negs	r3, r3
 8008114:	4553      	cmp	r3, sl
 8008116:	dc01      	bgt.n	800811c <_printf_float+0x2b0>
 8008118:	464b      	mov	r3, r9
 800811a:	e793      	b.n	8008044 <_printf_float+0x1d8>
 800811c:	2301      	movs	r3, #1
 800811e:	465a      	mov	r2, fp
 8008120:	4631      	mov	r1, r6
 8008122:	4628      	mov	r0, r5
 8008124:	47b8      	blx	r7
 8008126:	3001      	adds	r0, #1
 8008128:	f43f aefb 	beq.w	8007f22 <_printf_float+0xb6>
 800812c:	f10a 0a01 	add.w	sl, sl, #1
 8008130:	e7ee      	b.n	8008110 <_printf_float+0x2a4>
 8008132:	bf00      	nop
 8008134:	7fefffff 	.word	0x7fefffff
 8008138:	0800bc58 	.word	0x0800bc58
 800813c:	0800bc5c 	.word	0x0800bc5c
 8008140:	0800bc60 	.word	0x0800bc60
 8008144:	0800bc64 	.word	0x0800bc64
 8008148:	0800bc68 	.word	0x0800bc68
 800814c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800814e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008152:	4553      	cmp	r3, sl
 8008154:	bfa8      	it	ge
 8008156:	4653      	movge	r3, sl
 8008158:	2b00      	cmp	r3, #0
 800815a:	4699      	mov	r9, r3
 800815c:	dc36      	bgt.n	80081cc <_printf_float+0x360>
 800815e:	f04f 0b00 	mov.w	fp, #0
 8008162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008166:	f104 021a 	add.w	r2, r4, #26
 800816a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800816c:	9306      	str	r3, [sp, #24]
 800816e:	eba3 0309 	sub.w	r3, r3, r9
 8008172:	455b      	cmp	r3, fp
 8008174:	dc31      	bgt.n	80081da <_printf_float+0x36e>
 8008176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008178:	459a      	cmp	sl, r3
 800817a:	dc3a      	bgt.n	80081f2 <_printf_float+0x386>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	07da      	lsls	r2, r3, #31
 8008180:	d437      	bmi.n	80081f2 <_printf_float+0x386>
 8008182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008184:	ebaa 0903 	sub.w	r9, sl, r3
 8008188:	9b06      	ldr	r3, [sp, #24]
 800818a:	ebaa 0303 	sub.w	r3, sl, r3
 800818e:	4599      	cmp	r9, r3
 8008190:	bfa8      	it	ge
 8008192:	4699      	movge	r9, r3
 8008194:	f1b9 0f00 	cmp.w	r9, #0
 8008198:	dc33      	bgt.n	8008202 <_printf_float+0x396>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a2:	f104 0b1a 	add.w	fp, r4, #26
 80081a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a8:	ebaa 0303 	sub.w	r3, sl, r3
 80081ac:	eba3 0309 	sub.w	r3, r3, r9
 80081b0:	4543      	cmp	r3, r8
 80081b2:	f77f af79 	ble.w	80080a8 <_printf_float+0x23c>
 80081b6:	2301      	movs	r3, #1
 80081b8:	465a      	mov	r2, fp
 80081ba:	4631      	mov	r1, r6
 80081bc:	4628      	mov	r0, r5
 80081be:	47b8      	blx	r7
 80081c0:	3001      	adds	r0, #1
 80081c2:	f43f aeae 	beq.w	8007f22 <_printf_float+0xb6>
 80081c6:	f108 0801 	add.w	r8, r8, #1
 80081ca:	e7ec      	b.n	80081a6 <_printf_float+0x33a>
 80081cc:	4642      	mov	r2, r8
 80081ce:	4631      	mov	r1, r6
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b8      	blx	r7
 80081d4:	3001      	adds	r0, #1
 80081d6:	d1c2      	bne.n	800815e <_printf_float+0x2f2>
 80081d8:	e6a3      	b.n	8007f22 <_printf_float+0xb6>
 80081da:	2301      	movs	r3, #1
 80081dc:	4631      	mov	r1, r6
 80081de:	4628      	mov	r0, r5
 80081e0:	9206      	str	r2, [sp, #24]
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	f43f ae9c 	beq.w	8007f22 <_printf_float+0xb6>
 80081ea:	9a06      	ldr	r2, [sp, #24]
 80081ec:	f10b 0b01 	add.w	fp, fp, #1
 80081f0:	e7bb      	b.n	800816a <_printf_float+0x2fe>
 80081f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	47b8      	blx	r7
 80081fc:	3001      	adds	r0, #1
 80081fe:	d1c0      	bne.n	8008182 <_printf_float+0x316>
 8008200:	e68f      	b.n	8007f22 <_printf_float+0xb6>
 8008202:	9a06      	ldr	r2, [sp, #24]
 8008204:	464b      	mov	r3, r9
 8008206:	4442      	add	r2, r8
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	d1c3      	bne.n	800819a <_printf_float+0x32e>
 8008212:	e686      	b.n	8007f22 <_printf_float+0xb6>
 8008214:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008218:	f1ba 0f01 	cmp.w	sl, #1
 800821c:	dc01      	bgt.n	8008222 <_printf_float+0x3b6>
 800821e:	07db      	lsls	r3, r3, #31
 8008220:	d536      	bpl.n	8008290 <_printf_float+0x424>
 8008222:	2301      	movs	r3, #1
 8008224:	4642      	mov	r2, r8
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	47b8      	blx	r7
 800822c:	3001      	adds	r0, #1
 800822e:	f43f ae78 	beq.w	8007f22 <_printf_float+0xb6>
 8008232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008236:	4631      	mov	r1, r6
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	f43f ae70 	beq.w	8007f22 <_printf_float+0xb6>
 8008242:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800824e:	f7f8 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008252:	b9c0      	cbnz	r0, 8008286 <_printf_float+0x41a>
 8008254:	4653      	mov	r3, sl
 8008256:	f108 0201 	add.w	r2, r8, #1
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	d10c      	bne.n	800827e <_printf_float+0x412>
 8008264:	e65d      	b.n	8007f22 <_printf_float+0xb6>
 8008266:	2301      	movs	r3, #1
 8008268:	465a      	mov	r2, fp
 800826a:	4631      	mov	r1, r6
 800826c:	4628      	mov	r0, r5
 800826e:	47b8      	blx	r7
 8008270:	3001      	adds	r0, #1
 8008272:	f43f ae56 	beq.w	8007f22 <_printf_float+0xb6>
 8008276:	f108 0801 	add.w	r8, r8, #1
 800827a:	45d0      	cmp	r8, sl
 800827c:	dbf3      	blt.n	8008266 <_printf_float+0x3fa>
 800827e:	464b      	mov	r3, r9
 8008280:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008284:	e6df      	b.n	8008046 <_printf_float+0x1da>
 8008286:	f04f 0800 	mov.w	r8, #0
 800828a:	f104 0b1a 	add.w	fp, r4, #26
 800828e:	e7f4      	b.n	800827a <_printf_float+0x40e>
 8008290:	2301      	movs	r3, #1
 8008292:	4642      	mov	r2, r8
 8008294:	e7e1      	b.n	800825a <_printf_float+0x3ee>
 8008296:	2301      	movs	r3, #1
 8008298:	464a      	mov	r2, r9
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	f43f ae3e 	beq.w	8007f22 <_printf_float+0xb6>
 80082a6:	f108 0801 	add.w	r8, r8, #1
 80082aa:	68e3      	ldr	r3, [r4, #12]
 80082ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082ae:	1a5b      	subs	r3, r3, r1
 80082b0:	4543      	cmp	r3, r8
 80082b2:	dcf0      	bgt.n	8008296 <_printf_float+0x42a>
 80082b4:	e6fc      	b.n	80080b0 <_printf_float+0x244>
 80082b6:	f04f 0800 	mov.w	r8, #0
 80082ba:	f104 0919 	add.w	r9, r4, #25
 80082be:	e7f4      	b.n	80082aa <_printf_float+0x43e>

080082c0 <_printf_common>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	4616      	mov	r6, r2
 80082c6:	4698      	mov	r8, r3
 80082c8:	688a      	ldr	r2, [r1, #8]
 80082ca:	690b      	ldr	r3, [r1, #16]
 80082cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	bfb8      	it	lt
 80082d4:	4613      	movlt	r3, r2
 80082d6:	6033      	str	r3, [r6, #0]
 80082d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082dc:	4607      	mov	r7, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	b10a      	cbz	r2, 80082e6 <_printf_common+0x26>
 80082e2:	3301      	adds	r3, #1
 80082e4:	6033      	str	r3, [r6, #0]
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	0699      	lsls	r1, r3, #26
 80082ea:	bf42      	ittt	mi
 80082ec:	6833      	ldrmi	r3, [r6, #0]
 80082ee:	3302      	addmi	r3, #2
 80082f0:	6033      	strmi	r3, [r6, #0]
 80082f2:	6825      	ldr	r5, [r4, #0]
 80082f4:	f015 0506 	ands.w	r5, r5, #6
 80082f8:	d106      	bne.n	8008308 <_printf_common+0x48>
 80082fa:	f104 0a19 	add.w	sl, r4, #25
 80082fe:	68e3      	ldr	r3, [r4, #12]
 8008300:	6832      	ldr	r2, [r6, #0]
 8008302:	1a9b      	subs	r3, r3, r2
 8008304:	42ab      	cmp	r3, r5
 8008306:	dc26      	bgt.n	8008356 <_printf_common+0x96>
 8008308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	3b00      	subs	r3, #0
 8008310:	bf18      	it	ne
 8008312:	2301      	movne	r3, #1
 8008314:	0692      	lsls	r2, r2, #26
 8008316:	d42b      	bmi.n	8008370 <_printf_common+0xb0>
 8008318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800831c:	4641      	mov	r1, r8
 800831e:	4638      	mov	r0, r7
 8008320:	47c8      	blx	r9
 8008322:	3001      	adds	r0, #1
 8008324:	d01e      	beq.n	8008364 <_printf_common+0xa4>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	6922      	ldr	r2, [r4, #16]
 800832a:	f003 0306 	and.w	r3, r3, #6
 800832e:	2b04      	cmp	r3, #4
 8008330:	bf02      	ittt	eq
 8008332:	68e5      	ldreq	r5, [r4, #12]
 8008334:	6833      	ldreq	r3, [r6, #0]
 8008336:	1aed      	subeq	r5, r5, r3
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	bf0c      	ite	eq
 800833c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008340:	2500      	movne	r5, #0
 8008342:	4293      	cmp	r3, r2
 8008344:	bfc4      	itt	gt
 8008346:	1a9b      	subgt	r3, r3, r2
 8008348:	18ed      	addgt	r5, r5, r3
 800834a:	2600      	movs	r6, #0
 800834c:	341a      	adds	r4, #26
 800834e:	42b5      	cmp	r5, r6
 8008350:	d11a      	bne.n	8008388 <_printf_common+0xc8>
 8008352:	2000      	movs	r0, #0
 8008354:	e008      	b.n	8008368 <_printf_common+0xa8>
 8008356:	2301      	movs	r3, #1
 8008358:	4652      	mov	r2, sl
 800835a:	4641      	mov	r1, r8
 800835c:	4638      	mov	r0, r7
 800835e:	47c8      	blx	r9
 8008360:	3001      	adds	r0, #1
 8008362:	d103      	bne.n	800836c <_printf_common+0xac>
 8008364:	f04f 30ff 	mov.w	r0, #4294967295
 8008368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836c:	3501      	adds	r5, #1
 800836e:	e7c6      	b.n	80082fe <_printf_common+0x3e>
 8008370:	18e1      	adds	r1, r4, r3
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	2030      	movs	r0, #48	@ 0x30
 8008376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800837a:	4422      	add	r2, r4
 800837c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008384:	3302      	adds	r3, #2
 8008386:	e7c7      	b.n	8008318 <_printf_common+0x58>
 8008388:	2301      	movs	r3, #1
 800838a:	4622      	mov	r2, r4
 800838c:	4641      	mov	r1, r8
 800838e:	4638      	mov	r0, r7
 8008390:	47c8      	blx	r9
 8008392:	3001      	adds	r0, #1
 8008394:	d0e6      	beq.n	8008364 <_printf_common+0xa4>
 8008396:	3601      	adds	r6, #1
 8008398:	e7d9      	b.n	800834e <_printf_common+0x8e>
	...

0800839c <_printf_i>:
 800839c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	7e0f      	ldrb	r7, [r1, #24]
 80083a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083a4:	2f78      	cmp	r7, #120	@ 0x78
 80083a6:	4691      	mov	r9, r2
 80083a8:	4680      	mov	r8, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	469a      	mov	sl, r3
 80083ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083b2:	d807      	bhi.n	80083c4 <_printf_i+0x28>
 80083b4:	2f62      	cmp	r7, #98	@ 0x62
 80083b6:	d80a      	bhi.n	80083ce <_printf_i+0x32>
 80083b8:	2f00      	cmp	r7, #0
 80083ba:	f000 80d2 	beq.w	8008562 <_printf_i+0x1c6>
 80083be:	2f58      	cmp	r7, #88	@ 0x58
 80083c0:	f000 80b9 	beq.w	8008536 <_printf_i+0x19a>
 80083c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083cc:	e03a      	b.n	8008444 <_printf_i+0xa8>
 80083ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083d2:	2b15      	cmp	r3, #21
 80083d4:	d8f6      	bhi.n	80083c4 <_printf_i+0x28>
 80083d6:	a101      	add	r1, pc, #4	@ (adr r1, 80083dc <_printf_i+0x40>)
 80083d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083dc:	08008435 	.word	0x08008435
 80083e0:	08008449 	.word	0x08008449
 80083e4:	080083c5 	.word	0x080083c5
 80083e8:	080083c5 	.word	0x080083c5
 80083ec:	080083c5 	.word	0x080083c5
 80083f0:	080083c5 	.word	0x080083c5
 80083f4:	08008449 	.word	0x08008449
 80083f8:	080083c5 	.word	0x080083c5
 80083fc:	080083c5 	.word	0x080083c5
 8008400:	080083c5 	.word	0x080083c5
 8008404:	080083c5 	.word	0x080083c5
 8008408:	08008549 	.word	0x08008549
 800840c:	08008473 	.word	0x08008473
 8008410:	08008503 	.word	0x08008503
 8008414:	080083c5 	.word	0x080083c5
 8008418:	080083c5 	.word	0x080083c5
 800841c:	0800856b 	.word	0x0800856b
 8008420:	080083c5 	.word	0x080083c5
 8008424:	08008473 	.word	0x08008473
 8008428:	080083c5 	.word	0x080083c5
 800842c:	080083c5 	.word	0x080083c5
 8008430:	0800850b 	.word	0x0800850b
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6032      	str	r2, [r6, #0]
 800843c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008444:	2301      	movs	r3, #1
 8008446:	e09d      	b.n	8008584 <_printf_i+0x1e8>
 8008448:	6833      	ldr	r3, [r6, #0]
 800844a:	6820      	ldr	r0, [r4, #0]
 800844c:	1d19      	adds	r1, r3, #4
 800844e:	6031      	str	r1, [r6, #0]
 8008450:	0606      	lsls	r6, r0, #24
 8008452:	d501      	bpl.n	8008458 <_printf_i+0xbc>
 8008454:	681d      	ldr	r5, [r3, #0]
 8008456:	e003      	b.n	8008460 <_printf_i+0xc4>
 8008458:	0645      	lsls	r5, r0, #25
 800845a:	d5fb      	bpl.n	8008454 <_printf_i+0xb8>
 800845c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008460:	2d00      	cmp	r5, #0
 8008462:	da03      	bge.n	800846c <_printf_i+0xd0>
 8008464:	232d      	movs	r3, #45	@ 0x2d
 8008466:	426d      	negs	r5, r5
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800846c:	4859      	ldr	r0, [pc, #356]	@ (80085d4 <_printf_i+0x238>)
 800846e:	230a      	movs	r3, #10
 8008470:	e011      	b.n	8008496 <_printf_i+0xfa>
 8008472:	6821      	ldr	r1, [r4, #0]
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	0608      	lsls	r0, r1, #24
 8008478:	f853 5b04 	ldr.w	r5, [r3], #4
 800847c:	d402      	bmi.n	8008484 <_printf_i+0xe8>
 800847e:	0649      	lsls	r1, r1, #25
 8008480:	bf48      	it	mi
 8008482:	b2ad      	uxthmi	r5, r5
 8008484:	2f6f      	cmp	r7, #111	@ 0x6f
 8008486:	4853      	ldr	r0, [pc, #332]	@ (80085d4 <_printf_i+0x238>)
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	bf14      	ite	ne
 800848c:	230a      	movne	r3, #10
 800848e:	2308      	moveq	r3, #8
 8008490:	2100      	movs	r1, #0
 8008492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008496:	6866      	ldr	r6, [r4, #4]
 8008498:	60a6      	str	r6, [r4, #8]
 800849a:	2e00      	cmp	r6, #0
 800849c:	bfa2      	ittt	ge
 800849e:	6821      	ldrge	r1, [r4, #0]
 80084a0:	f021 0104 	bicge.w	r1, r1, #4
 80084a4:	6021      	strge	r1, [r4, #0]
 80084a6:	b90d      	cbnz	r5, 80084ac <_printf_i+0x110>
 80084a8:	2e00      	cmp	r6, #0
 80084aa:	d04b      	beq.n	8008544 <_printf_i+0x1a8>
 80084ac:	4616      	mov	r6, r2
 80084ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80084b2:	fb03 5711 	mls	r7, r3, r1, r5
 80084b6:	5dc7      	ldrb	r7, [r0, r7]
 80084b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084bc:	462f      	mov	r7, r5
 80084be:	42bb      	cmp	r3, r7
 80084c0:	460d      	mov	r5, r1
 80084c2:	d9f4      	bls.n	80084ae <_printf_i+0x112>
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d10b      	bne.n	80084e0 <_printf_i+0x144>
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	07df      	lsls	r7, r3, #31
 80084cc:	d508      	bpl.n	80084e0 <_printf_i+0x144>
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	6861      	ldr	r1, [r4, #4]
 80084d2:	4299      	cmp	r1, r3
 80084d4:	bfde      	ittt	le
 80084d6:	2330      	movle	r3, #48	@ 0x30
 80084d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084e0:	1b92      	subs	r2, r2, r6
 80084e2:	6122      	str	r2, [r4, #16]
 80084e4:	f8cd a000 	str.w	sl, [sp]
 80084e8:	464b      	mov	r3, r9
 80084ea:	aa03      	add	r2, sp, #12
 80084ec:	4621      	mov	r1, r4
 80084ee:	4640      	mov	r0, r8
 80084f0:	f7ff fee6 	bl	80082c0 <_printf_common>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d14a      	bne.n	800858e <_printf_i+0x1f2>
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	b004      	add	sp, #16
 80084fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	f043 0320 	orr.w	r3, r3, #32
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	4833      	ldr	r0, [pc, #204]	@ (80085d8 <_printf_i+0x23c>)
 800850c:	2778      	movs	r7, #120	@ 0x78
 800850e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	6831      	ldr	r1, [r6, #0]
 8008516:	061f      	lsls	r7, r3, #24
 8008518:	f851 5b04 	ldr.w	r5, [r1], #4
 800851c:	d402      	bmi.n	8008524 <_printf_i+0x188>
 800851e:	065f      	lsls	r7, r3, #25
 8008520:	bf48      	it	mi
 8008522:	b2ad      	uxthmi	r5, r5
 8008524:	6031      	str	r1, [r6, #0]
 8008526:	07d9      	lsls	r1, r3, #31
 8008528:	bf44      	itt	mi
 800852a:	f043 0320 	orrmi.w	r3, r3, #32
 800852e:	6023      	strmi	r3, [r4, #0]
 8008530:	b11d      	cbz	r5, 800853a <_printf_i+0x19e>
 8008532:	2310      	movs	r3, #16
 8008534:	e7ac      	b.n	8008490 <_printf_i+0xf4>
 8008536:	4827      	ldr	r0, [pc, #156]	@ (80085d4 <_printf_i+0x238>)
 8008538:	e7e9      	b.n	800850e <_printf_i+0x172>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	f023 0320 	bic.w	r3, r3, #32
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	e7f6      	b.n	8008532 <_printf_i+0x196>
 8008544:	4616      	mov	r6, r2
 8008546:	e7bd      	b.n	80084c4 <_printf_i+0x128>
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	6825      	ldr	r5, [r4, #0]
 800854c:	6961      	ldr	r1, [r4, #20]
 800854e:	1d18      	adds	r0, r3, #4
 8008550:	6030      	str	r0, [r6, #0]
 8008552:	062e      	lsls	r6, r5, #24
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	d501      	bpl.n	800855c <_printf_i+0x1c0>
 8008558:	6019      	str	r1, [r3, #0]
 800855a:	e002      	b.n	8008562 <_printf_i+0x1c6>
 800855c:	0668      	lsls	r0, r5, #25
 800855e:	d5fb      	bpl.n	8008558 <_printf_i+0x1bc>
 8008560:	8019      	strh	r1, [r3, #0]
 8008562:	2300      	movs	r3, #0
 8008564:	6123      	str	r3, [r4, #16]
 8008566:	4616      	mov	r6, r2
 8008568:	e7bc      	b.n	80084e4 <_printf_i+0x148>
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	1d1a      	adds	r2, r3, #4
 800856e:	6032      	str	r2, [r6, #0]
 8008570:	681e      	ldr	r6, [r3, #0]
 8008572:	6862      	ldr	r2, [r4, #4]
 8008574:	2100      	movs	r1, #0
 8008576:	4630      	mov	r0, r6
 8008578:	f7f7 fe2a 	bl	80001d0 <memchr>
 800857c:	b108      	cbz	r0, 8008582 <_printf_i+0x1e6>
 800857e:	1b80      	subs	r0, r0, r6
 8008580:	6060      	str	r0, [r4, #4]
 8008582:	6863      	ldr	r3, [r4, #4]
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	2300      	movs	r3, #0
 8008588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800858c:	e7aa      	b.n	80084e4 <_printf_i+0x148>
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	4632      	mov	r2, r6
 8008592:	4649      	mov	r1, r9
 8008594:	4640      	mov	r0, r8
 8008596:	47d0      	blx	sl
 8008598:	3001      	adds	r0, #1
 800859a:	d0ad      	beq.n	80084f8 <_printf_i+0x15c>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	079b      	lsls	r3, r3, #30
 80085a0:	d413      	bmi.n	80085ca <_printf_i+0x22e>
 80085a2:	68e0      	ldr	r0, [r4, #12]
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	4298      	cmp	r0, r3
 80085a8:	bfb8      	it	lt
 80085aa:	4618      	movlt	r0, r3
 80085ac:	e7a6      	b.n	80084fc <_printf_i+0x160>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4632      	mov	r2, r6
 80085b2:	4649      	mov	r1, r9
 80085b4:	4640      	mov	r0, r8
 80085b6:	47d0      	blx	sl
 80085b8:	3001      	adds	r0, #1
 80085ba:	d09d      	beq.n	80084f8 <_printf_i+0x15c>
 80085bc:	3501      	adds	r5, #1
 80085be:	68e3      	ldr	r3, [r4, #12]
 80085c0:	9903      	ldr	r1, [sp, #12]
 80085c2:	1a5b      	subs	r3, r3, r1
 80085c4:	42ab      	cmp	r3, r5
 80085c6:	dcf2      	bgt.n	80085ae <_printf_i+0x212>
 80085c8:	e7eb      	b.n	80085a2 <_printf_i+0x206>
 80085ca:	2500      	movs	r5, #0
 80085cc:	f104 0619 	add.w	r6, r4, #25
 80085d0:	e7f5      	b.n	80085be <_printf_i+0x222>
 80085d2:	bf00      	nop
 80085d4:	0800bc6a 	.word	0x0800bc6a
 80085d8:	0800bc7b 	.word	0x0800bc7b

080085dc <_scanf_float>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	b087      	sub	sp, #28
 80085e2:	4617      	mov	r7, r2
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	688b      	ldr	r3, [r1, #8]
 80085e8:	1e5a      	subs	r2, r3, #1
 80085ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80085ee:	bf81      	itttt	hi
 80085f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80085f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80085f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80085fc:	608b      	strhi	r3, [r1, #8]
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	460a      	mov	r2, r1
 8008602:	f04f 0500 	mov.w	r5, #0
 8008606:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800860a:	f842 3b1c 	str.w	r3, [r2], #28
 800860e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008612:	4680      	mov	r8, r0
 8008614:	460c      	mov	r4, r1
 8008616:	bf98      	it	ls
 8008618:	f04f 0b00 	movls.w	fp, #0
 800861c:	9201      	str	r2, [sp, #4]
 800861e:	4616      	mov	r6, r2
 8008620:	46aa      	mov	sl, r5
 8008622:	46a9      	mov	r9, r5
 8008624:	9502      	str	r5, [sp, #8]
 8008626:	68a2      	ldr	r2, [r4, #8]
 8008628:	b152      	cbz	r2, 8008640 <_scanf_float+0x64>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008630:	d864      	bhi.n	80086fc <_scanf_float+0x120>
 8008632:	2b40      	cmp	r3, #64	@ 0x40
 8008634:	d83c      	bhi.n	80086b0 <_scanf_float+0xd4>
 8008636:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800863a:	b2c8      	uxtb	r0, r1
 800863c:	280e      	cmp	r0, #14
 800863e:	d93a      	bls.n	80086b6 <_scanf_float+0xda>
 8008640:	f1b9 0f00 	cmp.w	r9, #0
 8008644:	d003      	beq.n	800864e <_scanf_float+0x72>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008652:	f1ba 0f01 	cmp.w	sl, #1
 8008656:	f200 8117 	bhi.w	8008888 <_scanf_float+0x2ac>
 800865a:	9b01      	ldr	r3, [sp, #4]
 800865c:	429e      	cmp	r6, r3
 800865e:	f200 8108 	bhi.w	8008872 <_scanf_float+0x296>
 8008662:	2001      	movs	r0, #1
 8008664:	b007      	add	sp, #28
 8008666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800866e:	2a0d      	cmp	r2, #13
 8008670:	d8e6      	bhi.n	8008640 <_scanf_float+0x64>
 8008672:	a101      	add	r1, pc, #4	@ (adr r1, 8008678 <_scanf_float+0x9c>)
 8008674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008678:	080087bf 	.word	0x080087bf
 800867c:	08008641 	.word	0x08008641
 8008680:	08008641 	.word	0x08008641
 8008684:	08008641 	.word	0x08008641
 8008688:	0800881f 	.word	0x0800881f
 800868c:	080087f7 	.word	0x080087f7
 8008690:	08008641 	.word	0x08008641
 8008694:	08008641 	.word	0x08008641
 8008698:	080087cd 	.word	0x080087cd
 800869c:	08008641 	.word	0x08008641
 80086a0:	08008641 	.word	0x08008641
 80086a4:	08008641 	.word	0x08008641
 80086a8:	08008641 	.word	0x08008641
 80086ac:	08008785 	.word	0x08008785
 80086b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80086b4:	e7db      	b.n	800866e <_scanf_float+0x92>
 80086b6:	290e      	cmp	r1, #14
 80086b8:	d8c2      	bhi.n	8008640 <_scanf_float+0x64>
 80086ba:	a001      	add	r0, pc, #4	@ (adr r0, 80086c0 <_scanf_float+0xe4>)
 80086bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086c0:	08008775 	.word	0x08008775
 80086c4:	08008641 	.word	0x08008641
 80086c8:	08008775 	.word	0x08008775
 80086cc:	0800880b 	.word	0x0800880b
 80086d0:	08008641 	.word	0x08008641
 80086d4:	0800871d 	.word	0x0800871d
 80086d8:	0800875b 	.word	0x0800875b
 80086dc:	0800875b 	.word	0x0800875b
 80086e0:	0800875b 	.word	0x0800875b
 80086e4:	0800875b 	.word	0x0800875b
 80086e8:	0800875b 	.word	0x0800875b
 80086ec:	0800875b 	.word	0x0800875b
 80086f0:	0800875b 	.word	0x0800875b
 80086f4:	0800875b 	.word	0x0800875b
 80086f8:	0800875b 	.word	0x0800875b
 80086fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80086fe:	d809      	bhi.n	8008714 <_scanf_float+0x138>
 8008700:	2b60      	cmp	r3, #96	@ 0x60
 8008702:	d8b2      	bhi.n	800866a <_scanf_float+0x8e>
 8008704:	2b54      	cmp	r3, #84	@ 0x54
 8008706:	d07b      	beq.n	8008800 <_scanf_float+0x224>
 8008708:	2b59      	cmp	r3, #89	@ 0x59
 800870a:	d199      	bne.n	8008640 <_scanf_float+0x64>
 800870c:	2d07      	cmp	r5, #7
 800870e:	d197      	bne.n	8008640 <_scanf_float+0x64>
 8008710:	2508      	movs	r5, #8
 8008712:	e02c      	b.n	800876e <_scanf_float+0x192>
 8008714:	2b74      	cmp	r3, #116	@ 0x74
 8008716:	d073      	beq.n	8008800 <_scanf_float+0x224>
 8008718:	2b79      	cmp	r3, #121	@ 0x79
 800871a:	e7f6      	b.n	800870a <_scanf_float+0x12e>
 800871c:	6821      	ldr	r1, [r4, #0]
 800871e:	05c8      	lsls	r0, r1, #23
 8008720:	d51b      	bpl.n	800875a <_scanf_float+0x17e>
 8008722:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008726:	6021      	str	r1, [r4, #0]
 8008728:	f109 0901 	add.w	r9, r9, #1
 800872c:	f1bb 0f00 	cmp.w	fp, #0
 8008730:	d003      	beq.n	800873a <_scanf_float+0x15e>
 8008732:	3201      	adds	r2, #1
 8008734:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008738:	60a2      	str	r2, [r4, #8]
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	3b01      	subs	r3, #1
 800873e:	60a3      	str	r3, [r4, #8]
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	3301      	adds	r3, #1
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	f340 8087 	ble.w	8008860 <_scanf_float+0x284>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	3301      	adds	r3, #1
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	e765      	b.n	8008626 <_scanf_float+0x4a>
 800875a:	eb1a 0105 	adds.w	r1, sl, r5
 800875e:	f47f af6f 	bne.w	8008640 <_scanf_float+0x64>
 8008762:	6822      	ldr	r2, [r4, #0]
 8008764:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	460d      	mov	r5, r1
 800876c:	468a      	mov	sl, r1
 800876e:	f806 3b01 	strb.w	r3, [r6], #1
 8008772:	e7e2      	b.n	800873a <_scanf_float+0x15e>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	0610      	lsls	r0, r2, #24
 8008778:	f57f af62 	bpl.w	8008640 <_scanf_float+0x64>
 800877c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008780:	6022      	str	r2, [r4, #0]
 8008782:	e7f4      	b.n	800876e <_scanf_float+0x192>
 8008784:	f1ba 0f00 	cmp.w	sl, #0
 8008788:	d10e      	bne.n	80087a8 <_scanf_float+0x1cc>
 800878a:	f1b9 0f00 	cmp.w	r9, #0
 800878e:	d10e      	bne.n	80087ae <_scanf_float+0x1d2>
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008796:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800879a:	d108      	bne.n	80087ae <_scanf_float+0x1d2>
 800879c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087a0:	6022      	str	r2, [r4, #0]
 80087a2:	f04f 0a01 	mov.w	sl, #1
 80087a6:	e7e2      	b.n	800876e <_scanf_float+0x192>
 80087a8:	f1ba 0f02 	cmp.w	sl, #2
 80087ac:	d055      	beq.n	800885a <_scanf_float+0x27e>
 80087ae:	2d01      	cmp	r5, #1
 80087b0:	d002      	beq.n	80087b8 <_scanf_float+0x1dc>
 80087b2:	2d04      	cmp	r5, #4
 80087b4:	f47f af44 	bne.w	8008640 <_scanf_float+0x64>
 80087b8:	3501      	adds	r5, #1
 80087ba:	b2ed      	uxtb	r5, r5
 80087bc:	e7d7      	b.n	800876e <_scanf_float+0x192>
 80087be:	f1ba 0f01 	cmp.w	sl, #1
 80087c2:	f47f af3d 	bne.w	8008640 <_scanf_float+0x64>
 80087c6:	f04f 0a02 	mov.w	sl, #2
 80087ca:	e7d0      	b.n	800876e <_scanf_float+0x192>
 80087cc:	b97d      	cbnz	r5, 80087ee <_scanf_float+0x212>
 80087ce:	f1b9 0f00 	cmp.w	r9, #0
 80087d2:	f47f af38 	bne.w	8008646 <_scanf_float+0x6a>
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087e0:	f040 8108 	bne.w	80089f4 <_scanf_float+0x418>
 80087e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087e8:	6022      	str	r2, [r4, #0]
 80087ea:	2501      	movs	r5, #1
 80087ec:	e7bf      	b.n	800876e <_scanf_float+0x192>
 80087ee:	2d03      	cmp	r5, #3
 80087f0:	d0e2      	beq.n	80087b8 <_scanf_float+0x1dc>
 80087f2:	2d05      	cmp	r5, #5
 80087f4:	e7de      	b.n	80087b4 <_scanf_float+0x1d8>
 80087f6:	2d02      	cmp	r5, #2
 80087f8:	f47f af22 	bne.w	8008640 <_scanf_float+0x64>
 80087fc:	2503      	movs	r5, #3
 80087fe:	e7b6      	b.n	800876e <_scanf_float+0x192>
 8008800:	2d06      	cmp	r5, #6
 8008802:	f47f af1d 	bne.w	8008640 <_scanf_float+0x64>
 8008806:	2507      	movs	r5, #7
 8008808:	e7b1      	b.n	800876e <_scanf_float+0x192>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	0591      	lsls	r1, r2, #22
 800880e:	f57f af17 	bpl.w	8008640 <_scanf_float+0x64>
 8008812:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	f8cd 9008 	str.w	r9, [sp, #8]
 800881c:	e7a7      	b.n	800876e <_scanf_float+0x192>
 800881e:	6822      	ldr	r2, [r4, #0]
 8008820:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008824:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008828:	d006      	beq.n	8008838 <_scanf_float+0x25c>
 800882a:	0550      	lsls	r0, r2, #21
 800882c:	f57f af08 	bpl.w	8008640 <_scanf_float+0x64>
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	f000 80de 	beq.w	80089f4 <_scanf_float+0x418>
 8008838:	0591      	lsls	r1, r2, #22
 800883a:	bf58      	it	pl
 800883c:	9902      	ldrpl	r1, [sp, #8]
 800883e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008842:	bf58      	it	pl
 8008844:	eba9 0101 	subpl.w	r1, r9, r1
 8008848:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800884c:	bf58      	it	pl
 800884e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	f04f 0900 	mov.w	r9, #0
 8008858:	e789      	b.n	800876e <_scanf_float+0x192>
 800885a:	f04f 0a03 	mov.w	sl, #3
 800885e:	e786      	b.n	800876e <_scanf_float+0x192>
 8008860:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008864:	4639      	mov	r1, r7
 8008866:	4640      	mov	r0, r8
 8008868:	4798      	blx	r3
 800886a:	2800      	cmp	r0, #0
 800886c:	f43f aedb 	beq.w	8008626 <_scanf_float+0x4a>
 8008870:	e6e6      	b.n	8008640 <_scanf_float+0x64>
 8008872:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800887a:	463a      	mov	r2, r7
 800887c:	4640      	mov	r0, r8
 800887e:	4798      	blx	r3
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	3b01      	subs	r3, #1
 8008884:	6123      	str	r3, [r4, #16]
 8008886:	e6e8      	b.n	800865a <_scanf_float+0x7e>
 8008888:	1e6b      	subs	r3, r5, #1
 800888a:	2b06      	cmp	r3, #6
 800888c:	d824      	bhi.n	80088d8 <_scanf_float+0x2fc>
 800888e:	2d02      	cmp	r5, #2
 8008890:	d836      	bhi.n	8008900 <_scanf_float+0x324>
 8008892:	9b01      	ldr	r3, [sp, #4]
 8008894:	429e      	cmp	r6, r3
 8008896:	f67f aee4 	bls.w	8008662 <_scanf_float+0x86>
 800889a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800889e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088a2:	463a      	mov	r2, r7
 80088a4:	4640      	mov	r0, r8
 80088a6:	4798      	blx	r3
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	6123      	str	r3, [r4, #16]
 80088ae:	e7f0      	b.n	8008892 <_scanf_float+0x2b6>
 80088b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088b8:	463a      	mov	r2, r7
 80088ba:	4640      	mov	r0, r8
 80088bc:	4798      	blx	r3
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	6123      	str	r3, [r4, #16]
 80088c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088c8:	fa5f fa8a 	uxtb.w	sl, sl
 80088cc:	f1ba 0f02 	cmp.w	sl, #2
 80088d0:	d1ee      	bne.n	80088b0 <_scanf_float+0x2d4>
 80088d2:	3d03      	subs	r5, #3
 80088d4:	b2ed      	uxtb	r5, r5
 80088d6:	1b76      	subs	r6, r6, r5
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	05da      	lsls	r2, r3, #23
 80088dc:	d530      	bpl.n	8008940 <_scanf_float+0x364>
 80088de:	055b      	lsls	r3, r3, #21
 80088e0:	d511      	bpl.n	8008906 <_scanf_float+0x32a>
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	429e      	cmp	r6, r3
 80088e6:	f67f aebc 	bls.w	8008662 <_scanf_float+0x86>
 80088ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088f2:	463a      	mov	r2, r7
 80088f4:	4640      	mov	r0, r8
 80088f6:	4798      	blx	r3
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	e7f0      	b.n	80088e2 <_scanf_float+0x306>
 8008900:	46aa      	mov	sl, r5
 8008902:	46b3      	mov	fp, r6
 8008904:	e7de      	b.n	80088c4 <_scanf_float+0x2e8>
 8008906:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	2965      	cmp	r1, #101	@ 0x65
 800890e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008912:	f106 35ff 	add.w	r5, r6, #4294967295
 8008916:	6123      	str	r3, [r4, #16]
 8008918:	d00c      	beq.n	8008934 <_scanf_float+0x358>
 800891a:	2945      	cmp	r1, #69	@ 0x45
 800891c:	d00a      	beq.n	8008934 <_scanf_float+0x358>
 800891e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008922:	463a      	mov	r2, r7
 8008924:	4640      	mov	r0, r8
 8008926:	4798      	blx	r3
 8008928:	6923      	ldr	r3, [r4, #16]
 800892a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800892e:	3b01      	subs	r3, #1
 8008930:	1eb5      	subs	r5, r6, #2
 8008932:	6123      	str	r3, [r4, #16]
 8008934:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008938:	463a      	mov	r2, r7
 800893a:	4640      	mov	r0, r8
 800893c:	4798      	blx	r3
 800893e:	462e      	mov	r6, r5
 8008940:	6822      	ldr	r2, [r4, #0]
 8008942:	f012 0210 	ands.w	r2, r2, #16
 8008946:	d001      	beq.n	800894c <_scanf_float+0x370>
 8008948:	2000      	movs	r0, #0
 800894a:	e68b      	b.n	8008664 <_scanf_float+0x88>
 800894c:	7032      	strb	r2, [r6, #0]
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008958:	d11c      	bne.n	8008994 <_scanf_float+0x3b8>
 800895a:	9b02      	ldr	r3, [sp, #8]
 800895c:	454b      	cmp	r3, r9
 800895e:	eba3 0209 	sub.w	r2, r3, r9
 8008962:	d123      	bne.n	80089ac <_scanf_float+0x3d0>
 8008964:	9901      	ldr	r1, [sp, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	4640      	mov	r0, r8
 800896a:	f7ff f9cd 	bl	8007d08 <_strtod_r>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	6821      	ldr	r1, [r4, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f011 0f02 	tst.w	r1, #2
 8008978:	ec57 6b10 	vmov	r6, r7, d0
 800897c:	f103 0204 	add.w	r2, r3, #4
 8008980:	d01f      	beq.n	80089c2 <_scanf_float+0x3e6>
 8008982:	9903      	ldr	r1, [sp, #12]
 8008984:	600a      	str	r2, [r1, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	e9c3 6700 	strd	r6, r7, [r3]
 800898c:	68e3      	ldr	r3, [r4, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60e3      	str	r3, [r4, #12]
 8008992:	e7d9      	b.n	8008948 <_scanf_float+0x36c>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0e4      	beq.n	8008964 <_scanf_float+0x388>
 800899a:	9905      	ldr	r1, [sp, #20]
 800899c:	230a      	movs	r3, #10
 800899e:	3101      	adds	r1, #1
 80089a0:	4640      	mov	r0, r8
 80089a2:	f002 fb91 	bl	800b0c8 <_strtol_r>
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	9e05      	ldr	r6, [sp, #20]
 80089aa:	1ac2      	subs	r2, r0, r3
 80089ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80089b0:	429e      	cmp	r6, r3
 80089b2:	bf28      	it	cs
 80089b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089b8:	4910      	ldr	r1, [pc, #64]	@ (80089fc <_scanf_float+0x420>)
 80089ba:	4630      	mov	r0, r6
 80089bc:	f000 f988 	bl	8008cd0 <siprintf>
 80089c0:	e7d0      	b.n	8008964 <_scanf_float+0x388>
 80089c2:	f011 0f04 	tst.w	r1, #4
 80089c6:	9903      	ldr	r1, [sp, #12]
 80089c8:	600a      	str	r2, [r1, #0]
 80089ca:	d1dc      	bne.n	8008986 <_scanf_float+0x3aa>
 80089cc:	681d      	ldr	r5, [r3, #0]
 80089ce:	4632      	mov	r2, r6
 80089d0:	463b      	mov	r3, r7
 80089d2:	4630      	mov	r0, r6
 80089d4:	4639      	mov	r1, r7
 80089d6:	f7f8 f8a9 	bl	8000b2c <__aeabi_dcmpun>
 80089da:	b128      	cbz	r0, 80089e8 <_scanf_float+0x40c>
 80089dc:	4808      	ldr	r0, [pc, #32]	@ (8008a00 <_scanf_float+0x424>)
 80089de:	f000 fb8b 	bl	80090f8 <nanf>
 80089e2:	ed85 0a00 	vstr	s0, [r5]
 80089e6:	e7d1      	b.n	800898c <_scanf_float+0x3b0>
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f8 f8fc 	bl	8000be8 <__aeabi_d2f>
 80089f0:	6028      	str	r0, [r5, #0]
 80089f2:	e7cb      	b.n	800898c <_scanf_float+0x3b0>
 80089f4:	f04f 0900 	mov.w	r9, #0
 80089f8:	e629      	b.n	800864e <_scanf_float+0x72>
 80089fa:	bf00      	nop
 80089fc:	0800bc8c 	.word	0x0800bc8c
 8008a00:	0800bd45 	.word	0x0800bd45

08008a04 <std>:
 8008a04:	2300      	movs	r3, #0
 8008a06:	b510      	push	{r4, lr}
 8008a08:	4604      	mov	r4, r0
 8008a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a12:	6083      	str	r3, [r0, #8]
 8008a14:	8181      	strh	r1, [r0, #12]
 8008a16:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a18:	81c2      	strh	r2, [r0, #14]
 8008a1a:	6183      	str	r3, [r0, #24]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	2208      	movs	r2, #8
 8008a20:	305c      	adds	r0, #92	@ 0x5c
 8008a22:	f000 fa4d 	bl	8008ec0 <memset>
 8008a26:	4b0d      	ldr	r3, [pc, #52]	@ (8008a5c <std+0x58>)
 8008a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a60 <std+0x5c>)
 8008a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a64 <std+0x60>)
 8008a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a32:	4b0d      	ldr	r3, [pc, #52]	@ (8008a68 <std+0x64>)
 8008a34:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a36:	4b0d      	ldr	r3, [pc, #52]	@ (8008a6c <std+0x68>)
 8008a38:	6224      	str	r4, [r4, #32]
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d006      	beq.n	8008a4c <std+0x48>
 8008a3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a42:	4294      	cmp	r4, r2
 8008a44:	d002      	beq.n	8008a4c <std+0x48>
 8008a46:	33d0      	adds	r3, #208	@ 0xd0
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	d105      	bne.n	8008a58 <std+0x54>
 8008a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f000 bb34 	b.w	80090c0 <__retarget_lock_init_recursive>
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08008d11 	.word	0x08008d11
 8008a60:	08008d33 	.word	0x08008d33
 8008a64:	08008d6b 	.word	0x08008d6b
 8008a68:	08008d8f 	.word	0x08008d8f
 8008a6c:	2000067c 	.word	0x2000067c

08008a70 <stdio_exit_handler>:
 8008a70:	4a02      	ldr	r2, [pc, #8]	@ (8008a7c <stdio_exit_handler+0xc>)
 8008a72:	4903      	ldr	r1, [pc, #12]	@ (8008a80 <stdio_exit_handler+0x10>)
 8008a74:	4803      	ldr	r0, [pc, #12]	@ (8008a84 <stdio_exit_handler+0x14>)
 8008a76:	f000 b869 	b.w	8008b4c <_fwalk_sglue>
 8008a7a:	bf00      	nop
 8008a7c:	2000008c 	.word	0x2000008c
 8008a80:	0800b721 	.word	0x0800b721
 8008a84:	20000208 	.word	0x20000208

08008a88 <cleanup_stdio>:
 8008a88:	6841      	ldr	r1, [r0, #4]
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008abc <cleanup_stdio+0x34>)
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	4604      	mov	r4, r0
 8008a92:	d001      	beq.n	8008a98 <cleanup_stdio+0x10>
 8008a94:	f002 fe44 	bl	800b720 <_fflush_r>
 8008a98:	68a1      	ldr	r1, [r4, #8]
 8008a9a:	4b09      	ldr	r3, [pc, #36]	@ (8008ac0 <cleanup_stdio+0x38>)
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	d002      	beq.n	8008aa6 <cleanup_stdio+0x1e>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f002 fe3d 	bl	800b720 <_fflush_r>
 8008aa6:	68e1      	ldr	r1, [r4, #12]
 8008aa8:	4b06      	ldr	r3, [pc, #24]	@ (8008ac4 <cleanup_stdio+0x3c>)
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	d004      	beq.n	8008ab8 <cleanup_stdio+0x30>
 8008aae:	4620      	mov	r0, r4
 8008ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab4:	f002 be34 	b.w	800b720 <_fflush_r>
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	bf00      	nop
 8008abc:	2000067c 	.word	0x2000067c
 8008ac0:	200006e4 	.word	0x200006e4
 8008ac4:	2000074c 	.word	0x2000074c

08008ac8 <global_stdio_init.part.0>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <global_stdio_init.part.0+0x30>)
 8008acc:	4c0b      	ldr	r4, [pc, #44]	@ (8008afc <global_stdio_init.part.0+0x34>)
 8008ace:	4a0c      	ldr	r2, [pc, #48]	@ (8008b00 <global_stdio_init.part.0+0x38>)
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2104      	movs	r1, #4
 8008ad8:	f7ff ff94 	bl	8008a04 <std>
 8008adc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	2109      	movs	r1, #9
 8008ae4:	f7ff ff8e 	bl	8008a04 <std>
 8008ae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008aec:	2202      	movs	r2, #2
 8008aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af2:	2112      	movs	r1, #18
 8008af4:	f7ff bf86 	b.w	8008a04 <std>
 8008af8:	200007b4 	.word	0x200007b4
 8008afc:	2000067c 	.word	0x2000067c
 8008b00:	08008a71 	.word	0x08008a71

08008b04 <__sfp_lock_acquire>:
 8008b04:	4801      	ldr	r0, [pc, #4]	@ (8008b0c <__sfp_lock_acquire+0x8>)
 8008b06:	f000 badc 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	200007bd 	.word	0x200007bd

08008b10 <__sfp_lock_release>:
 8008b10:	4801      	ldr	r0, [pc, #4]	@ (8008b18 <__sfp_lock_release+0x8>)
 8008b12:	f000 bad7 	b.w	80090c4 <__retarget_lock_release_recursive>
 8008b16:	bf00      	nop
 8008b18:	200007bd 	.word	0x200007bd

08008b1c <__sinit>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	f7ff fff0 	bl	8008b04 <__sfp_lock_acquire>
 8008b24:	6a23      	ldr	r3, [r4, #32]
 8008b26:	b11b      	cbz	r3, 8008b30 <__sinit+0x14>
 8008b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2c:	f7ff bff0 	b.w	8008b10 <__sfp_lock_release>
 8008b30:	4b04      	ldr	r3, [pc, #16]	@ (8008b44 <__sinit+0x28>)
 8008b32:	6223      	str	r3, [r4, #32]
 8008b34:	4b04      	ldr	r3, [pc, #16]	@ (8008b48 <__sinit+0x2c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f5      	bne.n	8008b28 <__sinit+0xc>
 8008b3c:	f7ff ffc4 	bl	8008ac8 <global_stdio_init.part.0>
 8008b40:	e7f2      	b.n	8008b28 <__sinit+0xc>
 8008b42:	bf00      	nop
 8008b44:	08008a89 	.word	0x08008a89
 8008b48:	200007b4 	.word	0x200007b4

08008b4c <_fwalk_sglue>:
 8008b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b50:	4607      	mov	r7, r0
 8008b52:	4688      	mov	r8, r1
 8008b54:	4614      	mov	r4, r2
 8008b56:	2600      	movs	r6, #0
 8008b58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b5c:	f1b9 0901 	subs.w	r9, r9, #1
 8008b60:	d505      	bpl.n	8008b6e <_fwalk_sglue+0x22>
 8008b62:	6824      	ldr	r4, [r4, #0]
 8008b64:	2c00      	cmp	r4, #0
 8008b66:	d1f7      	bne.n	8008b58 <_fwalk_sglue+0xc>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	89ab      	ldrh	r3, [r5, #12]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d907      	bls.n	8008b84 <_fwalk_sglue+0x38>
 8008b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	d003      	beq.n	8008b84 <_fwalk_sglue+0x38>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4638      	mov	r0, r7
 8008b80:	47c0      	blx	r8
 8008b82:	4306      	orrs	r6, r0
 8008b84:	3568      	adds	r5, #104	@ 0x68
 8008b86:	e7e9      	b.n	8008b5c <_fwalk_sglue+0x10>

08008b88 <iprintf>:
 8008b88:	b40f      	push	{r0, r1, r2, r3}
 8008b8a:	b507      	push	{r0, r1, r2, lr}
 8008b8c:	4906      	ldr	r1, [pc, #24]	@ (8008ba8 <iprintf+0x20>)
 8008b8e:	ab04      	add	r3, sp, #16
 8008b90:	6808      	ldr	r0, [r1, #0]
 8008b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b96:	6881      	ldr	r1, [r0, #8]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	f002 fc25 	bl	800b3e8 <_vfiprintf_r>
 8008b9e:	b003      	add	sp, #12
 8008ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ba4:	b004      	add	sp, #16
 8008ba6:	4770      	bx	lr
 8008ba8:	20000204 	.word	0x20000204

08008bac <_puts_r>:
 8008bac:	6a03      	ldr	r3, [r0, #32]
 8008bae:	b570      	push	{r4, r5, r6, lr}
 8008bb0:	6884      	ldr	r4, [r0, #8]
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	b90b      	cbnz	r3, 8008bbc <_puts_r+0x10>
 8008bb8:	f7ff ffb0 	bl	8008b1c <__sinit>
 8008bbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bbe:	07db      	lsls	r3, r3, #31
 8008bc0:	d405      	bmi.n	8008bce <_puts_r+0x22>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	0598      	lsls	r0, r3, #22
 8008bc6:	d402      	bmi.n	8008bce <_puts_r+0x22>
 8008bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bca:	f000 fa7a 	bl	80090c2 <__retarget_lock_acquire_recursive>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	0719      	lsls	r1, r3, #28
 8008bd2:	d502      	bpl.n	8008bda <_puts_r+0x2e>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d135      	bne.n	8008c46 <_puts_r+0x9a>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 f919 	bl	8008e14 <__swsetup_r>
 8008be2:	b380      	cbz	r0, 8008c46 <_puts_r+0x9a>
 8008be4:	f04f 35ff 	mov.w	r5, #4294967295
 8008be8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bea:	07da      	lsls	r2, r3, #31
 8008bec:	d405      	bmi.n	8008bfa <_puts_r+0x4e>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	059b      	lsls	r3, r3, #22
 8008bf2:	d402      	bmi.n	8008bfa <_puts_r+0x4e>
 8008bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bf6:	f000 fa65 	bl	80090c4 <__retarget_lock_release_recursive>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da04      	bge.n	8008c0c <_puts_r+0x60>
 8008c02:	69a2      	ldr	r2, [r4, #24]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	dc17      	bgt.n	8008c38 <_puts_r+0x8c>
 8008c08:	290a      	cmp	r1, #10
 8008c0a:	d015      	beq.n	8008c38 <_puts_r+0x8c>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	7019      	strb	r1, [r3, #0]
 8008c14:	68a3      	ldr	r3, [r4, #8]
 8008c16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	60a3      	str	r3, [r4, #8]
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	d1ed      	bne.n	8008bfe <_puts_r+0x52>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da11      	bge.n	8008c4a <_puts_r+0x9e>
 8008c26:	4622      	mov	r2, r4
 8008c28:	210a      	movs	r1, #10
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 f8b3 	bl	8008d96 <__swbuf_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d0d7      	beq.n	8008be4 <_puts_r+0x38>
 8008c34:	250a      	movs	r5, #10
 8008c36:	e7d7      	b.n	8008be8 <_puts_r+0x3c>
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f000 f8ab 	bl	8008d96 <__swbuf_r>
 8008c40:	3001      	adds	r0, #1
 8008c42:	d1e7      	bne.n	8008c14 <_puts_r+0x68>
 8008c44:	e7ce      	b.n	8008be4 <_puts_r+0x38>
 8008c46:	3e01      	subs	r6, #1
 8008c48:	e7e4      	b.n	8008c14 <_puts_r+0x68>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	6022      	str	r2, [r4, #0]
 8008c50:	220a      	movs	r2, #10
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	e7ee      	b.n	8008c34 <_puts_r+0x88>
	...

08008c58 <puts>:
 8008c58:	4b02      	ldr	r3, [pc, #8]	@ (8008c64 <puts+0xc>)
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f7ff bfa5 	b.w	8008bac <_puts_r>
 8008c62:	bf00      	nop
 8008c64:	20000204 	.word	0x20000204

08008c68 <sniprintf>:
 8008c68:	b40c      	push	{r2, r3}
 8008c6a:	b530      	push	{r4, r5, lr}
 8008c6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ccc <sniprintf+0x64>)
 8008c6e:	1e0c      	subs	r4, r1, #0
 8008c70:	681d      	ldr	r5, [r3, #0]
 8008c72:	b09d      	sub	sp, #116	@ 0x74
 8008c74:	da08      	bge.n	8008c88 <sniprintf+0x20>
 8008c76:	238b      	movs	r3, #139	@ 0x8b
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	b01d      	add	sp, #116	@ 0x74
 8008c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c84:	b002      	add	sp, #8
 8008c86:	4770      	bx	lr
 8008c88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c90:	bf14      	ite	ne
 8008c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c96:	4623      	moveq	r3, r4
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ca0:	9002      	str	r0, [sp, #8]
 8008ca2:	9006      	str	r0, [sp, #24]
 8008ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ca8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008caa:	ab21      	add	r3, sp, #132	@ 0x84
 8008cac:	a902      	add	r1, sp, #8
 8008cae:	4628      	mov	r0, r5
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	f002 fa73 	bl	800b19c <_svfiprintf_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	bfbc      	itt	lt
 8008cba:	238b      	movlt	r3, #139	@ 0x8b
 8008cbc:	602b      	strlt	r3, [r5, #0]
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	d0dd      	beq.n	8008c7e <sniprintf+0x16>
 8008cc2:	9b02      	ldr	r3, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e7d9      	b.n	8008c7e <sniprintf+0x16>
 8008cca:	bf00      	nop
 8008ccc:	20000204 	.word	0x20000204

08008cd0 <siprintf>:
 8008cd0:	b40e      	push	{r1, r2, r3}
 8008cd2:	b500      	push	{lr}
 8008cd4:	b09c      	sub	sp, #112	@ 0x70
 8008cd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008cd8:	9002      	str	r0, [sp, #8]
 8008cda:	9006      	str	r0, [sp, #24]
 8008cdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ce0:	4809      	ldr	r0, [pc, #36]	@ (8008d08 <siprintf+0x38>)
 8008ce2:	9107      	str	r1, [sp, #28]
 8008ce4:	9104      	str	r1, [sp, #16]
 8008ce6:	4909      	ldr	r1, [pc, #36]	@ (8008d0c <siprintf+0x3c>)
 8008ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	a902      	add	r1, sp, #8
 8008cf4:	f002 fa52 	bl	800b19c <_svfiprintf_r>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	b01c      	add	sp, #112	@ 0x70
 8008d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d04:	b003      	add	sp, #12
 8008d06:	4770      	bx	lr
 8008d08:	20000204 	.word	0x20000204
 8008d0c:	ffff0208 	.word	0xffff0208

08008d10 <__sread>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	460c      	mov	r4, r1
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	f000 f984 	bl	8009024 <_read_r>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	bfab      	itete	ge
 8008d20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d22:	89a3      	ldrhlt	r3, [r4, #12]
 8008d24:	181b      	addge	r3, r3, r0
 8008d26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d2a:	bfac      	ite	ge
 8008d2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d2e:	81a3      	strhlt	r3, [r4, #12]
 8008d30:	bd10      	pop	{r4, pc}

08008d32 <__swrite>:
 8008d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d36:	461f      	mov	r7, r3
 8008d38:	898b      	ldrh	r3, [r1, #12]
 8008d3a:	05db      	lsls	r3, r3, #23
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	4616      	mov	r6, r2
 8008d42:	d505      	bpl.n	8008d50 <__swrite+0x1e>
 8008d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d48:	2302      	movs	r3, #2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f000 f958 	bl	8009000 <_lseek_r>
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	463b      	mov	r3, r7
 8008d60:	4628      	mov	r0, r5
 8008d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d66:	f000 b96f 	b.w	8009048 <_write_r>

08008d6a <__sseek>:
 8008d6a:	b510      	push	{r4, lr}
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d72:	f000 f945 	bl	8009000 <_lseek_r>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	bf15      	itete	ne
 8008d7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d86:	81a3      	strheq	r3, [r4, #12]
 8008d88:	bf18      	it	ne
 8008d8a:	81a3      	strhne	r3, [r4, #12]
 8008d8c:	bd10      	pop	{r4, pc}

08008d8e <__sclose>:
 8008d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d92:	f000 b925 	b.w	8008fe0 <_close_r>

08008d96 <__swbuf_r>:
 8008d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d98:	460e      	mov	r6, r1
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	b118      	cbz	r0, 8008da8 <__swbuf_r+0x12>
 8008da0:	6a03      	ldr	r3, [r0, #32]
 8008da2:	b90b      	cbnz	r3, 8008da8 <__swbuf_r+0x12>
 8008da4:	f7ff feba 	bl	8008b1c <__sinit>
 8008da8:	69a3      	ldr	r3, [r4, #24]
 8008daa:	60a3      	str	r3, [r4, #8]
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	071a      	lsls	r2, r3, #28
 8008db0:	d501      	bpl.n	8008db6 <__swbuf_r+0x20>
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	b943      	cbnz	r3, 8008dc8 <__swbuf_r+0x32>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f82b 	bl	8008e14 <__swsetup_r>
 8008dbe:	b118      	cbz	r0, 8008dc8 <__swbuf_r+0x32>
 8008dc0:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	6922      	ldr	r2, [r4, #16]
 8008dcc:	1a98      	subs	r0, r3, r2
 8008dce:	6963      	ldr	r3, [r4, #20]
 8008dd0:	b2f6      	uxtb	r6, r6
 8008dd2:	4283      	cmp	r3, r0
 8008dd4:	4637      	mov	r7, r6
 8008dd6:	dc05      	bgt.n	8008de4 <__swbuf_r+0x4e>
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f002 fca0 	bl	800b720 <_fflush_r>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d1ed      	bne.n	8008dc0 <__swbuf_r+0x2a>
 8008de4:	68a3      	ldr	r3, [r4, #8]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	60a3      	str	r3, [r4, #8]
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	6022      	str	r2, [r4, #0]
 8008df0:	701e      	strb	r6, [r3, #0]
 8008df2:	6962      	ldr	r2, [r4, #20]
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d004      	beq.n	8008e04 <__swbuf_r+0x6e>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	07db      	lsls	r3, r3, #31
 8008dfe:	d5e1      	bpl.n	8008dc4 <__swbuf_r+0x2e>
 8008e00:	2e0a      	cmp	r6, #10
 8008e02:	d1df      	bne.n	8008dc4 <__swbuf_r+0x2e>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4628      	mov	r0, r5
 8008e08:	f002 fc8a 	bl	800b720 <_fflush_r>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d0d9      	beq.n	8008dc4 <__swbuf_r+0x2e>
 8008e10:	e7d6      	b.n	8008dc0 <__swbuf_r+0x2a>
	...

08008e14 <__swsetup_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4b29      	ldr	r3, [pc, #164]	@ (8008ebc <__swsetup_r+0xa8>)
 8008e18:	4605      	mov	r5, r0
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	b118      	cbz	r0, 8008e28 <__swsetup_r+0x14>
 8008e20:	6a03      	ldr	r3, [r0, #32]
 8008e22:	b90b      	cbnz	r3, 8008e28 <__swsetup_r+0x14>
 8008e24:	f7ff fe7a 	bl	8008b1c <__sinit>
 8008e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2c:	0719      	lsls	r1, r3, #28
 8008e2e:	d422      	bmi.n	8008e76 <__swsetup_r+0x62>
 8008e30:	06da      	lsls	r2, r3, #27
 8008e32:	d407      	bmi.n	8008e44 <__swsetup_r+0x30>
 8008e34:	2209      	movs	r2, #9
 8008e36:	602a      	str	r2, [r5, #0]
 8008e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	e033      	b.n	8008eac <__swsetup_r+0x98>
 8008e44:	0758      	lsls	r0, r3, #29
 8008e46:	d512      	bpl.n	8008e6e <__swsetup_r+0x5a>
 8008e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e4a:	b141      	cbz	r1, 8008e5e <__swsetup_r+0x4a>
 8008e4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e50:	4299      	cmp	r1, r3
 8008e52:	d002      	beq.n	8008e5a <__swsetup_r+0x46>
 8008e54:	4628      	mov	r0, r5
 8008e56:	f000 ffbf 	bl	8009dd8 <_free_r>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	2300      	movs	r3, #0
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f043 0308 	orr.w	r3, r3, #8
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	b94b      	cbnz	r3, 8008e8e <__swsetup_r+0x7a>
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e84:	d003      	beq.n	8008e8e <__swsetup_r+0x7a>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f002 fca9 	bl	800b7e0 <__smakebuf_r>
 8008e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e92:	f013 0201 	ands.w	r2, r3, #1
 8008e96:	d00a      	beq.n	8008eae <__swsetup_r+0x9a>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	60a2      	str	r2, [r4, #8]
 8008e9c:	6962      	ldr	r2, [r4, #20]
 8008e9e:	4252      	negs	r2, r2
 8008ea0:	61a2      	str	r2, [r4, #24]
 8008ea2:	6922      	ldr	r2, [r4, #16]
 8008ea4:	b942      	cbnz	r2, 8008eb8 <__swsetup_r+0xa4>
 8008ea6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eaa:	d1c5      	bne.n	8008e38 <__swsetup_r+0x24>
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
 8008eae:	0799      	lsls	r1, r3, #30
 8008eb0:	bf58      	it	pl
 8008eb2:	6962      	ldrpl	r2, [r4, #20]
 8008eb4:	60a2      	str	r2, [r4, #8]
 8008eb6:	e7f4      	b.n	8008ea2 <__swsetup_r+0x8e>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7f7      	b.n	8008eac <__swsetup_r+0x98>
 8008ebc:	20000204 	.word	0x20000204

08008ec0 <memset>:
 8008ec0:	4402      	add	r2, r0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d100      	bne.n	8008eca <memset+0xa>
 8008ec8:	4770      	bx	lr
 8008eca:	f803 1b01 	strb.w	r1, [r3], #1
 8008ece:	e7f9      	b.n	8008ec4 <memset+0x4>

08008ed0 <strncmp>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	b16a      	cbz	r2, 8008ef0 <strncmp+0x20>
 8008ed4:	3901      	subs	r1, #1
 8008ed6:	1884      	adds	r4, r0, r2
 8008ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008edc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d103      	bne.n	8008eec <strncmp+0x1c>
 8008ee4:	42a0      	cmp	r0, r4
 8008ee6:	d001      	beq.n	8008eec <strncmp+0x1c>
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d1f5      	bne.n	8008ed8 <strncmp+0x8>
 8008eec:	1ad0      	subs	r0, r2, r3
 8008eee:	bd10      	pop	{r4, pc}
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	e7fc      	b.n	8008eee <strncmp+0x1e>

08008ef4 <strtok>:
 8008ef4:	4b16      	ldr	r3, [pc, #88]	@ (8008f50 <strtok+0x5c>)
 8008ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	681f      	ldr	r7, [r3, #0]
 8008efc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008efe:	4605      	mov	r5, r0
 8008f00:	460e      	mov	r6, r1
 8008f02:	b9ec      	cbnz	r4, 8008f40 <strtok+0x4c>
 8008f04:	2050      	movs	r0, #80	@ 0x50
 8008f06:	f001 faeb 	bl	800a4e0 <malloc>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	6478      	str	r0, [r7, #68]	@ 0x44
 8008f0e:	b920      	cbnz	r0, 8008f1a <strtok+0x26>
 8008f10:	4b10      	ldr	r3, [pc, #64]	@ (8008f54 <strtok+0x60>)
 8008f12:	4811      	ldr	r0, [pc, #68]	@ (8008f58 <strtok+0x64>)
 8008f14:	215b      	movs	r1, #91	@ 0x5b
 8008f16:	f000 f8f5 	bl	8009104 <__assert_func>
 8008f1a:	e9c0 4400 	strd	r4, r4, [r0]
 8008f1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008f22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008f26:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008f2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008f2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008f32:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008f36:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008f3a:	6184      	str	r4, [r0, #24]
 8008f3c:	7704      	strb	r4, [r0, #28]
 8008f3e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	2301      	movs	r3, #1
 8008f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	f000 b806 	b.w	8008f5c <__strtok_r>
 8008f50:	20000204 	.word	0x20000204
 8008f54:	0800bc91 	.word	0x0800bc91
 8008f58:	0800bca8 	.word	0x0800bca8

08008f5c <__strtok_r>:
 8008f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5e:	4604      	mov	r4, r0
 8008f60:	b908      	cbnz	r0, 8008f66 <__strtok_r+0xa>
 8008f62:	6814      	ldr	r4, [r2, #0]
 8008f64:	b144      	cbz	r4, 8008f78 <__strtok_r+0x1c>
 8008f66:	4620      	mov	r0, r4
 8008f68:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f6c:	460f      	mov	r7, r1
 8008f6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f72:	b91e      	cbnz	r6, 8008f7c <__strtok_r+0x20>
 8008f74:	b965      	cbnz	r5, 8008f90 <__strtok_r+0x34>
 8008f76:	6015      	str	r5, [r2, #0]
 8008f78:	2000      	movs	r0, #0
 8008f7a:	e005      	b.n	8008f88 <__strtok_r+0x2c>
 8008f7c:	42b5      	cmp	r5, r6
 8008f7e:	d1f6      	bne.n	8008f6e <__strtok_r+0x12>
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1f0      	bne.n	8008f66 <__strtok_r+0xa>
 8008f84:	6014      	str	r4, [r2, #0]
 8008f86:	7003      	strb	r3, [r0, #0]
 8008f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f8a:	461c      	mov	r4, r3
 8008f8c:	e00c      	b.n	8008fa8 <__strtok_r+0x4c>
 8008f8e:	b915      	cbnz	r5, 8008f96 <__strtok_r+0x3a>
 8008f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f94:	460e      	mov	r6, r1
 8008f96:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f9a:	42ab      	cmp	r3, r5
 8008f9c:	d1f7      	bne.n	8008f8e <__strtok_r+0x32>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0f3      	beq.n	8008f8a <__strtok_r+0x2e>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008fa8:	6014      	str	r4, [r2, #0]
 8008faa:	e7ed      	b.n	8008f88 <__strtok_r+0x2c>

08008fac <strstr>:
 8008fac:	780a      	ldrb	r2, [r1, #0]
 8008fae:	b570      	push	{r4, r5, r6, lr}
 8008fb0:	b96a      	cbnz	r2, 8008fce <strstr+0x22>
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d109      	bne.n	8008fcc <strstr+0x20>
 8008fb8:	460c      	mov	r4, r1
 8008fba:	4605      	mov	r5, r0
 8008fbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0f6      	beq.n	8008fb2 <strstr+0x6>
 8008fc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008fc8:	429e      	cmp	r6, r3
 8008fca:	d0f7      	beq.n	8008fbc <strstr+0x10>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	7803      	ldrb	r3, [r0, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1ef      	bne.n	8008fb4 <strstr+0x8>
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	e7ec      	b.n	8008fb2 <strstr+0x6>

08008fd8 <_localeconv_r>:
 8008fd8:	4800      	ldr	r0, [pc, #0]	@ (8008fdc <_localeconv_r+0x4>)
 8008fda:	4770      	bx	lr
 8008fdc:	20000188 	.word	0x20000188

08008fe0 <_close_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4d06      	ldr	r5, [pc, #24]	@ (8008ffc <_close_r+0x1c>)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	f7fb fc06 	bl	80047fc <_close>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_close_r+0x1a>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_close_r+0x1a>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	200007b8 	.word	0x200007b8

08009000 <_lseek_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	@ (8009020 <_lseek_r+0x20>)
 8009004:	4604      	mov	r4, r0
 8009006:	4608      	mov	r0, r1
 8009008:	4611      	mov	r1, r2
 800900a:	2200      	movs	r2, #0
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	f7fb fc1b 	bl	800484a <_lseek>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_lseek_r+0x1e>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_lseek_r+0x1e>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	200007b8 	.word	0x200007b8

08009024 <_read_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d07      	ldr	r5, [pc, #28]	@ (8009044 <_read_r+0x20>)
 8009028:	4604      	mov	r4, r0
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	2200      	movs	r2, #0
 8009030:	602a      	str	r2, [r5, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	f7fb fbc5 	bl	80047c2 <_read>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_read_r+0x1e>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_read_r+0x1e>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	200007b8 	.word	0x200007b8

08009048 <_write_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	@ (8009068 <_write_r+0x20>)
 800904c:	4604      	mov	r4, r0
 800904e:	4608      	mov	r0, r1
 8009050:	4611      	mov	r1, r2
 8009052:	2200      	movs	r2, #0
 8009054:	602a      	str	r2, [r5, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f7fb f8c0 	bl	80041dc <_write>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_write_r+0x1e>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_write_r+0x1e>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	200007b8 	.word	0x200007b8

0800906c <__errno>:
 800906c:	4b01      	ldr	r3, [pc, #4]	@ (8009074 <__errno+0x8>)
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20000204 	.word	0x20000204

08009078 <__libc_init_array>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4d0d      	ldr	r5, [pc, #52]	@ (80090b0 <__libc_init_array+0x38>)
 800907c:	4c0d      	ldr	r4, [pc, #52]	@ (80090b4 <__libc_init_array+0x3c>)
 800907e:	1b64      	subs	r4, r4, r5
 8009080:	10a4      	asrs	r4, r4, #2
 8009082:	2600      	movs	r6, #0
 8009084:	42a6      	cmp	r6, r4
 8009086:	d109      	bne.n	800909c <__libc_init_array+0x24>
 8009088:	4d0b      	ldr	r5, [pc, #44]	@ (80090b8 <__libc_init_array+0x40>)
 800908a:	4c0c      	ldr	r4, [pc, #48]	@ (80090bc <__libc_init_array+0x44>)
 800908c:	f002 fd44 	bl	800bb18 <_init>
 8009090:	1b64      	subs	r4, r4, r5
 8009092:	10a4      	asrs	r4, r4, #2
 8009094:	2600      	movs	r6, #0
 8009096:	42a6      	cmp	r6, r4
 8009098:	d105      	bne.n	80090a6 <__libc_init_array+0x2e>
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a0:	4798      	blx	r3
 80090a2:	3601      	adds	r6, #1
 80090a4:	e7ee      	b.n	8009084 <__libc_init_array+0xc>
 80090a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090aa:	4798      	blx	r3
 80090ac:	3601      	adds	r6, #1
 80090ae:	e7f2      	b.n	8009096 <__libc_init_array+0x1e>
 80090b0:	0800c094 	.word	0x0800c094
 80090b4:	0800c094 	.word	0x0800c094
 80090b8:	0800c094 	.word	0x0800c094
 80090bc:	0800c098 	.word	0x0800c098

080090c0 <__retarget_lock_init_recursive>:
 80090c0:	4770      	bx	lr

080090c2 <__retarget_lock_acquire_recursive>:
 80090c2:	4770      	bx	lr

080090c4 <__retarget_lock_release_recursive>:
 80090c4:	4770      	bx	lr

080090c6 <memcpy>:
 80090c6:	440a      	add	r2, r1
 80090c8:	4291      	cmp	r1, r2
 80090ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ce:	d100      	bne.n	80090d2 <memcpy+0xc>
 80090d0:	4770      	bx	lr
 80090d2:	b510      	push	{r4, lr}
 80090d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090dc:	4291      	cmp	r1, r2
 80090de:	d1f9      	bne.n	80090d4 <memcpy+0xe>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	0000      	movs	r0, r0
 80090e4:	0000      	movs	r0, r0
	...

080090e8 <nan>:
 80090e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80090f0 <nan+0x8>
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	00000000 	.word	0x00000000
 80090f4:	7ff80000 	.word	0x7ff80000

080090f8 <nanf>:
 80090f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009100 <nanf+0x8>
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	7fc00000 	.word	0x7fc00000

08009104 <__assert_func>:
 8009104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009106:	4614      	mov	r4, r2
 8009108:	461a      	mov	r2, r3
 800910a:	4b09      	ldr	r3, [pc, #36]	@ (8009130 <__assert_func+0x2c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4605      	mov	r5, r0
 8009110:	68d8      	ldr	r0, [r3, #12]
 8009112:	b954      	cbnz	r4, 800912a <__assert_func+0x26>
 8009114:	4b07      	ldr	r3, [pc, #28]	@ (8009134 <__assert_func+0x30>)
 8009116:	461c      	mov	r4, r3
 8009118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800911c:	9100      	str	r1, [sp, #0]
 800911e:	462b      	mov	r3, r5
 8009120:	4905      	ldr	r1, [pc, #20]	@ (8009138 <__assert_func+0x34>)
 8009122:	f002 fb25 	bl	800b770 <fiprintf>
 8009126:	f002 fbe3 	bl	800b8f0 <abort>
 800912a:	4b04      	ldr	r3, [pc, #16]	@ (800913c <__assert_func+0x38>)
 800912c:	e7f4      	b.n	8009118 <__assert_func+0x14>
 800912e:	bf00      	nop
 8009130:	20000204 	.word	0x20000204
 8009134:	0800bd45 	.word	0x0800bd45
 8009138:	0800bd17 	.word	0x0800bd17
 800913c:	0800bd0a 	.word	0x0800bd0a

08009140 <quorem>:
 8009140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	6903      	ldr	r3, [r0, #16]
 8009146:	690c      	ldr	r4, [r1, #16]
 8009148:	42a3      	cmp	r3, r4
 800914a:	4607      	mov	r7, r0
 800914c:	db7e      	blt.n	800924c <quorem+0x10c>
 800914e:	3c01      	subs	r4, #1
 8009150:	f101 0814 	add.w	r8, r1, #20
 8009154:	00a3      	lsls	r3, r4, #2
 8009156:	f100 0514 	add.w	r5, r0, #20
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009166:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800916a:	3301      	adds	r3, #1
 800916c:	429a      	cmp	r2, r3
 800916e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009172:	fbb2 f6f3 	udiv	r6, r2, r3
 8009176:	d32e      	bcc.n	80091d6 <quorem+0x96>
 8009178:	f04f 0a00 	mov.w	sl, #0
 800917c:	46c4      	mov	ip, r8
 800917e:	46ae      	mov	lr, r5
 8009180:	46d3      	mov	fp, sl
 8009182:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009186:	b298      	uxth	r0, r3
 8009188:	fb06 a000 	mla	r0, r6, r0, sl
 800918c:	0c02      	lsrs	r2, r0, #16
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	fb06 2303 	mla	r3, r6, r3, r2
 8009194:	f8de 2000 	ldr.w	r2, [lr]
 8009198:	b280      	uxth	r0, r0
 800919a:	b292      	uxth	r2, r2
 800919c:	1a12      	subs	r2, r2, r0
 800919e:	445a      	add	r2, fp
 80091a0:	f8de 0000 	ldr.w	r0, [lr]
 80091a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091b2:	b292      	uxth	r2, r2
 80091b4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091b8:	45e1      	cmp	r9, ip
 80091ba:	f84e 2b04 	str.w	r2, [lr], #4
 80091be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091c2:	d2de      	bcs.n	8009182 <quorem+0x42>
 80091c4:	9b00      	ldr	r3, [sp, #0]
 80091c6:	58eb      	ldr	r3, [r5, r3]
 80091c8:	b92b      	cbnz	r3, 80091d6 <quorem+0x96>
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	3b04      	subs	r3, #4
 80091ce:	429d      	cmp	r5, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	d32f      	bcc.n	8009234 <quorem+0xf4>
 80091d4:	613c      	str	r4, [r7, #16]
 80091d6:	4638      	mov	r0, r7
 80091d8:	f001 fd0e 	bl	800abf8 <__mcmp>
 80091dc:	2800      	cmp	r0, #0
 80091de:	db25      	blt.n	800922c <quorem+0xec>
 80091e0:	4629      	mov	r1, r5
 80091e2:	2000      	movs	r0, #0
 80091e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091e8:	f8d1 c000 	ldr.w	ip, [r1]
 80091ec:	fa1f fe82 	uxth.w	lr, r2
 80091f0:	fa1f f38c 	uxth.w	r3, ip
 80091f4:	eba3 030e 	sub.w	r3, r3, lr
 80091f8:	4403      	add	r3, r0
 80091fa:	0c12      	lsrs	r2, r2, #16
 80091fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009200:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009204:	b29b      	uxth	r3, r3
 8009206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800920a:	45c1      	cmp	r9, r8
 800920c:	f841 3b04 	str.w	r3, [r1], #4
 8009210:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009214:	d2e6      	bcs.n	80091e4 <quorem+0xa4>
 8009216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800921a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800921e:	b922      	cbnz	r2, 800922a <quorem+0xea>
 8009220:	3b04      	subs	r3, #4
 8009222:	429d      	cmp	r5, r3
 8009224:	461a      	mov	r2, r3
 8009226:	d30b      	bcc.n	8009240 <quorem+0x100>
 8009228:	613c      	str	r4, [r7, #16]
 800922a:	3601      	adds	r6, #1
 800922c:	4630      	mov	r0, r6
 800922e:	b003      	add	sp, #12
 8009230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	3b04      	subs	r3, #4
 8009238:	2a00      	cmp	r2, #0
 800923a:	d1cb      	bne.n	80091d4 <quorem+0x94>
 800923c:	3c01      	subs	r4, #1
 800923e:	e7c6      	b.n	80091ce <quorem+0x8e>
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	3b04      	subs	r3, #4
 8009244:	2a00      	cmp	r2, #0
 8009246:	d1ef      	bne.n	8009228 <quorem+0xe8>
 8009248:	3c01      	subs	r4, #1
 800924a:	e7ea      	b.n	8009222 <quorem+0xe2>
 800924c:	2000      	movs	r0, #0
 800924e:	e7ee      	b.n	800922e <quorem+0xee>

08009250 <_dtoa_r>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	69c7      	ldr	r7, [r0, #28]
 8009256:	b099      	sub	sp, #100	@ 0x64
 8009258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800925c:	ec55 4b10 	vmov	r4, r5, d0
 8009260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009262:	9109      	str	r1, [sp, #36]	@ 0x24
 8009264:	4683      	mov	fp, r0
 8009266:	920e      	str	r2, [sp, #56]	@ 0x38
 8009268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800926a:	b97f      	cbnz	r7, 800928c <_dtoa_r+0x3c>
 800926c:	2010      	movs	r0, #16
 800926e:	f001 f937 	bl	800a4e0 <malloc>
 8009272:	4602      	mov	r2, r0
 8009274:	f8cb 001c 	str.w	r0, [fp, #28]
 8009278:	b920      	cbnz	r0, 8009284 <_dtoa_r+0x34>
 800927a:	4ba7      	ldr	r3, [pc, #668]	@ (8009518 <_dtoa_r+0x2c8>)
 800927c:	21ef      	movs	r1, #239	@ 0xef
 800927e:	48a7      	ldr	r0, [pc, #668]	@ (800951c <_dtoa_r+0x2cc>)
 8009280:	f7ff ff40 	bl	8009104 <__assert_func>
 8009284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009288:	6007      	str	r7, [r0, #0]
 800928a:	60c7      	str	r7, [r0, #12]
 800928c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	b159      	cbz	r1, 80092ac <_dtoa_r+0x5c>
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	604a      	str	r2, [r1, #4]
 8009298:	2301      	movs	r3, #1
 800929a:	4093      	lsls	r3, r2
 800929c:	608b      	str	r3, [r1, #8]
 800929e:	4658      	mov	r0, fp
 80092a0:	f001 fa26 	bl	800a6f0 <_Bfree>
 80092a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	1e2b      	subs	r3, r5, #0
 80092ae:	bfb9      	ittee	lt
 80092b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80092b4:	9303      	strlt	r3, [sp, #12]
 80092b6:	2300      	movge	r3, #0
 80092b8:	6033      	strge	r3, [r6, #0]
 80092ba:	9f03      	ldr	r7, [sp, #12]
 80092bc:	4b98      	ldr	r3, [pc, #608]	@ (8009520 <_dtoa_r+0x2d0>)
 80092be:	bfbc      	itt	lt
 80092c0:	2201      	movlt	r2, #1
 80092c2:	6032      	strlt	r2, [r6, #0]
 80092c4:	43bb      	bics	r3, r7
 80092c6:	d112      	bne.n	80092ee <_dtoa_r+0x9e>
 80092c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092d4:	4323      	orrs	r3, r4
 80092d6:	f000 854d 	beq.w	8009d74 <_dtoa_r+0xb24>
 80092da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009534 <_dtoa_r+0x2e4>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 854f 	beq.w	8009d84 <_dtoa_r+0xb34>
 80092e6:	f10a 0303 	add.w	r3, sl, #3
 80092ea:	f000 bd49 	b.w	8009d80 <_dtoa_r+0xb30>
 80092ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	ec51 0b17 	vmov	r0, r1, d7
 80092f8:	2300      	movs	r3, #0
 80092fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092fe:	f7f7 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009302:	4680      	mov	r8, r0
 8009304:	b158      	cbz	r0, 800931e <_dtoa_r+0xce>
 8009306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009308:	2301      	movs	r3, #1
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800930e:	b113      	cbz	r3, 8009316 <_dtoa_r+0xc6>
 8009310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009312:	4b84      	ldr	r3, [pc, #528]	@ (8009524 <_dtoa_r+0x2d4>)
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009538 <_dtoa_r+0x2e8>
 800931a:	f000 bd33 	b.w	8009d84 <_dtoa_r+0xb34>
 800931e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009322:	aa16      	add	r2, sp, #88	@ 0x58
 8009324:	a917      	add	r1, sp, #92	@ 0x5c
 8009326:	4658      	mov	r0, fp
 8009328:	f001 fd86 	bl	800ae38 <__d2b>
 800932c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009330:	4681      	mov	r9, r0
 8009332:	2e00      	cmp	r6, #0
 8009334:	d077      	beq.n	8009426 <_dtoa_r+0x1d6>
 8009336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800933c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800934c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009350:	4619      	mov	r1, r3
 8009352:	2200      	movs	r2, #0
 8009354:	4b74      	ldr	r3, [pc, #464]	@ (8009528 <_dtoa_r+0x2d8>)
 8009356:	f7f6 ff97 	bl	8000288 <__aeabi_dsub>
 800935a:	a369      	add	r3, pc, #420	@ (adr r3, 8009500 <_dtoa_r+0x2b0>)
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	a368      	add	r3, pc, #416	@ (adr r3, 8009508 <_dtoa_r+0x2b8>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f7f6 ff8f 	bl	800028c <__adddf3>
 800936e:	4604      	mov	r4, r0
 8009370:	4630      	mov	r0, r6
 8009372:	460d      	mov	r5, r1
 8009374:	f7f7 f8d6 	bl	8000524 <__aeabi_i2d>
 8009378:	a365      	add	r3, pc, #404	@ (adr r3, 8009510 <_dtoa_r+0x2c0>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f93b 	bl	80005f8 <__aeabi_dmul>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f6 ff7f 	bl	800028c <__adddf3>
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	f7f7 fbe1 	bl	8000b58 <__aeabi_d2iz>
 8009396:	2200      	movs	r2, #0
 8009398:	4607      	mov	r7, r0
 800939a:	2300      	movs	r3, #0
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80093a4:	b140      	cbz	r0, 80093b8 <_dtoa_r+0x168>
 80093a6:	4638      	mov	r0, r7
 80093a8:	f7f7 f8bc 	bl	8000524 <__aeabi_i2d>
 80093ac:	4622      	mov	r2, r4
 80093ae:	462b      	mov	r3, r5
 80093b0:	f7f7 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80093b4:	b900      	cbnz	r0, 80093b8 <_dtoa_r+0x168>
 80093b6:	3f01      	subs	r7, #1
 80093b8:	2f16      	cmp	r7, #22
 80093ba:	d851      	bhi.n	8009460 <_dtoa_r+0x210>
 80093bc:	4b5b      	ldr	r3, [pc, #364]	@ (800952c <_dtoa_r+0x2dc>)
 80093be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ca:	f7f7 fb87 	bl	8000adc <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d048      	beq.n	8009464 <_dtoa_r+0x214>
 80093d2:	3f01      	subs	r7, #1
 80093d4:	2300      	movs	r3, #0
 80093d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80093d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093da:	1b9b      	subs	r3, r3, r6
 80093dc:	1e5a      	subs	r2, r3, #1
 80093de:	bf44      	itt	mi
 80093e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80093e4:	2300      	movmi	r3, #0
 80093e6:	9208      	str	r2, [sp, #32]
 80093e8:	bf54      	ite	pl
 80093ea:	f04f 0800 	movpl.w	r8, #0
 80093ee:	9308      	strmi	r3, [sp, #32]
 80093f0:	2f00      	cmp	r7, #0
 80093f2:	db39      	blt.n	8009468 <_dtoa_r+0x218>
 80093f4:	9b08      	ldr	r3, [sp, #32]
 80093f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093f8:	443b      	add	r3, r7
 80093fa:	9308      	str	r3, [sp, #32]
 80093fc:	2300      	movs	r3, #0
 80093fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009402:	2b09      	cmp	r3, #9
 8009404:	d864      	bhi.n	80094d0 <_dtoa_r+0x280>
 8009406:	2b05      	cmp	r3, #5
 8009408:	bfc4      	itt	gt
 800940a:	3b04      	subgt	r3, #4
 800940c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800940e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009410:	f1a3 0302 	sub.w	r3, r3, #2
 8009414:	bfcc      	ite	gt
 8009416:	2400      	movgt	r4, #0
 8009418:	2401      	movle	r4, #1
 800941a:	2b03      	cmp	r3, #3
 800941c:	d863      	bhi.n	80094e6 <_dtoa_r+0x296>
 800941e:	e8df f003 	tbb	[pc, r3]
 8009422:	372a      	.short	0x372a
 8009424:	5535      	.short	0x5535
 8009426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800942a:	441e      	add	r6, r3
 800942c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009430:	2b20      	cmp	r3, #32
 8009432:	bfc1      	itttt	gt
 8009434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009438:	409f      	lslgt	r7, r3
 800943a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800943e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009442:	bfd6      	itet	le
 8009444:	f1c3 0320 	rsble	r3, r3, #32
 8009448:	ea47 0003 	orrgt.w	r0, r7, r3
 800944c:	fa04 f003 	lslle.w	r0, r4, r3
 8009450:	f7f7 f858 	bl	8000504 <__aeabi_ui2d>
 8009454:	2201      	movs	r2, #1
 8009456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800945a:	3e01      	subs	r6, #1
 800945c:	9214      	str	r2, [sp, #80]	@ 0x50
 800945e:	e777      	b.n	8009350 <_dtoa_r+0x100>
 8009460:	2301      	movs	r3, #1
 8009462:	e7b8      	b.n	80093d6 <_dtoa_r+0x186>
 8009464:	9012      	str	r0, [sp, #72]	@ 0x48
 8009466:	e7b7      	b.n	80093d8 <_dtoa_r+0x188>
 8009468:	427b      	negs	r3, r7
 800946a:	930a      	str	r3, [sp, #40]	@ 0x28
 800946c:	2300      	movs	r3, #0
 800946e:	eba8 0807 	sub.w	r8, r8, r7
 8009472:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009474:	e7c4      	b.n	8009400 <_dtoa_r+0x1b0>
 8009476:	2300      	movs	r3, #0
 8009478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800947a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	dc35      	bgt.n	80094ec <_dtoa_r+0x29c>
 8009480:	2301      	movs	r3, #1
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	9307      	str	r3, [sp, #28]
 8009486:	461a      	mov	r2, r3
 8009488:	920e      	str	r2, [sp, #56]	@ 0x38
 800948a:	e00b      	b.n	80094a4 <_dtoa_r+0x254>
 800948c:	2301      	movs	r3, #1
 800948e:	e7f3      	b.n	8009478 <_dtoa_r+0x228>
 8009490:	2300      	movs	r3, #0
 8009492:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009496:	18fb      	adds	r3, r7, r3
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	3301      	adds	r3, #1
 800949c:	2b01      	cmp	r3, #1
 800949e:	9307      	str	r3, [sp, #28]
 80094a0:	bfb8      	it	lt
 80094a2:	2301      	movlt	r3, #1
 80094a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80094a8:	2100      	movs	r1, #0
 80094aa:	2204      	movs	r2, #4
 80094ac:	f102 0514 	add.w	r5, r2, #20
 80094b0:	429d      	cmp	r5, r3
 80094b2:	d91f      	bls.n	80094f4 <_dtoa_r+0x2a4>
 80094b4:	6041      	str	r1, [r0, #4]
 80094b6:	4658      	mov	r0, fp
 80094b8:	f001 f8da 	bl	800a670 <_Balloc>
 80094bc:	4682      	mov	sl, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d13c      	bne.n	800953c <_dtoa_r+0x2ec>
 80094c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009530 <_dtoa_r+0x2e0>)
 80094c4:	4602      	mov	r2, r0
 80094c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80094ca:	e6d8      	b.n	800927e <_dtoa_r+0x2e>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e7e0      	b.n	8009492 <_dtoa_r+0x242>
 80094d0:	2401      	movs	r4, #1
 80094d2:	2300      	movs	r3, #0
 80094d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094d8:	f04f 33ff 	mov.w	r3, #4294967295
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	9307      	str	r3, [sp, #28]
 80094e0:	2200      	movs	r2, #0
 80094e2:	2312      	movs	r3, #18
 80094e4:	e7d0      	b.n	8009488 <_dtoa_r+0x238>
 80094e6:	2301      	movs	r3, #1
 80094e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094ea:	e7f5      	b.n	80094d8 <_dtoa_r+0x288>
 80094ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	e7d7      	b.n	80094a4 <_dtoa_r+0x254>
 80094f4:	3101      	adds	r1, #1
 80094f6:	0052      	lsls	r2, r2, #1
 80094f8:	e7d8      	b.n	80094ac <_dtoa_r+0x25c>
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w
 8009500:	636f4361 	.word	0x636f4361
 8009504:	3fd287a7 	.word	0x3fd287a7
 8009508:	8b60c8b3 	.word	0x8b60c8b3
 800950c:	3fc68a28 	.word	0x3fc68a28
 8009510:	509f79fb 	.word	0x509f79fb
 8009514:	3fd34413 	.word	0x3fd34413
 8009518:	0800bc91 	.word	0x0800bc91
 800951c:	0800bd53 	.word	0x0800bd53
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	0800bc69 	.word	0x0800bc69
 8009528:	3ff80000 	.word	0x3ff80000
 800952c:	0800beb0 	.word	0x0800beb0
 8009530:	0800bdab 	.word	0x0800bdab
 8009534:	0800bd4f 	.word	0x0800bd4f
 8009538:	0800bc68 	.word	0x0800bc68
 800953c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009540:	6018      	str	r0, [r3, #0]
 8009542:	9b07      	ldr	r3, [sp, #28]
 8009544:	2b0e      	cmp	r3, #14
 8009546:	f200 80a4 	bhi.w	8009692 <_dtoa_r+0x442>
 800954a:	2c00      	cmp	r4, #0
 800954c:	f000 80a1 	beq.w	8009692 <_dtoa_r+0x442>
 8009550:	2f00      	cmp	r7, #0
 8009552:	dd33      	ble.n	80095bc <_dtoa_r+0x36c>
 8009554:	4bad      	ldr	r3, [pc, #692]	@ (800980c <_dtoa_r+0x5bc>)
 8009556:	f007 020f 	and.w	r2, r7, #15
 800955a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800955e:	ed93 7b00 	vldr	d7, [r3]
 8009562:	05f8      	lsls	r0, r7, #23
 8009564:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800956c:	d516      	bpl.n	800959c <_dtoa_r+0x34c>
 800956e:	4ba8      	ldr	r3, [pc, #672]	@ (8009810 <_dtoa_r+0x5c0>)
 8009570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009578:	f7f7 f968 	bl	800084c <__aeabi_ddiv>
 800957c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009580:	f004 040f 	and.w	r4, r4, #15
 8009584:	2603      	movs	r6, #3
 8009586:	4da2      	ldr	r5, [pc, #648]	@ (8009810 <_dtoa_r+0x5c0>)
 8009588:	b954      	cbnz	r4, 80095a0 <_dtoa_r+0x350>
 800958a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800958e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009592:	f7f7 f95b 	bl	800084c <__aeabi_ddiv>
 8009596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800959a:	e028      	b.n	80095ee <_dtoa_r+0x39e>
 800959c:	2602      	movs	r6, #2
 800959e:	e7f2      	b.n	8009586 <_dtoa_r+0x336>
 80095a0:	07e1      	lsls	r1, r4, #31
 80095a2:	d508      	bpl.n	80095b6 <_dtoa_r+0x366>
 80095a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095b4:	3601      	adds	r6, #1
 80095b6:	1064      	asrs	r4, r4, #1
 80095b8:	3508      	adds	r5, #8
 80095ba:	e7e5      	b.n	8009588 <_dtoa_r+0x338>
 80095bc:	f000 80d2 	beq.w	8009764 <_dtoa_r+0x514>
 80095c0:	427c      	negs	r4, r7
 80095c2:	4b92      	ldr	r3, [pc, #584]	@ (800980c <_dtoa_r+0x5bc>)
 80095c4:	4d92      	ldr	r5, [pc, #584]	@ (8009810 <_dtoa_r+0x5c0>)
 80095c6:	f004 020f 	and.w	r2, r4, #15
 80095ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095d6:	f7f7 f80f 	bl	80005f8 <__aeabi_dmul>
 80095da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095de:	1124      	asrs	r4, r4, #4
 80095e0:	2300      	movs	r3, #0
 80095e2:	2602      	movs	r6, #2
 80095e4:	2c00      	cmp	r4, #0
 80095e6:	f040 80b2 	bne.w	800974e <_dtoa_r+0x4fe>
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1d3      	bne.n	8009596 <_dtoa_r+0x346>
 80095ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 80b7 	beq.w	8009768 <_dtoa_r+0x518>
 80095fa:	4b86      	ldr	r3, [pc, #536]	@ (8009814 <_dtoa_r+0x5c4>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	4620      	mov	r0, r4
 8009600:	4629      	mov	r1, r5
 8009602:	f7f7 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8009606:	2800      	cmp	r0, #0
 8009608:	f000 80ae 	beq.w	8009768 <_dtoa_r+0x518>
 800960c:	9b07      	ldr	r3, [sp, #28]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 80aa 	beq.w	8009768 <_dtoa_r+0x518>
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	dd37      	ble.n	800968a <_dtoa_r+0x43a>
 800961a:	1e7b      	subs	r3, r7, #1
 800961c:	9304      	str	r3, [sp, #16]
 800961e:	4620      	mov	r0, r4
 8009620:	4b7d      	ldr	r3, [pc, #500]	@ (8009818 <_dtoa_r+0x5c8>)
 8009622:	2200      	movs	r2, #0
 8009624:	4629      	mov	r1, r5
 8009626:	f7f6 ffe7 	bl	80005f8 <__aeabi_dmul>
 800962a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800962e:	9c00      	ldr	r4, [sp, #0]
 8009630:	3601      	adds	r6, #1
 8009632:	4630      	mov	r0, r6
 8009634:	f7f6 ff76 	bl	8000524 <__aeabi_i2d>
 8009638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800963c:	f7f6 ffdc 	bl	80005f8 <__aeabi_dmul>
 8009640:	4b76      	ldr	r3, [pc, #472]	@ (800981c <_dtoa_r+0x5cc>)
 8009642:	2200      	movs	r2, #0
 8009644:	f7f6 fe22 	bl	800028c <__adddf3>
 8009648:	4605      	mov	r5, r0
 800964a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800964e:	2c00      	cmp	r4, #0
 8009650:	f040 808d 	bne.w	800976e <_dtoa_r+0x51e>
 8009654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009658:	4b71      	ldr	r3, [pc, #452]	@ (8009820 <_dtoa_r+0x5d0>)
 800965a:	2200      	movs	r2, #0
 800965c:	f7f6 fe14 	bl	8000288 <__aeabi_dsub>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009668:	462a      	mov	r2, r5
 800966a:	4633      	mov	r3, r6
 800966c:	f7f7 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8009670:	2800      	cmp	r0, #0
 8009672:	f040 828b 	bne.w	8009b8c <_dtoa_r+0x93c>
 8009676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967a:	462a      	mov	r2, r5
 800967c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009680:	f7f7 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8009684:	2800      	cmp	r0, #0
 8009686:	f040 8128 	bne.w	80098da <_dtoa_r+0x68a>
 800968a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800968e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009694:	2b00      	cmp	r3, #0
 8009696:	f2c0 815a 	blt.w	800994e <_dtoa_r+0x6fe>
 800969a:	2f0e      	cmp	r7, #14
 800969c:	f300 8157 	bgt.w	800994e <_dtoa_r+0x6fe>
 80096a0:	4b5a      	ldr	r3, [pc, #360]	@ (800980c <_dtoa_r+0x5bc>)
 80096a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096a6:	ed93 7b00 	vldr	d7, [r3]
 80096aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	ed8d 7b00 	vstr	d7, [sp]
 80096b2:	da03      	bge.n	80096bc <_dtoa_r+0x46c>
 80096b4:	9b07      	ldr	r3, [sp, #28]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f340 8101 	ble.w	80098be <_dtoa_r+0x66e>
 80096bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096c0:	4656      	mov	r6, sl
 80096c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 f8bf 	bl	800084c <__aeabi_ddiv>
 80096ce:	f7f7 fa43 	bl	8000b58 <__aeabi_d2iz>
 80096d2:	4680      	mov	r8, r0
 80096d4:	f7f6 ff26 	bl	8000524 <__aeabi_i2d>
 80096d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096dc:	f7f6 ff8c 	bl	80005f8 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4620      	mov	r0, r4
 80096e6:	4629      	mov	r1, r5
 80096e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096ec:	f7f6 fdcc 	bl	8000288 <__aeabi_dsub>
 80096f0:	f806 4b01 	strb.w	r4, [r6], #1
 80096f4:	9d07      	ldr	r5, [sp, #28]
 80096f6:	eba6 040a 	sub.w	r4, r6, sl
 80096fa:	42a5      	cmp	r5, r4
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	f040 8117 	bne.w	8009932 <_dtoa_r+0x6e2>
 8009704:	f7f6 fdc2 	bl	800028c <__adddf3>
 8009708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800970c:	4604      	mov	r4, r0
 800970e:	460d      	mov	r5, r1
 8009710:	f7f7 fa02 	bl	8000b18 <__aeabi_dcmpgt>
 8009714:	2800      	cmp	r0, #0
 8009716:	f040 80f9 	bne.w	800990c <_dtoa_r+0x6bc>
 800971a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f7 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009726:	b118      	cbz	r0, 8009730 <_dtoa_r+0x4e0>
 8009728:	f018 0f01 	tst.w	r8, #1
 800972c:	f040 80ee 	bne.w	800990c <_dtoa_r+0x6bc>
 8009730:	4649      	mov	r1, r9
 8009732:	4658      	mov	r0, fp
 8009734:	f000 ffdc 	bl	800a6f0 <_Bfree>
 8009738:	2300      	movs	r3, #0
 800973a:	7033      	strb	r3, [r6, #0]
 800973c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800973e:	3701      	adds	r7, #1
 8009740:	601f      	str	r7, [r3, #0]
 8009742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 831d 	beq.w	8009d84 <_dtoa_r+0xb34>
 800974a:	601e      	str	r6, [r3, #0]
 800974c:	e31a      	b.n	8009d84 <_dtoa_r+0xb34>
 800974e:	07e2      	lsls	r2, r4, #31
 8009750:	d505      	bpl.n	800975e <_dtoa_r+0x50e>
 8009752:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009756:	f7f6 ff4f 	bl	80005f8 <__aeabi_dmul>
 800975a:	3601      	adds	r6, #1
 800975c:	2301      	movs	r3, #1
 800975e:	1064      	asrs	r4, r4, #1
 8009760:	3508      	adds	r5, #8
 8009762:	e73f      	b.n	80095e4 <_dtoa_r+0x394>
 8009764:	2602      	movs	r6, #2
 8009766:	e742      	b.n	80095ee <_dtoa_r+0x39e>
 8009768:	9c07      	ldr	r4, [sp, #28]
 800976a:	9704      	str	r7, [sp, #16]
 800976c:	e761      	b.n	8009632 <_dtoa_r+0x3e2>
 800976e:	4b27      	ldr	r3, [pc, #156]	@ (800980c <_dtoa_r+0x5bc>)
 8009770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800977a:	4454      	add	r4, sl
 800977c:	2900      	cmp	r1, #0
 800977e:	d053      	beq.n	8009828 <_dtoa_r+0x5d8>
 8009780:	4928      	ldr	r1, [pc, #160]	@ (8009824 <_dtoa_r+0x5d4>)
 8009782:	2000      	movs	r0, #0
 8009784:	f7f7 f862 	bl	800084c <__aeabi_ddiv>
 8009788:	4633      	mov	r3, r6
 800978a:	462a      	mov	r2, r5
 800978c:	f7f6 fd7c 	bl	8000288 <__aeabi_dsub>
 8009790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009794:	4656      	mov	r6, sl
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f7 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800979e:	4605      	mov	r5, r0
 80097a0:	f7f6 fec0 	bl	8000524 <__aeabi_i2d>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ac:	f7f6 fd6c 	bl	8000288 <__aeabi_dsub>
 80097b0:	3530      	adds	r5, #48	@ 0x30
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097ba:	f806 5b01 	strb.w	r5, [r6], #1
 80097be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097c2:	f7f7 f98b 	bl	8000adc <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d171      	bne.n	80098ae <_dtoa_r+0x65e>
 80097ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ce:	4911      	ldr	r1, [pc, #68]	@ (8009814 <_dtoa_r+0x5c4>)
 80097d0:	2000      	movs	r0, #0
 80097d2:	f7f6 fd59 	bl	8000288 <__aeabi_dsub>
 80097d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097da:	f7f7 f97f 	bl	8000adc <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f040 8095 	bne.w	800990e <_dtoa_r+0x6be>
 80097e4:	42a6      	cmp	r6, r4
 80097e6:	f43f af50 	beq.w	800968a <_dtoa_r+0x43a>
 80097ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <_dtoa_r+0x5c8>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 ff01 	bl	80005f8 <__aeabi_dmul>
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <_dtoa_r+0x5c8>)
 80097f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097fc:	2200      	movs	r2, #0
 80097fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009802:	f7f6 fef9 	bl	80005f8 <__aeabi_dmul>
 8009806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800980a:	e7c4      	b.n	8009796 <_dtoa_r+0x546>
 800980c:	0800beb0 	.word	0x0800beb0
 8009810:	0800be88 	.word	0x0800be88
 8009814:	3ff00000 	.word	0x3ff00000
 8009818:	40240000 	.word	0x40240000
 800981c:	401c0000 	.word	0x401c0000
 8009820:	40140000 	.word	0x40140000
 8009824:	3fe00000 	.word	0x3fe00000
 8009828:	4631      	mov	r1, r6
 800982a:	4628      	mov	r0, r5
 800982c:	f7f6 fee4 	bl	80005f8 <__aeabi_dmul>
 8009830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009834:	9415      	str	r4, [sp, #84]	@ 0x54
 8009836:	4656      	mov	r6, sl
 8009838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800983c:	f7f7 f98c 	bl	8000b58 <__aeabi_d2iz>
 8009840:	4605      	mov	r5, r0
 8009842:	f7f6 fe6f 	bl	8000524 <__aeabi_i2d>
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800984e:	f7f6 fd1b 	bl	8000288 <__aeabi_dsub>
 8009852:	3530      	adds	r5, #48	@ 0x30
 8009854:	f806 5b01 	strb.w	r5, [r6], #1
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	42a6      	cmp	r6, r4
 800985e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	d124      	bne.n	80098b2 <_dtoa_r+0x662>
 8009868:	4bac      	ldr	r3, [pc, #688]	@ (8009b1c <_dtoa_r+0x8cc>)
 800986a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800986e:	f7f6 fd0d 	bl	800028c <__adddf3>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987a:	f7f7 f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d145      	bne.n	800990e <_dtoa_r+0x6be>
 8009882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009886:	49a5      	ldr	r1, [pc, #660]	@ (8009b1c <_dtoa_r+0x8cc>)
 8009888:	2000      	movs	r0, #0
 800988a:	f7f6 fcfd 	bl	8000288 <__aeabi_dsub>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009896:	f7f7 f921 	bl	8000adc <__aeabi_dcmplt>
 800989a:	2800      	cmp	r0, #0
 800989c:	f43f aef5 	beq.w	800968a <_dtoa_r+0x43a>
 80098a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80098a2:	1e73      	subs	r3, r6, #1
 80098a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80098a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098aa:	2b30      	cmp	r3, #48	@ 0x30
 80098ac:	d0f8      	beq.n	80098a0 <_dtoa_r+0x650>
 80098ae:	9f04      	ldr	r7, [sp, #16]
 80098b0:	e73e      	b.n	8009730 <_dtoa_r+0x4e0>
 80098b2:	4b9b      	ldr	r3, [pc, #620]	@ (8009b20 <_dtoa_r+0x8d0>)
 80098b4:	f7f6 fea0 	bl	80005f8 <__aeabi_dmul>
 80098b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098bc:	e7bc      	b.n	8009838 <_dtoa_r+0x5e8>
 80098be:	d10c      	bne.n	80098da <_dtoa_r+0x68a>
 80098c0:	4b98      	ldr	r3, [pc, #608]	@ (8009b24 <_dtoa_r+0x8d4>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d0:	f7f7 f918 	bl	8000b04 <__aeabi_dcmpge>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f000 8157 	beq.w	8009b88 <_dtoa_r+0x938>
 80098da:	2400      	movs	r4, #0
 80098dc:	4625      	mov	r5, r4
 80098de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098e0:	43db      	mvns	r3, r3
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	4656      	mov	r6, sl
 80098e6:	2700      	movs	r7, #0
 80098e8:	4621      	mov	r1, r4
 80098ea:	4658      	mov	r0, fp
 80098ec:	f000 ff00 	bl	800a6f0 <_Bfree>
 80098f0:	2d00      	cmp	r5, #0
 80098f2:	d0dc      	beq.n	80098ae <_dtoa_r+0x65e>
 80098f4:	b12f      	cbz	r7, 8009902 <_dtoa_r+0x6b2>
 80098f6:	42af      	cmp	r7, r5
 80098f8:	d003      	beq.n	8009902 <_dtoa_r+0x6b2>
 80098fa:	4639      	mov	r1, r7
 80098fc:	4658      	mov	r0, fp
 80098fe:	f000 fef7 	bl	800a6f0 <_Bfree>
 8009902:	4629      	mov	r1, r5
 8009904:	4658      	mov	r0, fp
 8009906:	f000 fef3 	bl	800a6f0 <_Bfree>
 800990a:	e7d0      	b.n	80098ae <_dtoa_r+0x65e>
 800990c:	9704      	str	r7, [sp, #16]
 800990e:	4633      	mov	r3, r6
 8009910:	461e      	mov	r6, r3
 8009912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009916:	2a39      	cmp	r2, #57	@ 0x39
 8009918:	d107      	bne.n	800992a <_dtoa_r+0x6da>
 800991a:	459a      	cmp	sl, r3
 800991c:	d1f8      	bne.n	8009910 <_dtoa_r+0x6c0>
 800991e:	9a04      	ldr	r2, [sp, #16]
 8009920:	3201      	adds	r2, #1
 8009922:	9204      	str	r2, [sp, #16]
 8009924:	2230      	movs	r2, #48	@ 0x30
 8009926:	f88a 2000 	strb.w	r2, [sl]
 800992a:	781a      	ldrb	r2, [r3, #0]
 800992c:	3201      	adds	r2, #1
 800992e:	701a      	strb	r2, [r3, #0]
 8009930:	e7bd      	b.n	80098ae <_dtoa_r+0x65e>
 8009932:	4b7b      	ldr	r3, [pc, #492]	@ (8009b20 <_dtoa_r+0x8d0>)
 8009934:	2200      	movs	r2, #0
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	2200      	movs	r2, #0
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	460d      	mov	r5, r1
 8009942:	f7f7 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f aebb 	beq.w	80096c2 <_dtoa_r+0x472>
 800994c:	e6f0      	b.n	8009730 <_dtoa_r+0x4e0>
 800994e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009950:	2a00      	cmp	r2, #0
 8009952:	f000 80db 	beq.w	8009b0c <_dtoa_r+0x8bc>
 8009956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009958:	2a01      	cmp	r2, #1
 800995a:	f300 80bf 	bgt.w	8009adc <_dtoa_r+0x88c>
 800995e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009960:	2a00      	cmp	r2, #0
 8009962:	f000 80b7 	beq.w	8009ad4 <_dtoa_r+0x884>
 8009966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800996a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800996c:	4646      	mov	r6, r8
 800996e:	9a08      	ldr	r2, [sp, #32]
 8009970:	2101      	movs	r1, #1
 8009972:	441a      	add	r2, r3
 8009974:	4658      	mov	r0, fp
 8009976:	4498      	add	r8, r3
 8009978:	9208      	str	r2, [sp, #32]
 800997a:	f000 ffb7 	bl	800a8ec <__i2b>
 800997e:	4605      	mov	r5, r0
 8009980:	b15e      	cbz	r6, 800999a <_dtoa_r+0x74a>
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd08      	ble.n	800999a <_dtoa_r+0x74a>
 8009988:	42b3      	cmp	r3, r6
 800998a:	9a08      	ldr	r2, [sp, #32]
 800998c:	bfa8      	it	ge
 800998e:	4633      	movge	r3, r6
 8009990:	eba8 0803 	sub.w	r8, r8, r3
 8009994:	1af6      	subs	r6, r6, r3
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999c:	b1f3      	cbz	r3, 80099dc <_dtoa_r+0x78c>
 800999e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80b7 	beq.w	8009b14 <_dtoa_r+0x8c4>
 80099a6:	b18c      	cbz	r4, 80099cc <_dtoa_r+0x77c>
 80099a8:	4629      	mov	r1, r5
 80099aa:	4622      	mov	r2, r4
 80099ac:	4658      	mov	r0, fp
 80099ae:	f001 f85d 	bl	800aa6c <__pow5mult>
 80099b2:	464a      	mov	r2, r9
 80099b4:	4601      	mov	r1, r0
 80099b6:	4605      	mov	r5, r0
 80099b8:	4658      	mov	r0, fp
 80099ba:	f000 ffad 	bl	800a918 <__multiply>
 80099be:	4649      	mov	r1, r9
 80099c0:	9004      	str	r0, [sp, #16]
 80099c2:	4658      	mov	r0, fp
 80099c4:	f000 fe94 	bl	800a6f0 <_Bfree>
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	4699      	mov	r9, r3
 80099cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ce:	1b1a      	subs	r2, r3, r4
 80099d0:	d004      	beq.n	80099dc <_dtoa_r+0x78c>
 80099d2:	4649      	mov	r1, r9
 80099d4:	4658      	mov	r0, fp
 80099d6:	f001 f849 	bl	800aa6c <__pow5mult>
 80099da:	4681      	mov	r9, r0
 80099dc:	2101      	movs	r1, #1
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 ff84 	bl	800a8ec <__i2b>
 80099e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e6:	4604      	mov	r4, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 81cf 	beq.w	8009d8c <_dtoa_r+0xb3c>
 80099ee:	461a      	mov	r2, r3
 80099f0:	4601      	mov	r1, r0
 80099f2:	4658      	mov	r0, fp
 80099f4:	f001 f83a 	bl	800aa6c <__pow5mult>
 80099f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	4604      	mov	r4, r0
 80099fe:	f300 8095 	bgt.w	8009b2c <_dtoa_r+0x8dc>
 8009a02:	9b02      	ldr	r3, [sp, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f040 8087 	bne.w	8009b18 <_dtoa_r+0x8c8>
 8009a0a:	9b03      	ldr	r3, [sp, #12]
 8009a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 8089 	bne.w	8009b28 <_dtoa_r+0x8d8>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a1c:	0d1b      	lsrs	r3, r3, #20
 8009a1e:	051b      	lsls	r3, r3, #20
 8009a20:	b12b      	cbz	r3, 8009a2e <_dtoa_r+0x7de>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	3301      	adds	r3, #1
 8009a26:	9308      	str	r3, [sp, #32]
 8009a28:	f108 0801 	add.w	r8, r8, #1
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 81b0 	beq.w	8009d98 <_dtoa_r+0xb48>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a3e:	6918      	ldr	r0, [r3, #16]
 8009a40:	f000 ff08 	bl	800a854 <__hi0bits>
 8009a44:	f1c0 0020 	rsb	r0, r0, #32
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	4418      	add	r0, r3
 8009a4c:	f010 001f 	ands.w	r0, r0, #31
 8009a50:	d077      	beq.n	8009b42 <_dtoa_r+0x8f2>
 8009a52:	f1c0 0320 	rsb	r3, r0, #32
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	dd6b      	ble.n	8009b32 <_dtoa_r+0x8e2>
 8009a5a:	9b08      	ldr	r3, [sp, #32]
 8009a5c:	f1c0 001c 	rsb	r0, r0, #28
 8009a60:	4403      	add	r3, r0
 8009a62:	4480      	add	r8, r0
 8009a64:	4406      	add	r6, r0
 8009a66:	9308      	str	r3, [sp, #32]
 8009a68:	f1b8 0f00 	cmp.w	r8, #0
 8009a6c:	dd05      	ble.n	8009a7a <_dtoa_r+0x82a>
 8009a6e:	4649      	mov	r1, r9
 8009a70:	4642      	mov	r2, r8
 8009a72:	4658      	mov	r0, fp
 8009a74:	f001 f854 	bl	800ab20 <__lshift>
 8009a78:	4681      	mov	r9, r0
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd05      	ble.n	8009a8c <_dtoa_r+0x83c>
 8009a80:	4621      	mov	r1, r4
 8009a82:	461a      	mov	r2, r3
 8009a84:	4658      	mov	r0, fp
 8009a86:	f001 f84b 	bl	800ab20 <__lshift>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d059      	beq.n	8009b46 <_dtoa_r+0x8f6>
 8009a92:	4621      	mov	r1, r4
 8009a94:	4648      	mov	r0, r9
 8009a96:	f001 f8af 	bl	800abf8 <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	da53      	bge.n	8009b46 <_dtoa_r+0x8f6>
 8009a9e:	1e7b      	subs	r3, r7, #1
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	4658      	mov	r0, fp
 8009aaa:	f000 fe43 	bl	800a734 <__multadd>
 8009aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ab0:	4681      	mov	r9, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 8172 	beq.w	8009d9c <_dtoa_r+0xb4c>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4629      	mov	r1, r5
 8009abc:	220a      	movs	r2, #10
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 fe38 	bl	800a734 <__multadd>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	4605      	mov	r5, r0
 8009aca:	dc67      	bgt.n	8009b9c <_dtoa_r+0x94c>
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	dc41      	bgt.n	8009b56 <_dtoa_r+0x906>
 8009ad2:	e063      	b.n	8009b9c <_dtoa_r+0x94c>
 8009ad4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009ada:	e746      	b.n	800996a <_dtoa_r+0x71a>
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	1e5c      	subs	r4, r3, #1
 8009ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	bfbf      	itttt	lt
 8009ae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009aea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009aec:	1ae3      	sublt	r3, r4, r3
 8009aee:	bfb4      	ite	lt
 8009af0:	18d2      	addlt	r2, r2, r3
 8009af2:	1b1c      	subge	r4, r3, r4
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	bfbc      	itt	lt
 8009af8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009afa:	2400      	movlt	r4, #0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bfb5      	itete	lt
 8009b00:	eba8 0603 	sublt.w	r6, r8, r3
 8009b04:	9b07      	ldrge	r3, [sp, #28]
 8009b06:	2300      	movlt	r3, #0
 8009b08:	4646      	movge	r6, r8
 8009b0a:	e730      	b.n	800996e <_dtoa_r+0x71e>
 8009b0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009b10:	4646      	mov	r6, r8
 8009b12:	e735      	b.n	8009980 <_dtoa_r+0x730>
 8009b14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b16:	e75c      	b.n	80099d2 <_dtoa_r+0x782>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e788      	b.n	8009a2e <_dtoa_r+0x7de>
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	40240000 	.word	0x40240000
 8009b24:	40140000 	.word	0x40140000
 8009b28:	9b02      	ldr	r3, [sp, #8]
 8009b2a:	e780      	b.n	8009a2e <_dtoa_r+0x7de>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b30:	e782      	b.n	8009a38 <_dtoa_r+0x7e8>
 8009b32:	d099      	beq.n	8009a68 <_dtoa_r+0x818>
 8009b34:	9a08      	ldr	r2, [sp, #32]
 8009b36:	331c      	adds	r3, #28
 8009b38:	441a      	add	r2, r3
 8009b3a:	4498      	add	r8, r3
 8009b3c:	441e      	add	r6, r3
 8009b3e:	9208      	str	r2, [sp, #32]
 8009b40:	e792      	b.n	8009a68 <_dtoa_r+0x818>
 8009b42:	4603      	mov	r3, r0
 8009b44:	e7f6      	b.n	8009b34 <_dtoa_r+0x8e4>
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	9704      	str	r7, [sp, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dc20      	bgt.n	8009b90 <_dtoa_r+0x940>
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	dd1e      	ble.n	8009b94 <_dtoa_r+0x944>
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f47f aec0 	bne.w	80098de <_dtoa_r+0x68e>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	2205      	movs	r2, #5
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fde6 	bl	800a734 <__multadd>
 8009b68:	4601      	mov	r1, r0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4648      	mov	r0, r9
 8009b6e:	f001 f843 	bl	800abf8 <__mcmp>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	f77f aeb3 	ble.w	80098de <_dtoa_r+0x68e>
 8009b78:	4656      	mov	r6, sl
 8009b7a:	2331      	movs	r3, #49	@ 0x31
 8009b7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b80:	9b04      	ldr	r3, [sp, #16]
 8009b82:	3301      	adds	r3, #1
 8009b84:	9304      	str	r3, [sp, #16]
 8009b86:	e6ae      	b.n	80098e6 <_dtoa_r+0x696>
 8009b88:	9c07      	ldr	r4, [sp, #28]
 8009b8a:	9704      	str	r7, [sp, #16]
 8009b8c:	4625      	mov	r5, r4
 8009b8e:	e7f3      	b.n	8009b78 <_dtoa_r+0x928>
 8009b90:	9b07      	ldr	r3, [sp, #28]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8104 	beq.w	8009da4 <_dtoa_r+0xb54>
 8009b9c:	2e00      	cmp	r6, #0
 8009b9e:	dd05      	ble.n	8009bac <_dtoa_r+0x95c>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4632      	mov	r2, r6
 8009ba4:	4658      	mov	r0, fp
 8009ba6:	f000 ffbb 	bl	800ab20 <__lshift>
 8009baa:	4605      	mov	r5, r0
 8009bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d05a      	beq.n	8009c68 <_dtoa_r+0xa18>
 8009bb2:	6869      	ldr	r1, [r5, #4]
 8009bb4:	4658      	mov	r0, fp
 8009bb6:	f000 fd5b 	bl	800a670 <_Balloc>
 8009bba:	4606      	mov	r6, r0
 8009bbc:	b928      	cbnz	r0, 8009bca <_dtoa_r+0x97a>
 8009bbe:	4b84      	ldr	r3, [pc, #528]	@ (8009dd0 <_dtoa_r+0xb80>)
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009bc6:	f7ff bb5a 	b.w	800927e <_dtoa_r+0x2e>
 8009bca:	692a      	ldr	r2, [r5, #16]
 8009bcc:	3202      	adds	r2, #2
 8009bce:	0092      	lsls	r2, r2, #2
 8009bd0:	f105 010c 	add.w	r1, r5, #12
 8009bd4:	300c      	adds	r0, #12
 8009bd6:	f7ff fa76 	bl	80090c6 <memcpy>
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4658      	mov	r0, fp
 8009be0:	f000 ff9e 	bl	800ab20 <__lshift>
 8009be4:	f10a 0301 	add.w	r3, sl, #1
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	4453      	add	r3, sl
 8009bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf0:	9b02      	ldr	r3, [sp, #8]
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	462f      	mov	r7, r5
 8009bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	9b07      	ldr	r3, [sp, #28]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	3b01      	subs	r3, #1
 8009c02:	4648      	mov	r0, r9
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	f7ff fa9b 	bl	8009140 <quorem>
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	9002      	str	r0, [sp, #8]
 8009c0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c12:	4648      	mov	r0, r9
 8009c14:	f000 fff0 	bl	800abf8 <__mcmp>
 8009c18:	462a      	mov	r2, r5
 8009c1a:	9008      	str	r0, [sp, #32]
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4658      	mov	r0, fp
 8009c20:	f001 f806 	bl	800ac30 <__mdiff>
 8009c24:	68c2      	ldr	r2, [r0, #12]
 8009c26:	4606      	mov	r6, r0
 8009c28:	bb02      	cbnz	r2, 8009c6c <_dtoa_r+0xa1c>
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	4648      	mov	r0, r9
 8009c2e:	f000 ffe3 	bl	800abf8 <__mcmp>
 8009c32:	4602      	mov	r2, r0
 8009c34:	4631      	mov	r1, r6
 8009c36:	4658      	mov	r0, fp
 8009c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c3a:	f000 fd59 	bl	800a6f0 <_Bfree>
 8009c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c42:	9e07      	ldr	r6, [sp, #28]
 8009c44:	ea43 0102 	orr.w	r1, r3, r2
 8009c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c4a:	4319      	orrs	r1, r3
 8009c4c:	d110      	bne.n	8009c70 <_dtoa_r+0xa20>
 8009c4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c52:	d029      	beq.n	8009ca8 <_dtoa_r+0xa58>
 8009c54:	9b08      	ldr	r3, [sp, #32]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	dd02      	ble.n	8009c60 <_dtoa_r+0xa10>
 8009c5a:	9b02      	ldr	r3, [sp, #8]
 8009c5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	f883 8000 	strb.w	r8, [r3]
 8009c66:	e63f      	b.n	80098e8 <_dtoa_r+0x698>
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e7bb      	b.n	8009be4 <_dtoa_r+0x994>
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	e7e1      	b.n	8009c34 <_dtoa_r+0x9e4>
 8009c70:	9b08      	ldr	r3, [sp, #32]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	db04      	blt.n	8009c80 <_dtoa_r+0xa30>
 8009c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	d120      	bne.n	8009cc2 <_dtoa_r+0xa72>
 8009c80:	2a00      	cmp	r2, #0
 8009c82:	dded      	ble.n	8009c60 <_dtoa_r+0xa10>
 8009c84:	4649      	mov	r1, r9
 8009c86:	2201      	movs	r2, #1
 8009c88:	4658      	mov	r0, fp
 8009c8a:	f000 ff49 	bl	800ab20 <__lshift>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4681      	mov	r9, r0
 8009c92:	f000 ffb1 	bl	800abf8 <__mcmp>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	dc03      	bgt.n	8009ca2 <_dtoa_r+0xa52>
 8009c9a:	d1e1      	bne.n	8009c60 <_dtoa_r+0xa10>
 8009c9c:	f018 0f01 	tst.w	r8, #1
 8009ca0:	d0de      	beq.n	8009c60 <_dtoa_r+0xa10>
 8009ca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ca6:	d1d8      	bne.n	8009c5a <_dtoa_r+0xa0a>
 8009ca8:	9a00      	ldr	r2, [sp, #0]
 8009caa:	2339      	movs	r3, #57	@ 0x39
 8009cac:	7013      	strb	r3, [r2, #0]
 8009cae:	4633      	mov	r3, r6
 8009cb0:	461e      	mov	r6, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009cb8:	2a39      	cmp	r2, #57	@ 0x39
 8009cba:	d052      	beq.n	8009d62 <_dtoa_r+0xb12>
 8009cbc:	3201      	adds	r2, #1
 8009cbe:	701a      	strb	r2, [r3, #0]
 8009cc0:	e612      	b.n	80098e8 <_dtoa_r+0x698>
 8009cc2:	2a00      	cmp	r2, #0
 8009cc4:	dd07      	ble.n	8009cd6 <_dtoa_r+0xa86>
 8009cc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009cca:	d0ed      	beq.n	8009ca8 <_dtoa_r+0xa58>
 8009ccc:	9a00      	ldr	r2, [sp, #0]
 8009cce:	f108 0301 	add.w	r3, r8, #1
 8009cd2:	7013      	strb	r3, [r2, #0]
 8009cd4:	e608      	b.n	80098e8 <_dtoa_r+0x698>
 8009cd6:	9b07      	ldr	r3, [sp, #28]
 8009cd8:	9a07      	ldr	r2, [sp, #28]
 8009cda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d028      	beq.n	8009d36 <_dtoa_r+0xae6>
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	220a      	movs	r2, #10
 8009cea:	4658      	mov	r0, fp
 8009cec:	f000 fd22 	bl	800a734 <__multadd>
 8009cf0:	42af      	cmp	r7, r5
 8009cf2:	4681      	mov	r9, r0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	f04f 020a 	mov.w	r2, #10
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4658      	mov	r0, fp
 8009d00:	d107      	bne.n	8009d12 <_dtoa_r+0xac2>
 8009d02:	f000 fd17 	bl	800a734 <__multadd>
 8009d06:	4607      	mov	r7, r0
 8009d08:	4605      	mov	r5, r0
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	e774      	b.n	8009bfc <_dtoa_r+0x9ac>
 8009d12:	f000 fd0f 	bl	800a734 <__multadd>
 8009d16:	4629      	mov	r1, r5
 8009d18:	4607      	mov	r7, r0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	220a      	movs	r2, #10
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f000 fd08 	bl	800a734 <__multadd>
 8009d24:	4605      	mov	r5, r0
 8009d26:	e7f0      	b.n	8009d0a <_dtoa_r+0xaba>
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bfcc      	ite	gt
 8009d2e:	461e      	movgt	r6, r3
 8009d30:	2601      	movle	r6, #1
 8009d32:	4456      	add	r6, sl
 8009d34:	2700      	movs	r7, #0
 8009d36:	4649      	mov	r1, r9
 8009d38:	2201      	movs	r2, #1
 8009d3a:	4658      	mov	r0, fp
 8009d3c:	f000 fef0 	bl	800ab20 <__lshift>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4681      	mov	r9, r0
 8009d44:	f000 ff58 	bl	800abf8 <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	dcb0      	bgt.n	8009cae <_dtoa_r+0xa5e>
 8009d4c:	d102      	bne.n	8009d54 <_dtoa_r+0xb04>
 8009d4e:	f018 0f01 	tst.w	r8, #1
 8009d52:	d1ac      	bne.n	8009cae <_dtoa_r+0xa5e>
 8009d54:	4633      	mov	r3, r6
 8009d56:	461e      	mov	r6, r3
 8009d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d5c:	2a30      	cmp	r2, #48	@ 0x30
 8009d5e:	d0fa      	beq.n	8009d56 <_dtoa_r+0xb06>
 8009d60:	e5c2      	b.n	80098e8 <_dtoa_r+0x698>
 8009d62:	459a      	cmp	sl, r3
 8009d64:	d1a4      	bne.n	8009cb0 <_dtoa_r+0xa60>
 8009d66:	9b04      	ldr	r3, [sp, #16]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	2331      	movs	r3, #49	@ 0x31
 8009d6e:	f88a 3000 	strb.w	r3, [sl]
 8009d72:	e5b9      	b.n	80098e8 <_dtoa_r+0x698>
 8009d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009dd4 <_dtoa_r+0xb84>
 8009d7a:	b11b      	cbz	r3, 8009d84 <_dtoa_r+0xb34>
 8009d7c:	f10a 0308 	add.w	r3, sl, #8
 8009d80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	4650      	mov	r0, sl
 8009d86:	b019      	add	sp, #100	@ 0x64
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	f77f ae37 	ble.w	8009a02 <_dtoa_r+0x7b2>
 8009d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d98:	2001      	movs	r0, #1
 8009d9a:	e655      	b.n	8009a48 <_dtoa_r+0x7f8>
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f77f aed6 	ble.w	8009b50 <_dtoa_r+0x900>
 8009da4:	4656      	mov	r6, sl
 8009da6:	4621      	mov	r1, r4
 8009da8:	4648      	mov	r0, r9
 8009daa:	f7ff f9c9 	bl	8009140 <quorem>
 8009dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009db2:	f806 8b01 	strb.w	r8, [r6], #1
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	eba6 020a 	sub.w	r2, r6, sl
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	ddb3      	ble.n	8009d28 <_dtoa_r+0xad8>
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 fcb4 	bl	800a734 <__multadd>
 8009dcc:	4681      	mov	r9, r0
 8009dce:	e7ea      	b.n	8009da6 <_dtoa_r+0xb56>
 8009dd0:	0800bdab 	.word	0x0800bdab
 8009dd4:	0800bd46 	.word	0x0800bd46

08009dd8 <_free_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4605      	mov	r5, r0
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d041      	beq.n	8009e64 <_free_r+0x8c>
 8009de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de4:	1f0c      	subs	r4, r1, #4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bfb8      	it	lt
 8009dea:	18e4      	addlt	r4, r4, r3
 8009dec:	f000 fc34 	bl	800a658 <__malloc_lock>
 8009df0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e68 <_free_r+0x90>)
 8009df2:	6813      	ldr	r3, [r2, #0]
 8009df4:	b933      	cbnz	r3, 8009e04 <_free_r+0x2c>
 8009df6:	6063      	str	r3, [r4, #4]
 8009df8:	6014      	str	r4, [r2, #0]
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e00:	f000 bc30 	b.w	800a664 <__malloc_unlock>
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	d908      	bls.n	8009e1a <_free_r+0x42>
 8009e08:	6820      	ldr	r0, [r4, #0]
 8009e0a:	1821      	adds	r1, r4, r0
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf01      	itttt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	1809      	addeq	r1, r1, r0
 8009e16:	6021      	streq	r1, [r4, #0]
 8009e18:	e7ed      	b.n	8009df6 <_free_r+0x1e>
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	b10b      	cbz	r3, 8009e24 <_free_r+0x4c>
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	d9fa      	bls.n	8009e1a <_free_r+0x42>
 8009e24:	6811      	ldr	r1, [r2, #0]
 8009e26:	1850      	adds	r0, r2, r1
 8009e28:	42a0      	cmp	r0, r4
 8009e2a:	d10b      	bne.n	8009e44 <_free_r+0x6c>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	4401      	add	r1, r0
 8009e30:	1850      	adds	r0, r2, r1
 8009e32:	4283      	cmp	r3, r0
 8009e34:	6011      	str	r1, [r2, #0]
 8009e36:	d1e0      	bne.n	8009dfa <_free_r+0x22>
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	6053      	str	r3, [r2, #4]
 8009e3e:	4408      	add	r0, r1
 8009e40:	6010      	str	r0, [r2, #0]
 8009e42:	e7da      	b.n	8009dfa <_free_r+0x22>
 8009e44:	d902      	bls.n	8009e4c <_free_r+0x74>
 8009e46:	230c      	movs	r3, #12
 8009e48:	602b      	str	r3, [r5, #0]
 8009e4a:	e7d6      	b.n	8009dfa <_free_r+0x22>
 8009e4c:	6820      	ldr	r0, [r4, #0]
 8009e4e:	1821      	adds	r1, r4, r0
 8009e50:	428b      	cmp	r3, r1
 8009e52:	bf04      	itt	eq
 8009e54:	6819      	ldreq	r1, [r3, #0]
 8009e56:	685b      	ldreq	r3, [r3, #4]
 8009e58:	6063      	str	r3, [r4, #4]
 8009e5a:	bf04      	itt	eq
 8009e5c:	1809      	addeq	r1, r1, r0
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	6054      	str	r4, [r2, #4]
 8009e62:	e7ca      	b.n	8009dfa <_free_r+0x22>
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	bf00      	nop
 8009e68:	200007c4 	.word	0x200007c4

08009e6c <rshift>:
 8009e6c:	6903      	ldr	r3, [r0, #16]
 8009e6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e7a:	f100 0414 	add.w	r4, r0, #20
 8009e7e:	dd45      	ble.n	8009f0c <rshift+0xa0>
 8009e80:	f011 011f 	ands.w	r1, r1, #31
 8009e84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e8c:	d10c      	bne.n	8009ea8 <rshift+0x3c>
 8009e8e:	f100 0710 	add.w	r7, r0, #16
 8009e92:	4629      	mov	r1, r5
 8009e94:	42b1      	cmp	r1, r6
 8009e96:	d334      	bcc.n	8009f02 <rshift+0x96>
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	1eea      	subs	r2, r5, #3
 8009e9e:	4296      	cmp	r6, r2
 8009ea0:	bf38      	it	cc
 8009ea2:	2300      	movcc	r3, #0
 8009ea4:	4423      	add	r3, r4
 8009ea6:	e015      	b.n	8009ed4 <rshift+0x68>
 8009ea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009eac:	f1c1 0820 	rsb	r8, r1, #32
 8009eb0:	40cf      	lsrs	r7, r1
 8009eb2:	f105 0e04 	add.w	lr, r5, #4
 8009eb6:	46a1      	mov	r9, r4
 8009eb8:	4576      	cmp	r6, lr
 8009eba:	46f4      	mov	ip, lr
 8009ebc:	d815      	bhi.n	8009eea <rshift+0x7e>
 8009ebe:	1a9a      	subs	r2, r3, r2
 8009ec0:	0092      	lsls	r2, r2, #2
 8009ec2:	3a04      	subs	r2, #4
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	42ae      	cmp	r6, r5
 8009ec8:	bf38      	it	cc
 8009eca:	2200      	movcc	r2, #0
 8009ecc:	18a3      	adds	r3, r4, r2
 8009ece:	50a7      	str	r7, [r4, r2]
 8009ed0:	b107      	cbz	r7, 8009ed4 <rshift+0x68>
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	1b1a      	subs	r2, r3, r4
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009edc:	bf08      	it	eq
 8009ede:	2300      	moveq	r3, #0
 8009ee0:	6102      	str	r2, [r0, #16]
 8009ee2:	bf08      	it	eq
 8009ee4:	6143      	streq	r3, [r0, #20]
 8009ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eea:	f8dc c000 	ldr.w	ip, [ip]
 8009eee:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ef2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ef6:	f849 7b04 	str.w	r7, [r9], #4
 8009efa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009efe:	40cf      	lsrs	r7, r1
 8009f00:	e7da      	b.n	8009eb8 <rshift+0x4c>
 8009f02:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f06:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f0a:	e7c3      	b.n	8009e94 <rshift+0x28>
 8009f0c:	4623      	mov	r3, r4
 8009f0e:	e7e1      	b.n	8009ed4 <rshift+0x68>

08009f10 <__hexdig_fun>:
 8009f10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f14:	2b09      	cmp	r3, #9
 8009f16:	d802      	bhi.n	8009f1e <__hexdig_fun+0xe>
 8009f18:	3820      	subs	r0, #32
 8009f1a:	b2c0      	uxtb	r0, r0
 8009f1c:	4770      	bx	lr
 8009f1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d801      	bhi.n	8009f2a <__hexdig_fun+0x1a>
 8009f26:	3847      	subs	r0, #71	@ 0x47
 8009f28:	e7f7      	b.n	8009f1a <__hexdig_fun+0xa>
 8009f2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f2e:	2b05      	cmp	r3, #5
 8009f30:	d801      	bhi.n	8009f36 <__hexdig_fun+0x26>
 8009f32:	3827      	subs	r0, #39	@ 0x27
 8009f34:	e7f1      	b.n	8009f1a <__hexdig_fun+0xa>
 8009f36:	2000      	movs	r0, #0
 8009f38:	4770      	bx	lr
	...

08009f3c <__gethex>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	b085      	sub	sp, #20
 8009f42:	468a      	mov	sl, r1
 8009f44:	9302      	str	r3, [sp, #8]
 8009f46:	680b      	ldr	r3, [r1, #0]
 8009f48:	9001      	str	r0, [sp, #4]
 8009f4a:	4690      	mov	r8, r2
 8009f4c:	1c9c      	adds	r4, r3, #2
 8009f4e:	46a1      	mov	r9, r4
 8009f50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f54:	2830      	cmp	r0, #48	@ 0x30
 8009f56:	d0fa      	beq.n	8009f4e <__gethex+0x12>
 8009f58:	eba9 0303 	sub.w	r3, r9, r3
 8009f5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f60:	f7ff ffd6 	bl	8009f10 <__hexdig_fun>
 8009f64:	4605      	mov	r5, r0
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d168      	bne.n	800a03c <__gethex+0x100>
 8009f6a:	49a0      	ldr	r1, [pc, #640]	@ (800a1ec <__gethex+0x2b0>)
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	4648      	mov	r0, r9
 8009f70:	f7fe ffae 	bl	8008ed0 <strncmp>
 8009f74:	4607      	mov	r7, r0
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d167      	bne.n	800a04a <__gethex+0x10e>
 8009f7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f7e:	4626      	mov	r6, r4
 8009f80:	f7ff ffc6 	bl	8009f10 <__hexdig_fun>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d062      	beq.n	800a04e <__gethex+0x112>
 8009f88:	4623      	mov	r3, r4
 8009f8a:	7818      	ldrb	r0, [r3, #0]
 8009f8c:	2830      	cmp	r0, #48	@ 0x30
 8009f8e:	4699      	mov	r9, r3
 8009f90:	f103 0301 	add.w	r3, r3, #1
 8009f94:	d0f9      	beq.n	8009f8a <__gethex+0x4e>
 8009f96:	f7ff ffbb 	bl	8009f10 <__hexdig_fun>
 8009f9a:	fab0 f580 	clz	r5, r0
 8009f9e:	096d      	lsrs	r5, r5, #5
 8009fa0:	f04f 0b01 	mov.w	fp, #1
 8009fa4:	464a      	mov	r2, r9
 8009fa6:	4616      	mov	r6, r2
 8009fa8:	3201      	adds	r2, #1
 8009faa:	7830      	ldrb	r0, [r6, #0]
 8009fac:	f7ff ffb0 	bl	8009f10 <__hexdig_fun>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d1f8      	bne.n	8009fa6 <__gethex+0x6a>
 8009fb4:	498d      	ldr	r1, [pc, #564]	@ (800a1ec <__gethex+0x2b0>)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7fe ff89 	bl	8008ed0 <strncmp>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d13f      	bne.n	800a042 <__gethex+0x106>
 8009fc2:	b944      	cbnz	r4, 8009fd6 <__gethex+0x9a>
 8009fc4:	1c74      	adds	r4, r6, #1
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4616      	mov	r6, r2
 8009fca:	3201      	adds	r2, #1
 8009fcc:	7830      	ldrb	r0, [r6, #0]
 8009fce:	f7ff ff9f 	bl	8009f10 <__hexdig_fun>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d1f8      	bne.n	8009fc8 <__gethex+0x8c>
 8009fd6:	1ba4      	subs	r4, r4, r6
 8009fd8:	00a7      	lsls	r7, r4, #2
 8009fda:	7833      	ldrb	r3, [r6, #0]
 8009fdc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009fe0:	2b50      	cmp	r3, #80	@ 0x50
 8009fe2:	d13e      	bne.n	800a062 <__gethex+0x126>
 8009fe4:	7873      	ldrb	r3, [r6, #1]
 8009fe6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fe8:	d033      	beq.n	800a052 <__gethex+0x116>
 8009fea:	2b2d      	cmp	r3, #45	@ 0x2d
 8009fec:	d034      	beq.n	800a058 <__gethex+0x11c>
 8009fee:	1c71      	adds	r1, r6, #1
 8009ff0:	2400      	movs	r4, #0
 8009ff2:	7808      	ldrb	r0, [r1, #0]
 8009ff4:	f7ff ff8c 	bl	8009f10 <__hexdig_fun>
 8009ff8:	1e43      	subs	r3, r0, #1
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b18      	cmp	r3, #24
 8009ffe:	d830      	bhi.n	800a062 <__gethex+0x126>
 800a000:	f1a0 0210 	sub.w	r2, r0, #16
 800a004:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a008:	f7ff ff82 	bl	8009f10 <__hexdig_fun>
 800a00c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a010:	fa5f fc8c 	uxtb.w	ip, ip
 800a014:	f1bc 0f18 	cmp.w	ip, #24
 800a018:	f04f 030a 	mov.w	r3, #10
 800a01c:	d91e      	bls.n	800a05c <__gethex+0x120>
 800a01e:	b104      	cbz	r4, 800a022 <__gethex+0xe6>
 800a020:	4252      	negs	r2, r2
 800a022:	4417      	add	r7, r2
 800a024:	f8ca 1000 	str.w	r1, [sl]
 800a028:	b1ed      	cbz	r5, 800a066 <__gethex+0x12a>
 800a02a:	f1bb 0f00 	cmp.w	fp, #0
 800a02e:	bf0c      	ite	eq
 800a030:	2506      	moveq	r5, #6
 800a032:	2500      	movne	r5, #0
 800a034:	4628      	mov	r0, r5
 800a036:	b005      	add	sp, #20
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03c:	2500      	movs	r5, #0
 800a03e:	462c      	mov	r4, r5
 800a040:	e7b0      	b.n	8009fa4 <__gethex+0x68>
 800a042:	2c00      	cmp	r4, #0
 800a044:	d1c7      	bne.n	8009fd6 <__gethex+0x9a>
 800a046:	4627      	mov	r7, r4
 800a048:	e7c7      	b.n	8009fda <__gethex+0x9e>
 800a04a:	464e      	mov	r6, r9
 800a04c:	462f      	mov	r7, r5
 800a04e:	2501      	movs	r5, #1
 800a050:	e7c3      	b.n	8009fda <__gethex+0x9e>
 800a052:	2400      	movs	r4, #0
 800a054:	1cb1      	adds	r1, r6, #2
 800a056:	e7cc      	b.n	8009ff2 <__gethex+0xb6>
 800a058:	2401      	movs	r4, #1
 800a05a:	e7fb      	b.n	800a054 <__gethex+0x118>
 800a05c:	fb03 0002 	mla	r0, r3, r2, r0
 800a060:	e7ce      	b.n	800a000 <__gethex+0xc4>
 800a062:	4631      	mov	r1, r6
 800a064:	e7de      	b.n	800a024 <__gethex+0xe8>
 800a066:	eba6 0309 	sub.w	r3, r6, r9
 800a06a:	3b01      	subs	r3, #1
 800a06c:	4629      	mov	r1, r5
 800a06e:	2b07      	cmp	r3, #7
 800a070:	dc0a      	bgt.n	800a088 <__gethex+0x14c>
 800a072:	9801      	ldr	r0, [sp, #4]
 800a074:	f000 fafc 	bl	800a670 <_Balloc>
 800a078:	4604      	mov	r4, r0
 800a07a:	b940      	cbnz	r0, 800a08e <__gethex+0x152>
 800a07c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1f0 <__gethex+0x2b4>)
 800a07e:	4602      	mov	r2, r0
 800a080:	21e4      	movs	r1, #228	@ 0xe4
 800a082:	485c      	ldr	r0, [pc, #368]	@ (800a1f4 <__gethex+0x2b8>)
 800a084:	f7ff f83e 	bl	8009104 <__assert_func>
 800a088:	3101      	adds	r1, #1
 800a08a:	105b      	asrs	r3, r3, #1
 800a08c:	e7ef      	b.n	800a06e <__gethex+0x132>
 800a08e:	f100 0a14 	add.w	sl, r0, #20
 800a092:	2300      	movs	r3, #0
 800a094:	4655      	mov	r5, sl
 800a096:	469b      	mov	fp, r3
 800a098:	45b1      	cmp	r9, r6
 800a09a:	d337      	bcc.n	800a10c <__gethex+0x1d0>
 800a09c:	f845 bb04 	str.w	fp, [r5], #4
 800a0a0:	eba5 050a 	sub.w	r5, r5, sl
 800a0a4:	10ad      	asrs	r5, r5, #2
 800a0a6:	6125      	str	r5, [r4, #16]
 800a0a8:	4658      	mov	r0, fp
 800a0aa:	f000 fbd3 	bl	800a854 <__hi0bits>
 800a0ae:	016d      	lsls	r5, r5, #5
 800a0b0:	f8d8 6000 	ldr.w	r6, [r8]
 800a0b4:	1a2d      	subs	r5, r5, r0
 800a0b6:	42b5      	cmp	r5, r6
 800a0b8:	dd54      	ble.n	800a164 <__gethex+0x228>
 800a0ba:	1bad      	subs	r5, r5, r6
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 ff67 	bl	800af92 <__any_on>
 800a0c4:	4681      	mov	r9, r0
 800a0c6:	b178      	cbz	r0, 800a0e8 <__gethex+0x1ac>
 800a0c8:	1e6b      	subs	r3, r5, #1
 800a0ca:	1159      	asrs	r1, r3, #5
 800a0cc:	f003 021f 	and.w	r2, r3, #31
 800a0d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a0d4:	f04f 0901 	mov.w	r9, #1
 800a0d8:	fa09 f202 	lsl.w	r2, r9, r2
 800a0dc:	420a      	tst	r2, r1
 800a0de:	d003      	beq.n	800a0e8 <__gethex+0x1ac>
 800a0e0:	454b      	cmp	r3, r9
 800a0e2:	dc36      	bgt.n	800a152 <__gethex+0x216>
 800a0e4:	f04f 0902 	mov.w	r9, #2
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7ff febe 	bl	8009e6c <rshift>
 800a0f0:	442f      	add	r7, r5
 800a0f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0f6:	42bb      	cmp	r3, r7
 800a0f8:	da42      	bge.n	800a180 <__gethex+0x244>
 800a0fa:	9801      	ldr	r0, [sp, #4]
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f000 faf7 	bl	800a6f0 <_Bfree>
 800a102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a104:	2300      	movs	r3, #0
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	25a3      	movs	r5, #163	@ 0xa3
 800a10a:	e793      	b.n	800a034 <__gethex+0xf8>
 800a10c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a110:	2a2e      	cmp	r2, #46	@ 0x2e
 800a112:	d012      	beq.n	800a13a <__gethex+0x1fe>
 800a114:	2b20      	cmp	r3, #32
 800a116:	d104      	bne.n	800a122 <__gethex+0x1e6>
 800a118:	f845 bb04 	str.w	fp, [r5], #4
 800a11c:	f04f 0b00 	mov.w	fp, #0
 800a120:	465b      	mov	r3, fp
 800a122:	7830      	ldrb	r0, [r6, #0]
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	f7ff fef3 	bl	8009f10 <__hexdig_fun>
 800a12a:	9b03      	ldr	r3, [sp, #12]
 800a12c:	f000 000f 	and.w	r0, r0, #15
 800a130:	4098      	lsls	r0, r3
 800a132:	ea4b 0b00 	orr.w	fp, fp, r0
 800a136:	3304      	adds	r3, #4
 800a138:	e7ae      	b.n	800a098 <__gethex+0x15c>
 800a13a:	45b1      	cmp	r9, r6
 800a13c:	d8ea      	bhi.n	800a114 <__gethex+0x1d8>
 800a13e:	492b      	ldr	r1, [pc, #172]	@ (800a1ec <__gethex+0x2b0>)
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	2201      	movs	r2, #1
 800a144:	4630      	mov	r0, r6
 800a146:	f7fe fec3 	bl	8008ed0 <strncmp>
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d1e1      	bne.n	800a114 <__gethex+0x1d8>
 800a150:	e7a2      	b.n	800a098 <__gethex+0x15c>
 800a152:	1ea9      	subs	r1, r5, #2
 800a154:	4620      	mov	r0, r4
 800a156:	f000 ff1c 	bl	800af92 <__any_on>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d0c2      	beq.n	800a0e4 <__gethex+0x1a8>
 800a15e:	f04f 0903 	mov.w	r9, #3
 800a162:	e7c1      	b.n	800a0e8 <__gethex+0x1ac>
 800a164:	da09      	bge.n	800a17a <__gethex+0x23e>
 800a166:	1b75      	subs	r5, r6, r5
 800a168:	4621      	mov	r1, r4
 800a16a:	9801      	ldr	r0, [sp, #4]
 800a16c:	462a      	mov	r2, r5
 800a16e:	f000 fcd7 	bl	800ab20 <__lshift>
 800a172:	1b7f      	subs	r7, r7, r5
 800a174:	4604      	mov	r4, r0
 800a176:	f100 0a14 	add.w	sl, r0, #20
 800a17a:	f04f 0900 	mov.w	r9, #0
 800a17e:	e7b8      	b.n	800a0f2 <__gethex+0x1b6>
 800a180:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a184:	42bd      	cmp	r5, r7
 800a186:	dd6f      	ble.n	800a268 <__gethex+0x32c>
 800a188:	1bed      	subs	r5, r5, r7
 800a18a:	42ae      	cmp	r6, r5
 800a18c:	dc34      	bgt.n	800a1f8 <__gethex+0x2bc>
 800a18e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d022      	beq.n	800a1dc <__gethex+0x2a0>
 800a196:	2b03      	cmp	r3, #3
 800a198:	d024      	beq.n	800a1e4 <__gethex+0x2a8>
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d115      	bne.n	800a1ca <__gethex+0x28e>
 800a19e:	42ae      	cmp	r6, r5
 800a1a0:	d113      	bne.n	800a1ca <__gethex+0x28e>
 800a1a2:	2e01      	cmp	r6, #1
 800a1a4:	d10b      	bne.n	800a1be <__gethex+0x282>
 800a1a6:	9a02      	ldr	r2, [sp, #8]
 800a1a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	6123      	str	r3, [r4, #16]
 800a1b2:	f8ca 3000 	str.w	r3, [sl]
 800a1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1b8:	2562      	movs	r5, #98	@ 0x62
 800a1ba:	601c      	str	r4, [r3, #0]
 800a1bc:	e73a      	b.n	800a034 <__gethex+0xf8>
 800a1be:	1e71      	subs	r1, r6, #1
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fee6 	bl	800af92 <__any_on>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d1ed      	bne.n	800a1a6 <__gethex+0x26a>
 800a1ca:	9801      	ldr	r0, [sp, #4]
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	f000 fa8f 	bl	800a6f0 <_Bfree>
 800a1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6013      	str	r3, [r2, #0]
 800a1d8:	2550      	movs	r5, #80	@ 0x50
 800a1da:	e72b      	b.n	800a034 <__gethex+0xf8>
 800a1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1f3      	bne.n	800a1ca <__gethex+0x28e>
 800a1e2:	e7e0      	b.n	800a1a6 <__gethex+0x26a>
 800a1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1dd      	bne.n	800a1a6 <__gethex+0x26a>
 800a1ea:	e7ee      	b.n	800a1ca <__gethex+0x28e>
 800a1ec:	0800bc00 	.word	0x0800bc00
 800a1f0:	0800bdab 	.word	0x0800bdab
 800a1f4:	0800bdbc 	.word	0x0800bdbc
 800a1f8:	1e6f      	subs	r7, r5, #1
 800a1fa:	f1b9 0f00 	cmp.w	r9, #0
 800a1fe:	d130      	bne.n	800a262 <__gethex+0x326>
 800a200:	b127      	cbz	r7, 800a20c <__gethex+0x2d0>
 800a202:	4639      	mov	r1, r7
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fec4 	bl	800af92 <__any_on>
 800a20a:	4681      	mov	r9, r0
 800a20c:	117a      	asrs	r2, r7, #5
 800a20e:	2301      	movs	r3, #1
 800a210:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a214:	f007 071f 	and.w	r7, r7, #31
 800a218:	40bb      	lsls	r3, r7
 800a21a:	4213      	tst	r3, r2
 800a21c:	4629      	mov	r1, r5
 800a21e:	4620      	mov	r0, r4
 800a220:	bf18      	it	ne
 800a222:	f049 0902 	orrne.w	r9, r9, #2
 800a226:	f7ff fe21 	bl	8009e6c <rshift>
 800a22a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a22e:	1b76      	subs	r6, r6, r5
 800a230:	2502      	movs	r5, #2
 800a232:	f1b9 0f00 	cmp.w	r9, #0
 800a236:	d047      	beq.n	800a2c8 <__gethex+0x38c>
 800a238:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d015      	beq.n	800a26c <__gethex+0x330>
 800a240:	2b03      	cmp	r3, #3
 800a242:	d017      	beq.n	800a274 <__gethex+0x338>
 800a244:	2b01      	cmp	r3, #1
 800a246:	d109      	bne.n	800a25c <__gethex+0x320>
 800a248:	f019 0f02 	tst.w	r9, #2
 800a24c:	d006      	beq.n	800a25c <__gethex+0x320>
 800a24e:	f8da 3000 	ldr.w	r3, [sl]
 800a252:	ea49 0903 	orr.w	r9, r9, r3
 800a256:	f019 0f01 	tst.w	r9, #1
 800a25a:	d10e      	bne.n	800a27a <__gethex+0x33e>
 800a25c:	f045 0510 	orr.w	r5, r5, #16
 800a260:	e032      	b.n	800a2c8 <__gethex+0x38c>
 800a262:	f04f 0901 	mov.w	r9, #1
 800a266:	e7d1      	b.n	800a20c <__gethex+0x2d0>
 800a268:	2501      	movs	r5, #1
 800a26a:	e7e2      	b.n	800a232 <__gethex+0x2f6>
 800a26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a26e:	f1c3 0301 	rsb	r3, r3, #1
 800a272:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0f0      	beq.n	800a25c <__gethex+0x320>
 800a27a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a27e:	f104 0314 	add.w	r3, r4, #20
 800a282:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a286:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a28a:	f04f 0c00 	mov.w	ip, #0
 800a28e:	4618      	mov	r0, r3
 800a290:	f853 2b04 	ldr.w	r2, [r3], #4
 800a294:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a298:	d01b      	beq.n	800a2d2 <__gethex+0x396>
 800a29a:	3201      	adds	r2, #1
 800a29c:	6002      	str	r2, [r0, #0]
 800a29e:	2d02      	cmp	r5, #2
 800a2a0:	f104 0314 	add.w	r3, r4, #20
 800a2a4:	d13c      	bne.n	800a320 <__gethex+0x3e4>
 800a2a6:	f8d8 2000 	ldr.w	r2, [r8]
 800a2aa:	3a01      	subs	r2, #1
 800a2ac:	42b2      	cmp	r2, r6
 800a2ae:	d109      	bne.n	800a2c4 <__gethex+0x388>
 800a2b0:	1171      	asrs	r1, r6, #5
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2b8:	f006 061f 	and.w	r6, r6, #31
 800a2bc:	fa02 f606 	lsl.w	r6, r2, r6
 800a2c0:	421e      	tst	r6, r3
 800a2c2:	d13a      	bne.n	800a33a <__gethex+0x3fe>
 800a2c4:	f045 0520 	orr.w	r5, r5, #32
 800a2c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2ca:	601c      	str	r4, [r3, #0]
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	601f      	str	r7, [r3, #0]
 800a2d0:	e6b0      	b.n	800a034 <__gethex+0xf8>
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a2d8:	d8d9      	bhi.n	800a28e <__gethex+0x352>
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	459b      	cmp	fp, r3
 800a2de:	db17      	blt.n	800a310 <__gethex+0x3d4>
 800a2e0:	6861      	ldr	r1, [r4, #4]
 800a2e2:	9801      	ldr	r0, [sp, #4]
 800a2e4:	3101      	adds	r1, #1
 800a2e6:	f000 f9c3 	bl	800a670 <_Balloc>
 800a2ea:	4681      	mov	r9, r0
 800a2ec:	b918      	cbnz	r0, 800a2f6 <__gethex+0x3ba>
 800a2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a358 <__gethex+0x41c>)
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	2184      	movs	r1, #132	@ 0x84
 800a2f4:	e6c5      	b.n	800a082 <__gethex+0x146>
 800a2f6:	6922      	ldr	r2, [r4, #16]
 800a2f8:	3202      	adds	r2, #2
 800a2fa:	f104 010c 	add.w	r1, r4, #12
 800a2fe:	0092      	lsls	r2, r2, #2
 800a300:	300c      	adds	r0, #12
 800a302:	f7fe fee0 	bl	80090c6 <memcpy>
 800a306:	4621      	mov	r1, r4
 800a308:	9801      	ldr	r0, [sp, #4]
 800a30a:	f000 f9f1 	bl	800a6f0 <_Bfree>
 800a30e:	464c      	mov	r4, r9
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a318:	6122      	str	r2, [r4, #16]
 800a31a:	2201      	movs	r2, #1
 800a31c:	615a      	str	r2, [r3, #20]
 800a31e:	e7be      	b.n	800a29e <__gethex+0x362>
 800a320:	6922      	ldr	r2, [r4, #16]
 800a322:	455a      	cmp	r2, fp
 800a324:	dd0b      	ble.n	800a33e <__gethex+0x402>
 800a326:	2101      	movs	r1, #1
 800a328:	4620      	mov	r0, r4
 800a32a:	f7ff fd9f 	bl	8009e6c <rshift>
 800a32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a332:	3701      	adds	r7, #1
 800a334:	42bb      	cmp	r3, r7
 800a336:	f6ff aee0 	blt.w	800a0fa <__gethex+0x1be>
 800a33a:	2501      	movs	r5, #1
 800a33c:	e7c2      	b.n	800a2c4 <__gethex+0x388>
 800a33e:	f016 061f 	ands.w	r6, r6, #31
 800a342:	d0fa      	beq.n	800a33a <__gethex+0x3fe>
 800a344:	4453      	add	r3, sl
 800a346:	f1c6 0620 	rsb	r6, r6, #32
 800a34a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a34e:	f000 fa81 	bl	800a854 <__hi0bits>
 800a352:	42b0      	cmp	r0, r6
 800a354:	dbe7      	blt.n	800a326 <__gethex+0x3ea>
 800a356:	e7f0      	b.n	800a33a <__gethex+0x3fe>
 800a358:	0800bdab 	.word	0x0800bdab

0800a35c <L_shift>:
 800a35c:	f1c2 0208 	rsb	r2, r2, #8
 800a360:	0092      	lsls	r2, r2, #2
 800a362:	b570      	push	{r4, r5, r6, lr}
 800a364:	f1c2 0620 	rsb	r6, r2, #32
 800a368:	6843      	ldr	r3, [r0, #4]
 800a36a:	6804      	ldr	r4, [r0, #0]
 800a36c:	fa03 f506 	lsl.w	r5, r3, r6
 800a370:	432c      	orrs	r4, r5
 800a372:	40d3      	lsrs	r3, r2
 800a374:	6004      	str	r4, [r0, #0]
 800a376:	f840 3f04 	str.w	r3, [r0, #4]!
 800a37a:	4288      	cmp	r0, r1
 800a37c:	d3f4      	bcc.n	800a368 <L_shift+0xc>
 800a37e:	bd70      	pop	{r4, r5, r6, pc}

0800a380 <__match>:
 800a380:	b530      	push	{r4, r5, lr}
 800a382:	6803      	ldr	r3, [r0, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38a:	b914      	cbnz	r4, 800a392 <__match+0x12>
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	2001      	movs	r0, #1
 800a390:	bd30      	pop	{r4, r5, pc}
 800a392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a396:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a39a:	2d19      	cmp	r5, #25
 800a39c:	bf98      	it	ls
 800a39e:	3220      	addls	r2, #32
 800a3a0:	42a2      	cmp	r2, r4
 800a3a2:	d0f0      	beq.n	800a386 <__match+0x6>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	e7f3      	b.n	800a390 <__match+0x10>

0800a3a8 <__hexnan>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	680b      	ldr	r3, [r1, #0]
 800a3ae:	6801      	ldr	r1, [r0, #0]
 800a3b0:	115e      	asrs	r6, r3, #5
 800a3b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3b6:	f013 031f 	ands.w	r3, r3, #31
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	bf18      	it	ne
 800a3be:	3604      	addne	r6, #4
 800a3c0:	2500      	movs	r5, #0
 800a3c2:	1f37      	subs	r7, r6, #4
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	4690      	mov	r8, r2
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3ce:	46b9      	mov	r9, r7
 800a3d0:	463c      	mov	r4, r7
 800a3d2:	9502      	str	r5, [sp, #8]
 800a3d4:	46ab      	mov	fp, r5
 800a3d6:	784a      	ldrb	r2, [r1, #1]
 800a3d8:	1c4b      	adds	r3, r1, #1
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	b342      	cbz	r2, 800a430 <__hexnan+0x88>
 800a3de:	4610      	mov	r0, r2
 800a3e0:	9105      	str	r1, [sp, #20]
 800a3e2:	9204      	str	r2, [sp, #16]
 800a3e4:	f7ff fd94 	bl	8009f10 <__hexdig_fun>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d151      	bne.n	800a490 <__hexnan+0xe8>
 800a3ec:	9a04      	ldr	r2, [sp, #16]
 800a3ee:	9905      	ldr	r1, [sp, #20]
 800a3f0:	2a20      	cmp	r2, #32
 800a3f2:	d818      	bhi.n	800a426 <__hexnan+0x7e>
 800a3f4:	9b02      	ldr	r3, [sp, #8]
 800a3f6:	459b      	cmp	fp, r3
 800a3f8:	dd13      	ble.n	800a422 <__hexnan+0x7a>
 800a3fa:	454c      	cmp	r4, r9
 800a3fc:	d206      	bcs.n	800a40c <__hexnan+0x64>
 800a3fe:	2d07      	cmp	r5, #7
 800a400:	dc04      	bgt.n	800a40c <__hexnan+0x64>
 800a402:	462a      	mov	r2, r5
 800a404:	4649      	mov	r1, r9
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff ffa8 	bl	800a35c <L_shift>
 800a40c:	4544      	cmp	r4, r8
 800a40e:	d952      	bls.n	800a4b6 <__hexnan+0x10e>
 800a410:	2300      	movs	r3, #0
 800a412:	f1a4 0904 	sub.w	r9, r4, #4
 800a416:	f844 3c04 	str.w	r3, [r4, #-4]
 800a41a:	f8cd b008 	str.w	fp, [sp, #8]
 800a41e:	464c      	mov	r4, r9
 800a420:	461d      	mov	r5, r3
 800a422:	9903      	ldr	r1, [sp, #12]
 800a424:	e7d7      	b.n	800a3d6 <__hexnan+0x2e>
 800a426:	2a29      	cmp	r2, #41	@ 0x29
 800a428:	d157      	bne.n	800a4da <__hexnan+0x132>
 800a42a:	3102      	adds	r1, #2
 800a42c:	f8ca 1000 	str.w	r1, [sl]
 800a430:	f1bb 0f00 	cmp.w	fp, #0
 800a434:	d051      	beq.n	800a4da <__hexnan+0x132>
 800a436:	454c      	cmp	r4, r9
 800a438:	d206      	bcs.n	800a448 <__hexnan+0xa0>
 800a43a:	2d07      	cmp	r5, #7
 800a43c:	dc04      	bgt.n	800a448 <__hexnan+0xa0>
 800a43e:	462a      	mov	r2, r5
 800a440:	4649      	mov	r1, r9
 800a442:	4620      	mov	r0, r4
 800a444:	f7ff ff8a 	bl	800a35c <L_shift>
 800a448:	4544      	cmp	r4, r8
 800a44a:	d936      	bls.n	800a4ba <__hexnan+0x112>
 800a44c:	f1a8 0204 	sub.w	r2, r8, #4
 800a450:	4623      	mov	r3, r4
 800a452:	f853 1b04 	ldr.w	r1, [r3], #4
 800a456:	f842 1f04 	str.w	r1, [r2, #4]!
 800a45a:	429f      	cmp	r7, r3
 800a45c:	d2f9      	bcs.n	800a452 <__hexnan+0xaa>
 800a45e:	1b3b      	subs	r3, r7, r4
 800a460:	f023 0303 	bic.w	r3, r3, #3
 800a464:	3304      	adds	r3, #4
 800a466:	3401      	adds	r4, #1
 800a468:	3e03      	subs	r6, #3
 800a46a:	42b4      	cmp	r4, r6
 800a46c:	bf88      	it	hi
 800a46e:	2304      	movhi	r3, #4
 800a470:	4443      	add	r3, r8
 800a472:	2200      	movs	r2, #0
 800a474:	f843 2b04 	str.w	r2, [r3], #4
 800a478:	429f      	cmp	r7, r3
 800a47a:	d2fb      	bcs.n	800a474 <__hexnan+0xcc>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	b91b      	cbnz	r3, 800a488 <__hexnan+0xe0>
 800a480:	4547      	cmp	r7, r8
 800a482:	d128      	bne.n	800a4d6 <__hexnan+0x12e>
 800a484:	2301      	movs	r3, #1
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	2005      	movs	r0, #5
 800a48a:	b007      	add	sp, #28
 800a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a490:	3501      	adds	r5, #1
 800a492:	2d08      	cmp	r5, #8
 800a494:	f10b 0b01 	add.w	fp, fp, #1
 800a498:	dd06      	ble.n	800a4a8 <__hexnan+0x100>
 800a49a:	4544      	cmp	r4, r8
 800a49c:	d9c1      	bls.n	800a422 <__hexnan+0x7a>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4a4:	2501      	movs	r5, #1
 800a4a6:	3c04      	subs	r4, #4
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	f000 000f 	and.w	r0, r0, #15
 800a4ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4b2:	6020      	str	r0, [r4, #0]
 800a4b4:	e7b5      	b.n	800a422 <__hexnan+0x7a>
 800a4b6:	2508      	movs	r5, #8
 800a4b8:	e7b3      	b.n	800a422 <__hexnan+0x7a>
 800a4ba:	9b01      	ldr	r3, [sp, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0dd      	beq.n	800a47c <__hexnan+0xd4>
 800a4c0:	f1c3 0320 	rsb	r3, r3, #32
 800a4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c8:	40da      	lsrs	r2, r3
 800a4ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a4d4:	e7d2      	b.n	800a47c <__hexnan+0xd4>
 800a4d6:	3f04      	subs	r7, #4
 800a4d8:	e7d0      	b.n	800a47c <__hexnan+0xd4>
 800a4da:	2004      	movs	r0, #4
 800a4dc:	e7d5      	b.n	800a48a <__hexnan+0xe2>
	...

0800a4e0 <malloc>:
 800a4e0:	4b02      	ldr	r3, [pc, #8]	@ (800a4ec <malloc+0xc>)
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	f000 b825 	b.w	800a534 <_malloc_r>
 800a4ea:	bf00      	nop
 800a4ec:	20000204 	.word	0x20000204

0800a4f0 <sbrk_aligned>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4e0f      	ldr	r6, [pc, #60]	@ (800a530 <sbrk_aligned+0x40>)
 800a4f4:	460c      	mov	r4, r1
 800a4f6:	6831      	ldr	r1, [r6, #0]
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	b911      	cbnz	r1, 800a502 <sbrk_aligned+0x12>
 800a4fc:	f001 f9e8 	bl	800b8d0 <_sbrk_r>
 800a500:	6030      	str	r0, [r6, #0]
 800a502:	4621      	mov	r1, r4
 800a504:	4628      	mov	r0, r5
 800a506:	f001 f9e3 	bl	800b8d0 <_sbrk_r>
 800a50a:	1c43      	adds	r3, r0, #1
 800a50c:	d103      	bne.n	800a516 <sbrk_aligned+0x26>
 800a50e:	f04f 34ff 	mov.w	r4, #4294967295
 800a512:	4620      	mov	r0, r4
 800a514:	bd70      	pop	{r4, r5, r6, pc}
 800a516:	1cc4      	adds	r4, r0, #3
 800a518:	f024 0403 	bic.w	r4, r4, #3
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d0f8      	beq.n	800a512 <sbrk_aligned+0x22>
 800a520:	1a21      	subs	r1, r4, r0
 800a522:	4628      	mov	r0, r5
 800a524:	f001 f9d4 	bl	800b8d0 <_sbrk_r>
 800a528:	3001      	adds	r0, #1
 800a52a:	d1f2      	bne.n	800a512 <sbrk_aligned+0x22>
 800a52c:	e7ef      	b.n	800a50e <sbrk_aligned+0x1e>
 800a52e:	bf00      	nop
 800a530:	200007c0 	.word	0x200007c0

0800a534 <_malloc_r>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	1ccd      	adds	r5, r1, #3
 800a53a:	f025 0503 	bic.w	r5, r5, #3
 800a53e:	3508      	adds	r5, #8
 800a540:	2d0c      	cmp	r5, #12
 800a542:	bf38      	it	cc
 800a544:	250c      	movcc	r5, #12
 800a546:	2d00      	cmp	r5, #0
 800a548:	4606      	mov	r6, r0
 800a54a:	db01      	blt.n	800a550 <_malloc_r+0x1c>
 800a54c:	42a9      	cmp	r1, r5
 800a54e:	d904      	bls.n	800a55a <_malloc_r+0x26>
 800a550:	230c      	movs	r3, #12
 800a552:	6033      	str	r3, [r6, #0]
 800a554:	2000      	movs	r0, #0
 800a556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a55a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a630 <_malloc_r+0xfc>
 800a55e:	f000 f87b 	bl	800a658 <__malloc_lock>
 800a562:	f8d8 3000 	ldr.w	r3, [r8]
 800a566:	461c      	mov	r4, r3
 800a568:	bb44      	cbnz	r4, 800a5bc <_malloc_r+0x88>
 800a56a:	4629      	mov	r1, r5
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7ff ffbf 	bl	800a4f0 <sbrk_aligned>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	4604      	mov	r4, r0
 800a576:	d158      	bne.n	800a62a <_malloc_r+0xf6>
 800a578:	f8d8 4000 	ldr.w	r4, [r8]
 800a57c:	4627      	mov	r7, r4
 800a57e:	2f00      	cmp	r7, #0
 800a580:	d143      	bne.n	800a60a <_malloc_r+0xd6>
 800a582:	2c00      	cmp	r4, #0
 800a584:	d04b      	beq.n	800a61e <_malloc_r+0xea>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	4639      	mov	r1, r7
 800a58a:	4630      	mov	r0, r6
 800a58c:	eb04 0903 	add.w	r9, r4, r3
 800a590:	f001 f99e 	bl	800b8d0 <_sbrk_r>
 800a594:	4581      	cmp	r9, r0
 800a596:	d142      	bne.n	800a61e <_malloc_r+0xea>
 800a598:	6821      	ldr	r1, [r4, #0]
 800a59a:	1a6d      	subs	r5, r5, r1
 800a59c:	4629      	mov	r1, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ffa6 	bl	800a4f0 <sbrk_aligned>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d03a      	beq.n	800a61e <_malloc_r+0xea>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	442b      	add	r3, r5
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	bb62      	cbnz	r2, 800a610 <_malloc_r+0xdc>
 800a5b6:	f8c8 7000 	str.w	r7, [r8]
 800a5ba:	e00f      	b.n	800a5dc <_malloc_r+0xa8>
 800a5bc:	6822      	ldr	r2, [r4, #0]
 800a5be:	1b52      	subs	r2, r2, r5
 800a5c0:	d420      	bmi.n	800a604 <_malloc_r+0xd0>
 800a5c2:	2a0b      	cmp	r2, #11
 800a5c4:	d917      	bls.n	800a5f6 <_malloc_r+0xc2>
 800a5c6:	1961      	adds	r1, r4, r5
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	6025      	str	r5, [r4, #0]
 800a5cc:	bf18      	it	ne
 800a5ce:	6059      	strne	r1, [r3, #4]
 800a5d0:	6863      	ldr	r3, [r4, #4]
 800a5d2:	bf08      	it	eq
 800a5d4:	f8c8 1000 	streq.w	r1, [r8]
 800a5d8:	5162      	str	r2, [r4, r5]
 800a5da:	604b      	str	r3, [r1, #4]
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f000 f841 	bl	800a664 <__malloc_unlock>
 800a5e2:	f104 000b 	add.w	r0, r4, #11
 800a5e6:	1d23      	adds	r3, r4, #4
 800a5e8:	f020 0007 	bic.w	r0, r0, #7
 800a5ec:	1ac2      	subs	r2, r0, r3
 800a5ee:	bf1c      	itt	ne
 800a5f0:	1a1b      	subne	r3, r3, r0
 800a5f2:	50a3      	strne	r3, [r4, r2]
 800a5f4:	e7af      	b.n	800a556 <_malloc_r+0x22>
 800a5f6:	6862      	ldr	r2, [r4, #4]
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	bf0c      	ite	eq
 800a5fc:	f8c8 2000 	streq.w	r2, [r8]
 800a600:	605a      	strne	r2, [r3, #4]
 800a602:	e7eb      	b.n	800a5dc <_malloc_r+0xa8>
 800a604:	4623      	mov	r3, r4
 800a606:	6864      	ldr	r4, [r4, #4]
 800a608:	e7ae      	b.n	800a568 <_malloc_r+0x34>
 800a60a:	463c      	mov	r4, r7
 800a60c:	687f      	ldr	r7, [r7, #4]
 800a60e:	e7b6      	b.n	800a57e <_malloc_r+0x4a>
 800a610:	461a      	mov	r2, r3
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	42a3      	cmp	r3, r4
 800a616:	d1fb      	bne.n	800a610 <_malloc_r+0xdc>
 800a618:	2300      	movs	r3, #0
 800a61a:	6053      	str	r3, [r2, #4]
 800a61c:	e7de      	b.n	800a5dc <_malloc_r+0xa8>
 800a61e:	230c      	movs	r3, #12
 800a620:	6033      	str	r3, [r6, #0]
 800a622:	4630      	mov	r0, r6
 800a624:	f000 f81e 	bl	800a664 <__malloc_unlock>
 800a628:	e794      	b.n	800a554 <_malloc_r+0x20>
 800a62a:	6005      	str	r5, [r0, #0]
 800a62c:	e7d6      	b.n	800a5dc <_malloc_r+0xa8>
 800a62e:	bf00      	nop
 800a630:	200007c4 	.word	0x200007c4

0800a634 <__ascii_mbtowc>:
 800a634:	b082      	sub	sp, #8
 800a636:	b901      	cbnz	r1, 800a63a <__ascii_mbtowc+0x6>
 800a638:	a901      	add	r1, sp, #4
 800a63a:	b142      	cbz	r2, 800a64e <__ascii_mbtowc+0x1a>
 800a63c:	b14b      	cbz	r3, 800a652 <__ascii_mbtowc+0x1e>
 800a63e:	7813      	ldrb	r3, [r2, #0]
 800a640:	600b      	str	r3, [r1, #0]
 800a642:	7812      	ldrb	r2, [r2, #0]
 800a644:	1e10      	subs	r0, r2, #0
 800a646:	bf18      	it	ne
 800a648:	2001      	movne	r0, #1
 800a64a:	b002      	add	sp, #8
 800a64c:	4770      	bx	lr
 800a64e:	4610      	mov	r0, r2
 800a650:	e7fb      	b.n	800a64a <__ascii_mbtowc+0x16>
 800a652:	f06f 0001 	mvn.w	r0, #1
 800a656:	e7f8      	b.n	800a64a <__ascii_mbtowc+0x16>

0800a658 <__malloc_lock>:
 800a658:	4801      	ldr	r0, [pc, #4]	@ (800a660 <__malloc_lock+0x8>)
 800a65a:	f7fe bd32 	b.w	80090c2 <__retarget_lock_acquire_recursive>
 800a65e:	bf00      	nop
 800a660:	200007bc 	.word	0x200007bc

0800a664 <__malloc_unlock>:
 800a664:	4801      	ldr	r0, [pc, #4]	@ (800a66c <__malloc_unlock+0x8>)
 800a666:	f7fe bd2d 	b.w	80090c4 <__retarget_lock_release_recursive>
 800a66a:	bf00      	nop
 800a66c:	200007bc 	.word	0x200007bc

0800a670 <_Balloc>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	69c6      	ldr	r6, [r0, #28]
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	b976      	cbnz	r6, 800a698 <_Balloc+0x28>
 800a67a:	2010      	movs	r0, #16
 800a67c:	f7ff ff30 	bl	800a4e0 <malloc>
 800a680:	4602      	mov	r2, r0
 800a682:	61e0      	str	r0, [r4, #28]
 800a684:	b920      	cbnz	r0, 800a690 <_Balloc+0x20>
 800a686:	4b18      	ldr	r3, [pc, #96]	@ (800a6e8 <_Balloc+0x78>)
 800a688:	4818      	ldr	r0, [pc, #96]	@ (800a6ec <_Balloc+0x7c>)
 800a68a:	216b      	movs	r1, #107	@ 0x6b
 800a68c:	f7fe fd3a 	bl	8009104 <__assert_func>
 800a690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a694:	6006      	str	r6, [r0, #0]
 800a696:	60c6      	str	r6, [r0, #12]
 800a698:	69e6      	ldr	r6, [r4, #28]
 800a69a:	68f3      	ldr	r3, [r6, #12]
 800a69c:	b183      	cbz	r3, 800a6c0 <_Balloc+0x50>
 800a69e:	69e3      	ldr	r3, [r4, #28]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6a6:	b9b8      	cbnz	r0, 800a6d8 <_Balloc+0x68>
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a6ae:	1d72      	adds	r2, r6, #5
 800a6b0:	0092      	lsls	r2, r2, #2
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f001 f923 	bl	800b8fe <_calloc_r>
 800a6b8:	b160      	cbz	r0, 800a6d4 <_Balloc+0x64>
 800a6ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6be:	e00e      	b.n	800a6de <_Balloc+0x6e>
 800a6c0:	2221      	movs	r2, #33	@ 0x21
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f001 f91a 	bl	800b8fe <_calloc_r>
 800a6ca:	69e3      	ldr	r3, [r4, #28]
 800a6cc:	60f0      	str	r0, [r6, #12]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1e4      	bne.n	800a69e <_Balloc+0x2e>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	6802      	ldr	r2, [r0, #0]
 800a6da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6e4:	e7f7      	b.n	800a6d6 <_Balloc+0x66>
 800a6e6:	bf00      	nop
 800a6e8:	0800bc91 	.word	0x0800bc91
 800a6ec:	0800be1c 	.word	0x0800be1c

0800a6f0 <_Bfree>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	69c6      	ldr	r6, [r0, #28]
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	b976      	cbnz	r6, 800a718 <_Bfree+0x28>
 800a6fa:	2010      	movs	r0, #16
 800a6fc:	f7ff fef0 	bl	800a4e0 <malloc>
 800a700:	4602      	mov	r2, r0
 800a702:	61e8      	str	r0, [r5, #28]
 800a704:	b920      	cbnz	r0, 800a710 <_Bfree+0x20>
 800a706:	4b09      	ldr	r3, [pc, #36]	@ (800a72c <_Bfree+0x3c>)
 800a708:	4809      	ldr	r0, [pc, #36]	@ (800a730 <_Bfree+0x40>)
 800a70a:	218f      	movs	r1, #143	@ 0x8f
 800a70c:	f7fe fcfa 	bl	8009104 <__assert_func>
 800a710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a714:	6006      	str	r6, [r0, #0]
 800a716:	60c6      	str	r6, [r0, #12]
 800a718:	b13c      	cbz	r4, 800a72a <_Bfree+0x3a>
 800a71a:	69eb      	ldr	r3, [r5, #28]
 800a71c:	6862      	ldr	r2, [r4, #4]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a724:	6021      	str	r1, [r4, #0]
 800a726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	0800bc91 	.word	0x0800bc91
 800a730:	0800be1c 	.word	0x0800be1c

0800a734 <__multadd>:
 800a734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	690d      	ldr	r5, [r1, #16]
 800a73a:	4607      	mov	r7, r0
 800a73c:	460c      	mov	r4, r1
 800a73e:	461e      	mov	r6, r3
 800a740:	f101 0c14 	add.w	ip, r1, #20
 800a744:	2000      	movs	r0, #0
 800a746:	f8dc 3000 	ldr.w	r3, [ip]
 800a74a:	b299      	uxth	r1, r3
 800a74c:	fb02 6101 	mla	r1, r2, r1, r6
 800a750:	0c1e      	lsrs	r6, r3, #16
 800a752:	0c0b      	lsrs	r3, r1, #16
 800a754:	fb02 3306 	mla	r3, r2, r6, r3
 800a758:	b289      	uxth	r1, r1
 800a75a:	3001      	adds	r0, #1
 800a75c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a760:	4285      	cmp	r5, r0
 800a762:	f84c 1b04 	str.w	r1, [ip], #4
 800a766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a76a:	dcec      	bgt.n	800a746 <__multadd+0x12>
 800a76c:	b30e      	cbz	r6, 800a7b2 <__multadd+0x7e>
 800a76e:	68a3      	ldr	r3, [r4, #8]
 800a770:	42ab      	cmp	r3, r5
 800a772:	dc19      	bgt.n	800a7a8 <__multadd+0x74>
 800a774:	6861      	ldr	r1, [r4, #4]
 800a776:	4638      	mov	r0, r7
 800a778:	3101      	adds	r1, #1
 800a77a:	f7ff ff79 	bl	800a670 <_Balloc>
 800a77e:	4680      	mov	r8, r0
 800a780:	b928      	cbnz	r0, 800a78e <__multadd+0x5a>
 800a782:	4602      	mov	r2, r0
 800a784:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b8 <__multadd+0x84>)
 800a786:	480d      	ldr	r0, [pc, #52]	@ (800a7bc <__multadd+0x88>)
 800a788:	21ba      	movs	r1, #186	@ 0xba
 800a78a:	f7fe fcbb 	bl	8009104 <__assert_func>
 800a78e:	6922      	ldr	r2, [r4, #16]
 800a790:	3202      	adds	r2, #2
 800a792:	f104 010c 	add.w	r1, r4, #12
 800a796:	0092      	lsls	r2, r2, #2
 800a798:	300c      	adds	r0, #12
 800a79a:	f7fe fc94 	bl	80090c6 <memcpy>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	f7ff ffa5 	bl	800a6f0 <_Bfree>
 800a7a6:	4644      	mov	r4, r8
 800a7a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7ac:	3501      	adds	r5, #1
 800a7ae:	615e      	str	r6, [r3, #20]
 800a7b0:	6125      	str	r5, [r4, #16]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b8:	0800bdab 	.word	0x0800bdab
 800a7bc:	0800be1c 	.word	0x0800be1c

0800a7c0 <__s2b>:
 800a7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	4615      	mov	r5, r2
 800a7c8:	461f      	mov	r7, r3
 800a7ca:	2209      	movs	r2, #9
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	db09      	blt.n	800a7f0 <__s2b+0x30>
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f7ff ff47 	bl	800a670 <_Balloc>
 800a7e2:	b940      	cbnz	r0, 800a7f6 <__s2b+0x36>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	4b19      	ldr	r3, [pc, #100]	@ (800a84c <__s2b+0x8c>)
 800a7e8:	4819      	ldr	r0, [pc, #100]	@ (800a850 <__s2b+0x90>)
 800a7ea:	21d3      	movs	r1, #211	@ 0xd3
 800a7ec:	f7fe fc8a 	bl	8009104 <__assert_func>
 800a7f0:	0052      	lsls	r2, r2, #1
 800a7f2:	3101      	adds	r1, #1
 800a7f4:	e7f0      	b.n	800a7d8 <__s2b+0x18>
 800a7f6:	9b08      	ldr	r3, [sp, #32]
 800a7f8:	6143      	str	r3, [r0, #20]
 800a7fa:	2d09      	cmp	r5, #9
 800a7fc:	f04f 0301 	mov.w	r3, #1
 800a800:	6103      	str	r3, [r0, #16]
 800a802:	dd16      	ble.n	800a832 <__s2b+0x72>
 800a804:	f104 0909 	add.w	r9, r4, #9
 800a808:	46c8      	mov	r8, r9
 800a80a:	442c      	add	r4, r5
 800a80c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a810:	4601      	mov	r1, r0
 800a812:	3b30      	subs	r3, #48	@ 0x30
 800a814:	220a      	movs	r2, #10
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ff8c 	bl	800a734 <__multadd>
 800a81c:	45a0      	cmp	r8, r4
 800a81e:	d1f5      	bne.n	800a80c <__s2b+0x4c>
 800a820:	f1a5 0408 	sub.w	r4, r5, #8
 800a824:	444c      	add	r4, r9
 800a826:	1b2d      	subs	r5, r5, r4
 800a828:	1963      	adds	r3, r4, r5
 800a82a:	42bb      	cmp	r3, r7
 800a82c:	db04      	blt.n	800a838 <__s2b+0x78>
 800a82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a832:	340a      	adds	r4, #10
 800a834:	2509      	movs	r5, #9
 800a836:	e7f6      	b.n	800a826 <__s2b+0x66>
 800a838:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a83c:	4601      	mov	r1, r0
 800a83e:	3b30      	subs	r3, #48	@ 0x30
 800a840:	220a      	movs	r2, #10
 800a842:	4630      	mov	r0, r6
 800a844:	f7ff ff76 	bl	800a734 <__multadd>
 800a848:	e7ee      	b.n	800a828 <__s2b+0x68>
 800a84a:	bf00      	nop
 800a84c:	0800bdab 	.word	0x0800bdab
 800a850:	0800be1c 	.word	0x0800be1c

0800a854 <__hi0bits>:
 800a854:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a858:	4603      	mov	r3, r0
 800a85a:	bf36      	itet	cc
 800a85c:	0403      	lslcc	r3, r0, #16
 800a85e:	2000      	movcs	r0, #0
 800a860:	2010      	movcc	r0, #16
 800a862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a866:	bf3c      	itt	cc
 800a868:	021b      	lslcc	r3, r3, #8
 800a86a:	3008      	addcc	r0, #8
 800a86c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a870:	bf3c      	itt	cc
 800a872:	011b      	lslcc	r3, r3, #4
 800a874:	3004      	addcc	r0, #4
 800a876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a87a:	bf3c      	itt	cc
 800a87c:	009b      	lslcc	r3, r3, #2
 800a87e:	3002      	addcc	r0, #2
 800a880:	2b00      	cmp	r3, #0
 800a882:	db05      	blt.n	800a890 <__hi0bits+0x3c>
 800a884:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a888:	f100 0001 	add.w	r0, r0, #1
 800a88c:	bf08      	it	eq
 800a88e:	2020      	moveq	r0, #32
 800a890:	4770      	bx	lr

0800a892 <__lo0bits>:
 800a892:	6803      	ldr	r3, [r0, #0]
 800a894:	4602      	mov	r2, r0
 800a896:	f013 0007 	ands.w	r0, r3, #7
 800a89a:	d00b      	beq.n	800a8b4 <__lo0bits+0x22>
 800a89c:	07d9      	lsls	r1, r3, #31
 800a89e:	d421      	bmi.n	800a8e4 <__lo0bits+0x52>
 800a8a0:	0798      	lsls	r0, r3, #30
 800a8a2:	bf49      	itett	mi
 800a8a4:	085b      	lsrmi	r3, r3, #1
 800a8a6:	089b      	lsrpl	r3, r3, #2
 800a8a8:	2001      	movmi	r0, #1
 800a8aa:	6013      	strmi	r3, [r2, #0]
 800a8ac:	bf5c      	itt	pl
 800a8ae:	6013      	strpl	r3, [r2, #0]
 800a8b0:	2002      	movpl	r0, #2
 800a8b2:	4770      	bx	lr
 800a8b4:	b299      	uxth	r1, r3
 800a8b6:	b909      	cbnz	r1, 800a8bc <__lo0bits+0x2a>
 800a8b8:	0c1b      	lsrs	r3, r3, #16
 800a8ba:	2010      	movs	r0, #16
 800a8bc:	b2d9      	uxtb	r1, r3
 800a8be:	b909      	cbnz	r1, 800a8c4 <__lo0bits+0x32>
 800a8c0:	3008      	adds	r0, #8
 800a8c2:	0a1b      	lsrs	r3, r3, #8
 800a8c4:	0719      	lsls	r1, r3, #28
 800a8c6:	bf04      	itt	eq
 800a8c8:	091b      	lsreq	r3, r3, #4
 800a8ca:	3004      	addeq	r0, #4
 800a8cc:	0799      	lsls	r1, r3, #30
 800a8ce:	bf04      	itt	eq
 800a8d0:	089b      	lsreq	r3, r3, #2
 800a8d2:	3002      	addeq	r0, #2
 800a8d4:	07d9      	lsls	r1, r3, #31
 800a8d6:	d403      	bmi.n	800a8e0 <__lo0bits+0x4e>
 800a8d8:	085b      	lsrs	r3, r3, #1
 800a8da:	f100 0001 	add.w	r0, r0, #1
 800a8de:	d003      	beq.n	800a8e8 <__lo0bits+0x56>
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4770      	bx	lr
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	4770      	bx	lr
 800a8e8:	2020      	movs	r0, #32
 800a8ea:	4770      	bx	lr

0800a8ec <__i2b>:
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	f7ff febd 	bl	800a670 <_Balloc>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	b928      	cbnz	r0, 800a906 <__i2b+0x1a>
 800a8fa:	4b05      	ldr	r3, [pc, #20]	@ (800a910 <__i2b+0x24>)
 800a8fc:	4805      	ldr	r0, [pc, #20]	@ (800a914 <__i2b+0x28>)
 800a8fe:	f240 1145 	movw	r1, #325	@ 0x145
 800a902:	f7fe fbff 	bl	8009104 <__assert_func>
 800a906:	2301      	movs	r3, #1
 800a908:	6144      	str	r4, [r0, #20]
 800a90a:	6103      	str	r3, [r0, #16]
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	bf00      	nop
 800a910:	0800bdab 	.word	0x0800bdab
 800a914:	0800be1c 	.word	0x0800be1c

0800a918 <__multiply>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	4614      	mov	r4, r2
 800a91e:	690a      	ldr	r2, [r1, #16]
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	429a      	cmp	r2, r3
 800a924:	bfa8      	it	ge
 800a926:	4623      	movge	r3, r4
 800a928:	460f      	mov	r7, r1
 800a92a:	bfa4      	itt	ge
 800a92c:	460c      	movge	r4, r1
 800a92e:	461f      	movge	r7, r3
 800a930:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a934:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a938:	68a3      	ldr	r3, [r4, #8]
 800a93a:	6861      	ldr	r1, [r4, #4]
 800a93c:	eb0a 0609 	add.w	r6, sl, r9
 800a940:	42b3      	cmp	r3, r6
 800a942:	b085      	sub	sp, #20
 800a944:	bfb8      	it	lt
 800a946:	3101      	addlt	r1, #1
 800a948:	f7ff fe92 	bl	800a670 <_Balloc>
 800a94c:	b930      	cbnz	r0, 800a95c <__multiply+0x44>
 800a94e:	4602      	mov	r2, r0
 800a950:	4b44      	ldr	r3, [pc, #272]	@ (800aa64 <__multiply+0x14c>)
 800a952:	4845      	ldr	r0, [pc, #276]	@ (800aa68 <__multiply+0x150>)
 800a954:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a958:	f7fe fbd4 	bl	8009104 <__assert_func>
 800a95c:	f100 0514 	add.w	r5, r0, #20
 800a960:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a964:	462b      	mov	r3, r5
 800a966:	2200      	movs	r2, #0
 800a968:	4543      	cmp	r3, r8
 800a96a:	d321      	bcc.n	800a9b0 <__multiply+0x98>
 800a96c:	f107 0114 	add.w	r1, r7, #20
 800a970:	f104 0214 	add.w	r2, r4, #20
 800a974:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a978:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a97c:	9302      	str	r3, [sp, #8]
 800a97e:	1b13      	subs	r3, r2, r4
 800a980:	3b15      	subs	r3, #21
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	3304      	adds	r3, #4
 800a988:	f104 0715 	add.w	r7, r4, #21
 800a98c:	42ba      	cmp	r2, r7
 800a98e:	bf38      	it	cc
 800a990:	2304      	movcc	r3, #4
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	9b02      	ldr	r3, [sp, #8]
 800a996:	9103      	str	r1, [sp, #12]
 800a998:	428b      	cmp	r3, r1
 800a99a:	d80c      	bhi.n	800a9b6 <__multiply+0x9e>
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	dd03      	ble.n	800a9a8 <__multiply+0x90>
 800a9a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d05b      	beq.n	800aa60 <__multiply+0x148>
 800a9a8:	6106      	str	r6, [r0, #16]
 800a9aa:	b005      	add	sp, #20
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b0:	f843 2b04 	str.w	r2, [r3], #4
 800a9b4:	e7d8      	b.n	800a968 <__multiply+0x50>
 800a9b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ba:	f1ba 0f00 	cmp.w	sl, #0
 800a9be:	d024      	beq.n	800aa0a <__multiply+0xf2>
 800a9c0:	f104 0e14 	add.w	lr, r4, #20
 800a9c4:	46a9      	mov	r9, r5
 800a9c6:	f04f 0c00 	mov.w	ip, #0
 800a9ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a9d2:	fa1f fb87 	uxth.w	fp, r7
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a9dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a9e0:	f8d9 7000 	ldr.w	r7, [r9]
 800a9e4:	4463      	add	r3, ip
 800a9e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800a9ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9f8:	4572      	cmp	r2, lr
 800a9fa:	f849 3b04 	str.w	r3, [r9], #4
 800a9fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa02:	d8e2      	bhi.n	800a9ca <__multiply+0xb2>
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	f845 c003 	str.w	ip, [r5, r3]
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa10:	3104      	adds	r1, #4
 800aa12:	f1b9 0f00 	cmp.w	r9, #0
 800aa16:	d021      	beq.n	800aa5c <__multiply+0x144>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	f104 0c14 	add.w	ip, r4, #20
 800aa1e:	46ae      	mov	lr, r5
 800aa20:	f04f 0a00 	mov.w	sl, #0
 800aa24:	f8bc b000 	ldrh.w	fp, [ip]
 800aa28:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa2c:	fb09 770b 	mla	r7, r9, fp, r7
 800aa30:	4457      	add	r7, sl
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa38:	f84e 3b04 	str.w	r3, [lr], #4
 800aa3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa44:	f8be 3000 	ldrh.w	r3, [lr]
 800aa48:	fb09 330a 	mla	r3, r9, sl, r3
 800aa4c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa50:	4562      	cmp	r2, ip
 800aa52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa56:	d8e5      	bhi.n	800aa24 <__multiply+0x10c>
 800aa58:	9f01      	ldr	r7, [sp, #4]
 800aa5a:	51eb      	str	r3, [r5, r7]
 800aa5c:	3504      	adds	r5, #4
 800aa5e:	e799      	b.n	800a994 <__multiply+0x7c>
 800aa60:	3e01      	subs	r6, #1
 800aa62:	e79b      	b.n	800a99c <__multiply+0x84>
 800aa64:	0800bdab 	.word	0x0800bdab
 800aa68:	0800be1c 	.word	0x0800be1c

0800aa6c <__pow5mult>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	4615      	mov	r5, r2
 800aa72:	f012 0203 	ands.w	r2, r2, #3
 800aa76:	4607      	mov	r7, r0
 800aa78:	460e      	mov	r6, r1
 800aa7a:	d007      	beq.n	800aa8c <__pow5mult+0x20>
 800aa7c:	4c25      	ldr	r4, [pc, #148]	@ (800ab14 <__pow5mult+0xa8>)
 800aa7e:	3a01      	subs	r2, #1
 800aa80:	2300      	movs	r3, #0
 800aa82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa86:	f7ff fe55 	bl	800a734 <__multadd>
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	10ad      	asrs	r5, r5, #2
 800aa8e:	d03d      	beq.n	800ab0c <__pow5mult+0xa0>
 800aa90:	69fc      	ldr	r4, [r7, #28]
 800aa92:	b97c      	cbnz	r4, 800aab4 <__pow5mult+0x48>
 800aa94:	2010      	movs	r0, #16
 800aa96:	f7ff fd23 	bl	800a4e0 <malloc>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	61f8      	str	r0, [r7, #28]
 800aa9e:	b928      	cbnz	r0, 800aaac <__pow5mult+0x40>
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab18 <__pow5mult+0xac>)
 800aaa2:	481e      	ldr	r0, [pc, #120]	@ (800ab1c <__pow5mult+0xb0>)
 800aaa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aaa8:	f7fe fb2c 	bl	8009104 <__assert_func>
 800aaac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aab0:	6004      	str	r4, [r0, #0]
 800aab2:	60c4      	str	r4, [r0, #12]
 800aab4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aabc:	b94c      	cbnz	r4, 800aad2 <__pow5mult+0x66>
 800aabe:	f240 2171 	movw	r1, #625	@ 0x271
 800aac2:	4638      	mov	r0, r7
 800aac4:	f7ff ff12 	bl	800a8ec <__i2b>
 800aac8:	2300      	movs	r3, #0
 800aaca:	f8c8 0008 	str.w	r0, [r8, #8]
 800aace:	4604      	mov	r4, r0
 800aad0:	6003      	str	r3, [r0, #0]
 800aad2:	f04f 0900 	mov.w	r9, #0
 800aad6:	07eb      	lsls	r3, r5, #31
 800aad8:	d50a      	bpl.n	800aaf0 <__pow5mult+0x84>
 800aada:	4631      	mov	r1, r6
 800aadc:	4622      	mov	r2, r4
 800aade:	4638      	mov	r0, r7
 800aae0:	f7ff ff1a 	bl	800a918 <__multiply>
 800aae4:	4631      	mov	r1, r6
 800aae6:	4680      	mov	r8, r0
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7ff fe01 	bl	800a6f0 <_Bfree>
 800aaee:	4646      	mov	r6, r8
 800aaf0:	106d      	asrs	r5, r5, #1
 800aaf2:	d00b      	beq.n	800ab0c <__pow5mult+0xa0>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	b938      	cbnz	r0, 800ab08 <__pow5mult+0x9c>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	4621      	mov	r1, r4
 800aafc:	4638      	mov	r0, r7
 800aafe:	f7ff ff0b 	bl	800a918 <__multiply>
 800ab02:	6020      	str	r0, [r4, #0]
 800ab04:	f8c0 9000 	str.w	r9, [r0]
 800ab08:	4604      	mov	r4, r0
 800ab0a:	e7e4      	b.n	800aad6 <__pow5mult+0x6a>
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab12:	bf00      	nop
 800ab14:	0800be78 	.word	0x0800be78
 800ab18:	0800bc91 	.word	0x0800bc91
 800ab1c:	0800be1c 	.word	0x0800be1c

0800ab20 <__lshift>:
 800ab20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	460c      	mov	r4, r1
 800ab26:	6849      	ldr	r1, [r1, #4]
 800ab28:	6923      	ldr	r3, [r4, #16]
 800ab2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	4607      	mov	r7, r0
 800ab32:	4691      	mov	r9, r2
 800ab34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab38:	f108 0601 	add.w	r6, r8, #1
 800ab3c:	42b3      	cmp	r3, r6
 800ab3e:	db0b      	blt.n	800ab58 <__lshift+0x38>
 800ab40:	4638      	mov	r0, r7
 800ab42:	f7ff fd95 	bl	800a670 <_Balloc>
 800ab46:	4605      	mov	r5, r0
 800ab48:	b948      	cbnz	r0, 800ab5e <__lshift+0x3e>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	4b28      	ldr	r3, [pc, #160]	@ (800abf0 <__lshift+0xd0>)
 800ab4e:	4829      	ldr	r0, [pc, #164]	@ (800abf4 <__lshift+0xd4>)
 800ab50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab54:	f7fe fad6 	bl	8009104 <__assert_func>
 800ab58:	3101      	adds	r1, #1
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	e7ee      	b.n	800ab3c <__lshift+0x1c>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f100 0114 	add.w	r1, r0, #20
 800ab64:	f100 0210 	add.w	r2, r0, #16
 800ab68:	4618      	mov	r0, r3
 800ab6a:	4553      	cmp	r3, sl
 800ab6c:	db33      	blt.n	800abd6 <__lshift+0xb6>
 800ab6e:	6920      	ldr	r0, [r4, #16]
 800ab70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab74:	f104 0314 	add.w	r3, r4, #20
 800ab78:	f019 091f 	ands.w	r9, r9, #31
 800ab7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab84:	d02b      	beq.n	800abde <__lshift+0xbe>
 800ab86:	f1c9 0e20 	rsb	lr, r9, #32
 800ab8a:	468a      	mov	sl, r1
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	6818      	ldr	r0, [r3, #0]
 800ab90:	fa00 f009 	lsl.w	r0, r0, r9
 800ab94:	4310      	orrs	r0, r2
 800ab96:	f84a 0b04 	str.w	r0, [sl], #4
 800ab9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9e:	459c      	cmp	ip, r3
 800aba0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aba4:	d8f3      	bhi.n	800ab8e <__lshift+0x6e>
 800aba6:	ebac 0304 	sub.w	r3, ip, r4
 800abaa:	3b15      	subs	r3, #21
 800abac:	f023 0303 	bic.w	r3, r3, #3
 800abb0:	3304      	adds	r3, #4
 800abb2:	f104 0015 	add.w	r0, r4, #21
 800abb6:	4584      	cmp	ip, r0
 800abb8:	bf38      	it	cc
 800abba:	2304      	movcc	r3, #4
 800abbc:	50ca      	str	r2, [r1, r3]
 800abbe:	b10a      	cbz	r2, 800abc4 <__lshift+0xa4>
 800abc0:	f108 0602 	add.w	r6, r8, #2
 800abc4:	3e01      	subs	r6, #1
 800abc6:	4638      	mov	r0, r7
 800abc8:	612e      	str	r6, [r5, #16]
 800abca:	4621      	mov	r1, r4
 800abcc:	f7ff fd90 	bl	800a6f0 <_Bfree>
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800abda:	3301      	adds	r3, #1
 800abdc:	e7c5      	b.n	800ab6a <__lshift+0x4a>
 800abde:	3904      	subs	r1, #4
 800abe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe4:	f841 2f04 	str.w	r2, [r1, #4]!
 800abe8:	459c      	cmp	ip, r3
 800abea:	d8f9      	bhi.n	800abe0 <__lshift+0xc0>
 800abec:	e7ea      	b.n	800abc4 <__lshift+0xa4>
 800abee:	bf00      	nop
 800abf0:	0800bdab 	.word	0x0800bdab
 800abf4:	0800be1c 	.word	0x0800be1c

0800abf8 <__mcmp>:
 800abf8:	690a      	ldr	r2, [r1, #16]
 800abfa:	4603      	mov	r3, r0
 800abfc:	6900      	ldr	r0, [r0, #16]
 800abfe:	1a80      	subs	r0, r0, r2
 800ac00:	b530      	push	{r4, r5, lr}
 800ac02:	d10e      	bne.n	800ac22 <__mcmp+0x2a>
 800ac04:	3314      	adds	r3, #20
 800ac06:	3114      	adds	r1, #20
 800ac08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac18:	4295      	cmp	r5, r2
 800ac1a:	d003      	beq.n	800ac24 <__mcmp+0x2c>
 800ac1c:	d205      	bcs.n	800ac2a <__mcmp+0x32>
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	bd30      	pop	{r4, r5, pc}
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	d3f3      	bcc.n	800ac10 <__mcmp+0x18>
 800ac28:	e7fb      	b.n	800ac22 <__mcmp+0x2a>
 800ac2a:	2001      	movs	r0, #1
 800ac2c:	e7f9      	b.n	800ac22 <__mcmp+0x2a>
	...

0800ac30 <__mdiff>:
 800ac30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	4689      	mov	r9, r1
 800ac36:	4606      	mov	r6, r0
 800ac38:	4611      	mov	r1, r2
 800ac3a:	4648      	mov	r0, r9
 800ac3c:	4614      	mov	r4, r2
 800ac3e:	f7ff ffdb 	bl	800abf8 <__mcmp>
 800ac42:	1e05      	subs	r5, r0, #0
 800ac44:	d112      	bne.n	800ac6c <__mdiff+0x3c>
 800ac46:	4629      	mov	r1, r5
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7ff fd11 	bl	800a670 <_Balloc>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	b928      	cbnz	r0, 800ac5e <__mdiff+0x2e>
 800ac52:	4b3f      	ldr	r3, [pc, #252]	@ (800ad50 <__mdiff+0x120>)
 800ac54:	f240 2137 	movw	r1, #567	@ 0x237
 800ac58:	483e      	ldr	r0, [pc, #248]	@ (800ad54 <__mdiff+0x124>)
 800ac5a:	f7fe fa53 	bl	8009104 <__assert_func>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac64:	4610      	mov	r0, r2
 800ac66:	b003      	add	sp, #12
 800ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6c:	bfbc      	itt	lt
 800ac6e:	464b      	movlt	r3, r9
 800ac70:	46a1      	movlt	r9, r4
 800ac72:	4630      	mov	r0, r6
 800ac74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac78:	bfba      	itte	lt
 800ac7a:	461c      	movlt	r4, r3
 800ac7c:	2501      	movlt	r5, #1
 800ac7e:	2500      	movge	r5, #0
 800ac80:	f7ff fcf6 	bl	800a670 <_Balloc>
 800ac84:	4602      	mov	r2, r0
 800ac86:	b918      	cbnz	r0, 800ac90 <__mdiff+0x60>
 800ac88:	4b31      	ldr	r3, [pc, #196]	@ (800ad50 <__mdiff+0x120>)
 800ac8a:	f240 2145 	movw	r1, #581	@ 0x245
 800ac8e:	e7e3      	b.n	800ac58 <__mdiff+0x28>
 800ac90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac94:	6926      	ldr	r6, [r4, #16]
 800ac96:	60c5      	str	r5, [r0, #12]
 800ac98:	f109 0310 	add.w	r3, r9, #16
 800ac9c:	f109 0514 	add.w	r5, r9, #20
 800aca0:	f104 0e14 	add.w	lr, r4, #20
 800aca4:	f100 0b14 	add.w	fp, r0, #20
 800aca8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800acac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	46d9      	mov	r9, fp
 800acb4:	f04f 0c00 	mov.w	ip, #0
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	fa1f f38a 	uxth.w	r3, sl
 800acc8:	4619      	mov	r1, r3
 800acca:	b283      	uxth	r3, r0
 800accc:	1acb      	subs	r3, r1, r3
 800acce:	0c00      	lsrs	r0, r0, #16
 800acd0:	4463      	add	r3, ip
 800acd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800acd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800acda:	b29b      	uxth	r3, r3
 800acdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ace0:	4576      	cmp	r6, lr
 800ace2:	f849 3b04 	str.w	r3, [r9], #4
 800ace6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acea:	d8e5      	bhi.n	800acb8 <__mdiff+0x88>
 800acec:	1b33      	subs	r3, r6, r4
 800acee:	3b15      	subs	r3, #21
 800acf0:	f023 0303 	bic.w	r3, r3, #3
 800acf4:	3415      	adds	r4, #21
 800acf6:	3304      	adds	r3, #4
 800acf8:	42a6      	cmp	r6, r4
 800acfa:	bf38      	it	cc
 800acfc:	2304      	movcc	r3, #4
 800acfe:	441d      	add	r5, r3
 800ad00:	445b      	add	r3, fp
 800ad02:	461e      	mov	r6, r3
 800ad04:	462c      	mov	r4, r5
 800ad06:	4544      	cmp	r4, r8
 800ad08:	d30e      	bcc.n	800ad28 <__mdiff+0xf8>
 800ad0a:	f108 0103 	add.w	r1, r8, #3
 800ad0e:	1b49      	subs	r1, r1, r5
 800ad10:	f021 0103 	bic.w	r1, r1, #3
 800ad14:	3d03      	subs	r5, #3
 800ad16:	45a8      	cmp	r8, r5
 800ad18:	bf38      	it	cc
 800ad1a:	2100      	movcc	r1, #0
 800ad1c:	440b      	add	r3, r1
 800ad1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad22:	b191      	cbz	r1, 800ad4a <__mdiff+0x11a>
 800ad24:	6117      	str	r7, [r2, #16]
 800ad26:	e79d      	b.n	800ac64 <__mdiff+0x34>
 800ad28:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad2c:	46e6      	mov	lr, ip
 800ad2e:	0c08      	lsrs	r0, r1, #16
 800ad30:	fa1c fc81 	uxtah	ip, ip, r1
 800ad34:	4471      	add	r1, lr
 800ad36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad3a:	b289      	uxth	r1, r1
 800ad3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad40:	f846 1b04 	str.w	r1, [r6], #4
 800ad44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad48:	e7dd      	b.n	800ad06 <__mdiff+0xd6>
 800ad4a:	3f01      	subs	r7, #1
 800ad4c:	e7e7      	b.n	800ad1e <__mdiff+0xee>
 800ad4e:	bf00      	nop
 800ad50:	0800bdab 	.word	0x0800bdab
 800ad54:	0800be1c 	.word	0x0800be1c

0800ad58 <__ulp>:
 800ad58:	b082      	sub	sp, #8
 800ad5a:	ed8d 0b00 	vstr	d0, [sp]
 800ad5e:	9a01      	ldr	r2, [sp, #4]
 800ad60:	4b0f      	ldr	r3, [pc, #60]	@ (800ada0 <__ulp+0x48>)
 800ad62:	4013      	ands	r3, r2
 800ad64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	dc08      	bgt.n	800ad7e <__ulp+0x26>
 800ad6c:	425b      	negs	r3, r3
 800ad6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ad72:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad76:	da04      	bge.n	800ad82 <__ulp+0x2a>
 800ad78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ad7c:	4113      	asrs	r3, r2
 800ad7e:	2200      	movs	r2, #0
 800ad80:	e008      	b.n	800ad94 <__ulp+0x3c>
 800ad82:	f1a2 0314 	sub.w	r3, r2, #20
 800ad86:	2b1e      	cmp	r3, #30
 800ad88:	bfda      	itte	le
 800ad8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ad8e:	40da      	lsrle	r2, r3
 800ad90:	2201      	movgt	r2, #1
 800ad92:	2300      	movs	r3, #0
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	ec41 0b10 	vmov	d0, r0, r1
 800ad9c:	b002      	add	sp, #8
 800ad9e:	4770      	bx	lr
 800ada0:	7ff00000 	.word	0x7ff00000

0800ada4 <__b2d>:
 800ada4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada8:	6906      	ldr	r6, [r0, #16]
 800adaa:	f100 0814 	add.w	r8, r0, #20
 800adae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800adb2:	1f37      	subs	r7, r6, #4
 800adb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800adb8:	4610      	mov	r0, r2
 800adba:	f7ff fd4b 	bl	800a854 <__hi0bits>
 800adbe:	f1c0 0320 	rsb	r3, r0, #32
 800adc2:	280a      	cmp	r0, #10
 800adc4:	600b      	str	r3, [r1, #0]
 800adc6:	491b      	ldr	r1, [pc, #108]	@ (800ae34 <__b2d+0x90>)
 800adc8:	dc15      	bgt.n	800adf6 <__b2d+0x52>
 800adca:	f1c0 0c0b 	rsb	ip, r0, #11
 800adce:	fa22 f30c 	lsr.w	r3, r2, ip
 800add2:	45b8      	cmp	r8, r7
 800add4:	ea43 0501 	orr.w	r5, r3, r1
 800add8:	bf34      	ite	cc
 800adda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800adde:	2300      	movcs	r3, #0
 800ade0:	3015      	adds	r0, #21
 800ade2:	fa02 f000 	lsl.w	r0, r2, r0
 800ade6:	fa23 f30c 	lsr.w	r3, r3, ip
 800adea:	4303      	orrs	r3, r0
 800adec:	461c      	mov	r4, r3
 800adee:	ec45 4b10 	vmov	d0, r4, r5
 800adf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf6:	45b8      	cmp	r8, r7
 800adf8:	bf3a      	itte	cc
 800adfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800adfe:	f1a6 0708 	subcc.w	r7, r6, #8
 800ae02:	2300      	movcs	r3, #0
 800ae04:	380b      	subs	r0, #11
 800ae06:	d012      	beq.n	800ae2e <__b2d+0x8a>
 800ae08:	f1c0 0120 	rsb	r1, r0, #32
 800ae0c:	fa23 f401 	lsr.w	r4, r3, r1
 800ae10:	4082      	lsls	r2, r0
 800ae12:	4322      	orrs	r2, r4
 800ae14:	4547      	cmp	r7, r8
 800ae16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ae1a:	bf8c      	ite	hi
 800ae1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ae20:	2200      	movls	r2, #0
 800ae22:	4083      	lsls	r3, r0
 800ae24:	40ca      	lsrs	r2, r1
 800ae26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	e7de      	b.n	800adec <__b2d+0x48>
 800ae2e:	ea42 0501 	orr.w	r5, r2, r1
 800ae32:	e7db      	b.n	800adec <__b2d+0x48>
 800ae34:	3ff00000 	.word	0x3ff00000

0800ae38 <__d2b>:
 800ae38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	460f      	mov	r7, r1
 800ae3e:	2101      	movs	r1, #1
 800ae40:	ec59 8b10 	vmov	r8, r9, d0
 800ae44:	4616      	mov	r6, r2
 800ae46:	f7ff fc13 	bl	800a670 <_Balloc>
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	b930      	cbnz	r0, 800ae5c <__d2b+0x24>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	4b23      	ldr	r3, [pc, #140]	@ (800aee0 <__d2b+0xa8>)
 800ae52:	4824      	ldr	r0, [pc, #144]	@ (800aee4 <__d2b+0xac>)
 800ae54:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae58:	f7fe f954 	bl	8009104 <__assert_func>
 800ae5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae64:	b10d      	cbz	r5, 800ae6a <__d2b+0x32>
 800ae66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae6a:	9301      	str	r3, [sp, #4]
 800ae6c:	f1b8 0300 	subs.w	r3, r8, #0
 800ae70:	d023      	beq.n	800aeba <__d2b+0x82>
 800ae72:	4668      	mov	r0, sp
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	f7ff fd0c 	bl	800a892 <__lo0bits>
 800ae7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae7e:	b1d0      	cbz	r0, 800aeb6 <__d2b+0x7e>
 800ae80:	f1c0 0320 	rsb	r3, r0, #32
 800ae84:	fa02 f303 	lsl.w	r3, r2, r3
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	40c2      	lsrs	r2, r0
 800ae8c:	6163      	str	r3, [r4, #20]
 800ae8e:	9201      	str	r2, [sp, #4]
 800ae90:	9b01      	ldr	r3, [sp, #4]
 800ae92:	61a3      	str	r3, [r4, #24]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bf0c      	ite	eq
 800ae98:	2201      	moveq	r2, #1
 800ae9a:	2202      	movne	r2, #2
 800ae9c:	6122      	str	r2, [r4, #16]
 800ae9e:	b1a5      	cbz	r5, 800aeca <__d2b+0x92>
 800aea0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aea4:	4405      	add	r5, r0
 800aea6:	603d      	str	r5, [r7, #0]
 800aea8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aeac:	6030      	str	r0, [r6, #0]
 800aeae:	4620      	mov	r0, r4
 800aeb0:	b003      	add	sp, #12
 800aeb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeb6:	6161      	str	r1, [r4, #20]
 800aeb8:	e7ea      	b.n	800ae90 <__d2b+0x58>
 800aeba:	a801      	add	r0, sp, #4
 800aebc:	f7ff fce9 	bl	800a892 <__lo0bits>
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	6163      	str	r3, [r4, #20]
 800aec4:	3020      	adds	r0, #32
 800aec6:	2201      	movs	r2, #1
 800aec8:	e7e8      	b.n	800ae9c <__d2b+0x64>
 800aeca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aece:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aed2:	6038      	str	r0, [r7, #0]
 800aed4:	6918      	ldr	r0, [r3, #16]
 800aed6:	f7ff fcbd 	bl	800a854 <__hi0bits>
 800aeda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aede:	e7e5      	b.n	800aeac <__d2b+0x74>
 800aee0:	0800bdab 	.word	0x0800bdab
 800aee4:	0800be1c 	.word	0x0800be1c

0800aee8 <__ratio>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	b085      	sub	sp, #20
 800aeee:	e9cd 1000 	strd	r1, r0, [sp]
 800aef2:	a902      	add	r1, sp, #8
 800aef4:	f7ff ff56 	bl	800ada4 <__b2d>
 800aef8:	9800      	ldr	r0, [sp, #0]
 800aefa:	a903      	add	r1, sp, #12
 800aefc:	ec55 4b10 	vmov	r4, r5, d0
 800af00:	f7ff ff50 	bl	800ada4 <__b2d>
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	6919      	ldr	r1, [r3, #16]
 800af08:	9b00      	ldr	r3, [sp, #0]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	1ac9      	subs	r1, r1, r3
 800af0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800af12:	1a9b      	subs	r3, r3, r2
 800af14:	ec5b ab10 	vmov	sl, fp, d0
 800af18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bfce      	itee	gt
 800af20:	462a      	movgt	r2, r5
 800af22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af26:	465a      	movle	r2, fp
 800af28:	462f      	mov	r7, r5
 800af2a:	46d9      	mov	r9, fp
 800af2c:	bfcc      	ite	gt
 800af2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800af36:	464b      	mov	r3, r9
 800af38:	4652      	mov	r2, sl
 800af3a:	4620      	mov	r0, r4
 800af3c:	4639      	mov	r1, r7
 800af3e:	f7f5 fc85 	bl	800084c <__aeabi_ddiv>
 800af42:	ec41 0b10 	vmov	d0, r0, r1
 800af46:	b005      	add	sp, #20
 800af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af4c <__copybits>:
 800af4c:	3901      	subs	r1, #1
 800af4e:	b570      	push	{r4, r5, r6, lr}
 800af50:	1149      	asrs	r1, r1, #5
 800af52:	6914      	ldr	r4, [r2, #16]
 800af54:	3101      	adds	r1, #1
 800af56:	f102 0314 	add.w	r3, r2, #20
 800af5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af62:	1f05      	subs	r5, r0, #4
 800af64:	42a3      	cmp	r3, r4
 800af66:	d30c      	bcc.n	800af82 <__copybits+0x36>
 800af68:	1aa3      	subs	r3, r4, r2
 800af6a:	3b11      	subs	r3, #17
 800af6c:	f023 0303 	bic.w	r3, r3, #3
 800af70:	3211      	adds	r2, #17
 800af72:	42a2      	cmp	r2, r4
 800af74:	bf88      	it	hi
 800af76:	2300      	movhi	r3, #0
 800af78:	4418      	add	r0, r3
 800af7a:	2300      	movs	r3, #0
 800af7c:	4288      	cmp	r0, r1
 800af7e:	d305      	bcc.n	800af8c <__copybits+0x40>
 800af80:	bd70      	pop	{r4, r5, r6, pc}
 800af82:	f853 6b04 	ldr.w	r6, [r3], #4
 800af86:	f845 6f04 	str.w	r6, [r5, #4]!
 800af8a:	e7eb      	b.n	800af64 <__copybits+0x18>
 800af8c:	f840 3b04 	str.w	r3, [r0], #4
 800af90:	e7f4      	b.n	800af7c <__copybits+0x30>

0800af92 <__any_on>:
 800af92:	f100 0214 	add.w	r2, r0, #20
 800af96:	6900      	ldr	r0, [r0, #16]
 800af98:	114b      	asrs	r3, r1, #5
 800af9a:	4298      	cmp	r0, r3
 800af9c:	b510      	push	{r4, lr}
 800af9e:	db11      	blt.n	800afc4 <__any_on+0x32>
 800afa0:	dd0a      	ble.n	800afb8 <__any_on+0x26>
 800afa2:	f011 011f 	ands.w	r1, r1, #31
 800afa6:	d007      	beq.n	800afb8 <__any_on+0x26>
 800afa8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afac:	fa24 f001 	lsr.w	r0, r4, r1
 800afb0:	fa00 f101 	lsl.w	r1, r0, r1
 800afb4:	428c      	cmp	r4, r1
 800afb6:	d10b      	bne.n	800afd0 <__any_on+0x3e>
 800afb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d803      	bhi.n	800afc8 <__any_on+0x36>
 800afc0:	2000      	movs	r0, #0
 800afc2:	bd10      	pop	{r4, pc}
 800afc4:	4603      	mov	r3, r0
 800afc6:	e7f7      	b.n	800afb8 <__any_on+0x26>
 800afc8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afcc:	2900      	cmp	r1, #0
 800afce:	d0f5      	beq.n	800afbc <__any_on+0x2a>
 800afd0:	2001      	movs	r0, #1
 800afd2:	e7f6      	b.n	800afc2 <__any_on+0x30>

0800afd4 <_strtol_l.constprop.0>:
 800afd4:	2b24      	cmp	r3, #36	@ 0x24
 800afd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afda:	4686      	mov	lr, r0
 800afdc:	4690      	mov	r8, r2
 800afde:	d801      	bhi.n	800afe4 <_strtol_l.constprop.0+0x10>
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d106      	bne.n	800aff2 <_strtol_l.constprop.0+0x1e>
 800afe4:	f7fe f842 	bl	800906c <__errno>
 800afe8:	2316      	movs	r3, #22
 800afea:	6003      	str	r3, [r0, #0]
 800afec:	2000      	movs	r0, #0
 800afee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff2:	4834      	ldr	r0, [pc, #208]	@ (800b0c4 <_strtol_l.constprop.0+0xf0>)
 800aff4:	460d      	mov	r5, r1
 800aff6:	462a      	mov	r2, r5
 800aff8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800affc:	5d06      	ldrb	r6, [r0, r4]
 800affe:	f016 0608 	ands.w	r6, r6, #8
 800b002:	d1f8      	bne.n	800aff6 <_strtol_l.constprop.0+0x22>
 800b004:	2c2d      	cmp	r4, #45	@ 0x2d
 800b006:	d12d      	bne.n	800b064 <_strtol_l.constprop.0+0x90>
 800b008:	782c      	ldrb	r4, [r5, #0]
 800b00a:	2601      	movs	r6, #1
 800b00c:	1c95      	adds	r5, r2, #2
 800b00e:	f033 0210 	bics.w	r2, r3, #16
 800b012:	d109      	bne.n	800b028 <_strtol_l.constprop.0+0x54>
 800b014:	2c30      	cmp	r4, #48	@ 0x30
 800b016:	d12a      	bne.n	800b06e <_strtol_l.constprop.0+0x9a>
 800b018:	782a      	ldrb	r2, [r5, #0]
 800b01a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b01e:	2a58      	cmp	r2, #88	@ 0x58
 800b020:	d125      	bne.n	800b06e <_strtol_l.constprop.0+0x9a>
 800b022:	786c      	ldrb	r4, [r5, #1]
 800b024:	2310      	movs	r3, #16
 800b026:	3502      	adds	r5, #2
 800b028:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b02c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b030:	2200      	movs	r2, #0
 800b032:	fbbc f9f3 	udiv	r9, ip, r3
 800b036:	4610      	mov	r0, r2
 800b038:	fb03 ca19 	mls	sl, r3, r9, ip
 800b03c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b040:	2f09      	cmp	r7, #9
 800b042:	d81b      	bhi.n	800b07c <_strtol_l.constprop.0+0xa8>
 800b044:	463c      	mov	r4, r7
 800b046:	42a3      	cmp	r3, r4
 800b048:	dd27      	ble.n	800b09a <_strtol_l.constprop.0+0xc6>
 800b04a:	1c57      	adds	r7, r2, #1
 800b04c:	d007      	beq.n	800b05e <_strtol_l.constprop.0+0x8a>
 800b04e:	4581      	cmp	r9, r0
 800b050:	d320      	bcc.n	800b094 <_strtol_l.constprop.0+0xc0>
 800b052:	d101      	bne.n	800b058 <_strtol_l.constprop.0+0x84>
 800b054:	45a2      	cmp	sl, r4
 800b056:	db1d      	blt.n	800b094 <_strtol_l.constprop.0+0xc0>
 800b058:	fb00 4003 	mla	r0, r0, r3, r4
 800b05c:	2201      	movs	r2, #1
 800b05e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b062:	e7eb      	b.n	800b03c <_strtol_l.constprop.0+0x68>
 800b064:	2c2b      	cmp	r4, #43	@ 0x2b
 800b066:	bf04      	itt	eq
 800b068:	782c      	ldrbeq	r4, [r5, #0]
 800b06a:	1c95      	addeq	r5, r2, #2
 800b06c:	e7cf      	b.n	800b00e <_strtol_l.constprop.0+0x3a>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1da      	bne.n	800b028 <_strtol_l.constprop.0+0x54>
 800b072:	2c30      	cmp	r4, #48	@ 0x30
 800b074:	bf0c      	ite	eq
 800b076:	2308      	moveq	r3, #8
 800b078:	230a      	movne	r3, #10
 800b07a:	e7d5      	b.n	800b028 <_strtol_l.constprop.0+0x54>
 800b07c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b080:	2f19      	cmp	r7, #25
 800b082:	d801      	bhi.n	800b088 <_strtol_l.constprop.0+0xb4>
 800b084:	3c37      	subs	r4, #55	@ 0x37
 800b086:	e7de      	b.n	800b046 <_strtol_l.constprop.0+0x72>
 800b088:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b08c:	2f19      	cmp	r7, #25
 800b08e:	d804      	bhi.n	800b09a <_strtol_l.constprop.0+0xc6>
 800b090:	3c57      	subs	r4, #87	@ 0x57
 800b092:	e7d8      	b.n	800b046 <_strtol_l.constprop.0+0x72>
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	e7e1      	b.n	800b05e <_strtol_l.constprop.0+0x8a>
 800b09a:	1c53      	adds	r3, r2, #1
 800b09c:	d108      	bne.n	800b0b0 <_strtol_l.constprop.0+0xdc>
 800b09e:	2322      	movs	r3, #34	@ 0x22
 800b0a0:	f8ce 3000 	str.w	r3, [lr]
 800b0a4:	4660      	mov	r0, ip
 800b0a6:	f1b8 0f00 	cmp.w	r8, #0
 800b0aa:	d0a0      	beq.n	800afee <_strtol_l.constprop.0+0x1a>
 800b0ac:	1e69      	subs	r1, r5, #1
 800b0ae:	e006      	b.n	800b0be <_strtol_l.constprop.0+0xea>
 800b0b0:	b106      	cbz	r6, 800b0b4 <_strtol_l.constprop.0+0xe0>
 800b0b2:	4240      	negs	r0, r0
 800b0b4:	f1b8 0f00 	cmp.w	r8, #0
 800b0b8:	d099      	beq.n	800afee <_strtol_l.constprop.0+0x1a>
 800b0ba:	2a00      	cmp	r2, #0
 800b0bc:	d1f6      	bne.n	800b0ac <_strtol_l.constprop.0+0xd8>
 800b0be:	f8c8 1000 	str.w	r1, [r8]
 800b0c2:	e794      	b.n	800afee <_strtol_l.constprop.0+0x1a>
 800b0c4:	0800bf79 	.word	0x0800bf79

0800b0c8 <_strtol_r>:
 800b0c8:	f7ff bf84 	b.w	800afd4 <_strtol_l.constprop.0>

0800b0cc <__ascii_wctomb>:
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4608      	mov	r0, r1
 800b0d0:	b141      	cbz	r1, 800b0e4 <__ascii_wctomb+0x18>
 800b0d2:	2aff      	cmp	r2, #255	@ 0xff
 800b0d4:	d904      	bls.n	800b0e0 <__ascii_wctomb+0x14>
 800b0d6:	228a      	movs	r2, #138	@ 0x8a
 800b0d8:	601a      	str	r2, [r3, #0]
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295
 800b0de:	4770      	bx	lr
 800b0e0:	700a      	strb	r2, [r1, #0]
 800b0e2:	2001      	movs	r0, #1
 800b0e4:	4770      	bx	lr

0800b0e6 <__ssputs_r>:
 800b0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ea:	688e      	ldr	r6, [r1, #8]
 800b0ec:	461f      	mov	r7, r3
 800b0ee:	42be      	cmp	r6, r7
 800b0f0:	680b      	ldr	r3, [r1, #0]
 800b0f2:	4682      	mov	sl, r0
 800b0f4:	460c      	mov	r4, r1
 800b0f6:	4690      	mov	r8, r2
 800b0f8:	d82d      	bhi.n	800b156 <__ssputs_r+0x70>
 800b0fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b102:	d026      	beq.n	800b152 <__ssputs_r+0x6c>
 800b104:	6965      	ldr	r5, [r4, #20]
 800b106:	6909      	ldr	r1, [r1, #16]
 800b108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b10c:	eba3 0901 	sub.w	r9, r3, r1
 800b110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b114:	1c7b      	adds	r3, r7, #1
 800b116:	444b      	add	r3, r9
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	429d      	cmp	r5, r3
 800b11c:	bf38      	it	cc
 800b11e:	461d      	movcc	r5, r3
 800b120:	0553      	lsls	r3, r2, #21
 800b122:	d527      	bpl.n	800b174 <__ssputs_r+0x8e>
 800b124:	4629      	mov	r1, r5
 800b126:	f7ff fa05 	bl	800a534 <_malloc_r>
 800b12a:	4606      	mov	r6, r0
 800b12c:	b360      	cbz	r0, 800b188 <__ssputs_r+0xa2>
 800b12e:	6921      	ldr	r1, [r4, #16]
 800b130:	464a      	mov	r2, r9
 800b132:	f7fd ffc8 	bl	80090c6 <memcpy>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	6126      	str	r6, [r4, #16]
 800b144:	6165      	str	r5, [r4, #20]
 800b146:	444e      	add	r6, r9
 800b148:	eba5 0509 	sub.w	r5, r5, r9
 800b14c:	6026      	str	r6, [r4, #0]
 800b14e:	60a5      	str	r5, [r4, #8]
 800b150:	463e      	mov	r6, r7
 800b152:	42be      	cmp	r6, r7
 800b154:	d900      	bls.n	800b158 <__ssputs_r+0x72>
 800b156:	463e      	mov	r6, r7
 800b158:	6820      	ldr	r0, [r4, #0]
 800b15a:	4632      	mov	r2, r6
 800b15c:	4641      	mov	r1, r8
 800b15e:	f000 fb7b 	bl	800b858 <memmove>
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	1b9b      	subs	r3, r3, r6
 800b166:	60a3      	str	r3, [r4, #8]
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	4433      	add	r3, r6
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	2000      	movs	r0, #0
 800b170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b174:	462a      	mov	r2, r5
 800b176:	f000 fbd6 	bl	800b926 <_realloc_r>
 800b17a:	4606      	mov	r6, r0
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d1e0      	bne.n	800b142 <__ssputs_r+0x5c>
 800b180:	6921      	ldr	r1, [r4, #16]
 800b182:	4650      	mov	r0, sl
 800b184:	f7fe fe28 	bl	8009dd8 <_free_r>
 800b188:	230c      	movs	r3, #12
 800b18a:	f8ca 3000 	str.w	r3, [sl]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	f04f 30ff 	mov.w	r0, #4294967295
 800b19a:	e7e9      	b.n	800b170 <__ssputs_r+0x8a>

0800b19c <_svfiprintf_r>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	4698      	mov	r8, r3
 800b1a2:	898b      	ldrh	r3, [r1, #12]
 800b1a4:	061b      	lsls	r3, r3, #24
 800b1a6:	b09d      	sub	sp, #116	@ 0x74
 800b1a8:	4607      	mov	r7, r0
 800b1aa:	460d      	mov	r5, r1
 800b1ac:	4614      	mov	r4, r2
 800b1ae:	d510      	bpl.n	800b1d2 <_svfiprintf_r+0x36>
 800b1b0:	690b      	ldr	r3, [r1, #16]
 800b1b2:	b973      	cbnz	r3, 800b1d2 <_svfiprintf_r+0x36>
 800b1b4:	2140      	movs	r1, #64	@ 0x40
 800b1b6:	f7ff f9bd 	bl	800a534 <_malloc_r>
 800b1ba:	6028      	str	r0, [r5, #0]
 800b1bc:	6128      	str	r0, [r5, #16]
 800b1be:	b930      	cbnz	r0, 800b1ce <_svfiprintf_r+0x32>
 800b1c0:	230c      	movs	r3, #12
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c8:	b01d      	add	sp, #116	@ 0x74
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ce:	2340      	movs	r3, #64	@ 0x40
 800b1d0:	616b      	str	r3, [r5, #20]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d6:	2320      	movs	r3, #32
 800b1d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1e0:	2330      	movs	r3, #48	@ 0x30
 800b1e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b380 <_svfiprintf_r+0x1e4>
 800b1e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1ea:	f04f 0901 	mov.w	r9, #1
 800b1ee:	4623      	mov	r3, r4
 800b1f0:	469a      	mov	sl, r3
 800b1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1f6:	b10a      	cbz	r2, 800b1fc <_svfiprintf_r+0x60>
 800b1f8:	2a25      	cmp	r2, #37	@ 0x25
 800b1fa:	d1f9      	bne.n	800b1f0 <_svfiprintf_r+0x54>
 800b1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b200:	d00b      	beq.n	800b21a <_svfiprintf_r+0x7e>
 800b202:	465b      	mov	r3, fp
 800b204:	4622      	mov	r2, r4
 800b206:	4629      	mov	r1, r5
 800b208:	4638      	mov	r0, r7
 800b20a:	f7ff ff6c 	bl	800b0e6 <__ssputs_r>
 800b20e:	3001      	adds	r0, #1
 800b210:	f000 80a7 	beq.w	800b362 <_svfiprintf_r+0x1c6>
 800b214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b216:	445a      	add	r2, fp
 800b218:	9209      	str	r2, [sp, #36]	@ 0x24
 800b21a:	f89a 3000 	ldrb.w	r3, [sl]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 809f 	beq.w	800b362 <_svfiprintf_r+0x1c6>
 800b224:	2300      	movs	r3, #0
 800b226:	f04f 32ff 	mov.w	r2, #4294967295
 800b22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b22e:	f10a 0a01 	add.w	sl, sl, #1
 800b232:	9304      	str	r3, [sp, #16]
 800b234:	9307      	str	r3, [sp, #28]
 800b236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b23a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b23c:	4654      	mov	r4, sl
 800b23e:	2205      	movs	r2, #5
 800b240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b244:	484e      	ldr	r0, [pc, #312]	@ (800b380 <_svfiprintf_r+0x1e4>)
 800b246:	f7f4 ffc3 	bl	80001d0 <memchr>
 800b24a:	9a04      	ldr	r2, [sp, #16]
 800b24c:	b9d8      	cbnz	r0, 800b286 <_svfiprintf_r+0xea>
 800b24e:	06d0      	lsls	r0, r2, #27
 800b250:	bf44      	itt	mi
 800b252:	2320      	movmi	r3, #32
 800b254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b258:	0711      	lsls	r1, r2, #28
 800b25a:	bf44      	itt	mi
 800b25c:	232b      	movmi	r3, #43	@ 0x2b
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b262:	f89a 3000 	ldrb.w	r3, [sl]
 800b266:	2b2a      	cmp	r3, #42	@ 0x2a
 800b268:	d015      	beq.n	800b296 <_svfiprintf_r+0xfa>
 800b26a:	9a07      	ldr	r2, [sp, #28]
 800b26c:	4654      	mov	r4, sl
 800b26e:	2000      	movs	r0, #0
 800b270:	f04f 0c0a 	mov.w	ip, #10
 800b274:	4621      	mov	r1, r4
 800b276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b27a:	3b30      	subs	r3, #48	@ 0x30
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d94b      	bls.n	800b318 <_svfiprintf_r+0x17c>
 800b280:	b1b0      	cbz	r0, 800b2b0 <_svfiprintf_r+0x114>
 800b282:	9207      	str	r2, [sp, #28]
 800b284:	e014      	b.n	800b2b0 <_svfiprintf_r+0x114>
 800b286:	eba0 0308 	sub.w	r3, r0, r8
 800b28a:	fa09 f303 	lsl.w	r3, r9, r3
 800b28e:	4313      	orrs	r3, r2
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	46a2      	mov	sl, r4
 800b294:	e7d2      	b.n	800b23c <_svfiprintf_r+0xa0>
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	1d19      	adds	r1, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9103      	str	r1, [sp, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	bfbb      	ittet	lt
 800b2a2:	425b      	neglt	r3, r3
 800b2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a8:	9307      	strge	r3, [sp, #28]
 800b2aa:	9307      	strlt	r3, [sp, #28]
 800b2ac:	bfb8      	it	lt
 800b2ae:	9204      	strlt	r2, [sp, #16]
 800b2b0:	7823      	ldrb	r3, [r4, #0]
 800b2b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2b4:	d10a      	bne.n	800b2cc <_svfiprintf_r+0x130>
 800b2b6:	7863      	ldrb	r3, [r4, #1]
 800b2b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2ba:	d132      	bne.n	800b322 <_svfiprintf_r+0x186>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	1d1a      	adds	r2, r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	9203      	str	r2, [sp, #12]
 800b2c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2c8:	3402      	adds	r4, #2
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b390 <_svfiprintf_r+0x1f4>
 800b2d0:	7821      	ldrb	r1, [r4, #0]
 800b2d2:	2203      	movs	r2, #3
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f7f4 ff7b 	bl	80001d0 <memchr>
 800b2da:	b138      	cbz	r0, 800b2ec <_svfiprintf_r+0x150>
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	eba0 000a 	sub.w	r0, r0, sl
 800b2e2:	2240      	movs	r2, #64	@ 0x40
 800b2e4:	4082      	lsls	r2, r0
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	3401      	adds	r4, #1
 800b2ea:	9304      	str	r3, [sp, #16]
 800b2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f0:	4824      	ldr	r0, [pc, #144]	@ (800b384 <_svfiprintf_r+0x1e8>)
 800b2f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2f6:	2206      	movs	r2, #6
 800b2f8:	f7f4 ff6a 	bl	80001d0 <memchr>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d036      	beq.n	800b36e <_svfiprintf_r+0x1d2>
 800b300:	4b21      	ldr	r3, [pc, #132]	@ (800b388 <_svfiprintf_r+0x1ec>)
 800b302:	bb1b      	cbnz	r3, 800b34c <_svfiprintf_r+0x1b0>
 800b304:	9b03      	ldr	r3, [sp, #12]
 800b306:	3307      	adds	r3, #7
 800b308:	f023 0307 	bic.w	r3, r3, #7
 800b30c:	3308      	adds	r3, #8
 800b30e:	9303      	str	r3, [sp, #12]
 800b310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b312:	4433      	add	r3, r6
 800b314:	9309      	str	r3, [sp, #36]	@ 0x24
 800b316:	e76a      	b.n	800b1ee <_svfiprintf_r+0x52>
 800b318:	fb0c 3202 	mla	r2, ip, r2, r3
 800b31c:	460c      	mov	r4, r1
 800b31e:	2001      	movs	r0, #1
 800b320:	e7a8      	b.n	800b274 <_svfiprintf_r+0xd8>
 800b322:	2300      	movs	r3, #0
 800b324:	3401      	adds	r4, #1
 800b326:	9305      	str	r3, [sp, #20]
 800b328:	4619      	mov	r1, r3
 800b32a:	f04f 0c0a 	mov.w	ip, #10
 800b32e:	4620      	mov	r0, r4
 800b330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b334:	3a30      	subs	r2, #48	@ 0x30
 800b336:	2a09      	cmp	r2, #9
 800b338:	d903      	bls.n	800b342 <_svfiprintf_r+0x1a6>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0c6      	beq.n	800b2cc <_svfiprintf_r+0x130>
 800b33e:	9105      	str	r1, [sp, #20]
 800b340:	e7c4      	b.n	800b2cc <_svfiprintf_r+0x130>
 800b342:	fb0c 2101 	mla	r1, ip, r1, r2
 800b346:	4604      	mov	r4, r0
 800b348:	2301      	movs	r3, #1
 800b34a:	e7f0      	b.n	800b32e <_svfiprintf_r+0x192>
 800b34c:	ab03      	add	r3, sp, #12
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	462a      	mov	r2, r5
 800b352:	4b0e      	ldr	r3, [pc, #56]	@ (800b38c <_svfiprintf_r+0x1f0>)
 800b354:	a904      	add	r1, sp, #16
 800b356:	4638      	mov	r0, r7
 800b358:	f7fc fd88 	bl	8007e6c <_printf_float>
 800b35c:	1c42      	adds	r2, r0, #1
 800b35e:	4606      	mov	r6, r0
 800b360:	d1d6      	bne.n	800b310 <_svfiprintf_r+0x174>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	065b      	lsls	r3, r3, #25
 800b366:	f53f af2d 	bmi.w	800b1c4 <_svfiprintf_r+0x28>
 800b36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b36c:	e72c      	b.n	800b1c8 <_svfiprintf_r+0x2c>
 800b36e:	ab03      	add	r3, sp, #12
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	462a      	mov	r2, r5
 800b374:	4b05      	ldr	r3, [pc, #20]	@ (800b38c <_svfiprintf_r+0x1f0>)
 800b376:	a904      	add	r1, sp, #16
 800b378:	4638      	mov	r0, r7
 800b37a:	f7fd f80f 	bl	800839c <_printf_i>
 800b37e:	e7ed      	b.n	800b35c <_svfiprintf_r+0x1c0>
 800b380:	0800c079 	.word	0x0800c079
 800b384:	0800c083 	.word	0x0800c083
 800b388:	08007e6d 	.word	0x08007e6d
 800b38c:	0800b0e7 	.word	0x0800b0e7
 800b390:	0800c07f 	.word	0x0800c07f

0800b394 <__sfputc_r>:
 800b394:	6893      	ldr	r3, [r2, #8]
 800b396:	3b01      	subs	r3, #1
 800b398:	2b00      	cmp	r3, #0
 800b39a:	b410      	push	{r4}
 800b39c:	6093      	str	r3, [r2, #8]
 800b39e:	da08      	bge.n	800b3b2 <__sfputc_r+0x1e>
 800b3a0:	6994      	ldr	r4, [r2, #24]
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	db01      	blt.n	800b3aa <__sfputc_r+0x16>
 800b3a6:	290a      	cmp	r1, #10
 800b3a8:	d103      	bne.n	800b3b2 <__sfputc_r+0x1e>
 800b3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ae:	f7fd bcf2 	b.w	8008d96 <__swbuf_r>
 800b3b2:	6813      	ldr	r3, [r2, #0]
 800b3b4:	1c58      	adds	r0, r3, #1
 800b3b6:	6010      	str	r0, [r2, #0]
 800b3b8:	7019      	strb	r1, [r3, #0]
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <__sfputs_r>:
 800b3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	460f      	mov	r7, r1
 800b3c8:	4614      	mov	r4, r2
 800b3ca:	18d5      	adds	r5, r2, r3
 800b3cc:	42ac      	cmp	r4, r5
 800b3ce:	d101      	bne.n	800b3d4 <__sfputs_r+0x12>
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e007      	b.n	800b3e4 <__sfputs_r+0x22>
 800b3d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d8:	463a      	mov	r2, r7
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f7ff ffda 	bl	800b394 <__sfputc_r>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d1f3      	bne.n	800b3cc <__sfputs_r+0xa>
 800b3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3e8 <_vfiprintf_r>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	b09d      	sub	sp, #116	@ 0x74
 800b3f0:	4614      	mov	r4, r2
 800b3f2:	4698      	mov	r8, r3
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	b118      	cbz	r0, 800b400 <_vfiprintf_r+0x18>
 800b3f8:	6a03      	ldr	r3, [r0, #32]
 800b3fa:	b90b      	cbnz	r3, 800b400 <_vfiprintf_r+0x18>
 800b3fc:	f7fd fb8e 	bl	8008b1c <__sinit>
 800b400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <_vfiprintf_r+0x2a>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_vfiprintf_r+0x2a>
 800b40c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b40e:	f7fd fe58 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800b412:	89ab      	ldrh	r3, [r5, #12]
 800b414:	071b      	lsls	r3, r3, #28
 800b416:	d501      	bpl.n	800b41c <_vfiprintf_r+0x34>
 800b418:	692b      	ldr	r3, [r5, #16]
 800b41a:	b99b      	cbnz	r3, 800b444 <_vfiprintf_r+0x5c>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f7fd fcf8 	bl	8008e14 <__swsetup_r>
 800b424:	b170      	cbz	r0, 800b444 <_vfiprintf_r+0x5c>
 800b426:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b428:	07dc      	lsls	r4, r3, #31
 800b42a:	d504      	bpl.n	800b436 <_vfiprintf_r+0x4e>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	b01d      	add	sp, #116	@ 0x74
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	0598      	lsls	r0, r3, #22
 800b43a:	d4f7      	bmi.n	800b42c <_vfiprintf_r+0x44>
 800b43c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b43e:	f7fd fe41 	bl	80090c4 <__retarget_lock_release_recursive>
 800b442:	e7f3      	b.n	800b42c <_vfiprintf_r+0x44>
 800b444:	2300      	movs	r3, #0
 800b446:	9309      	str	r3, [sp, #36]	@ 0x24
 800b448:	2320      	movs	r3, #32
 800b44a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b452:	2330      	movs	r3, #48	@ 0x30
 800b454:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b604 <_vfiprintf_r+0x21c>
 800b458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b45c:	f04f 0901 	mov.w	r9, #1
 800b460:	4623      	mov	r3, r4
 800b462:	469a      	mov	sl, r3
 800b464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b468:	b10a      	cbz	r2, 800b46e <_vfiprintf_r+0x86>
 800b46a:	2a25      	cmp	r2, #37	@ 0x25
 800b46c:	d1f9      	bne.n	800b462 <_vfiprintf_r+0x7a>
 800b46e:	ebba 0b04 	subs.w	fp, sl, r4
 800b472:	d00b      	beq.n	800b48c <_vfiprintf_r+0xa4>
 800b474:	465b      	mov	r3, fp
 800b476:	4622      	mov	r2, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	4630      	mov	r0, r6
 800b47c:	f7ff ffa1 	bl	800b3c2 <__sfputs_r>
 800b480:	3001      	adds	r0, #1
 800b482:	f000 80a7 	beq.w	800b5d4 <_vfiprintf_r+0x1ec>
 800b486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b488:	445a      	add	r2, fp
 800b48a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b48c:	f89a 3000 	ldrb.w	r3, [sl]
 800b490:	2b00      	cmp	r3, #0
 800b492:	f000 809f 	beq.w	800b5d4 <_vfiprintf_r+0x1ec>
 800b496:	2300      	movs	r3, #0
 800b498:	f04f 32ff 	mov.w	r2, #4294967295
 800b49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a0:	f10a 0a01 	add.w	sl, sl, #1
 800b4a4:	9304      	str	r3, [sp, #16]
 800b4a6:	9307      	str	r3, [sp, #28]
 800b4a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ae:	4654      	mov	r4, sl
 800b4b0:	2205      	movs	r2, #5
 800b4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b6:	4853      	ldr	r0, [pc, #332]	@ (800b604 <_vfiprintf_r+0x21c>)
 800b4b8:	f7f4 fe8a 	bl	80001d0 <memchr>
 800b4bc:	9a04      	ldr	r2, [sp, #16]
 800b4be:	b9d8      	cbnz	r0, 800b4f8 <_vfiprintf_r+0x110>
 800b4c0:	06d1      	lsls	r1, r2, #27
 800b4c2:	bf44      	itt	mi
 800b4c4:	2320      	movmi	r3, #32
 800b4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ca:	0713      	lsls	r3, r2, #28
 800b4cc:	bf44      	itt	mi
 800b4ce:	232b      	movmi	r3, #43	@ 0x2b
 800b4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4da:	d015      	beq.n	800b508 <_vfiprintf_r+0x120>
 800b4dc:	9a07      	ldr	r2, [sp, #28]
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ec:	3b30      	subs	r3, #48	@ 0x30
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	d94b      	bls.n	800b58a <_vfiprintf_r+0x1a2>
 800b4f2:	b1b0      	cbz	r0, 800b522 <_vfiprintf_r+0x13a>
 800b4f4:	9207      	str	r2, [sp, #28]
 800b4f6:	e014      	b.n	800b522 <_vfiprintf_r+0x13a>
 800b4f8:	eba0 0308 	sub.w	r3, r0, r8
 800b4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	46a2      	mov	sl, r4
 800b506:	e7d2      	b.n	800b4ae <_vfiprintf_r+0xc6>
 800b508:	9b03      	ldr	r3, [sp, #12]
 800b50a:	1d19      	adds	r1, r3, #4
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	9103      	str	r1, [sp, #12]
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfbb      	ittet	lt
 800b514:	425b      	neglt	r3, r3
 800b516:	f042 0202 	orrlt.w	r2, r2, #2
 800b51a:	9307      	strge	r3, [sp, #28]
 800b51c:	9307      	strlt	r3, [sp, #28]
 800b51e:	bfb8      	it	lt
 800b520:	9204      	strlt	r2, [sp, #16]
 800b522:	7823      	ldrb	r3, [r4, #0]
 800b524:	2b2e      	cmp	r3, #46	@ 0x2e
 800b526:	d10a      	bne.n	800b53e <_vfiprintf_r+0x156>
 800b528:	7863      	ldrb	r3, [r4, #1]
 800b52a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b52c:	d132      	bne.n	800b594 <_vfiprintf_r+0x1ac>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d1a      	adds	r2, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9203      	str	r2, [sp, #12]
 800b536:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b53a:	3402      	adds	r4, #2
 800b53c:	9305      	str	r3, [sp, #20]
 800b53e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b614 <_vfiprintf_r+0x22c>
 800b542:	7821      	ldrb	r1, [r4, #0]
 800b544:	2203      	movs	r2, #3
 800b546:	4650      	mov	r0, sl
 800b548:	f7f4 fe42 	bl	80001d0 <memchr>
 800b54c:	b138      	cbz	r0, 800b55e <_vfiprintf_r+0x176>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	eba0 000a 	sub.w	r0, r0, sl
 800b554:	2240      	movs	r2, #64	@ 0x40
 800b556:	4082      	lsls	r2, r0
 800b558:	4313      	orrs	r3, r2
 800b55a:	3401      	adds	r4, #1
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b562:	4829      	ldr	r0, [pc, #164]	@ (800b608 <_vfiprintf_r+0x220>)
 800b564:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b568:	2206      	movs	r2, #6
 800b56a:	f7f4 fe31 	bl	80001d0 <memchr>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d03f      	beq.n	800b5f2 <_vfiprintf_r+0x20a>
 800b572:	4b26      	ldr	r3, [pc, #152]	@ (800b60c <_vfiprintf_r+0x224>)
 800b574:	bb1b      	cbnz	r3, 800b5be <_vfiprintf_r+0x1d6>
 800b576:	9b03      	ldr	r3, [sp, #12]
 800b578:	3307      	adds	r3, #7
 800b57a:	f023 0307 	bic.w	r3, r3, #7
 800b57e:	3308      	adds	r3, #8
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b584:	443b      	add	r3, r7
 800b586:	9309      	str	r3, [sp, #36]	@ 0x24
 800b588:	e76a      	b.n	800b460 <_vfiprintf_r+0x78>
 800b58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b58e:	460c      	mov	r4, r1
 800b590:	2001      	movs	r0, #1
 800b592:	e7a8      	b.n	800b4e6 <_vfiprintf_r+0xfe>
 800b594:	2300      	movs	r3, #0
 800b596:	3401      	adds	r4, #1
 800b598:	9305      	str	r3, [sp, #20]
 800b59a:	4619      	mov	r1, r3
 800b59c:	f04f 0c0a 	mov.w	ip, #10
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a6:	3a30      	subs	r2, #48	@ 0x30
 800b5a8:	2a09      	cmp	r2, #9
 800b5aa:	d903      	bls.n	800b5b4 <_vfiprintf_r+0x1cc>
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d0c6      	beq.n	800b53e <_vfiprintf_r+0x156>
 800b5b0:	9105      	str	r1, [sp, #20]
 800b5b2:	e7c4      	b.n	800b53e <_vfiprintf_r+0x156>
 800b5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e7f0      	b.n	800b5a0 <_vfiprintf_r+0x1b8>
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4b12      	ldr	r3, [pc, #72]	@ (800b610 <_vfiprintf_r+0x228>)
 800b5c6:	a904      	add	r1, sp, #16
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7fc fc4f 	bl	8007e6c <_printf_float>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	1c78      	adds	r0, r7, #1
 800b5d2:	d1d6      	bne.n	800b582 <_vfiprintf_r+0x19a>
 800b5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5d6:	07d9      	lsls	r1, r3, #31
 800b5d8:	d405      	bmi.n	800b5e6 <_vfiprintf_r+0x1fe>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	059a      	lsls	r2, r3, #22
 800b5de:	d402      	bmi.n	800b5e6 <_vfiprintf_r+0x1fe>
 800b5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e2:	f7fd fd6f 	bl	80090c4 <__retarget_lock_release_recursive>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	065b      	lsls	r3, r3, #25
 800b5ea:	f53f af1f 	bmi.w	800b42c <_vfiprintf_r+0x44>
 800b5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f0:	e71e      	b.n	800b430 <_vfiprintf_r+0x48>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b05      	ldr	r3, [pc, #20]	@ (800b610 <_vfiprintf_r+0x228>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7fc fecd 	bl	800839c <_printf_i>
 800b602:	e7e4      	b.n	800b5ce <_vfiprintf_r+0x1e6>
 800b604:	0800c079 	.word	0x0800c079
 800b608:	0800c083 	.word	0x0800c083
 800b60c:	08007e6d 	.word	0x08007e6d
 800b610:	0800b3c3 	.word	0x0800b3c3
 800b614:	0800c07f 	.word	0x0800c07f

0800b618 <__sflush_r>:
 800b618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	0716      	lsls	r6, r2, #28
 800b622:	4605      	mov	r5, r0
 800b624:	460c      	mov	r4, r1
 800b626:	d454      	bmi.n	800b6d2 <__sflush_r+0xba>
 800b628:	684b      	ldr	r3, [r1, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	dc02      	bgt.n	800b634 <__sflush_r+0x1c>
 800b62e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b630:	2b00      	cmp	r3, #0
 800b632:	dd48      	ble.n	800b6c6 <__sflush_r+0xae>
 800b634:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b636:	2e00      	cmp	r6, #0
 800b638:	d045      	beq.n	800b6c6 <__sflush_r+0xae>
 800b63a:	2300      	movs	r3, #0
 800b63c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b640:	682f      	ldr	r7, [r5, #0]
 800b642:	6a21      	ldr	r1, [r4, #32]
 800b644:	602b      	str	r3, [r5, #0]
 800b646:	d030      	beq.n	800b6aa <__sflush_r+0x92>
 800b648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	0759      	lsls	r1, r3, #29
 800b64e:	d505      	bpl.n	800b65c <__sflush_r+0x44>
 800b650:	6863      	ldr	r3, [r4, #4]
 800b652:	1ad2      	subs	r2, r2, r3
 800b654:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b656:	b10b      	cbz	r3, 800b65c <__sflush_r+0x44>
 800b658:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b65a:	1ad2      	subs	r2, r2, r3
 800b65c:	2300      	movs	r3, #0
 800b65e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b660:	6a21      	ldr	r1, [r4, #32]
 800b662:	4628      	mov	r0, r5
 800b664:	47b0      	blx	r6
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	d106      	bne.n	800b67a <__sflush_r+0x62>
 800b66c:	6829      	ldr	r1, [r5, #0]
 800b66e:	291d      	cmp	r1, #29
 800b670:	d82b      	bhi.n	800b6ca <__sflush_r+0xb2>
 800b672:	4a2a      	ldr	r2, [pc, #168]	@ (800b71c <__sflush_r+0x104>)
 800b674:	410a      	asrs	r2, r1
 800b676:	07d6      	lsls	r6, r2, #31
 800b678:	d427      	bmi.n	800b6ca <__sflush_r+0xb2>
 800b67a:	2200      	movs	r2, #0
 800b67c:	6062      	str	r2, [r4, #4]
 800b67e:	04d9      	lsls	r1, r3, #19
 800b680:	6922      	ldr	r2, [r4, #16]
 800b682:	6022      	str	r2, [r4, #0]
 800b684:	d504      	bpl.n	800b690 <__sflush_r+0x78>
 800b686:	1c42      	adds	r2, r0, #1
 800b688:	d101      	bne.n	800b68e <__sflush_r+0x76>
 800b68a:	682b      	ldr	r3, [r5, #0]
 800b68c:	b903      	cbnz	r3, 800b690 <__sflush_r+0x78>
 800b68e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b692:	602f      	str	r7, [r5, #0]
 800b694:	b1b9      	cbz	r1, 800b6c6 <__sflush_r+0xae>
 800b696:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d002      	beq.n	800b6a4 <__sflush_r+0x8c>
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f7fe fb9a 	bl	8009dd8 <_free_r>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6a8:	e00d      	b.n	800b6c6 <__sflush_r+0xae>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	47b0      	blx	r6
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	1c50      	adds	r0, r2, #1
 800b6b4:	d1c9      	bne.n	800b64a <__sflush_r+0x32>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0c6      	beq.n	800b64a <__sflush_r+0x32>
 800b6bc:	2b1d      	cmp	r3, #29
 800b6be:	d001      	beq.n	800b6c4 <__sflush_r+0xac>
 800b6c0:	2b16      	cmp	r3, #22
 800b6c2:	d11e      	bne.n	800b702 <__sflush_r+0xea>
 800b6c4:	602f      	str	r7, [r5, #0]
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e022      	b.n	800b710 <__sflush_r+0xf8>
 800b6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ce:	b21b      	sxth	r3, r3
 800b6d0:	e01b      	b.n	800b70a <__sflush_r+0xf2>
 800b6d2:	690f      	ldr	r7, [r1, #16]
 800b6d4:	2f00      	cmp	r7, #0
 800b6d6:	d0f6      	beq.n	800b6c6 <__sflush_r+0xae>
 800b6d8:	0793      	lsls	r3, r2, #30
 800b6da:	680e      	ldr	r6, [r1, #0]
 800b6dc:	bf08      	it	eq
 800b6de:	694b      	ldreq	r3, [r1, #20]
 800b6e0:	600f      	str	r7, [r1, #0]
 800b6e2:	bf18      	it	ne
 800b6e4:	2300      	movne	r3, #0
 800b6e6:	eba6 0807 	sub.w	r8, r6, r7
 800b6ea:	608b      	str	r3, [r1, #8]
 800b6ec:	f1b8 0f00 	cmp.w	r8, #0
 800b6f0:	dde9      	ble.n	800b6c6 <__sflush_r+0xae>
 800b6f2:	6a21      	ldr	r1, [r4, #32]
 800b6f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b6f6:	4643      	mov	r3, r8
 800b6f8:	463a      	mov	r2, r7
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	47b0      	blx	r6
 800b6fe:	2800      	cmp	r0, #0
 800b700:	dc08      	bgt.n	800b714 <__sflush_r+0xfc>
 800b702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	f04f 30ff 	mov.w	r0, #4294967295
 800b710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b714:	4407      	add	r7, r0
 800b716:	eba8 0800 	sub.w	r8, r8, r0
 800b71a:	e7e7      	b.n	800b6ec <__sflush_r+0xd4>
 800b71c:	dfbffffe 	.word	0xdfbffffe

0800b720 <_fflush_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	690b      	ldr	r3, [r1, #16]
 800b724:	4605      	mov	r5, r0
 800b726:	460c      	mov	r4, r1
 800b728:	b913      	cbnz	r3, 800b730 <_fflush_r+0x10>
 800b72a:	2500      	movs	r5, #0
 800b72c:	4628      	mov	r0, r5
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	b118      	cbz	r0, 800b73a <_fflush_r+0x1a>
 800b732:	6a03      	ldr	r3, [r0, #32]
 800b734:	b90b      	cbnz	r3, 800b73a <_fflush_r+0x1a>
 800b736:	f7fd f9f1 	bl	8008b1c <__sinit>
 800b73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0f3      	beq.n	800b72a <_fflush_r+0xa>
 800b742:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b744:	07d0      	lsls	r0, r2, #31
 800b746:	d404      	bmi.n	800b752 <_fflush_r+0x32>
 800b748:	0599      	lsls	r1, r3, #22
 800b74a:	d402      	bmi.n	800b752 <_fflush_r+0x32>
 800b74c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b74e:	f7fd fcb8 	bl	80090c2 <__retarget_lock_acquire_recursive>
 800b752:	4628      	mov	r0, r5
 800b754:	4621      	mov	r1, r4
 800b756:	f7ff ff5f 	bl	800b618 <__sflush_r>
 800b75a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b75c:	07da      	lsls	r2, r3, #31
 800b75e:	4605      	mov	r5, r0
 800b760:	d4e4      	bmi.n	800b72c <_fflush_r+0xc>
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	059b      	lsls	r3, r3, #22
 800b766:	d4e1      	bmi.n	800b72c <_fflush_r+0xc>
 800b768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b76a:	f7fd fcab 	bl	80090c4 <__retarget_lock_release_recursive>
 800b76e:	e7dd      	b.n	800b72c <_fflush_r+0xc>

0800b770 <fiprintf>:
 800b770:	b40e      	push	{r1, r2, r3}
 800b772:	b503      	push	{r0, r1, lr}
 800b774:	4601      	mov	r1, r0
 800b776:	ab03      	add	r3, sp, #12
 800b778:	4805      	ldr	r0, [pc, #20]	@ (800b790 <fiprintf+0x20>)
 800b77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b77e:	6800      	ldr	r0, [r0, #0]
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	f7ff fe31 	bl	800b3e8 <_vfiprintf_r>
 800b786:	b002      	add	sp, #8
 800b788:	f85d eb04 	ldr.w	lr, [sp], #4
 800b78c:	b003      	add	sp, #12
 800b78e:	4770      	bx	lr
 800b790:	20000204 	.word	0x20000204

0800b794 <__swhatbuf_r>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	460c      	mov	r4, r1
 800b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	b096      	sub	sp, #88	@ 0x58
 800b7a0:	4615      	mov	r5, r2
 800b7a2:	461e      	mov	r6, r3
 800b7a4:	da0d      	bge.n	800b7c2 <__swhatbuf_r+0x2e>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7ac:	f04f 0100 	mov.w	r1, #0
 800b7b0:	bf14      	ite	ne
 800b7b2:	2340      	movne	r3, #64	@ 0x40
 800b7b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	6031      	str	r1, [r6, #0]
 800b7bc:	602b      	str	r3, [r5, #0]
 800b7be:	b016      	add	sp, #88	@ 0x58
 800b7c0:	bd70      	pop	{r4, r5, r6, pc}
 800b7c2:	466a      	mov	r2, sp
 800b7c4:	f000 f862 	bl	800b88c <_fstat_r>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	dbec      	blt.n	800b7a6 <__swhatbuf_r+0x12>
 800b7cc:	9901      	ldr	r1, [sp, #4]
 800b7ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7d6:	4259      	negs	r1, r3
 800b7d8:	4159      	adcs	r1, r3
 800b7da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7de:	e7eb      	b.n	800b7b8 <__swhatbuf_r+0x24>

0800b7e0 <__smakebuf_r>:
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7e4:	079d      	lsls	r5, r3, #30
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	d507      	bpl.n	800b7fc <__smakebuf_r+0x1c>
 800b7ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	6163      	str	r3, [r4, #20]
 800b7f8:	b003      	add	sp, #12
 800b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7fc:	ab01      	add	r3, sp, #4
 800b7fe:	466a      	mov	r2, sp
 800b800:	f7ff ffc8 	bl	800b794 <__swhatbuf_r>
 800b804:	9f00      	ldr	r7, [sp, #0]
 800b806:	4605      	mov	r5, r0
 800b808:	4639      	mov	r1, r7
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7fe fe92 	bl	800a534 <_malloc_r>
 800b810:	b948      	cbnz	r0, 800b826 <__smakebuf_r+0x46>
 800b812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b816:	059a      	lsls	r2, r3, #22
 800b818:	d4ee      	bmi.n	800b7f8 <__smakebuf_r+0x18>
 800b81a:	f023 0303 	bic.w	r3, r3, #3
 800b81e:	f043 0302 	orr.w	r3, r3, #2
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	e7e2      	b.n	800b7ec <__smakebuf_r+0xc>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	6020      	str	r0, [r4, #0]
 800b82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b836:	b15b      	cbz	r3, 800b850 <__smakebuf_r+0x70>
 800b838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b83c:	4630      	mov	r0, r6
 800b83e:	f000 f837 	bl	800b8b0 <_isatty_r>
 800b842:	b128      	cbz	r0, 800b850 <__smakebuf_r+0x70>
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	f023 0303 	bic.w	r3, r3, #3
 800b84a:	f043 0301 	orr.w	r3, r3, #1
 800b84e:	81a3      	strh	r3, [r4, #12]
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	431d      	orrs	r5, r3
 800b854:	81a5      	strh	r5, [r4, #12]
 800b856:	e7cf      	b.n	800b7f8 <__smakebuf_r+0x18>

0800b858 <memmove>:
 800b858:	4288      	cmp	r0, r1
 800b85a:	b510      	push	{r4, lr}
 800b85c:	eb01 0402 	add.w	r4, r1, r2
 800b860:	d902      	bls.n	800b868 <memmove+0x10>
 800b862:	4284      	cmp	r4, r0
 800b864:	4623      	mov	r3, r4
 800b866:	d807      	bhi.n	800b878 <memmove+0x20>
 800b868:	1e43      	subs	r3, r0, #1
 800b86a:	42a1      	cmp	r1, r4
 800b86c:	d008      	beq.n	800b880 <memmove+0x28>
 800b86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b872:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b876:	e7f8      	b.n	800b86a <memmove+0x12>
 800b878:	4402      	add	r2, r0
 800b87a:	4601      	mov	r1, r0
 800b87c:	428a      	cmp	r2, r1
 800b87e:	d100      	bne.n	800b882 <memmove+0x2a>
 800b880:	bd10      	pop	{r4, pc}
 800b882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b88a:	e7f7      	b.n	800b87c <memmove+0x24>

0800b88c <_fstat_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	@ (800b8ac <_fstat_r+0x20>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	f7f8 ffbb 	bl	8004814 <_fstat>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d102      	bne.n	800b8a8 <_fstat_r+0x1c>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	b103      	cbz	r3, 800b8a8 <_fstat_r+0x1c>
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	bd38      	pop	{r3, r4, r5, pc}
 800b8aa:	bf00      	nop
 800b8ac:	200007b8 	.word	0x200007b8

0800b8b0 <_isatty_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d06      	ldr	r5, [pc, #24]	@ (800b8cc <_isatty_r+0x1c>)
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	4608      	mov	r0, r1
 800b8ba:	602b      	str	r3, [r5, #0]
 800b8bc:	f7f8 ffba 	bl	8004834 <_isatty>
 800b8c0:	1c43      	adds	r3, r0, #1
 800b8c2:	d102      	bne.n	800b8ca <_isatty_r+0x1a>
 800b8c4:	682b      	ldr	r3, [r5, #0]
 800b8c6:	b103      	cbz	r3, 800b8ca <_isatty_r+0x1a>
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	bd38      	pop	{r3, r4, r5, pc}
 800b8cc:	200007b8 	.word	0x200007b8

0800b8d0 <_sbrk_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d06      	ldr	r5, [pc, #24]	@ (800b8ec <_sbrk_r+0x1c>)
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4608      	mov	r0, r1
 800b8da:	602b      	str	r3, [r5, #0]
 800b8dc:	f7f8 ffc2 	bl	8004864 <_sbrk>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_sbrk_r+0x1a>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_sbrk_r+0x1a>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	200007b8 	.word	0x200007b8

0800b8f0 <abort>:
 800b8f0:	b508      	push	{r3, lr}
 800b8f2:	2006      	movs	r0, #6
 800b8f4:	f000 f86e 	bl	800b9d4 <raise>
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	f7f8 ff57 	bl	80047ac <_exit>

0800b8fe <_calloc_r>:
 800b8fe:	b570      	push	{r4, r5, r6, lr}
 800b900:	fba1 5402 	umull	r5, r4, r1, r2
 800b904:	b93c      	cbnz	r4, 800b916 <_calloc_r+0x18>
 800b906:	4629      	mov	r1, r5
 800b908:	f7fe fe14 	bl	800a534 <_malloc_r>
 800b90c:	4606      	mov	r6, r0
 800b90e:	b928      	cbnz	r0, 800b91c <_calloc_r+0x1e>
 800b910:	2600      	movs	r6, #0
 800b912:	4630      	mov	r0, r6
 800b914:	bd70      	pop	{r4, r5, r6, pc}
 800b916:	220c      	movs	r2, #12
 800b918:	6002      	str	r2, [r0, #0]
 800b91a:	e7f9      	b.n	800b910 <_calloc_r+0x12>
 800b91c:	462a      	mov	r2, r5
 800b91e:	4621      	mov	r1, r4
 800b920:	f7fd face 	bl	8008ec0 <memset>
 800b924:	e7f5      	b.n	800b912 <_calloc_r+0x14>

0800b926 <_realloc_r>:
 800b926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92a:	4680      	mov	r8, r0
 800b92c:	4615      	mov	r5, r2
 800b92e:	460c      	mov	r4, r1
 800b930:	b921      	cbnz	r1, 800b93c <_realloc_r+0x16>
 800b932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b936:	4611      	mov	r1, r2
 800b938:	f7fe bdfc 	b.w	800a534 <_malloc_r>
 800b93c:	b92a      	cbnz	r2, 800b94a <_realloc_r+0x24>
 800b93e:	f7fe fa4b 	bl	8009dd8 <_free_r>
 800b942:	2400      	movs	r4, #0
 800b944:	4620      	mov	r0, r4
 800b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94a:	f000 f85f 	bl	800ba0c <_malloc_usable_size_r>
 800b94e:	4285      	cmp	r5, r0
 800b950:	4606      	mov	r6, r0
 800b952:	d802      	bhi.n	800b95a <_realloc_r+0x34>
 800b954:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b958:	d8f4      	bhi.n	800b944 <_realloc_r+0x1e>
 800b95a:	4629      	mov	r1, r5
 800b95c:	4640      	mov	r0, r8
 800b95e:	f7fe fde9 	bl	800a534 <_malloc_r>
 800b962:	4607      	mov	r7, r0
 800b964:	2800      	cmp	r0, #0
 800b966:	d0ec      	beq.n	800b942 <_realloc_r+0x1c>
 800b968:	42b5      	cmp	r5, r6
 800b96a:	462a      	mov	r2, r5
 800b96c:	4621      	mov	r1, r4
 800b96e:	bf28      	it	cs
 800b970:	4632      	movcs	r2, r6
 800b972:	f7fd fba8 	bl	80090c6 <memcpy>
 800b976:	4621      	mov	r1, r4
 800b978:	4640      	mov	r0, r8
 800b97a:	f7fe fa2d 	bl	8009dd8 <_free_r>
 800b97e:	463c      	mov	r4, r7
 800b980:	e7e0      	b.n	800b944 <_realloc_r+0x1e>

0800b982 <_raise_r>:
 800b982:	291f      	cmp	r1, #31
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4605      	mov	r5, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	d904      	bls.n	800b996 <_raise_r+0x14>
 800b98c:	2316      	movs	r3, #22
 800b98e:	6003      	str	r3, [r0, #0]
 800b990:	f04f 30ff 	mov.w	r0, #4294967295
 800b994:	bd38      	pop	{r3, r4, r5, pc}
 800b996:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b998:	b112      	cbz	r2, 800b9a0 <_raise_r+0x1e>
 800b99a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b99e:	b94b      	cbnz	r3, 800b9b4 <_raise_r+0x32>
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f000 f831 	bl	800ba08 <_getpid_r>
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9b0:	f000 b818 	b.w	800b9e4 <_kill_r>
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d00a      	beq.n	800b9ce <_raise_r+0x4c>
 800b9b8:	1c59      	adds	r1, r3, #1
 800b9ba:	d103      	bne.n	800b9c4 <_raise_r+0x42>
 800b9bc:	2316      	movs	r3, #22
 800b9be:	6003      	str	r3, [r0, #0]
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	e7e7      	b.n	800b994 <_raise_r+0x12>
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	4798      	blx	r3
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	e7e0      	b.n	800b994 <_raise_r+0x12>
	...

0800b9d4 <raise>:
 800b9d4:	4b02      	ldr	r3, [pc, #8]	@ (800b9e0 <raise+0xc>)
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	f7ff bfd2 	b.w	800b982 <_raise_r>
 800b9de:	bf00      	nop
 800b9e0:	20000204 	.word	0x20000204

0800b9e4 <_kill_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4d07      	ldr	r5, [pc, #28]	@ (800ba04 <_kill_r+0x20>)
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	602b      	str	r3, [r5, #0]
 800b9f2:	f7f8 fecb 	bl	800478c <_kill>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	d102      	bne.n	800ba00 <_kill_r+0x1c>
 800b9fa:	682b      	ldr	r3, [r5, #0]
 800b9fc:	b103      	cbz	r3, 800ba00 <_kill_r+0x1c>
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
 800ba02:	bf00      	nop
 800ba04:	200007b8 	.word	0x200007b8

0800ba08 <_getpid_r>:
 800ba08:	f7f8 beb8 	b.w	800477c <_getpid>

0800ba0c <_malloc_usable_size_r>:
 800ba0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba10:	1f18      	subs	r0, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	bfbc      	itt	lt
 800ba16:	580b      	ldrlt	r3, [r1, r0]
 800ba18:	18c0      	addlt	r0, r0, r3
 800ba1a:	4770      	bx	lr

0800ba1c <fmax>:
 800ba1c:	b508      	push	{r3, lr}
 800ba1e:	ed2d 8b04 	vpush	{d8-d9}
 800ba22:	eeb0 8a40 	vmov.f32	s16, s0
 800ba26:	eef0 8a60 	vmov.f32	s17, s1
 800ba2a:	eeb0 9a41 	vmov.f32	s18, s2
 800ba2e:	eef0 9a61 	vmov.f32	s19, s3
 800ba32:	f000 f847 	bl	800bac4 <__fpclassifyd>
 800ba36:	b950      	cbnz	r0, 800ba4e <fmax+0x32>
 800ba38:	eeb0 8a49 	vmov.f32	s16, s18
 800ba3c:	eef0 8a69 	vmov.f32	s17, s19
 800ba40:	eeb0 0a48 	vmov.f32	s0, s16
 800ba44:	eef0 0a68 	vmov.f32	s1, s17
 800ba48:	ecbd 8b04 	vpop	{d8-d9}
 800ba4c:	bd08      	pop	{r3, pc}
 800ba4e:	eeb0 0a49 	vmov.f32	s0, s18
 800ba52:	eef0 0a69 	vmov.f32	s1, s19
 800ba56:	f000 f835 	bl	800bac4 <__fpclassifyd>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d0f0      	beq.n	800ba40 <fmax+0x24>
 800ba5e:	ec53 2b19 	vmov	r2, r3, d9
 800ba62:	ec51 0b18 	vmov	r0, r1, d8
 800ba66:	f7f5 f857 	bl	8000b18 <__aeabi_dcmpgt>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d0e4      	beq.n	800ba38 <fmax+0x1c>
 800ba6e:	e7e7      	b.n	800ba40 <fmax+0x24>

0800ba70 <fmin>:
 800ba70:	b508      	push	{r3, lr}
 800ba72:	ed2d 8b04 	vpush	{d8-d9}
 800ba76:	eeb0 8a40 	vmov.f32	s16, s0
 800ba7a:	eef0 8a60 	vmov.f32	s17, s1
 800ba7e:	eeb0 9a41 	vmov.f32	s18, s2
 800ba82:	eef0 9a61 	vmov.f32	s19, s3
 800ba86:	f000 f81d 	bl	800bac4 <__fpclassifyd>
 800ba8a:	b950      	cbnz	r0, 800baa2 <fmin+0x32>
 800ba8c:	eeb0 8a49 	vmov.f32	s16, s18
 800ba90:	eef0 8a69 	vmov.f32	s17, s19
 800ba94:	eeb0 0a48 	vmov.f32	s0, s16
 800ba98:	eef0 0a68 	vmov.f32	s1, s17
 800ba9c:	ecbd 8b04 	vpop	{d8-d9}
 800baa0:	bd08      	pop	{r3, pc}
 800baa2:	eeb0 0a49 	vmov.f32	s0, s18
 800baa6:	eef0 0a69 	vmov.f32	s1, s19
 800baaa:	f000 f80b 	bl	800bac4 <__fpclassifyd>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0f0      	beq.n	800ba94 <fmin+0x24>
 800bab2:	ec53 2b19 	vmov	r2, r3, d9
 800bab6:	ec51 0b18 	vmov	r0, r1, d8
 800baba:	f7f5 f80f 	bl	8000adc <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d0e4      	beq.n	800ba8c <fmin+0x1c>
 800bac2:	e7e7      	b.n	800ba94 <fmin+0x24>

0800bac4 <__fpclassifyd>:
 800bac4:	ec51 0b10 	vmov	r0, r1, d0
 800bac8:	b510      	push	{r4, lr}
 800baca:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800bace:	460b      	mov	r3, r1
 800bad0:	d019      	beq.n	800bb06 <__fpclassifyd+0x42>
 800bad2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800bad6:	490e      	ldr	r1, [pc, #56]	@ (800bb10 <__fpclassifyd+0x4c>)
 800bad8:	428a      	cmp	r2, r1
 800bada:	d90e      	bls.n	800bafa <__fpclassifyd+0x36>
 800badc:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800bae0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800bae4:	428a      	cmp	r2, r1
 800bae6:	d908      	bls.n	800bafa <__fpclassifyd+0x36>
 800bae8:	4a0a      	ldr	r2, [pc, #40]	@ (800bb14 <__fpclassifyd+0x50>)
 800baea:	4213      	tst	r3, r2
 800baec:	d007      	beq.n	800bafe <__fpclassifyd+0x3a>
 800baee:	4294      	cmp	r4, r2
 800baf0:	d107      	bne.n	800bb02 <__fpclassifyd+0x3e>
 800baf2:	fab0 f080 	clz	r0, r0
 800baf6:	0940      	lsrs	r0, r0, #5
 800baf8:	bd10      	pop	{r4, pc}
 800bafa:	2004      	movs	r0, #4
 800bafc:	e7fc      	b.n	800baf8 <__fpclassifyd+0x34>
 800bafe:	2003      	movs	r0, #3
 800bb00:	e7fa      	b.n	800baf8 <__fpclassifyd+0x34>
 800bb02:	2000      	movs	r0, #0
 800bb04:	e7f8      	b.n	800baf8 <__fpclassifyd+0x34>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1ee      	bne.n	800bae8 <__fpclassifyd+0x24>
 800bb0a:	2002      	movs	r0, #2
 800bb0c:	e7f4      	b.n	800baf8 <__fpclassifyd+0x34>
 800bb0e:	bf00      	nop
 800bb10:	7fdfffff 	.word	0x7fdfffff
 800bb14:	7ff00000 	.word	0x7ff00000

0800bb18 <_init>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	bf00      	nop
 800bb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1e:	bc08      	pop	{r3}
 800bb20:	469e      	mov	lr, r3
 800bb22:	4770      	bx	lr

0800bb24 <_fini>:
 800bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb26:	bf00      	nop
 800bb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2a:	bc08      	pop	{r3}
 800bb2c:	469e      	mov	lr, r3
 800bb2e:	4770      	bx	lr
